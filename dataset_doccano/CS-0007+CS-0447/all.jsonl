{"id":44, "segment": ["train_set", "labeled"], "course": "cs0007", "lec": "lec16","text":"CS 0007: Introduction to Java\nLecture 16\nNathan Ong\nUniversity of Pittsburgh\nNovember 3, 2016\n\n\fMain Portions of OOP\n• Building a class\n• Determining inter-class relationships\n– Subclasses\n– Superclasses\n– Ownership\n\n\fRecap\nA class needs these components:\n• Class-level\/Instance Variables\n• Methods\n• Constructor(s)\n\n\fCar Example\npublic class Car\n{\nprivate static int nextIDNum = 0;\nprivate final int idNum;\nprivate Color color;\nprivate String licensePlate;\npublic Car(Color color)\n{\nthis.color = color;\nthis.idNum = Car.nextIDNum;\nCar.nextIDNum++;\n…\n}\/\/end constructor(Color)\n…\n}\/\/End class Car\n\n\fOverloading Constructors\npublic class Car\n{\n…\npublic Car(Color color)\n{\nthis.color = color;\nthis.idNum = Car.nextIDNum;\nCar.nextIDNum++;\n…\n}\/\/end constructor(Color)\n\/\/default color is Color.RED\npublic Car()\n{\nthis(Color.RED);\n}\/\/end constructor()\n…\n}\/\/End class Car\n\nReferencing\nother\nconstructors\ncan be done\nwith the\n\n\fFunctional Functions\n• The most common functions are getters\nand setters\n– Getters retrieve the values of instance\nvariables and return them\n– Setters alter the values of the instance\nvariables\n\n• Why use these functions rather than\nsetting the variable to be public?\n• Control!\n\n\fCar Example\npublic class Car\n{\nprivate static int nextIDNum = 0;\nprivate final int idNum;\nprivate Color color;\nprivate String licensePlate;\npublic int getIDNum()\n{\nreturn this.idNum;\n}\/\/end function()\n…\n}\/\/End class Car\n\n\fCar Example\npublic class Car\n{\nprivate static int nextIDNum = 0;\nprivate final int idNum;\nprivate Color color;\nprivate String licensePlate;\npublic void setColor(Color color)\n{\nthis.color = color;\n}\/\/end function(Color)\n…\n}\/\/End class Car\n\n\fWhy Bother?\n• Having these methods ensure you have\nfull control over the instance variables\n• Should you decide to change how the\nvariable is accessed or altered, you only\nneed to change the method.\n• You only add them when you need\nthem!\n\n\fInter-class Relationships\n• Building a single class is useless. It\nneeds to be used in context.\n• There are two main relationships\nbetween classes\n– Sub\/Super class\n– Ownership\n\n\fSubclasses\n• A subclass of a class is a more specific\ntype of a class\n• Also known as the child of a class\n• For example, a tree would be a subclass\nof plant\n• Subclasses are meant to expand upon\nthe behavior of their more general\nparent class\n• You can have several subclasses\n\n\fSuperclasses\n• On the converse, a superclass is a more\nabstract and general version of a class\n• Also known as the parent of a class\n• Plant is the superclass of Tree\n• You can only have one superclass\n\n\fDeclaring a Class to be a\nSubtype\n• In order to declare a class’s parent, use\nthe keyword extends\n• (Classes that do not have a parent class\nimplicitly extend the Object class)\n\n\fInheritance\n• A subclass inherits all non-private fields\nand methods\n• Accessing these fields and methods\nrequires the keyword super.\n• (Note: you may also be able to access\nprivate fields with the parent class’s\ngetters and setters, which may be safer)\n\n\fRestricting Access\n• What if you want a field or method to be\ninherited, but still do not necessarily\nwant it to be accessed by anyone?\n• Use the keyword protected\n• Remember, releasing your access to\nthese fields and methods should only\nbe done when necessary\n\n\fExample\npublic class Vehicle\n{\nprivate final int numWheels;\n…\npublic boolean move(double dist)\n{\nreturn dist < this.numWheels*10.0;\n}\/\/end function(double)\n…\n}\/\/End class Vehicle\n\n\fExample A\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n…\npublic boolean drive(double dist)\n{\nreturn (dist < this.numWheels*100.0) &&\n(this.gasRemaining > 0);\n}\/\/end function(double)\n…\n}\/\/End class Plant\n\n\fExample B\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n…\npublic boolean drive(double dist)\n{\nreturn super.move(dist*10.0) &&\n(this.gasRemaining > 0);\n}\/\/end function(double)\n…\n}\/\/End class Plant\n\n\fWhich Is Better?\n• Example A totally ignores the move\nmethod (essentially its precursor), but is\nclearer\n• Example B shows the movement\nlineage\n• Either is okay, but both need\ncomments!!!!\n\n\fRegarding Constructors\n• Constructors cannot be inherited, even\nthough they are public\n• However, you can, and should, use them\nfrom the subclass’s constructor, to\nensure complete initialization\n• You can call the parent’s constructor by\nusing the keyword super\n\n\fCalling Superclass Constructor\n• Unlike calling an overloaded\nconstructor of the same class, calling a\nsuperclass constructor does not need to\nbe the only line of code\n• However, it must still be the first line of\ncode in the constructor\n\n\fExample\npublic class Vehicle\n{\nprivate final int numWheels;\n…\npublic Vehicle(int numWheels)\n{\nthis.numWheels = numWheels;\n…\n}\/\/end function(double)\n…\n}\/\/End class Vehicle\n\n\fExample\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n…\npublic Car(int numPassengers, double gasRemaining)\n{\nsuper(4);\nthis.numPassengers = numPassengers;\nthis.gasRemaining = gasRemaining;\n}\/\/end constructor(int,double)\n…\n}\/\/End class Plant\n\n\fWhat If the Superclass’s Method\nDefinition Does Not Fit the Class’s?\n• We can override the definition by using\nthe exact same function header\n• The line directly above function header\nmust have “@Override” only\n• As an example, our Car class should\nprobably use the original “move”\nmethod, rather than creating an entirely\nnew “drive” method that does\nsomething similar\n\n\fReminder\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n…\npublic boolean drive(double dist)\n{\nreturn super.move(dist*10.0) &&\n(this.gasRemaining > 0);\n}\/\/end function(double)\n…\n}\/\/End class Plant\n\n\fOverride\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n…\n@Override\npublic boolean move(double dist)\n{\nreturn super.move(dist*10.0) &&\n(this.gasRemaining > 0);\n}\/\/end function(double)\n…\n}\/\/End class Plant\n\n\fOverriding\n• I can still reference the original method\nusing the super keyword\n• Unless your overridden method totally\ndiscards the functionality of the\nsuperclass’s method, you should call the\nsuperclass’s method at least once\n\n\fNote\n• You cannot override constructors\n\n\fOwnership\n• Ownership is simply one class using\nanother as a property\n• A Car may have an Engine, a Radio, and\nan Owner, depending on what you need\n• A Car’s superclass and subclasses\ncertainly are not Engine, Radio, and\nOwner\n\n\fUsing the Classes\npublic class Garage\n{\nprivate Vehicle[] vehicles;\n…\npublic Garage(int capacity)\n{\nthis.vehicles = new Vehicle[capacity];\nfor(int i = 0; i < vehicles.length; i++)\n{\nvehicles[i] = null;\n}\n…\n}\/\/end constructor(int)\n…\n}\/\/End class Garage\n\n\fUsing the Classes\npublic class Garage\n{\n…\npublic boolean addVehicle(Vehicle vehicle)\n{\n\/\/Note: there is a better way!\nfor(int i = 0; i < vehicles.length; i++)\n{\nif(vehicles[i] == null)\n{\nvehicles[i] = vehicle;\nreturn true;\n}\n}\nreturn false;\n}\/\/end method(Vehicle)\n}\/\/End class Garage\n\n\fUsing the Classes\npublic class JayLeno\n{\npublic static void main(String[] args)\n{\nGarage garage = new Garage(100);\nCar ferrari = new Car(5,100.0);\ngarage.addVehicle(ferrari);\nferrari.move();\/\/??\nferrari.drive();\/\/??\nSystem.out.println(\"I have so many cars\");\n}\/\/end method main\n}\/\/End class JayLeno\n\n\fQUESTIONS?\n\n\f","label":[[113,116,"Concept"],[130,135,"Concept"],[178,188,"Concept"],[191,203,"Concept"],[206,215,"Concept"],[598,622,"Concept"],[972,979,"Concept"],[984,991,"Concept"],[994,1001,"Concept"],[1062,1069,"Concept"],[1718,1725,"Concept"],[1904,1928,"Concept"],[2042,2049,"Concept"],[2070,2079,"Concept"],[2082,2092,"Concept"],[2097,2105,"Concept"],[2222,2230,"Concept"],[2242,2252,"Concept"],[2349,2359,"Concept"],[2362,2374,"Concept"],[2694,2706,"Concept"],[2745,2756,"Concept"],[2761,2769,"Concept"],[2872,2877,"Concept"],[2943,2955,"Concept"],[2958,2965,"Concept"],[2970,2977,"Concept"],[3155,3164,"Concept"],[4140,4152,"Concept"],[4155,4167,"Concept"],[4267,4277,"Concept"],[4386,4391,"Concept"],[4402,4412,"Concept"],[4413,4424,"Concept"],[5107,5119,"Concept"],[6025,6030,"Concept"],[6113,6124,"Concept"],[6154,6164,"Concept"],[6217,6229,"Concept"],[6232,6241,"Concept"],[6244,6253,"Concept"],[6390,6400,"Concept"],[6405,6415,"Concept"]],"Comments":[]}
{"id":45, "segment": ["train_set", "labeled"], "course": "cs0447", "lec": "lec11","text": "#11\n\nFinite State\nMachines\nOriginal slides by: David Wilkinson\nModified with bits from: Bruce\nChilders, and Jarrett Billingsley\n\nCS 0447\nIntroduction to\nComputer Programming\n\nLu\u00eds Oliveira\n\nFall 2020\n\n\fFinite State Machines\n\n2\n\n\fWhat's an FSM?\n\u25cf A Finite State Machine is a machine with a finite number of states.\no :\u2019)\n\u25cf A Finite State Machine is a way of thinking about a process where:\no there is a series of inputs\no we need to produce a series of outputs\no the state stores some information\no the inputs can change the state and the outputs\n\n\u25cf FSMs come up all the time in programming and hardware design\n\u25cf They're great for controlling simple multiple-step procedures\n\n3\n\n\fA very simple example\n\u25cf what states can a ceiling fan be in?\no high, medium, low, and off\n\u25cf what are the input and output?\no the chain and the motor\n\u25cf when you pull the chain, it changes state\n\noff\n\npull\n\npull\n\npull\n\nhigh\n\nmed\n\nlow\n\npull\n\n4\n\n\fMissing some arrows\n\u25cf at any point in time, which of 2 choices can the input (chain) be?\no pulled or not-pulled\n\u25cf when you don't pull the chain, what happens?\n\npull\n\nno\npull\n\noff\n\nno\npull\n\npull\n\nhigh\n\nno\npull\n\npull\n\nmed\n\nno\npull\n\nlow\n\npull\n\nthis is the state transition diagram\n5\n\n\fThe state transition table - Table-a-fyin\u2019 it\n\u25cf we can represent this diagram with a truth table\n\nS\n\nIn\n\nSnext\n\noff no pull off\npull\n\noff\nno\npull\n\nno\npull\n\npull\n\nhigh\n\nno\npull\npull\n\noff\n\npull\n\nmed\n\nno\npull\n\npull\n\nhigh\n\nhigh no pull high\nlow\n\nhigh\n\npull\n\nmed\n\nmed no pull med\nmed\n\npull\n\nlow\n\nlow no pull low\nlow\n\npull\n\noff\n6\n\n\fThe state transition table - Table-a-fyin\u2019 it\n\u25cf we can represent this diagram with a truth table\n\u25cf we have 4 states. how many bits\nare needed to represent 4 values?\npull\n\noff\nno\npull\n\nno\npull\n\npull\n\nhigh\n\nno\npull\n\npull\n\nmed\n\npull\n\nfor the state, let's say:\noff means 00\nhigh means 01\nmed means 10\nlow means 11\n\nno\npull\n\nS\n\nIn\n\nSnext\n\n00 no 0pull off\n00\noff\n00\noff\n\npull\n1\n\n01\nhigh\n\n01 no 0pull high\n01\nhigh\nlow\n\n01\nhigh\n\npull\n1\n\n10\nmed\n\n10 no 0pull med\n10\nmed\n10\nmed\n\npull\n1\n\n11\nlow\n\n11 no 0pull low\n11\nlow\n11\nlow\n\npull\n1\n\n00\noff\n7\n\n\fThe state transition table - Table-a-fyin\u2019 it\n\u25cf we can represent this diagram with a truth table\n\u25cf we have 4 states. how many bits\nare needed to represent 4 values?\npull\n\noff\nno\npull\n\nno\npull\n\npull\n\nhigh\n\nno\npull\n\npull\n\nmed\n\npull\n\nfor the input, let's say:\n0 means not pulling\n1 means pulling\n\nno\npull\n\nS\n00\n00\n\n01\nlow\n\n01\n10\n10\n11\n11\n\nIn\n\nSnext\n\nno0pull 00\npull\n1\n\n01\n\nno0pull 01\npull\n1\n\n10\n\nno0pull 10\n\npull\n1\n\n11\n\nno0pull 11\npull\n1\n\n00\n8\n\n\fThe state transition table - Table-a-fyin\u2019 it\n\u25cf we can represent this diagram with a truth table\n\u25cf we have 4 states. how many bits\nare needed to represent 4 values?\n1\n\noff\n0\n\n0\n\n1\n\nhigh\n\n0\n\n1\n\nmed\n\n1\n\nfor the input, let's say:\n0 means not pulling\n1 means pulling\n\n0\n\nlow\n\nS\n\nIn\n\nSnext\n\n00\n\n0\n\n00\n\n00\n\n1\n\n01\n\n01\n\n0\n\n01\n\n01\n\n1\n\n10\n\n10\n\n0\n\n10\n\n10\n\n1\n\n11\n\n11\n\n0\n\n11\n\n11\n\n1\n\n00\n9\n\n\fIt\u2019s a UNIX system truth table, I know this!\n\n*it\u2019s a Silicon Graphics IRIX, which counts\u2026 kinda\nImage from Jurassic Park (1993), distributed by Universal Pictures\n\n10\n\n\fTruth tables with multiple output bits\n\u25cf there's no tricky stuff here \u2013 each output bit is its own expression\nS\n\nIn\n\nSnext\n\nS1\n\nS0\n\nIn\n\nSnext1\n\nS1\n\nS0\n\nIn\n\nSnext0\n\n00\n\n0\n\n00\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n00\n\n1\n\n01\n\n0\n\n0\n\n1\n\n0\n\n0\n\n0\n\n1\n\n1\n\n01\n\n0\n\n01\n\n0\n\n1\n\n0\n\n0\n\n0\n\n1\n\n0\n\n1\n\n01\n\n1\n\n10\n\n0\n\n1\n\n1\n\n1\n\n0\n\n1\n\n1\n\n0\n\n10\n\n0\n\n10\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n0\n\n10\n\n1\n\n11\n\n1\n\n0\n\n1\n\n1\n\n1\n\n0\n\n1\n\n1\n\n11\n\n0\n\n11\n\n1\n\n1\n\n0\n\n1\n\n1\n\n1\n\n0\n\n1\n\n11\n\n1\n\n00\n\n1\n\n1\n\n1\n\n0\n\n1\n\n1\n\n1\n\n0\n11\n\n\fWhat about the outputs\n\u25cf our fan controller has to control the motor after all\n\u25cf we can make a table showing the output(s) for each state\n\nAssume this is\nhow you\ncontrol the\nmotor\n\nnote that the\ninput isn't\ninvolved at all\n\nState\n\nMotor power\n\nOutput\n\noff\n\n0%\n\n00\n\nthe outputs\nonly have to\ndepend on the\ncurrent state!\n\nhigh\n\n100%\n\n11\n\nmed\n\n50%\n\n10\n\nlow\n\n25%\n\n01\n12\n\n\fRepresenting the output\n\u25cf We can represent the output in the state machine!\n\n1\n\noff\n[00]\n0\n\n0\n\n1\n\nhigh\n[11]\n\n0\n1\n\n1\n\nmed\n[10]\n\n0\n\nlow\n[01]\n\nS\n\nOutput\n\n00\n\n00\n\n01\n\n11\n\n10\n\n10\n\n11\n\n01\n\n13\n\n\fMaking a circuit out of it\n\u25cf This is a sequential circuit \u2013 the state changes over time\n\u25cf But the state transition and output tables are just combinational\n\u25cf Here's the general organization of any Moore FSM circuit:\n\nstate feeds back into transition logic\n\nD\n\ninputs\n\ntransition\nlogic\n\noutputs based\non state\n\noutputs\n\nQ\n\nstate\nregister\n\noutput\nlogic\n14\n\n\fHow to create a state machine?\n\u25cf Understand the problem\n\u25cf Represent all possible states and transitions\n\u25cf Encode the states\n\u25cf Implement the machine\n\n15\n\n\fUnderstanding the problem\nA problem:\n\u25cf You have an espresso machine\no Each espresso costs 15c <3\no The machine takes:\n\u25aa 5c - (N)ickels\n\u25aa 10c - (D)imes\no No change is given back!\nN\nCoin\nsensor\n\nD\n\nEspresso\nmachine\n\nPour\n\nCoffee\nBrewer\n\nReset\n16\n\n\fRepresent all possible states and transitions\nReset\n0c\n\n0c\n\n0c\n[0]\nN\n\n5c\n[0]\n\nD\n\nN\n0c\nD\n\n10c\n[0]\nN\n\n15c\n[1]\n\nD\n\nS\n\nD\n\nN\n\nSnext\n\nOutput\n\n0c\n\n0\n\n0\n\n0c\n\n0\n\n0c\n\n0\n\n1\n\n5c\n\n0\n\n0c\n\n1\n\n0\n\n10c\n\n0\n\n0c\n\n1\n\n1\n\nX\n\nX\n\n5c\n\n0\n\n0\n\n5c\n\n0\n\n5c\n\n0\n\n1\n\n10c\n\n0\n\n5c\n\n1\n\n0\n\n15c\n\n0\n\n5c\n\n1\n\n1\n\nX\n\nX\n\n10c\n\n0\n\n0\n\n10c\n\n0\n\n10c\n\n0\n\n1\n\n15c\n\n0\n\n10c\n\n1\n\n0\n\n15c\n\n0\n\n10c\n\n1\n\n1\n\nX\n\nX\n\n15c\n\nX\n\nX\n\n15c\n\n1\n\n17\n\n\fEncode the states\n\nS\n\nEncoded\n\n0c\n\n00\n\n5c\n\n01\n\n10c\n\n10\n\n15c\n\n11\n\nS\n\nD\n\nN\n\nSnext\n\nOutput\n\n00\n0c\n\n0\n\n0\n\n00\n0c\n\n0\n\n00\n0c\n\n0\n\n1\n\n01\n5c\n\n0\n\n00\n0c\n\n1\n\n0\n\n10c\n10\n\n0\n\n00\n0c\n\n1\n\n1\n\nX\n\nX\n0\n\n01\n5c\n\n0\n\n0\n\n01\n5c\n\n0\n\n01\n5c\n\n0\n\n1\n\n10c\n10\n\n0\n\n01\n5c\n\n1\n\n0\n\n15c\n11\n\n0\n\n01\n5c\n\n1\n\n1\n\nX\n\nX\n0\n\n10c\n10\n\n0\n\n0\n\n10c\n10\n\n0\n\n10c\n10\n\n0\n\n1\n\n15c\n11\n\n0\n\n10c\n10\n\n1\n\n0\n\n15c\n11\n\n0\n\n10c\n10\n\n1\n\n1\n\nX\n\nX\n0\n\n15c\n11\n\nX\n\nX\n\n15c\n11\n\n1\n\n18\n\n\fOur good old friend K-map - \ud835\udc7a\ud835\udc8f\ud835\udc86\ud835\udc99\ud835\udc95\ud835\udfce\n\ud835\udc7a\ud835\udfcf \ud835\udc7a\ud835\udfce\n\ud835\udc6b\ud835\udc75\n\n\ud835\udfce\ud835\udfce \ud835\udfce\ud835\udfcf \ud835\udfcf\ud835\udfcf \ud835\udfcf\ud835\udfce\n\n0\n\ud835\udfce\ud835\udfcf 1\n\ud835\udfcf\ud835\udfcf X\n\ud835\udfcf\ud835\udfce 0\n\ud835\udfce\ud835\udfce\n\n1\n0\nX\n1\n\n1\n1\nX\n1\n\n0\n1\nX\n1\n\nRed: \ud835\udc03\ud835\udc12\ud835\udfcf\n\u0d25 \ud835\udc12\ud835\udfce\nBlue: \ud835\udc75\n\nGreen:\ud835\udc75\ud835\udc7a\ud835\udfce\nPurple: \ud835\udc0d\ud835\udc12\ud835\udfcf\n\n\ud835\udc7a\ud835\udc8f\ud835\udc86\ud835\udc99\ud835\udc95\ud835\udfce = \ud835\udc03\ud835\udc12\ud835\udfcf + \ud835\udc75\ud835\udc7a\ud835\udfce\n\u0d25 \ud835\udc12\ud835\udfce + \ud835\udc0d\ud835\udc12\ud835\udfcf\n+\ud835\udc75\n\n19\n\n\fOur good old friend K-map -\ud835\udc7a\ud835\udc8f\ud835\udc86\ud835\udc99\ud835\udc95\ud835\udfcf\n\ud835\udc7a\ud835\udfcf \ud835\udc7a\ud835\udfce\n\ud835\udc6b\ud835\udc75\n\n\ud835\udfce\ud835\udfce \ud835\udfce\ud835\udfcf \ud835\udfcf\ud835\udfcf \ud835\udfcf\ud835\udfce\n\n0\n\ud835\udfce\ud835\udfcf 0\n\ud835\udfcf\ud835\udfcf X\n\ud835\udfcf\ud835\udfce 1\n\ud835\udfce\ud835\udfce\n\n0\n1\nX\n1\n\n1\n1\nX\n1\n\n1\n1\nX\n1\n\nRed: \ud835\udc12\ud835\udfcf\nGreen: \ud835\udc0d\ud835\udc12\ud835\udfce\nBlue: \ud835\udc03\n\n\ud835\udc7a\ud835\udc8f\ud835\udc86\ud835\udc99\ud835\udc95\ud835\udfcf = \ud835\udc12\ud835\udfcf + \ud835\udc0d\ud835\udc12\ud835\udfce + \ud835\udc03\n\n20\n\n\fOur good old friend K-map - Output\n\ud835\udc7a\ud835\udfce\n\ud835\udc7a\ud835\udfcf\n\n\ud835\udfce\n\n\ud835\udfce\n\ud835\udfcf\n\n\ud835\udfcf\n\n0 0\n0 1\n\nRed: \ud835\udc12\ud835\udfce \ud835\udc12\ud835\udfcf\n\nOutput= \ud835\udc12\ud835\udfce \ud835\udc12\ud835\udfcf\n\n21\n\n\fGet everything together\n\n22\n\n\f", "label": [[5, 26, "Concept"],[248, 268, "Concept"],[324, 345, "Concept"],[1175, 1190, "Concept"],[1208, 1230, "Concept"],[1534, 1556, "Concept"],[2068, 2090, "Concept"],[2510, 2533, "Concept"],[4429, 4443, "Concept"]], "Comments": []}
{"id":46, "segment": ["train_set", "labeled"], "course": "cs0007", "lec": "lec10","text": "CS 0007: Introduction to Java\nLecture 10\nNathan Ong\nUniversity of Pittsburgh\nOctober 4, 2016\n\n\fif() recap\n//always run this code\nif(condition1 is true)\n{\n//run this code\n}\nelse if(condition2 is true)\n{\n//run this code\n}\nelse if(condition3 is true)\n{\n\u2026\n}\n\u2026\nelse //if conditions 1\u2026n were not satisfied\n{\n//run this code\n}\n//always run this code\n\n\fRevisiting Scope\n\u2022 Scope works by curly brackets.\n\u2022 Curly brackets surround all newly\ndeclared information, keeping it hidden\nfrom code outside of the curly brackets.\n\n\fScope\nConfidential\nSecret\nTop Secret\n\n\fScope\npublic class ScopeExample\npublic static void main\n\npublic static void func\n\nif\n\nif\nif\n\nelse if\n\nDarker shades can see lighter shades,\nbut not vice versa\n\n\fScope in Code\npublic class Name\n{\npublic static void main(String[] args)\n{\nint x = 0;\n//x == 0, y is undefined\nif(x == 0)\n{\nint y = 10;\nx = 15;\n//x == 15, y == 10\n}\n//x == 15, y is undefined\n}//end method main\n}//End class Name\n\n\fA Special Annoying Case\nScanner scanner = new Scanner(System.in);\nint numTrees = scanner.nextInt();\nif(numTrees == 0)\n{\nSystem.out.println(\"Desert\");\n}\nelse if(numTrees == 1)\n{\nSystem.out.println(\"Island\");\n}\nelse if(numTrees == 2)\n{\nSystem.out.println(\"Beach\");\n}\nelse if(numTrees == 3)\n{\nSystem.out.println(\"Forest\");\n}\nelse\n{\nSystem.out.println(\"Jungle\");\n}\n\n\fSwitch-Case\n\u2022 A Switch-Case statement is like a long if, elseif, else block concerning only one variable and\nseveral possible discrete values (not ranges).\n\u2022 This increases readability, but they act\nsimilarly.\n\u2022 Works for byte, char, short, int, and\nString. (Any others out of scope)\n\u2022 For every case possibility, you need a break\nstatement, unless you wanted to combine\nseveral cases together.\n\n\fA Special Annoying Case\nScanner scanner = new Scanner(System.in);\nint numTrees = scanner.nextInt();\nswitch(numTrees)\n{\ncase 0:\nSystem.out.println(\"Desert\");\nbreak;\ncase 1:\nSystem.out.println(\"Island\");\nbreak;\ncase 2:\nSystem.out.println(\"Beach\");\nbreak;\ncase 3:\nSystem.out.println(\"Forest\");\nbreak;\ndefault:\nSystem.out.println(\"Jungle\");\nbreak;\n}\n\n\fARRAYS, LOOPS, AND\nRECURSION\n\n\fA Sudden Need\n\u2022 I need a function that returns the first\n100 terms of the harmonic series.\n\u2022 Harmonic series:\uf0a5 1\n1 1\n\n\uf0e5 n \uf03d1 \uf02b 2 \uf02b 3 \uf02b ...\nn \uf03d1\n\n\fThe Dumb Way\npublic static void main(String[] args)\n{\ndouble term0 = 1.0;\ndouble term1 = 1.0/2.0;\ndouble term2 = 1.0/3.0;\n\u2026\n}\n\n\fLists\n\u2022 How do we do lists?\n\u2022 Using 100 variables as a list is not\nscalable! What if we need more? What\nif I change the names? What if I wanted\na different series?\n\u2022 A WILD STRUCTURE APPEARS\n\n\fArrays\n\u2022 Arrays are ordered lists of things\ndepending on the type you specify\n\u2022 How do you make one?\n\n\fType[] name = new Type[size];\n\n\fint[] empty = new int[10];\n\n\fType[] name = values;\n\n\fint[] list = {1,2,3,4};\n\n\fNow What?\n\u2022 I want the first element\n\u2022 list[0]\n\u2022 I want the last element\n\u2022 list[3]\n\u2022 I want the length\n\u2022 list.length == 4\n\u2022 All operations for int are allowed for an\nindividual element\n\u2022 list[0] + list[2] == list[3]\n\n\fHow do I get every element so I can\nprint it?\n\u2022 Reference every element\n\u2022 Many if statements!!!!!!\nYAAAAAAAAYYYY\n\u2022 No please don't\n\u2022 But what else can we do?\n\u2022 WILD KEYWORD APPEARS\n\n\fwhile(){\u2026}\n\u2022 While a condition is true, run the block\n\u2022 While not at the end of the list, print out\nthe next element\nwhile(not at end of list)\n{\nSystem.out.println(next element);\n}//end loop while(not at end of list)\n\n\fnot at end of list\n\u2022 How do we know we're at the end of the\nlist?\n\u2022 list.length\n\u2022 How do we know which one we're at?\n\u2013 We need to keep track\n\nint currElement = 0;\n\n\u2013 starts at 0\n\u2013 not equal to the end!\n\ncurrElement != list.length\n\n\fwhile(){\u2026}\n\u2022 While not at the end of the list, print out the next\nelement\nint currElement = 0;\nwhile(currElement != list.length)\n{\nSystem.out.println(<next element>);\n}//end loop while(currElement!=list.length)\n\n\f", "label": [[356, 361, "Concept"],[364, 369, "Concept"],[514, 519, "Concept"],[520, 532, "Concept"],[533, 539, "Concept"],[540, 550, "Concept"],[553, 558, "Concept"],[1307, 1318, "Concept"],[1322, 1334, "Concept"],[2052, 2058, "Concept"],[2060, 2065, "Concept"],[2071, 2080, "Concept"],[2357, 2362, "Concept"],[2378, 2383, "Concept"],[2550, 2556, "Concept"],[2559, 2565, "Concept"],[3165, 3170, "Concept"],[3178, 3183, "Concept"],[3221, 3226, "Concept"],[3282, 3287, "Concept"],[3616, 3621, "Concept"],[3629, 3634, "Concept"]], "Comments": []}
{"id":47, "segment": ["train_set", "labeled"], "course": "cs0447", "lec": "lec0C","text":"#C\nCS 0447\nIntroduction to\nComputer Programming\n\nLogic Basics\nOriginal slides by: Jarrett Billingsley\nModified with bits from: Bruce\nChilders, David Wilkinson\n\nLuís Oliveira\n\nFall 2020\n\n\fWhat's electricity?\n(EE-ish section)\n\n2\n\n\fIn your orbit\nhere's a proton. it has\na positive charge\n\n+\np\n\nhere's an electron. it has\na negative charge\ne-\n\nit kinda goes\naround\nthe proton\nin an orbit*\n\nprotons sit still while electrons can move around\n\n*it actually doesn’t… it’s way more complex than that!\nWaves, teleportation and other black magic!\n\n3\n\n\fOpposites attract…\n\ntwo of the same\ncharge repel\n\np+\n\np+\n\ne-\n\nopposite charges\nattract\n\nbut protons are\nkinda stuck, so…\n\nhere's electricity.\nhere it is\n\ne-\n\n4\n\n\fLots of fish electrons in the sea\nhere's a solid piece of metal\nthe atoms are in a fixed structure\nbut some of the electrons are free to move around\n\nright now, the charges are\nbalanced: same number of\npositive and negative\nlet's knock it out of whack\n\n5\n\n\fTwo moles is company, three's a crowd\nlet's shove more electrons in\npacking more\nelectrons in leads\nto two things:\n1. this metal is now\nnegatively charged\n\n2. the electrons are\nnow closer together\nmeaning they're less\nhappy\n\naaa\n\nnoo\n6\n\n\fCarousel of unhappiness\nif we shove some down a wire\n\nwire\nwe'd like to get off\nmister bones wild ride\n\nand then give them a\n(difficult) way out\n\nand then have something which will\nsqueeze them back together again\nwell now you have electricity\n\n7\n\n\fWatch em go\nvoltage measures\nelectron unhappiness\n\ncurrent measures how\nmany electrons per second\nare moving past a point\n\nlow\nlow\n\nhigh\nand that's electricity\n\nhigh\n\n8\n\n\fLogic Basics\n\n9\n\n\fValves (or tubes) – more fun?\n● Why is a vacuum tube called like that?\n● They are also called thermionic valves (or simply valves)\n\nhttps:\/\/en.wikipedia.org\/wiki\/Vacuum_tube\n\n10\n\n\fTransistors\n● a transistor is like a little valve\n\nThere are multiple\ntypes of transistors\n\ncommon\n\noutput\n\ninput\n\ninput\n\noutput\n\noutput\n\ncommon\n\nMOSFET\n\nBJT\n\ncommon\n\ninput\nCan be used many\ndifferent ways!\n11\n\n\fTransistors\n● The ones we’ll focus on MOSFET transistors\no Metal-Oxide Semiconductor Field-Effect Transistor\no Commonly used just as switches (digital electronics)\n\nThe positive\nterminal (e.g. 9V)\n\n9V\n\nD\nG\n\nD\nG\n\nS\nThe negative\/ground\nterminal (0V)\n\nS\n0V\n12\n\n\fTransistors\n● Used as an electrically controlled switch\no The input is connected to G (Gate)\n▪ controls the switch state\no The output is D (drain) is connected to S (source)\n● The voltages represent bits! (maybe 9V = 1, 0V = 0)\n\nD\nInput\n\nG\n\nOutput\nS\n13\n\n\fTransistors\n● MOSFETs come in two varieties:\n\nON\n\nOFF\n\nON\n\nD\n\nS\nG=1 G=0\n\nG\n\nOFF\n\nS\n\nG\nThis means\ninverted\n\nG=0\n\nG=1\n\nD\n\n“N” Type\n\n“P” Type\n\nWork when connected to 0\n\nWork when connected to 1\n\n14\n\n\fTransistors – Overly simplified\nThe current\nmust flow!!\nD\n0\n1G\nS\n\n“N” Type\n\nS\n0\n1G\n\nD\n\n“P” Type\n\n15\n\n\fTransistors\nNow just put 3 billion\nof them together! who\nsaid EE was hard?\n\n16\n\n\fGates\n● We can combine transistors in interesting ways to make gates\n● A gate implements one of the basic boolean logic functions\n● Let's start with the simplest: the NOT gate\nQ is the output\nA is the input\n\nA\n\nQ\nthis little bubble\nmeans \"invert\"\n\n17\n\n\fTime to bundle up\n● if we want to, say, NOT a 32-bit value, we can draw it like:\n\n32\n\n32\n\n● it's a lot nicer than drawing 32 wires with 32 NOT gates\n● Logisim calls these wire bundles\no it doesn't draw the slashes and numbers though…\n\n18\n\n\fNOT with MOSFETs\nA=0\n\nA=1\n\n1\n\n0\n\nA\n\nQ\n\n“P” Type\n\nA\n\nQ\n\nA Q\n0 1\n1 0\n\n“N” Type\n\n19\n\n\fNAND with MOSFETs\nA\nB\n\nB\n\nA\n\nQ\nA\n\nB\n\nQ\n\nA\n0\n0\n1\n1\n\nB Q\n0 1\n1 1\n0 1\n1 0\n20\n\n\fAND with MOSFETs\nA\nB\n\nB\n\nA\n\nQ\nA\n\nB\n\nQ\n\nA\n0\n0\n1\n1\n\nB Q\n0 0\n1 0\n0 0\n1 1\n21\n\n\fNOR with MOSFETs\nA\nB\n\nA\nB\nQ\nA\n\nQ\n\nB\n\nA\n0\n0\n1\n1\n\nB Q\n0 1\n1 0\n0 0\n1 0\n22\n\n\fOR with MOSFETs\nA\nB\n\nA\nB\n\nQ\nA\n\nQ\n\nB\n\nA\n0\n0\n1\n1\n\nB Q\n0 0\n1 1\n0 1\n1 1\n23\n\n\fAND, OR, and… XOR?\n● we know about AND and OR, but what's XOR?\n\nA\n\nQ\n\nB\nAND gate\n\nA\n0\n0\n1\n1\n\nB Q\n0 0\n1 0\n0 0\n1 1\nAB\n\nA\n\nQ\n\nB\n\nA\n\nQ\n\nB\n\nOR gate\n\nXOR gate\n\nA\n0\n0\n1\n1\n\nA\n0\n0\n1\n1\n\nB Q\n0 0\n1 1\n0 1\n1 1\nA+B\n\nB Q\n0 0 eXclusive OR\nmeans \"one or\n1 1 the other, but\n0 1 NOT BOTH.\"\n1 0\nA⊕B\n\n24\n\n\fAND (multiple inputs)\n● If you have more than 2 inputs…\nyou can just concatenate:\n\nA\n\nQ’\n\nB\nAND gate\n\nQ’\n\nQ\n\nC\nAND gate\n\nA\n0\n1\n0\n1\n0\n1\n0\n1\n\nB\n0\n0\n1\n1\n0\n0\n1\n1\n\nC\n0\n0\n0\n0\n1\n1\n1\n1\n\nQ\n0\n0\n0\n0\n0\n0\n0\n1\n\n25\n\n\fAND and\/or OR\n● Combining logic is just a matter of\ncombining logic gates:\n● Look at the truth entries on the truth-table\no when Q is “1”\n● AND each entry variable\n● Then, OR each entry:\n● In English:\n\nABC + ABC\n\nIt’s truth when\n“A is false” and “B is true” and “C is false”\nOR\n“A is false” and “B is true” and “C is true”\n\nA\n0\n1\n0\n1\n0\n1\n0\n1\n\nB\n0\n0\n1\n1\n0\n0\n1\n1\n\nC\n0\n0\n0\n0\n1\n1\n1\n1\n\nQ\n0\n0\n1\n0\n0\n0\n1\n0\n\n26\n\n\fAND and\/or OR\n\nABC + ABC\nA\nQ\nB\n\nC\n\nA\n0\n1\n0\n1\n0\n1\n0\n1\n\nB\n0\n0\n1\n1\n0\n0\n1\n1\n\nC\n0\n0\n0\n0\n1\n1\n1\n1\n\nQ\n0\n0\n1\n0\n0\n0\n1\n0\n\n27\n\n\fIf you give an electrical engineer a NAND gate…\n● if you stick a NOT gate after an AND gate, you get a NAND gate\n\n● this kind of gate has a cool property: it's universal\no in other words, you can build an entire computer with NANDs\n● but this isn't how real circuits are designed, at least anymore\n● digital logic courses use them cause NAND gate chips are cheap\n● but in Logisim, we have infinite gates for free :D\n● use the kind of gate you need for the situation at hand\n\n28\n\n\f","label":[[49,54,"Concept"],[1816,1827,"Concept"],[1895,1906,"Concept"],[2027,2038,"Concept"],[2065,2083,"Concept"],[2286,2297,"Concept"],[2541,2552,"Concept"],[2555,2562,"Concept"],[2738,2749,"Concept"],[2840,2851,"Concept"],[2921,2926,"Concept"],[2944,2955,"Concept"],[2984,2989,"Concept"],[3087,3096,"Concept"],[3497,3501,"Concept"],[3573,3576,"Concept"],[3648,3651,"Concept"],[3721,3723,"Concept"],[3794,3797,"Concept"],[3799,3801,"Concept"],[3808,3811,"Concept"],[3829,3832,"Concept"],[3837,3839,"Concept"],[3852,3855,"Concept"],[3866,3869,"Concept"],[3929,3936,"Concept"],[3938,3946,"Concept"],[4078,4081,"Concept"],[4170,4178,"Concept"],[4189,4197,"Concept"],[4280,4283,"Concept"],[4291,4293,"Concept"],[4685,4688,"Concept"],[4696,4698,"Concept"],[4838,4847,"Concept"],[4865,4874,"Concept"],[4884,4892,"Concept"],[4903,4913,"Concept"],[5027,5031,"Concept"],[5138,5142,"Concept"],[5199,5204,"Concept"],[5235,5239,"Concept"]],"Comments":[]}
{"id":48, "segment": ["train_set", "labeled"], "course": "cs0007", "lec": "lec04","text": "CS 0007: Introduction to Java\nLecture 4\nNathan Ong\nUniversity of Pittsburgh\nSeptember 12, 2016\n\n\fboolean\n\u2022 Two values only:\n\u2013 true\n\u2013 false\n\n\u2022 We can also assign the variable an\nexpression to be evaluated.\n\n\fboolean Operators\n&&\n||\n!\n\n\u2013 Logical AND\n\u2013 Logical OR\n\u2013 Logical NOT\n\nboolean needUmb = rain || cloud;\nParentheses can be used as a way to\ngroup\n\n\fTruth Tables\nA B\n\nA&&B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nF\n\nF F\n\nF\n\n\fTruth Tables\nA B\n\nA||B\n\nT T\n\nT\n\nT F\n\nT\n\nF T\n\nT\n\nF F\n\nF\n\n\fTruth Tables\nA\n\n!A\n\nT\n\nF\n\nF\n\nT\n\n\fOrder of Operators\n1.\n2.\n3.\n\n!\n&&\n||\n\n\u2013 Logical NOT\n\u2013 Logical AND\n\u2013 Logical OR\n\nboolean needUmb = rain || !sun;\n\n\fConditional Logic\n\u2022 \u201cIf \u2026 then \u2026\u201d\n\u2022 Does not have an operator in Java\n\nA B\n\nA\uf0e0B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nT\n\nF F\n\nT\n\n\fConditional Logic\n\u2022 We can use an equivalent statement to\nget the result we want.\n\nA B\n\nA\uf0e0B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nT\n\nF F\n\nT\n\n\fConditional Logic\n\u2022 We can use an equivalent statement to\nget the result we want.\n\nA B\n\nA\uf0e0B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nT\n\nF F\n\nT\n\n\fConditional Logic\n\u2022 We can use an equivalent statement to\nget the result we want.\n\nA B\n\n!A||B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nT\n\nF F\n\nT\n\n\fOrder of Operators\n1.\n2.\n3.\n4.\n\nequality\n\n==/!=\n\n\u2013 Equality/Non-\n\n!\n&&\n||\n\n\u2013 Logical NOT\n\u2013 Logical AND\n\u2013 Logical OR\n\nboolean same = bool1 == bool2;\n\n\fBad Coding Practice\nboolean isTrue = bool1 == true;\n\n\fint\n\u2022 Integers\n\u2022 We can also assign the variable an\nexpression to be evaluated.\n\n\fint Operators\n+\n\u2013 Addition\n\u2013\n\u2013 Subtraction\n*\n\u2013 Multiplication\n/\n\u2013 (Integer) Division\n%\n\u2013 Modular Operation\nFollows normal rules of order of\noperation (PEMDAS)\n\n\fInteger Division\nRemoves (truncates) the Mantissa\n(numbers after the decimal point)\n5/2\uf0e02\n20 / 3 \uf0e0 6\n\n\fModular Arithmetic\nRemember back to grade school division:\n5 divided by 2 equals 2 remainder 1\n5%2\uf0e01\n20 divided by 3 equals 6 remainder 2\n20 % 3 \uf0e0 2\n\n\fInteger Division + Modular\nArithmetic\nThey fit nicely together:\n5 divided by 2 equals 2 remainder 1\n5/2\uf0e02\n5%2\uf0e01\n20 divided by 3 equals 6 remainder 2\n20 / 3 \uf0e0 6\n20 % 3 \uf0e0 2\n\n\fMore int Operators\nSpecial operators convert two ints into a\nboolean by comparing them\n==\n\u2013 Equality\n!=\n\u2013 Non-Equality\n> \u2013 Greater than\n>=\n\u2013 Greater than or equal to\n< \u2013 Less than\n<=\n\u2013 Less than or equal to\nEvaluated AFTER PEMDAS\n\n\fMore int Operators\n5 == 0?\n6 > 7?\n4 <= 4?\n!(8 < 3)?\n(3 / 2 > 9 % 3) && (10 <= 5*3)?\n\n\fdouble\n\u2022 Decimal numbers\n\u2022 Cannot trust this for calculations that\nrequire precision due to representation\nlimits\n\u2022 All int operations can be applied to\ndoubles, except modular arithmetic (%)\n\u2022 Division is regular\n\n\fMixing Types with Division\n5/2\uf0e02\n5.0 / 2.0 \uf0e0 2.5\n5.0 / 2 \uf0e0 ?\n5 / 2.0 \uf0e0 ?\n\n\fchar\n\u2022 Single characters\n\u2022 CANNOT use + to combine two\ncharacters together.\n\u2022 Internally represented as a very small\nnumber in American Standard Code for\nInformation Interchange (ASCII)\nrepresentation.\n\n\fASCII Table\n\n\fchar Operators\nSpecial operators convert two chars into\na boolean by comparing them\n==\n\u2013 Equality\n>\n\u2013 Greater than*\n>=\n\u2013 Greater than or equal to*\n<\n\u2013 Less than*\n<=\n\u2013 Less than or equal to*\n*(based on ASCII value)\n\n\fExpression?\n\u2022 How do you express the sum of 2 and 3?\n\u2022 No, not the answer, the expression\n\u2022 2+3\n\u2022 Hmm, will int x = 2 + 3; work?\n\u2022 Let's test it\n\n\fHow do you test that?\n\u2022 Write a valid program\n\u2022 You can do one of two things:\n\u2013 Print the expected value and the value you\nactually retrieved\n\u2013 Compare the two values and print the\nboolean value\n\n\u2022 Why would you choose one over the\nother?\n\u2022 Depends on what you want/need\n\n\fTest 1\npublic class Test\n{\npublic static void main(String[]\n{\nint x = 2 + 3;\nSystem.out.println(\"Value\nexpected: 5, Actual\nvalue: \" + x);\n}//end method main\n}//End class Test\nWhat is the expected output?\n\nargs)\n\n\fThey're the same, YAAAAAYYYYYY!!!\n\n\fTest 2\npublic class Test\n{\npublic static void main(String[]\n{\nint x = 2 + 3;\nSystem.out.println(\"x == 5 is\"\n5));\n}//end method main\n}//End class Test\nWhat is the expected output?\n\nargs)\n\n+ (x ==\n\n\fIt's true, YAAAAAYYYYYY!!!\n\n\fExpressions\n\u2022 All primitives allow you to\ndeclare/replace\n\u2022 boolean b = (x == 5);\n\u2022 b = (x == 6);\n\u2022 double d = 2.0/3.5;\n\n\fWARNING\n\u2022 The caret (^) does NOT indicate\nexponentiation.\n\u2022 In other words, in Java, 2^3 does not\nequal 8\n\u2022 There is another way to do\nexponentiation, but we'll come back to\nthis.\n\n\fQuestions?\n\n\f", "label": [[97, 104, "Concept"],[236, 247, "Concept"],[250, 260, "Concept"],[263, 274, "Concept"],[276, 283, "Concept"],[353, 365, "Concept"],[410, 422, "Concept"],[467, 479, "Concept"],[540, 551, "Concept"],[554, 565, "Concept"],[567, 578, "Concept"],[614, 631, "Concept"],[728, 745, "Concept"],[854, 871, "Concept"],[980, 997, "Concept"],[1185, 1196, "Concept"],[1198, 1210, "Concept"],[1213, 1223, "Concept"],[1225, 1232, "Concept"],[1278, 1285, "Concept"],[1312, 1315, "Concept"],[1394, 1397, "Concept"],[1412, 1420, "Concept"],[1425, 1436, "Concept"],[1441, 1455, "Concept"],[1460, 1478, "Concept"],[1483, 1500, "Concept"],[1555, 1571, "Concept"],[1658, 1676, "Concept"],[1809, 1825, "Concept"],[1987, 1990, "Concept"],[2031, 2035, "Concept"],[2043, 2050, "Concept"],[2074, 2082, "Concept"],[2088, 2100, "Concept"],[2105, 2117, "Concept"],[2123, 2147, "Concept"],[2152, 2161, "Concept"],[2166, 2188, "Concept"],[2219, 2222, "Concept"],[2300, 2306, "Concept"],[2420, 2423, "Concept"],[2453, 2460, "Concept"],[2469, 2487, "Concept"],[2534, 2542, "Concept"],[2591, 2595, "Concept"],[2795, 2806, "Concept"],[2809, 2823, "Concept"],[2898, 2906, "Concept"],[2911, 2923, "Concept"],[2930, 2954, "Concept"],[2960, 2969, "Concept"],[2976, 2997, "Concept"],[3353, 3360, "Concept"],[3507, 3510, "Concept"]], "Comments": []}
{"id":49, "segment": ["train_set", "labeled"], "course": "cs0447", "lec": "lec15","text": "#15\nCS 0447\nIntroduction to\nComputer Programming\n\nMulticycle Design\nOriginal slides by: David Wilkinson\nModified with bits from: Bruce\nChilders, and Jarrett Billingsley\n\nLu\u00eds Oliveira\n\nFall 2020\n\n\fMulticycle\n\n2\n\n\fMulticycle Design\n\u25cf Simply put: let instructions take more than one clock cycle to complete.\n\nSingle-cycle\n\nPHOTO: https://www.straitstimes.com/asia/east-asia/china-scrambles-to-tame-rental-bike-chaos\n\nMulticycle?\n\n3\n\n\fChop chop\n\u25cf Not all instructions take the same amount of time, so\u2026\n\u25cf Make different instructions take different amounts of time!\no And by that, we mean different numbers of clock cycles\n\n3 cycles\n\nj\n\nj\n\n4 cycles\n\nor\n\nor or or\n\nor\n\n100 cycles\n\nlw\n\nlw\n\nlw\n\nj\n\nlw\n\nlw\n\nlw\n\nlw\nlw\n\nlw\n\nlw\n\nlw\n\nlw\n\nlw\n\nl\n\n4\n\n\fThe instructions' steps\n\u25cf Why would some instructions take less time?\n\u25cf Recall the five phases of execution?\n\u25cf All instructions have IF, ID, EX, but only some write to memory/regs\no We\u2019re managing their complexity with respect to time.\n\nbeq/j\n\nF\n\nD\n\nX\n\nadd/sub etc.\n\nF\n\nD\n\nX\n\nW\n\nlw\n\nF\n\nD\n\nX\n\nM\n\nM\n\n\u2026\u2026..\n\nM\n\nM\n\nW\n\nMemory is slooooooow\n5\n\n\fThe instructions' steps\n\u25cf Why would some instructions take less time?\n\u25cf Recall the five phases of execution?\n\u25cf All instructions have IF, ID, EX, but only some write to memory/regs\no We\u2019re managing their complexity with respect to time.\n\nbeq/j\n\nIF\n\nID\n\nEX\n\nadd/sub etc.\n\nIF\n\nID\n\nEX\n\nWB\n\nlw\n\nIF\n\nID\n\nEX\n\nM\n\nWB\n\n(let's just say lw is 5 cycles :)\n6\n\n\fMulti-cycle CPU\nCalculate clock to accommodate a single phase.\n\u25cf Chop instructions and make the clock faster\n\u25cf Less time wasted by faster instructions! \u2192 Reduces latency\n\nTime\n\n0\n\n1\n\nlw t0,0(t1)\n\nMem\n\nReg\n\nadd t2,t2,t3\n\n2\n\n3\n\n4\n\nMem\n\nReg\n\n5\n\n6\n\nMem\n\nReg\n\n7\n\n8\n\nReg\n\n7\n\n\fNot all stages are the same \uf04c\nIn the multi-cycle design:\nSlowest stage limits the rate\nBalanced stages are desired\nE.g. split the memory operation into multiple clock cycles\n\nTime\n\nlw t0,0(t1)\n\n0\n\n1\n\nMem\n\nReg\n\nMem\n\nReg\n\n2\n\n3\n\nMem\n\nMem\n\n4\n\nReg\n\nReg\n\n8\n\n\fThe multicycle datapath from a bird's-eye view\n\n\u25cf Each phase of execution has its own functional unit\n\u25cf between phases, we insert registers to hold onto the data for the next phase.\n(Recall registers \u2794 sequential logic)\n\nInstruction\nMemory\n\nD\n\nControl\n\nF\n\nX\n\nM\n\nRegister\nFile\n\nData\nMemory\n\nW\n9\n\n\fWatching an add (animated)\n\u25cf Let's watch an add instruction flow through the datapath!\nF\n\nClock!\n\nD\n\nClock!\n\nset all control\nsignals...\n\nX\n\nClock!\n\nM\n\nadd...\n\nInstruction\nMemory\n\nControl\n\nadd\nRegister\nFile\n\nData\nMemory\n\nClock!\n\nW\ndata flows back to registers...\n10\n\n\fWatching a lw (animated)\n\u25cf Let's watch a lw instruction flow through the datapath!\nF\n\nClock!\n\nD\n\nClock!\n\nset all control\nsignals...\n\nX\n\nClock!\n\nadd...\n\nM\n\nClock!\n\nload...\n\nInstruction\nMemory\n\nControl\n\nlw\nRegister\nFile\n\nData\nMemory\n\nW\ndata flows back to registers...\n11\n\n\fCPI (and IPC)\n\u25cf CPI (Cycles Per Instruction) measures the average number of cycles it takes\nto complete one instruction\n\u25cf IPC (instructions per cycle) is its reciprocal\no multi-issue CPUs can execute multiple instructions in one clock cycle!\nWOAH 8O\n\u25cf So, what's the CPI for the single-cycle implementation?\no uh, 1.\no By, yanno, definition.\n\u25cf What about for a multicycle implementation?\no \u2026\u2026????? hmmm\n\n12\n\n\fSo what the heck has this bought us?\n\u25cf Let's say our clock cycle time decreased from 5ns to 1ns!\no that's from 200 MHz to 1 GHz! :D\n\u25cf ...buuut our CPI (cycles per instruction) increased a lot.\no with the single-cycle datapath, CPI was always 1.\no now the CPI is... well... uh... variable?\n\nbeq/j\n\nIF\n\nID\n\nEX\n\nadd/sub etc.\n\nIF\n\nID\n\nEX\n\nWB\n\nlw\n\nIF\n\nID\n\nEX\n\nM\n\nif instructions vary in length,\nhow do we calculate CPI?\nWB\n\n13\n\n\fCalculating Average CPI\n\u25cf Every program is different, and every program has a different instruction\nmix \u2013 how many of each kind of instruction it uses\n\u25cf Let's say we have a program where 60% of the instructions are ALU, 20% are\nbranches, 15% are loads, and 5% are stores.\nALU\n\nBranches\n\nLoads\n\nStores\n\n%\n\n60%\n\n20%\n\n15%\n\n5%\n\nCycles\n\n4\n\n3\n\n5\n\n4\n\n2. Now sum\nthe CPIs\n\nCPI\n\n2.4\n\n0.2\n\n= 3.95\n\n+\n\n0.6\n\n+\n\n0.75\n\n1. for each category, multiply the proportion\n(percentage) by the number of cycles for that\ncategory to get the per-category CPI\n\n+\n\nthis is the Average\nCPI for THIS program.\ndifferent mixes give\ndifferent CPIs!\n14\n\n\fThe performance equation\n\u25cf If we have n instructions, and each instruction takes CPI cycles, and each\ncycle takes t seconds, how long does it take to execute all the instructions?\n\n\ud835\udc36\ud835\udc43\ud835\udc3c cycles \ud835\udc61 seconds\nTotal time = \ud835\udc5b instructions \u00d7\n\u00d7\ninstruction\ncycle\n= \ud835\udc5b \u00d7 \ud835\udc36\ud835\udc43\ud835\udc3c \u00d7 \ud835\udc61 seconds\nor in English, it's the product of the instruction count, the\nCPI, and the length of one clock cycle\n\n15\n\n\fSo how much better is it?!??!?\n\u25cf Say we execute 500 mega (500 \u00d7 106) instructions\n\u25cf For the single-cycle datapath:\no CPI = 1\no cycle time = 5ns (5 x 10-9 s)\no total time = n \u00d7 CPI \u00d7 cycle time\n\u25aa = (500 \u00d7 106) \u00d7 (1) \u00d7 (5 \u00d7 10-9)\n\u25aa = 2.5 seconds.\n\u25cf For the multicycle datapath:\no CPI = 3.95 (much higher!) (again, this CPI is only for this program)\no cycle time = 1ns (much lower!)\no total time = (500 \u00d7 106) \u00d7 (3.95) \u00d7 (1 \u00d7 10-9)\no = 1.975 seconds!\n\n16\n\n\fHow does it look like?\n\n17\n\n\fMulticycle Datapath + Control (no control flow)\n\u25cf A potential example of a multicycle control for MIPS:\n\no Additional registers and multiplexers hold and then direct temporary data.\n\nA single ALU\n\nA single Shared Memory\n\nFigure 5.26 in P&H 3e\n\n18\n\n\fMulticycle Datapath + Control (no control flow)\n\u25cf A potential example of a multicycle control for MIPS:\n\no Additional registers and multiplexers hold and then direct temporary data.\n\nRegisters are added between\nfunctional units to store data\nThat needs to be used in the\nfollowing clock cycle\n\nFigure 5.26 in P&H 3e\n\n19\n\n\fMulticycle Datapath + Control (no control flow)\n\u25cf A potential example of a multicycle control for MIPS:\n\no Additional registers and multiplexers hold and then direct temporary data.\nA MUX to connect either\nthe PC or the Register File\n\nUsing a single ALU requires a\nchange in the hardware\ndesign.\n\nA larger MUX to include PC\nincrement and adding\nthe branch offsets\n\nFigure 5.26 in P&H 3e\n\n20\n\n\fMulticycle Datapath + Control (with control flow)\n\nNow we support\njump instructions \u263a\n\nFigure 5.28 in P&H 3e\n\n21\n\n\fMulticycle Datapath + Control (with control flow)\n\nFigure 5.28 in P&H 3e\n\n22\n\n\fSignals\nSignal\n\nEffect\n\nMemRead\n\nRead from memory \u2794 0: Don\u2019t read; 1: Read\n\nMemWrite\n\nWrite to memory \u2794 0: Don\u2019t write; 1: Write\n\nALUSelA\n\nSelect input of ALU input A \u2794 0: $pc ; 1: register A\n\nRegDst\n\nSelect destination register \u2794 0: $rt (I-Type); 1: $rd (R-Type)\n\nRegWrite\n\nRegister-file write enable \u2794 0: Don\u2019t write; 1: Write\n\nMemToReg\n\nSelect data to write to the register-file\u2794 0: ALU; 1: Memory\n\nIorD\n\nSelect the source for the memory address to be accessed \u2794 0: PC (instruction);\n1: ALU (lw/sw/lh/lhu/sh/lb/lbu/sb)\n\nIRWrite\n\nInstruction register write enable \u2794 0: Don\u2019t write; 1: Write\n\nPCWrite\n\nPC unconditional write enable (jumps/PC=PC+4) \u2794 0: No effect; 1: Jump\n\nPCWriteCond\n\nPC conditional write enable (branches) \u2794 0: No effect; 1: Jump conditionally\n23\n\n\f(More) signals\nSignal\nALUSelB\n\nALUOp\n\nPCSource\n\nEffect\n00\n\nALU input B comes from $rt\n\n01\n\nALU input B is the constant 4\n\n10\n\nALU input B comes from the Immediate field\n\n11\n\nALU input B comes from the Immediate field shifted left 2 (branch)\n\n00\n\nALU does an addition\n\n01\n\nALU does an subtraction\n\n10\n\nALU behaviour depends on the function field (R-Type)\n\n00\n\nPC is updated with the result of the ALU (Fetch: PC+4)\n\n01\n\nPC is updated with the result of the ALU (PC = PC + branch offset)\n\n10\n\nPC is updated with the Jump target (jump)\n24\n\n\fFetch and decode\n\n25\n\n\fFetch Instruction\n\n00\n\nIncrement PC\nRead instruction\nfrom memory\n\n01\n\n00\n26\n\n\fDecode Instruction\nController does its thing\n\n00\n\nMaybe it\u2019s\na branch?\n\n11\n\nALU adds PC (incremented in IF)\nto potential branch offset.\nJust in case!\n\n00\n27\n\n\fR-Type\n\n28\n\n\fExecute Instruction\n\n00\n\nALU adds\nregisters A and B\n\n00\n\nadd\n\ns0, s1, s2\n\n10\n29\n\n\fWrite Back\n\n00\n\nALU result is written\nback into the\nRegister File\n\n00\n\nadd\n\ns0, s1, s2\n\n00\n30\n\n\fI-Type\nlw\n\n31\n\n\fExecute Instruction\n\n00\n\nALU adds registers A\nand Imm to calculate\neffective address\n\n10\n\nlw\n\ns0, 4(s1)\n\n00\n32\n\n\fMemory access\n\n00\n\nALU result is used\nas the address.\nMemory is read.\n\n00\n\nlw\n\ns0, 4(s1)\n\n00\n33\n\n\fWrite back\n\n00\n\nData read from memory\nis written into the\nRegister File\n\nlw\n\ns0, 4(s1)\n\n00\n\n00\n34\n\n\fI-Type\nbeq\n\n35\n\n\fExecute Instruction \u2013 Branch conclusion\n\n01\n\nALU subtracts registers\nA and B if the result is\nzero, then branch\n\n00\n\nbeq\n\ns0, s1, label\n\n01\n36\n\n\fJ-Type\njump\n\n37\n\n\fExecute Instruction \u2013 Jump\n\n10\n\nJump\n\n00\n\nj\n\ntarget\n\n00\n38\n\n\fMulticycle Control\n\u25cf How are control signals generated on each cycle?\no Single-cycle: Signals don\u2019t change during each instruction\n\u25aa Combinational circuit\no Multi-cycle: Signals change during each instruction\n\u25aa Different signals each clock cycle\nSequential circuit \u2192 Needs to remember what it did before\n\u25cf What are the transitions between cycles?\no (i.e., what happens next?)\n\u25cf How to describe this behaviour?\no State machine!\n\n39\n\n\fTick-tock\n\nD\n\nopcode\n\ntransition\nlogic\n\nRegWrite\n\u2026.\nIRWrite\n\nQ\n\nstate\nregister\n\nALUSrcA\noutput\nlogic\n\n40\n\n\fMulticycle Control\nFinite State Machine\nEach Cycle: Advance one state\nWhilst in a State:\n\u2022\nSet datapath control\n\u2022\nMake decision based on opcode\n\u2022\nControl is different after Decode\n\nDECODE\n/ REG.\nREAD\n\nFETCH\n\nR-Type\n\nload/store\nCALC.\nADDR.\nload\nREAD\nMEM\n\nWRITE\nBACK\nMEM\n\nEXEC.\nALU\n\nbranch\nBRANCH\nCOMPL.\n\njump\nJUMP\nCOMPL.\n\nstore\nWRITE\nMEM\n\nWRITE\nBACK\nALU\n\nMIPS has >100 instructions\nSome can take >20 clock cycles!!\nMaking the state machine a bit more complex \u263a\n\n41\n\n\fPerformance\n\n42\n\n\fThe layman's understanding\n\u25cf your ancient computer takes 30 seconds to open the browser\n\u25cf you get a new computer. it opens the browser in 3 seconds.\no which computer is faster?\n\nyeah but this is computer science, not computer guessing.\n43\n\n\fOld stuff!!\n\u25cf you wanna copy a CD as many times as you can in 12 minutes\n\u25cf both the PC and this... thing take 4 minutes to copy\n\u25cf which device will make more copies in 12 minutes? why?\no numbers usually mean we're getting more science-y, right?\n\n44\n\n\fResponse time and throughput\n\u25cf response time is the length of time from start to finish\n\u25cf throughput is the amount of work you can do in a span of time\n\nresponse time\n(time per task) 3s\n\n30 seconds\n\nthey're not quite\nreciprocals of each\nother; their\nrelationship is a\nlittle more complex\n\nthroughput\n(tasks per time)\n\n12 minutes\n45\n\n\fResponse time can improve throughput!\n\u25cf you put a brand new 52X CD burner in your sweet Dell. it burns a CD in only\n2 minutes.\n4min\n\n4min\n\n4min\n\n2min 2min 2min 2min 2min 2min\n\n\u25cf the response time for a single CD burn is improved, but this also\ncauses our throughput to double!\n\u25cf this is because the measurement period stayed the same (12min)\n\n46\n\n\fThroughput can improve response time!\n\u25cf someone wants you to make them 20 copies ASAP\n\u25cf how long would it take with one CD duplicator?\n\u25cf how long would it take with two?\n4min 4min 4min 4min 4min\n4min 4min 4min 4min 4min\n\n4min 4min 4min 4min 4min\n\nwith one:\n20min\n\n4min 4min 4min 4min 4min\n4min 4min\n\n4min 4min\n4min 4min\n4min 4min\n\nwith two:\n12min\n\nthis is because the\nworkload stayed the\nsame (20 copies)\n47\n\n\fApplying it to a CPU\n\u25cf the CPU's job is to run instructions. so we could\u2026\no do each instruction faster (i.e. reduce latency)\no do more instructions at once (i.e. increase throughput)\n\u25cf for a long time, we did the former\u2026\no clock speeds increased by 2 orders of magnitude since ~1990\n\u25aa I had a 33MHz! 80486 PC\n\u25cf but then we hit a wall.\no and that's when multi-core CPUs became common.\n\n48\n\n\fReducing latency\n\u25cf you put a new Pentium 4 in your sweet Dell. it executes a single instruction in\nonly 0.8 nanoseconds.\n1.6ns\n.8ns\n\n.8ns\n\nif each instruction takes only\n0.8ns, that means 0.8ns between\nclock pulses. How fast is the\nclock running?\n\n1.6ns\n\n.8ns\n\n.8ns\n\n1\n0.8 \u00d7 10\u22129 \ud835\udc60\n\n1.6ns\n.8ns\n\n.8ns\n\n= 1.25 \u00d7 109 \ud835\udc3b\ud835\udc67\n= 1.25 \ud835\udc3a\ud835\udc3b\ud835\udc67\n\n49\n\n\fBut is this efficient?\n\n50\n\n\fMulti-cycle lw (animated)\n\u25cf Let's watch a lw instruction flow through the datapath!\n\nlw\nInstruction\nMemory\n\nD\n\nClock!\n\nR\ne\ng\ni\ns\nt\ne\nr\ns\n\nset all control\nsignals...\n\nControl\n\nF\n\nRegister\nFile\n\nClock!\n\nR\ne\ng\ni\ns\nt\ne\nr\ns\n\nClock count: 3\n4\n5\n0\n1\n2\n\nX\n\nClock!\n\nCalculate\neff addr... R\n\nM\nload...\n\ne\ng\ni\ns\nt\ne\nr\ns\n\nData\nMemory\n\nClock!\n\nR\ne\ng\ni\ns\nt\ne\nr\ns\n\nW\n\ndata flows back to registers...\n51\n\n\fReal-World Analysis\n\n52\n\n\fAnother example\n.data\nA:\nB:\n.text\n\nloop:\n\n.word 10,20,30,40,50,60,70,80,90,100\n.word 0,0,0,0,0,0,0,0,0,0\nla\n$s0,A\nli\n$s1,10\nli\n$s2,10\nlw\n$t0,0($s0)\nmul $t0,$t0,$s1\nsw\n$t0,40($s0)\naddi $s0,$s0,4\naddi $s2,$s2,-1\nbne $s2,$0,loop\nli\n$v0,10\nsyscall\n\n# address of A\n# A[i] * 10\n# iteration\n# read A[i]\n# $t0=A[i]*10\n# update A[i]\n# next element\n# dec iteration\n# done?\n# exit syscall\n# syscall\n53\n\n\fAnother example\n.data\nA:\nB:\n.text\n\nloop:\n\n.word 10,20,30,40,50,60,70,80,90,100\n.word 0,0,0,0,0,0,0,0,0,0\n#\nla\n$s0,A\n# address of A\nli\n$s1,10\n# A[i] * 10\nli\n$s2,10\n# iteration\nlw\n$t0,0($s0)\n# read A[i]\nmul\n$t0,$t0,$s1\n# $t0=A[i]*10\nsw\n$t0,40($s0)\n# update A[i]\naddi $s0,$s0,4\n# next element\naddi $s2,$s2,-1\n# dec iteration\nbne\n$s2,$0,loop\n# done?\nli\n$v0,10\n# exit syscall\nsyscall\n# syscall\n\ninstr. count\n2\n1\n1\n10\n10\n10\n10\n10\n10\n1\n1\n54\n\n\fAnother example\n\u25cf Let\u2019s analyze the program.\n\u25cf How much time with a Single-Cycle design?\n1. What\u2019s the clock length?\n\u25aa Assume a clock speed of 100 MHz (cycle length is 1/100MHz, or 10ns)\n2. What\u2019s the cycles per instruction?\n\u25aa CPI: 1 (single-cycle! yay!)\n\n\u25cf Thus this program executes in this much time:\no 66 instructions * 1 CPI * 10 ns = 660ns\n\n55\n\n\fAnother example\n\u25cf How much time with a Multicycle design?\n1. We need to know the clock length (what is the clock speed?)\nLet\u2019s just assume the ideal efficiency: divide the clock length by 5.\n\u25aa (Because we said loads, the slowest, take 5 cycles while arithmetic takes 4)\n\u25aa AKA multiply the clock speed by 5 to 500 MHz\n\u25aa Either way, the clock length is 10ns / 5 = 2ns\n\n2. What\u2019s the CPI?\n\u25aa We need to know how many of each type there are. Look at the program.\n\u25aa Arithmetic: 36, Branches: 10, Loads: 10, Stores: 10\n\u25aa There\u2019s a different # of cycles per each type (4, 3, 5, and 4 respectively)\n\u25cf Thus this program executes in this much time:\no 36*4*2ns + 10*3*2ns + 10*5*2ns + 10*4*2ns = 528ns\n\u25cf Multicycle, here, let\u2019s us improve our program execution\nfrom 660ns to 528ns (20% reduction!)\n56\n\n\fdoo-doo-doo doo-doo-doo-doo-doo\n\u25cf not bad! I guess?\nI mean, we increased the clock speed by a factor of 5...\nand we only got 20% reduction on execution time\nif our CPI were also close to 1, it'd be 10 times as fast as the single-cycle\nmachine...\n\u25aa How do we increase throughput\u2026\n\u25aa HMMMMMMMMMMMMMMMMMMMMMM\u2026\n\n57\n\n\f", "label": [[50, 67, "Concept"],[197, 207, "Concept"],[213, 223, "Concept"],[307, 319, "Concept"],[415, 425, "Concept"],[1156, 1181, "Concept"],[1421, 1436, "Concept"],[1727, 1746, "Concept"],[2778, 2781, "Concept"],[2787, 2790, "Concept"],[2794, 2797, "Concept"],[2900, 2903, "Concept"],[3045, 3048, "Concept"],[3056, 3069, "Concept"],[3139, 3149, "Concept"],[3334, 3337, "Concept"],[3414, 3417, "Concept"],[3442, 3445, "Concept"],[3623, 3633, "Concept"],[3970, 3973, "Concept"],[3976, 3979, "Concept"],[4161, 4172, "Concept"],[4222, 4225, "Concept"],[4314, 4317, "Concept"],[4414, 4417, "Concept"],[4731, 4734, "Concept"],[4790, 4793, "Concept"],[4796, 4806, "Concept"],[5097, 5116, "Concept"],[5346, 5365, "Concept"],[5668, 5687, "Concept"],[6061, 6080, "Concept"],[6176, 6195, "Concept"],[14494, 14497, "Concept"],[14552, 14564, "Concept"]], "Comments": []}
{"id":50, "segment": ["train_set", "labeled"], "course": "cs0447", "lec": "lec02","text":"#1\nCS 0447\nIntroduction to\nComputer Programming\n\nBinary, Hex, Octal\nOriginal slides by: Jarrett Billingsley\nModified with bits from: Bruce Childers, David\nWilkinson\n\nLuís Oliveira\n\nFall 2020\n\n\fWhat do I need to know now!\nThe classes will be recorded!\n● You will be able to access the videos online\no They are for your personal use only!\no Do not distribute them!\n● You don’t need to turn on your camera\no If you do, you may be recorded\n● You can ask questions via text!\no Chat is great for that. If I don’t stop and read your questions, ask them again\no But feel free to interrupt me at any point.\n\n2\n\n\fClass Announcements\nRecitation are happening!!\n\n3\n\n\fSummary\n● Numbers and bases\no Why is 2020 worth 2020??\no Or is it?\n▪ Maybe it’s worth 8224?\n● Number representation\no Binary – what do 0s and 1s mean?\n● Other representations\no Hexadecimal and octal\n● How does a computer interpret them?\no (bait) The answer will surprise you!!\n\n4\n\n\fNumbers and bases\n\n5\n\n\fPositional number systems\n● The numbers we use are written positionally: the position of a digit within\nthe number has a meaning.\n\n3\n2 x 10\n\n2000\n2\n0 0 0 0 x 10\n=\n2021=\n1\n2 0 2 x 10\n0\n+\n1 1 x 10\n6\n\n\fPositional number systems\n● The numbers we use are written positionally: the position of a digit within\nthe number has a meaning.\n\n2021\n\nMost Significant\n\nLeast Significant\n\n1000s\n\n100s\n\n10s\n\n1s\n\n103\n\n102\n\n101\n\n100\n\n● How many (digits) symbols do we have in our number system?\n○ 10: 0, 1, 2, 3, 4, 5 ,6 ,7, 8, 9\n\n7\n\n\fRange of numbers\nSuppose we have a 4-digit numeric display.\n\n● What is the smallest number it can show?\n● What is the biggest number it can show?\n● How many different numbers can it show?\no 9999 - 0 + 1 = 10,000\no What power of 10 is 10,000?\n▪ 104\n\n8\n\n\fSo… with the numbers we use every day…\n● A number represented by the digits\n𝑑𝑛 𝑑𝑛−1 … 𝑑1 𝑑0\n● Has the value\n𝑑𝑛 × 10𝑛 + 𝑑𝑛−1 × 10𝑛−1 + ⋯ + 𝑑1 × 101 + 𝑑0 × 100\n● Using 𝑛 digits we can represent 10𝑛 different numbers\n● The smallest non-negative number representable with 𝑛 digits is 0\n● The largest number representable with 𝑛 digits is 10𝑛 − 1\n● Using 10 symbols: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n\n9\n\n\fNumeric Bases\n● These 10s keep popping up… and for good reason\n● We use a base-10 (decimal) numbering system\no 10 different symbols, and each place is a power of 10\n● But we can use (almost) any number as a base!\n● The most common bases when dealing with computers are base-2 (binary), base-16\n(hexadecimal), and (rarely) base-8 (octal)\n● When dealing with multiple bases, you can write the base as a subscript to be explicit\nabout it:\n\n510 = 1012\n\n10\n\n\fMaking a number system\nUsing base B\n● A number represented by the digits\n𝑑𝑛 𝑑𝑛−1 … 𝑑1 𝑑0\n● Has the value\n𝑑𝑛 × B𝑛 + 𝑑𝑛−1 × B𝑛−1 + ⋯ + 𝑑1 × B1 + 𝑑0 × B0\n● Using 𝑛 digits we can represent B𝑛 different numbers\n● The smallest non-negative number representable with 𝑛 digits is 0\n● The largest number representable with 𝑛 digits is B𝑛 − 1\n\n● Using B symbols\nIf you use base 0 you\ndon’t need to\nremember any symbols\n\n11\n\n\fBinary – Base 2\n\n12\n\n\fHow many symbols in binary????\n\n13\n\n\fLet's make a base-2 number system\nUsing base 2\n● A number represented by the digits\n𝑑𝑛 𝑑𝑛−1 … 𝑑1 𝑑0\n● Has the value\n𝑑𝑛 × 2𝑛 + 𝑑𝑛−1 × 2𝑛−1 + ⋯ + 𝑑1 × 21 + 𝑑0 × 20\n● Using 𝑛 digits we can represent 2𝑛 different numbers\n● The smallest non-negative number representable with 𝑛 digits is 0\n● The largest number representable with 𝑛 digits is 2𝑛 − 1\n\n● Using 2 symbols: 0, 1\n14\n\n\fBinary (base-2)\n\n• We call a Binary digIT a bit – a single 1 or 0\n• When we say an n-bit number, we mean one with n binary digits\n\n1001 0110 =\nMSB\n\n27 26 25 24\n128s 64s 32s 16s\n\nLSB\n\n23\n8s\n\n22\n4s\n\n21 20\n2s 1s\n\nTo convert binary to decimal: ignore 0s, It’s the only\nadd up place values wherever you see a 1. odd number!\n\n1 × 128 +\n0 × 64 +\n0 × 32 +\n1 × 16 +\n0×8+\n1×4+\n1×2+\n0×1\n\n= 15010\n15\n\n\fMaking change\n● You want to give someone $9.63 in change, using the fewest bills and coins possible.\nHow do you count it out?\n\n$5×1\n$1× 4\n25¢× 2 10¢× 1 5¢× 0\n1¢×__\n3\nLeft: $9.63 -$5= $4.63 -$4= $0.63 -50¢= $0.13-10¢=$0.03 -0¢=$0.03 -3¢=$0.00\n\n• Biggest to smallest\n• Most significant to least significant\n• WHERE COULD THIS BE GOING...\n16\n\n\fConverting decimal to binary\n\n• You want to convert the number 8310 to binary.\n128s\n\n64s\n\n32s\n\n16s\n\n8s\n\n4s\n\n2s\n\n1s\n\nLeft: 83- 0 =83- 64 =19 - 0 = 19- 16 = 3 - 0 = 3 - 0 = 3 - 2 = 1 - 1 = 0\n\n01010011\n\n• For each place from MSB:\n• If place value < remainder:\n\no digit = 1\no remainder = remainder - place\n• Else, digit = 0.\n17\n\n\fBits, bytes, nibbles, and words\n● A bit is one binary digit, and its unit is lowercase b.\n\n● A byte is an 8-bit value, and its unit is UPPERCASE B.\no This is (partially) why your 30 megabit (Mbps) internet connection can only give you\nat most 3.57 megabytes (MB) per second!\n● A nibble (also nybble) is 4 bits – half of a byte\no Corresponds nicely to a single hex digit.\n\n● A word is the \"most comfortable size\" of number for a CPU.\n● When we say \"32-bit CPU,\" we mean its word size is 32 bits.\no This means it can, for example, add two 32-bit numbers at once.\n● BUT WATCH OUT:\no Some things (Windows, x86) use word to mean 16 bits and double word (or\ndword) to mean 32 bits.\n\n18\n\n\fKilo, mega, tera\nPotatoes\n\nBytes\n\nBytes\n\n1g (gram)\n\n1B (Byte)\n\n1B (Byte)\n\n1kg (Kilogram) = 1000g\n\n1kB (Kilobyte) = 1000B\n\n1kiB (Kibibyte) = 1024B\n(power of 2 nearest to 1000)\n\n1Mg (Megagram) = 1000Kg\n\n1MB (Megabyte) = 1000kB\n\n1MiB (Mebibyte) = 1024kiB\n\n1Gg (Gigagram) = 1000Mg\n\n1GB (Gigabyte) = 1000MB\n\n1GiB (Gibibyte) = 1024MiB\n\n1Tg (Teragram) = 1000Gg\n\n1TB (Terabyte) = 1000GB\n\n1TiB (Tebibyte) = 1024GiB\n\n1Eg (Exagram) = 1000Tg\n\n1EB (Exabyte) = 1000TB\n\n1EiB (Exbibyte) = 1024TiB\n\nUsed for hard drive capacity and\nnetwork speeds\n\nUsed for most other things!\nBecause binary!\n\nA 1TB drive only has 931GiB!\n\n19\n\n\fThe real world IS CONFUSING!!!!\n\n931GB\n\n931GiB\n\nSometimes this is used to mean\n931GiB \n\nThis always means 931GiB! ☺\n\n20\n\n\fWhy binary? Whynary?\n\n• Why indeed?\no log 2 10 = 3.322\no The number of bits required to represent 10 digits\no The increase on number of components in a computer!\n\n• Because it’s soooooo much easier to implement the hardware!\no And robust!\n\n• Arithmetic becomes really easy (as we'll see in several weeks)\n\n21\n\n\fWhy binary? Whynary?\n● Why indeed?\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n● What color is this?\n\n22\n\n\fWhy binary? Whynary?\n● Why indeed?\n0\n\n1\n\n● What color is this?\n\n23\n\n\fWhy binary? Whynary?\n\n• Why indeed?\no log 2 10 = 3.322\no The number of bits required to represent 10 digits\no The increase on number of components in a computer!\n\n• Because it’s soooooo much easier to implement the hardware!\no And robust!\n\n• Arithmetic becomes really easy (as we'll see in several weeks)\n\n24\n\n\fEverything in a computer is a number\n● So, everything on a computer is represented in binary.\no everything.\n01100101 01110110 01100101 01110010 01111001 01110100 01101000\n01101001 01101110 01100111 00001010 00000000\n● Java strings are encoded using UTF-16\no Most letters and numbers in the English alphabet are < 128.\no “Strings are numbers”\n▪ 83 116 114 105 110 103 115 32 97 114 101 32 110 117 109 98 101 114 115 0\n● ASCII is also pretty common (the best kind of common)\no That’s what we will be using → 8 bit numbers represent characters\no Letters and numbers (and most\/all ascii characters) have the same value as UTF-16\n\nCS 0007 – Summer 2020\n\nDo try this at home: what does this mean?\n• 71 111 111 100 32 74 111 98 0\n25\n\n\fEVERYTHING\n\n• Images and colors? Numbers!\n• Videos? Numbers!\n\nCS 0007 – Summer 2020\n\n122\n\n185\n\n32\n\n239\n\n97\n\n181\n\n181\n\n40\n\n41\n\n26\n\n\fOne number, many possible meanings\n● All information on computers is stored as patterns of bits, but…\n● How these bits are interpreted, transformed, and displayed is up to the\nprogrammer and the user.\n\n-59\n\nSigned integer\n\nR3G3B2 color\n\n11000100\n\nUnsigned integer\n\n196\n\nz80 instruction\n\nHexadecimal\n\n0xC4\n\nUnicode\n\nÄ\n\ncall nz\n27\n\n\fWhat it means to be \"arbitrary\"\n\n• It means there's no reason for it to be that way.\n• we just know\/agree that it's how things are.\n• One of the biggest things I want you to know is:\nWhat a pattern of bits means is arbitrary.\n\n• As a corollary:\nThe same pattern of bits can be interpreted many\ndifferent ways.\n\n28\n\n\fThe calculat--hum--computer doesn't know or care.\n● when writing assembly (and C!) programs, the computer has no idea what you\nmean, cause nothing means anything to it\n● \"my program assembles\/compiles, why is it crashing?\"\no cause the computer is stupid\n▪ it's a big fast calculator\n● there's no difference between nonsense code and useful code\n● it's good at doing fun things with bit patterns\n● but don't confuse what it does with intelligence\n● every \"smart\" thing a computer does, it does because a human programmed it\nto act like that\n\n29\n\n\fHexadecimal – Base 16\n\n30\n\n\fHow many symbols in hexadecimal????\n\n31\n\n\fShortcomings of binary and decimal\n● Binary numbers can get really long, really quickly.\no 3,927,66410 = 11 1011 1110 1110 0111 00002\n● But nice \"round\" numbers in binary look arbitrary in decimal.\no 10000000000000002 = 32,76810\n\n● This is because 10 is not a power of 2!\n● We could use base-4, base-8, base-16, base-32, etc.\no Base-4 is not much concise than binary\n▪ e.g. 3,927,66410 = 120 3331 2323 00004\no Base-32 and up? would require 32+ symbols. Nope.\n▪ Well at least for humans… They are actually used!\no Base-8 and base-16 look promising!\n32\n\n\fLet's make a base-2 16 number system\nUsing base 16\n● A number represented by the digits\n𝑑𝑛 𝑑𝑛−1 … 𝑑1 𝑑0\n● Has the value\n𝑑𝑛 × 16 𝑛 + 𝑑𝑛−1 × 16 𝑛−1 + ⋯ + 𝑑1 × 161 + 𝑑0 × 16 0\n● Using 𝑛 digits we can represent 𝟏𝟔𝑛 different numbers\n● The smallest non-negative number representable with 𝑛 digits is 0\n● The largest number representable with 𝑛 digits is 16 𝑛 − 1\n\n● Using 16 symbols: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\n33\n\n\fHexadecimal, or \"hex\" (base-16)\n● Digit symbols after 9 are A-F, meaning 10-15 respectively.\n● Usually we call one hexadecimal digit a hex digit. No fancy name :(\n\n003B EE70 =\n\n167 166 165 164\n\n163 162 161 160\n\nTo convert decimal to hex: use a calculator!\n\n0 × 167 +\n0 × 166 +\n3 × 165 +\n11 × 164 +\n14 × 163 +\n14 × 162 +\n7 × 161 +\n0 × 160 =\n\n3,927,66410\n\n34\n\n\fBUT WE REALLY WANT TO KNOW!!\n\n• Ok! then. Let’s go back to decimal for a bit\n\n2021\n2\n\nJust divide by 10!\n\nHow would you\nextract this\nnumber???\n\nR0\n\n10 2 0 R 2\n10 2 0 2 R 1\n10 2 0 21\n35\n\n\fBUT WE REALLY WANT TO KNOW!!\n\n• Turns out that dividing by 10 in any base has the same outcome\n\n0x10 1610\n\n003B EE7016\n\n3\n1610 59\n\nR 11\nR 14\n\nR 14\n1610 958\n1610 15 342 R 7\n1610 245 479 R 0\n\n1610\n\n3 927 664\n\n36\n\n\fBUT WE REALLY WANT TO KNOW!!\n\n• Turns out that dividing by 10 in any base has the same outcome\n\n0b10\n\n210\n\n110012\n\n210\n210\n\n1\n\nR1\n\n3\n\nR0\n\n6\n\nR0\nR1\n\n210 12\n210 25\n\n37\n\n\fThe relationship between binary and hex\n● Four bits are equivalent to one hex digit.\n● Converting between them is easy!\n● Say we had this binary number:\n\n11101111101110011100002\n\n● Starting from the LSB, divide into groups of 4\nbits (put 0s before the first digits if there are\nleftovers). Then use the table.\n\n0011 1011 1110 1110 0111 0000\n\n0x 3 B E E 7 0\n(this is common notation for hex,\nderived from the C language.)\n\nBin\n\nHex\n\nBin\n\nHex\n\n0000\n\n0\n\n1000\n\n8\n\n0001\n\n1\n\n1001\n\n9\n\n0010\n\n2\n\n1010\n\nA\n\n0011\n\n3\n\n1011\n\nB\n\n0100\n\n4\n\n1100\n\nC\n\n0101\n\n5\n\n1101\n\nD\n\n0110\n\n6\n\n1110\n\nE\n\n0111\n\n7\n\n1111\n\nF\n\nknow how to make\nthis table.\n38\n\n\fLet’s do it!\n\n100100011001111000011010010101\n\n39\n\n\fLet’s do it!\n\n00 10 0100 0110 0111 1000 0110 1001 0101\n\n2\n\n4\n\n6\n\n7\n\n8\n\n6\n\n9\n\n5\n\n2467869516\n\n0x24678695\n40\n\n\fWhy?\n\n1111 1111\n1 × 27 + 1 × 26 + 1 × 25 + 1 × 24 + 1 × 23 + 1 × 22 + 1 × 21 + 1 × 20\n\n1 × 23 + 1 × 22 + 1 × 21 + 1 × 20 =\n8+4+2+1=\n15\n1 × 23 + 1 × 22 + 1 × 21 + 1 × 20 × 24 + 15\n15 × 161 + 15 × 160\n\nF\n\nF\n\nFactoring\n\n24 = 16\n41\n\n\fPowers of Two\n● Memorize at least the powers up to ~28 or 210.\no If you can't remember one, double the previous one.\n\nDec\n\nHex\n\n20\n\n1\n\n0x1\n\n21\n\n2\n\n0x2\n\n22\n\n4\n\n0x4\n\n23\n\n8\n\n0x8\n\n24\n\n16\n\n0x10\n\n● How about a 16-bit value?\no 65535: 0xFFFF\n\n25\n\n32\n\n0x20\n\n26\n\n64\n\n0x40\n\n● \"0xFFFF\" is kinda like \"9999\" in decimal.\n\n27\n\n128\n\n0x80\n\n28\n\n256\n\n0x100\n\n● These are the place values for binary, and they are also\nnice \"round\" numbers in binary and hex.\n● What is the largest number that an 8-bit value can hold?\nWhat is that in hexadecimal?\no 255: 0xFF\n\n42\n\n\fOctal – Base 8\n\n43\n\n\fHow many symbols in octal????\n\n44\n\n\fBase-8?\n● base-8, octal, used to be commonplace but isn't anymore\n● each octal digit (0-7) corresponds to three bits\no this made it a nice fit for 9-, 12-, 18-, and 36-bit machines\n● buuuut no one cares about octal anymore \n● SORRY OCTAL\no it's okay, it has its revenge from time to time\no try this out in Java sometime:\n\nSystem.out.println(\"012345 = \" + 012345);\n\n45\n\n\fLet’s do it!\n\n100100011001111000011010010101\n\n46\n\n\fLet’s do it!\n\n100 100 011 001 111 000 011 010 010 101\n\n4\n\n4\n\n3\n\n1\n\n7\n\n0\n\n3\n\n44317032258\n04431703225\n0o4431703225\n\n2\n\n2\n\n5\n\n47\n\n\fNext class!\n\n• Assembly!!!!!\n\no How can we program the computer?\no New language -> new bugs!\n\n• Specifically\n\no Storing and retrieving data from memory\no Manipulating the data\n\n48\n\n\f","label":[[49,55,"Concept"],[57,60,"Concept"],[62,67,"Concept"],[665,682,"Concept"],[773,779,"Concept"],[832,843,"Concept"],[848,853,"Concept"],[960,985,"Concept"],[1159,1184,"Concept"],[1476,1492,"Concept"],[2125,2138,"Concept"],[2402,2408,"Concept"],[2420,2431,"Concept"],[2455,2460,"Concept"],[4520,4523,"Concept"],[4579,4583,"Concept"],[4763,4769,"Concept"],[4844,4847,"Concept"],[4860,4864,"Concept"],[5166,5170,"Concept"],[5172,5176,"Concept"],[5178,5182,"Concept"],[6215,6221,"Concept"],[6308,6314,"Concept"],[6377,6383,"Concept"],[9790,9801,"Concept"],[9807,9810,"Concept"],[10741,10747,"Concept"],[10752,10755,"Concept"],[11725,11738,"Concept"],[12269,12274,"Concept"],[12310,12315,"Concept"],[12344,12349,"Concept"]],"Comments":[]}
{"id":51, "segment": ["train_set", "labeled"], "course": "cs0447", "lec": "lec05","text":"#5\nCS 0447\nIntroduction to\nComputer Programming\n\nArrays\nOriginal slides by: Jarrett Billingsley\nModified with bits from: Bruce\nChilders, David Wilkinson\n\nLuís Oliveira\n\nFall 2020\n\n\fArrays and Addresses\n\n2\n\n\fStrings, arrays, objects…\n● When we wanted to store 4-byte values…\no We split them up across consecutive bytes\n● What about a string?\no How is a string represented?\no How many bytes is a string?\n▪ Might be thousands or millions of characters\n● Any array might be that big too\n● The solution to storing it in memory is the same\no but how do you access these big things\n▪ they don't fit in registers!\n– ssssssssooooooooooooooooooooooooooo…\n\nAddr\n\nVal\n\n0\n\n00\n\n1\n\n30\n\n2\n\n04\n\n3\n\n00\n\n4\n\nDE\n\n5\n\nC0\n\n6\n\nEF\n\n7\n\nBE\n\n8\n\n6C\n\n9\n\n34\n\nA\n\n00\n\nB\n\n01\n\nC\n\n02\n\n3\n\n\fWhat's an array?\n● If we did this in C or Java:\n\nbyte[] arr = {1, 2, 3, 4, 5, ...};\n● In memory it might look like this\n● What memory address is arr[0] at?\no What about arr[1]?\no What about arr[2]?\no What about arr[3]?\n● If an array starts at memory address A…\no …then item n is at address?\noA+n\n▪ Not really\n▪ Remember what we talked about last class?\n\nAddr\n\nVal\n\n...\n\n...\n\nF405\n\n06\n\nF404\n\n05\n\nF403\n\n04\n\nF402\n\n03\n\nF401\n\n02\n\nF400\n\n01\n\n4\n\n\fWhat if the array contains ints?\n● If we did this:\n\nint[] arr = {1, 2, 3};\n\n● In memory it'd look like this\no Why are there all these 0s?\no What endianness is being used here?\n▪ Is the End-byte(LSB)\nin the Little or in the Big memory address?\n● What memory address is arr[1] at? arr[2]?\n● If an array starts at memory address A…\no …and each item is b bytes long…\no …then item n is at address A + (n × b)\n▪ On the last slide, b happened to be 1\n– Tricky tricky\n\nAddr\n\nVal\n\nF40B\n\n00\n\nF40A\n\n00\n\nF409\n\n00\n\nF408\n\n03\n\nF407\n\n00\n\nF406\n\n00\n\nF405\n\n00\n\nF404\n\n02\n\nF403\n\n00\n\nF402\n\n00\n\nF401\n\n00\n\nF400\n\n01\n5\n\n\fAccessing arrays\n● If you wanna print all the values in an array, how do??\n\nfor(int i = 0; i < length; i++)\nprint(data[i]);\n\n● Let's focus on ^this bit^ for now\n● Data is an array of words, so how big is each item?\n● In this calculation, what is A? b? n?\n● So what's the address calculation?\no Address of item i = data + (i * 4)\n▪ Do you think you could convert that into assembly?\n– Well we haven't done the loop yet…\n» But we'll get to that\n\n6\n\n\fAccessing arrays in MIPS\n\n7\n\n\fMaking arrays in MIPS\n● First you need to make space for it just like a variable\no How did we write that variable?\n\nx: .word 4 # static int x=4;\n\n● For a small array you can list all the values:\n\nlittle_array: .word 1, 2, 3, 4\n\n● But for a big array, that would be annoying\n● So you can write:\n\nbig_array:\n\n.word 0xBEEFC0DE:100\n\n● This fills the array with 100 copies of 0xBEEFC0DE\n● Notice how similar these look to variables\no (that's cause there's not really any difference)\n\n8\n\n\fMIPS ISA: putting a variable's address in a register\n● If the address calculation needs the address of the array…\no We've gotta get that address into a register right?\n▪ Can't add something unless it's in registers\n● Remember what the la instruction does?\n\nla t0, little_array\n● la means load address\n\no it doesn't load anything from memory.\n\no Only lw\/lh\/lhu\/lb\/lbu load from memory\no All the other \"loads\" (li, la) just \"put a value in a register\"\n● What it does: t0 now contains little_array's address\n9\n\n\fAccessing arrays in MIPS (let's do it together)\n● We want to print out the value in my_array[3].\n\nmy_array: .word 1, 2, 3, 4\n\n● What's the address calculation?\n● Now turn that into MIPS\no Let's come up with the instructions first\n▪ And then decide which registers to use\no How do we put the address of my_array in a register?\no Now to translate the math\no Now we have the address; how do we get the value?\no How do we print it out?\n● If we want to store a value into the array…\no We just use a store instruction instead of a load\nCheck code example array_ex1.asm\n10\n\n\fHow does the CPU know that t0 holds an address?\n● WHAT DO YOU THINK\no IT DOESN’T\n● Addresses are just numbers too!!\no Which is good! It means we can do math on addresses\n▪ As we just did\n▪ That's how arrays and strings and stuff work\n● You can also have a variable whose value is an address\no Hey\n▪ 449 students\n– What are these called?\n» Pointers (& is like la, * is like lw\/sw)\n\n11\n\n\fWatch out\n● Let's remove the mul instruction\no \"fetch address not aligned on word boundary\"?\n● In MIPS, all memory accesses must be aligned\n● Alignment is just:\no the address of a n-byte value\nmust be a multiple of n\no so for 4-byte words…\n● that's it, that's all, there's nothing more to it\no it's not scary\n\nAddr\n\nVal\n\nF40B\n\n00\n\nF40A\n\n00\n\nF409\n\n00\n\nF408\n\n03\n\nF407\n\n00\n\nF406\n\n00\n\nF405\n\n00\n\nF404\n\n02\n\nF403\n\n00\n\nF402\n\n00\n\nF401\n\n00\n\nF400\n\n01\n12\n\n\fWhat about strings?\n● Strings are also arrays:\n\nstring: .asciiz “Test”\n\no The z means it has a zero terminator\no The same as:\n\nstring: .byte 84, 101, 115, 116, 0\n● Be careful with:\n\nstring: .ascii “Test”\n\no If you print an unterminated string, strange things happen!\no The same as:\n\nstring: .byte 84, 101, 115, 116\n\nCheck code example arrays_ex3.asm\n\n13\n\n\fQuestions?\n● Is this a valid address for a word?\n\n0x0800 0001\n\n● How about for a half-word?\n● How about for a byte?\n● How can I make an array of halfwords with 25 elements set to 0?\no The first halfword is in address 0x0800 00F0, where is the second?\n● How is a string terminated?\n\n14\n\n\f","label":[[49,55,"Concept"],[181,187,"Concept"],[192,201,"Concept"],[762,767,"Concept"],[879,893,"Concept"],[1203,1208,"Concept"],[1796,1802,"Concept"],[1845,1850,"Concept"],[2057,2076,"Concept"],[2244,2250,"Concept"],[2271,2277,"Concept"],[2508,2513,"Concept"],[3004,3006,"Concept"],[3026,3028,"Concept"],[3266,3272,"Concept"],[3395,3414,"Concept"],[4163,4171,"Concept"]],"Comments":[]}
{"id":52, "segment": ["train_set", "labeled"], "course": "cs0007", "lec": "lec01","text":"CS 0007: Introduction to Java\nLecture 1\nNathan Ong\nUniversity of Pittsburgh\nSeptember 1, 2016\n\n\fNot Your Usual Best Buy Pitch\nfor a Computer\nAND JAVA IS NOT JUST AN INDONESIAN ISLAND OR A TYPE OF\nCOFFEE\n\n\fWhat Happens in that Magical\nBox?\n\nSource: http:\/\/ak1.ostkcdn.com\/images\/products\/77\/822\/L13881092.jpg\n\n\fHow a Computer is Organized\n\nSource: https:\/\/www.doc.ic.ac.uk\/~eedwards\/compsys\/overall.gif\n\n\fHistory of Computing\n\nSource:\n\n\fHistory of Computing\n???\n– Math invented\n~2400 BC – Abacus probably invented in Babylon\n???\n– More math invented\n1600s – John Napier discovers logarithms and\nfast log computation\n1786 – Johann Müller theorizes a \"Difference\nEngine\"\n1822 – Charles Babbage (\"father of the\ncomputer\") secures funding to build\na Difference Engine (never built)\n\n\fHistory of Computing\n\n1837 – Charles Babbage designs \"Analytical\nEngine\"\n\n1841 Prototype on display at The Science Museum in London\n(Source: https:\/\/s3.yimg.com\/te\/8543\/8649286817_a3042f2c29_z.jpg)\n\n\fAnalytical Engine\n• Babbage's Engine is considered the first\ngeneral-purpose computer\n• Could handle basic math operations, logic,\nloops, conditional branching, and had\nsome primitive memory\n• Powered by a hand-crank\n• The full-scale version was never built, due\nto inadequate funding\n\n\fAnalytical Engine\n• Accepted two kinds\nof punch cards:\n– Top: \"Variable Cards\"\n(Data)\n– Bottom: \"Operational\nCards\" (Instructions)\n\n• Punch cards were\nnot new (used to\ndirect mechanical\nlooms at the time)\nSource:\nhttps:\/\/upload.wikimedia.org\/wikipedia\/commons\/0\/0d\/PunchedCardsAnalyticalEngine.jpg\n\n\fAda Lovelace\n• In 1842, she\nrecognized the usage\nof multiple, nondirect, complex\noperations and\nmemory could\ngenerate Bernoulli\nnumbers using\nBabbage's Analytical\nEngine.\n• This is the first\ncomputer program.\nSource:\n\n\fSide note: Yes there is a fan-fiction ship musical for Babbage\nand Lovelace.\n\n\fHistory of Computing\n1885 – AT&T (the company behind the\noperating\nsystem Unix and the\nprogramming\nlanguage C)\nfounded\n1906 – Xerox (the company behind desktops\nand the computer mouse) founded\n1907 – Vacuum tube invented\n1911 – IBM (the company behind hard disks\nand floppy disks) founded\n1931 – Charles Wynn-Williams published first\nusage of electronics in computation\n\n\fHistory of Computing\n1938 – Claude Shannon published first usage\nof\nelectronics in Boolean algebra\ncomputation\n1946 – Alan Turing publishes a paper on\nprograms stored and read from tape\n– The ENIAC, the first electronic generalpurpose computer, was developed\n1947 – Transistor invented\n– Cathode Ray Tube (CRT) Random Access\nMemory (RAM) invented\n\n\fHistory of Computing\n1952 – Grace Hopper invents first\ncompiler\n1956 – Hard disk invented\n1957 – FORTRAN invented\n1958 – Integrated circuit (chip) invented\n– LISP invented\n1960 – COBOL invented\n1962 – First computer game created\n1963 – Computer mouse invented\n\n\fHistory of Computing\n1964 – BASIC invented\n1965 – First supercomputer developed\n– Gordon Moore publishes his famous\n\"Moore's\nLaw\"\n1968 – Moore founds Intel (the company behind CPUs\nand other chips)\n1969 – ARPANET (predecessor to the Internet)\ndeveloped\n– UNIX developed\n1970 – Integrated Circuit Dynamic-RAM developed\n– Pascal invented\n\n\fHistory of Computing\n1971 – Intel develops first commercially available\nmicroprocessor (4004)\n– Famous \"P vs. NP\" problem stated by Kurt\nGödel\n– Floppy disks invented\n1972 – C invented\n1975 – First personal computer sold (Altair 8800)\n– Microsoft founded\n1976 – Apple founded\n– LISP invented\n\n\fHistory of Computing\n1978 – SQL invented\n1982 – Sun Microsystems (company behind\nJava) founded\n1984 – C++ invented\n1985 – CD-ROM developed\n1989 – World Wide Web invented\n1991 – Linux invented\n1993 – Concept of an Internet search engine\ndeveloped\n\n\fHistory of Computing\n1994 – First smartphone developed\n1995 – USB invented\n– DVD-ROM invented\n– Java invented\n\n\fJava Today\n• Oracle acquired Sun Microsystems in\n2010.\n• One of the most widely used languages,\nprimarily found in business enterprises,\nweb applications, or mobile phones (i.e.\nAndroid).\n• Current version: Java SE 8u102\n\n\fWhy Learn Java?\n• Widely used\n• Constantly updating and receiving\nsupport\n• Easily understood due to standardized\nand consistent syntax\n• Forces code readability\n• Virtual Machine isolates running code\n\n\fSoftware Layers\n• Applications: Software\nthat interfaces with\nthe user\n• System Software:\nOperating System\n(e.g. Windows, Mac\nOSX, Linux)\n• Device Drivers:\nSoftware to talk to\nnon-computer devices\n(e.g. printers,\nwebcams, etc.)\nSource:\n\n\f","label":[[132,140,"Concept"],[145,149,"Concept"],[316,324,"Concept"],[404,424,"Concept"],[436,456,"Concept"],[779,799,"Concept"],[1864,1884,"Concept"],[2236,2256,"Concept"],[2585,2605,"Concept"],[2847,2867,"Concept"],[3185,3205,"Concept"],[3479,3499,"Concept"],[3727,3747,"Concept"],[3823,3827,"Concept"],[3839,3843,"Concept"],[4072,4076,"Concept"],[4284,4296,"Concept"],[4339,4354,"Concept"],[4406,4420,"Concept"]],"Comments":[]}
