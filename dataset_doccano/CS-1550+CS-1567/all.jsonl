{"id":296,"segment": ["train_set", "labeled"],  "course": "cs1550", "lec": "lec02", "text":"Introduction to Operating Systems\nCS\/COE 1550\nProcess Synchronization - 1\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne ¬©2013)\n\n\fAnnouncements\n‚Ä¢ Homework 1 is due next Monday at 11:59 pm\n\n‚Ä¢ Recitations started last week\n‚Ä¢ Please watch the videos\n\n‚Ä¢ Lab 1 is due on 2\/4 at 11:59 pm\n‚Ä¢ Distributed using GitHub Classroom\n\n‚Ä¢ Explained in this week‚Äôs recitations\n\n‚Ä¢ Steps of a syscall posted on Canvas\n‚Ä¢ TA Office hours available on the syllabus page\n‚Ä¢ Muddiest points will be anonymous and not seen to\nstudents\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n2\n\n\fMuddiest Points\n‚Ä¢ storage\/access of the mode bits\n‚Ä¢ syscalls\n‚Ä¢\n\nidt\/isr vs syscall table\n\n‚Ä¢\n\nDifference between f1~f7(what to call them?) and\nf8~f10(syscall functions)\n\n‚Ä¢\n\nthe beginning of the syscall process\n\n‚Ä¢\n\nsyscall steps\n\n‚Ä¢\n\neax register relevance to interrupts\/syscall\n\n‚Ä¢\n\nHow user programs need to be changed for new syscalls\n\n‚Ä¢\n\nHow high level code interacts with syscalls\n\n‚Ä¢ xv6 walkthrough\n‚Ä¢\n\nArray of functions syntax in C\n\n‚Ä¢ monolithic vs micro\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n3\n\n\fProblem: race conditions\n‚Ä¢ R is a CPU register\n\n‚Ä¢ X is a variable\nstored in memory\n\nP1\nx++\n\nP2\nx++\nx=3\n\nR <= x\nR = R+1\nR => x\n\nR <= x\nR = R+1\nR => x\n\nx=5\nR <= x\n\nR <= x\nR = R+1\nR = R+1\nR => x\nR => x\n\nx=6!\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n4\n\n\fRace conditions\n‚Ä¢\n\nCooperating processes share storage (memory)\n\n‚Ä¢\n\nBoth may read and write the shared memory\n\n‚Ä¢\n\nProblem: can‚Äôt guarantee that read followed by write is atomic\n‚Ä¢\n\nAtomic means uninterruptible\n\n‚Ä¢\n\nOrdering matters!\n\n‚Ä¢\n\nThis can result in erroneous results!\n\n‚Ä¢\n\nWe need to eliminate race conditions‚Ä¶\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n5\n\n\fAtomic operations\n‚Ä¢ If done in one instruction, then not interruptible\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n6\n\n\fContext Switching\nHow did the CPU switch from P1 to P2 then to P1 then\nto P2 again ‚Ä¶?\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n7\n\n\fProcess Control Block\n``Active entities are data structures when viewed from a\nlower level.‚Äô‚Äô\n\nRaphael Finkel, University of Kentucky\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n8\n\n\fProcess Control Block (PCB)\nInformation associated with each process\n(also called task control block)\n‚Ä¢ Process state ‚Äì running, waiting, etc\n‚Ä¢ Program counter ‚Äì location of instruction to execute next\n‚Ä¢ CPU registers ‚Äì contents of all process-centric registers\n‚Ä¢ CPU scheduling information- priorities, scheduling queue\npointers\n‚Ä¢ Memory-management information ‚Äì memory allocated to\nthe process\n‚Ä¢ Accounting information ‚Äì CPU used, clock time elapsed\nsince start, time limits\n‚Ä¢ I\/O status information ‚Äì I\/O devices allocated to process,\nlist of open files\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n9\n\n\fProcess Representation in Linux\nRepresented by the C structure task_struct\npid_t pid; \/* process identifier *\/\nlong state; \/* state of the process *\/\nunsigned int time_slice \/* scheduling information *\/\nstruct task_struct *parent; \/* this process‚Äôs parent *\/\nstruct list_head children; \/* this process‚Äôs children *\/\nstruct files_struct *files; \/* list of open files *\/\nstruct mm_struct *mm; \/* address space of this process *\/\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n10\n\n\fContext Switch\n‚Ä¢ When CPU switches to another process, the system\nmust save the state of the old process and load the\nsaved state for the new process via a context\nswitch\n‚Ä¢ Context of a process represented in the PCB\n‚Ä¢ Context-switch time is overhead; the system does no\nuseful work while switching\n‚Ä¢ The more complex the OS and the PCB ‚ûî the longer the\ncontext switch\n\n‚Ä¢ Time dependent on hardware support\n‚Ä¢ Some hardware provides multiple sets of registers per\nCPU ‚ûî multiple contexts loaded at once\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n11\n\n\fContext Switching\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n12\n\n\fXv6 Code Walkthrough\n‚Ä¢ PCB and process table\n\n‚Ä¢ Context switching\n‚Ä¢ Calling of the swtch routine\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n13\n\n\fContext Switching in Xv6\n%eax\n%edx\n\ncontext\n\nPCB of Process ùëÉ0\n\nReturn address\n\n%esp\n%eip\n\nStack of Process ùëÉ0\n\nCPU\nReturn\nReturn address\naddress\n\ncontext\n\nPCB of Process ùëÉ1\n\nStack of Process ùëÉ1\nMemory\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n14\n\n\fCritical regions\n‚Ä¢\n\nBack to the race conditions problem\n\n‚Ä¢\n\nUse critical regions to provide mutual exclusion and help fix race conditions\n\n‚Ä¢\n\nLet‚Äôs put the statement x++ in a critical region\nP1 enters\ncritical region\n\nP1 leaves\ncritical region\n\nProcess P1\nP2 tries to enter\ncritical region\n\nProcess P2\n\nP2 enters\ncritical region\n\nP2 leaves\ncritical region\n\nP2 blocked\nTime\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n15\n\n\fHow to implement critical regions?\n‚Ä¢ Turn-based solutions\n\n‚Ä¢ Spinlocks\n‚Ä¢ Semaphores\n‚Ä¢ Monitors\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n16\n\n\fUsing Spinlocks\nSpinlock lock;\n\nCode for process Pi\n\nWhile(1){\nLock(lock)\n\/\/ critical section\nUnlock(lock);\n\/\/ remainder of code\n}\n}\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n17\n\n\fSpinlock implementation (1\/2)\n‚Ä¢ Solution: use hardware\n\n‚Ä¢ Several hardware methods\n‚Ä¢ Test & set: test a variable and set it in one instruction\n‚Ä¢ Atomic swap: switch register & memory in one instruction\n‚Ä¢ Turn off interrupts: process won‚Äôt be switched out unless it\nasks to be suspended\n\n‚Ä¢ The first two methods can be implemented in user\nland\n‚Ä¢ Why can‚Äôt we implement the third method in user land?\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n18\n\n\f","label":[[16,33,"Concept"],[46,69,"Concept"],[422,429,"Concept"],[571,588,"Concept"],[651,660,"Concept"],[663,671,"Concept"],[675,678,"Concept"],[679,682,"Concept"],[686,693,"Concept"],[760,767,"Concept"],[804,811,"Concept"],[824,831,"Concept"],[842,845,"Concept"],[868,878,"Concept"],[879,886,"Concept"],[936,944,"Concept"],[984,992,"Concept"],[996,999,"Concept"],[1049,1059,"Concept"],[1063,1068,"Concept"],[1083,1100,"Concept"],[1132,1147,"Concept"],[1157,1169,"Concept"],[1199,1205,"Concept"],[1343,1360,"Concept"],[1383,1398,"Concept"],[1414,1423,"Concept"],[1439,1445,"Concept"],[1479,1492,"Concept"],[1553,1559,"Concept"],[1563,1569,"Concept"],[1681,1696,"Concept"],[1713,1730,"Concept"],[1753,1770,"Concept"],[1839,1856,"Concept"],[1879,1896,"Concept"],[1980,1997,"Concept"],[2020,2041,"Concept"],[2169,2186,"Concept"],[2209,2230,"Concept"],[2232,2235,"Concept"],[2270,2277,"Concept"],[2291,2309,"Concept"],[2313,2326,"Concept"],[2353,2368,"Concept"],[2413,2426,"Concept"],[2445,2470,"Concept"],[2473,2499,"Concept"],[2513,2529,"Concept"],[2541,2570,"Concept"],[2573,2579,"Concept"],[2597,2604,"Concept"],[2607,2629,"Concept"],[2632,2635,"Concept"],[2642,2652,"Concept"],[2688,2710,"Concept"],[2738,2745,"Concept"],[2755,2765,"Concept"],[2780,2797,"Concept"],[2820,2827,"Concept"],[2883,2894,"Concept"],[3262,3279,"Concept"],[3303,3317,"Concept"],[3325,3328,"Concept"],[3349,3356,"Concept"],[3383,3388,"Concept"],[3400,3407,"Concept"],[3427,3432,"Concept"],[3445,3452,"Concept"],[3459,3473,"Concept"],[3476,3483,"Concept"],[3489,3496,"Concept"],[3516,3519,"Concept"],[3522,3541,"Concept"],[3545,3553,"Concept"],[3625,3627,"Concept"],[3636,3639,"Concept"],[3657,3671,"Concept"],[3752,3761,"Concept"],[3766,3769,"Concept"],[3781,3789,"Concept"],[3819,3836,"Concept"],[3860,3877,"Concept"],[3893,3910,"Concept"],[3934,3937,"Concept"],[3957,3960,"Concept"],[3965,3978,"Concept"],[3982,3999,"Concept"],[4046,4063,"Concept"],[4087,4104,"Concept"],[4108,4111,"Concept"],[4112,4116,"Concept"],[4117,4121,"Concept"],[4123,4130,"Concept"],[4132,4135,"Concept"],[4139,4146,"Concept"],[4167,4171,"Concept"],[4172,4176,"Concept"],[4187,4194,"Concept"],[4199,4202,"Concept"],[4234,4241,"Concept"],[4243,4246,"Concept"],[4250,4257,"Concept"],[4271,4278,"Concept"],[4282,4288,"Concept"],[4303,4320,"Concept"],[4344,4360,"Concept"],[4376,4391,"Concept"],[4408,4424,"Concept"],[4466,4481,"Concept"],[4519,4534,"Concept"],[4545,4560,"Concept"],[4572,4587,"Concept"],[4589,4596,"Concept"],[4618,4633,"Concept"],[4635,4642,"Concept"],[4657,4672,"Concept"],[4684,4699,"Concept"],[4732,4749,"Concept"],[4790,4806,"Concept"],[4810,4830,"Concept"],[4834,4843,"Concept"],[4846,4856,"Concept"],[4859,4867,"Concept"],[4883,4900,"Concept"],[4930,4939,"Concept"],[4940,4948,"Concept"],[4965,4972,"Concept"],[5072,5089,"Concept"],[5113,5121,"Concept"],[5258,5269,"Concept"],[5278,5286,"Concept"],[5289,5295,"Concept"],[5326,5336,"Concept"],[5338,5345,"Concept"],[5446,5455,"Concept"],[5501,5510,"Concept"],[5527,5544,"Concept"]],"Comments":[]}
{"id":297,"segment": ["train_set", "labeled"],  "course": "cs1550", "lec": "lec06", "text":"Introduction to Operating Systems\nCS\/COE 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne ¬©2013)\n\n\fAnnouncements\n‚Ä¢ Upcoming deadlines\n‚Ä¢ Homework 3 is due next Monday 2\/7\n‚Ä¢ Lab 1 is due on 2\/4\n‚Ä¢ Project 1 due on 2\/18\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fPrevious lecture ‚Ä¶\n‚Ä¢ How processes (threads) are created and terminated\n\n‚Ä¢ Tracing programs with fork() calls\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fMuddiest Points (fork)\n‚Ä¢ can you clarify copy-and-write? does the memory\nautomatically get ‚Äúpassed‚Äù down or not?\n‚Ä¢ I was confused how fork can be assigned to variable\nand whether its the child or parent that gets assigned\n‚Ä¢ Fork tracing example\n‚Ä¢ fork tracing!!$\n‚Ä¢ How can a child process run a different program than\ntheir parent?\n‚Ä¢ what is exec()\n‚Ä¢ What data should you track when fork tracing\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fMuddiest Points (wait())\n‚Ä¢\n\nWhy can a child process become a zombie for a parent process, but\nnot the other way around?\n\n‚Ä¢\n\nDoes most of the parent processes invoke wait( )? Is this the system\nsoftware engineers' job to ensure every process will invoke wait( )\ndefaultly to avoid creating zombie processes, or is OS's job and it\ncan arbitrarily invoke wait( ) or not?\n\n‚Ä¢\n\ndoes a process actually wait when wait() is called? like stops\nrunning\n\n‚Ä¢\n\nZombie vs Orphan processes\n\n‚Ä¢\n\nWhat are the differences of a zombie and orphan process? The parent\ndoesnt invoke wait in either instance?\n\n‚Ä¢\n\nImplementation of how init adopts orphaned processes.\n\n‚Ä¢\n\nCan a process be orphan and zombie at the same time?\n\n‚Ä¢\n\nOrphan versus zombie processes. The difference between when the\nparent process calls exit()\n\n‚Ä¢\n\nIn what situation would a child not be a copy of its parent?\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fMuddiest Points (Threads)\n‚Ä¢ Similarities and differences between forks and threads\n\n‚Ä¢ The difference between processes and threads in how\nthey're handled by the operating system. Are threads\nand processes treated the same by the OS beyond the\nthreads sharing memory? Do threads go through the\nsame states and transitions as processes?\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fMuddiest Points (Process Termination)\n‚Ä¢ what does killing a process do, or what is the action the\nkill program takes to kill another?\n‚Ä¢ exit vs kill vs abort\n‚Ä¢ The differences between the exit(), Abort() and Kill().\nSpecifically, the difference between kill() and abort().\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fProblem of the Day\n‚Ä¢ Bounded Buffer Problem\n‚Ä¢ aka Producers Consumers Problem\n\n‚Ä¢ A shared circular-array buffer with capacity n\n‚Ä¢ A set of producer processes\/threads\n‚Ä¢ As set of consumer processes\/threads\n\n‚Ä¢ Requirements:\n‚Ä¢ Never exceed the buffer capacity\n‚Ä¢ Producers wait if the buffer is full\n‚Ä¢ Consumers wait if the buffer is empty\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fProduces Consumers Problem\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fProducers Consumers Problem is everywhere!\n‚Ä¢ Access to User Interface elements in mobile\napplications\n‚Ä¢ Main UI thread\n‚Ä¢ Background threads\n‚Ä¢ e.g., download files, check email on mail server\n\n‚Ä¢ Background threads send requests to UI thread to update\nUI elements\n‚Ä¢ Requests are stored in a shared bounded buffer\n‚Ä¢ Which threads are the producers?\n‚Ä¢ Who threads are the consumers?\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fProducers Consumers Problem is everywhere!\n‚Ä¢ Web Server\n‚Ä¢ front-end processes\/threads that interact with the HTTP\nconnection from the client (e.g., browser)\n‚Ä¢ Back-end processes\/threads that execute database\nqueries\n‚Ä¢ Queries are inserted by front-end processes into a shared\nbuffer\n‚Ä¢ Which threads are the producers?\n‚Ä¢ Who threads are the consumers?\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fSolving Producers Consumers using Semaphores\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fHow to trace the solution?\n\nLet‚Äôs define some events.\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fProducer arrives\nMoves as far as possible until the solid line\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fProducer enters\nMoves as far as possible past the solid line and until the\ndashed line\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fProducer leaves\nMoves as far as possible until the dotted line\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fConsumer arrives\nMoves as far as possible until the solid line\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fConsumer enters\nMoves as far as possible past the solid line and until the\ndashed line\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fConsumer leaves\nMoves as far as possible past the dashed line and until\nthe dotted line\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fTracing\n\nGiven a sequence of events, is the sequence feasible?\nIf yes, what is the system state at the end of the\nsequence?\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fSystem State\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fExample 1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fInitial state\n\n0\n\n3\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 arrives\n\n0\n\n2\n0\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 enters\n\n0\n\n2\n1\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP1 arrives\n\n0\n\n1\n1\n-1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP2 arrives\n\n0\n\n0\n1\n-2\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 arrives\n\n-1\n\n0\n1\n-2\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 leaves\n\n-1\n\n0\n1\n-2\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 leaves\n\n-1\n\n0\n1\n-1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 leaves\n\n-1\n\n0\n1\n-1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 leaves\n\n0\n\n0\n1\n-1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 enters\n\n0\n\n0\n1\n-1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 enters\n\n0\n\n0\n1\n-2\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 enters\n\n0\n\n0\n1\n-2\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fCan C0 enter?\n\n0\n\n0\n1\n-2\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fExample 2\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fInitial state\n\n0\n\n1\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 arrives\n\n0\n\n1\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 arrives\n\n-1\n\n1\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 arrives\n\n-1\n\n1\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 arrives\n\n-1\n\n0\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 arrives\n\n-1\n\n0\n0\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 enters\n\n-1\n\n0\n0\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 enters\n\n-1\n\n0\n1\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 leaves\n\n-1\n\n0\n1\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 leaves\n\n0\n\n0\n1\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 leaves\n\n0\n\n0\n1\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 enters\n\n0\n\n0\n1\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 enters\n\n0\n\n0\n1\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fCan C0 enter?\n\n0\n\n0\n1\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 enters\n\n0\n\n0\n0\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 leaves\n\n0\n\n0\n0\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 leaves\n\n0\n\n1\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fExample 3\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fInitial state\n\n0\n\n2\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 arrives\n\n0\n\n2\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 arrives\n\n-1\n\n2\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC1 arrives\n\n-1\n\n2\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC1 arrives\n\n-2\n\n2\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC2 arrives\n\n-2\n\n2\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC2 arrives\n\n-3\n\n2\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 arrives\n\n-3\n\n2\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 arrives\n\n-3\n\n1\n0\n1\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 arrives\n\n-3\n\n1\n0\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 enters\n\n-3\n\n1\n0\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fP0 enters\n\n-3\n\n1\n1\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fC0 enters\n\n-3\n\n1\n1\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\fCan C0 enter?\n\n-3\n\n1\n1\n0\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n\f","label":[[413,419,"Concept"],[491,495,"Concept"],[515,529,"Concept"],[608,612,"Concept"],[698,710,"Concept"],[721,733,"Concept"],[749,762,"Concept"],[798,804,"Concept"],[816,822,"Concept"],[857,869,"Concept"],[934,940,"Concept"],[955,968,"Concept"],[978,984,"Concept"],[991,1005,"Concept"],[1058,1074,"Concept"],[1082,1089,"Concept"],[1170,1177,"Concept"],[1206,1222,"Concept"],[1269,1276,"Concept"],[1323,1329,"Concept"],[1364,1370,"Concept"],[1374,1390,"Concept"],[1425,1431,"Concept"],[1436,1450,"Concept"],[1456,1462,"Concept"],[1528,1532,"Concept"],[1540,1558,"Concept"],[1581,1587,"Concept"],[1592,1598,"Concept"],[1621,1627,"Concept"],[1635,1651,"Concept"],[1685,1699,"Concept"],[1706,1712,"Concept"],[1743,1748,"Concept"],[1770,1776,"Concept"],[1842,1849,"Concept"],[1890,1895,"Concept"],[1900,1907,"Concept"],[1948,1955,"Concept"],[2008,2015,"Concept"],[2068,2075,"Concept"],[2095,2102,"Concept"],[2225,2244,"Concept"],[2306,2310,"Concept"],[2328,2332,"Concept"],[2344,2348,"Concept"],[2352,2356,"Concept"],[2360,2365,"Concept"],[2396,2402,"Concept"],[2404,2411,"Concept"],[2416,2422,"Concept"],[2461,2467,"Concept"],[2472,2479,"Concept"],[2550,2572,"Concept"],[2579,2606,"Concept"],[2612,2640,"Concept"],[2668,2694,"Concept"],[2707,2733,"Concept"],[2770,2776,"Concept"],[2788,2797,"Concept"],[2810,2816,"Concept"],[2827,2836,"Concept"],[2849,2855,"Concept"],[2913,2939,"Concept"],[2988,3015,"Concept"],[3097,3106,"Concept"],[3109,3127,"Concept"],[3182,3200,"Concept"],[3218,3227,"Concept"],[3284,3298,"Concept"],[3307,3314,"Concept"],[3323,3332,"Concept"],[3340,3347,"Concept"],[3356,3365,"Concept"],[3415,3442,"Concept"],[3493,3500,"Concept"],[3574,3600,"Concept"],[3657,3676,"Concept"],[3691,3697,"Concept"],[3706,3713,"Concept"],[3722,3731,"Concept"],[3739,3746,"Concept"],[3755,3764,"Concept"],[3822,3841,"Concept"],[3848,3858,"Concept"],[4009,4017,"Concept"],[4120,4128,"Concept"],[4255,4263,"Concept"],[4477,4485,"Concept"],[4612,4620,"Concept"]],"Comments":[]}
{"id":298,"segment": ["train_set", "labeled"],  "course": "cs1550", "lec": "lec13", "text":"Introduction to Operating Systems\nCS 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne ¬©2013)\n\n\fAnnouncements\n‚Ä¢ Upcoming deadlines:\n‚Ä¢ Quiz 1: due 2\/25\n‚Ä¢ Homework 6: due 2\/28\n‚Ä¢ Lab 2: due on 2\/28\n‚Ä¢ Project 2: due on 3\/18\n\n‚Ä¢ Midterm exam on Thursday 3\/3\n‚Ä¢ In-person, on paper, closed book\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n2\n\n\fPrevious lecture ‚Ä¶\n‚Ä¢ How does the short-term scheduler select the next\nprocess to run?\n‚Ä¢ FCFS, SJF, Priority, RR\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n3\n\n\fMuddiest Points (Scheduling)\n‚Ä¢ can a mix of scheduling algorithms be utilized by the\nscheduler?\n‚Ä¢ What makes the priorities algorithm significantly different from\nthe shortest process first algorithm?\n\n‚Ä¢ How does First Come First Serve avoid starvation? What if a\nprocess runs indefinitely?\n‚Ä¢ What is the most commonly used in modern computer design ?\n‚Ä¢ Convoy Effect\n‚Ä¢ In some points, we use Service Time for finding out which\nprocess is short time, is there any table that has the times of all\nprocess? or cpu or user predict these times?\n‚Ä¢ non-preemptive versus pre-emptive\n‚Ä¢ First Come First Serve Scheduling and Arrival Time how they\nwork together\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n4\n\n\fMuddiest Points (Round Robin)\n‚Ä¢ Why does making the time quantum much longer\nthan the CPU burst penalize I\/O bound processes?\n‚Ä¢ What actually is \"quantum\"? Is it something that can\nbe implemented? Or is it just conceptual\n‚Ä¢ quantum\/time slice size choice\n\n‚Ä¢ Can the round-robin time quantum be dynamically\nselected?\n‚Ä¢ Round robin vs FCFS\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n5\n\n\fMuddiest Points (misc.)\n‚Ä¢ Will practice exam be posted\n\n‚Ä¢ I'm from the future and Thoth went down again.\nProject 2 extension?\n‚Ä¢ What specific material is covered on the midterm\nexam? I'm somewhat unclear on that question.\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n6\n\n\fProblem of the Day: CPU Scheduling\n\nHow does the short-term scheduler select the next\nprocess to run?\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n7\n\n\fMultilevel Feedback Scheduling\n‚Ä¢ Preemptive scheduling with dynamic priorities\n\n‚Ä¢ N ready to execute queues with decreasing priorities:\n‚Ä¢ P(RQ0) > P(RQ1) > ... > P(RQN-1)\n\n‚Ä¢ Dispatcher selects a process for execution from RQi\nonly if RQi-1 to RQ0 are empty\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n8\n\n\fMultilevel Feedback Scheduling\n‚Ä¢ New process are placed in RQ0\n\n‚Ä¢ After the first quantum, they are moved to RQ1, and\nto RQ2 after the second quantum, ‚Ä¶ and to RQN-1\nafter the Nth quantum\n‚Ä¢ I\/O-bound processes remain in higher priority\nqueues.\n‚Ä¢ CPU-bound jobs drift downward.\n‚Ä¢ Hence, long jobs may starve\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n9\n\n\fMultiple Feedback Queues\nDifferent RQs may have different quantum values\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n10\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n11\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n12\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n13\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n14\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n15\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n16\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n17\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n18\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n19\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n20\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n21\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n22\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n23\n\n\f‚Ä¢\n\n‚Ä¢\n\n‚Ä¢\n\nTime Quantum for feedback Scheduling\nWith a fixed quantum time, the turnaround time of longer processes can be\nhigh\nTo alleviate this problem, the time\nquantum can be increased based on the\ndepth of the queue\n‚Ä¢\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nTime quantum of RQi = 2i-1\n\nMay still cause longer processes to\nsuffer starvation.\n‚Ä¢\n\nPossible fix is to promote a process\nto higher queue after some time\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n24\n\n\fAlgorithm Comparison\n‚Ä¢ Which one is the best?\n\n‚Ä¢ The answer depends on many factors:\n‚Ä¢ the system workload (extremely variable)\n‚Ä¢ hardware support for the dispatcher\n‚Ä¢ relative importance of performance criteria (response\ntime, CPU utilization, throughput...)\n‚Ä¢ The evaluation method used (each has its limitations...)\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n25\n\n\fBack to SJF: CPU Burst Estimation\n‚Ä¢ Let T[i] be the execution time for the ith instance of this\nprocess: the actual duration of the ith CPU burst of this\nprocess\n‚Ä¢ Let S[i] be the predicted value for the ith CPU burst of this\nprocess. The simplest choice is:\n‚Ä¢ S[n+1] =(1\/n)(T[1]+‚Ä¶+T[n])=(1\/n) Œ£{i=1 to n} T[i]\n\n‚Ä¢ This can be more efficiently calculated as:\n‚Ä¢ S[n+1] = (1\/n) T[n] + ((n-1)\/n) S[n]\n\n‚Ä¢ This estimate, however, results in equal weight for each\ninstance\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n26\n\n\fCPU Burst Estimation\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n27\n\n\fEstimating the required CPU burst\n‚Ä¢ Recent instances are more likely to better reflect future\nbehavior\n\n‚Ä¢ A common technique to factor the above observation into\nthe estimate is to use exponential averaging :\n‚Ä¢ S[n+1] = Œ± T[n] + (1- Œ±) S[n] ;\n\n0<Œ±<1\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n28\n\n\fCPU burst Estimate (Exponential Average)\n‚Ä¢ Recent instances have higher weights, whenever Œ± >\n1\/n\n‚Ä¢ Expanding the estimated value shows that the weights of\npast instances decrease exponentially\n‚Ä¢\n\nS[n+1] = Œ± T[n] + (1- Œ±) Œ± T[n-1] + ... (1- Œ±)^{i} Œ± T[n-i] +\n... + (1- Œ±)^{n}S[1]\n\n‚Ä¢\n\nThe predicted value of 1st instance, S[1], is usually set to 0 to\ngive priority to new processes\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n29\n\n\fExponentially Decreasing Coefficients\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n30\n\n\fExponentially Decreasing Coefficients\n‚Ä¢\n\nS[1] = 0 to give high priority to new processes\n\n‚Ä¢\n\nExponential averaging tracks changes in process behavior much\nfaster than simple averaging\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n31\n\n\fFCFS Problem in HW7\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n32\n\n\fCPU Burst Estimation\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n33\n\n\f","label":[[427,447,"Concept"],[482,486,"Concept"],[488,491,"Concept"],[493,501,"Concept"],[503,505,"Concept"],[578,588,"Concept"],[605,626,"Concept"],[646,655,"Concept"],[674,694,"Concept"],[728,760,"Concept"],[774,796,"Concept"],[803,813,"Concept"],[915,928,"Concept"],[954,966,"Concept"],[1104,1118,"Concept"],[1126,1137,"Concept"],[1140,1173,"Concept"],[1178,1190,"Concept"],[1285,1296,"Concept"],[1320,1332,"Concept"],[1354,1363,"Concept"],[1373,1392,"Concept"],[1414,1421,"Concept"],[1492,1499,"Concept"],[1500,1510,"Concept"],[1534,1558,"Concept"],[1586,1597,"Concept"],[1601,1605,"Concept"],[1958,1972,"Concept"],[1987,2007,"Concept"],[2091,2121,"Concept"],[2124,2145,"Concept"],[2151,2169,"Concept"],[2192,2198,"Concept"],[2215,2225,"Concept"],[2231,2233,"Concept"],[2240,2242,"Concept"],[2255,2257,"Concept"],[2265,2275,"Concept"],[2313,2315,"Concept"],[2325,2327,"Concept"],[2334,2336,"Concept"],[2403,2433,"Concept"],[2462,2464,"Concept"],[2485,2492,"Concept"],[2512,2514,"Concept"],[2524,2526,"Concept"],[2545,2552,"Concept"],[2563,2565,"Concept"],[2583,2590,"Concept"],[2593,2612,"Concept"],[2630,2645,"Concept"],[2649,2663,"Concept"],[2694,2698,"Concept"],[2703,2709,"Concept"],[2800,2803,"Concept"],[2823,2830,"Concept"],[2903,2915,"Concept"],[2920,2939,"Concept"],[2953,2965,"Concept"],[3050,3062,"Concept"],[3106,3111,"Concept"],[3124,3136,"Concept"],[3138,3150,"Concept"],[3213,3215,"Concept"],[3268,3278,"Concept"],[3330,3335,"Concept"],[3417,3429,"Concept"],[3434,3453,"Concept"],[3467,3479,"Concept"],[3564,3576,"Concept"],[3620,3625,"Concept"],[3638,3650,"Concept"],[3652,3664,"Concept"],[3711,3723,"Concept"],[3727,3729,"Concept"],[3782,3792,"Concept"],[3844,3849,"Concept"],[3931,3943,"Concept"],[3948,3967,"Concept"],[3981,3993,"Concept"],[4078,4090,"Concept"],[4134,4139,"Concept"],[4152,4164,"Concept"],[4166,4178,"Concept"],[4225,4237,"Concept"],[4241,4243,"Concept"],[4296,4306,"Concept"],[4358,4363,"Concept"],[4445,4457,"Concept"],[4462,4481,"Concept"],[4495,4507,"Concept"],[4592,4604,"Concept"],[4648,4653,"Concept"],[4666,4678,"Concept"],[4680,4692,"Concept"],[4739,4751,"Concept"],[4755,4757,"Concept"],[4810,4820,"Concept"],[4872,4877,"Concept"],[4959,4971,"Concept"],[4976,4995,"Concept"],[5009,5021,"Concept"],[5106,5118,"Concept"],[5162,5167,"Concept"],[5180,5192,"Concept"],[5194,5206,"Concept"],[5253,5265,"Concept"],[5269,5271,"Concept"],[5324,5334,"Concept"],[5386,5391,"Concept"],[5473,5485,"Concept"],[5490,5509,"Concept"],[5523,5535,"Concept"],[5620,5632,"Concept"],[5676,5681,"Concept"],[5694,5706,"Concept"],[5708,5720,"Concept"],[5767,5779,"Concept"],[5783,5785,"Concept"],[5838,5848,"Concept"],[5900,5905,"Concept"],[5987,5999,"Concept"],[6004,6023,"Concept"],[6037,6049,"Concept"],[6134,6146,"Concept"],[6190,6195,"Concept"],[6208,6220,"Concept"],[6222,6234,"Concept"],[6281,6293,"Concept"],[6297,6299,"Concept"],[6352,6362,"Concept"],[6414,6419,"Concept"],[6501,6513,"Concept"],[6518,6537,"Concept"],[6551,6563,"Concept"],[6704,6709,"Concept"],[6722,6734,"Concept"],[6736,6748,"Concept"],[6795,6807,"Concept"],[6811,6813,"Concept"],[6866,6876,"Concept"],[6928,6933,"Concept"],[7015,7027,"Concept"],[7032,7051,"Concept"],[7065,7077,"Concept"],[7162,7174,"Concept"],[7218,7223,"Concept"],[7236,7248,"Concept"],[7250,7262,"Concept"],[7309,7321,"Concept"],[7325,7327,"Concept"],[7380,7390,"Concept"],[7442,7447,"Concept"],[7529,7541,"Concept"],[7546,7565,"Concept"],[7579,7591,"Concept"],[7676,7688,"Concept"],[7732,7737,"Concept"],[7750,7762,"Concept"],[7764,7776,"Concept"],[7823,7835,"Concept"],[7839,7841,"Concept"],[7894,7904,"Concept"],[7956,7961,"Concept"],[8043,8055,"Concept"],[8060,8079,"Concept"],[8093,8105,"Concept"],[8190,8202,"Concept"],[8246,8251,"Concept"],[8264,8276,"Concept"],[8278,8290,"Concept"],[8337,8349,"Concept"],[8353,8355,"Concept"],[8408,8418,"Concept"],[8470,8475,"Concept"],[8557,8569,"Concept"],[8574,8593,"Concept"],[8607,8619,"Concept"],[8704,8716,"Concept"],[8760,8765,"Concept"],[8778,8790,"Concept"],[8792,8804,"Concept"],[8851,8863,"Concept"],[8867,8869,"Concept"],[8922,8932,"Concept"],[8984,8989,"Concept"],[9071,9083,"Concept"],[9088,9107,"Concept"],[9121,9133,"Concept"],[9218,9230,"Concept"],[9274,9279,"Concept"],[9292,9304,"Concept"],[9306,9318,"Concept"],[9365,9377,"Concept"],[9381,9383,"Concept"],[9436,9446,"Concept"],[9498,9503,"Concept"],[9585,9597,"Concept"],[9602,9621,"Concept"],[9635,9647,"Concept"],[9732,9744,"Concept"],[9788,9793,"Concept"],[9806,9818,"Concept"],[9820,9832,"Concept"],[9879,9891,"Concept"],[9895,9897,"Concept"],[9950,9960,"Concept"],[10012,10017,"Concept"],[10181,10196,"Concept"],[10245,10255,"Concept"],[10303,10316,"Concept"],[10318,10333,"Concept"],[10335,10345,"Concept"],[10473,10476,"Concept"],[10478,10487,"Concept"],[10601,10610,"Concept"],[10673,10682,"Concept"],[10987,10996,"Concept"],[11088,11097,"Concept"],[11370,11379,"Concept"],[11390,11409,"Concept"],[11807,11844,"Concept"],[11901,11938,"Concept"],[11964,11972,"Concept"],[11994,12015,"Concept"],[12141,12145,"Concept"],[12217,12226,"Concept"]],"Comments":[]}
{"id":299,"segment": ["train_set", "labeled"],  "course": "cs1550", "lec": "lec15", "text":"Introduction to Operating Systems\nCS\/COE 1550\nFall 2021\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne ¬©2013)\n\n\fAnnouncements\n‚Ä¢ Upcoming deadlines:\n‚Ä¢ 10\/25: Project 2 (extended deadline)\n‚Ä¢ 10\/29: Homework 6\n‚Ä¢ 11\/8: Lab 3\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n2\n\n\fLast Lecture ‚Ä¶\n‚Ä¢ Deadlock prevention\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n3\n\n\fMuddiest Points (Banker‚Äôs Algorithm)\n‚Ä¢\n\nwhat are the three steps of the bankers algorithm?\n\n‚Ä¢\n\nCould you go over the Bankers algorithm example again?\n\n‚Ä¢\n\nFor the safe\/unsafe algorithm, does that mean we need to know the resources that are available,\nkeep track of the used ones, and also know how many each process will have in the future?\n\n‚Ä¢\n\nIt seems like this detection algorithm has a lot of overhead. Are there any ways of reducing the time\nspent doing these checks\n\n‚Ä¢\n\ncan we run the banker's algorithm or some alternative as a static analysis tool? like build this kind of\ncheck into the compiler or something instead of running it for each request during runtime\n\n‚Ä¢\n\nIf a state is determined unsafe, does that always mean that the resource will not be allocated or is it\npossible to still allocate it and take the risk\n\n‚Ä¢\n\nWhat does the E, P and A stand for in the bankers algorithm\n\n‚Ä¢\n\nif bankers algorithm finds a valid path and grants the resource, can a deadlock still occur if a different\npath is followed than the one bankers algorithm found?\n\n‚Ä¢\n\nI'm a little confused on what the want and hold tables represent\n\n‚Ä¢\n\nWhy is the runtime n^2 * n for the wait algorithm\n\n‚Ä¢\n\nWhat is the difference between wanted and max again?\n\n‚Ä¢\n\nTracing bankers algorithms with multiple resource instances\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n4\n\n\fMuddiest Points (Resource Trajectory)\n‚Ä¢ the l1, l2 l3 ... in the resource trajectory graph\n\n‚Ä¢ resource trajectory graphs with more than 2 resources\n‚Ä¢ How to prevent a resource trajectory that would cause a\ndeadlock\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n5\n\n\fMuddiest Points (General Deadlock)\n‚Ä¢ breaking circular wait seems almost always better than breaking\nhold and wait since breaking hold and wait requires you take all\nresources you need whereas breaking circular wait only makes you\ntake some extra resources before you need them\n‚Ä¢ Starvation vs deadlock\n‚Ä¢ Which detection alg is fastest?\n‚Ä¢ Where do deadlock detection algorithms exist? (Operating system\nor external application.) When do they run? Runtime or compile\ntime? Also, how do deadlock avoidance algorithms interfere to\nmake sure a program doesn‚Äôt deadlock? Are they integrated fully\ninto the application?\n‚Ä¢ how do we know what resources are available to use and the best\nway to choose who gets what resources\n‚Ä¢ What is better practice, deadlock avoidance or deadlock detection?\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n6\n\n\fMuddiest Points (Deadlock Prevention)\n‚Ä¢ When checking a program to see it is free of deadlocks, you have to\nlook for whether one of the four condtions is being broken\nsomewhere?\n‚Ä¢ Why do you only need to attack one of the 4 conditions to prevent\ndeadlock?\n‚Ä¢ How to know which deadlock prevention technique to use.\n‚Ä¢ How spooling works\n‚Ä¢\n\nWhat exactly is spooling?\n\n‚Ä¢\n\nSpooling in applications\n\n‚Ä¢\n\nWhen is it appropriate to spool? How do you know?\n\n‚Ä¢ How non-resource deadlocks occur\n‚Ä¢ In regard to attacking \"no preemption\", how would you determine\nwhether it's viable to take a resource away from a process?\n‚Ä¢ how 2 phase locking avoids the hold and wait condition?\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n7\n\n\fAttacking Circular Wait\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n8\n\n\fSpooling Example\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n9\n\n\fToday ‚Ä¶\n‚Ä¢ CPU Scheduling\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n10\n\n\f","label":[[330,349,"Concept"],[422,440,"Concept"],[477,494,"Concept"],[522,539,"Concept"],[801,809,"Concept"],[895,913,"Concept"],[1278,1295,"Concept"],[1303,1320,"Concept"],[1371,1379,"Concept"],[1437,1454,"Concept"],[1778,1797,"Concept"],[1826,1845,"Concept"],[1855,1874,"Concept"],[1928,1947,"Concept"],[1967,1975,"Concept"],[2056,2064,"Concept"],[2077,2090,"Concept"],[2132,2145,"Concept"],[2161,2174,"Concept"],[2233,2246,"Concept"],[2311,2321,"Concept"],[2325,2333,"Concept"],[2379,2397,"Concept"],[2516,2534,"Concept"],[2587,2595,"Concept"],[2776,2794,"Concept"],[2798,2816,"Concept"],[2889,2908,"Concept"],[2957,2966,"Concept"],[3192,3200,"Concept"],[3226,3234,"Concept"],[3240,3248,"Concept"],[3295,3300,"Concept"],[3326,3348,"Concept"],[3381,3394,"Concept"],[3514,3527,"Concept"],[3603,3616,"Concept"],[3672,3680,"Concept"],[3754,3768,"Concept"]],"Comments":[]}
{"id":300,"segment": ["train_set", "labeled"],  "course": "cs1550", "lec": "lec21", "text":"Introduction to Operating Systems\nCS 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne ¬©2013)\n\n\fAnnouncements\n‚Ä¢ Upcoming deadlines:\n‚Ä¢ Homework 10: due on 4\/11\n‚Ä¢ Project 3: due on 4\/11\n‚Ä¢ Lab 4: due on 4\/15\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n2\n\n\fPrevious lecture ‚Ä¶\n‚Ä¢ How to allocate disk blocks to files and directories?\n‚Ä¢ contiguous and linked\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n3\n\n\fMuddiest Points (Memory)\n\n‚Ä¢ Is the reference bit initially set to 0 or 1 after a page is\nloaded into memory following a page fault?\n‚Ä¢ Page locking\n‚Ä¢ Unclear on how to use valid bit to indicate page fault.\nIs that because valid bit == 0 means the data at this\naddress is invalid, so we need to fetch a valid data\nfrom disk?\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n4\n\n\fMuddiest Points (File System)\n‚Ä¢ Not sure what the numbers in the FAT cells\nrepresent?\n‚Ä¢ Is it better to the int next_block at the beginning or\nend of the structure?\n‚Ä¢ offset calculation was a little quick, can we review it\n\n‚Ä¢ Logical to physical mapping calculation\n‚Ä¢ Are block sizes all the same when using linked\nallocation?\n‚Ä¢ What allocation method is used most commonly in\nmodern OS's?\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n5\n\n\fMuddiest Points (Project 3)\n‚Ä¢ Would you please explain about project 3?\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n6\n\n\fProblem of the Day\n\nHow to allocate disk blocks to files and directories?\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n7\n\n\fFile Allocation Table (FAT)\n‚Ä¢ Links on disk are slow\n‚Ä¢ Keep linked list in memory\n\n‚Ä¢ Advantage: faster\n‚Ä¢ Disadvantages\n‚Ä¢ Have to copy it to disk at some point\n‚Ä¢ Have to keep in-memory and on-disk\ncopy consistent\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n4\n-1\n-1\n-2\n-2\n-1\n3\n-1\n-1\n0\n-1\n-1\n-1\n-1\n-1\n-1\n\nB\n\nA\n\n8\n\n\fFAT Example\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n9\n\n\fi-node and FAT\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n10\n\n\fUsing a block index for allocation\n‚Ä¢ Store file block addresses\nin an array\nName\ngrades\n\nindex\n4\n\nsize\n4802\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n‚Ä¢ Array itself is stored in a\ndisk block\n‚Ä¢ Directory has a pointer to\nthis disk block\n‚Ä¢ Non-existent blocks\nindicated by -1\n\n‚Ä¢ Random access easy\n‚Ä¢ Limit on file size?\n\n6\n9\n7\n0\n8\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n11\n\n\fMax File Size for Indexed Allocation\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n12\n\n\fi-node vs index block\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n13\n\n\fUnix Fast File System indexing scheme\nprotection mode\n\ndata\ndata\n\n...\n\nowner & group\ntimestamps\n\ndata\ndata\n\nsize\nblock count\nlink count\n\n...\n\nDirect pointers\n\nsingle indirect\ndouble indirect\ntriple indirect\ninode\n\n...\n\n‚Ä¢\n‚Ä¢\n‚Ä¢\n‚Ä¢\n‚Ä¢\n‚Ä¢\n‚Ä¢\n‚Ä¢\n‚Ä¢\n‚Ä¢\n‚Ä¢\n\n‚Ä¢\n‚Ä¢\n\ndata\ndata\n\n‚Ä¢\n‚Ä¢\n‚Ä¢\n‚Ä¢\n\n‚Ä¢\n‚Ä¢\n\ndata\ndata\n\n‚Ä¢\n‚Ä¢\n\n‚Ä¢\n‚Ä¢\n\ndata\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n...\n...\n\n14\n\n\fFFS and Max File Size\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n15\n\n\fWhat‚Äôs in a directory?\n‚Ä¢ Two types of information\n‚Ä¢\n‚Ä¢\n\nFile names\nFile metadata (size, timestamps, etc.)\n\n‚Ä¢ Basic choices for directory information\n‚Ä¢\n\nStore all information in directory\n‚Ä¢ Fixed size entries\n‚Ä¢ Disk addresses and attributes in directory entry\n\n‚Ä¢\n\nStore names & pointers to index nodes (i-nodes)\nattributes\ngames\nmail\nnews\nresearch\n\nattributes\nattributes\nattributes\nattributes\n\nStoring all information\nin the directory\n\ngames\nmail\nnews\nresearch\n\nUsing pointers to\nindex nodes\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\nattributes\nattributes\n\nattributes\n\n16\n\n\fHandling long file names in a directory\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n17\n\n\fFree Block Tracking\n\n10\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n18\n\n\fFree Block Tracking Example 1\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n19\n\n\fFree Block Tracking Example 2\n\nCS\/COE 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n20\n\n\f","label":[[344,355,"Concept"],[384,394,"Concept"],[399,405,"Concept"],[492,505,"Concept"],[577,587,"Concept"],[591,603,"Concept"],[628,637,"Concept"],[650,660,"Concept"],[678,687,"Concept"],[848,859,"Concept"],[896,899,"Concept"],[943,953,"Concept"],[998,1004,"Concept"],[1057,1084,"Concept"],[1103,1114,"Concept"],[1139,1156,"Concept"],[1430,1441,"Concept"],[1519,1540,"Concept"],[1542,1545,"Concept"],[1873,1876,"Concept"],[1936,1942,"Concept"],[1947,1950,"Concept"],[2011,2022,"Concept"],[2046,2066,"Concept"],[2180,2190,"Concept"],[2225,2235,"Concept"],[2251,2257,"Concept"],[2381,2394,"Concept"],[2399,2417,"Concept"],[2470,2476,"Concept"],[2480,2491,"Concept"],[2544,2581,"Concept"],[2582,2597,"Concept"],[2615,2620,"Concept"],[2623,2628,"Concept"],[2629,2639,"Concept"],[2657,2668,"Concept"],[2669,2679,"Concept"],[2686,2701,"Concept"],[2703,2718,"Concept"],[2719,2734,"Concept"],[2735,2750,"Concept"],[2751,2756,"Concept"],[2903,2906,"Concept"],[3043,3056,"Concept"],[3064,3074,"Concept"],[3265,3276,"Concept"],[3278,3285,"Concept"],[3455,3466,"Concept"],[3646,3665,"Concept"],[3726,3745,"Concept"],[3812,3831,"Concept"]],"Comments":[]}
{"id":301,"segment": ["train_set", "labeled"],  "course": "cs1550", "lec": "lec23", "text":"Introduction to Operating Systems\nCS 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne ¬©2013)\n\n\fAnnouncements\n‚Ä¢ Upcoming deadlines:\n‚Ä¢ Homework 11: due on 4\/18\n‚Ä¢ Project 3: Late due date on 4\/13\n‚Ä¢ Late penalty waived\n\n‚Ä¢ Lab 4: due on 4\/15\n‚Ä¢ Quiz 3: due on 4\/15\n‚Ä¢ Homework 12: due on 4\/25\n‚Ä¢ Lab 5: due on 5\/2\n‚Ä¢ Project 4 and Quiz 4: due on 5\/2\n‚Ä¢ Bonus Homework: due on 5\/2\n‚Ä¢ Course Post-Test: due on 5\/2\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n2\n\n\fMuddiest Points (1\/2)\n‚Ä¢ when is the parity checked to see if there is a bit error\n‚Ä¢ a little confused about parity example\n‚Ä¢ How to flip the correct bits back that were changed with\nparity?\n‚Ä¢ What is parity used for\n‚Ä¢ ECC\n‚Ä¢ What things move how using what in the disk\n‚Ä¢ disk request time delay factors\n‚Ä¢\n\ntransfer time\/rotating time\/seek time\n\n‚Ä¢ I feel like rotational delay and actual transfer time are\noverlapped. The sector is spending time to rotate to the\nhead, and at the same time, the head is rotating to find\nthat sector. Are they moving towards each other at the\nsame time?\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n3\n\n\fDisk drive structure\nhead\nsector\n\nplatter\ntrack\ncylinder\n\nsurfaces\n\nspindle\n\nactuator\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n4\n\n\fMuddiest Points (2\/2)\n‚Ä¢ In the last top hat question, why the page table gets\nsmaller if the page frames are larger. I understand\nthat would mean less entries, but wouldn't each entry\nwould be larger, making the overall table the same\nsize?\n‚Ä¢ What are RAIDs for?\n\n‚Ä¢ Does RAID4 have any advantages over RAID5?\n‚Ä¢ All of it, bro\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n5\n\n\fProblem of the Day ‚Äì Part 1\n‚Ä¢ How does a file system handle errors?\n‚Ä¢ Answer: Defense in Depth\n‚Ä¢ multiple layers of error detection\/correction\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n6\n\n\fWhen good disks go bad‚Ä¶\nDisks have defects\nIn 3M+ sectors, this isn‚Äôt surprising!\n\nECC helps with errors, but sometimes this isn‚Äôt enough\n\nDisks keep spare sectors (normally unused) and remap bad\nsectors into these spares\nIf there‚Äôs time, the whole track could be reordered‚Ä¶\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n7\n\n\fRAIDs, RAIDs, and more RAIDs\nstrip\n\nstrip\n\nStripe\nRAID 0\n(Redundant Array of Inexpensive Disks\n\nRAID 1\n(Mirrored copies)\n\nRAID 4\n(Striped with parity)\n\nRAID 5\n(Parity rotates through disks)\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n8\n\n\fBacking up a file system\n‚Ä¢ A file system to be dumped\n‚Ä¢ Squares are directories, circles are files\n‚Ä¢ Shaded items, modified since last dump\n‚Ä¢ Each directory & file labeled by i-node number\n\nFile that has\nnot changed\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n9\n\n\fBitmaps used in a file system dump\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n10\n\n\fChecking the file system for consistency\nConsistent\n\nMissing (‚Äúlost‚Äù) block\n\nDuplicate block in free list\n\nDuplicate block in two files\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n11\n\n\fProblem of the Day ‚Äì Part 2\n‚Ä¢ How does a file system hide disk access delays?\n‚Ä¢ Answer: Caching\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n12\n\n\fFile block cache data structures\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n13\n\n\fLog-structured file systems\n‚Ä¢ Trends in disk & memory\n‚Ä¢ Faster CPUs\n‚Ä¢ Larger memories\n\n‚Ä¢ Result\n‚Ä¢ More memory -> disk caches can also be larger\n‚Ä¢ Increasing number of read requests can come from cache\n‚Ä¢ Thus, most disk accesses will be writes\n\n‚Ä¢ LFS structures entire disk as a log\n‚Ä¢ All writes initially buffered in memory\n‚Ä¢ Periodically write these to the end of the disk log\n‚Ä¢ When file opened, locate i-node, then find blocks\n\n‚Ä¢ Issue: what happens when blocks are deleted?\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n14\n\n\fLog Structured File System\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n15\n\n\fLog Structured File System\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n16\n\n\fFlash File System\n\nWear Leveling\n\nCount total writes per flash sector and attempt to\nbalance across the whole disk\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n17\n\n\fWear leveling for SSDs\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n18\n\n\fDisk block size\n‚Ä¢ Dark line (left hand scale) gives data rate of a disk\n\n‚Ä¢ Dotted line (right hand scale) gives disk space\nefficiency\n‚Ä¢ All files 2KB\n\nBlock size\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n19\n\n\fProblem of the Day ‚Äì Part 3\n‚Ä¢ How do device drivers program I\/O devices?\n‚Ä¢ Answer: three methods\n‚Ä¢ polling\n‚Ä¢ Interrupts\n‚Ä¢ DMA\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n20\n\n\fHow are I\/O devices connected?\n‚Ä¢ Single-bus\n‚Ä¢ All memory accesses go\nover a shared bus\n‚Ä¢ I\/O and RAM accesses\ncompete for bandwidth\n\nCPU\n\nMemory\n\nI\/O\n\nCPU\n\nMemory\n\nI\/O\n\n‚Ä¢ Dual-bus\n‚Ä¢ RAM access over highspeed bus\n‚Ä¢ I\/O access over lower-speed\nbus\n‚Ä¢ Less competition\n‚Ä¢ More hardware (more\nexpensive‚Ä¶)\n\nThis port allows I\/O devices\naccess into memory\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n21\n\n\fMemory-Mapped vs. separate I\/O Space\n\nMemory\n0xFFF‚Ä¶\n\nI\/O ports\n\n0\n\nSeparate\nI\/O & memory\nspace\n\nMemory-mapped I\/O\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\nHybrid: both\nmemory-mapped &\nseparate spaces\n\n22\n\n\fExample: Dynamic Frequency on XScale\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n23\n\n\fProgrammed I\/O example: printing a page\n\nUser\n\nPrinted\npage\n\nKernel\n\nABCD\nEFGH\n\nPrinted\npage\nABCD\nEFGH\n\nA\n\nABCD\nEFGH\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\nPrinted\npage\nABCD\nEFGH\n\nAB\n\nABCD\nEFGH\n\n24\n\n\fPolling\n\ncopy_from_user (buffer, p, count); \/\/ copy into kernel buffer\nfor (j = 0; j < count; j++) {\n\/\/ loop for each char\nwhile (*printer_status_reg != READY)\n;\n\/\/ wait for printer to be ready\n*printer_data_reg = p[j]; \/\/ output a single character\n}\nreturn_to_user();\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n25\n\n\fHardware‚Äôs view of interrupts\n\nBus\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n26\n\n\fInterrupt-driven I\/O\ncopy_from_user (buffer, p, count);\nj = 0;\nenable_interrupts();\nwhile (*printer_status_reg != READY)\n;\n*printer_data_reg = p[0];\nscheduler(); \/\/ and block user\nif (count == 0) {\nunblock_user();\n} else {\nj++;\n*printer_data_reg = p[j];\ncount--;\n}\nacknowledge_interrupt();\nreturn_from_interrupt();\n\nCode run by system call\n\nCode run at interrupt time\n(Interrupt handler)\n\nCS 1550 ‚Äì Operating Systems ‚Äì Sherif Khattab\n\n27\n\n\f","label":[[539,545,"Concept"],[611,617,"Concept"],[685,691,"Concept"],[703,709,"Concept"],[721,724,"Concept"],[773,796,"Concept"],[808,821,"Concept"],[836,845,"Concept"],[861,877,"Concept"],[889,902,"Concept"],[923,929,"Concept"],[964,968,"Concept"],[996,1000,"Concept"],[1026,1032,"Concept"],[1137,1157,"Concept"],[1158,1162,"Concept"],[1163,1169,"Concept"],[1171,1178,"Concept"],[1179,1184,"Concept"],[1185,1193,"Concept"],[1205,1212,"Concept"],[1214,1222,"Concept"],[1336,1346,"Concept"],[1367,1378,"Concept"],[1425,1432,"Concept"],[1452,1457,"Concept"],[1526,1531,"Concept"],[1545,1550,"Concept"],[1576,1581,"Concept"],[1692,1703,"Concept"],[1895,1902,"Concept"],[1928,1931,"Concept"],[2001,2008,"Concept"],[2041,2048,"Concept"],[2094,2099,"Concept"],[2171,2176,"Concept"],[2178,2183,"Concept"],[2194,2199,"Concept"],[2200,2205,"Concept"],[2207,2212,"Concept"],[2214,2220,"Concept"],[2221,2227,"Concept"],[2229,2265,"Concept"],[2267,2273,"Concept"],[2275,2290,"Concept"],[2293,2299,"Concept"],[2301,2320,"Concept"],[2323,2329,"Concept"],[2331,2337,"Concept"],[2679,2686,"Concept"],[2697,2713,"Concept"],[3012,3030,"Concept"],[3042,3049,"Concept"],[3102,3134,"Concept"],[3187,3214,"Concept"],[3300,3311,"Concept"],[3382,3387,"Concept"],[3433,3436,"Concept"],[3465,3468,"Concept"],[3556,3564,"Concept"],[3716,3742,"Concept"],[3795,3821,"Concept"],[3874,3891,"Concept"],[3893,3906,"Concept"],[3931,3943,"Concept"],[4040,4053,"Concept"],[4058,4062,"Concept"],[4115,4130,"Concept"],[4144,4159,"Concept"],[4167,4176,"Concept"],[4203,4219,"Concept"],[4428,4435,"Concept"],[4438,4448,"Concept"],[4451,4454,"Concept"],[4540,4550,"Concept"],[4583,4593,"Concept"],[4596,4616,"Concept"],[4629,4638,"Concept"],[4678,4686,"Concept"],[4689,4699,"Concept"],[4715,4718,"Concept"],[4721,4731,"Concept"],[4749,4752,"Concept"],[4907,4920,"Concept"],[4925,4943,"Concept"],[4960,4969,"Concept"],[5003,5020,"Concept"],[5076,5112,"Concept"],[5128,5145,"Concept"],[5149,5155,"Concept"],[5416,5423,"Concept"],[5441,5447,"Concept"],[5473,5486,"Concept"]],"Comments":[]}
{"id":303,"segment": ["train_set", "labeled"],  "course": "cs1567", "lec": "lec09-10_blob_detection", "text":"Blob Detection\nThumrongsak Kosiyatrakul\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fBlob\n\nA blob in computer vision is a region of image that some\nproperties is constant or approximately constant\nExample of properties:\nColor\nBrightness\n\nA robot can detect an object with a solid color by simply find\nblobs of that color\nA blob usually defined as a rectangular region with information:\nWidth and Height\nNumber of pixels\nCoordinate of the center of the region\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fHow to Detect a Blob?\nConsider the following image:\n\nHow to detect a red ball in the above image?\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fFilter Selected Color\n\nImage generally comes in RGB format\nEach pixel is represented by three values, red, green, and blue\nTo filter out a specific color, we simply define ranges for each\nvalue\nRed between 120 to 130,\nGreen between 78 to 90, and\nBlue between 100 to 110\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fHow to Detect a Blob\nFilter out every color but red\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fHow to Detect a Blob\nDetect connected regions\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fFilter Selected Color\n\nNote that an object generally stays in a foreground where\nenvironment is in the background\nForeground objects generally have more brightness\nIn computer vision, we prefer YUV format:\nY stands for the luminance component (the brightness)\nU and V are the chrominance (color) components\n\nConversion between RGB and YUV is straightforward:\nùëå = (0.299 √ó ùëÖ) + (0.587 √ó ùê∫) + (0.114 √ó ùêµ)\nùëà = (‚àí0.168736 √ó ùëÖ) + (‚àí0.331264 √ó ùê∫) + (0.5 √ó ùêµ)\nùëâ = (0.5 √ó ùëÖ) + (‚àí0.418688 √ó ùê∫) + (‚àí0.081312 √ó ùêµ)\n\nwhere ùëÖ, ùê∫, and ùêµ have values between 0.0 and 1.0\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fProblems with Blob Detection\nIf we have two objects with the same color, at least two blobs\nwill be detected\nIf we have only one object, more than one blobs may be detected\nLighting effects color\nFiltered regions may not connect with each other\nTwo or more blobs but on the same object\nIf all blobs come from the same object, they will be close to each\nother\n\nSurrounding environment may have the same color\n\nSame object may not be detected if lighting change\nIncrease the range of color may result in detecting environment\ninstead of desire object\nOnly works in restricted lighting and surrounding environment\nhas small number of colors\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fApplications\n\nObject Recognition and Tracking:\nSoccer: Ball and goal posts\nNavigation: Follows a line\nObject avoidance\n\nRobot Location\/Orientation:\nTwo colors on top of robot\nSigns (multi-colors) represent locations\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fIntegrated Web Camera\nTo detect blobs, we need an image or a series of images\nWe will use integrated Web camera of your given laptop\nTo access the web cam, we need another node called gscam\ngscam node communicate with integrated Web cam\nCapture video and turn them into series of images\nEach image will be published on the topic\n\/v4l\/camera\/image_raw\n\nTo start gscam node, use the following command:\nroslaunch gscam v4l.launch\n\nA series of images can be viewed using image_view node as\nfollows:\nrosrun image_view image_view image:=\/v4l\/camera\/image_raw\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fImage Message\nImages published by gscam node has type\nsensor_msg\/Image.msgs\nIf you want to access images, add the following:\nfrom sensor_msg.msgs import Image\n\nThe Image message consists of the following components:\nheader: Information about message\nheight: Image height (number of rows)\nwidth: Image width (number of columns)\nencoding: Type of encoding\nis_bigendian: Is this data bigendian\nstep: How many bytes in a row\ndata: A one-dimensional array of data. The number of elements\nis step * rows ([B,G,R,B,G,R,...])\n\nLucky us, we do not have to process images directly.\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fView Image from Camera using OpenCV\nWe can create our own image viewer from camera using OpenCV\nFirst, we need to convert a color image message into OpenCV\nformat\nThen, simply display the image\nCode Example:\n#!\/usr\/bin\/env python\nimport rospy\nimport cv2\nfrom sensor_msgs.msg import Image\nfrom cv_bridge import CvBridge, CvBridgeError\ncolorImage = None\nisColorImageReady = False\ndef updateColorImage(data):\nglobal colorImage, isColorImageReady\ncolorImage = data\nisColorImageReady = True\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fView Image from Camera using OpenCV\nCode Example (continue):\ndef main():\nglobal colorImage, isColorImageReady\nrospy.init_node('myimageview', anonymous=True)\nrospy.Subscriber('\/v4l\/camera\/image_raw', Image, updateColorImage)\nbridge = CvBridge()\ncv2.namedWindow('Image from Camera')\nwhile not rospy.is_shutdown() and not isColorImageReady:\npass\nwhile not rospy.is_shutdown():\ntry:\ncolor_image = bridge.imgmsg_to_cv2(colorImage, \"bgr8\")\nexcept CvBridgeError, e:\nprint e\ncv2.imshow('Image from Camera', color_image)\nkey = cv2.waitKey(1)\nif key == ord('q'):\nbreak\ncv2.destroyAllWindows()\nif __name__ == '__main__':\nmain()\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fcmvision Node\n\ncmvision node detects blobs of colors from Image message\nSubscribes to a topic (of type Image) of your choice\nIn our case, the topic will be:\n\/v4l\/camera\/image_raw\n\nObtains user defined color information about blobs to be detected\nPublishes information about detect blobs on the topic \/blobs\n\ncmvision package also supplies a tool named colorgui\nAllows user to pick a range of colors of an object of interest\nShows visual image of detect blobs associated with picked color\nSupplies color information and threshold\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fcolorgui\n\nBefore running colorgui node, make sure your roscore and\ngscam is running\nTo run colorgui, use the following command:\nrosrun cmvision colorgui image:=\/v4l\/camera\/image_raw\n\nNote that the data in topic \/v4l\/camera\/image_raw is\npublished by gscam node\nA windows will pop-up and shows the image from your camera\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fcolorgui\n\nAfter clicking on the object in the image couple times, you may\nsee a set of rectangles\nEach rectangle represents a detected blob\nMove object around to see whether it can detect the object\nIf it cannot detect, click on the object couple more times to\nincrease the range of detecting color\nInformation at the bottom (YUV) will be use to set the color to\nbe detected\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fcolorgui Example\nFirst couple clicks\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fcolorgui Example\nCouple more clicks around the desired object\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fcolorgui Example\nCouple more and take note about RGB and YUV\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fcolors.txt\nFor cmvision node, color information should be stored in a\ntext file\nBy default, the name of the text file is colors.txt\nA color file consists of two parts [colors] and\n[thresholds] as shown below:\n[colors]\n(150, 166, 83) 0.000000 1 BrightGreen\n[thresholds]\n(151:163, 85:91, 121:126)\n\ncmvision node can be used to detect more than one color by\nadding more lines for [colors] and [thresholds]\n[colors]\n(150, 166, 83) 0.000000 1 BrightGreen\n(0, 255, 0) 0.000000 2 Green\n[thresholds]\n(151:163, 85:91, 121:126)\n(47:87, 148:162, 93:113)\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fcolors.txt\nConsider the following color file:\n[colors]\n(150, 166, 83) 0.000000 1 BrightGreen\n(0, 255, 0) 0.000000 2 Green\n[thresholds]\n(151:163, 85:91, 121:126)\n(47:87, 148:162, 93:113)\n\nEach line under [colors] consists of the following:\n(R, G, B): The red, green, and blue values of rectangles that\nare used to blob region\n0.000000: Not being used any more (I guess)\n1: Not being used any more (I guess)\nBrightGreen: The name of the blob which can be used to\ndistinguish among multiple detected blobs\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fcolors.txt\n\nConsider the following color file:\n[colors]\n(150, 166, 83) 0.000000 1 BrightGreen\n(0, 255, 0) 0.000000 2 Green\n[thresholds]\n(151:163, 85:91, 121:126)\n(47:87, 148:162, 93:113)\n\nEach line under [thresholds] consists of the following:\n(minY:maxY, minU:maxU, minV:maxV): The YUV\nthreshold from colorgui\n\nNote that the first line of colors is associated with the first line\nof thresholds, and so on\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fcmvision.launch\nParameters of cmvision are needed to be set\nFirst, copy the default launch file:\n\/home\/student\/cs1567\/src\/cmvision\/cmvision.launch\n\nto your ..\/mypackage directory\nIn the copied file, change the followings:\nUnder param name=\"cmvision\/color_file\", change\nits value to\nvalue=\"\/home\/student\/cs1567\/src\/mypackage\/colors.txt\"\n\nIf you put colors.txt in different directory, adjust it\naccordingly\nUnder param name=\"cmvision\/debug_on\", change the\nvalue to\nvalue=\"true\" if you want to see image and detect blobs while\ncmvision is running\nvalue=\"false\" otherwise\n\nUnder node name=\"cmvision\" change the args to\nargs=\"image:=\/v4l\/camera\/image_raw\"\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fcmvision.launch\nYour cmvision.launch should look like the following:\n<launch>\n<!-- Location of the cmvision color file -->\n<param name=\"cmvision\/color_file\" type=\"string\"\nvalue=\"\/home\/student\/cs1567\/src\/mypackage\/colors.txt\" \/>\n<!-- Turn debug output on or off -->\n<param name=\"cmvision\/debug_on\" type=\"bool\" value=\"true\"\/>\n<!-- Turn color calibration on or off -->\n<param name=\"cmvision\/color_cal_on\" type=\"bool\" value=\"false\"\/>\n<!-- Enable Mean shift filtering -->\n<param name=\"cmvision\/mean_shift_on\" type=\"bool\" value=\"false\"\/>\n<!-- Spatial bandwidth: Bigger = smoother image -->\n<param name=\"cmvision\/spatial_radius_pix\" type=\"double\" value=\"2.0\"\/>\n<!-- Color bandwidth: Bigger = smoother image-->\n<param name=\"cmvision\/color_radius_pix\" type=\"double\" value=\"40.0\"\/>\n<node name=\"cmvision\" pkg=\"cmvision\" type=\"cmvision\" args=\"image:=\/v4l\/camera\/image_raw\"\noutput=\"screen\" \/>\n<\/launch>\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fBlobs.msgs\n\ncmvision node publishes a message of type Blobs\nAgain, import it first:\nfrom cmvision.msg import Blobs\n\nA message of type Blobs consists of various components:\nheader: Message header\nimage_width: The width of the image in pixels\nimage_height: The height of the image in pixels\nblob_count: The number of detected blobs\nblobs: An array of data of type Blob\n\nNote: Blob (with out s) is another type of message\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fBlob.msgs\nBlob.msgs stores information about each blob detected by\ncmvision node\nMust be explicitly imported:\nfrom cmvision.msg import Blobs, Blob\n\nA message of type Blob consists of various components:\nname: The name of color\/object specified in colors.txt\n(String)\nred: The value of red\ngreen: The value of green\nblue: The value of blue\narea: The area of the blob (number of pixels)\nx: The x coordinate of the center of the blob\ny: The y coordinate of the center of the blob\nleft: The x coordinate of the left side of the region\nright: The x coordinate of the right side of the region\ntop: The y coordinate of the top side of the region\nbottom: The y coordinate of the bottom side of the region\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fBlob.msgs\n(0,0)\n\nleft\n\nright\n\ntop\n\n(x,y)\n\nbottom\n\nblob\n\nimage\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fProblem Solving Ideas\n\nHow to filter out environment?\nHow do we know that two or more blobs are on the same object?\nFixed size objects\nVariable size objects\n\nIf we know that these 10 blobs are on the same object, how to\nfind the center of the object?\nHow do we know that there are two or more objects of the same\ncolor?\nHow to filter out noise from camera?\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fVisualize Blobs using OpenCV\n\nSometimes we need to process blobs:\nFilter out blobs that are too smalls\nFilter out blobs that are outside of region of interest\nMerge multiple blobs in to one\n\nWe may need to see a result in an image\nOpenCV provides libraries for Computer Vision:\nShow image\/video on screen\nMouse and keyboard events\nDraw lines, rectangles, string on image\nForeground\/background filtering\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fVisualize Blobs using OpenCV\n#!\/usr\/bin\/env python\nimport roslib\nimport rospy\nimport cv2\nimport copy\nfrom sensor_msgs.msg import Image\nfrom cv_bridge import CvBridge, CvBridgeError\nfrom cmvision.msg import Blobs, Blob\ncolorImage = Image()\nisColorImageReady = False\nblobsInfo = Blobs()\nisBlobsInfoReady = False\ndef updateColorImage(data):\nglobal colorImage, isColorImageReady\ncolorImage = data\nisColorImageReady = True\ndef updateBlobsInfo(data):\nglobal blobsInfo, isBlobsInfoReady\nblobsInfo = data\nisBlobsInfoReady = True\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fVisualize Blobs using OpenCV\n\ndef main():\nglobal colorImage, isColorImageReady, blobsInfo, isBlobsInfoReady\nrospy.init_node('showBlobs', anonymous=True)\nrospy.Subscriber(\"\/blobs\", Blobs, updateBlobsInfo)\nrospy.Subscriber(\"\/v4l\/camera\/image_raw\", Image, updateColorImage)\nbridge = CvBridge()\ncv2.namedWindow(\"Blob Location\")\nwhile not rospy.is_shutdown() and\n(not isBlobsInfoReady or not isColorImageReady):\npass\nwhile not rospy.is_shutdown():\n:\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fVisualize Blobs using OpenCV\ndef main():\n:\nwhile not rospy.is_shutdown():\ntry:\ncolor_image = bridge.imgmsg_to_cv2(colorImage, \"bgr8\")\nexcept CvBridgeError, e:\nprint e\nprint \"colorImage\"\nblobsCopy = copy.deepcopy(blobsInfo)\nfor b in blobsCopy.blobs:\ncv2.rectangle(color_image, (b.left, b.top),\n(b.right, b.bottom), (0,255,0), 2)\ncv2.imshow(\"Color Image\", color_image)\nkey = cv2.waitKey(1)\nif key == ord('q'):\nbreak\ncv2.destroyAllWindows()\nif __name__ == '__main__':\nmain()\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fBlob Detection Algorithm\n\nGiven an image, the following steps are generally used:\n1\n2\n3\n\nBlur the image to reduce noise\nFilter out all pixels that are out-of-range\nFind groups of pixels that are connected to each other\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fGaussian Blur\n\nOne of the most popular blur algorithm is called Gaussian blur\n\n3x3\n5x5\n7x7\n\nThe new RGB values of the pixel at center is an weight average\nof RGB of pixels around it\nThe weight of each pixel is based on the Gaussian normal\ndistribution\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fFilter\nFilter can be done based on RGB or YUV\nRecall that cmvision uses YUV\n\nOnce a filter is applied, we should get a one bit image (black and\nwhite)\nWe do not need information about color of each pixel anymore\nOnly need to know which pixels are in a given range\n\nExample:\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n0\n0\n0\n0\n0\n1\n1\n0\n0\n\n0\n0\n0\n0\n0\n1\n1\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n1\n1\n1\n0\n0\n0\n1\n0\n\n0\n1\n1\n1\n1\n1\n1\n1\n0\n\n0\n1\n1\n1\n0\n0\n0\n1\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n1\n0\n0\n0\n0\n0\n\n0\n0\n0\n1\n1\n0\n0\n0\n0\n\n0\n0\n0\n0\n1\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\nFor simplicity, assume that a blob is a 4-tuple\n(left, right, top, bottom)\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fA Blob Detection Algorithm\nFirst, we need to search for the first pixel that are non-zero\nScan left to right and top to bottom\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n0\n0\n0\n0\n0\n1\n1\n0\n0\n\n0\n0\n0\n0\n0\n1\n1\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n1\n1\n1\n0\n0\n0\n1\n0\n\n0\n1\n1\n1\n1\n1\n1\n1\n0\n\n0\n1\n1\n1\n0\n0\n0\n1\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n1\n0\n0\n0\n0\n0\n\n0\n0\n0\n1\n1\n0\n0\n0\n0\n\n0\n0\n0\n0\n1\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\nOnce the first pixel is found:\n1\n\n2\n3\n4\n5\n\nRecord this coordinate so that we can restart searching for the\nnext blob\nConstruct a new blob (data)\nLeft and right are 5\nTop and bottom are 1\nCenter, width, and height of the blob will be calculated later\n\nNow, our first blob is (5, 5, 1, 1)\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fA Blob Detection Algorithm\nNext, set the pixel to zero and scanning for non-zero neighbor\nIf a non-zero neighbor is found:\nAdjust the blob accordingly\nAdd coordinate (x,y) of the non-zero neighbor into a queue\nChange non-zero neighbors to 0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n0\n0\n0\n0\n0\n1\n1\n0\n0\n\n0\n0\n0\n0\n0\n1\n1\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n1\n0\n0\n0\n1\n0\n\n0\n0\n0\n1\n1\n1\n1\n1\n0\n\n0\n1\n1\n1\n0\n0\n0\n1\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n1\n0\n0\n0\n0\n0\n\nCurrently\nBlob is (5, 6, 1, 2)\nQueue is [(6,1), (5,2), (6,2)]\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n0\n0\n0\n1\n1\n0\n0\n0\n0\n\n0\n0\n0\n0\n1\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\fA Blob Detection Algorithm\nRepeat until the queue is empty:\n1\n2\n3\n4\n5\n\nDequeue the first coordinate\nScan for its non-zero neighbor\nAdd all coordinates (x,y) of the non-zero neighbor into a queue\nChange all non-zero neighbor to 0\nGo back to step 1\n\nOnce the queue is empty, we get the first blob (5, 7, 1, 7)\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n0\n0\n0\n0\n0\n1\n1\n0\n0\n\n0\n0\n0\n0\n0\n1\n1\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\nThumrongsak Kosiyatrakul\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\nBlob Detection\n\n0\n0\n0\n1\n0\n0\n0\n0\n0\n\n0\n0\n0\n1\n1\n0\n0\n0\n0\n\n0\n0\n0\n0\n1\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\fBlob Detection using OpenCV\nFirst, we need to blur an image using the GaussianBlur()\nfunction\nThe following code blurs an image and display:\nimport cv2\ndef main():\ncolor_image = cv2.imread('start_img.jpg', cv2.IMREAD_COLOR)\nblur_image = cv2.GaussianBlur(color_image, (5, 5), 0)\ncv2.imshow('Image', color_image)\ncv2.imshow('Blur Image', blur_image)\nwhile True:\nkey = cv2.waitKey(0) & 0xFF\nif key == ord('q'):\nbreak;\ncv2.destroyAllWindows()\nif __name__ == '__main__':\nmain()\n\nThe parameter (5, 5) specifies how many pixels to be used\n(must be odd numbers)\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fConvert RGB to YUV\nOpenCV supplies the cvtColor() function to convert one\ncolor spectrum to another\nimport cv2\ndef main():\ncolor_image = cv2.imread('..\/start_img.jpg', cv2.IMREAD_COLOR)\nblur_image = cv2.GaussianBlur(color_image, (5, 5), 0)\nyuv_image = cv2.cvtColor(blur_image, cv2.COLOR_BGR2YUV)\ny, u, v = cv2.split(yuv_image)\ncv2.imshow('Image', blur_image)\ncv2.imshow('Y', y)\ncv2.imshow('U', u)\ncv2.imshow('V', v)\nwhile True:\nkey = cv2.waitKey(0) & 0xFF\nif key == ord('q'):\nbreak;\ncv2.destroyAllWindows()\nif __name__ == '__main__':\nmain()\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fFilter Unwanted Pixels\n\nUnwanted pixels can be filtered out using the inRange()\nfunction:\ndef main():\ncolor_image = cv2.imread('..\/start_img.jpg', cv2.IMREAD_COLOR)\nblur_image = cv2.GaussianBlur(color_image, (5, 5), 0)\ncv2.namedWindow('Mask')\nmask_image = cv2.inRange(blur_image, lower_bound, upper_bound);\ncv2.imshow('Mask', mask_image)\ncv2.waitkey(0);\ncv2.destroyAllWindows()\nif __name__ == '__main__':\nmain()\n\nThe lower_bound and upper_bound are (B, G, R) in\nthis case\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fFilter Unwanted Pixels\nMasked Image:\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fSimpleBlobDetector()\n\nOpenCV supplies the SimpleBlobDetector() function\nwhich detects blobs based on a given parameter:\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fSimpleBlobDetector() Parameters\nFirst we need to set the parameter:\nparams = cv2.SimpleBlobDetector_Params()\nparams.minThreshold = 0\nparams.maxThreshold = 255\nparams.filterByArea = True\nparams.minArea = 50\nparams.maxArea = 256 * 256\nparams.filterByCircularity = False\nparams.minCircularity = 0.1\nparams.filterByConvexity = False\nparams.minConvexity = 0.9\nparams.filterByInertia = False\nparams.minInertiaRatio = 0.5\nver = (cv2.__version__).split('.')\nif int(ver[0]) < 3:\ndetector = cv2.SimpleBlobDetector(params)\nelse:\ndetector = cv2.SimpleBlobDetector_create(params)\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fSimpleBlobDetector()\n\nThen we can use the detector object to detect blobs from\nmasked image\nkeypoints = detector.detect(255 - mask_image)\nkp_image =\ncv2.drawKeypoints(blur_image,\nkeypoints,\nnp.array([]),\n(0, 255, 0),\ncv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\ncv2.imshow('Keypoints', kp_image)\n\nTo extract blobs information, simply look at the keypoints\nvariable\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fSimpleBlobDetector()\nResult from the drawKeypoints() function to the original\nimage:\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fSimpleBlobDetector()\n\nThe SimpleBlobDetector() function is good for round\nobject\nIt may not perform well for our application (high CPU utilization)\nWith a large blob, it only show a small keypoint\nParameters are hard to understand\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fBlob Detection using Contour\n\nAnother method is to detect contours of masked image\nA contour is a curve joining all the continuous points (along the\nboundary), having same color or intensity\nThe contours are a useful tool for shape analysis and object\ndetection and recognition\nIn OpenCV, the function findContours() is given\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\ffindContours()\n\nfindContours() example:\ndef main():\ncolor_image = cv2.imread('..\/start_img.jpg', cv2.IMREAD_COLOR)\nblur_image = cv2.GaussianBlur(color_image, (5, 5), 0)\ncv2.namedWindow('Contour Image')\n(cnts, _) = cv2.findContours(mask_image.copy(), cv2.RETR_TREE,\ncv2.CHAIN_APPROX_SIMPLE)\ncv2.drawContours(blur_image, cnts, -1, (0,255,0), 3)\ncv2.imshow('Contour Image', blur_image)\ncv2.waitKey(0);\ncv2.destroyAllWindows()\nif __name__ == '__main__':\nmain()\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fdrawContours()\nUse the drawContours() to draw all contours into the\noriginal image\n\nNote that there are contours inside other contours\nWe need bounding box for each contour and eliminate contours\nthat are inside another\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\ffindContours() with hierarchy\nFilter out some contours\ndef main():\ncolor_image = cv2.imread('..\/start_img.jpg', cv2.IMREAD_COLOR)\nblur_image = cv2.GaussianBlur(color_image, (5, 5), 0)\ncv2.namedWindow('Bounding')\n(cnts, hierarchy) = cv2.findContours(mask_image.copy(),\ncv2.RETR_TREE,\ncv2.CHAIN_APPROX_SIMPLE)\nfor i in range(0, len(cnts)):\nc = cnts[i]\nif cv2.contourArea(c) < 100:\ncontinue\nif not hierarchy[0][i][3] == -1:\ncontinue\nx,y,w,h = cv2.boundingRect(c)\ncv2.rectangle(blur_image, (x,y), (x + w, y + h),\n(0, 255, 0), 3);\ncv2.imshow('Bounding', blur_image)\ncv2.waitKey(0);\ncv2.destroyAllWindows()\nif __name__ == '__main__':\nmain()\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\fdrawContours()\nAfter filtering out small contours and those that are inside another\n\nThumrongsak Kosiyatrakul\n\nBlob Detection\n\n\f","label":[[0,14,"Concept"],[67,81,"Concept"],[84,88,"Concept"],[92,96,"Concept"],[300,305,"Concept"],[322,326,"Concept"],[485,499,"Concept"],[518,522,"Concept"],[626,640,"Concept"],[691,694,"Concept"],[940,954,"Concept"],[973,977,"Concept"],[1036,1050,"Concept"],[1069,1073,"Concept"],[1126,1140,"Concept"],[1337,1340,"Concept"],[1349,1350,"Concept"],[1366,1375,"Concept"],[1403,1404,"Concept"],[1409,1410,"Concept"],[1419,1430,"Concept"],[1470,1473,"Concept"],[1478,1481,"Concept"],[1515,1516,"Concept"],[1529,1530,"Concept"],[1543,1544,"Concept"],[1563,1564,"Concept"],[1581,1582,"Concept"],[1593,1594,"Concept"],[1607,1608,"Concept"],[1625,1626,"Concept"],[1643,1644,"Concept"],[1653,1654,"Concept"],[1656,1657,"Concept"],[1663,1664,"Concept"],[1755,1769,"Concept"],[1827,1832,"Concept"],[1892,1897,"Concept"],[2406,2420,"Concept"],[2666,2680,"Concept"],[2715,2720,"Concept"],[2867,2872,"Concept"],[2873,2878,"Concept"],[3044,3054,"Concept"],[3150,3165,"Concept"],[3263,3277,"Concept"],[3280,3293,"Concept"],[3314,3324,"Concept"],[3444,3457,"Concept"],[3496,3502,"Concept"],[3530,3536,"Concept"],[3568,3573,"Concept"],[3607,3615,"Concept"],[3634,3646,"Concept"],[3671,3675,"Concept"],[3701,3705,"Concept"],[3780,3781,"Concept"],[3782,3783,"Concept"],[3784,3785,"Concept"],[3786,3787,"Concept"],[3788,3789,"Concept"],[3790,3791,"Concept"],[3879,3893,"Concept"],[3925,3931,"Concept"],[3985,3991,"Concept"],[4045,4058,"Concept"],[4455,4461,"Concept"],[5070,5084,"Concept"],[5087,5100,"Concept"],[5102,5115,"Concept"],[5124,5129,"Concept"],[5145,5158,"Concept"],[5312,5317,"Concept"],[5368,5373,"Concept"],[5388,5393,"Concept"],[5395,5403,"Concept"],[5439,5447,"Concept"],[5540,5545,"Concept"],[5643,5657,"Concept"],[5660,5668,"Concept"],[5685,5698,"Concept"],[5715,5722,"Concept"],[5727,5732,"Concept"],[5751,5759,"Concept"],[5871,5892,"Concept"],[5909,5919,"Concept"],[6006,6020,"Concept"],[6023,6031,"Concept"],[6158,6162,"Concept"],[6349,6352,"Concept"],[6425,6439,"Concept"],[6442,6450,"Concept"],[6506,6520,"Concept"],[6523,6531,"Concept"],[6612,6626,"Concept"],[6629,6637,"Concept"],[6678,6681,"Concept"],[6686,6689,"Concept"],[6717,6731,"Concept"],[6734,6744,"Concept"],[6749,6762,"Concept"],[6855,6865,"Concept"],[6902,6908,"Concept"],[6915,6925,"Concept"],[7030,7043,"Concept"],[7112,7118,"Concept"],[7125,7135,"Concept"],[7524,7530,"Concept"],[7559,7568,"Concept"],[7633,7637,"Concept"],[7645,7653,"Concept"],[7689,7690,"Concept"],[7726,7737,"Concept"],[7817,7822,"Concept"],[7850,7864,"Concept"],[7867,7877,"Concept"],[8072,8082,"Concept"],[8111,8144,"Concept"],[8150,8153,"Concept"],[8169,8177,"Concept"],[8207,8213,"Concept"],[8251,8261,"Concept"],[8300,8314,"Concept"],[8317,8332,"Concept"],[8347,8355,"Concept"],[8473,8495,"Concept"],[8545,8576,"Concept"],[8665,8675,"Concept"],[8728,8758,"Concept"],[8829,8834,"Concept"],[8841,8849,"Concept"],[8892,8912,"Concept"],[9011,9026,"Concept"],[9032,9047,"Concept"],[9928,9942,"Concept"],[9945,9955,"Concept"],[9957,9970,"Concept"],[9999,10004,"Concept"],[10079,10084,"Concept"],[10117,10123,"Concept"],[10140,10151,"Concept"],[10186,10198,"Concept"],[10234,10244,"Concept"],[10269,10274,"Concept"],[10275,10280,"Concept"],[10307,10311,"Concept"],[10319,10323,"Concept"],[10334,10335,"Concept"],[10391,10405,"Concept"],[10408,10417,"Concept"],[10418,10427,"Concept"],[10475,10488,"Concept"],[10574,10578,"Concept"],[10655,10665,"Concept"],[10675,10678,"Concept"],[10697,10702,"Concept"],[10723,10727,"Concept"],[10747,10751,"Concept"],[10769,10773,"Concept"],[10793,10794,"Concept"],[10834,10838,"Concept"],[10839,10840,"Concept"],[10880,10884,"Concept"],[10885,10889,"Concept"],[10939,10944,"Concept"],[10995,10998,"Concept"],[11047,11053,"Concept"],[11131,11145,"Concept"],[11148,11157,"Concept"],[11237,11251,"Concept"],[11340,11345,"Concept"],[11437,11442,"Concept"],[11638,11652,"Concept"],[11665,11670,"Concept"],[11677,11683,"Concept"],[11714,11719,"Concept"],[11732,11737,"Concept"],[11769,11774,"Concept"],[11829,11834,"Concept"],[11886,11892,"Concept"],[12085,12099,"Concept"],[12112,12117,"Concept"],[12124,12130,"Concept"],[12649,12663,"Concept"],[12676,12681,"Concept"],[12688,12694,"Concept"],[13138,13152,"Concept"],[13165,13170,"Concept"],[13177,13183,"Concept"],[13654,13668,"Concept"],[13671,13685,"Concept"],[13917,13931,"Concept"],[13934,13947,"Concept"],[13998,14011,"Concept"],[14034,14037,"Concept"],[14092,14095,"Concept"],[14213,14227,"Concept"],[14265,14268,"Concept"],[14272,14275,"Concept"],[14288,14296,"Concept"],[14302,14305,"Concept"],[14818,14844,"Concept"],[14871,14885,"Concept"],[14890,14904,"Concept"],[15393,15397,"Concept"],[15414,15418,"Concept"],[15501,15505,"Concept"],[15547,15551,"Concept"],[15594,15608,"Concept"],[15613,15617,"Concept"],[15745,15749,"Concept"],[16071,16075,"Concept"],[16163,16166,"Concept"],[16225,16239,"Concept"],[16513,16517,"Concept"],[16747,16761,"Concept"],[16840,16854,"Concept"],[16861,16867,"Concept"],[16910,16924,"Concept"],[17420,17434,"Concept"],[17445,17448,"Concept"],[17452,17455,"Concept"],[17456,17462,"Concept"],[17476,17486,"Concept"],[18005,18019,"Concept"],[18092,18101,"Concept"],[18439,18450,"Concept"],[18455,18466,"Concept"],[18471,18480,"Concept"],[18521,18535,"Concept"],[18561,18573,"Concept"],[18602,18616,"Concept"],[18619,18639,"Concept"],[18641,18647,"Concept"],[18661,18681,"Concept"],[18766,18780,"Concept"],[18783,18803,"Concept"],[19377,19391,"Concept"],[19394,19414,"Concept"],[19436,19444,"Concept"],[19473,19485,"Concept"],[19701,19706,"Concept"],[19739,19748,"Concept"],[19785,19799,"Concept"],[19802,19822,"Concept"],[19839,19854,"Concept"],[19914,19928,"Concept"],[19931,19951,"Concept"],[19957,19977,"Concept"],[20092,20096,"Concept"],[20189,20203,"Concept"],[20206,20220,"Concept"],[20227,20234,"Concept"],[20276,20288,"Concept"],[20291,20298,"Concept"],[20387,20396,"Concept"],[20401,20409,"Concept"],[20487,20493,"Concept"],[20508,20522,"Concept"],[20559,20573,"Concept"],[20576,20590,"Concept"],[20592,20606,"Concept"],[21060,21074,"Concept"],[21077,21091,"Concept"],[21100,21114,"Concept"],[21127,21135,"Concept"],[21181,21189,"Concept"],[21203,21211,"Concept"],[21242,21249,"Concept"],[21264,21272,"Concept"],[21323,21337,"Concept"],[21340,21354,"Concept"],[21360,21369,"Concept"],[21386,21394,"Concept"],[22002,22016,"Concept"],[22019,22033,"Concept"],[22060,22068,"Concept"],[22130,22144,"Concept"]],"Comments":[]}
{"id":304,"segment": ["train_set", "labeled"],  "course": "cs1567", "lec": "lec15_launch_file","text":"Launch File\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nLaunch File\n\n\fMultiple Processes for One Application\nRecall that you may have to open multiple console and\nexecute multiple commands just to run one robot application\nExample: Project 2\nTerminal 1: ROS Master\nroscore\n\nTerminal 2: Kobuki Node\nroslaunch kobuki_node minimal.launch\n\nTerminal 3: gscam Node\nroslaunch gscam v4l.launch\n\nTerminal 4: cmvision Node\nroslaunch mypackage cmvision.launch\n\nTerminal 5: Constant command\nrosrun mypackage constant_command.py\n\nTerminal 6: Control node for project 2\nrosrun mypackage project2.py\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nLaunch File\n\n\fMultiple Processes for One Application\n\nROS allows you to execute one single command which results\nin executing multiple processes\nYou need a launch file\nIn ROS, a launch file is a text file with XML style (tags) with\nthe extension .launch\nTraditionally located in the launch directory under your\npackage\n\/home\/student\/cs1567\/src\/mypackage\/launch\n\nBut it can be located anywhere under your package\n(mypackage) directory\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nLaunch File\n\n\fThe <launch> Tag\n\nAll content of the launch file must be surrounded by the\n<launch> tag:\n<launch>\n<!-- This is a comment -->\n\n<\/launch>\n\nA comment must be surrounded by <!-- and --> as shown\nabove\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nLaunch File\n\n\fThe <include> Tag\n\nTo let the launch file execute another launch file, use the\n<include> tag\n<launch>\n:\n<!-- roslaunch kobuki_node minimal.launch -->\n<include file=\"$(find kobuki_node)\/launch\/minimal.launch\"\/>\n:\n<\/launch>\n\nThe $(find kobuki node) will result in the path to the\nlocation of the kobuki node package\nIn case of the kobuki node package, the launch file is located\nunder the launch directory\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nLaunch File\n\n\fThe <include> Tag\nFor other packages, simply navigate to the package‚Äôs directory\nusing roscd and look for it\nFor example, gscam:\nstudent@robot:\/home\/student$ roscd gscam\nstudent@robot:\/opt\/ros\/kinetic\/share\/gscam$ ls\ncmake\ngscam_nodeletlaunch\nnodelet_plugins.xml\nexamples nodelet_pipeline.launch package.xml\n\nv4l.launch\n\nNote that launch files of gscam package are not in the\nlaunch directory\nThus, for the gscam node:\n<launch>\n:\n<!-- roslaunch gscam v4l.launch -->\n<include file=\"$(find gscam)\/v4l.launch\"\/>\n:\n<\/launch>\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nLaunch File\n\n\fThe <node> Tag\nTo let the launch file execute a node, use the <node> tag\n<launch>\n:\n<!-- rosrun mypackage constant_command.py -->\n<node name=\"constant_command\" pkg=\"mypackage\"\ntype=\"constant_command.py\"\/>\n:\n<\/launch>\n\nThe name indicates the name of the node\nIn most case, it should be the same as the in\nrospy.init node()\nDifferent name will overwrite the node name when it is\ninitialized\n\nThe pkg indicates the name of the package\nThe type indicates the name of the executable file\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nLaunch File\n\n\fThe <node> Tag\nLet‚Äôs put them all together for project 2 (p2.launch)\n<launch>\n<!-- roslaunch kobuki_node minimal.launch -->\n<include file=\"$(find kobuki_node)\/launch\/minimal.launch\"\/>\n<!-- roslaunch gscam v4l.launch -->\n<include file=\"$(find gscam)\/v4l.launch\"\/>\n<!-- roslaunch mypackage cmvision.launch -->\n<include file=\"$(find mypackage)\/cmvision.launch\"\/>\n<!-- rosrun mypackage constant_command.py -->\n<node name=\"constant_command\" pkg=\"mypackage\" type=\"constant_command.py\"\/>\n<!-- rosrun mypackage project2.py -->\n<node name=\"project2\" pkg=\"mypackage\" type=\"project2.py\" output=\"screen\" cwd=\"node\"\/>\n<\/launch>\n\nNotes:\nIf your node needs to show output on the console screen, you\nneed to add output=\"screen\" as shown above\nThe cwd=\"node\" specifies the working directory to be the\nlocation of the executable file\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nLaunch File\n\n\fThe launch File\n\nTo use the previous launch file:\nroslaunch mypackage p2.launch\n\nYou do not need to run the roscore command\nIf the roscore is not currently running, the launch file will\nalso execute the roscore command\n\nYou only need one console screen\nIf all your nodes support Ctrl-C, by pressing Ctrl-C, it will\nkill all program executed by the launch file\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nLaunch File\n\n\f","label":[[0,11,"Concept"],[106,117,"Concept"],[682,693,"Concept"],[838,849,"Concept"],[860,871,"Concept"],[928,935,"Concept"],[1164,1175,"Concept"],[1182,1190,"Concept"],[1253,1261,"Concept"],[1347,1359,"Concept"],[1423,1434,"Concept"],[1441,1450,"Concept"],[1516,1525,"Concept"],[1664,1683,"Concept"],[1731,1742,"Concept"],[1766,1777,"Concept"],[1791,1802,"Concept"],[1824,1830,"Concept"],[1889,1900,"Concept"],[1907,1916,"Concept"],[1990,1995,"Concept"],[2233,2246,"Concept"],[2279,2295,"Concept"],[2472,2483,"Concept"],[2490,2496,"Concept"],[2548,2554,"Concept"],[2790,2807,"Concept"],[2880,2883,"Concept"],[2921,2926,"Concept"],[3017,3028,"Concept"],[3035,3041,"Concept"],[3091,3098,"Concept"],[3727,3742,"Concept"],[3762,3772,"Concept"],[3894,3905,"Concept"],[3912,3923,"Concept"],[3945,3956,"Concept"],[4016,4023,"Concept"],[4039,4046,"Concept"],[4077,4088,"Concept"],[4111,4118,"Concept"],[4187,4193,"Concept"],[4207,4213,"Concept"],[4256,4267,"Concept"],[4316,4327,"Concept"]],"Comments":[]}
