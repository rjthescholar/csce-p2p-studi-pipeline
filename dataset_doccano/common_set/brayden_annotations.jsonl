{"id":290,"text":"Introduction to Operating Systems\nCS 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne ©2013)\n\n\fAnnouncements\n• Upcoming deadlines:\n• Homework 11: due on 4\/18\n• Project 3: Late due date on 4\/13\n• Late penalty waived\n\n• Lab 4: due on 4\/15\n• Quiz 3: due on 4\/15\n• Homework 12: due on 4\/25\n• Lab 5: due on 5\/2\n• Project 4 and Quiz 4: due on 5\/2\n• Bonus Homework: due on 5\/2\n• Course Post-Test: due on 5\/2\nCS 1550 – Operating Systems – Sherif Khattab\n\n2\n\n\fMuddiest Points (1\/2)\n• when is the parity checked to see if there is a bit error\n• a little confused about parity example\n• How to flip the correct bits back that were changed with\nparity?\n• What is parity used for\n• ECC\n• What things move how using what in the disk\n• disk request time delay factors\n•\n\ntransfer time\/rotating time\/seek time\n\n• I feel like rotational delay and actual transfer time are\noverlapped. The sector is spending time to rotate to the\nhead, and at the same time, the head is rotating to find\nthat sector. Are they moving towards each other at the\nsame time?\nCS 1550 – Operating Systems – Sherif Khattab\n\n3\n\n\fDisk drive structure\nhead\nsector\n\nplatter\ntrack\ncylinder\n\nsurfaces\n\nspindle\n\nactuator\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n4\n\n\fMuddiest Points (2\/2)\n• In the last top hat question, why the page table gets\nsmaller if the page frames are larger. I understand\nthat would mean less entries, but wouldn't each entry\nwould be larger, making the overall table the same\nsize?\n• What are RAIDs for?\n\n• Does RAID4 have any advantages over RAID5?\n• All of it, bro\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n5\n\n\fProblem of the Day – Part 1\n• How does a file system handle errors?\n• Answer: Defense in Depth\n• multiple layers of error detection\/correction\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n6\n\n\fWhen good disks go bad…\nDisks have defects\nIn 3M+ sectors, this isn’t surprising!\n\nECC helps with errors, but sometimes this isn’t enough\n\nDisks keep spare sectors (normally unused) and remap bad\nsectors into these spares\nIf there’s time, the whole track could be reordered…\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n7\n\n\fRAIDs, RAIDs, and more RAIDs\nstrip\n\nstrip\n\nStripe\nRAID 0\n(Redundant Array of Inexpensive Disks\n\nRAID 1\n(Mirrored copies)\n\nRAID 4\n(Striped with parity)\n\nRAID 5\n(Parity rotates through disks)\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n8\n\n\fBacking up a file system\n• A file system to be dumped\n• Squares are directories, circles are files\n• Shaded items, modified since last dump\n• Each directory & file labeled by i-node number\n\nFile that has\nnot changed\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n9\n\n\fBitmaps used in a file system dump\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n10\n\n\fChecking the file system for consistency\nConsistent\n\nMissing (“lost”) block\n\nDuplicate block in free list\n\nDuplicate block in two files\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n11\n\n\fProblem of the Day – Part 2\n• How does a file system hide disk access delays?\n• Answer: Caching\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n12\n\n\fFile block cache data structures\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n13\n\n\fLog-structured file systems\n• Trends in disk & memory\n• Faster CPUs\n• Larger memories\n\n• Result\n• More memory -> disk caches can also be larger\n• Increasing number of read requests can come from cache\n• Thus, most disk accesses will be writes\n\n• LFS structures entire disk as a log\n• All writes initially buffered in memory\n• Periodically write these to the end of the disk log\n• When file opened, locate i-node, then find blocks\n\n• Issue: what happens when blocks are deleted?\nCS 1550 – Operating Systems – Sherif Khattab\n\n14\n\n\fLog Structured File System\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n15\n\n\fLog Structured File System\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n16\n\n\fFlash File System\n\nWear Leveling\n\nCount total writes per flash sector and attempt to\nbalance across the whole disk\nCS 1550 – Operating Systems – Sherif Khattab\n\n17\n\n\fWear leveling for SSDs\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n18\n\n\fDisk block size\n• Dark line (left hand scale) gives data rate of a disk\n\n• Dotted line (right hand scale) gives disk space\nefficiency\n• All files 2KB\n\nBlock size\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n19\n\n\fProblem of the Day – Part 3\n• How do device drivers program I\/O devices?\n• Answer: three methods\n• polling\n• Interrupts\n• DMA\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n20\n\n\fHow are I\/O devices connected?\n• Single-bus\n• All memory accesses go\nover a shared bus\n• I\/O and RAM accesses\ncompete for bandwidth\n\nCPU\n\nMemory\n\nI\/O\n\nCPU\n\nMemory\n\nI\/O\n\n• Dual-bus\n• RAM access over highspeed bus\n• I\/O access over lower-speed\nbus\n• Less competition\n• More hardware (more\nexpensive…)\n\nThis port allows I\/O devices\naccess into memory\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n21\n\n\fMemory-Mapped vs. separate I\/O Space\n\nMemory\n0xFFF…\n\nI\/O ports\n\n0\n\nSeparate\nI\/O & memory\nspace\n\nMemory-mapped I\/O\n\nCS 1550 – Operating Systems – Sherif Khattab\n\nHybrid: both\nmemory-mapped &\nseparate spaces\n\n22\n\n\fExample: Dynamic Frequency on XScale\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n23\n\n\fProgrammed I\/O example: printing a page\n\nUser\n\nPrinted\npage\n\nKernel\n\nABCD\nEFGH\n\nPrinted\npage\nABCD\nEFGH\n\nA\n\nABCD\nEFGH\n\nCS 1550 – Operating Systems – Sherif Khattab\n\nPrinted\npage\nABCD\nEFGH\n\nAB\n\nABCD\nEFGH\n\n24\n\n\fPolling\n\ncopy_from_user (buffer, p, count); \/\/ copy into kernel buffer\nfor (j = 0; j < count; j++) {\n\/\/ loop for each char\nwhile (*printer_status_reg != READY)\n;\n\/\/ wait for printer to be ready\n*printer_data_reg = p[j]; \/\/ output a single character\n}\nreturn_to_user();\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n25\n\n\fHardware’s view of interrupts\n\nBus\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n26\n\n\fInterrupt-driven I\/O\ncopy_from_user (buffer, p, count);\nj = 0;\nenable_interrupts();\nwhile (*printer_status_reg != READY)\n;\n*printer_data_reg = p[0];\nscheduler(); \/\/ and block user\nif (count == 0) {\nunblock_user();\n} else {\nj++;\n*printer_data_reg = p[j];\ncount--;\n}\nacknowledge_interrupt();\nreturn_from_interrupt();\n\nCode run by system call\n\nCode run at interrupt time\n(Interrupt handler)\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n27\n\n\f","Comments":[],"label":[[2412,2422,"Concept"],[2425,2436,"Concept"],[2441,2452,"Concept"],[2459,2465,"Concept"],[2480,2491,"Concept"],[2505,2510,"Concept"],[2547,2551,"Concept"],[2559,2568,"Concept"],[2571,2575,"Concept"],[2679,2686,"Concept"],[2697,2713,"Concept"],[2779,2790,"Concept"],[2795,2806,"Concept"],[2807,2817,"Concept"],[2995,3006,"Concept"],[3012,3030,"Concept"],[3042,3049,"Concept"],[3113,3118,"Concept"],[3187,3214,"Concept"],[3300,3311,"Concept"],[3382,3387,"Concept"],[3433,3436,"Concept"],[3556,3564,"Concept"],[3716,3742,"Concept"],[3795,3821,"Concept"],[3874,3891,"Concept"],[3893,3906,"Concept"],[4040,4053,"Concept"],[4428,4435,"Concept"],[4438,4448,"Concept"],[4451,4454,"Concept"],[4540,4550,"Concept"],[4583,4593,"Concept"],[4678,4686,"Concept"],[4715,4718,"Concept"],[4749,4752,"Concept"],[4907,4920,"Concept"],[4925,4943,"Concept"],[4960,4963,"Concept"],[4983,4986,"Concept"],[5003,5020,"Concept"],[5068,5074,"Concept"],[5081,5094,"Concept"],[5097,5105,"Concept"],[5219,5222,"Concept"]]}
{"id":291,"text":"CS 0007: Introduction to Java\nLecture 7\nNathan Ong\nUniversity of Pittsburgh\nSeptember 22, 2016\n\n\fFUNCTIONS\n\n\fFunctions\n• A function is similar to its mathematical\ncounterpart\n• f(x) = x2, plug in 3, get 9\n• Contains several more parts\n\n\fJava Functions\n• Takes in zero or more parameters,\nprocesses them in the function body,\nand returns a result\n• Imagine going to BestBuyTM and telling\nthem you want your computer fixed.\nYou are telling them to run a fixing\nfunction, with your computer being a\nparameter. What you get back is your\nfixed computer.\n\n\fYou Already Have the Power!\n• You already know how to call functions!\nStatic:\nClassName.functionName(<parameters\n>);\nNon-static:\nobjectName.functionName(<parameter\ns>);\n• How do I make my own?\n\n\fFunction Components\n\n1.\n2.\n3.\nFunction 4.\nHeader 5.\n\nFunction\nBody 6.\n\nVisibility type (public\/protected\/private)\nstatic (For now, required)\nReturn Type\nfunctionName\nParentheses “()”\n–\na)\nb)\nc)\n\nParameters\nType1 parameterName1\nType2 parameterName2\n…\n\nCurly Brackets\/Braces “{}”\n–\n\nreturn a value\n\n\fA Simple Unnecessary\nFunction\n• I want this function to take two doubles\nand return their sum.\n• Let us go through the list and see what\nneeds to be incorporated for the\nfunction.\n\n\fFunction Components\n1.\n2.\n3.\n4.\n5.\n\nWe’ll just use public for now.\nstatic (For now, required)\nWhat is the Return Type?\nWhat is an appropriate functionName?\nParentheses “()”\n–\n\nWhat are the parameters?\n\n6. Curly Brackets\/Braces “{}”\n–\n–\n\nWhat do we do in the Function Body?\nWhat do we return?\n\n\fReturn Type\n• What kind of thing are we going to give\nback to the function caller?\n• “I want this function to take two\ndoubles and return their sum.”\n• The sum of two doubles better be a\ndouble.\n\n\fFunction Name\n• The function name should easily\ndescribe what the function does.\n• “I want this function to take two\ndoubles and return their sum.”\n• “sum”? Probably not enough detail,\nsince there are many types that can be\nsummed.\n• sumDoubles\n\n\fParameters\n• The required input to the function.\n• The data that the function needs in\norder to properly execute its duties.\n• “I want this function to take two\ndoubles and return their sum.”\n• Two doubles.\n• Names?\n\n\fFunction Header\n\n\/\/sums two doubles together\npublic static double sumDoubles\n(double addend1, double addend2)\n\n\fFunction Body\n…(Function Header)\n{\n???\n}\n\n\fFunction Body\n…(Function Header)\n{\ndouble sum = addend1 + addend2;\nreturn sum;\n}\/\/end method(double,double)\n\n\fFunction Body\n…(Function Header)\n{\nreturn addend1 + addend2;\n}\/\/end method(double,double)\n\n\fFunction Body\npublic class Functions\n{\n…(Function)\npublic static void main(String[] args)\n{\ndouble sum = sumDoubles(2.5,3.9);\nSystem.out.println(sum);\n}\/\/end method main\n}\/\/End class Functions\n\n\fimport java.util.Scanner;\npublic class AddingMachine\n{\n…(Function)\npublic static void main(String[] args)\n{\nScanner scan = new Scanner(System.in);\nSystem.out.println(\"Please enter a number:\");\ndouble firstNum = scan.nextDouble();\nSystem.out.println(\"Please enter a second\nnumber:\");\ndouble secondNum = scan.nextDouble();\ndouble sum = sumDoubles(firstNum,secondNum);\nSystem.out.println(\"The sum of \" + firstNum +\n\" and \" + secondNum + \" equals \" +\nsum);\n}\/\/end method main\n}\/\/End class AddingMachine\n\n\fScope\n• Why did we need to submit firstNum\nand secondNum to sumDoubles?\n• Why can’t sumDoubles just use the\nalready created variables?\n• This relates to scope.\n\n\fScope\nConfidential\nSecret\nTop Secret\n\n\fScope\npublic class\nAddingMachine\npublic\nstatic void\nmain\n\npublic\nstatic\ndouble\nsumDoubl\nes\n\n\fPassing-in Parameters\n• The act of providing parameters in a\nfunction call is called Passing-in.\n• Java has two kinds of passing-in.\n\n\fPass-by-Value\n• Passing-in a copy of the value of the\nvariable.\n• Any change made to the variable is not\nreflected when the function returns.\n• All primitive type parameters are passby-value.\n\n\fPass-by-Reference\n• Passing-in the actual variable.\n• Any change made to the variable IS\nreflected when the function returns,\nUNLESS the parameter name is\nREASSIGNED.\n• All non-primitive type parameters are\npass-by-reference.\n\n\fAnother Simple Function\n• I want a function that prints a nice\nBritish greeting, complete with the\nperson’s full name.\nSource:\nhttp:\/\/www.bbcamerica.com\/anglophen\nia\/2011\/07\/five-slang-ways-to-say-hello\/\n\n\fFunction Components\n1.\n2.\n3.\n4.\n5.\n\npublic\nstatic\nWhat is the Return Type?\nWhat is an appropriate functionName?\nParentheses “()”\n–\n\nWhat are the parameters?\n\n6. Curly Brackets\/Braces “{}”\n–\n–\n\nWhat do we do in the Function Body?\nWhat do we return?\n\n\fReturn Type\n• Does this function even need to return\nany data or information?\n• No, so we should use void as our\nreturn type.\n\n\fFunction Header\n\npublic static void britishGreeting\n(String fullName)\n\n\fFunction Body\n…(Function Header)\n{\nSystem.out.println(\"Wotcha \" +\nfullName +\n\". Fancy a cuppa?\");\n}\/\/end method(String)\n\/\/Note no return statement\n\n\f","Comments":[],"label":[[97,106,"Concept"],[109,118,"Concept"],[123,131,"Concept"],[242,251,"Concept"],[276,286,"Concept"],[310,323,"Concept"],[329,336,"Concept"],[459,467,"Concept"],[496,505,"Concept"],[610,619,"Concept"],[621,627,"Concept"],[653,663,"Concept"],[705,716,"Concept"],[746,754,"Concept"],[776,784,"Concept"],[788,794,"Concept"],[799,807,"Concept"],[808,812,"Concept"],[817,832,"Concept"],[860,866,"Concept"],[887,898,"Concept"],[941,951,"Concept"],[1027,1033,"Concept"],[1065,1073,"Concept"],[1088,1096,"Concept"],[1121,1127,"Concept"],[1214,1222,"Concept"],[1226,1234,"Concept"],[1293,1299,"Concept"],[1332,1343,"Concept"],[1415,1425,"Concept"],[1484,1497,"Concept"],[1510,1516,"Concept"],[1520,1526,"Concept"],[1586,1594,"Concept"],[1618,1626,"Concept"],[1717,1730,"Concept"],[1737,1750,"Concept"],[1783,1791,"Concept"],[1813,1821,"Concept"],[1964,1974,"Concept"],[2003,2011,"Concept"],[2033,2041,"Concept"],[2104,2112,"Concept"],[2182,2197,"Concept"],[2294,2307,"Concept"],[2310,2325,"Concept"],[2337,2350,"Concept"],[2353,2368,"Concept"],[2447,2460,"Concept"],[2463,2478,"Concept"],[2539,2552,"Concept"],[2566,2575,"Concept"],[2580,2588,"Concept"],[2791,2799,"Concept"],[3235,3240,"Concept"],[3388,3393,"Concept"],[3397,3402,"Concept"],[3436,3441,"Concept"],[3529,3539,"Concept"],[3540,3550,"Concept"],[3573,3584,"Concept"],[3614,3624,"Concept"],[3650,3660,"Concept"],[3664,3677,"Concept"],[3680,3690,"Concept"],[3788,3796,"Concept"],[3797,3804,"Concept"],[3827,3837,"Concept"],[3842,3854,"Concept"],[3858,3875,"Concept"],[3878,3888,"Concept"],[3966,3974,"Concept"],[3975,3982,"Concept"],[3995,4004,"Concept"],[4050,4060,"Concept"],[4065,4082,"Concept"],[4101,4109,"Concept"],[4121,4129,"Concept"],[4292,4300,"Concept"],[4354,4365,"Concept"],[4506,4519,"Concept"],[4532,4538,"Concept"],[4542,4553,"Concept"],[4566,4574,"Concept"],[4588,4594,"Concept"],[4655,4666,"Concept"],[4670,4685,"Concept"],[4742,4755,"Concept"]]}
{"id":292,"text":"CS 0007: Introduction to Java\nLecture 17\nNathan Ong\nUniversity of Pittsburgh\nNovember 8, 2016\n\n\fMain Portions of OOP\n• Building a class\n• Determining inter-class relationships\n\n\fClass Components\n• Class-level\/Instance Variables\n• Methods\n• Constructor(s)\n\n\fInter-class Relationships\n• Building a single class is useless. It\nneeds to be used in context.\n• There are two main relationships\nbetween classes\n– Sub\/Super class\n– Ownership\n\n\fSubclasses\n• A subclass of a class is a more specific\ntype of a class\n• Also known as the child of a class\n• For example, a tree would be a subclass\nof plant\n• Subclasses are meant to expand upon\nthe behavior of their more general\nparent class\n• You can have several subclasses\n\n\fSuperclasses\n• On the converse, a superclass is a more\nabstract and general version of a class\n• Also known as the parent of a class\n• Plant is the superclass of Tree\n• You can only have one superclass\n\n\fDeclaring a Class to be a\nSubtype\n• In order to declare a class’s parent, use\nthe keyword extends\n• (Classes that do not have a parent class\nimplicitly extend the Object class)\n\n\fInheritance\n• A subclass inherits all non-private fields\nand methods\n• Accessing these fields and methods\nrequires the keyword super.\n• (Note: you may also be able to access\nprivate fields with the parent class’s\ngetters and setters, which may be safer)\n\n\fRestricting Access\n• What if you want a field or method to be\ninherited, but still do not necessarily\nwant it to be accessed by anyone?\n• Use the keyword protected\n• Remember, releasing your access to\nthese fields and methods should only\nbe done when necessary\n\n\fRegarding Constructors\n• Constructors cannot be inherited, even\nthough they are public\n• However, you can, and should, use them\nfrom the subclass’s constructor, to\nensure complete initialization\n• You can call the parent’s constructor by\nusing the keyword super\n\n\fCalling Superclass Constructor\n• Unlike calling an overloaded\nconstructor of the same class, calling a\nsuperclass constructor does not need to\nbe the only line of code\n• However, it must still be the first line of\ncode in the constructor\n\n\fExample\npublic class Vehicle\n{\nprivate final int numWheels;\n…\npublic Vehicle(int numWheels)\n{\nthis.numWheels = numWheels;\n…\n}\/\/end function(double)\n…\n}\/\/End class Vehicle\n\n\fExample\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n…\npublic Car(int numPassengers, double gasRemaining)\n{\nsuper(4);\nthis.numPassengers = numPassengers;\nthis.gasRemaining = gasRemaining;\n}\/\/end constructor(int,double)\n…\n}\/\/End class Plant\n\n\fWhat If the Superclass’s Method\nDefinition Does Not Fit the Class’s?\n• We can override the definition by using\nthe exact same function header\n• The line directly above function header\nmust have “@Override” only\n• As an example, our Car class should\nprobably use the original “move”\nmethod, rather than creating an entirely\nnew “drive” method that does\nsomething similar\n\n\fOverride\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n…\n@Override\npublic boolean move(double dist)\n{\nreturn super.move(dist*10.0) &&\n(this.gasRemaining > 0);\n}\/\/end function(double)\n…\n}\/\/End class Plant\n\n\fOverriding\n• I can still reference the original method\nusing the super keyword\n• Unless your overridden method totally\ndiscards the functionality of the\nsuperclass’s method, you should call the\nsuperclass’s method at least once\n\n\fNote\n• You cannot override constructors\n\n\fOwnership\n• Ownership is simply one class using\nanother as a property\n• A Car may have an Engine, a Radio, and\nan Owner, depending on what you need\n• A Car’s superclass and subclasses\ncertainly are not Engine, Radio, and\nOwner\n\n\fUsing the Classes\npublic class Garage\n{\nprivate Vehicle[] vehicles;\n…\npublic Garage(int capacity)\n{\nthis.vehicles = new Vehicle[capacity];\nfor(int i = 0; i < vehicles.length; i++)\n{\nvehicles[i] = null;\n}\n…\n}\/\/end constructor(int)\n…\n}\/\/End class Garage\n\n\fUsing the Classes\npublic class Garage\n{\n…\npublic boolean addVehicle(Vehicle vehicle)\n{\n\/\/Note: there is a better way!\nfor(int i = 0; i < vehicles.length; i++)\n{\nif(vehicles[i] == null)\n{\nvehicles[i] = vehicle;\nreturn true;\n}\n}\nreturn false;\n}\/\/end method(Vehicle)\n}\/\/End class Garage\n\n\fQUESTIONS?\n\n\fModeling a Problem\n“Joe’s Automotive Shop services foreign cars, and\nspecializes in servicing cars made by Mercedes,\nPorsche, and BMW. When a customer brings a car to\nthe shop, the manager gets the customer’s name,\naddress, and telephone number. Then the manager\ndetermines the make, model, and year of the car, and\ngives the customer a service quote. The service\nquote shows the estimated parts charges, estimated\nlabor charges, sales tax, and total estimated\ncharges.”\nSource: Starting Out with Java: From Control Structures\nthrough Objects by Tony Gaddis\n\n\fFind the Nouns\n“Joe’s Automotive Shop services foreign cars,\nand specializes in servicing cars made by\nMercedes, Porsche, and BMW. When a\ncustomer brings a car to the shop, the\nmanager gets the customer’s name, address,\nand telephone number. Then the manager\ndetermines the make, model, and year of the\ncar, and gives the customer a service quote.\nThe service quote shows the estimated parts\ncharges, estimated labor charges, sales tax,\nand total estimated charges.”\n\n\fCoalescing\naddress\nBMW\ncar\nquote\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nPorsche\nJoe’s Automotive Shop sales tax\nmake\nservice\nmanager\nMercedes\nmodel\n\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\n\fNoun Out of Scope\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\n\fSubtypes\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\nname\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated charges\nyear\n\nWhether these subtypes are specific objects\n(instances) or more specific types of cars\n(subclasses) will depend on your needs. In this\nscenario, there is no need to represent them as\nclasses.\n\n\fSimple Properties\naddress\nforeign cars\nBMW\nJoe’s Automotive Shop\ncar\nmake service quote\ncars\nmanager\ncustomer Mercedes\nestimated labor charges\nmodel\nestimated parts charges\nname\n\nPorsche\nsales tax\nshop\ntelephone number\ntotal estimated charges\nyear\n\nSimple properties can be composed of\nprimitives or preexisting object\ndefinitions, and fall under a particular\nobject class.\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA car had three simple properties in our\nscenario. What types would they be?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA car had three simple properties in our\nscenario. What types would they be?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA customer had three simple properties\nin our scenario. What types would they\nbe?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA customer had three simple properties\nin our scenario. What types would they\nbe?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA service quote had four simple\nproperties in our scenario. What types\nwould they be?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA service quote had four simple\nproperties in our scenario. What types\nwould they be?\n\n\fWho Owns Everything?\naddress\nforeign cars\nBMW\nJoe’s Automotive Shop\ncar\nmake service quote\ncars\nmanager\ncustomer\nMercedes\nestimated labor charges\nmodel\nestimated parts charges\nname\n\nPorsche\nsales tax\nshop\ntelephone number\ntotal estimated charges\nyear\n\nOur scenario revolves around the\nautomotive shop, so this will hold the\nmain method and will be the overarching\nclass.\n\n\fCode on the board!\n\n\f","Comments":[],"label":[[113,116,"Concept"],[130,135,"Concept"],[156,161,"Concept"],[178,183,"Concept"],[197,202,"Concept"],[209,227,"Concept"],[230,237,"Concept"],[240,251,"Concept"],[263,268,"Concept"],[303,308,"Concept"],[396,403,"Concept"],[410,421,"Concept"],[424,433,"Concept"],[436,446,"Concept"],[451,460,"Concept"],[465,470,"Concept"],[500,505,"Concept"],[537,542,"Concept"],[576,584,"Concept"],[596,606,"Concept"],[667,679,"Concept"],[703,713,"Concept"],[716,728,"Concept"],[750,760,"Concept"],[805,810,"Concept"],[831,837,"Concept"],[843,848,"Concept"],[864,874,"Concept"],[907,917,"Concept"],[932,937,"Concept"],[946,953,"Concept"],[978,983,"Concept"],[986,992,"Concept"],[1010,1017,"Concept"],[1021,1028,"Concept"],[1048,1060,"Concept"],[1072,1078,"Concept"],[1090,1095,"Concept"],[1099,1110,"Concept"],[1115,1123,"Concept"],[1124,1132,"Concept"],[1226,1231,"Concept"],[1297,1309,"Concept"],[1417,1426,"Concept"],[1509,1518,"Concept"],[1628,1640,"Concept"],[1643,1655,"Concept"],[1666,1675,"Concept"],[1755,1763,"Concept"],[1766,1777,"Concept"],[1832,1837,"Concept"],[1841,1852,"Concept"],[1874,1879,"Concept"],[1890,1900,"Concept"],[1901,1912,"Concept"],[1944,1955,"Concept"],[1985,1995,"Concept"],[1996,2007,"Concept"],[2108,2119,"Concept"],[2137,2142,"Concept"],[2279,2284,"Concept"],[2310,2315,"Concept"],[2595,2605,"Concept"],[2643,2649,"Concept"],[2661,2669,"Concept"],[2819,2824,"Concept"],[2955,2963,"Concept"],[2971,2976,"Concept"],[3058,3066,"Concept"],[3192,3197,"Concept"],[3206,3216,"Concept"],[3271,3276,"Concept"],[3299,3309,"Concept"],[3359,3369,"Concept"],[3400,3410,"Concept"],[3454,3462,"Concept"],[3463,3475,"Concept"],[3478,3487,"Concept"],[3490,3499,"Concept"],[3514,3519,"Concept"],[3636,3646,"Concept"],[3651,3661,"Concept"],[3717,3724,"Concept"],[3732,3737,"Concept"],[6117,6127,"Concept"]]}
{"id":293,"text":"Finite Automata 03\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fNondeterministic Finite Automaton\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\nLet Σ = {0, 1}\nDifferent between Deterministic Finite Automaton (DFA) and\nNondeterministic Finite Automaton (NFA):\nDFA always has exactly one exiting transition arrow for each\nsymbol in the alphabet\nNFA may have none, one, or many exiting arrows for each\nsymbol\n\nDFA have no arrow with the label ε\nNFA may have Zero, one, or many arrows exiting from each\nstate with the label ε.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fCompute an NFA\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\nIf you encounter a state with multiple way to proceed for a\nregular input:\nThe machine splits into multiple copies of itself\nThe machines follow all the possibilities in parallel.\nEach copy of the machine takes one of the possible ways.\n\nIf you encounter a state with an ε symbol as an exiting arrow:\nWithout reading any input, the machine splits into multiple\ncopies.\nEach follows each of the exiting ε-labeled arrows, and\nOne stays at the current state.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nSymbol read\n\nq1\n\nStart\n\n0, 1\n\n0, 1\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nSymbol read\n\nq1\n\nStart\n\n0\n\nq1\n\n0, 1\n\n0, 1\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq3\n\n0, 1\n\n0, 1\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nq1\n\nFinite Automata 03\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nq1\n\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nq1\n\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\nq2\n\nq3\n\nq4\n\nq4\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nq1\n\n0, ε\n\nq2\n\n1\n\nq3\n\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\nq1\n\nq2\n\nq3\n\nq4\n\nq4\n\nq1\n\nq3\n\nq4\n\nq4\n\n1\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nIf there is at least one copy in an accept state,\nthe machine accept the input string.\nFinite Automata 03\n\nq4\n\n\fExample\nLet A be the language consisting of all strings over {0, 1}\ncontaining a 1 in the third position from the end (e.g., 000100 is in\nA but 0011 is not in A).\nDesign a DFA for this problem is quite complicate\nDesign an NFA is easier\n0, 1\n\n1\n\nq1\n\n0, 1\n\nq2\n\n0, 1\n\nq3\n\nq4\n\nThe transition from q1 to q2 is our guess that this is the 1 in\nthe third position from the end.\nIf our guess is wrong:\nThe input string is shorter, it will end at reject state.\nThe input string is longer, the machine will die but other one\nremains alive.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nAn equivalent DFA machine\n0\n\n0\n\n0\n\nq000\n1\n1\n\n0\n\nq100\n\nq010\n\nq110\n1\n\n0\n\n1\n\n0\n\n0\n\n0\n\nq001\n\nq101\n\n1\n\nq011\n\n1\n\n1\n\nName states according to the last three symbols\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\nq111\n\n1\n\n\fExample\nSuppose the alphabet Σ is {0}. Design a machine that recognizes\nthe language A where A is an empty string or all strings over Σ\nthat their length is a multiple of 2 or 3.\n0\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nSuppose the alphabet Σ is {0}. Design a machine that recognizes\nthe language A where A is an empty string or all strings over Σ\nthat their length is a multiple of 2 or 3.\n0\n\n0\n\n0\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n\nFinite Automata 03\n\n\fExample\nSuppose the alphabet Σ is {0}. Design a machine that recognizes\nthe language A where A is an empty string or all strings over Σ\nthat their length is a multiple of 2 or 3.\n0\n\nε\n\n0\n\nε\n0\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n\nFinite Automata 03\n\n\fFormal Definition of A Nondeterministic Finite Automaton\nA nondeterministic finite automaton is a 5-tuple\n(Q, Σ, δ, q0, F )\n1\n2\n3\n\nQ is a finite set of states\nΣ is a finite alphabet\nδ : Q × Σε → P(Q) is the transition function,\nΣε = Σ ∪ {ε} and\nP(Q) is the powerset of Q (set of set of states).\n\n4\n5\n\nq0 ∈ Q is the start state\nF ⊆ Q is the set of accept states.\n\nNotes\nIn an NFA, one input symbol can change the state of the\nmachine to multiple states.\nSplit to multiple copies with different current states\nExample: δ(q0 , 1) = {q0 , q1 }\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, ε\n\nq2\n\n1\n\nq3\n\nQ = {q1 , q2 , q3 , q4 }\nΣ = {0, 1} and Σε = {0, 1, ε}\nδ is given as\nδ\n0\n1\nq1 {q1 } {q1 , q2 }\nq2 {q3 }\n∅\nq3\n∅\n{q4 }\nq4 {q4 }\n{q4 }\n\nq4\n\nε\n∅\n{q3 }\n∅\n∅\n\nWe treat ε as a regular input symbol\nIf there is no ε transitions, we can ignore the ε column\n\nq1 is the start state\nF = {q4 }\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fNFA and DFA\n\nNFA is a slightly different computation model compared to\nDFA\nNFA can split into multiple copies\nNFA may have ε transitions\n\nIs there a language that can be recognized by an NFA but\ncannot be recognized by any DFAs?\nIn theory of computation, we try to see whether we can\ncapture the behavior of an NFA using a DFA\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fSimulating and NFA with a DFA\nSimulate 010110\nδ\n\n0\n\nε\n\n1\n\nq1\n\nq1 {q1 } {q1 , q2 } ∅\n{q3 }\nq2 {q3 }\n∅\n{q4 }\n∅\nq3 ∅\n∅\nq4 {q4 } {q4 }\n\nStart\n\n{q1 }\n\n= {q1 }\n\n{q1 }\n\n= {q1 }\n\n{q1 , q2 , q3 }\n\n= {q1 , q2 , q3 }\n\n{q1 } ∪ {q3 } ∪ ∅\n\n= {q1 , q3 }\n\n{q1 , q2 , q3 } ∪ {q4 }\n\n= {q1 , q2 , q3 , q4 }\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq3\n0\n\nq1\n\nq3\n1\n\nq1\n\nq2\n\nq3\n\nq4\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\n{q1 , q2 , q3 } ∪ ∅ ∪ {q4 } ∪ {q4 } = {q1 , q2 , q3 , q4 }\n\nq4\n0\n\nq1\n\nq3\n\nq4\n\nq4\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n{q1 } ∪ {q3 } ∪ ∅ ∪ {q4 } ∪ {q4 } = {q1 , q3 , q4 }\nFinite Automata 03\n\n\fEquivalence of NFAs and DFAs\n\nEvery nondeterministic finite automaton has an equivalent\ndeterministic finite automaton.\nLet N = (Q, Σ, δ, q0 , F ) be the NFA recognizing some\nlanguage A\nWe are going to construct a DFA M = (Q0 , Σ, δ 0 , q00 , F 0 )\nrecognizing A\nLet’s consider the case where N has no ε transitions.\n1\n2\n\nQ0 = P(Q) [\nδ 0 (R, a) =\nδ(r, a)\nr∈R\n\n3\n4\n\nq00 = {q0 }\nF 0 = {R ∈ Q0 | R contains an accept state of N }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nLet Σ be {0, 1}. The following NFA N recognizes the\nlanguage A where A is a set of strings that end with a 1.\n0, 1\n\n1\n\nq0\n\nq1\n\nN = (Q, Σ, δ, q0 , F )\n1\n2\n3\n\nQ = {q0 , q1 },\nΣ = {0, 1}\nδ is given as\nq0\nq1\n\n4\n5\n\n0\n{q0 }\n∅\n\n1\n{q0 , q1 }\n∅\n\nq0 is the start state\nF = {q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nConstruct a DFA M = (Q0 , Σ, δ 0 , q00 , F 0 )\nQ0 = P(Q) = P({q0 , q1 })\nQ0 = {∅, {q0 }, {q1 }, {q0 , q1 }}\nWe will construct δ 0 later\nq00 = {q0 } where q0 is the start state of the NFA\nF 0 = {R ∈ Q0 | R contains an accept state of N }\nF 0 = {{q1 }, {q0 , q1 }}\nwhere F = {q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nLet’s focus on transition functions\nThe transition function δ of the NFA is as follows:\n0\n1\nq0 {q0 } {q0 , q1 }\nq1\n∅\n∅\nRecall that the set of state of the equivalent DFA is the power\nset of set of state of the NFA\nδ0\n0\n1\n∅\n∅\n∅\n{q0 } {q0 , q1 }\n{q0 }\n{q1 }\n∅\n∅\n{q0 , q1 } {q0 } {q0 , q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nMachine M = (Q0 , Σ, δ 0 , q00 , F 0 ) equivalent to N can be\ndefined as follows:\nQ0 = P(Q) [\n= {∅, {q0 }, {q1 }, {q0 , q1 }},\n0\nδ (R, a) =\nδ(r, a)\nr∈R\n0\n\nδ (∅, 0) =\n\n[\n\nδ(r, 0) = ∅\n\nr∈∅\n\nδ 0 (∅, 1) =\n\n[\n\nδ(r, 1) = ∅\n\nr∈∅\n\nδ 0 ({q0 }, 0) =\n\n[\n\nδ(r, 0) = δ(q0 , 0) = {q0 }\n\nr∈{q0 }\n\nδ 0 ({q0 }, 1) =\n\n[\n\nδ(r, 1) = δ(q0 , 1) = {q0 , q1 }\n\nr∈{q0 }\n\nδ 0 ({q1 }, 0) =\n\n[\n\nδ(r, 0) = δ(q1 , 0) = ∅\n\nr∈{q1 }\n\nδ 0 ({q1 }, 1) =\n\n[\n\nδ(r, 1) = δ(q1 , 1) = ∅\n\nr∈{q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nMachine M (Continue)\nδ 0 (Continue)\nδ 0 ({q0 , q1 }, 0) =\n\n[\n\nδ(r, 0) = δ(q0 , 0) ∪ δ(q1 , 0) =\n\nr∈{q0 ,q1 }\n\n{q0 } ∪ ∅ = {q0 }\nδ 0 ({q0 , q1 }, 1) =\n\n[\n\nδ(r, 0) = δ(q0 , 1) ∪ δ(q1 , 1) =\n\nr∈{q0 ,q1 }\n\n{q0 , q1 } ∪ ∅ = {q0 , q1 }\n\nThus δ 0 is given by\nδ0\n∅\n{q0 }\n{q1 }\n{q0 , q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n∅\n{q0 }\n∅\n{q0 }\n\n1\n∅\n{q0 , q1 }\n∅\n{q0 , q1 }\n\nFinite Automata 03\n\n\fExample\nThe state diagram of the machine M = (Q0 , Σ, δ 0 , q00 , F 0 )\nequivalent to N (L(M ) = L(N )) is shown below:\n0\n\n1\n\n1\n\n{q0 }\n\n{q0 , q1 }\n\n0\n0\n\n0\n\n{q1 }\n\n∅\n1\n\n1\n\nWithout bottom part, it is the same as one of our previous\nexample\nIt is okay for a DFA to have unreachable states\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fNFA to DFA with ε Symbol\nLet E(R) be the collection of states that can be reached from\nmembers of R by going only along ε arrows, including the\nmembers of R themselves.\nE(R) = {q | q can be reached from R by travel along\n0 or more ε arrows}\nNote that a state q can be reached from its own state q by\ntravel along no ε arrow (R ⊆ E(R))\nExample:\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, ε\n\nq2\n\n1\n\nq3\n\nE({q1 }) = {q1 }\nE({q2 }) = {q2 , q3 }\nE({q1 , q2 }) = {q1 , q2 , q3 }\nE({q1 , q3 }) = {q1 , q3 }\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\nq4\n\n\fNFA to DFA with ε Symbol\n\nLet NFA N = (Q, Σ, δ, q0 , F ) with ε transitions that\nrecognizes a language A\nWe can construct a DFA M = (Q0 , Σ, δ 0 , q00 , F 0 ) as\n1\n2\n\nQ0 = P(Q)\nδ 0 is given by\nδ 0 (R, a) =\n\n[\n\nE(δ(r, a))\n\nr∈R\n3\n\nq00 = E({q0 })\nIf q0 has no exiting arrow for ε, q00 = {q0 }\n\n4\n\nF 0 = {R ∈ Q0 | R contains an accept state of N }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nConsider the following NFA machine:\n1\nb\n\na\n\nε\n2\n\na\n\n3\na, b\n\nN = (Q, Σ, δ, q0 , F )\nQ = {1, 2, 3}\nΣ = {a, b}\nδ is given by\n1\n2\n3\n\na\n∅\n{2, 3}\n{1}\n\nb\n{2}\n{3}\n∅\n\nε\n{3}\n∅\n∅\n\nq0 = 1\nF = {1}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nMachine M = (Q0 , Σ, δ 0 , q00 , F 0 ) equivalent to N :\nQ0 = P(Q) = P({1, 2, 3})\nQ0 = {∅, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}\nStart state is E({1}) = {1, 3}\nF 0 is a set of set of states that contain accept states of N\n(F = {1}).\nF 0 = {{1}, {1, 2}, {1, 3}, {1, 2, 3}}\n[\nδ 0 (R, a) =\nE(δ(r, a))\nr∈R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nLet’s focus on transition functions\nThe transition function δ of the NFA is as follows:\nδ\na\nb\nε\n1\n∅\n{2} {3}\n2 {2, 3} {3}\n∅\n{1}\n∅\n∅\n3\nRecall that the set of state of the equivalent DFA is the power\nset of set of state of the NFA\nδ0\na\nb\n∅\n∅\n∅\n∅\n{2}\n{1}\n{2}\n{2, 3}\n{3}\n{3}\n{1, 3}\n∅\n{2, 3}\n{2, 3}\n{1, 2}\n{1, 3}\n{2}\n{1, 3}\n{2, 3}\n{1, 2, 3}\n{3}\n{1, 2, 3} {1, 2, 3} {2, 3}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fMachine M ’s δ 0\n0\n\nδ (∅, a) =\n\n[\n\nE(δ(r, a))\n\n0\n\n= E(δ(2, b))\n= E({3})\n\nr∈∅\n\n= {3}\n[\nδ ({3}, a) =\n\n=∅\n0\n\n0\n\n[\n\nE(δ(r, b))\n\nr∈{2}\n\n=∅\n[\n0\nδ (∅, b) =\nE(δ(r, b))\n\nδ ({1}, a) =\n\n[\n\nδ ({2}, b) =\n\nr∈∅\n\nE(δ(r, a))\n\nE(δ(r, a))\n\nr∈{3}\n\nr∈{1}\n\n= E(δ(3, a))\n\n= E(δ(1, a))\n\n= E({1})\n\n= E(∅)\n=∅\n0\n\nδ ({1}, b) =\n\n0\n\n[\n\n= {1, 3}\n[\n\nδ ({3}, b) =\n\nE(δ(r, b))\n\nE(δ(r, b))\n\nr∈{3}\n\nr∈{1}\n\n= E(δ(3, b))\n\n= E(δ(1, b))\n\n= E(∅)\n\n= E({2})\n= {2}\n[\n0\nδ ({2}, a) =\n\n=∅\n0\n\nE(δ(r, a))\n\nδ ({1, 2}, a) =\n\n[\n\nE(δ(r, a))\n\nr∈{1,2}\n\nr∈{2}\n\n= E(δ(1, a)) ∪ E(δ(2, a))\n\n= E(δ(2, a))\n\n= ∅ ∪ {2, 3}\n\n= E({2, 3})\n\n= {2, 3}\n\n= {2, 3}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fMachine M ’s δ 0\n0\n\nδ ({1, 2}, b) =\n\n[\n\nE(δ(r, b))\n\nr∈{1,2}\n\n0\n\nδ ({2, 3}, b) =\n\n= E(δ(1, b)) ∪ E(δ(2, b))\n= {2} ∪ {3}\n= {2, 3}\n[\n0\nδ ({1, 3}, a) =\n\n= E(δ(2, b)) ∪ E(δ(3, b))\nE(δ(r, a))\n\n= {3}\n0\n\n= E(δ(1, a)) ∪ E(δ(3, a))\n\nδ ({1, 2, 3}, a) =\n\nE(δ(3, a))\nE(δ(r, b))\n\nr∈{1,3}\n\n= {2} ∪ ∅\n= {2}\n[\nδ ({2, 3}, a) =\n\nE(δ(r, a))\n\n= E(δ(1, a) ∪ E(δ(2, a))∪\n\n= E(δ(1, b)) ∪ E(δ(3, b))\n\n0\n\n[\nr∈{1,2,3}\n\n= ∅ ∪ {1, 3}\n= {1, 3}\n[\nδ ({1, 3}, b) =\n\nE(δ(r, b))\n\n= {3} ∪ ∅\n\nr∈{1,3}\n\n0\n\n[\nr∈{2,3}\n\n= ∅ ∪ {2, 3} ∪ {1, 3}\n= {1, 2, 3}\n[\nδ ({1, 2, 3}, b) =\nE(δ(r, b))\n0\n\nr∈{1,2,3}\n\n= E(δ(1, b) ∪ E(δ(2, b))∪\nE(δ(r, a))\n\nE(δ(3, b))\n\nr∈{2,3}\n\n= {2} ∪ {3} ∪ ∅\n\n= E(δ(2, a)) ∪ E(δ(3, a))\n\n= {2, 3}\n\n= {2, 3} ∪ {1, 3}\n= {1, 2, 3}\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nRecall the transition function of M\na\n∅\n∅\n{2, 3}\n{1, 3}\n{2, 3}\n{1, 3}\n{1, 2, 3}\n{1, 2, 3}\n\n∅\n{1}\n{2}\n{3}\n{1, 2}\n{1, 3}\n{2, 3}\n{1, 2, 3}\n\nb\n∅\n{2}\n{3}\n∅\n{2, 3}\n{2}\n{3}\n{2, 3}\n\nThe state diagram of M\na\na, b\n\nb\n{1}\n\nφ\n\n{2}\na, b\n\nb\n\nb\n\n{1,2}\n\na\n\nb\n\na\n{3}\n\na\n\n{1,3}\n\na\n\n{2,3}\n\n{1,2,3}\nb\n\nb\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\na\n\n\fClosure Under Union Operation\nN1\n\nN\n\nε\n\nε\nN2\n\nN1 recognizes a regular language A\nN2 recognizes a regular language B\nN recognizes A ∪ B (A ∪ B is regular)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\n\nLet N1 = (Q1 , Σ, δ1 , q1 , F1 ) recognizes A1 .\nLet N2 = (Q2 , Σ, δ2 , q2 , F2 ) recognizes A2 .\nTo construct N = (Q, Σ, δ, q0 , F ) to recognizes A1 ∪ A2 :\n1\n2\n3\n4\n\nQ = {q0 } ∪ Q1 ∪ Q2\nThe state q0 is the start state of N\nThe set of accept state F = F1 ∪ F2\nδ is given by\n\nδ1 (q, a) q ∈ Q1\n\n\n\nδ (q, a) q ∈ Q\n2\n2\nδ(q, a) =\n\n{q\n,\nq\n}\nq\n=\nq\nand a = ε\n1\n2\n0\n\n\n\n∅\nq = q0 and a 6= ε\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\n\nGiven state diagrams of finite-state machines N1 and N2\nTo draw a state diagram of a new machine N where\nL(N ) = L(N1 ) ∪ L(N2 ):\n1\n2\n3\n4\n\nDraw the state diagram of N1 on the top half\nDraw the state diagram of N2 on the bottom half\nAdd a new start state\nAdd ε transitions from the new start state to the start states\nof N1 and N2 , respectively\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nDraw N1 on the top half\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nDraw N2 on the bottom half\nN1\n\nN2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nAdd new start state\nN1\n\nN2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nAdd ε transitions\nN\n\nN1\nε\n\nε\n\nN2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\nLet N1 recognizes A and N2 recognizes B\nGiven a string w, how do we know whether w ∈ AB?\nRecall the definition of AB (A concatenated by B)\nAB = {xy | x ∈ A and y ∈ B}\nFor w to be in AB, w must be divided into two strings x and\ny where w = xy such that x ∈ A and y ∈ B\nIf x ∈ A, x ∈ L(N1 )\nSince x ∈ L(N1 ), by simulating N1 on input x, the simulation\nwill end in an accept state of N1 (N1 accepts x)\n\nBut if x 6∈ A, simulation will end in a non-accept state of N1\nIf y ∈ B, y ∈ L(N2 )\nSince y ∈ L(N2 ), by simulating N2 on input y, the simulation\nwill end in an accept state of N2 (N2 accepts y)\n\nBut if y 6∈ B, simulation will end in a non-accept state of N2\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\nN1\n\nN2\n\nN\n\nε\nε\nε\n\nN1 recognizes a regular language A\nN2 recognizes a regular language B\nN recognizes AB (AB is regular)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nLet N1 = (Q1 , Σ, δ1 , q1 , F1 ) recognizes A1 .\nLet N2 = (Q2 , Σ, δ2 , q2 , F2 ) recognizes A2 .\nTo construct N = (Q, Σ, δ, q0 , F ) to recognizes A1 ◦ A2 :\n1\n2\n3\n4\n\nQ = Q1 ∪ Q2\nThe state q1 is the start state of N\nThe set of accept state F = F2\nδ is given by\n\nδ1 (q, a)\nq ∈ Q1 and q 6∈ F1\n\n\n\nδ (q, a)\nq\n∈ Q2 and a 6= ε\n2\nδ(q, a) =\n\nδ1 (q, a) ∪ {q2 } q ∈ F1 and a = ε\n\n\n\nδ2 (q, a)\nq ∈ Q2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nGiven state diagrams of finite-state machines N1 and N2\nTo draw a state diagram of a new machine N where\nL(N ) = L(N1 ) ◦ L(N2 ):\n1\n2\n3\n\n4\n\nDraw the state diagram of N1 on the left side\nDraw the state diagram of N2 on the right side\nFor every accept state of N1 , add the ε transition to the start\nstate of N2\nChange all accept states of N1 to non-accept states\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nDraw the state diagram of N1 on the left side\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nDraw the state diagram of N2 on the right side\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nN2\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nε from accept states of N1 to start state of N2\nN1\n\nN2\nε\nε\nε\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nAccept states of N1 to non-accept states\nN\n\nN1\n\nN2\nε\nε\nε\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\nStar operator is similar to concatenation except that it can be\nconcatenated any number of times:\nA∗ = {x1 x2 x3 . . . xk | k ≥ 0 and xi ∈ A}\nand\nε ∈ A∗\nN1\n\nfor any language A\nN\nε\nε\nε\n\nN1 recognizes a regular language A\nN recognizes A∗ (A∗ is regular)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nLet N1 = (Q1 , Σ, δ1 , q1 , F1 ) recognizes A1 .\nTo construct N = (Q, Σ, δ, q0 , F ) to recognizes A∗1 :\n1\n2\n3\n4\n\nQ = {q0 } ∪ Q1\nThe state q0 is the start state of N\nThe set of accept state F = {q0 } ∪ F1\nδ is given by\n\n\nδ1 (q, a)\nq ∈ Q1 and q 6∈ F1\n\n\n\n\n\nq ∈ F1 and a 6= ε\nδ1 (q, a)\nδ(q, a) = δ1 (q, a) ∪ {q1 } q ∈ F1 and a = ε\n\n\n\n{q1 }\nq = q0 and a = ε\n\n\n\n∅\nq = q0 and a 6∈ ε\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nGiven state diagrams of finite-state machines N1\nTo draw a state diagram of a new machine N where\nL(N ) = L(N1 )∗ :\n1\n2\n3\n\n4\n\nDraw the state diagram of N1\nAdd a new start state and make it an accept state\nAdd ε transition from the new start state to the start state of\nN1\nFor each original accept state of N1 , add ε transition to the\noriginal start state of N1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nDraw the state diagram of N1\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nAdd a new start state and make it an accept state\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nAdd ε from thew new start state to the original start state of\nN1\nN1\nε\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nFor each original accept state of N1 , add ε transition to the\noriginal start state of N1\nN\n\nN1\nε\nε\nε\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fConclusions\n\nA Nondeterministic Finite Automata (NFA) has an equivalent\nDeterministic Finite Automata (DFA)\nThe algorithm how to convert from an NFA N to an\nequivalent DFA D where L(N ) = L(D) has been discussed\n\nThe set of all regular languages is closed under union,\nconcatenation, and star operations:\nIf A and B are regular languages, A ∪ B is a regular language\nIf A and B are regular languages, AB (A ◦ B) is a regular\nlanguage\nIf A is a regular language, A∗ is a regular language\n\nThe proof process also gives us an algorithm how to construct\nDFAs\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\f","Comments":[],"label":[[134,167,"Concept"],[282,315,"Concept"],[317,320,"Concept"],[407,411,"Concept"],[506,510,"Concept"],[666,669,"Concept"],[1245,1249,"Concept"],[1457,1460,"Concept"],[1676,1680,"Concept"],[1909,1913,"Concept"],[2152,2156,"Concept"],[2414,2418,"Concept"],[2699,2703,"Concept"],[3302,3306,"Concept"],[4726,4759,"Concept"],[4762,4795,"Concept"],[5078,5081,"Concept"],[5702,5705,"Concept"],[5715,5718,"Concept"],[5777,5780,"Concept"],[5812,5815,"Concept"],[5889,5892,"Concept"],[6013,6016,"Concept"],[6113,6116,"Concept"],[6671,6674,"Concept"],[6692,6725,"Concept"],[6810,6813,"Concept"],[7191,7194,"Concept"],[7690,7693,"Concept"],[7933,7936,"Concept"],[8074,8077,"Concept"],[9514,9517,"Concept"],[10064,10067,"Concept"],[10094,10097,"Concept"],[10508,10511,"Concept"],[11206,11209,"Concept"],[11361,11364,"Concept"],[13380,13395,"Concept"],[13497,13498,"Concept"],[13504,13505,"Concept"],[13602,13617,"Concept"],[13770,13771,"Concept"],[13796,13797,"Concept"],[13801,13803,"Concept"],[13874,13875,"Concept"],[14090,14105,"Concept"],[14227,14228,"Concept"],[14535,14550,"Concept"],[14661,14676,"Concept"],[14794,14809,"Concept"],[14920,14935,"Concept"],[15052,15075,"Concept"],[15818,15841,"Concept"],[16044,16067,"Concept"],[16550,16573,"Concept"],[17020,17043,"Concept"],[17177,17200,"Concept"],[17339,17362,"Concept"],[17508,17531,"Concept"],[17673,17687,"Concept"],[17688,17701,"Concept"],[17716,17729,"Concept"],[17752,17764,"Concept"],[17787,17788,"Concept"],[17839,17840,"Concept"],[17922,17923,"Concept"],[17926,17927,"Concept"],[18022,18036,"Concept"],[18138,18139,"Concept"],[18513,18527,"Concept"],[18641,18642,"Concept"],[18974,18988,"Concept"],[19105,19119,"Concept"],[19257,19271,"Concept"],[19427,19441,"Concept"],[19629,19661,"Concept"],[19663,19666,"Concept"],[19759,19762,"Concept"],[19876,19881,"Concept"],[19883,19896,"Concept"],[19902,19917,"Concept"],[19955,19956,"Concept"],[20021,20022,"Concept"],[20077,20078,"Concept"]]}
{"id":294,"text":"11\n\nHow\nPrograms\n\nAre Managed\n\nCS\/COE 0449\nIntroduction to\nSystems Software\n\nLuis Oliveira\n(with content borrowed from wilkie and Vinicius Petrucci)\n\n\fWhere’s the Lie?\nAnd other operating systems questions.\n\n2\n\n\fOn the last episode…\n• Programs are loaded into memory by the\noperating system.\n• They have to exist in memory before they can\nbe executed.\n\nKernel Memory\nstack\nlibz.so .data\n\nlibz.so .text\n\n• Programs go through a lot of trouble to have\nall their data\/code in memory.\n\n.bss\n.data\n\n.text\n\n3\n\n3\n\n\fThe Lie\n• Programs are told that they are\nthe only things running…\n• The only things in memory…\n• We know that this is not true!\n• Operating Systems are big liars\ncrafting illusions.\n\n4\n\n\fThe Truth\n• In reality, many programs can be running at the same time.\n• Each program, when running, is typically called a process.\n▪ A multitasking OS is (a rather common) one that supports concurrent\nprocesses.\n\n• The OS must handle switching from one process to another.\n▪ Which processes get to run?\n▪ What if you have more processes than CPUs?\n▪ When do you switch from one to another?\n▪ What if one is more urgent??\n5\n\n\fMy process is one of method…\n• A process is an abstraction representing a single instance of a program.\n▪ An executable represents the initial state of a program and thus the process.\n▪ A program can be instantiated multiple times, if needed.\n▪ Each one would be a separate process… of the same program.\n▪ Note: A processor is the hardware unit that executes a process. (makes sense!!)\n\n• The Operating System defines what a process and its abstraction is.\n▪ There is an OS representation and metadata associated with a process.\n▪ The OS maintains two key lies:\n\n• The control flow (exclusive use of CPU): as defined by the code (this lecture)\n• The memory layout (exclusive use of memory): defined by executable\/code (next lecture)\n\n• We are focusing on the control flow, here.\n\n▪ How do we determine when a program runs? When does the lie… break down?\n6\n\n\fCPU Scheduling\nEeny Meeny Miney Moe\n\n7\n\n\fThe Reality\n• Let us say that we have a machine with four separate CPUs.\n▪ You could run four processes concurrently (at the same time) relatively easily.\n▪ What about the fifth?\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State:\nRegisters\n,\n\n8\n\n\fMultiplexing the CPU\n• Truth be told, we often have fewer resources than needed.\n▪ Sharing a common resource is called multiplexing.\n\n• Now, consider a machine with a single CPU.\n\nProcess\n\nstack\n.bss\n\n• We often want to run something in the foreground.\n\n▪ Word processor, web browser, minesweeper… whatever.\n\n.data\n\n• We still want some things running the background…\n\n.text\n\n• We need to switch from one process to another at\nparticular times.\n\nCPU State:\nRegisters\n,\n\n▪ Music player, virus scanner, chat client.\n\n▪ Yet… we have to keep the illusion that the program is\nuninterrupted…\n\nCPU\n\n9\n\n\fNaïve Campbell was great in The Craft (1996)\n• One way is to run processes sequentially (the naïve solution)\n▪ When one process ends… run the next.\n▪ Yet that’s not very flexible. (Stop your music player to open a PDF)\n• Humans are in the mix! We need computers to be useful to us.\n\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nMemory\nCPU\n\n10\n\n\fThe cruel passage of time\n• To multiplex the CPU, we quickly switch from process to process.\n• The OS retains\/restores the state (context) of the process.\n▪ The OS must store this as a form of process metadata in memory.\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nCPU State C:\nRegisters\n,\n\nCPU State D:\nRegisters\n,\n\nMemory\nCPU\n\n11\n\n\fThe Context Switch\n• When an Operating System goes from\none process to another, it performs a\ncontext switch.\n• This swaps out the CPU state of one\nprocess for the next one to run.\n1. Store registers (including stack\npointer and program counter) to\nmemory.\n2. Determine next process to run.\n3. Load those registers from memory.\nSwitch memory space. (see next lecture:\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nContext\n\nContext\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nvirtual memory)\n\n4. Jump to old program counter. Go!\n\nCPU\n\n12\n\n\fA deeper dive\n• When we pause a process… we store the state of registers (context)\nx86-64 (gas \/ AT&T syntax) – Process A\n\nContext (A)\n\nx86-64 (gas \/ AT&T syntax) – Process B\n\nCPU State\n\n13\n\n\fWhen is a good time to call you?\n• When should a program pause and let another one go?\n• When programs voluntarily pause, this is called cooperative\nscheduling.\n▪ They may give up control at convenient points such as system calls.\n\n• We often do not expect this, so modern Operating Systems forcibly\npause programs from time to time. Called preemptive scheduling.\n▪ Processes give up control when hardware interjects via an “interrupt”\n▪ How does this work?\n\n14\n\n\fRound Robin Scheduling\n• One method is to just cycle through each process each for equal time.\n▪ This is an element of “fairness” … each gets equal stake.\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nCPU State C:\nRegisters\n,\n\nCPU State D:\nRegisters\n,\n\nMemory\nCPU\n\n15\n\n\fProblems with “fairness”\n• Let’s say I want to play Doom Eternal\n▪ In round-robin, I give the video game 25% of my resources.\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nCPU State C:\nRegisters\n,\n\nCPU State D:\nRegisters\n,\n\nThis should get\nmore priority.\n\nCPU\n\n16\n\n\fI have priorities!\n• Round-Robin schedulers are fair; then we tweak to meet expectations.\n▪ How might we add a sense of “priority” to the scheduler?\n\n• Let’s look at a visualization of how processes are currently scheduled\nwith a round-robin scheme: (Doom gets only 25% of resources!) \n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nA\n\nA\nB\n\nB\n\nC\n50ms \/ 200ms = 25%\n\n17\n\n\fI have priorities!\n• Round-Robin schedulers are fair; then we tweak to meet expectations.\n▪ How might we add a sense of “priority” to the scheduler?\n\n• We could give some tasks a longer quantum.\n▪ A quantum is the amount of time a task is guaranteed to run.\n100ms\n\n50ms\n\n50ms\n\n50ms\n\n100ms\n\nA\nB\n\nC\n100ms \/ 250ms = 40%\n\n18\n\n\fI have priorities!\n• Round-Robin schedulers are fair; then we tweak to meet expectations.\n▪ How might we add a sense of “priority” to the scheduler?\n\n• We could increase the chance a specific task is scheduled.\n▪ Round-robin + priority: two queues, switch back and forth and round-robin\nwithin them.\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nA\nB\n\nC\n100ms \/ 200ms = 50%\n\n19\n\n\fI have priorities!\n• Round-Robin schedulers are fair; then we tweak to meet expectations.\n▪ How might we add a sense of “priority” to the scheduler?\n\n• We can then always do some sort of combination.\n▪ Hybrid approaches do seem very alluring. Hmm. The power of trade-offs.\n100ms\n\n50ms\n\n100ms\n\n50ms\n\nA\nB\n200ms \/ 300ms = 67%\n\n20\n\n\fIdeal circumstances: Human perception\n• The reality: (very quickly switching)\n100ms\n\n50ms\n\n100ms\n\n50ms\n\nA\nB\n\n• The illusion: (an ideal: perceived concurrency… no delay noticed)\n100ms\n\n50ms\n\n100ms\n\n50ms\n\nA\nB\n\n21\n\n\fThere is no optimal.\n• Like many of the topics in this course, there is no possible “best”.\n▪ That is, there is no way to perfectly schedule general processes.\n\n• Consider: It would be very lovely to schedule a process that handles\nsome user input, like a button press or a network request.\n▪ Perfect situation: the OS schedules the task that handles the button\nimmediately before the button is pressed. What luck!\n\n• However: You do not know when that button will be pressed.\n▪ Maybe it is a sensor, like for detecting a fire!\n• FIRE SEEMS IMPORTANT!! … and yet.\n\n• Moral of the story: humans being users make things very hard.\n\n22\n\n\fAgain, it is not magic.\n• But… wait… how does hardware stop a program?\n▪ For instance, when the quantum is up, how does the OS get control and\nperform the context switch?\n\n• Ah, the hardware has support for “being rude” which is called an\ninterrupt.\n▪ A programmable mechanism for asynchronously calling a function when a\nparticular type of error or signal is noticed.\n\n• Let’s take a look.\n\n23\n\n\fInterrupts\nIt’s rude… but necessary.\n\n24\n\n\fHow rude\n• An interrupt is an exceptional state that diverts execution from its\nnormal flow.\n▪ When issued by hardware, sometimes referred to as a hardware exception\n• For instance, a hardware timer or external event caused by a sensor.\n\n▪ When caused by a user process, sometimes referred to as a software trap\n• Divide-by-zero error, some floating-point exceptions, system calls.\n\n• We have seen these before!\n▪ System calls are a type of interrupt (software trap).\n▪ This is an intentional interrupt caused by a specific program instruction.\n• The program is “interrupted” while the OS performs a task.\n\n• We have also encountered them in our failures.\n▪ Segmentation \/ Protection \/ Page Faults are also interrupts. (trap? exception?)\n▪ These are (usually) unintentional interrupts caused by a generic instruction. 25\n\n\fHere are some typical UNIX\/Linux system calls:\nNumber\n\nName\n\nDescription\n\nread\n\nReads bytes from an open file.\n\nwrite\n\nWrites bytes to an open file.\n\nopen\n\nOpens a file and returns the file handle.\n\nclose\n\nCloses an open file.\n\nstat\n\nReturns metadata about a file.\n\nfork\n\nSpawns a copy of the current process.\n\nexecve\n\nLoads and then executes a program.\n\n26\n\n\fSystem calls\n• System calls: predictable, intentional interrupts at specific instructions.\n▪ Interrupts occurring at specific instructions are synchronous interrupts.\n\n• In x86-64, the program pauses at a\ninstruction, then resumes\nat the following instruction when the OS finishes the task\n▪ (… and the OS calls the\n\ninstruction)\n\n• Let’s take a deeper look.\n27\n\n\fHello, Hello World\nx86-64 (gas \/ AT&T syntax) - Application\n\nx86-64 (gas \/ AT&T syntax) - Kernel (main OS program)\n\nPre-registered to be called on syscall\nSaves CPU state\n\nA jump to the kernel\n\nPerforms action\nRestores state\n\nReturns to process\n\n28\n\n\fTick tock tick tock merrily sings the clock\n• A hardware timer can preempt (forcibly pause) a program at any time.\n▪ Interrupts that occur at any instruction are asynchronous interrupts.\n\n• In a preemptive operating system, a hardware timer is used to give a\nmaximum bound to how long a process runs.\n▪ Your operating system programs the timer such that it sends a signal at a\nregular interval.\n▪ Your operating system has a function that is called when such a signal is read.\n▪ That function will respond by invoking the scheduler and pausing the current\ntask and resuming or starting another.\n\n• Let’s look at the basic procedure an OS uses to program an interrupt.\n29\n\n\fProgramming interruption\n• On most hardware, there is a programmable table somewhere in\nmemory that, when written to, defines where code exist to handle\neach interrupt.\n• Every possible interrupt is given a number. Segmentation faults might\nbe interrupt 10. Timers might be interrupt 0. Et cetera.\n• When an interrupt occurs, based on its interrupt number, the\ncorresponding entry in a lookup table called an interrupt vector table\nor an interrupt descriptor table would be used to determine where in\nthe kernel to jump.\n30\n\n\fThe Interrupt Table\n#\n\nValue\n\n• The interrupt table is a simple table.\n\nDescription\nDivide by zero\n\n• Fun Fact: It is often located at\naddress 0x0 in memory!\n\nOverflow\nDouble Fault\nGeneral Protection Fault\nPage Fault\nStack Fault\nAlignment Error\n...\nTimer Signal\nNetwork Device Signal\n\n▪ So, operating system kernels can’t\nexactly always treat zero as an invalid\naddress…\n\n• When a process triggers a listed\ninterrupt or external hardware sends\na signal to the interrupt controller…\n▪ the CPU jumps to the given address.\n\nAudio Device Signal\n\n31\n\n\fAh! There art thee ol’ interrupt!\n• Let’s take a look at interrupt handling…\nx86-64 (gas \/ AT&T syntax) – Process B\nA\n\nContext (A)\n\nCPU State\n\nx86-64 (gas \/ AT&T syntax) – Kernel\n\n• An interrupt is the likely\ncause of our prior\ninterruption.\n• The interrupt handler is the\ncode that handles context\nswitching and scheduling\n32\n\n\fOverview\n• Interrupts can be categorized in several ways:\n▪ They can occur outside of our program:\nhardware exceptions\n▪ They can occur on an instruction in our program: software trap\n▪ They can occur at any time:\nasynchronous interrupts\n▪ They can occur at specific times:\nsynchronous interrupts\n\n• Interrupts are what allow operating systems to function!\n▪ When you press a key on your keyboard.\n▪ When you receive a packet on the network.\n▪ When your sound card wants the next second of audio.\n▪ When you divide by zero…\n• To then mercilessly murder your process.\n\n33\n\n\f","Comments":[],"label":[[819,826,"Concept"],[887,907,"Concept"],[931,940,"Concept"],[950,957,"Concept"],[978,987,"Concept"],[1024,1033,"Concept"],[1059,1065,"Concept"],[1125,1132,"Concept"],[1155,1162,"Concept"],[1231,1241,"Concept"],[1297,1304,"Concept"],[1396,1403,"Concept"],[1436,1445,"Concept"],[1483,1490,"Concept"],[1547,1554,"Concept"],[1615,1623,"Concept"],[1642,1649,"Concept"],[1691,1703,"Concept"],[1772,1785,"Concept"],[1980,1994,"Concept"],[2115,2124,"Concept"],[2328,2340,"Concept"],[2447,2459,"Concept"],[2508,2515,"Concept"],[2517,2522,"Concept"],[2717,2723,"Concept"],[2733,2740,"Concept"],[2989,2998,"Concept"],[3044,3051,"Concept"],[3355,3364,"Concept"],[3385,3391,"Concept"],[3397,3404,"Concept"],[3408,3415,"Concept"],[3470,3477,"Concept"],[3537,3543,"Concept"],[3559,3564,"Concept"],[3756,3759,"Concept"],[3770,3784,"Concept"],[3826,3833,"Concept"],[3860,3874,"Concept"],[3914,3921,"Concept"],[4041,4048,"Concept"],[4094,4100,"Concept"],[4142,4147,"Concept"],[4351,4358,"Concept"],[4431,4438,"Concept"],[4484,4491,"Concept"],[4560,4567,"Concept"],[4605,4613,"Concept"],[4648,4670,"Concept"],[4728,4740,"Concept"],[4852,4873,"Concept"],[4877,4886,"Concept"],[4936,4945,"Concept"],[4975,4997,"Concept"],[5041,5048,"Concept"],[5445,5456,"Concept"],[5792,5814,"Concept"],[5909,5918,"Concept"],[5960,5969,"Concept"],[5984,5993,"Concept"],[6001,6012,"Concept"],[6153,6175,"Concept"],[6270,6279,"Concept"],[6318,6325,"Concept"],[6331,6338,"Concept"],[6476,6498,"Concept"],[6593,6602,"Concept"],[6655,6664,"Concept"],[6668,6679,"Concept"],[6704,6710,"Concept"],[6730,6741,"Concept"],[6845,6867,"Concept"],[6962,6971,"Concept"],[7220,7229,"Concept"],[7498,7506,"Concept"],[7515,7524,"Concept"],[7566,7574,"Concept"],[7577,7584,"Concept"],[7685,7694,"Concept"],[8097,8104,"Concept"],[8156,8170,"Concept"],[8240,8249,"Concept"],[8398,8408,"Concept"],[8455,8464,"Concept"],[8588,8606,"Concept"],[8703,8710,"Concept"],[8739,8752,"Concept"],[8809,8821,"Concept"],[8855,8867,"Concept"],[8882,8891,"Concept"],[8893,8906,"Concept"],[8934,8943,"Concept"],[8992,8999,"Concept"],[9004,9015,"Concept"],[9127,9138,"Concept"],[9148,9158,"Concept"],[9215,9225,"Concept"],[9297,9309,"Concept"],[9506,9514,"Concept"],[9565,9572,"Concept"],[9624,9636,"Concept"],[9639,9651,"Concept"],[9678,9688,"Concept"],[9716,9727,"Concept"],[9767,9789,"Concept"],[10287,10301,"Concept"],[10306,10313,"Concept"],[10356,10366,"Concept"],[10401,10424,"Concept"],[10434,10461,"Concept"],[10465,10479,"Concept"],[10526,10533,"Concept"],[10761,10770,"Concept"],[10896,10905,"Concept"],[10924,10936,"Concept"],[11070,11079,"Concept"],[11098,11107,"Concept"],[11156,11165,"Concept"],[11186,11195,"Concept"],[11220,11229,"Concept"],[11251,11260,"Concept"],[11321,11330,"Concept"],[11350,11359,"Concept"],[11442,11451,"Concept"],[11474,11483,"Concept"],[11819,11826,"Concept"],[11845,11854,"Concept"],[11898,11907,"Concept"],[12008,12017,"Concept"],[12042,12051,"Concept"],[12170,12179,"Concept"],[12213,12225,"Concept"],[12233,12242,"Concept"],[12276,12293,"Concept"],[12298,12308,"Concept"],[12325,12335,"Concept"],[12413,12432,"Concept"],[12484,12497,"Concept"],[12528,12551,"Concept"],[12588,12610,"Concept"],[12614,12624,"Concept"]]}
{"id":295,"text":"Turing Machine 02\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine Example\n\nDesign a Turing machine that recognizes the language B\nwhere\nB = {w#w | w ∈ Σ∗ }\nOn input string w:\n1\n\n2\n\nZig-zag across the tape to corresponding positions on either\nside of the # symbol to check whether those positions contain\nthe same symbol. If they do not, or if no # is found, reject.\nCross off symbols as they are checked to keep track of which\nsymbols correspond.\nWhen all symbols to the left of the # have been crossed off,\ncheck for any remaining symbols to the right of the #. If any\nsymbols remain, reject; otherwise, accept.\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine M1\nA Turing machine that decides B = {w#w | w ∈ Σ∗ }.\n\n1\n\nx,\nR\n\nq1\n\n0\n\nR\nx,\n\n→\n\n→\n\n#→R\n\n0, 1 → R\n\nq2\n#→R\n\nx→R\n\nx→R\n\nq8\nt\n\nq4\n\n→R\n\n#→R\n\nqaccept\n\nq5\n\n1\n\nL\nx,\n\n→\n\n→\n\nx,\n\nL\n\n0\n\n0, 1, x → L\n\nq6\n#→L\nx→R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nq7\n\n0, 1 → R\n\nq3\n\n0, 1 → L\n\nTuring Machine 02\n\nx→R\n\n\fTuring Machine M1\nΣ = {0, 1, #}\nΓ = {0, 1, #, x, t}\n1 → x, R\nRead 1, write x, and move the tape head to the right direction\n\n#→R\nA shorthand notation for # → #, R\nRead #, write #, and move the tape head to the right direction\n\n0, 1 → L\nA shorthand notation representing two transitions:\n0 → L which is 0 → 0, L\n1 → L which is 1 → 1, L\n\nqreject is omitted\nAll missing exiting arrows go to qreject\nAssume that it moves the tape head to the right direction\nbefore entering qreject without writing a symbol (writing the\nsame symbol it read)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine M1\nComputing 01#01\n\n1\n\nx,\nR\n\nq1\n\n0, 1 → R\n\nR\n\n0\n\nx,\n\n→\n\n→\n\n#→R\n\nq2\n#→R\n\nx→R\n\nx→R\n\nq8\nt\n\nq4\n\n0, 1 → R\n\nq3\n\n→R\n\n#→R\n\nqaccept\n\nq5\n\n1\n\nL\nx,\n\n→\n\n→\n\nx,\nL\n\n0\n\n0, 1, x → L\n\nq6\n#→L\nx→R\n\nq7\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0, 1 → L\n\nTuring Machine 02\n\nx→R\n\nq1 01#01\nxq2 1#01\nx1q2 #01\nx1#q4 01\nx1q6 #x1\nxq7 1#x1\nq7 x1#x1\nxq1 1#x1\nxxq3 #x1\nxx#q5 x1\nxx#xq5 1\nxx#q6 xx\nxxq6 #xx\nxq7 x#xx\nxxq1 #xx\nxx#q8 xx\nxx#xq8 x\nxx#xxq8 t\nxx#xxtqaccept\n\n\fTuring Machine M1\nComputing 01#10\n\n1\n\nx,\nR\n\nq1\n\n0, 1 → R\n\nR\n\n0\n\nx,\n\n→\n\n→\n\n#→R\n\nq2\n#→R\n\nx→R\n\nx→R\n\nq8\nt\n\nq4\n\n0, 1 → R\n\nq3\n\n→R\n\n#→R\n\nqaccept\n\nq5\n\n1\n\nL\nx,\n\n→\n\n→\n\nx,\nL\n\n0\n\n0, 1, x → L\n\nq6\n#→L\nx→R\n\nq7\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0, 1 → L\n\nTuring Machine 02\n\nx→R\n\nq1 01#10\nxq2 1#10\nx1q2 #10\nx1#q4 10\nx1#1qreject 0\n\n\fTuring Machine M1\nComputing 01 (no # symbol)\n\n1\n\nx,\nR\n\nq1\n\n0, 1 → R\n\nR\n\n0\n\nx,\n\n→\n\n→\n\n#→R\n\nq2\n#→R\n\nx→R\n\nx→R\n\nq8\nt\n\nq4\n\n0, 1 → R\n\nq3\n\n→R\n\n#→R\n\nqaccept\n\nq5\n\n1\n\nL\nx,\n\n→\n\n→\n\nx,\nL\n\n0\n\n0, 1, x → L\n\nq6\n#→L\nx→R\n\nq7\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0, 1 → L\n\nTuring Machine 02\n\nx→R\n\nq1 01\nxq2 1\nx1q2 t\nx1tqreject\n\n\fTuring Machine Example\n\nDesign a Turing machine that recognizes the language A\nwhere\nn\nA = {02 | n ≥ 0}\nOn input string w:\n1\n2\n3\n\n4\n5\n\nSweep left to right across the tape, crossing off every other 0\nIf in stage 1 the tape contained a single 0, accept\nIf in stage 1 the tape contained more than a single 0 and the\nnumber of 0s was odd, reject\nReturn the head to the left-hand end of the tape\nGo to stage 1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fMoving the Tape Head Back\nSuppose we want to move the tape head back to the left most\nend of the tape\nNeed a state to do that\n0, 1, x → L\n\nThis will result in an infinite loop\n\nRecall that if the tape head is at the left-most square and the\ntransition is L, it will stay at the same place\nThere is no signal telling a TM that its tape head is currently\nat the left-most square\n\nThe trick is to mark the left-most symbol (depending on Γ)\nTurn 0 or 1 to t\nTurn 0 to 0̇ or x\nTurn 1 to 1̇ or t\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine M2\nn\n\nA Turing machine that decides A = {02 | n ≥ 0}.\n0→L\nx→L\n\n→\nt\n\n→R\nx→R\n\n0 → x, R\n\nt\n\nt\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n→R\n\nq3\n\n0→R\n\nqaccept\n\nt\n\nx→R\n\nL\n\nq2\n\n0 → t, R\n\nqreject\n\n→\n\nx→R\nq1\n\nt\n\nR\n\nq5\n\n→R\n\nTuring Machine 02\n\n0 → x, R\n\nq4\n\nx→R\n\n\fTuring Machine M2\nComputing 0000\nq1 0000\nq2 000\ntxq3 00\ntx0q4 0\ntx0xq3 t\ntx0q5 x\ntxq5 0x\ntq5 x0x\nq5 tx0x\ntq2 x0x\ntxq2 0x\ntxxq3 x\ntxxxq3 t\ntxxq5 x\ntxq5 xx\ntq5 xxx\nq5 txxx\ntq2 xxx\ntxq2 xx\ntxxq2 x\ntxxxq2 t\ntxxxtqaccept\nt\n\n0→L\nx→L\n\n→\nt\n\n→R\nx→R\n\n→R\n\nqaccept\n\nt\n\nq3\n\n0 → x, R\n\nt\n\nx→R\n\nL\n\nq2\n\n0 → t, R\n\nt\n\nqreject\n\n→\n\nx→R\nq1\n\nt\n\nR\n\nq5\n\n0→R\n\n0 → x, R\n\nq4\n\nx→R\n\n→R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine M2\n\nComputing 000\n0→L\nx→L\n\n→\nt\n\n→R\nx→R\n\n→R\n\nqaccept\n\nt\n\nq3\n\n0 → x, R\n\nt\n\nx→R\n\nL\n\nq2\n\n0 → t, R\n\nt\n\nqreject\n\n→\n\nx→R\nq1\n\nt\n\nR\n\nq5\n\n0→R\n\n0 → x, R\n\nq4\n\nx→R\n\n→R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nq1 000\nq2 00\ntxq3 0\ntx0q4 t\ntx0tqreject\nt\n\nTuring Machine 02\n\n\fDesigning a TM\nDesigning a TM in a form of a state diagram is hard\nNeed to keep in mind out the content of the tape\nNeed to worry about moving tape head\n\nBut for a simple problem, it is not that bad\nLet’s create a TM that shift all symbols on the tape to the\nright by one square by inserting the blank symbol at the\nleft-most square and move the tape head back to the\nleft-most square\nLet Σ = {0, 1} and Γ = {0, 1, t}\nHere are some input\/output (on the tape)\nInput\nOutput\n01101 t01101\n0\nt0\n111\nt111\nε\nε\nNote that this TM always accepts all strings over Σ\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fDesigning a TM\nSolution\n0→R\n\nq1\n0 → t, R\n1 → 0, R\n\n0 → 1, R\n\nq0\n\nt\n\n1 → t, R\n\n→ 0, L\n0, 1 → L\n\nq3\nt\n\n→ 1, L\n\nt\n\n→L\nqaccept\n\nq2\n\n1→R\nt\n\n→L\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\f","Comments":[],"label":[[0,14,"Concept"],[112,126,"Concept"],[132,146,"Concept"],[165,179,"Concept"],[742,756,"Concept"],[762,776,"Concept"],[802,809,"Concept"],[1050,1064,"Concept"],[1075,1089,"Concept"],[1200,1203,"Concept"],[1362,1367,"Concept"],[1386,1391,"Concept"],[1659,1673,"Concept"],[1679,1693,"Concept"],[1932,1946,"Concept"],[2135,2149,"Concept"],[2388,2402,"Concept"],[2464,2478,"Concept"],[2728,2742,"Concept"],[2784,2798,"Concept"],[2817,2831,"Concept"],[3237,3251,"Concept"],[3792,3806,"Concept"],[3812,3826,"Concept"],[3835,3849,"Concept"],[4047,4061,"Concept"],[4086,4100,"Concept"],[4490,4504,"Concept"],[4510,4524,"Concept"],[4771,4785,"Concept"],[4803,4805,"Concept"],[4818,4820,"Concept"],[5005,5007,"Concept"],[5393,5407,"Concept"],[5599,5613,"Concept"]]}
