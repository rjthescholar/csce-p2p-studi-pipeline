{"id":290, "segment": "dev_set", "course": "cs1550", "lec": "lec23","text":"Introduction to Operating Systems\nCS 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne ©2013)\n\n\fAnnouncements\n• Upcoming deadlines:\n• Homework 11: due on 4\/18\n• Project 3: Late due date on 4\/13\n• Late penalty waived\n\n• Lab 4: due on 4\/15\n• Quiz 3: due on 4\/15\n• Homework 12: due on 4\/25\n• Lab 5: due on 5\/2\n• Project 4 and Quiz 4: due on 5\/2\n• Bonus Homework: due on 5\/2\n• Course Post-Test: due on 5\/2\nCS 1550 – Operating Systems – Sherif Khattab\n\n2\n\n\fMuddiest Points (1\/2)\n• when is the parity checked to see if there is a bit error\n• a little confused about parity example\n• How to flip the correct bits back that were changed with\nparity?\n• What is parity used for\n• ECC\n• What things move how using what in the disk\n• disk request time delay factors\n•\n\ntransfer time\/rotating time\/seek time\n\n• I feel like rotational delay and actual transfer time are\noverlapped. The sector is spending time to rotate to the\nhead, and at the same time, the head is rotating to find\nthat sector. Are they moving towards each other at the\nsame time?\nCS 1550 – Operating Systems – Sherif Khattab\n\n3\n\n\fDisk drive structure\nhead\nsector\n\nplatter\ntrack\ncylinder\n\nsurfaces\n\nspindle\n\nactuator\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n4\n\n\fMuddiest Points (2\/2)\n• In the last top hat question, why the page table gets\nsmaller if the page frames are larger. I understand\nthat would mean less entries, but wouldn't each entry\nwould be larger, making the overall table the same\nsize?\n• What are RAIDs for?\n\n• Does RAID4 have any advantages over RAID5?\n• All of it, bro\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n5\n\n\fProblem of the Day – Part 1\n• How does a file system handle errors?\n• Answer: Defense in Depth\n• multiple layers of error detection\/correction\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n6\n\n\fWhen good disks go bad…\nDisks have defects\nIn 3M+ sectors, this isn’t surprising!\n\nECC helps with errors, but sometimes this isn’t enough\n\nDisks keep spare sectors (normally unused) and remap bad\nsectors into these spares\nIf there’s time, the whole track could be reordered…\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n7\n\n\fRAIDs, RAIDs, and more RAIDs\nstrip\n\nstrip\n\nStripe\nRAID 0\n(Redundant Array of Inexpensive Disks\n\nRAID 1\n(Mirrored copies)\n\nRAID 4\n(Striped with parity)\n\nRAID 5\n(Parity rotates through disks)\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n8\n\n\fBacking up a file system\n• A file system to be dumped\n• Squares are directories, circles are files\n• Shaded items, modified since last dump\n• Each directory & file labeled by i-node number\n\nFile that has\nnot changed\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n9\n\n\fBitmaps used in a file system dump\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n10\n\n\fChecking the file system for consistency\nConsistent\n\nMissing (“lost”) block\n\nDuplicate block in free list\n\nDuplicate block in two files\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n11\n\n\fProblem of the Day – Part 2\n• How does a file system hide disk access delays?\n• Answer: Caching\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n12\n\n\fFile block cache data structures\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n13\n\n\fLog-structured file systems\n• Trends in disk & memory\n• Faster CPUs\n• Larger memories\n\n• Result\n• More memory -> disk caches can also be larger\n• Increasing number of read requests can come from cache\n• Thus, most disk accesses will be writes\n\n• LFS structures entire disk as a log\n• All writes initially buffered in memory\n• Periodically write these to the end of the disk log\n• When file opened, locate i-node, then find blocks\n\n• Issue: what happens when blocks are deleted?\nCS 1550 – Operating Systems – Sherif Khattab\n\n14\n\n\fLog Structured File System\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n15\n\n\fLog Structured File System\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n16\n\n\fFlash File System\n\nWear Leveling\n\nCount total writes per flash sector and attempt to\nbalance across the whole disk\nCS 1550 – Operating Systems – Sherif Khattab\n\n17\n\n\fWear leveling for SSDs\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n18\n\n\fDisk block size\n• Dark line (left hand scale) gives data rate of a disk\n\n• Dotted line (right hand scale) gives disk space\nefficiency\n• All files 2KB\n\nBlock size\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n19\n\n\fProblem of the Day – Part 3\n• How do device drivers program I\/O devices?\n• Answer: three methods\n• polling\n• Interrupts\n• DMA\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n20\n\n\fHow are I\/O devices connected?\n• Single-bus\n• All memory accesses go\nover a shared bus\n• I\/O and RAM accesses\ncompete for bandwidth\n\nCPU\n\nMemory\n\nI\/O\n\nCPU\n\nMemory\n\nI\/O\n\n• Dual-bus\n• RAM access over highspeed bus\n• I\/O access over lower-speed\nbus\n• Less competition\n• More hardware (more\nexpensive…)\n\nThis port allows I\/O devices\naccess into memory\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n21\n\n\fMemory-Mapped vs. separate I\/O Space\n\nMemory\n0xFFF…\n\nI\/O ports\n\n0\n\nSeparate\nI\/O & memory\nspace\n\nMemory-mapped I\/O\n\nCS 1550 – Operating Systems – Sherif Khattab\n\nHybrid: both\nmemory-mapped &\nseparate spaces\n\n22\n\n\fExample: Dynamic Frequency on XScale\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n23\n\n\fProgrammed I\/O example: printing a page\n\nUser\n\nPrinted\npage\n\nKernel\n\nABCD\nEFGH\n\nPrinted\npage\nABCD\nEFGH\n\nA\n\nABCD\nEFGH\n\nCS 1550 – Operating Systems – Sherif Khattab\n\nPrinted\npage\nABCD\nEFGH\n\nAB\n\nABCD\nEFGH\n\n24\n\n\fPolling\n\ncopy_from_user (buffer, p, count); \/\/ copy into kernel buffer\nfor (j = 0; j < count; j++) {\n\/\/ loop for each char\nwhile (*printer_status_reg != READY)\n;\n\/\/ wait for printer to be ready\n*printer_data_reg = p[j]; \/\/ output a single character\n}\nreturn_to_user();\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n25\n\n\fHardware’s view of interrupts\n\nBus\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n26\n\n\fInterrupt-driven I\/O\ncopy_from_user (buffer, p, count);\nj = 0;\nenable_interrupts();\nwhile (*printer_status_reg != READY)\n;\n*printer_data_reg = p[0];\nscheduler(); \/\/ and block user\nif (count == 0) {\nunblock_user();\n} else {\nj++;\n*printer_data_reg = p[j];\ncount--;\n}\nacknowledge_interrupt();\nreturn_from_interrupt();\n\nCode run by system call\n\nCode run at interrupt time\n(Interrupt handler)\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n27\n\n\f","Comments":[],"label":[[539,545,"Concept"],[611,617,"Concept"],[685,691,"Concept"],[703,709,"Concept"],[721,724,"Concept"],[766,770,"Concept"],[808,821,"Concept"],[822,835,"Concept"],[836,845,"Concept"],[861,877,"Concept"],[889,902,"Concept"],[1137,1147,"Concept"],[1158,1162,"Concept"],[1163,1169,"Concept"],[1171,1178,"Concept"],[1179,1184,"Concept"],[1185,1193,"Concept"],[1195,1203,"Concept"],[1205,1212,"Concept"],[1214,1222,"Concept"],[1336,1346,"Concept"],[1367,1378,"Concept"],[1526,1531,"Concept"],[1545,1550,"Concept"],[1576,1581,"Concept"],[1691,1703,"Concept"],[1767,1782,"Concept"],[1855,1860,"Concept"],[1869,1874,"Concept"],[1895,1902,"Concept"],[1928,1931,"Concept"],[1984,1989,"Concept"],[2001,2008,"Concept"],[2041,2048,"Concept"],[2094,2099,"Concept"],[2171,2176,"Concept"],[2178,2183,"Concept"],[2194,2199,"Concept"],[2200,2205,"Concept"],[2207,2212,"Concept"],[2214,2220,"Concept"],[2221,2227,"Concept"],[2229,2265,"Concept"],[2267,2273,"Concept"],[2293,2299,"Concept"],[2301,2308,"Concept"],[2314,2320,"Concept"],[2323,2329,"Concept"],[2331,2337,"Concept"],[2354,2359,"Concept"],[2425,2436,"Concept"],[2441,2452,"Concept"],[2459,2465,"Concept"],[2480,2491,"Concept"],[2505,2510,"Concept"],[2547,2551,"Concept"],[2559,2568,"Concept"],[2571,2575,"Concept"],[2587,2594,"Concept"],[2602,2606,"Concept"],[2679,2686,"Concept"],[2697,2713,"Concept"],[2780,2790,"Concept"],[2795,2806,"Concept"],[2807,2817,"Concept"],[2836,2841,"Concept"],[2853,2858,"Concept"],[2862,2871,"Concept"],[2883,2888,"Concept"],[2896,2901,"Concept"],[2995,3006,"Concept"],[3012,3030,"Concept"],[3042,3049,"Concept"],[3102,3106,"Concept"],[3107,3112,"Concept"],[3113,3118,"Concept"],[3187,3214,"Concept"],[3300,3304,"Concept"],[3305,3311,"Concept"],[3382,3387,"Concept"],[3433,3447,"Concept"],[3455,3459,"Concept"],[3465,3468,"Concept"],[3556,3564,"Concept"],[3572,3576,"Concept"],[3592,3598,"Concept"],[3610,3616,"Concept"],[3645,3651,"Concept"],[3716,3742,"Concept"],[3795,3821,"Concept"],[3874,3891,"Concept"],[3893,3906,"Concept"],[3931,3943,"Concept"],[3984,3988,"Concept"],[4040,4053,"Concept"],[4058,4062,"Concept"],[4115,4119,"Concept"],[4120,4125,"Concept"],[4182,4186,"Concept"],[4227,4231,"Concept"],[4366,4381,"Concept"],[4389,4400,"Concept"],[4428,4435,"Concept"],[4438,4448,"Concept"],[4451,4454,"Concept"],[4515,4526,"Concept"],[4540,4550,"Concept"],[4590,4593,"Concept"],[4678,4686,"Concept"],[4907,4920,"Concept"],[5003,5020,"Concept"],[5081,5094,"Concept"],[5416,5423,"Concept"],[5756,5766,"Concept"],[5768,5771,"Concept"],[5824,5844,"Concept"],[6152,6163,"Concept"],[6177,6186,"Concept"],[6193,6210,"Concept"]]}
{"id":291, "segment": "dev_set", "course": "cs0007","lec": "lec07","text": "CS 0007: Introduction to Java\nLecture 7\nNathan Ong\nUniversity of Pittsburgh\nSeptember 22, 2016\n\n\fFUNCTIONS\n\n\fFunctions\n\u2022 A function is similar to its mathematical\ncounterpart\n\u2022 f(x) = x2, plug in 3, get 9\n\u2022 Contains several more parts\n\n\fJava Functions\n\u2022 Takes in zero or more parameters,\nprocesses them in the function body,\nand returns a result\n\u2022 Imagine going to BestBuyTM and telling\nthem you want your computer fixed.\nYou are telling them to run a fixing\nfunction, with your computer being a\nparameter. What you get back is your\nfixed computer.\n\n\fYou Already Have the Power!\n\u2022 You already know how to call functions!\nStatic:\nClassName.functionName(<parameters\n>);\nNon-static:\nobjectName.functionName(<parameter\ns>);\n\u2022 How do I make my own?\n\n\fFunction Components\n\n1.\n2.\n3.\nFunction 4.\nHeader 5.\n\nFunction\nBody 6.\n\nVisibility type (public/protected/private)\nstatic (For now, required)\nReturn Type\nfunctionName\nParentheses \u201c()\u201d\n\u2013\na)\nb)\nc)\n\nParameters\nType1 parameterName1\nType2 parameterName2\n\u2026\n\nCurly Brackets/Braces \u201c{}\u201d\n\u2013\n\nreturn a value\n\n\fA Simple Unnecessary\nFunction\n\u2022 I want this function to take two doubles\nand return their sum.\n\u2022 Let us go through the list and see what\nneeds to be incorporated for the\nfunction.\n\n\fFunction Components\n1.\n2.\n3.\n4.\n5.\n\nWe\u2019ll just use public for now.\nstatic (For now, required)\nWhat is the Return Type?\nWhat is an appropriate functionName?\nParentheses \u201c()\u201d\n\u2013\n\nWhat are the parameters?\n\n6. Curly Brackets/Braces \u201c{}\u201d\n\u2013\n\u2013\n\nWhat do we do in the Function Body?\nWhat do we return?\n\n\fReturn Type\n\u2022 What kind of thing are we going to give\nback to the function caller?\n\u2022 \u201cI want this function to take two\ndoubles and return their sum.\u201d\n\u2022 The sum of two doubles better be a\ndouble.\n\n\fFunction Name\n\u2022 The function name should easily\ndescribe what the function does.\n\u2022 \u201cI want this function to take two\ndoubles and return their sum.\u201d\n\u2022 \u201csum\u201d? Probably not enough detail,\nsince there are many types that can be\nsummed.\n\u2022 sumDoubles\n\n\fParameters\n\u2022 The required input to the function.\n\u2022 The data that the function needs in\norder to properly execute its duties.\n\u2022 \u201cI want this function to take two\ndoubles and return their sum.\u201d\n\u2022 Two doubles.\n\u2022 Names?\n\n\fFunction Header\n\n//sums two doubles together\npublic static double sumDoubles\n(double addend1, double addend2)\n\n\fFunction Body\n\u2026(Function Header)\n{\n???\n}\n\n\fFunction Body\n\u2026(Function Header)\n{\ndouble sum = addend1 + addend2;\nreturn sum;\n}//end method(double,double)\n\n\fFunction Body\n\u2026(Function Header)\n{\nreturn addend1 + addend2;\n}//end method(double,double)\n\n\fFunction Body\npublic class Functions\n{\n\u2026(Function)\npublic static void main(String[] args)\n{\ndouble sum = sumDoubles(2.5,3.9);\nSystem.out.println(sum);\n}//end method main\n}//End class Functions\n\n\fimport java.util.Scanner;\npublic class AddingMachine\n{\n\u2026(Function)\npublic static void main(String[] args)\n{\nScanner scan = new Scanner(System.in);\nSystem.out.println(\"Please enter a number:\");\ndouble firstNum = scan.nextDouble();\nSystem.out.println(\"Please enter a second\nnumber:\");\ndouble secondNum = scan.nextDouble();\ndouble sum = sumDoubles(firstNum,secondNum);\nSystem.out.println(\"The sum of \" + firstNum +\n\" and \" + secondNum + \" equals \" +\nsum);\n}//end method main\n}//End class AddingMachine\n\n\fScope\n\u2022 Why did we need to submit firstNum\nand secondNum to sumDoubles?\n\u2022 Why can\u2019t sumDoubles just use the\nalready created variables?\n\u2022 This relates to scope.\n\n\fScope\nConfidential\nSecret\nTop Secret\n\n\fScope\npublic class\nAddingMachine\npublic\nstatic void\nmain\n\npublic\nstatic\ndouble\nsumDoubl\nes\n\n\fPassing-in Parameters\n\u2022 The act of providing parameters in a\nfunction call is called Passing-in.\n\u2022 Java has two kinds of passing-in.\n\n\fPass-by-Value\n\u2022 Passing-in a copy of the value of the\nvariable.\n\u2022 Any change made to the variable is not\nreflected when the function returns.\n\u2022 All primitive type parameters are passby-value.\n\n\fPass-by-Reference\n\u2022 Passing-in the actual variable.\n\u2022 Any change made to the variable IS\nreflected when the function returns,\nUNLESS the parameter name is\nREASSIGNED.\n\u2022 All non-primitive type parameters are\npass-by-reference.\n\n\fAnother Simple Function\n\u2022 I want a function that prints a nice\nBritish greeting, complete with the\nperson\u2019s full name.\nSource:\nhttp://www.bbcamerica.com/anglophen\nia/2011/07/five-slang-ways-to-say-hello/\n\n\fFunction Components\n1.\n2.\n3.\n4.\n5.\n\npublic\nstatic\nWhat is the Return Type?\nWhat is an appropriate functionName?\nParentheses \u201c()\u201d\n\u2013\n\nWhat are the parameters?\n\n6. Curly Brackets/Braces \u201c{}\u201d\n\u2013\n\u2013\n\nWhat do we do in the Function Body?\nWhat do we return?\n\n\fReturn Type\n\u2022 Does this function even need to return\nany data or information?\n\u2022 No, so we should use void as our\nreturn type.\n\n\fFunction Header\n\npublic static void britishGreeting\n(String fullName)\n\n\fFunction Body\n\u2026(Function Header)\n{\nSystem.out.println(\"Wotcha \" +\nfullName +\n\". Fancy a cuppa?\");\n}//end method(String)\n//Note no return statement\n\n\f", "Comments": [], "label": [[97, 106, "Concept"],[109, 118, "Concept"],[123, 131, "Concept"],[237, 251, "Concept"],[276, 286, "Concept"],[310, 323, "Concept"],[329, 336, "Concept"],[459, 467, "Concept"],[496, 505, "Concept"],[610, 619, "Concept"],[621, 627, "Concept"],[746, 754, "Concept"],[776, 784, "Concept"],[788, 794, "Concept"],[799, 812, "Concept"],[834, 840, "Concept"],[841, 850, "Concept"],[851, 858, "Concept"],[860, 866, "Concept"],[887, 898, "Concept"],[899, 911, "Concept"],[941, 951, "Concept"],[1027, 1033, "Concept"],[1065, 1073, "Concept"],[1088, 1096, "Concept"],[1214, 1222, "Concept"],[1226, 1234, "Concept"],[1277, 1283, "Concept"],[1293, 1299, "Concept"],[1332, 1343, "Concept"],[1368, 1380, "Concept"],[1415, 1425, "Concept"],[1484, 1497, "Concept"],[1510, 1516, "Concept"],[1520, 1531, "Concept"],[1586, 1601, "Concept"],[1618, 1626, "Concept"],[1717, 1730, "Concept"],[1737, 1750, "Concept"],[1783, 1791, "Concept"],[1813, 1821, "Concept"],[1964, 1974, "Concept"],[2003, 2011, "Concept"],[2033, 2041, "Concept"],[2182, 2197, "Concept"],[2294, 2307, "Concept"],[2310, 2324, "Concept"],[2337, 2350, "Concept"],[2353, 2368, "Concept"],[2447, 2460, "Concept"],[2463, 2478, "Concept"],[2539, 2552, "Concept"],[2553, 2559, "Concept"],[2566, 2575, "Concept"],[2580, 2588, "Concept"],[2590, 2596, "Concept"],[2597, 2603, "Concept"],[2722, 2731, "Concept"],[2791, 2799, "Concept"],[2801, 2807, "Concept"],[2808, 2814, "Concept"],[3235, 3240, "Concept"],[3359, 3368, "Concept"],[3388, 3393, "Concept"],[3397, 3402, "Concept"],[3436, 3441, "Concept"],[3442, 3448, "Concept"],[3469, 3475, "Concept"],[3476, 3482, "Concept"],[3494, 3500, "Concept"],[3501, 3507, "Concept"],[3540, 3550, "Concept"],[3574, 3584, "Concept"],[3590, 3603, "Concept"],[3614, 3624, "Concept"],[3650, 3660, "Concept"],[3664, 3677, "Concept"],[3680, 3690, "Concept"],[3788, 3796, "Concept"],[3797, 3804, "Concept"],[3842, 3854, "Concept"],[3858, 3875, "Concept"],[3878, 3889, "Concept"],[3966, 3974, "Concept"],[3975, 3982, "Concept"],[3995, 4004, "Concept"],[4050, 4060, "Concept"],[4065, 4082, "Concept"],[4101, 4109, "Concept"],[4121, 4129, "Concept"],[4292, 4300, "Concept"],[4328, 4334, "Concept"],[4335, 4341, "Concept"],[4354, 4365, "Concept"],[4390, 4402, "Concept"],[4437, 4447, "Concept"],[4506, 4519, "Concept"],[4532, 4538, "Concept"],[4542, 4553, "Concept"],[4643, 4647, "Concept"],[4655, 4666, "Concept"],[4670, 4685, "Concept"],[4742, 4755, "Concept"],[4758, 4773, "Concept"],[4872, 4878, "Concept"]]}
{"id":292, "segment": "dev_set", "course": "cs0007", "lec": "lec17", "text": "CS 0007: Introduction to Java\nLecture 17\nNathan Ong\nUniversity of Pittsburgh\nNovember 8, 2016\n\n\fMain Portions of OOP\n\u2022 Building a class\n\u2022 Determining inter-class relationships\n\n\fClass Components\n\u2022 Class-level/Instance Variables\n\u2022 Methods\n\u2022 Constructor(s)\n\n\fInter-class Relationships\n\u2022 Building a single class is useless. It\nneeds to be used in context.\n\u2022 There are two main relationships\nbetween classes\n\u2013 Sub/Super class\n\u2013 Ownership\n\n\fSubclasses\n\u2022 A subclass of a class is a more specific\ntype of a class\n\u2022 Also known as the child of a class\n\u2022 For example, a tree would be a subclass\nof plant\n\u2022 Subclasses are meant to expand upon\nthe behavior of their more general\nparent class\n\u2022 You can have several subclasses\n\n\fSuperclasses\n\u2022 On the converse, a superclass is a more\nabstract and general version of a class\n\u2022 Also known as the parent of a class\n\u2022 Plant is the superclass of Tree\n\u2022 You can only have one superclass\n\n\fDeclaring a Class to be a\nSubtype\n\u2022 In order to declare a class\u2019s parent, use\nthe keyword extends\n\u2022 (Classes that do not have a parent class\nimplicitly extend the Object class)\n\n\fInheritance\n\u2022 A subclass inherits all non-private fields\nand methods\n\u2022 Accessing these fields and methods\nrequires the keyword super.\n\u2022 (Note: you may also be able to access\nprivate fields with the parent class\u2019s\ngetters and setters, which may be safer)\n\n\fRestricting Access\n\u2022 What if you want a field or method to be\ninherited, but still do not necessarily\nwant it to be accessed by anyone?\n\u2022 Use the keyword protected\n\u2022 Remember, releasing your access to\nthese fields and methods should only\nbe done when necessary\n\n\fRegarding Constructors\n\u2022 Constructors cannot be inherited, even\nthough they are public\n\u2022 However, you can, and should, use them\nfrom the subclass\u2019s constructor, to\nensure complete initialization\n\u2022 You can call the parent\u2019s constructor by\nusing the keyword super\n\n\fCalling Superclass Constructor\n\u2022 Unlike calling an overloaded\nconstructor of the same class, calling a\nsuperclass constructor does not need to\nbe the only line of code\n\u2022 However, it must still be the first line of\ncode in the constructor\n\n\fExample\npublic class Vehicle\n{\nprivate final int numWheels;\n\u2026\npublic Vehicle(int numWheels)\n{\nthis.numWheels = numWheels;\n\u2026\n}//end function(double)\n\u2026\n}//End class Vehicle\n\n\fExample\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n\u2026\npublic Car(int numPassengers, double gasRemaining)\n{\nsuper(4);\nthis.numPassengers = numPassengers;\nthis.gasRemaining = gasRemaining;\n}//end constructor(int,double)\n\u2026\n}//End class Plant\n\n\fWhat If the Superclass\u2019s Method\nDefinition Does Not Fit the Class\u2019s?\n\u2022 We can override the definition by using\nthe exact same function header\n\u2022 The line directly above function header\nmust have \u201c@Override\u201d only\n\u2022 As an example, our Car class should\nprobably use the original \u201cmove\u201d\nmethod, rather than creating an entirely\nnew \u201cdrive\u201d method that does\nsomething similar\n\n\fOverride\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n\u2026\n@Override\npublic boolean move(double dist)\n{\nreturn super.move(dist*10.0) &&\n(this.gasRemaining > 0);\n}//end function(double)\n\u2026\n}//End class Plant\n\n\fOverriding\n\u2022 I can still reference the original method\nusing the super keyword\n\u2022 Unless your overridden method totally\ndiscards the functionality of the\nsuperclass\u2019s method, you should call the\nsuperclass\u2019s method at least once\n\n\fNote\n\u2022 You cannot override constructors\n\n\fOwnership\n\u2022 Ownership is simply one class using\nanother as a property\n\u2022 A Car may have an Engine, a Radio, and\nan Owner, depending on what you need\n\u2022 A Car\u2019s superclass and subclasses\ncertainly are not Engine, Radio, and\nOwner\n\n\fUsing the Classes\npublic class Garage\n{\nprivate Vehicle[] vehicles;\n\u2026\npublic Garage(int capacity)\n{\nthis.vehicles = new Vehicle[capacity];\nfor(int i = 0; i < vehicles.length; i++)\n{\nvehicles[i] = null;\n}\n\u2026\n}//end constructor(int)\n\u2026\n}//End class Garage\n\n\fUsing the Classes\npublic class Garage\n{\n\u2026\npublic boolean addVehicle(Vehicle vehicle)\n{\n//Note: there is a better way!\nfor(int i = 0; i < vehicles.length; i++)\n{\nif(vehicles[i] == null)\n{\nvehicles[i] = vehicle;\nreturn true;\n}\n}\nreturn false;\n}//end method(Vehicle)\n}//End class Garage\n\n\fQUESTIONS?\n\n\fModeling a Problem\n\u201cJoe\u2019s Automotive Shop services foreign cars, and\nspecializes in servicing cars made by Mercedes,\nPorsche, and BMW. When a customer brings a car to\nthe shop, the manager gets the customer\u2019s name,\naddress, and telephone number. Then the manager\ndetermines the make, model, and year of the car, and\ngives the customer a service quote. The service\nquote shows the estimated parts charges, estimated\nlabor charges, sales tax, and total estimated\ncharges.\u201d\nSource: Starting Out with Java: From Control Structures\nthrough Objects by Tony Gaddis\n\n\fFind the Nouns\n\u201cJoe\u2019s Automotive Shop services foreign cars,\nand specializes in servicing cars made by\nMercedes, Porsche, and BMW. When a\ncustomer brings a car to the shop, the\nmanager gets the customer\u2019s name, address,\nand telephone number. Then the manager\ndetermines the make, model, and year of the\ncar, and gives the customer a service quote.\nThe service quote shows the estimated parts\ncharges, estimated labor charges, sales tax,\nand total estimated charges.\u201d\n\n\fCoalescing\naddress\nBMW\ncar\nquote\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nPorsche\nJoe\u2019s Automotive Shop sales tax\nmake\nservice\nmanager\nMercedes\nmodel\n\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\n\fNoun Out of Scope\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\n\fSubtypes\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\nname\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated charges\nyear\n\nWhether these subtypes are specific objects\n(instances) or more specific types of cars\n(subclasses) will depend on your needs. In this\nscenario, there is no need to represent them as\nclasses.\n\n\fSimple Properties\naddress\nforeign cars\nBMW\nJoe\u2019s Automotive Shop\ncar\nmake service quote\ncars\nmanager\ncustomer Mercedes\nestimated labor charges\nmodel\nestimated parts charges\nname\n\nPorsche\nsales tax\nshop\ntelephone number\ntotal estimated charges\nyear\n\nSimple properties can be composed of\nprimitives or preexisting object\ndefinitions, and fall under a particular\nobject class.\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA car had three simple properties in our\nscenario. What types would they be?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA car had three simple properties in our\nscenario. What types would they be?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA customer had three simple properties\nin our scenario. What types would they\nbe?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA customer had three simple properties\nin our scenario. What types would they\nbe?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA service quote had four simple\nproperties in our scenario. What types\nwould they be?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA service quote had four simple\nproperties in our scenario. What types\nwould they be?\n\n\fWho Owns Everything?\naddress\nforeign cars\nBMW\nJoe\u2019s Automotive Shop\ncar\nmake service quote\ncars\nmanager\ncustomer\nMercedes\nestimated labor charges\nmodel\nestimated parts charges\nname\n\nPorsche\nsales tax\nshop\ntelephone number\ntotal estimated charges\nyear\n\nOur scenario revolves around the\nautomotive shop, so this will hold the\nmain method and will be the overarching\nclass.\n\n\fCode on the board!\n\n\f", "Comments": [], "label": [[113, 116, "Concept"],[130, 135, "Concept"],[150, 175, "Concept"],[178, 183, "Concept"],[197, 227, "Concept"],[230, 237, "Concept"],[240, 251, "Concept"],[257, 282, "Concept"],[303, 308, "Concept"],[396, 403, "Concept"],[406, 409, "Concept"],[410, 421, "Concept"],[424, 433, "Concept"],[436, 446, "Concept"],[451, 459, "Concept"],[465, 470, "Concept"],[500, 505, "Concept"],[526, 531, "Concept"],[537, 542, "Concept"],[576, 584, "Concept"],[596, 606, "Concept"],[667, 679, "Concept"],[703, 713, "Concept"],[716, 728, "Concept"],[750, 760, "Concept"],[805, 810, "Concept"],[831, 837, "Concept"],[843, 848, "Concept"],[864, 874, "Concept"],[907, 917, "Concept"],[932, 937, "Concept"],[946, 953, "Concept"],[986, 992, "Concept"],[1010, 1017, "Concept"],[1021, 1028, "Concept"],[1048, 1054, "Concept"],[1055, 1060, "Concept"],[1083, 1089, "Concept"],[1090, 1095, "Concept"],[1099, 1110, "Concept"],[1115, 1123, "Concept"],[1124, 1132, "Concept"],[1149, 1155, "Concept"],[1186, 1192, "Concept"],[1197, 1204, "Concept"],[1226, 1231, "Concept"],[1281, 1287, "Concept"],[1297, 1309, "Concept"],[1312, 1319, "Concept"],[1324, 1331, "Concept"],[1395, 1400, "Concept"],[1404, 1410, "Concept"],[1417, 1426, "Concept"],[1509, 1518, "Concept"],[1628, 1640, "Concept"],[1643, 1655, "Concept"],[1666, 1675, "Concept"],[1755, 1765, "Concept"],[1766, 1777, "Concept"],[1832, 1838, "Concept"],[1841, 1852, "Concept"],[1874, 1879, "Concept"],[1890, 1900, "Concept"],[1901, 1912, "Concept"],[1944, 1955, "Concept"],[1985, 1995, "Concept"],[1996, 2007, "Concept"],[2108, 2119, "Concept"],[2595, 2606, "Concept"],[2643, 2649, "Concept"],[2661, 2669, "Concept"],[2778, 2787, "Concept"],[2955, 2963, "Concept"],[3057, 3066, "Concept"],[3206, 3216, "Concept"],[3254, 3260, "Concept"],[3271, 3276, "Concept"],[3299, 3309, "Concept"],[3310, 3316, "Concept"],[3359, 3369, "Concept"],[3372, 3378, "Concept"],[3400, 3410, "Concept"],[3413, 3419, "Concept"],[3454, 3462, "Concept"],[3463, 3475, "Concept"],[3478, 3487, "Concept"],[3490, 3499, "Concept"],[3514, 3519, "Concept"],[3636, 3646, "Concept"],[3651, 3661, "Concept"],[3717, 3724, "Concept"],[3920, 3931, "Concept"],[3946, 3951, "Concept"],[3971, 3978, "Concept"],[4260, 4278, "Concept"],[5788, 5796, "Concept"],[6043, 6051, "Concept"],[6074, 6083, "Concept"],[6117, 6127, "Concept"],[6223, 6240, "Concept"],[6472, 6489, "Concept"],[6509, 6519, "Concept"],[6599, 6616, "Concept"],[6867, 6884, "Concept"],[6930, 6947, "Concept"],[7198, 7215, "Concept"],[7261, 7278, "Concept"],[7534, 7551, "Concept"],[7597, 7614, "Concept"],[7870, 7887, "Concept"],[7933, 7950, "Concept"],[8210, 8227, "Concept"],[8273, 8290, "Concept"],[8550, 8567, "Concept"]]}
{"id":293, "segment": "dev_set", "course": "cs1502", "lec": "lec04_finite_automata_03", "text": "Finite Automata 03\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fNondeterministic Finite Automaton\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\nLet \u03a3 = {0, 1}\nDifferent between Deterministic Finite Automaton (DFA) and\nNondeterministic Finite Automaton (NFA):\nDFA always has exactly one exiting transition arrow for each\nsymbol in the alphabet\nNFA may have none, one, or many exiting arrows for each\nsymbol\n\nDFA have no arrow with the label \u03b5\nNFA may have Zero, one, or many arrows exiting from each\nstate with the label \u03b5.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fCompute an NFA\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\nIf you encounter a state with multiple way to proceed for a\nregular input:\nThe machine splits into multiple copies of itself\nThe machines follow all the possibilities in parallel.\nEach copy of the machine takes one of the possible ways.\n\nIf you encounter a state with an \u03b5 symbol as an exiting arrow:\nWithout reading any input, the machine splits into multiple\ncopies.\nEach follows each of the exiting \u03b5-labeled arrows, and\nOne stays at the current state.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nSymbol read\n\nq1\n\nStart\n\n0, 1\n\n0, 1\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nSymbol read\n\nq1\n\nStart\n\n0\n\nq1\n\n0, 1\n\n0, 1\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq3\n\n0, 1\n\n0, 1\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nq1\n\nFinite Automata 03\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nq1\n\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nq1\n\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\nq2\n\nq3\n\nq4\n\nq4\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nq1\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\nq1\n\nq2\n\nq3\n\nq4\n\nq4\n\nq1\n\nq3\n\nq4\n\nq4\n\n1\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nIf there is at least one copy in an accept state,\nthe machine accept the input string.\nFinite Automata 03\n\nq4\n\n\fExample\nLet A be the language consisting of all strings over {0, 1}\ncontaining a 1 in the third position from the end (e.g., 000100 is in\nA but 0011 is not in A).\nDesign a DFA for this problem is quite complicate\nDesign an NFA is easier\n0, 1\n\n1\n\nq1\n\n0, 1\n\nq2\n\n0, 1\n\nq3\n\nq4\n\nThe transition from q1 to q2 is our guess that this is the 1 in\nthe third position from the end.\nIf our guess is wrong:\nThe input string is shorter, it will end at reject state.\nThe input string is longer, the machine will die but other one\nremains alive.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nAn equivalent DFA machine\n0\n\n0\n\n0\n\nq000\n1\n1\n\n0\n\nq100\n\nq010\n\nq110\n1\n\n0\n\n1\n\n0\n\n0\n\n0\n\nq001\n\nq101\n\n1\n\nq011\n\n1\n\n1\n\nName states according to the last three symbols\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\nq111\n\n1\n\n\fExample\nSuppose the alphabet \u03a3 is {0}. Design a machine that recognizes\nthe language A where A is an empty string or all strings over \u03a3\nthat their length is a multiple of 2 or 3.\n0\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nSuppose the alphabet \u03a3 is {0}. Design a machine that recognizes\nthe language A where A is an empty string or all strings over \u03a3\nthat their length is a multiple of 2 or 3.\n0\n\n0\n\n0\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n\nFinite Automata 03\n\n\fExample\nSuppose the alphabet \u03a3 is {0}. Design a machine that recognizes\nthe language A where A is an empty string or all strings over \u03a3\nthat their length is a multiple of 2 or 3.\n0\n\n\u03b5\n\n0\n\n\u03b5\n0\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n\nFinite Automata 03\n\n\fFormal Definition of A Nondeterministic Finite Automaton\nA nondeterministic finite automaton is a 5-tuple\n(Q, \u03a3, \u03b4, q0, F )\n1\n2\n3\n\nQ is a finite set of states\n\u03a3 is a finite alphabet\n\u03b4 : Q \u00d7 \u03a3\u03b5 \u2192 P(Q) is the transition function,\n\u03a3\u03b5 = \u03a3 \u222a {\u03b5} and\nP(Q) is the powerset of Q (set of set of states).\n\n4\n5\n\nq0 \u2208 Q is the start state\nF \u2286 Q is the set of accept states.\n\nNotes\nIn an NFA, one input symbol can change the state of the\nmachine to multiple states.\nSplit to multiple copies with different current states\nExample: \u03b4(q0 , 1) = {q0 , q1 }\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nQ = {q1 , q2 , q3 , q4 }\n\u03a3 = {0, 1} and \u03a3\u03b5 = {0, 1, \u03b5}\n\u03b4 is given as\n\u03b4\n0\n1\nq1 {q1 } {q1 , q2 }\nq2 {q3 }\n\u2205\nq3\n\u2205\n{q4 }\nq4 {q4 }\n{q4 }\n\nq4\n\n\u03b5\n\u2205\n{q3 }\n\u2205\n\u2205\n\nWe treat \u03b5 as a regular input symbol\nIf there is no \u03b5 transitions, we can ignore the \u03b5 column\n\nq1 is the start state\nF = {q4 }\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fNFA and DFA\n\nNFA is a slightly different computation model compared to\nDFA\nNFA can split into multiple copies\nNFA may have \u03b5 transitions\n\nIs there a language that can be recognized by an NFA but\ncannot be recognized by any DFAs?\nIn theory of computation, we try to see whether we can\ncapture the behavior of an NFA using a DFA\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fSimulating and NFA with a DFA\nSimulate 010110\n\u03b4\n\n0\n\n\u03b5\n\n1\n\nq1\n\nq1 {q1 } {q1 , q2 } \u2205\n{q3 }\nq2 {q3 }\n\u2205\n{q4 }\n\u2205\nq3 \u2205\n\u2205\nq4 {q4 } {q4 }\n\nStart\n\n{q1 }\n\n= {q1 }\n\n{q1 }\n\n= {q1 }\n\n{q1 , q2 , q3 }\n\n= {q1 , q2 , q3 }\n\n{q1 } \u222a {q3 } \u222a \u2205\n\n= {q1 , q3 }\n\n{q1 , q2 , q3 } \u222a {q4 }\n\n= {q1 , q2 , q3 , q4 }\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq3\n0\n\nq1\n\nq3\n1\n\nq1\n\nq2\n\nq3\n\nq4\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\n{q1 , q2 , q3 } \u222a \u2205 \u222a {q4 } \u222a {q4 } = {q1 , q2 , q3 , q4 }\n\nq4\n0\n\nq1\n\nq3\n\nq4\n\nq4\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n{q1 } \u222a {q3 } \u222a \u2205 \u222a {q4 } \u222a {q4 } = {q1 , q3 , q4 }\nFinite Automata 03\n\n\fEquivalence of NFAs and DFAs\n\nEvery nondeterministic finite automaton has an equivalent\ndeterministic finite automaton.\nLet N = (Q, \u03a3, \u03b4, q0 , F ) be the NFA recognizing some\nlanguage A\nWe are going to construct a DFA M = (Q0 , \u03a3, \u03b4 0 , q00 , F 0 )\nrecognizing A\nLet\u2019s consider the case where N has no \u03b5 transitions.\n1\n2\n\nQ0 = P(Q) [\n\u03b4 0 (R, a) =\n\u03b4(r, a)\nr\u2208R\n\n3\n4\n\nq00 = {q0 }\nF 0 = {R \u2208 Q0 | R contains an accept state of N }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nLet \u03a3 be {0, 1}. The following NFA N recognizes the\nlanguage A where A is a set of strings that end with a 1.\n0, 1\n\n1\n\nq0\n\nq1\n\nN = (Q, \u03a3, \u03b4, q0 , F )\n1\n2\n3\n\nQ = {q0 , q1 },\n\u03a3 = {0, 1}\n\u03b4 is given as\nq0\nq1\n\n4\n5\n\n0\n{q0 }\n\u2205\n\n1\n{q0 , q1 }\n\u2205\n\nq0 is the start state\nF = {q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nConstruct a DFA M = (Q0 , \u03a3, \u03b4 0 , q00 , F 0 )\nQ0 = P(Q) = P({q0 , q1 })\nQ0 = {\u2205, {q0 }, {q1 }, {q0 , q1 }}\nWe will construct \u03b4 0 later\nq00 = {q0 } where q0 is the start state of the NFA\nF 0 = {R \u2208 Q0 | R contains an accept state of N }\nF 0 = {{q1 }, {q0 , q1 }}\nwhere F = {q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nLet\u2019s focus on transition functions\nThe transition function \u03b4 of the NFA is as follows:\n0\n1\nq0 {q0 } {q0 , q1 }\nq1\n\u2205\n\u2205\nRecall that the set of state of the equivalent DFA is the power\nset of set of state of the NFA\n\u03b40\n0\n1\n\u2205\n\u2205\n\u2205\n{q0 } {q0 , q1 }\n{q0 }\n{q1 }\n\u2205\n\u2205\n{q0 , q1 } {q0 } {q0 , q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nMachine M = (Q0 , \u03a3, \u03b4 0 , q00 , F 0 ) equivalent to N can be\ndefined as follows:\nQ0 = P(Q) [\n= {\u2205, {q0 }, {q1 }, {q0 , q1 }},\n0\n\u03b4 (R, a) =\n\u03b4(r, a)\nr\u2208R\n0\n\n\u03b4 (\u2205, 0) =\n\n[\n\n\u03b4(r, 0) = \u2205\n\nr\u2208\u2205\n\n\u03b4 0 (\u2205, 1) =\n\n[\n\n\u03b4(r, 1) = \u2205\n\nr\u2208\u2205\n\n\u03b4 0 ({q0 }, 0) =\n\n[\n\n\u03b4(r, 0) = \u03b4(q0 , 0) = {q0 }\n\nr\u2208{q0 }\n\n\u03b4 0 ({q0 }, 1) =\n\n[\n\n\u03b4(r, 1) = \u03b4(q0 , 1) = {q0 , q1 }\n\nr\u2208{q0 }\n\n\u03b4 0 ({q1 }, 0) =\n\n[\n\n\u03b4(r, 0) = \u03b4(q1 , 0) = \u2205\n\nr\u2208{q1 }\n\n\u03b4 0 ({q1 }, 1) =\n\n[\n\n\u03b4(r, 1) = \u03b4(q1 , 1) = \u2205\n\nr\u2208{q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nMachine M (Continue)\n\u03b4 0 (Continue)\n\u03b4 0 ({q0 , q1 }, 0) =\n\n[\n\n\u03b4(r, 0) = \u03b4(q0 , 0) \u222a \u03b4(q1 , 0) =\n\nr\u2208{q0 ,q1 }\n\n{q0 } \u222a \u2205 = {q0 }\n\u03b4 0 ({q0 , q1 }, 1) =\n\n[\n\n\u03b4(r, 0) = \u03b4(q0 , 1) \u222a \u03b4(q1 , 1) =\n\nr\u2208{q0 ,q1 }\n\n{q0 , q1 } \u222a \u2205 = {q0 , q1 }\n\nThus \u03b4 0 is given by\n\u03b40\n\u2205\n{q0 }\n{q1 }\n{q0 , q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n\u2205\n{q0 }\n\u2205\n{q0 }\n\n1\n\u2205\n{q0 , q1 }\n\u2205\n{q0 , q1 }\n\nFinite Automata 03\n\n\fExample\nThe state diagram of the machine M = (Q0 , \u03a3, \u03b4 0 , q00 , F 0 )\nequivalent to N (L(M ) = L(N )) is shown below:\n0\n\n1\n\n1\n\n{q0 }\n\n{q0 , q1 }\n\n0\n0\n\n0\n\n{q1 }\n\n\u2205\n1\n\n1\n\nWithout bottom part, it is the same as one of our previous\nexample\nIt is okay for a DFA to have unreachable states\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fNFA to DFA with \u03b5 Symbol\nLet E(R) be the collection of states that can be reached from\nmembers of R by going only along \u03b5 arrows, including the\nmembers of R themselves.\nE(R) = {q | q can be reached from R by travel along\n0 or more \u03b5 arrows}\nNote that a state q can be reached from its own state q by\ntravel along no \u03b5 arrow (R \u2286 E(R))\nExample:\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nE({q1 }) = {q1 }\nE({q2 }) = {q2 , q3 }\nE({q1 , q2 }) = {q1 , q2 , q3 }\nE({q1 , q3 }) = {q1 , q3 }\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\nq4\n\n\fNFA to DFA with \u03b5 Symbol\n\nLet NFA N = (Q, \u03a3, \u03b4, q0 , F ) with \u03b5 transitions that\nrecognizes a language A\nWe can construct a DFA M = (Q0 , \u03a3, \u03b4 0 , q00 , F 0 ) as\n1\n2\n\nQ0 = P(Q)\n\u03b4 0 is given by\n\u03b4 0 (R, a) =\n\n[\n\nE(\u03b4(r, a))\n\nr\u2208R\n3\n\nq00 = E({q0 })\nIf q0 has no exiting arrow for \u03b5, q00 = {q0 }\n\n4\n\nF 0 = {R \u2208 Q0 | R contains an accept state of N }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nConsider the following NFA machine:\n1\nb\n\na\n\n\u03b5\n2\n\na\n\n3\na, b\n\nN = (Q, \u03a3, \u03b4, q0 , F )\nQ = {1, 2, 3}\n\u03a3 = {a, b}\n\u03b4 is given by\n1\n2\n3\n\na\n\u2205\n{2, 3}\n{1}\n\nb\n{2}\n{3}\n\u2205\n\n\u03b5\n{3}\n\u2205\n\u2205\n\nq0 = 1\nF = {1}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nMachine M = (Q0 , \u03a3, \u03b4 0 , q00 , F 0 ) equivalent to N :\nQ0 = P(Q) = P({1, 2, 3})\nQ0 = {\u2205, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}\nStart state is E({1}) = {1, 3}\nF 0 is a set of set of states that contain accept states of N\n(F = {1}).\nF 0 = {{1}, {1, 2}, {1, 3}, {1, 2, 3}}\n[\n\u03b4 0 (R, a) =\nE(\u03b4(r, a))\nr\u2208R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nLet\u2019s focus on transition functions\nThe transition function \u03b4 of the NFA is as follows:\n\u03b4\na\nb\n\u03b5\n1\n\u2205\n{2} {3}\n2 {2, 3} {3}\n\u2205\n{1}\n\u2205\n\u2205\n3\nRecall that the set of state of the equivalent DFA is the power\nset of set of state of the NFA\n\u03b40\na\nb\n\u2205\n\u2205\n\u2205\n\u2205\n{2}\n{1}\n{2}\n{2, 3}\n{3}\n{3}\n{1, 3}\n\u2205\n{2, 3}\n{2, 3}\n{1, 2}\n{1, 3}\n{2}\n{1, 3}\n{2, 3}\n{1, 2, 3}\n{3}\n{1, 2, 3} {1, 2, 3} {2, 3}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fMachine M \u2019s \u03b4 0\n0\n\n\u03b4 (\u2205, a) =\n\n[\n\nE(\u03b4(r, a))\n\n0\n\n= E(\u03b4(2, b))\n= E({3})\n\nr\u2208\u2205\n\n= {3}\n[\n\u03b4 ({3}, a) =\n\n=\u2205\n0\n\n0\n\n[\n\nE(\u03b4(r, b))\n\nr\u2208{2}\n\n=\u2205\n[\n0\n\u03b4 (\u2205, b) =\nE(\u03b4(r, b))\n\n\u03b4 ({1}, a) =\n\n[\n\n\u03b4 ({2}, b) =\n\nr\u2208\u2205\n\nE(\u03b4(r, a))\n\nE(\u03b4(r, a))\n\nr\u2208{3}\n\nr\u2208{1}\n\n= E(\u03b4(3, a))\n\n= E(\u03b4(1, a))\n\n= E({1})\n\n= E(\u2205)\n=\u2205\n0\n\n\u03b4 ({1}, b) =\n\n0\n\n[\n\n= {1, 3}\n[\n\n\u03b4 ({3}, b) =\n\nE(\u03b4(r, b))\n\nE(\u03b4(r, b))\n\nr\u2208{3}\n\nr\u2208{1}\n\n= E(\u03b4(3, b))\n\n= E(\u03b4(1, b))\n\n= E(\u2205)\n\n= E({2})\n= {2}\n[\n0\n\u03b4 ({2}, a) =\n\n=\u2205\n0\n\nE(\u03b4(r, a))\n\n\u03b4 ({1, 2}, a) =\n\n[\n\nE(\u03b4(r, a))\n\nr\u2208{1,2}\n\nr\u2208{2}\n\n= E(\u03b4(1, a)) \u222a E(\u03b4(2, a))\n\n= E(\u03b4(2, a))\n\n= \u2205 \u222a {2, 3}\n\n= E({2, 3})\n\n= {2, 3}\n\n= {2, 3}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fMachine M \u2019s \u03b4 0\n0\n\n\u03b4 ({1, 2}, b) =\n\n[\n\nE(\u03b4(r, b))\n\nr\u2208{1,2}\n\n0\n\n\u03b4 ({2, 3}, b) =\n\n= E(\u03b4(1, b)) \u222a E(\u03b4(2, b))\n= {2} \u222a {3}\n= {2, 3}\n[\n0\n\u03b4 ({1, 3}, a) =\n\n= E(\u03b4(2, b)) \u222a E(\u03b4(3, b))\nE(\u03b4(r, a))\n\n= {3}\n0\n\n= E(\u03b4(1, a)) \u222a E(\u03b4(3, a))\n\n\u03b4 ({1, 2, 3}, a) =\n\nE(\u03b4(3, a))\nE(\u03b4(r, b))\n\nr\u2208{1,3}\n\n= {2} \u222a \u2205\n= {2}\n[\n\u03b4 ({2, 3}, a) =\n\nE(\u03b4(r, a))\n\n= E(\u03b4(1, a) \u222a E(\u03b4(2, a))\u222a\n\n= E(\u03b4(1, b)) \u222a E(\u03b4(3, b))\n\n0\n\n[\nr\u2208{1,2,3}\n\n= \u2205 \u222a {1, 3}\n= {1, 3}\n[\n\u03b4 ({1, 3}, b) =\n\nE(\u03b4(r, b))\n\n= {3} \u222a \u2205\n\nr\u2208{1,3}\n\n0\n\n[\nr\u2208{2,3}\n\n= \u2205 \u222a {2, 3} \u222a {1, 3}\n= {1, 2, 3}\n[\n\u03b4 ({1, 2, 3}, b) =\nE(\u03b4(r, b))\n0\n\nr\u2208{1,2,3}\n\n= E(\u03b4(1, b) \u222a E(\u03b4(2, b))\u222a\nE(\u03b4(r, a))\n\nE(\u03b4(3, b))\n\nr\u2208{2,3}\n\n= {2} \u222a {3} \u222a \u2205\n\n= E(\u03b4(2, a)) \u222a E(\u03b4(3, a))\n\n= {2, 3}\n\n= {2, 3} \u222a {1, 3}\n= {1, 2, 3}\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nRecall the transition function of M\na\n\u2205\n\u2205\n{2, 3}\n{1, 3}\n{2, 3}\n{1, 3}\n{1, 2, 3}\n{1, 2, 3}\n\n\u2205\n{1}\n{2}\n{3}\n{1, 2}\n{1, 3}\n{2, 3}\n{1, 2, 3}\n\nb\n\u2205\n{2}\n{3}\n\u2205\n{2, 3}\n{2}\n{3}\n{2, 3}\n\nThe state diagram of M\na\na, b\n\nb\n{1}\n\n\u03c6\n\n{2}\na, b\n\nb\n\nb\n\n{1,2}\n\na\n\nb\n\na\n{3}\n\na\n\n{1,3}\n\na\n\n{2,3}\n\n{1,2,3}\nb\n\nb\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\na\n\n\fClosure Under Union Operation\nN1\n\nN\n\n\u03b5\n\n\u03b5\nN2\n\nN1 recognizes a regular language A\nN2 recognizes a regular language B\nN recognizes A \u222a B (A \u222a B is regular)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\n\nLet N1 = (Q1 , \u03a3, \u03b41 , q1 , F1 ) recognizes A1 .\nLet N2 = (Q2 , \u03a3, \u03b42 , q2 , F2 ) recognizes A2 .\nTo construct N = (Q, \u03a3, \u03b4, q0 , F ) to recognizes A1 \u222a A2 :\n1\n2\n3\n4\n\nQ = {q0 } \u222a Q1 \u222a Q2\nThe state q0 is the start state of N\nThe set of accept state F = F1 \u222a F2\n\u03b4 is given by\n\uf8f1\n\u03b41 (q, a) q \u2208 Q1\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f2\u03b4 (q, a) q \u2208 Q\n2\n2\n\u03b4(q, a) =\n\uf8f4\n{q\n,\nq\n}\nq\n=\nq\nand a = \u03b5\n1\n2\n0\n\uf8f4\n\uf8f4\n\uf8f3\n\u2205\nq = q0 and a 6= \u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\n\nGiven state diagrams of finite-state machines N1 and N2\nTo draw a state diagram of a new machine N where\nL(N ) = L(N1 ) \u222a L(N2 ):\n1\n2\n3\n4\n\nDraw the state diagram of N1 on the top half\nDraw the state diagram of N2 on the bottom half\nAdd a new start state\nAdd \u03b5 transitions from the new start state to the start states\nof N1 and N2 , respectively\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nDraw N1 on the top half\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nDraw N2 on the bottom half\nN1\n\nN2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nAdd new start state\nN1\n\nN2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nAdd \u03b5 transitions\nN\n\nN1\n\u03b5\n\n\u03b5\n\nN2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\nLet N1 recognizes A and N2 recognizes B\nGiven a string w, how do we know whether w \u2208 AB?\nRecall the definition of AB (A concatenated by B)\nAB = {xy | x \u2208 A and y \u2208 B}\nFor w to be in AB, w must be divided into two strings x and\ny where w = xy such that x \u2208 A and y \u2208 B\nIf x \u2208 A, x \u2208 L(N1 )\nSince x \u2208 L(N1 ), by simulating N1 on input x, the simulation\nwill end in an accept state of N1 (N1 accepts x)\n\nBut if x 6\u2208 A, simulation will end in a non-accept state of N1\nIf y \u2208 B, y \u2208 L(N2 )\nSince y \u2208 L(N2 ), by simulating N2 on input y, the simulation\nwill end in an accept state of N2 (N2 accepts y)\n\nBut if y 6\u2208 B, simulation will end in a non-accept state of N2\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\nN1\n\nN2\n\nN\n\n\u03b5\n\u03b5\n\u03b5\n\nN1 recognizes a regular language A\nN2 recognizes a regular language B\nN recognizes AB (AB is regular)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nLet N1 = (Q1 , \u03a3, \u03b41 , q1 , F1 ) recognizes A1 .\nLet N2 = (Q2 , \u03a3, \u03b42 , q2 , F2 ) recognizes A2 .\nTo construct N = (Q, \u03a3, \u03b4, q0 , F ) to recognizes A1 \u25e6 A2 :\n1\n2\n3\n4\n\nQ = Q1 \u222a Q2\nThe state q1 is the start state of N\nThe set of accept state F = F2\n\u03b4 is given by\n\uf8f1\n\u03b41 (q, a)\nq \u2208 Q1 and q 6\u2208 F1\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f2\u03b4 (q, a)\nq\n\u2208 Q2 and a 6= \u03b5\n2\n\u03b4(q, a) =\n\uf8f4\n\u03b41 (q, a) \u222a {q2 } q \u2208 F1 and a = \u03b5\n\uf8f4\n\uf8f4\n\uf8f3\n\u03b42 (q, a)\nq \u2208 Q2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nGiven state diagrams of finite-state machines N1 and N2\nTo draw a state diagram of a new machine N where\nL(N ) = L(N1 ) \u25e6 L(N2 ):\n1\n2\n3\n\n4\n\nDraw the state diagram of N1 on the left side\nDraw the state diagram of N2 on the right side\nFor every accept state of N1 , add the \u03b5 transition to the start\nstate of N2\nChange all accept states of N1 to non-accept states\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nDraw the state diagram of N1 on the left side\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nDraw the state diagram of N2 on the right side\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nN2\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\n\u03b5 from accept states of N1 to start state of N2\nN1\n\nN2\n\u03b5\n\u03b5\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nAccept states of N1 to non-accept states\nN\n\nN1\n\nN2\n\u03b5\n\u03b5\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\nStar operator is similar to concatenation except that it can be\nconcatenated any number of times:\nA\u2217 = {x1 x2 x3 . . . xk | k \u2265 0 and xi \u2208 A}\nand\n\u03b5 \u2208 A\u2217\nN1\n\nfor any language A\nN\n\u03b5\n\u03b5\n\u03b5\n\nN1 recognizes a regular language A\nN recognizes A\u2217 (A\u2217 is regular)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nLet N1 = (Q1 , \u03a3, \u03b41 , q1 , F1 ) recognizes A1 .\nTo construct N = (Q, \u03a3, \u03b4, q0 , F ) to recognizes A\u22171 :\n1\n2\n3\n4\n\nQ = {q0 } \u222a Q1\nThe state q0 is the start state of N\nThe set of accept state F = {q0 } \u222a F1\n\u03b4 is given by\n\uf8f1\n\uf8f4\n\u03b41 (q, a)\nq \u2208 Q1 and q 6\u2208 F1\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\nq \u2208 F1 and a 6= \u03b5\n\uf8f2\u03b41 (q, a)\n\u03b4(q, a) = \u03b41 (q, a) \u222a {q1 } q \u2208 F1 and a = \u03b5\n\uf8f4\n\uf8f4\n\uf8f4\n{q1 }\nq = q0 and a = \u03b5\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f3\u2205\nq = q0 and a 6\u2208 \u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nGiven state diagrams of finite-state machines N1\nTo draw a state diagram of a new machine N where\nL(N ) = L(N1 )\u2217 :\n1\n2\n3\n\n4\n\nDraw the state diagram of N1\nAdd a new start state and make it an accept state\nAdd \u03b5 transition from the new start state to the start state of\nN1\nFor each original accept state of N1 , add \u03b5 transition to the\noriginal start state of N1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nDraw the state diagram of N1\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nAdd a new start state and make it an accept state\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nAdd \u03b5 from thew new start state to the original start state of\nN1\nN1\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nFor each original accept state of N1 , add \u03b5 transition to the\noriginal start state of N1\nN\n\nN1\n\u03b5\n\u03b5\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fConclusions\n\nA Nondeterministic Finite Automata (NFA) has an equivalent\nDeterministic Finite Automata (DFA)\nThe algorithm how to convert from an NFA N to an\nequivalent DFA D where L(N ) = L(D) has been discussed\n\nThe set of all regular languages is closed under union,\nconcatenation, and star operations:\nIf A and B are regular languages, A \u222a B is a regular language\nIf A and B are regular languages, AB (A \u25e6 B) is a regular\nlanguage\nIf A is a regular language, A\u2217 is a regular language\n\nThe proof process also gives us an algorithm how to construct\nDFAs\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\f", "Comments": [], "label": [[0, 15, "Concept"], [113, 128, "Concept"], [134, 167, "Concept"], [190, 191, "Concept"], [212, 213, "Concept"], [241, 271, "Concept"], [273, 276, "Concept"], [282, 315, "Concept"], [317, 320, "Concept"], [323, 326, "Concept"], [358, 374, "Concept"], [384, 390, "Concept"], [398, 406, "Concept"], [407, 410, "Concept"], [447, 453, "Concept"], [471, 474, "Concept"], [506, 509, "Concept"], [634, 649, "Concept"], [666, 669, "Concept"], [729, 734, "Concept"], [967, 972, "Concept"], [981, 989, "Concept"], [1112, 1128, "Concept"], [1159, 1164, "Concept"], [1245, 1248, "Concept"], [1250, 1268, "Concept"], [1314, 1320, "Concept"], [1404, 1419, "Concept"], [1457, 1460, "Concept"], [1462, 1480, "Concept"], [1623, 1638, "Concept"], [1676, 1679, "Concept"], [1681, 1699, "Concept"], [1856, 1871, "Concept"], [1909, 1912, "Concept"], [1914, 1932, "Concept"], [2099, 2114, "Concept"], [2152, 2155, "Concept"], [2157, 2174, "Concept"], [2361, 2376, "Concept"], [2414, 2417, "Concept"], [2419, 2437, "Concept"], [2646, 2661, "Concept"], [2699, 2702, "Concept"], [2704, 2722, "Concept"], [3003, 3015, "Concept"], [3054, 3069, "Concept"], [3100, 3108, "Concept"], [3127, 3134, "Concept"], [3251, 3254, "Concept"], [3302, 3305, "Concept"], [3357, 3367, "Concept"], [3518, 3529, "Concept"], [3656, 3671, "Concept"], [3699, 3702, "Concept"], [3800, 3806, "Concept"], [3941, 3949, "Concept"], [3950, 3951, "Concept"], [3982, 3992, "Concept"], [3997, 4005, "Concept"], [4042, 4049, "Concept"], [4055, 4056, "Concept"], [4153, 4168, "Concept"], [4203, 4204, "Concept"], [4235, 4245, "Concept"], [4250, 4258, "Concept"], [4415, 4430, "Concept"], [4456, 4464, "Concept"], [4465, 4466, "Concept"], [4497, 4507, "Concept"], [4512, 4520, "Concept"], [4570, 4571, "Concept"], [4682, 4697, "Concept"], [4703, 4759, "Concept"], [4763, 4795, "Concept"], [4834, 4835, "Concept"], [4862, 4863, "Concept"], [4876, 4884, "Concept"], [4885, 4886, "Concept"], [4889, 4890, "Concept"], [4893, 4895, "Concept"], [4900, 4901, "Concept"], [4910, 4929, "Concept"], [4931, 4933, "Concept"], [4936, 4937, "Concept"], [4950, 4951, "Concept"], [4960, 4968, "Concept"], [4972, 4973, "Concept"], [5004, 5006, "Concept"], [5009, 5010, "Concept"], [5018, 5029, "Concept"], [5030, 5031, "Concept"], [5050, 5063, "Concept"], [5078, 5081, "Concept"], [5115, 5120, "Concept"], [5204, 5210, "Concept"], [5220, 5221, "Concept"], [5222, 5224, "Concept"], [5233, 5235, "Concept"], [5290, 5305, "Concept"], [5355, 5356, "Concept"], [5380, 5381, "Concept"], [5395, 5397, "Concept"], [5410, 5411, "Concept"], [5559, 5572, "Concept"], [5612, 5623, "Concept"], [5624, 5625, "Concept"], [5681, 5696, "Concept"], [5702, 5705, "Concept"], [5710, 5713, "Concept"], [5715, 5718, "Concept"], [5773, 5776, "Concept"], [5777, 5780, "Concept"], [5812, 5815, "Concept"], [5825, 5838, "Concept"], [5851, 5859, "Concept"], [5889, 5892, "Concept"], [5925, 5929, "Concept"], [6013, 6016, "Concept"], [6025, 6028, "Concept"], [6077, 6092, "Concept"], [6113, 6116, "Concept"], [6124, 6127, "Concept"], [6635, 6650, "Concept"], [6671, 6675, "Concept"], [6680, 6684, "Concept"], [6692, 6725, "Concept"], [6744, 6774, "Concept"], [6785, 6786, "Concept"], [6788, 6789, "Concept"], [6791, 6792, "Concept"], [6794, 6796, "Concept"], [6799, 6800, "Concept"], [6810, 6813, "Concept"], [6831, 6839, "Concept"], [6870, 6873, "Concept"], [6884, 6885, "Concept"], [6887, 6888, "Concept"], [6905, 6916, "Concept"], [6958, 6971, "Concept"], [7063, 7075, "Concept"], [7131, 7146, "Concept"], [7164, 7165, "Concept"], [7191, 7194, "Concept"], [7212, 7220, "Concept"], [7295, 7296, "Concept"], [7298, 7299, "Concept"], [7333, 7334, "Concept"], [7344, 7345, "Concept"], [7407, 7418, "Concept"], [7477, 7492, "Concept"], [7519, 7522, "Concept"], [7633, 7634, "Concept"], [7834, 7849, "Concept"], [7879, 7899, "Concept"], [7904, 7923, "Concept"], [7924, 7925, "Concept"], [7933, 7936, "Concept"], [8030, 8033, "Concept"], [8074, 8077, "Concept"], [8200, 8215, "Concept"], [8732, 8747, "Concept"], [9138, 9153, "Concept"], [9171, 9184, "Concept"], [9414, 9417, "Concept"], [9514, 9517, "Concept"], [9521, 9524, "Concept"], [9530, 9538, "Concept"], [9569, 9575, "Concept"], [9634, 9642, "Concept"], [9745, 9753, "Concept"], [9767, 9772, "Concept"], [9803, 9808, "Concept"], [9830, 9837, "Concept"], [10039, 10054, "Concept"], [10064, 10067, "Concept"], [10071, 10074, "Concept"], [10080, 10088, "Concept"], [10094, 10097, "Concept"], [10126, 10139, "Concept"], [10145, 10155, "Concept"], [10158, 10166, "Concept"], [10188, 10191, "Concept"], [10388, 10400, "Concept"], [10456, 10471, "Concept"], [10508, 10511, "Concept"], [10582, 10583, "Concept"], [10593, 10594, "Concept"], [10716, 10731, "Concept"], [10887, 10898, "Concept"], [10961, 10974, "Concept"], [11108, 11123, "Concept"], [11152, 11172, "Concept"], [11177, 11198, "Concept"], [11206, 11209, "Concept"], [12210, 12225, "Concept"], [12981, 12996, "Concept"], [13021, 13040, "Concept"], [13188, 13201, "Concept"], [13342, 13357, "Concept"], [13366, 13385, "Concept"], [13415, 13425, "Concept"], [13428, 13444, "Concept"], [13450, 13460, "Concept"], [13463, 13479, "Concept"], [13484, 13494, "Concept"], [13511, 13518, "Concept"], [13567, 13582, "Concept"], [13588, 13607, "Concept"], [13652, 13662, "Concept"], [13701, 13711, "Concept"], [13756, 13766, "Concept"], [13810, 13815, "Concept"], [13826, 13837, "Concept"], [13854, 13866, "Concept"], [13879, 13880, "Concept"], [14055, 14070, "Concept"], [14076, 14095, "Concept"], [14113, 14127, "Concept"], [14131, 14152, "Concept"], [14173, 14186, "Concept"], [14255, 14268, "Concept"], [14300, 14313, "Concept"], [14349, 14360, "Concept"], [14365, 14378, "Concept"], [14392, 14403, "Concept"], [14411, 14423, "Concept"], [14500, 14515, "Concept"], [14521, 14540, "Concept"], [14626, 14641, "Concept"], [14647, 14666, "Concept"], [14759, 14774, "Concept"], [14780, 14799, "Concept"], [14818, 14829, "Concept"], [14906, 14925, "Concept"], [14940, 14953, "Concept"], [15017, 15032, "Concept"], [15038, 15065, "Concept"], [15083, 15093, "Concept"], [15103, 15113, "Concept"], [15196, 15208, "Concept"], [15442, 15454, "Concept"], [15638, 15650, "Concept"], [15804, 15831, "Concept"], [15863, 15873, "Concept"], [15876, 15892, "Concept"], [15898, 15908, "Concept"], [15911, 15927, "Concept"], [15932, 15942, "Concept"], [15953, 15960, "Concept"], [16030, 16057, "Concept"], [16102, 16112, "Concept"], [16151, 16161, "Concept"], [16206, 16216, "Concept"], [16268, 16279, "Concept"], [16296, 16308, "Concept"], [16316, 16317, "Concept"], [16536, 16563, "Concept"], [16581, 16595, "Concept"], [16599, 16620, "Concept"], [16641, 16654, "Concept"], [16724, 16737, "Concept"], [16770, 16783, "Concept"], [16818, 16830, "Concept"], [16847, 16859, "Concept"], [16867, 16878, "Concept"], [16896, 16909, "Concept"], [16985, 17001, "Concept"], [17006, 17032, "Concept"], [17054, 17068, "Concept"], [17142, 17156, "Concept"], [17163, 17190, "Concept"], [17211, 17225, "Concept"], [17304, 17318, "Concept"], [17326, 17352, "Concept"], [17371, 17384, "Concept"], [17394, 17405, "Concept"], [17473, 17488, "Concept"], [17494, 17521, "Concept"], [17533, 17547, "Concept"], [17638, 17652, "Concept"], [17659, 17677, "Concept"], [17688, 17702, "Concept"], [17716, 17728, "Concept"], [17752, 17764, "Concept"], [17853, 17861, "Concept"], [17889, 17905, "Concept"], [17987, 18003, "Concept"], [18007, 18020, "Concept"], [18071, 18081, "Concept"], [18126, 18136, "Concept"], [18187, 18198, "Concept"], [18215, 18227, "Concept"], [18243, 18244, "Concept"], [18478, 18493, "Concept"], [18499, 18517, "Concept"], [18535, 18549, "Concept"], [18553, 18574, "Concept"], [18588, 18601, "Concept"], [18664, 18677, "Concept"], [18694, 18705, "Concept"], [18721, 18733, "Concept"], [18738, 18750, "Concept"], [18764, 18775, "Concept"], [18783, 18794, "Concept"], [18819, 18831, "Concept"], [18844, 18856, "Concept"], [18873, 18884, "Concept"], [18939, 18954, "Concept"], [18960, 18978, "Concept"], [18999, 19012, "Concept"], [19070, 19085, "Concept"], [19091, 19109, "Concept"], [19131, 19142, "Concept"], [19158, 19169, "Concept"], [19222, 19237, "Concept"], [19243, 19261, "Concept"], [19293, 19304, "Concept"], [19321, 19332, "Concept"], [19392, 19407, "Concept"], [19413, 19431, "Concept"], [19461, 19473, "Concept"], [19486, 19498, "Concept"], [19515, 19526, "Concept"], [19593, 19608, "Concept"], [19629, 19661, "Concept"], [19663, 19666, "Concept"], [19686, 19715, "Concept"], [19717, 19720, "Concept"], [19759, 19762, "Concept"], [19782, 19785, "Concept"], [19842, 19859, "Concept"], [19863, 19881, "Concept"], [19883, 19896, "Concept"], [19902, 19917, "Concept"], [19934, 19950, "Concept"], [19964, 19980, "Concept"], [19996, 20013, "Concept"], [20031, 20047, "Concept"], [20058, 20074, "Concept"], [20084, 20100, "Concept"], [20164, 20168, "Concept"], [20217, 20232, "Concept"]]}
{"id":294, "segment": "dev_set", "course": "cs0449", "lec": "lec11", "text":"11\n\nHow\nPrograms\n\nAre Managed\n\nCS/COE 0449\nIntroduction to\nSystems Software\n\nLuis Oliveira\n(with content borrowed from wilkie and Vinicius Petrucci)\n\n\fWhere\u2019s the Lie?\nAnd other operating systems questions.\n\n2\n\n\fOn the last episode\u2026\n\u2022 Programs are loaded into memory by the\noperating system.\n\u2022 They have to exist in memory before they can\nbe executed.\n\nKernel Memory\nstack\nlibz.so .data\n\nlibz.so .text\n\n\u2022 Programs go through a lot of trouble to have\nall their data/code in memory.\n\n.bss\n.data\n\n.text\n\n3\n\n3\n\n\fThe Lie\n\u2022 Programs are told that they are\nthe only things running\u2026\n\u2022 The only things in memory\u2026\n\u2022 We know that this is not true!\n\u2022 Operating Systems are big liars\ncrafting illusions.\n\n4\n\n\fThe Truth\n\u2022 In reality, many programs can be running at the same time.\n\u2022 Each program, when running, is typically called a process.\n\u25aa A multitasking OS is (a rather common) one that supports concurrent\nprocesses.\n\n\u2022 The OS must handle switching from one process to another.\n\u25aa Which processes get to run?\n\u25aa What if you have more processes than CPUs?\n\u25aa When do you switch from one to another?\n\u25aa What if one is more urgent??\n5\n\n\fMy process is one of method\u2026\n\u2022 A process is an abstraction representing a single instance of a program.\n\u25aa An executable represents the initial state of a program and thus the process.\n\u25aa A program can be instantiated multiple times, if needed.\n\u25aa Each one would be a separate process\u2026 of the same program.\n\u25aa Note: A processor is the hardware unit that executes a process. (makes sense!!)\n\n\u2022 The Operating System defines what a process and its abstraction is.\n\u25aa There is an OS representation and metadata associated with a process.\n\u25aa The OS maintains two key lies:\n\n\u2022 The control flow (exclusive use of CPU): as defined by the code (this lecture)\n\u2022 The memory layout (exclusive use of memory): defined by executable/code (next lecture)\n\n\u2022 We are focusing on the control flow, here.\n\n\u25aa How do we determine when a program runs? When does the lie\u2026 break down?\n6\n\n\fCPU Scheduling\nEeny Meeny Miney Moe\n\n7\n\n\fThe Reality\n\u2022 Let us say that we have a machine with four separate CPUs.\n\u25aa You could run four processes concurrently (at the same time) relatively easily.\n\u25aa What about the fifth?\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State:\nRegisters\n,\n\n8\n\n\fMultiplexing the CPU\n\u2022 Truth be told, we often have fewer resources than needed.\n\u25aa Sharing a common resource is called multiplexing.\n\n\u2022 Now, consider a machine with a single CPU.\n\nProcess\n\nstack\n.bss\n\n\u2022 We often want to run something in the foreground.\n\n\u25aa Word processor, web browser, minesweeper\u2026 whatever.\n\n.data\n\n\u2022 We still want some things running the background\u2026\n\n.text\n\n\u2022 We need to switch from one process to another at\nparticular times.\n\nCPU State:\nRegisters\n,\n\n\u25aa Music player, virus scanner, chat client.\n\n\u25aa Yet\u2026 we have to keep the illusion that the program is\nuninterrupted\u2026\n\nCPU\n\n9\n\n\fNa\u00efve Campbell was great in The Craft (1996)\n\u2022 One way is to run processes sequentially (the na\u00efve solution)\n\u25aa When one process ends\u2026 run the next.\n\u25aa Yet that\u2019s not very flexible. (Stop your music player to open a PDF)\n\u2022 Humans are in the mix! We need computers to be useful to us.\n\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nMemory\nCPU\n\n10\n\n\fThe cruel passage of time\n\u2022 To multiplex the CPU, we quickly switch from process to process.\n\u2022 The OS retains/restores the state (context) of the process.\n\u25aa The OS must store this as a form of process metadata in memory.\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nCPU State C:\nRegisters\n,\n\nCPU State D:\nRegisters\n,\n\nMemory\nCPU\n\n11\n\n\fThe Context Switch\n\u2022 When an Operating System goes from\none process to another, it performs a\ncontext switch.\n\u2022 This swaps out the CPU state of one\nprocess for the next one to run.\n1. Store registers (including stack\npointer and program counter) to\nmemory.\n2. Determine next process to run.\n3. Load those registers from memory.\nSwitch memory space. (see next lecture:\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nContext\n\nContext\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nvirtual memory)\n\n4. Jump to old program counter. Go!\n\nCPU\n\n12\n\n\fA deeper dive\n\u2022 When we pause a process\u2026 we store the state of registers (context)\nx86-64 (gas / AT&T syntax) \u2013 Process A\n\nContext (A)\n\nx86-64 (gas / AT&T syntax) \u2013 Process B\n\nCPU State\n\n13\n\n\fWhen is a good time to call you?\n\u2022 When should a program pause and let another one go?\n\u2022 When programs voluntarily pause, this is called cooperative\nscheduling.\n\u25aa They may give up control at convenient points such as system calls.\n\n\u2022 We often do not expect this, so modern Operating Systems forcibly\npause programs from time to time. Called preemptive scheduling.\n\u25aa Processes give up control when hardware interjects via an \u201cinterrupt\u201d\n\u25aa How does this work?\n\n14\n\n\fRound Robin Scheduling\n\u2022 One method is to just cycle through each process each for equal time.\n\u25aa This is an element of \u201cfairness\u201d \u2026 each gets equal stake.\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nCPU State C:\nRegisters\n,\n\nCPU State D:\nRegisters\n,\n\nMemory\nCPU\n\n15\n\n\fProblems with \u201cfairness\u201d\n\u2022 Let\u2019s say I want to play Doom Eternal\n\u25aa In round-robin, I give the video game 25% of my resources.\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nCPU State C:\nRegisters\n,\n\nCPU State D:\nRegisters\n,\n\nThis should get\nmore priority.\n\nCPU\n\n16\n\n\fI have priorities!\n\u2022 Round-Robin schedulers are fair; then we tweak to meet expectations.\n\u25aa How might we add a sense of \u201cpriority\u201d to the scheduler?\n\n\u2022 Let\u2019s look at a visualization of how processes are currently scheduled\nwith a round-robin scheme: (Doom gets only 25% of resources!) \uf04c\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nA\n\nA\nB\n\nB\n\nC\n50ms / 200ms = 25%\n\n17\n\n\fI have priorities!\n\u2022 Round-Robin schedulers are fair; then we tweak to meet expectations.\n\u25aa How might we add a sense of \u201cpriority\u201d to the scheduler?\n\n\u2022 We could give some tasks a longer quantum.\n\u25aa A quantum is the amount of time a task is guaranteed to run.\n100ms\n\n50ms\n\n50ms\n\n50ms\n\n100ms\n\nA\nB\n\nC\n100ms / 250ms = 40%\n\n18\n\n\fI have priorities!\n\u2022 Round-Robin schedulers are fair; then we tweak to meet expectations.\n\u25aa How might we add a sense of \u201cpriority\u201d to the scheduler?\n\n\u2022 We could increase the chance a specific task is scheduled.\n\u25aa Round-robin + priority: two queues, switch back and forth and round-robin\nwithin them.\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nA\nB\n\nC\n100ms / 200ms = 50%\n\n19\n\n\fI have priorities!\n\u2022 Round-Robin schedulers are fair; then we tweak to meet expectations.\n\u25aa How might we add a sense of \u201cpriority\u201d to the scheduler?\n\n\u2022 We can then always do some sort of combination.\n\u25aa Hybrid approaches do seem very alluring. Hmm. The power of trade-offs.\n100ms\n\n50ms\n\n100ms\n\n50ms\n\nA\nB\n200ms / 300ms = 67%\n\n20\n\n\fIdeal circumstances: Human perception\n\u2022 The reality: (very quickly switching)\n100ms\n\n50ms\n\n100ms\n\n50ms\n\nA\nB\n\n\u2022 The illusion: (an ideal: perceived concurrency\u2026 no delay noticed)\n100ms\n\n50ms\n\n100ms\n\n50ms\n\nA\nB\n\n21\n\n\fThere is no optimal.\n\u2022 Like many of the topics in this course, there is no possible \u201cbest\u201d.\n\u25aa That is, there is no way to perfectly schedule general processes.\n\n\u2022 Consider: It would be very lovely to schedule a process that handles\nsome user input, like a button press or a network request.\n\u25aa Perfect situation: the OS schedules the task that handles the button\nimmediately before the button is pressed. What luck!\n\n\u2022 However: You do not know when that button will be pressed.\n\u25aa Maybe it is a sensor, like for detecting a fire!\n\u2022 FIRE SEEMS IMPORTANT!! \u2026 and yet.\n\n\u2022 Moral of the story: humans being users make things very hard.\n\n22\n\n\fAgain, it is not magic.\n\u2022 But\u2026 wait\u2026 how does hardware stop a program?\n\u25aa For instance, when the quantum is up, how does the OS get control and\nperform the context switch?\n\n\u2022 Ah, the hardware has support for \u201cbeing rude\u201d which is called an\ninterrupt.\n\u25aa A programmable mechanism for asynchronously calling a function when a\nparticular type of error or signal is noticed.\n\n\u2022 Let\u2019s take a look.\n\n23\n\n\fInterrupts\nIt\u2019s rude\u2026 but necessary.\n\n24\n\n\fHow rude\n\u2022 An interrupt is an exceptional state that diverts execution from its\nnormal flow.\n\u25aa When issued by hardware, sometimes referred to as a hardware exception\n\u2022 For instance, a hardware timer or external event caused by a sensor.\n\n\u25aa When caused by a user process, sometimes referred to as a software trap\n\u2022 Divide-by-zero error, some floating-point exceptions, system calls.\n\n\u2022 We have seen these before!\n\u25aa System calls are a type of interrupt (software trap).\n\u25aa This is an intentional interrupt caused by a specific program instruction.\n\u2022 The program is \u201cinterrupted\u201d while the OS performs a task.\n\n\u2022 We have also encountered them in our failures.\n\u25aa Segmentation / Protection / Page Faults are also interrupts. (trap? exception?)\n\u25aa These are (usually) unintentional interrupts caused by a generic instruction. 25\n\n\fHere are some typical UNIX/Linux system calls:\nNumber\n\nName\n\nDescription\n\nread\n\nReads bytes from an open file.\n\nwrite\n\nWrites bytes to an open file.\n\nopen\n\nOpens a file and returns the file handle.\n\nclose\n\nCloses an open file.\n\nstat\n\nReturns metadata about a file.\n\nfork\n\nSpawns a copy of the current process.\n\nexecve\n\nLoads and then executes a program.\n\n26\n\n\fSystem calls\n\u2022 System calls: predictable, intentional interrupts at specific instructions.\n\u25aa Interrupts occurring at specific instructions are synchronous interrupts.\n\n\u2022 In x86-64, the program pauses at a\ninstruction, then resumes\nat the following instruction when the OS finishes the task\n\u25aa (\u2026 and the OS calls the\n\ninstruction)\n\n\u2022 Let\u2019s take a deeper look.\n27\n\n\fHello, Hello World\nx86-64 (gas / AT&T syntax) - Application\n\nx86-64 (gas / AT&T syntax) - Kernel (main OS program)\n\nPre-registered to be called on syscall\nSaves CPU state\n\nA jump to the kernel\n\nPerforms action\nRestores state\n\nReturns to process\n\n28\n\n\fTick tock tick tock merrily sings the clock\n\u2022 A hardware timer can preempt (forcibly pause) a program at any time.\n\u25aa Interrupts that occur at any instruction are asynchronous interrupts.\n\n\u2022 In a preemptive operating system, a hardware timer is used to give a\nmaximum bound to how long a process runs.\n\u25aa Your operating system programs the timer such that it sends a signal at a\nregular interval.\n\u25aa Your operating system has a function that is called when such a signal is read.\n\u25aa That function will respond by invoking the scheduler and pausing the current\ntask and resuming or starting another.\n\n\u2022 Let\u2019s look at the basic procedure an OS uses to program an interrupt.\n29\n\n\fProgramming interruption\n\u2022 On most hardware, there is a programmable table somewhere in\nmemory that, when written to, defines where code exist to handle\neach interrupt.\n\u2022 Every possible interrupt is given a number. Segmentation faults might\nbe interrupt 10. Timers might be interrupt 0. Et cetera.\n\u2022 When an interrupt occurs, based on its interrupt number, the\ncorresponding entry in a lookup table called an interrupt vector table\nor an interrupt descriptor table would be used to determine where in\nthe kernel to jump.\n30\n\n\fThe Interrupt Table\n#\n\nValue\n\n\u2022 The interrupt table is a simple table.\n\nDescription\nDivide by zero\n\n\u2022 Fun Fact: It is often located at\naddress 0x0 in memory!\n\nOverflow\nDouble Fault\nGeneral Protection Fault\nPage Fault\nStack Fault\nAlignment Error\n...\nTimer Signal\nNetwork Device Signal\n\n\u25aa So, operating system kernels can\u2019t\nexactly always treat zero as an invalid\naddress\u2026\n\n\u2022 When a process triggers a listed\ninterrupt or external hardware sends\na signal to the interrupt controller\u2026\n\u25aa the CPU jumps to the given address.\n\nAudio Device Signal\n\n31\n\n\fAh! There art thee ol\u2019 interrupt!\n\u2022 Let\u2019s take a look at interrupt handling\u2026\nx86-64 (gas / AT&T syntax) \u2013 Process B\nA\n\nContext (A)\n\nCPU State\n\nx86-64 (gas / AT&T syntax) \u2013 Kernel\n\n\u2022 An interrupt is the likely\ncause of our prior\ninterruption.\n\u2022 The interrupt handler is the\ncode that handles context\nswitching and scheduling\n32\n\n\fOverview\n\u2022 Interrupts can be categorized in several ways:\n\u25aa They can occur outside of our program:\nhardware exceptions\n\u25aa They can occur on an instruction in our program: software trap\n\u25aa They can occur at any time:\nasynchronous interrupts\n\u25aa They can occur at specific times:\nsynchronous interrupts\n\n\u2022 Interrupts are what allow operating systems to function!\n\u25aa When you press a key on your keyboard.\n\u25aa When you receive a packet on the network.\n\u25aa When your sound card wants the next second of audio.\n\u25aa When you divide by zero\u2026\n\u2022 To then mercilessly murder your process.\n\n33\n\n\f", "Comments": [], "label": [[353, 366, "Concept"],[367, 372, "Concept"],[373, 380, "Concept"],[381, 386, "Concept"],[388, 395, "Concept"],[396, 401, "Concept"],[483, 486, "Concept"],[488, 492, "Concept"],[495, 499, "Concept"],[819, 826, "Concept"],[832, 847, "Concept"],[887, 907, "Concept"],[950, 957, "Concept"],[978, 987, "Concept"],[1024, 1033, "Concept"],[1059, 1065, "Concept"],[1125, 1132, "Concept"],[1155, 1162, "Concept"],[1231, 1241, "Concept"],[1297, 1304, "Concept"],[1396, 1403, "Concept"],[1483, 1490, "Concept"],[1547, 1554, "Concept"],[1593, 1595, "Concept"],[1642, 1649, "Concept"],[1691, 1703, "Concept"],[1772, 1785, "Concept"],[1882, 1893, "Concept"],[1980, 1994, "Concept"],[2115, 2124, "Concept"],[2200, 2205, "Concept"],[2207, 2212, "Concept"],[2214, 2219, "Concept"],[2221, 2226, "Concept"],[2228, 2232, "Concept"],[2233, 2238, "Concept"],[2239, 2244, "Concept"],[2247, 2250, "Concept"],[2251, 2256, "Concept"],[2257, 2262, "Concept"],[2264, 2268, "Concept"],[2269, 2274, "Concept"],[2275, 2280, "Concept"],[2282, 2286, "Concept"],[2287, 2292, "Concept"],[2293, 2298, "Concept"],[2311, 2320, "Concept"],[2328, 2340, "Concept"],[2447, 2459, "Concept"],[2508, 2515, "Concept"],[2517, 2522, "Concept"],[2523, 2527, "Concept"],[2637, 2642, "Concept"],[2697, 2702, "Concept"],[2717, 2723, "Concept"],[2733, 2740, "Concept"],[2785, 2794, "Concept"],[2899, 2912, "Concept"],[2989, 2998, "Concept"],[3044, 3051, "Concept"],[3207, 3212, "Concept"],[3214, 3219, "Concept"],[3221, 3226, "Concept"],[3228, 3233, "Concept"],[3235, 3239, "Concept"],[3240, 3245, "Concept"],[3246, 3251, "Concept"],[3253, 3257, "Concept"],[3258, 3263, "Concept"],[3264, 3269, "Concept"],[3271, 3275, "Concept"],[3276, 3281, "Concept"],[3282, 3287, "Concept"],[3289, 3293, "Concept"],[3294, 3299, "Concept"],[3300, 3305, "Concept"],[3355, 3364, "Concept"],[3397, 3404, "Concept"],[3408, 3415, "Concept"],[3454, 3461, "Concept"],[3470, 3477, "Concept"],[3517, 3524, "Concept"],[3545, 3550, "Concept"],[3552, 3557, "Concept"],[3559, 3564, "Concept"],[3566, 3571, "Concept"],[3573, 3577, "Concept"],[3578, 3583, "Concept"],[3584, 3589, "Concept"],[3591, 3595, "Concept"],[3596, 3601, "Concept"],[3602, 3607, "Concept"],[3609, 3613, "Concept"],[3614, 3619, "Concept"],[3620, 3625, "Concept"],[3627, 3631, "Concept"],[3632, 3637, "Concept"],[3638, 3643, "Concept"],[3658, 3667, "Concept"],[3684, 3693, "Concept"],[3710, 3719, "Concept"],[3736, 3745, "Concept"],[3770, 3784, "Concept"],[3795, 3811, "Concept"],[3826, 3833, "Concept"],[3860, 3874, "Concept"],[3914, 3921, "Concept"],[3956, 3965, "Concept"],[3977, 3990, "Concept"],[3995, 4009, "Concept"],[4041, 4048, "Concept"],[4071, 4080, "Concept"],[4101, 4113, "Concept"],[4135, 4140, "Concept"],[4142, 4147, "Concept"],[4149, 4153, "Concept"],[4154, 4159, "Concept"],[4160, 4165, "Concept"],[4167, 4171, "Concept"],[4172, 4177, "Concept"],[4178, 4183, "Concept"],[4185, 4192, "Concept"],[4194, 4201, "Concept"],[4216, 4225, "Concept"],[4242, 4251, "Concept"],[4255, 4269, "Concept"],[4287, 4302, "Concept"],[4351, 4358, "Concept"],[4382, 4391, "Concept"],[4393, 4400, "Concept"],[4431, 4438, "Concept"],[4442, 4449, "Concept"],[4484, 4491, "Concept"],[4648, 4670, "Concept"],[4728, 4740, "Concept"],[4784, 4801, "Concept"],[4852, 4873, "Concept"],[4877, 4886, "Concept"],[4936, 4945, "Concept"],[4975, 4997, "Concept"],[5041, 5048, "Concept"],[5154, 5159, "Concept"],[5161, 5166, "Concept"],[5168, 5173, "Concept"],[5175, 5180, "Concept"],[5182, 5186, "Concept"],[5187, 5192, "Concept"],[5193, 5198, "Concept"],[5200, 5204, "Concept"],[5205, 5210, "Concept"],[5211, 5216, "Concept"],[5218, 5222, "Concept"],[5223, 5228, "Concept"],[5229, 5234, "Concept"],[5236, 5240, "Concept"],[5241, 5246, "Concept"],[5247, 5252, "Concept"],[5267, 5276, "Concept"],[5293, 5302, "Concept"],[5319, 5328, "Concept"],[5345, 5354, "Concept"],[5445, 5456, "Concept"],[5553, 5557, "Concept"],[5558, 5563, "Concept"],[5564, 5569, "Concept"],[5571, 5575, "Concept"],[5576, 5581, "Concept"],[5582, 5587, "Concept"],[5589, 5593, "Concept"],[5594, 5599, "Concept"],[5600, 5605, "Concept"],[5607, 5611, "Concept"],[5612, 5617, "Concept"],[5618, 5623, "Concept"],[5638, 5647, "Concept"],[5664, 5673, "Concept"],[5690, 5699, "Concept"],[5716, 5725, "Concept"],[5750, 5758, "Concept"],[5778, 5788, "Concept"],[5792, 5814, "Concept"],[5892, 5900, "Concept"],[5909, 5918, "Concept"],[5960, 5969, "Concept"],[5984, 5993, "Concept"],[6002, 6012, "Concept"],[6139, 6149, "Concept"],[6153, 6175, "Concept"],[6253, 6261, "Concept"],[6318, 6325, "Concept"],[6331, 6338, "Concept"],[6462, 6472, "Concept"],[6476, 6498, "Concept"],[6576, 6584, "Concept"],[6655, 6664, "Concept"],[6668, 6679, "Concept"],[6682, 6690, "Concept"],[6730, 6741, "Concept"],[6831, 6841, "Concept"],[6845, 6867, "Concept"],[6945, 6953, "Concept"],[6962, 6971, "Concept"],[7299, 7310, "Concept"],[7498, 7506, "Concept"],[7515, 7524, "Concept"],[7566, 7574, "Concept"],[7577, 7584, "Concept"],[7685, 7694, "Concept"],[8097, 8104, "Concept"],[8125, 8127, "Concept"],[8157, 8170, "Concept"],[8240, 8249, "Concept"],[8398, 8408, "Concept"],[8455, 8464, "Concept"],[8588, 8606, "Concept"],[8739, 8752, "Concept"],[8809, 8821, "Concept"],[8855, 8867, "Concept"],[8882, 8891, "Concept"],[8893, 8906, "Concept"],[8934, 8943, "Concept"],[9127, 9138, "Concept"],[9148, 9158, "Concept"],[9161, 9165, "Concept"],[9167, 9176, "Concept"],[9215, 9225, "Concept"],[9297, 9309, "Concept"],[9565, 9572, "Concept"],[9624, 9636, "Concept"],[9639, 9651, "Concept"],[9717, 9727, "Concept"],[9767, 9789, "Concept"],[10078, 10084, "Concept"],[10135, 10142, "Concept"],[10174, 10180, "Concept"],[10225, 10232, "Concept"],[10287, 10300, "Concept"],[10306, 10313, "Concept"],[10356, 10366, "Concept"],[10401, 10424, "Concept"],[10434, 10461, "Concept"],[10465, 10479, "Concept"],[10526, 10533, "Concept"],[10547, 10563, "Concept"],[10641, 10657, "Concept"],[10761, 10770, "Concept"],[10874, 10876, "Concept"],[10896, 10905, "Concept"],[11070, 11079, "Concept"],[11098, 11107, "Concept"],[11156, 11165, "Concept"],[11186, 11195, "Concept"],[11220, 11229, "Concept"],[11321, 11343, "Concept"],[11350, 11376, "Concept"],[11442, 11451, "Concept"],[11474, 11489, "Concept"],[11597, 11605, "Concept"],[11644, 11654, "Concept"],[11729, 11753, "Concept"],[11845, 11854, "Concept"],[11898, 11918, "Concept"],[12008, 12017, "Concept"],[12042, 12060, "Concept"],[12104, 12111, "Concept"],[12170, 12179, "Concept"],[12233, 12250, "Concept"],[12277, 12293, "Concept"],[12298, 12308, "Concept"],[12325, 12335, "Concept"],[12413, 12432, "Concept"],[12484, 12497, "Concept"],[12528, 12551, "Concept"],[12588, 12610, "Concept"],[12614, 12624, "Concept"],[12640, 12657, "Concept"],[12872, 12879, "Concept"]]}
{"id":295, "segment": "dev_set", "course": "cs1502", "lec": "lec10_turing_machine_02", "text": "Turing Machine 02\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine Example\n\nDesign a Turing machine that recognizes the language B\nwhere\nB = {w#w | w \u2208 \u03a3\u2217 }\nOn input string w:\n1\n\n2\n\nZig-zag across the tape to corresponding positions on either\nside of the # symbol to check whether those positions contain\nthe same symbol. If they do not, or if no # is found, reject.\nCross off symbols as they are checked to keep track of which\nsymbols correspond.\nWhen all symbols to the left of the # have been crossed off,\ncheck for any remaining symbols to the right of the #. If any\nsymbols remain, reject; otherwise, accept.\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine M1\nA Turing machine that decides B = {w#w | w \u2208 \u03a3\u2217 }.\n\n1\n\nx,\nR\n\nq1\n\n0\n\nR\nx,\n\n\u2192\n\n\u2192\n\n#\u2192R\n\n0, 1 \u2192 R\n\nq2\n#\u2192R\n\nx\u2192R\n\nx\u2192R\n\nq8\nt\n\nq4\n\n\u2192R\n\n#\u2192R\n\nqaccept\n\nq5\n\n1\n\nL\nx,\n\n\u2192\n\n\u2192\n\nx,\n\nL\n\n0\n\n0, 1, x \u2192 L\n\nq6\n#\u2192L\nx\u2192R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nq7\n\n0, 1 \u2192 R\n\nq3\n\n0, 1 \u2192 L\n\nTuring Machine 02\n\nx\u2192R\n\n\fTuring Machine M1\n\u03a3 = {0, 1, #}\n\u0393 = {0, 1, #, x, t}\n1 \u2192 x, R\nRead 1, write x, and move the tape head to the right direction\n\n#\u2192R\nA shorthand notation for # \u2192 #, R\nRead #, write #, and move the tape head to the right direction\n\n0, 1 \u2192 L\nA shorthand notation representing two transitions:\n0 \u2192 L which is 0 \u2192 0, L\n1 \u2192 L which is 1 \u2192 1, L\n\nqreject is omitted\nAll missing exiting arrows go to qreject\nAssume that it moves the tape head to the right direction\nbefore entering qreject without writing a symbol (writing the\nsame symbol it read)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine M1\nComputing 01#01\n\n1\n\nx,\nR\n\nq1\n\n0, 1 \u2192 R\n\nR\n\n0\n\nx,\n\n\u2192\n\n\u2192\n\n#\u2192R\n\nq2\n#\u2192R\n\nx\u2192R\n\nx\u2192R\n\nq8\nt\n\nq4\n\n0, 1 \u2192 R\n\nq3\n\n\u2192R\n\n#\u2192R\n\nqaccept\n\nq5\n\n1\n\nL\nx,\n\n\u2192\n\n\u2192\n\nx,\nL\n\n0\n\n0, 1, x \u2192 L\n\nq6\n#\u2192L\nx\u2192R\n\nq7\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0, 1 \u2192 L\n\nTuring Machine 02\n\nx\u2192R\n\nq1 01#01\nxq2 1#01\nx1q2 #01\nx1#q4 01\nx1q6 #x1\nxq7 1#x1\nq7 x1#x1\nxq1 1#x1\nxxq3 #x1\nxx#q5 x1\nxx#xq5 1\nxx#q6 xx\nxxq6 #xx\nxq7 x#xx\nxxq1 #xx\nxx#q8 xx\nxx#xq8 x\nxx#xxq8 t\nxx#xxtqaccept\n\n\fTuring Machine M1\nComputing 01#10\n\n1\n\nx,\nR\n\nq1\n\n0, 1 \u2192 R\n\nR\n\n0\n\nx,\n\n\u2192\n\n\u2192\n\n#\u2192R\n\nq2\n#\u2192R\n\nx\u2192R\n\nx\u2192R\n\nq8\nt\n\nq4\n\n0, 1 \u2192 R\n\nq3\n\n\u2192R\n\n#\u2192R\n\nqaccept\n\nq5\n\n1\n\nL\nx,\n\n\u2192\n\n\u2192\n\nx,\nL\n\n0\n\n0, 1, x \u2192 L\n\nq6\n#\u2192L\nx\u2192R\n\nq7\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0, 1 \u2192 L\n\nTuring Machine 02\n\nx\u2192R\n\nq1 01#10\nxq2 1#10\nx1q2 #10\nx1#q4 10\nx1#1qreject 0\n\n\fTuring Machine M1\nComputing 01 (no # symbol)\n\n1\n\nx,\nR\n\nq1\n\n0, 1 \u2192 R\n\nR\n\n0\n\nx,\n\n\u2192\n\n\u2192\n\n#\u2192R\n\nq2\n#\u2192R\n\nx\u2192R\n\nx\u2192R\n\nq8\nt\n\nq4\n\n0, 1 \u2192 R\n\nq3\n\n\u2192R\n\n#\u2192R\n\nqaccept\n\nq5\n\n1\n\nL\nx,\n\n\u2192\n\n\u2192\n\nx,\nL\n\n0\n\n0, 1, x \u2192 L\n\nq6\n#\u2192L\nx\u2192R\n\nq7\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0, 1 \u2192 L\n\nTuring Machine 02\n\nx\u2192R\n\nq1 01\nxq2 1\nx1q2 t\nx1tqreject\n\n\fTuring Machine Example\n\nDesign a Turing machine that recognizes the language A\nwhere\nn\nA = {02 | n \u2265 0}\nOn input string w:\n1\n2\n3\n\n4\n5\n\nSweep left to right across the tape, crossing off every other 0\nIf in stage 1 the tape contained a single 0, accept\nIf in stage 1 the tape contained more than a single 0 and the\nnumber of 0s was odd, reject\nReturn the head to the left-hand end of the tape\nGo to stage 1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fMoving the Tape Head Back\nSuppose we want to move the tape head back to the left most\nend of the tape\nNeed a state to do that\n0, 1, x \u2192 L\n\nThis will result in an infinite loop\n\nRecall that if the tape head is at the left-most square and the\ntransition is L, it will stay at the same place\nThere is no signal telling a TM that its tape head is currently\nat the left-most square\n\nThe trick is to mark the left-most symbol (depending on \u0393)\nTurn 0 or 1 to t\nTurn 0 to 0\u0307 or x\nTurn 1 to 1\u0307 or t\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine M2\nn\n\nA Turing machine that decides A = {02 | n \u2265 0}.\n0\u2192L\nx\u2192L\n\n\u2192\nt\n\n\u2192R\nx\u2192R\n\n0 \u2192 x, R\n\nt\n\nt\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n\u2192R\n\nq3\n\n0\u2192R\n\nqaccept\n\nt\n\nx\u2192R\n\nL\n\nq2\n\n0 \u2192 t, R\n\nqreject\n\n\u2192\n\nx\u2192R\nq1\n\nt\n\nR\n\nq5\n\n\u2192R\n\nTuring Machine 02\n\n0 \u2192 x, R\n\nq4\n\nx\u2192R\n\n\fTuring Machine M2\nComputing 0000\nq1 0000\nq2 000\ntxq3 00\ntx0q4 0\ntx0xq3 t\ntx0q5 x\ntxq5 0x\ntq5 x0x\nq5 tx0x\ntq2 x0x\ntxq2 0x\ntxxq3 x\ntxxxq3 t\ntxxq5 x\ntxq5 xx\ntq5 xxx\nq5 txxx\ntq2 xxx\ntxq2 xx\ntxxq2 x\ntxxxq2 t\ntxxxtqaccept\nt\n\n0\u2192L\nx\u2192L\n\n\u2192\nt\n\n\u2192R\nx\u2192R\n\n\u2192R\n\nqaccept\n\nt\n\nq3\n\n0 \u2192 x, R\n\nt\n\nx\u2192R\n\nL\n\nq2\n\n0 \u2192 t, R\n\nt\n\nqreject\n\n\u2192\n\nx\u2192R\nq1\n\nt\n\nR\n\nq5\n\n0\u2192R\n\n0 \u2192 x, R\n\nq4\n\nx\u2192R\n\n\u2192R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine M2\n\nComputing 000\n0\u2192L\nx\u2192L\n\n\u2192\nt\n\n\u2192R\nx\u2192R\n\n\u2192R\n\nqaccept\n\nt\n\nq3\n\n0 \u2192 x, R\n\nt\n\nx\u2192R\n\nL\n\nq2\n\n0 \u2192 t, R\n\nt\n\nqreject\n\n\u2192\n\nx\u2192R\nq1\n\nt\n\nR\n\nq5\n\n0\u2192R\n\n0 \u2192 x, R\n\nq4\n\nx\u2192R\n\n\u2192R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nq1 000\nq2 00\ntxq3 0\ntx0q4 t\ntx0tqreject\nt\n\nTuring Machine 02\n\n\fDesigning a TM\nDesigning a TM in a form of a state diagram is hard\nNeed to keep in mind out the content of the tape\nNeed to worry about moving tape head\n\nBut for a simple problem, it is not that bad\nLet\u2019s create a TM that shift all symbols on the tape to the\nright by one square by inserting the blank symbol at the\nleft-most square and move the tape head back to the\nleft-most square\nLet \u03a3 = {0, 1} and \u0393 = {0, 1, t}\nHere are some input/output (on the tape)\nInput\nOutput\n01101 t01101\n0\nt0\n111\nt111\n\u03b5\n\u03b5\nNote that this TM always accepts all strings over \u03a3\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fDesigning a TM\nSolution\n0\u2192R\n\nq1\n0 \u2192 t, R\n1 \u2192 0, R\n\n0 \u2192 1, R\n\nq0\n\nt\n\n1 \u2192 t, R\n\n\u2192 0, L\n0, 1 \u2192 L\n\nq3\nt\n\n\u2192 1, L\n\nt\n\n\u2192L\nqaccept\n\nq2\n\n1\u2192R\nt\n\n\u2192L\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\f", "Comments": [], "label": [[0, 14, "Concept"], [112, 126, "Concept"], [165, 179, "Concept"], [185, 195, "Concept"], [200, 208, "Concept"], [281, 285, "Concept"], [439, 445, "Concept"], [667, 673, "Concept"], [686, 692, "Concept"], [742, 756, "Concept"], [762, 776, "Concept"], [782, 796, "Concept"], [802, 809, "Concept"], [912, 919, "Concept"], [1050, 1064, "Concept"], [1075, 1089, "Concept"], [1093, 1094, "Concept"], [1107, 1108, "Concept"], [1166, 1175, "Concept"], [1268, 1277, "Concept"], [1349, 1360, "Concept"], [1411, 1418, "Concept"], [1463, 1470, "Concept"], [1496, 1505, "Concept"], [1545, 1552, "Concept"], [1659, 1673, "Concept"], [1679, 1693, "Concept"], [1809, 1816, "Concept"], [1932, 1946, "Concept"], [2125, 2132, "Concept"], [2135, 2149, "Concept"], [2265, 2272, "Concept"], [2388, 2402, "Concept"], [2452, 2459, "Concept"], [2465, 2478, "Concept"], [2605, 2612, "Concept"], [2728, 2742, "Concept"], [2774, 2781, "Concept"], [2784, 2798, "Concept"], [2817, 2831, "Concept"], [2837, 2847, "Concept"], [2852, 2860, "Concept"], [2950, 2954, "Concept"], [3001, 3005, "Concept"], [3028, 3034, "Concept"], [3053, 3057, "Concept"], [3119, 3125, "Concept"], [3137, 3141, "Concept"], [3170, 3174, "Concept"], [3237, 3251, "Concept"], [3268, 3277, "Concept"], [3311, 3320, "Concept"], [3354, 3358, "Concept"], [3366, 3371, "Concept"], [3453, 3462, "Concept"], [3498, 3508, "Concept"], [3575, 3577, "Concept"], [3587, 3596, "Concept"], [3691, 3692, "Concept"], [3794, 3808, "Concept"], [3813, 3828, "Concept"], [3837, 3851, "Concept"], [3857, 3864, "Concept"], [3981, 3988, "Concept"], [4015, 4022, "Concept"], [4049, 4063, "Concept"], [4089, 4102, "Concept"], [4296, 4303, "Concept"], [4333, 4340, "Concept"], [4387, 4394, "Concept"], [4492, 4506, "Concept"], [4512, 4526, "Concept"], [4572, 4578, "Concept"], [4625, 4632, "Concept"], [4762, 4769, "Concept"], [4805, 4807, "Concept"], [4820, 4822, "Concept"], [4838, 4851, "Concept"], [4904, 4908, "Concept"], [4936, 4945, "Concept"], [5007, 5009, "Concept"], [5040, 5044, "Concept"], [5139, 5148, "Concept"], [5182, 5183, "Concept"], [5197, 5198, "Concept"], [5311, 5313, "Concept"], [5346, 5347, "Concept"], [5395, 5409, "Concept"], [5427, 5429, "Concept"], [5530, 5537, "Concept"], [5601, 5615, "Concept"]]}
