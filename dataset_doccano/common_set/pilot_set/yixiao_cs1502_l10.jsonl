{"id":293,"text":"Finite Automata 03\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fNondeterministic Finite Automaton\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\nLet Σ = {0, 1}\nDifferent between Deterministic Finite Automaton (DFA) and\nNondeterministic Finite Automaton (NFA):\nDFA always has exactly one exiting transition arrow for each\nsymbol in the alphabet\nNFA may have none, one, or many exiting arrows for each\nsymbol\n\nDFA have no arrow with the label ε\nNFA may have Zero, one, or many arrows exiting from each\nstate with the label ε.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fCompute an NFA\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\nIf you encounter a state with multiple way to proceed for a\nregular input:\nThe machine splits into multiple copies of itself\nThe machines follow all the possibilities in parallel.\nEach copy of the machine takes one of the possible ways.\n\nIf you encounter a state with an ε symbol as an exiting arrow:\nWithout reading any input, the machine splits into multiple\ncopies.\nEach follows each of the exiting ε-labeled arrows, and\nOne stays at the current state.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nSymbol read\n\nq1\n\nStart\n\n0, 1\n\n0, 1\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nSymbol read\n\nq1\n\nStart\n\n0\n\nq1\n\n0, 1\n\n0, 1\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq3\n\n0, 1\n\n0, 1\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nq1\n\nFinite Automata 03\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nq1\n\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nq1\n\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\nq2\n\nq3\n\nq4\n\nq4\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, ε\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nq1\n\n0, ε\n\nq2\n\n1\n\nq3\n\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\nq1\n\nq2\n\nq3\n\nq4\n\nq4\n\nq1\n\nq3\n\nq4\n\nq4\n\n1\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nIf there is at least one copy in an accept state,\nthe machine accept the input string.\nFinite Automata 03\n\nq4\n\n\fExample\nLet A be the language consisting of all strings over {0, 1}\ncontaining a 1 in the third position from the end (e.g., 000100 is in\nA but 0011 is not in A).\nDesign a DFA for this problem is quite complicate\nDesign an NFA is easier\n0, 1\n\n1\n\nq1\n\n0, 1\n\nq2\n\n0, 1\n\nq3\n\nq4\n\nThe transition from q1 to q2 is our guess that this is the 1 in\nthe third position from the end.\nIf our guess is wrong:\nThe input string is shorter, it will end at reject state.\nThe input string is longer, the machine will die but other one\nremains alive.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nAn equivalent DFA machine\n0\n\n0\n\n0\n\nq000\n1\n1\n\n0\n\nq100\n\nq010\n\nq110\n1\n\n0\n\n1\n\n0\n\n0\n\n0\n\nq001\n\nq101\n\n1\n\nq011\n\n1\n\n1\n\nName states according to the last three symbols\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\nq111\n\n1\n\n\fExample\nSuppose the alphabet Σ is {0}. Design a machine that recognizes\nthe language A where A is an empty string or all strings over Σ\nthat their length is a multiple of 2 or 3.\n0\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nSuppose the alphabet Σ is {0}. Design a machine that recognizes\nthe language A where A is an empty string or all strings over Σ\nthat their length is a multiple of 2 or 3.\n0\n\n0\n\n0\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n\nFinite Automata 03\n\n\fExample\nSuppose the alphabet Σ is {0}. Design a machine that recognizes\nthe language A where A is an empty string or all strings over Σ\nthat their length is a multiple of 2 or 3.\n0\n\nε\n\n0\n\nε\n0\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n\nFinite Automata 03\n\n\fFormal Definition of A Nondeterministic Finite Automaton\nA nondeterministic finite automaton is a 5-tuple\n(Q, Σ, δ, q0, F )\n1\n2\n3\n\nQ is a finite set of states\nΣ is a finite alphabet\nδ : Q × Σε → P(Q) is the transition function,\nΣε = Σ ∪ {ε} and\nP(Q) is the powerset of Q (set of set of states).\n\n4\n5\n\nq0 ∈ Q is the start state\nF ⊆ Q is the set of accept states.\n\nNotes\nIn an NFA, one input symbol can change the state of the\nmachine to multiple states.\nSplit to multiple copies with different current states\nExample: δ(q0 , 1) = {q0 , q1 }\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, ε\n\nq2\n\n1\n\nq3\n\nQ = {q1 , q2 , q3 , q4 }\nΣ = {0, 1} and Σε = {0, 1, ε}\nδ is given as\nδ\n0\n1\nq1 {q1 } {q1 , q2 }\nq2 {q3 }\n∅\nq3\n∅\n{q4 }\nq4 {q4 }\n{q4 }\n\nq4\n\nε\n∅\n{q3 }\n∅\n∅\n\nWe treat ε as a regular input symbol\nIf there is no ε transitions, we can ignore the ε column\n\nq1 is the start state\nF = {q4 }\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fNFA and DFA\n\nNFA is a slightly different computation model compared to\nDFA\nNFA can split into multiple copies\nNFA may have ε transitions\n\nIs there a language that can be recognized by an NFA but\ncannot be recognized by any DFAs?\nIn theory of computation, we try to see whether we can\ncapture the behavior of an NFA using a DFA\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fSimulating and NFA with a DFA\nSimulate 010110\nδ\n\n0\n\nε\n\n1\n\nq1\n\nq1 {q1 } {q1 , q2 } ∅\n{q3 }\nq2 {q3 }\n∅\n{q4 }\n∅\nq3 ∅\n∅\nq4 {q4 } {q4 }\n\nStart\n\n{q1 }\n\n= {q1 }\n\n{q1 }\n\n= {q1 }\n\n{q1 , q2 , q3 }\n\n= {q1 , q2 , q3 }\n\n{q1 } ∪ {q3 } ∪ ∅\n\n= {q1 , q3 }\n\n{q1 , q2 , q3 } ∪ {q4 }\n\n= {q1 , q2 , q3 , q4 }\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq3\n0\n\nq1\n\nq3\n1\n\nq1\n\nq2\n\nq3\n\nq4\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\n{q1 , q2 , q3 } ∪ ∅ ∪ {q4 } ∪ {q4 } = {q1 , q2 , q3 , q4 }\n\nq4\n0\n\nq1\n\nq3\n\nq4\n\nq4\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n{q1 } ∪ {q3 } ∪ ∅ ∪ {q4 } ∪ {q4 } = {q1 , q3 , q4 }\nFinite Automata 03\n\n\fEquivalence of NFAs and DFAs\n\nEvery nondeterministic finite automaton has an equivalent\ndeterministic finite automaton.\nLet N = (Q, Σ, δ, q0 , F ) be the NFA recognizing some\nlanguage A\nWe are going to construct a DFA M = (Q0 , Σ, δ 0 , q00 , F 0 )\nrecognizing A\nLet’s consider the case where N has no ε transitions.\n1\n2\n\nQ0 = P(Q) [\nδ 0 (R, a) =\nδ(r, a)\nr∈R\n\n3\n4\n\nq00 = {q0 }\nF 0 = {R ∈ Q0 | R contains an accept state of N }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nLet Σ be {0, 1}. The following NFA N recognizes the\nlanguage A where A is a set of strings that end with a 1.\n0, 1\n\n1\n\nq0\n\nq1\n\nN = (Q, Σ, δ, q0 , F )\n1\n2\n3\n\nQ = {q0 , q1 },\nΣ = {0, 1}\nδ is given as\nq0\nq1\n\n4\n5\n\n0\n{q0 }\n∅\n\n1\n{q0 , q1 }\n∅\n\nq0 is the start state\nF = {q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nConstruct a DFA M = (Q0 , Σ, δ 0 , q00 , F 0 )\nQ0 = P(Q) = P({q0 , q1 })\nQ0 = {∅, {q0 }, {q1 }, {q0 , q1 }}\nWe will construct δ 0 later\nq00 = {q0 } where q0 is the start state of the NFA\nF 0 = {R ∈ Q0 | R contains an accept state of N }\nF 0 = {{q1 }, {q0 , q1 }}\nwhere F = {q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nLet’s focus on transition functions\nThe transition function δ of the NFA is as follows:\n0\n1\nq0 {q0 } {q0 , q1 }\nq1\n∅\n∅\nRecall that the set of state of the equivalent DFA is the power\nset of set of state of the NFA\nδ0\n0\n1\n∅\n∅\n∅\n{q0 } {q0 , q1 }\n{q0 }\n{q1 }\n∅\n∅\n{q0 , q1 } {q0 } {q0 , q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nMachine M = (Q0 , Σ, δ 0 , q00 , F 0 ) equivalent to N can be\ndefined as follows:\nQ0 = P(Q) [\n= {∅, {q0 }, {q1 }, {q0 , q1 }},\n0\nδ (R, a) =\nδ(r, a)\nr∈R\n0\n\nδ (∅, 0) =\n\n[\n\nδ(r, 0) = ∅\n\nr∈∅\n\nδ 0 (∅, 1) =\n\n[\n\nδ(r, 1) = ∅\n\nr∈∅\n\nδ 0 ({q0 }, 0) =\n\n[\n\nδ(r, 0) = δ(q0 , 0) = {q0 }\n\nr∈{q0 }\n\nδ 0 ({q0 }, 1) =\n\n[\n\nδ(r, 1) = δ(q0 , 1) = {q0 , q1 }\n\nr∈{q0 }\n\nδ 0 ({q1 }, 0) =\n\n[\n\nδ(r, 0) = δ(q1 , 0) = ∅\n\nr∈{q1 }\n\nδ 0 ({q1 }, 1) =\n\n[\n\nδ(r, 1) = δ(q1 , 1) = ∅\n\nr∈{q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nMachine M (Continue)\nδ 0 (Continue)\nδ 0 ({q0 , q1 }, 0) =\n\n[\n\nδ(r, 0) = δ(q0 , 0) ∪ δ(q1 , 0) =\n\nr∈{q0 ,q1 }\n\n{q0 } ∪ ∅ = {q0 }\nδ 0 ({q0 , q1 }, 1) =\n\n[\n\nδ(r, 0) = δ(q0 , 1) ∪ δ(q1 , 1) =\n\nr∈{q0 ,q1 }\n\n{q0 , q1 } ∪ ∅ = {q0 , q1 }\n\nThus δ 0 is given by\nδ0\n∅\n{q0 }\n{q1 }\n{q0 , q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n∅\n{q0 }\n∅\n{q0 }\n\n1\n∅\n{q0 , q1 }\n∅\n{q0 , q1 }\n\nFinite Automata 03\n\n\fExample\nThe state diagram of the machine M = (Q0 , Σ, δ 0 , q00 , F 0 )\nequivalent to N (L(M ) = L(N )) is shown below:\n0\n\n1\n\n1\n\n{q0 }\n\n{q0 , q1 }\n\n0\n0\n\n0\n\n{q1 }\n\n∅\n1\n\n1\n\nWithout bottom part, it is the same as one of our previous\nexample\nIt is okay for a DFA to have unreachable states\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fNFA to DFA with ε Symbol\nLet E(R) be the collection of states that can be reached from\nmembers of R by going only along ε arrows, including the\nmembers of R themselves.\nE(R) = {q | q can be reached from R by travel along\n0 or more ε arrows}\nNote that a state q can be reached from its own state q by\ntravel along no ε arrow (R ⊆ E(R))\nExample:\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, ε\n\nq2\n\n1\n\nq3\n\nE({q1 }) = {q1 }\nE({q2 }) = {q2 , q3 }\nE({q1 , q2 }) = {q1 , q2 , q3 }\nE({q1 , q3 }) = {q1 , q3 }\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\nq4\n\n\fNFA to DFA with ε Symbol\n\nLet NFA N = (Q, Σ, δ, q0 , F ) with ε transitions that\nrecognizes a language A\nWe can construct a DFA M = (Q0 , Σ, δ 0 , q00 , F 0 ) as\n1\n2\n\nQ0 = P(Q)\nδ 0 is given by\nδ 0 (R, a) =\n\n[\n\nE(δ(r, a))\n\nr∈R\n3\n\nq00 = E({q0 })\nIf q0 has no exiting arrow for ε, q00 = {q0 }\n\n4\n\nF 0 = {R ∈ Q0 | R contains an accept state of N }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nConsider the following NFA machine:\n1\nb\n\na\n\nε\n2\n\na\n\n3\na, b\n\nN = (Q, Σ, δ, q0 , F )\nQ = {1, 2, 3}\nΣ = {a, b}\nδ is given by\n1\n2\n3\n\na\n∅\n{2, 3}\n{1}\n\nb\n{2}\n{3}\n∅\n\nε\n{3}\n∅\n∅\n\nq0 = 1\nF = {1}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nMachine M = (Q0 , Σ, δ 0 , q00 , F 0 ) equivalent to N :\nQ0 = P(Q) = P({1, 2, 3})\nQ0 = {∅, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}\nStart state is E({1}) = {1, 3}\nF 0 is a set of set of states that contain accept states of N\n(F = {1}).\nF 0 = {{1}, {1, 2}, {1, 3}, {1, 2, 3}}\n[\nδ 0 (R, a) =\nE(δ(r, a))\nr∈R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nLet’s focus on transition functions\nThe transition function δ of the NFA is as follows:\nδ\na\nb\nε\n1\n∅\n{2} {3}\n2 {2, 3} {3}\n∅\n{1}\n∅\n∅\n3\nRecall that the set of state of the equivalent DFA is the power\nset of set of state of the NFA\nδ0\na\nb\n∅\n∅\n∅\n∅\n{2}\n{1}\n{2}\n{2, 3}\n{3}\n{3}\n{1, 3}\n∅\n{2, 3}\n{2, 3}\n{1, 2}\n{1, 3}\n{2}\n{1, 3}\n{2, 3}\n{1, 2, 3}\n{3}\n{1, 2, 3} {1, 2, 3} {2, 3}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fMachine M ’s δ 0\n0\n\nδ (∅, a) =\n\n[\n\nE(δ(r, a))\n\n0\n\n= E(δ(2, b))\n= E({3})\n\nr∈∅\n\n= {3}\n[\nδ ({3}, a) =\n\n=∅\n0\n\n0\n\n[\n\nE(δ(r, b))\n\nr∈{2}\n\n=∅\n[\n0\nδ (∅, b) =\nE(δ(r, b))\n\nδ ({1}, a) =\n\n[\n\nδ ({2}, b) =\n\nr∈∅\n\nE(δ(r, a))\n\nE(δ(r, a))\n\nr∈{3}\n\nr∈{1}\n\n= E(δ(3, a))\n\n= E(δ(1, a))\n\n= E({1})\n\n= E(∅)\n=∅\n0\n\nδ ({1}, b) =\n\n0\n\n[\n\n= {1, 3}\n[\n\nδ ({3}, b) =\n\nE(δ(r, b))\n\nE(δ(r, b))\n\nr∈{3}\n\nr∈{1}\n\n= E(δ(3, b))\n\n= E(δ(1, b))\n\n= E(∅)\n\n= E({2})\n= {2}\n[\n0\nδ ({2}, a) =\n\n=∅\n0\n\nE(δ(r, a))\n\nδ ({1, 2}, a) =\n\n[\n\nE(δ(r, a))\n\nr∈{1,2}\n\nr∈{2}\n\n= E(δ(1, a)) ∪ E(δ(2, a))\n\n= E(δ(2, a))\n\n= ∅ ∪ {2, 3}\n\n= E({2, 3})\n\n= {2, 3}\n\n= {2, 3}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fMachine M ’s δ 0\n0\n\nδ ({1, 2}, b) =\n\n[\n\nE(δ(r, b))\n\nr∈{1,2}\n\n0\n\nδ ({2, 3}, b) =\n\n= E(δ(1, b)) ∪ E(δ(2, b))\n= {2} ∪ {3}\n= {2, 3}\n[\n0\nδ ({1, 3}, a) =\n\n= E(δ(2, b)) ∪ E(δ(3, b))\nE(δ(r, a))\n\n= {3}\n0\n\n= E(δ(1, a)) ∪ E(δ(3, a))\n\nδ ({1, 2, 3}, a) =\n\nE(δ(3, a))\nE(δ(r, b))\n\nr∈{1,3}\n\n= {2} ∪ ∅\n= {2}\n[\nδ ({2, 3}, a) =\n\nE(δ(r, a))\n\n= E(δ(1, a) ∪ E(δ(2, a))∪\n\n= E(δ(1, b)) ∪ E(δ(3, b))\n\n0\n\n[\nr∈{1,2,3}\n\n= ∅ ∪ {1, 3}\n= {1, 3}\n[\nδ ({1, 3}, b) =\n\nE(δ(r, b))\n\n= {3} ∪ ∅\n\nr∈{1,3}\n\n0\n\n[\nr∈{2,3}\n\n= ∅ ∪ {2, 3} ∪ {1, 3}\n= {1, 2, 3}\n[\nδ ({1, 2, 3}, b) =\nE(δ(r, b))\n0\n\nr∈{1,2,3}\n\n= E(δ(1, b) ∪ E(δ(2, b))∪\nE(δ(r, a))\n\nE(δ(3, b))\n\nr∈{2,3}\n\n= {2} ∪ {3} ∪ ∅\n\n= E(δ(2, a)) ∪ E(δ(3, a))\n\n= {2, 3}\n\n= {2, 3} ∪ {1, 3}\n= {1, 2, 3}\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nRecall the transition function of M\na\n∅\n∅\n{2, 3}\n{1, 3}\n{2, 3}\n{1, 3}\n{1, 2, 3}\n{1, 2, 3}\n\n∅\n{1}\n{2}\n{3}\n{1, 2}\n{1, 3}\n{2, 3}\n{1, 2, 3}\n\nb\n∅\n{2}\n{3}\n∅\n{2, 3}\n{2}\n{3}\n{2, 3}\n\nThe state diagram of M\na\na, b\n\nb\n{1}\n\nφ\n\n{2}\na, b\n\nb\n\nb\n\n{1,2}\n\na\n\nb\n\na\n{3}\n\na\n\n{1,3}\n\na\n\n{2,3}\n\n{1,2,3}\nb\n\nb\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\na\n\n\fClosure Under Union Operation\nN1\n\nN\n\nε\n\nε\nN2\n\nN1 recognizes a regular language A\nN2 recognizes a regular language B\nN recognizes A ∪ B (A ∪ B is regular)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\n\nLet N1 = (Q1 , Σ, δ1 , q1 , F1 ) recognizes A1 .\nLet N2 = (Q2 , Σ, δ2 , q2 , F2 ) recognizes A2 .\nTo construct N = (Q, Σ, δ, q0 , F ) to recognizes A1 ∪ A2 :\n1\n2\n3\n4\n\nQ = {q0 } ∪ Q1 ∪ Q2\nThe state q0 is the start state of N\nThe set of accept state F = F1 ∪ F2\nδ is given by\n\nδ1 (q, a) q ∈ Q1\n\n\n\nδ (q, a) q ∈ Q\n2\n2\nδ(q, a) =\n\n{q\n,\nq\n}\nq\n=\nq\nand a = ε\n1\n2\n0\n\n\n\n∅\nq = q0 and a 6= ε\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\n\nGiven state diagrams of finite-state machines N1 and N2\nTo draw a state diagram of a new machine N where\nL(N ) = L(N1 ) ∪ L(N2 ):\n1\n2\n3\n4\n\nDraw the state diagram of N1 on the top half\nDraw the state diagram of N2 on the bottom half\nAdd a new start state\nAdd ε transitions from the new start state to the start states\nof N1 and N2 , respectively\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nDraw N1 on the top half\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nDraw N2 on the bottom half\nN1\n\nN2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nAdd new start state\nN1\n\nN2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nAdd ε transitions\nN\n\nN1\nε\n\nε\n\nN2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\nLet N1 recognizes A and N2 recognizes B\nGiven a string w, how do we know whether w ∈ AB?\nRecall the definition of AB (A concatenated by B)\nAB = {xy | x ∈ A and y ∈ B}\nFor w to be in AB, w must be divided into two strings x and\ny where w = xy such that x ∈ A and y ∈ B\nIf x ∈ A, x ∈ L(N1 )\nSince x ∈ L(N1 ), by simulating N1 on input x, the simulation\nwill end in an accept state of N1 (N1 accepts x)\n\nBut if x 6∈ A, simulation will end in a non-accept state of N1\nIf y ∈ B, y ∈ L(N2 )\nSince y ∈ L(N2 ), by simulating N2 on input y, the simulation\nwill end in an accept state of N2 (N2 accepts y)\n\nBut if y 6∈ B, simulation will end in a non-accept state of N2\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\nN1\n\nN2\n\nN\n\nε\nε\nε\n\nN1 recognizes a regular language A\nN2 recognizes a regular language B\nN recognizes AB (AB is regular)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nLet N1 = (Q1 , Σ, δ1 , q1 , F1 ) recognizes A1 .\nLet N2 = (Q2 , Σ, δ2 , q2 , F2 ) recognizes A2 .\nTo construct N = (Q, Σ, δ, q0 , F ) to recognizes A1 ◦ A2 :\n1\n2\n3\n4\n\nQ = Q1 ∪ Q2\nThe state q1 is the start state of N\nThe set of accept state F = F2\nδ is given by\n\nδ1 (q, a)\nq ∈ Q1 and q 6∈ F1\n\n\n\nδ (q, a)\nq\n∈ Q2 and a 6= ε\n2\nδ(q, a) =\n\nδ1 (q, a) ∪ {q2 } q ∈ F1 and a = ε\n\n\n\nδ2 (q, a)\nq ∈ Q2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nGiven state diagrams of finite-state machines N1 and N2\nTo draw a state diagram of a new machine N where\nL(N ) = L(N1 ) ◦ L(N2 ):\n1\n2\n3\n\n4\n\nDraw the state diagram of N1 on the left side\nDraw the state diagram of N2 on the right side\nFor every accept state of N1 , add the ε transition to the start\nstate of N2\nChange all accept states of N1 to non-accept states\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nDraw the state diagram of N1 on the left side\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nDraw the state diagram of N2 on the right side\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nN2\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nε from accept states of N1 to start state of N2\nN1\n\nN2\nε\nε\nε\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nAccept states of N1 to non-accept states\nN\n\nN1\n\nN2\nε\nε\nε\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\nStar operator is similar to concatenation except that it can be\nconcatenated any number of times:\nA∗ = {x1 x2 x3 . . . xk | k ≥ 0 and xi ∈ A}\nand\nε ∈ A∗\nN1\n\nfor any language A\nN\nε\nε\nε\n\nN1 recognizes a regular language A\nN recognizes A∗ (A∗ is regular)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nLet N1 = (Q1 , Σ, δ1 , q1 , F1 ) recognizes A1 .\nTo construct N = (Q, Σ, δ, q0 , F ) to recognizes A∗1 :\n1\n2\n3\n4\n\nQ = {q0 } ∪ Q1\nThe state q0 is the start state of N\nThe set of accept state F = {q0 } ∪ F1\nδ is given by\n\n\nδ1 (q, a)\nq ∈ Q1 and q 6∈ F1\n\n\n\n\n\nq ∈ F1 and a 6= ε\nδ1 (q, a)\nδ(q, a) = δ1 (q, a) ∪ {q1 } q ∈ F1 and a = ε\n\n\n\n{q1 }\nq = q0 and a = ε\n\n\n\n∅\nq = q0 and a 6∈ ε\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nGiven state diagrams of finite-state machines N1\nTo draw a state diagram of a new machine N where\nL(N ) = L(N1 )∗ :\n1\n2\n3\n\n4\n\nDraw the state diagram of N1\nAdd a new start state and make it an accept state\nAdd ε transition from the new start state to the start state of\nN1\nFor each original accept state of N1 , add ε transition to the\noriginal start state of N1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nDraw the state diagram of N1\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nAdd a new start state and make it an accept state\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nAdd ε from thew new start state to the original start state of\nN1\nN1\nε\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nFor each original accept state of N1 , add ε transition to the\noriginal start state of N1\nN\n\nN1\nε\nε\nε\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fConclusions\n\nA Nondeterministic Finite Automata (NFA) has an equivalent\nDeterministic Finite Automata (DFA)\nThe algorithm how to convert from an NFA N to an\nequivalent DFA D where L(N ) = L(D) has been discussed\n\nThe set of all regular languages is closed under union,\nconcatenation, and star operations:\nIf A and B are regular languages, A ∪ B is a regular language\nIf A and B are regular languages, AB (A ◦ B) is a regular\nlanguage\nIf A is a regular language, A∗ is a regular language\n\nThe proof process also gives us an algorithm how to construct\nDFAs\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\f","label":[[0,15,"Concept"],[113,128,"Concept"],[134,167,"Concept"],[241,271,"Concept"],[273,276,"Concept"],[282,315,"Concept"],[317,320,"Concept"],[323,326,"Concept"],[407,410,"Concept"],[471,474,"Concept"],[506,509,"Concept"],[634,649,"Concept"],[666,669,"Concept"],[1213,1228,"Concept"],[1245,1248,"Concept"],[1250,1268,"Concept"],[1404,1419,"Concept"],[1457,1460,"Concept"],[1462,1480,"Concept"],[1623,1638,"Concept"],[1676,1679,"Concept"],[1681,1699,"Concept"],[1856,1871,"Concept"],[1909,1912,"Concept"],[1914,1932,"Concept"],[2099,2114,"Concept"],[2152,2155,"Concept"],[2157,2175,"Concept"],[2361,2376,"Concept"],[2414,2417,"Concept"],[2419,2437,"Concept"],[2646,2661,"Concept"],[2699,2702,"Concept"],[2704,2722,"Concept"],[3003,3015,"Concept"],[3054,3069,"Concept"],[3100,3108,"Concept"],[3251,3254,"Concept"],[3302,3305,"Concept"],[3517,3529,"Concept"],[3563,3570,"Concept"],[3656,3671,"Concept"],[3699,3710,"Concept"],[3891,3906,"Concept"],[3982,3992,"Concept"],[3997,4005,"Concept"],[4153,4168,"Concept"],[4235,4245,"Concept"],[4250,4258,"Concept"],[4415,4430,"Concept"],[4497,4507,"Concept"],[4512,4520,"Concept"],[4682,4697,"Concept"],[4726,4759,"Concept"],[4762,4795,"Concept"],[4910,4929,"Concept"],[5018,5029,"Concept"],[5050,5063,"Concept"],[5078,5081,"Concept"],[5290,5305,"Concept"],[5559,5572,"Concept"],[5612,5623,"Concept"],[5681,5696,"Concept"],[5702,5705,"Concept"],[5710,5713,"Concept"],[5715,5718,"Concept"],[5773,5776,"Concept"],[5777,5780,"Concept"],[5812,5815,"Concept"],[5851,5859,"Concept"],[5872,5882,"Concept"],[5889,5892,"Concept"],[5907,5917,"Concept"],[5925,5929,"Concept"],[6013,6016,"Concept"],[6025,6028,"Concept"],[6077,6092,"Concept"],[6113,6116,"Concept"],[6124,6127,"Concept"],[6635,6650,"Concept"],[6671,6675,"Concept"],[6680,6684,"Concept"],[6692,6725,"Concept"],[6744,6774,"Concept"],[6810,6813,"Concept"],[6814,6825,"Concept"],[6831,6839,"Concept"],[6870,6873,"Concept"],[6905,6916,"Concept"],[6958,6971,"Concept"],[7063,7075,"Concept"],[7131,7146,"Concept"],[7191,7194,"Concept"],[7197,7207,"Concept"],[7212,7220,"Concept"],[7407,7418,"Concept"],[7477,7492,"Concept"],[7519,7522,"Concept"],[7671,7682,"Concept"],[7690,7693,"Concept"],[7724,7736,"Concept"],[7834,7849,"Concept"],[7879,7899,"Concept"],[7904,7923,"Concept"],[7933,7936,"Concept"],[8030,8033,"Concept"],[8074,8077,"Concept"],[8200,8215,"Concept"],[8732,8747,"Concept"],[9138,9153,"Concept"],[9171,9184,"Concept"],[9414,9417,"Concept"],[9493,9508,"Concept"],[9514,9517,"Concept"],[9521,9524,"Concept"],[9767,9772,"Concept"],[10039,10054,"Concept"],[10064,10067,"Concept"],[10071,10074,"Concept"],[10126,10139,"Concept"],[10145,10155,"Concept"],[10158,10166,"Concept"],[10188,10191,"Concept"],[10388,10400,"Concept"],[10456,10471,"Concept"],[10508,10519,"Concept"],[10716,10731,"Concept"],[10887,10898,"Concept"],[10961,10974,"Concept"],[11108,11123,"Concept"],[11152,11172,"Concept"],[11177,11196,"Concept"],[11206,11209,"Concept"],[11317,11320,"Concept"],[11361,11364,"Concept"],[11550,11565,"Concept"],[12210,12225,"Concept"],[12981,12996,"Concept"],[13021,13040,"Concept"],[13188,13201,"Concept"],[13342,13357,"Concept"],[13366,13395,"Concept"],[13415,13425,"Concept"],[13428,13444,"Concept"],[13450,13460,"Concept"],[13463,13479,"Concept"],[13484,13494,"Concept"],[13511,13518,"Concept"],[13567,13582,"Concept"],[13588,13617,"Concept"],[13652,13662,"Concept"],[13701,13711,"Concept"],[13756,13766,"Concept"],[13826,13837,"Concept"],[13854,13866,"Concept"],[14055,14070,"Concept"],[14076,14105,"Concept"],[14113,14127,"Concept"],[14131,14152,"Concept"],[14173,14186,"Concept"],[14255,14268,"Concept"],[14300,14313,"Concept"],[14349,14360,"Concept"],[14365,14378,"Concept"],[14392,14403,"Concept"],[14411,14423,"Concept"],[14500,14515,"Concept"],[14521,14550,"Concept"],[14626,14641,"Concept"],[14647,14676,"Concept"],[14759,14774,"Concept"],[14780,14809,"Concept"],[14818,14829,"Concept"],[14885,14900,"Concept"],[14906,14935,"Concept"],[14940,14953,"Concept"],[15017,15032,"Concept"],[15083,15093,"Concept"],[15196,15208,"Concept"],[15442,15454,"Concept"],[15517,15533,"Concept"],[15638,15650,"Concept"],[15713,15729,"Concept"],[15783,15798,"Concept"],[15804,15841,"Concept"],[15863,15873,"Concept"],[15876,15892,"Concept"],[15898,15908,"Concept"],[15911,15927,"Concept"],[15932,15942,"Concept"],[15953,15960,"Concept"],[16009,16024,"Concept"],[16030,16067,"Concept"],[16102,16112,"Concept"],[16151,16161,"Concept"],[16206,16216,"Concept"],[16268,16279,"Concept"],[16296,16308,"Concept"],[16515,16530,"Concept"],[16536,16573,"Concept"],[16581,16595,"Concept"],[16599,16620,"Concept"],[16641,16654,"Concept"],[16724,16737,"Concept"],[16770,16783,"Concept"],[16818,16830,"Concept"],[16847,16859,"Concept"],[16867,16878,"Concept"],[16896,16909,"Concept"],[16919,16936,"Concept"],[16985,17000,"Concept"],[17006,17043,"Concept"],[17054,17067,"Concept"],[17142,17157,"Concept"],[17163,17200,"Concept"],[17211,17224,"Concept"],[17304,17319,"Concept"],[17325,17362,"Concept"],[17371,17384,"Concept"],[17394,17405,"Concept"],[17473,17488,"Concept"],[17494,17531,"Concept"],[17533,17546,"Concept"],[17556,17573,"Concept"],[17638,17653,"Concept"],[17659,17687,"Concept"],[17716,17729,"Concept"],[17752,17764,"Concept"],[17853,17861,"Concept"],[17876,17886,"Concept"],[17889,17905,"Concept"],[17910,17920,"Concept"],[17931,17938,"Concept"],[17987,18002,"Concept"],[18071,18081,"Concept"],[18126,18136,"Concept"],[18187,18198,"Concept"],[18215,18227,"Concept"],[18478,18493,"Concept"],[18499,18527,"Concept"],[18535,18549,"Concept"],[18553,18574,"Concept"],[18588,18601,"Concept"],[18664,18677,"Concept"],[18694,18705,"Concept"],[18721,18733,"Concept"],[18738,18750,"Concept"],[18764,18775,"Concept"],[18783,18794,"Concept"],[18819,18831,"Concept"],[18844,18856,"Concept"],[18873,18884,"Concept"],[18939,18954,"Concept"],[18960,18988,"Concept"],[18999,19012,"Concept"],[19070,19085,"Concept"],[19091,19119,"Concept"],[19131,19142,"Concept"],[19158,19170,"Concept"],[19222,19237,"Concept"],[19243,19271,"Concept"],[19293,19304,"Concept"],[19321,19332,"Concept"],[19392,19407,"Concept"],[19413,19441,"Concept"],[19461,19473,"Concept"],[19486,19498,"Concept"],[19515,19526,"Concept"],[19593,19608,"Concept"],[19629,19661,"Concept"],[19663,19666,"Concept"],[19686,19715,"Concept"],[19717,19720,"Concept"],[19759,19762,"Concept"],[19782,19785,"Concept"],[19842,19859,"Concept"],[19863,19869,"Concept"],[19876,19881,"Concept"],[19883,19896,"Concept"],[19902,19917,"Concept"],[19934,19951,"Concept"],[19964,19980,"Concept"],[19996,20013,"Concept"],[20031,20047,"Concept"],[20058,20074,"Concept"],[20084,20100,"Concept"],[20164,20168,"Concept"],[20217,20232,"Concept"]],"Comments":[]}
{"id":294,"text":"11\n\nHow\nPrograms\n\nAre Managed\n\nCS\/COE 0449\nIntroduction to\nSystems Software\n\nLuis Oliveira\n(with content borrowed from wilkie and Vinicius Petrucci)\n\n\fWhere’s the Lie?\nAnd other operating systems questions.\n\n2\n\n\fOn the last episode…\n• Programs are loaded into memory by the\noperating system.\n• They have to exist in memory before they can\nbe executed.\n\nKernel Memory\nstack\nlibz.so .data\n\nlibz.so .text\n\n• Programs go through a lot of trouble to have\nall their data\/code in memory.\n\n.bss\n.data\n\n.text\n\n3\n\n3\n\n\fThe Lie\n• Programs are told that they are\nthe only things running…\n• The only things in memory…\n• We know that this is not true!\n• Operating Systems are big liars\ncrafting illusions.\n\n4\n\n\fThe Truth\n• In reality, many programs can be running at the same time.\n• Each program, when running, is typically called a process.\n▪ A multitasking OS is (a rather common) one that supports concurrent\nprocesses.\n\n• The OS must handle switching from one process to another.\n▪ Which processes get to run?\n▪ What if you have more processes than CPUs?\n▪ When do you switch from one to another?\n▪ What if one is more urgent??\n5\n\n\fMy process is one of method…\n• A process is an abstraction representing a single instance of a program.\n▪ An executable represents the initial state of a program and thus the process.\n▪ A program can be instantiated multiple times, if needed.\n▪ Each one would be a separate process… of the same program.\n▪ Note: A processor is the hardware unit that executes a process. (makes sense!!)\n\n• The Operating System defines what a process and its abstraction is.\n▪ There is an OS representation and metadata associated with a process.\n▪ The OS maintains two key lies:\n\n• The control flow (exclusive use of CPU): as defined by the code (this lecture)\n• The memory layout (exclusive use of memory): defined by executable\/code (next lecture)\n\n• We are focusing on the control flow, here.\n\n▪ How do we determine when a program runs? When does the lie… break down?\n6\n\n\fCPU Scheduling\nEeny Meeny Miney Moe\n\n7\n\n\fThe Reality\n• Let us say that we have a machine with four separate CPUs.\n▪ You could run four processes concurrently (at the same time) relatively easily.\n▪ What about the fifth?\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State:\nRegisters\n,\n\n8\n\n\fMultiplexing the CPU\n• Truth be told, we often have fewer resources than needed.\n▪ Sharing a common resource is called multiplexing.\n\n• Now, consider a machine with a single CPU.\n\nProcess\n\nstack\n.bss\n\n• We often want to run something in the foreground.\n\n▪ Word processor, web browser, minesweeper… whatever.\n\n.data\n\n• We still want some things running the background…\n\n.text\n\n• We need to switch from one process to another at\nparticular times.\n\nCPU State:\nRegisters\n,\n\n▪ Music player, virus scanner, chat client.\n\n▪ Yet… we have to keep the illusion that the program is\nuninterrupted…\n\nCPU\n\n9\n\n\fNaïve Campbell was great in The Craft (1996)\n• One way is to run processes sequentially (the naïve solution)\n▪ When one process ends… run the next.\n▪ Yet that’s not very flexible. (Stop your music player to open a PDF)\n• Humans are in the mix! We need computers to be useful to us.\n\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nMemory\nCPU\n\n10\n\n\fThe cruel passage of time\n• To multiplex the CPU, we quickly switch from process to process.\n• The OS retains\/restores the state (context) of the process.\n▪ The OS must store this as a form of process metadata in memory.\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nCPU State C:\nRegisters\n,\n\nCPU State D:\nRegisters\n,\n\nMemory\nCPU\n\n11\n\n\fThe Context Switch\n• When an Operating System goes from\none process to another, it performs a\ncontext switch.\n• This swaps out the CPU state of one\nprocess for the next one to run.\n1. Store registers (including stack\npointer and program counter) to\nmemory.\n2. Determine next process to run.\n3. Load those registers from memory.\nSwitch memory space. (see next lecture:\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nContext\n\nContext\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nvirtual memory)\n\n4. Jump to old program counter. Go!\n\nCPU\n\n12\n\n\fA deeper dive\n• When we pause a process… we store the state of registers (context)\nx86-64 (gas \/ AT&T syntax) – Process A\n\nContext (A)\n\nx86-64 (gas \/ AT&T syntax) – Process B\n\nCPU State\n\n13\n\n\fWhen is a good time to call you?\n• When should a program pause and let another one go?\n• When programs voluntarily pause, this is called cooperative\nscheduling.\n▪ They may give up control at convenient points such as system calls.\n\n• We often do not expect this, so modern Operating Systems forcibly\npause programs from time to time. Called preemptive scheduling.\n▪ Processes give up control when hardware interjects via an “interrupt”\n▪ How does this work?\n\n14\n\n\fRound Robin Scheduling\n• One method is to just cycle through each process each for equal time.\n▪ This is an element of “fairness” … each gets equal stake.\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nCPU State C:\nRegisters\n,\n\nCPU State D:\nRegisters\n,\n\nMemory\nCPU\n\n15\n\n\fProblems with “fairness”\n• Let’s say I want to play Doom Eternal\n▪ In round-robin, I give the video game 25% of my resources.\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nCPU State C:\nRegisters\n,\n\nCPU State D:\nRegisters\n,\n\nThis should get\nmore priority.\n\nCPU\n\n16\n\n\fI have priorities!\n• Round-Robin schedulers are fair; then we tweak to meet expectations.\n▪ How might we add a sense of “priority” to the scheduler?\n\n• Let’s look at a visualization of how processes are currently scheduled\nwith a round-robin scheme: (Doom gets only 25% of resources!) \n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nA\n\nA\nB\n\nB\n\nC\n50ms \/ 200ms = 25%\n\n17\n\n\fI have priorities!\n• Round-Robin schedulers are fair; then we tweak to meet expectations.\n▪ How might we add a sense of “priority” to the scheduler?\n\n• We could give some tasks a longer quantum.\n▪ A quantum is the amount of time a task is guaranteed to run.\n100ms\n\n50ms\n\n50ms\n\n50ms\n\n100ms\n\nA\nB\n\nC\n100ms \/ 250ms = 40%\n\n18\n\n\fI have priorities!\n• Round-Robin schedulers are fair; then we tweak to meet expectations.\n▪ How might we add a sense of “priority” to the scheduler?\n\n• We could increase the chance a specific task is scheduled.\n▪ Round-robin + priority: two queues, switch back and forth and round-robin\nwithin them.\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nA\nB\n\nC\n100ms \/ 200ms = 50%\n\n19\n\n\fI have priorities!\n• Round-Robin schedulers are fair; then we tweak to meet expectations.\n▪ How might we add a sense of “priority” to the scheduler?\n\n• We can then always do some sort of combination.\n▪ Hybrid approaches do seem very alluring. Hmm. The power of trade-offs.\n100ms\n\n50ms\n\n100ms\n\n50ms\n\nA\nB\n200ms \/ 300ms = 67%\n\n20\n\n\fIdeal circumstances: Human perception\n• The reality: (very quickly switching)\n100ms\n\n50ms\n\n100ms\n\n50ms\n\nA\nB\n\n• The illusion: (an ideal: perceived concurrency… no delay noticed)\n100ms\n\n50ms\n\n100ms\n\n50ms\n\nA\nB\n\n21\n\n\fThere is no optimal.\n• Like many of the topics in this course, there is no possible “best”.\n▪ That is, there is no way to perfectly schedule general processes.\n\n• Consider: It would be very lovely to schedule a process that handles\nsome user input, like a button press or a network request.\n▪ Perfect situation: the OS schedules the task that handles the button\nimmediately before the button is pressed. What luck!\n\n• However: You do not know when that button will be pressed.\n▪ Maybe it is a sensor, like for detecting a fire!\n• FIRE SEEMS IMPORTANT!! … and yet.\n\n• Moral of the story: humans being users make things very hard.\n\n22\n\n\fAgain, it is not magic.\n• But… wait… how does hardware stop a program?\n▪ For instance, when the quantum is up, how does the OS get control and\nperform the context switch?\n\n• Ah, the hardware has support for “being rude” which is called an\ninterrupt.\n▪ A programmable mechanism for asynchronously calling a function when a\nparticular type of error or signal is noticed.\n\n• Let’s take a look.\n\n23\n\n\fInterrupts\nIt’s rude… but necessary.\n\n24\n\n\fHow rude\n• An interrupt is an exceptional state that diverts execution from its\nnormal flow.\n▪ When issued by hardware, sometimes referred to as a hardware exception\n• For instance, a hardware timer or external event caused by a sensor.\n\n▪ When caused by a user process, sometimes referred to as a software trap\n• Divide-by-zero error, some floating-point exceptions, system calls.\n\n• We have seen these before!\n▪ System calls are a type of interrupt (software trap).\n▪ This is an intentional interrupt caused by a specific program instruction.\n• The program is “interrupted” while the OS performs a task.\n\n• We have also encountered them in our failures.\n▪ Segmentation \/ Protection \/ Page Faults are also interrupts. (trap? exception?)\n▪ These are (usually) unintentional interrupts caused by a generic instruction. 25\n\n\fHere are some typical UNIX\/Linux system calls:\nNumber\n\nName\n\nDescription\n\nread\n\nReads bytes from an open file.\n\nwrite\n\nWrites bytes to an open file.\n\nopen\n\nOpens a file and returns the file handle.\n\nclose\n\nCloses an open file.\n\nstat\n\nReturns metadata about a file.\n\nfork\n\nSpawns a copy of the current process.\n\nexecve\n\nLoads and then executes a program.\n\n26\n\n\fSystem calls\n• System calls: predictable, intentional interrupts at specific instructions.\n▪ Interrupts occurring at specific instructions are synchronous interrupts.\n\n• In x86-64, the program pauses at a\ninstruction, then resumes\nat the following instruction when the OS finishes the task\n▪ (… and the OS calls the\n\ninstruction)\n\n• Let’s take a deeper look.\n27\n\n\fHello, Hello World\nx86-64 (gas \/ AT&T syntax) - Application\n\nx86-64 (gas \/ AT&T syntax) - Kernel (main OS program)\n\nPre-registered to be called on syscall\nSaves CPU state\n\nA jump to the kernel\n\nPerforms action\nRestores state\n\nReturns to process\n\n28\n\n\fTick tock tick tock merrily sings the clock\n• A hardware timer can preempt (forcibly pause) a program at any time.\n▪ Interrupts that occur at any instruction are asynchronous interrupts.\n\n• In a preemptive operating system, a hardware timer is used to give a\nmaximum bound to how long a process runs.\n▪ Your operating system programs the timer such that it sends a signal at a\nregular interval.\n▪ Your operating system has a function that is called when such a signal is read.\n▪ That function will respond by invoking the scheduler and pausing the current\ntask and resuming or starting another.\n\n• Let’s look at the basic procedure an OS uses to program an interrupt.\n29\n\n\fProgramming interruption\n• On most hardware, there is a programmable table somewhere in\nmemory that, when written to, defines where code exist to handle\neach interrupt.\n• Every possible interrupt is given a number. Segmentation faults might\nbe interrupt 10. Timers might be interrupt 0. Et cetera.\n• When an interrupt occurs, based on its interrupt number, the\ncorresponding entry in a lookup table called an interrupt vector table\nor an interrupt descriptor table would be used to determine where in\nthe kernel to jump.\n30\n\n\fThe Interrupt Table\n#\n\nValue\n\n• The interrupt table is a simple table.\n\nDescription\nDivide by zero\n\n• Fun Fact: It is often located at\naddress 0x0 in memory!\n\nOverflow\nDouble Fault\nGeneral Protection Fault\nPage Fault\nStack Fault\nAlignment Error\n...\nTimer Signal\nNetwork Device Signal\n\n▪ So, operating system kernels can’t\nexactly always treat zero as an invalid\naddress…\n\n• When a process triggers a listed\ninterrupt or external hardware sends\na signal to the interrupt controller…\n▪ the CPU jumps to the given address.\n\nAudio Device Signal\n\n31\n\n\fAh! There art thee ol’ interrupt!\n• Let’s take a look at interrupt handling…\nx86-64 (gas \/ AT&T syntax) – Process B\nA\n\nContext (A)\n\nCPU State\n\nx86-64 (gas \/ AT&T syntax) – Kernel\n\n• An interrupt is the likely\ncause of our prior\ninterruption.\n• The interrupt handler is the\ncode that handles context\nswitching and scheduling\n32\n\n\fOverview\n• Interrupts can be categorized in several ways:\n▪ They can occur outside of our program:\nhardware exceptions\n▪ They can occur on an instruction in our program: software trap\n▪ They can occur at any time:\nasynchronous interrupts\n▪ They can occur at specific times:\nsynchronous interrupts\n\n• Interrupts are what allow operating systems to function!\n▪ When you press a key on your keyboard.\n▪ When you receive a packet on the network.\n▪ When your sound card wants the next second of audio.\n▪ When you divide by zero…\n• To then mercilessly murder your process.\n\n33\n\n\f","label":[[353,366,"Concept"],[373,380,"Concept"],[381,386,"Concept"],[388,395,"Concept"],[397,401,"Concept"],[482,486,"Concept"],[487,492,"Concept"],[494,499,"Concept"],[819,826,"Concept"],[832,847,"Concept"],[887,907,"Concept"],[950,957,"Concept"],[978,987,"Concept"],[1024,1033,"Concept"],[1125,1132,"Concept"],[1155,1162,"Concept"],[1231,1241,"Concept"],[1297,1304,"Concept"],[1396,1403,"Concept"],[1436,1445,"Concept"],[1483,1490,"Concept"],[1547,1554,"Concept"],[1642,1649,"Concept"],[1691,1703,"Concept"],[1772,1785,"Concept"],[1824,1834,"Concept"],[1881,1893,"Concept"],[1980,1994,"Concept"],[2115,2124,"Concept"],[2125,2137,"Concept"],[2228,2232,"Concept"],[2233,2238,"Concept"],[2239,2244,"Concept"],[2246,2250,"Concept"],[2251,2256,"Concept"],[2257,2262,"Concept"],[2264,2268,"Concept"],[2269,2274,"Concept"],[2275,2280,"Concept"],[2282,2286,"Concept"],[2287,2292,"Concept"],[2293,2298,"Concept"],[2300,2309,"Concept"],[2328,2348,"Concept"],[2447,2459,"Concept"],[2508,2515,"Concept"],[2523,2527,"Concept"],[2637,2642,"Concept"],[2697,2702,"Concept"],[2733,2740,"Concept"],[2774,2783,"Concept"],[2899,2912,"Concept"],[2989,2998,"Concept"],[3044,3051,"Concept"],[3235,3239,"Concept"],[3240,3245,"Concept"],[3246,3251,"Concept"],[3253,3257,"Concept"],[3258,3263,"Concept"],[3264,3269,"Concept"],[3271,3275,"Concept"],[3276,3281,"Concept"],[3282,3287,"Concept"],[3289,3293,"Concept"],[3294,3299,"Concept"],[3300,3305,"Concept"],[3355,3364,"Concept"],[3397,3404,"Concept"],[3408,3415,"Concept"],[3470,3477,"Concept"],[3517,3533,"Concept"],[3573,3577,"Concept"],[3578,3583,"Concept"],[3584,3589,"Concept"],[3591,3595,"Concept"],[3596,3601,"Concept"],[3602,3607,"Concept"],[3609,3613,"Concept"],[3614,3619,"Concept"],[3620,3625,"Concept"],[3627,3631,"Concept"],[3632,3637,"Concept"],[3638,3643,"Concept"],[3645,3654,"Concept"],[3671,3680,"Concept"],[3697,3706,"Concept"],[3723,3732,"Concept"],[3770,3784,"Concept"],[3826,3833,"Concept"],[3860,3874,"Concept"],[3897,3906,"Concept"],[3914,3921,"Concept"],[3977,3990,"Concept"],[3995,4010,"Concept"],[4041,4048,"Concept"],[4149,4153,"Concept"],[4154,4159,"Concept"],[4160,4165,"Concept"],[4167,4171,"Concept"],[4172,4177,"Concept"],[4178,4183,"Concept"],[4185,4192,"Concept"],[4194,4201,"Concept"],[4203,4212,"Concept"],[4229,4238,"Concept"],[4287,4302,"Concept"],[4351,4358,"Concept"],[4393,4400,"Concept"],[4431,4438,"Concept"],[4442,4449,"Concept"],[4484,4491,"Concept"],[4648,4670,"Concept"],[4728,4740,"Concept"],[4852,4873,"Concept"],[4877,4886,"Concept"],[4936,4945,"Concept"],[4975,4997,"Concept"],[5041,5048,"Concept"],[5182,5186,"Concept"],[5187,5192,"Concept"],[5193,5198,"Concept"],[5200,5204,"Concept"],[5205,5210,"Concept"],[5211,5216,"Concept"],[5218,5222,"Concept"],[5223,5228,"Concept"],[5229,5234,"Concept"],[5236,5240,"Concept"],[5241,5246,"Concept"],[5247,5252,"Concept"],[5445,5456,"Concept"],[5553,5557,"Concept"],[5558,5563,"Concept"],[5564,5569,"Concept"],[5571,5575,"Concept"],[5576,5581,"Concept"],[5582,5587,"Concept"],[5589,5593,"Concept"],[5594,5599,"Concept"],[5600,5605,"Concept"],[5607,5611,"Concept"],[5612,5617,"Concept"],[5618,5623,"Concept"],[5625,5634,"Concept"],[5651,5660,"Concept"],[5677,5686,"Concept"],[5703,5712,"Concept"],[5750,5758,"Concept"],[5778,5788,"Concept"],[5792,5814,"Concept"],[5892,5900,"Concept"],[5960,5969,"Concept"],[6002,6019,"Concept"],[6139,6149,"Concept"],[6153,6175,"Concept"],[6253,6261,"Concept"],[6318,6325,"Concept"],[6331,6338,"Concept"],[6462,6472,"Concept"],[6476,6498,"Concept"],[6576,6584,"Concept"],[6668,6679,"Concept"],[6682,6690,"Concept"],[6730,6741,"Concept"],[6831,6841,"Concept"],[6845,6867,"Concept"],[6945,6953,"Concept"],[7299,7310,"Concept"],[7515,7524,"Concept"],[7577,7584,"Concept"],[8097,8104,"Concept"],[8156,8170,"Concept"],[8240,8249,"Concept"],[8398,8408,"Concept"],[8455,8464,"Concept"],[8588,8606,"Concept"],[8698,8710,"Concept"],[8739,8752,"Concept"],[8855,8867,"Concept"],[8882,8891,"Concept"],[8893,8906,"Concept"],[8922,8943,"Concept"],[9004,9015,"Concept"],[9148,9158,"Concept"],[9201,9225,"Concept"],[9297,9309,"Concept"],[9565,9572,"Concept"],[9624,9636,"Concept"],[9639,9651,"Concept"],[9666,9688,"Concept"],[9717,9727,"Concept"],[9767,9789,"Concept"],[10149,10158,"Concept"],[10225,10232,"Concept"],[10356,10366,"Concept"],[10401,10424,"Concept"],[10526,10533,"Concept"],[10896,10905,"Concept"],[10912,10936,"Concept"],[11070,11079,"Concept"],[11098,11107,"Concept"],[11156,11165,"Concept"],[11186,11195,"Concept"],[11220,11229,"Concept"],[11251,11267,"Concept"],[11321,11343,"Concept"],[11442,11457,"Concept"],[11474,11489,"Concept"],[11819,11826,"Concept"],[11845,11854,"Concept"],[11898,11918,"Concept"],[12008,12017,"Concept"],[12042,12060,"Concept"],[12091,12098,"Concept"],[12170,12179,"Concept"],[12213,12225,"Concept"],[12233,12250,"Concept"],[12276,12308,"Concept"],[12325,12335,"Concept"],[12413,12432,"Concept"],[12484,12497,"Concept"],[12528,12551,"Concept"],[12588,12610,"Concept"],[12614,12624,"Concept"]],"Comments":[]}
{"id":295,"text":"Turing Machine 02\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine Example\n\nDesign a Turing machine that recognizes the language B\nwhere\nB = {w#w | w ∈ Σ∗ }\nOn input string w:\n1\n\n2\n\nZig-zag across the tape to corresponding positions on either\nside of the # symbol to check whether those positions contain\nthe same symbol. If they do not, or if no # is found, reject.\nCross off symbols as they are checked to keep track of which\nsymbols correspond.\nWhen all symbols to the left of the # have been crossed off,\ncheck for any remaining symbols to the right of the #. If any\nsymbols remain, reject; otherwise, accept.\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine M1\nA Turing machine that decides B = {w#w | w ∈ Σ∗ }.\n\n1\n\nx,\nR\n\nq1\n\n0\n\nR\nx,\n\n→\n\n→\n\n#→R\n\n0, 1 → R\n\nq2\n#→R\n\nx→R\n\nx→R\n\nq8\nt\n\nq4\n\n→R\n\n#→R\n\nqaccept\n\nq5\n\n1\n\nL\nx,\n\n→\n\n→\n\nx,\n\nL\n\n0\n\n0, 1, x → L\n\nq6\n#→L\nx→R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nq7\n\n0, 1 → R\n\nq3\n\n0, 1 → L\n\nTuring Machine 02\n\nx→R\n\n\fTuring Machine M1\nΣ = {0, 1, #}\nΓ = {0, 1, #, x, t}\n1 → x, R\nRead 1, write x, and move the tape head to the right direction\n\n#→R\nA shorthand notation for # → #, R\nRead #, write #, and move the tape head to the right direction\n\n0, 1 → L\nA shorthand notation representing two transitions:\n0 → L which is 0 → 0, L\n1 → L which is 1 → 1, L\n\nqreject is omitted\nAll missing exiting arrows go to qreject\nAssume that it moves the tape head to the right direction\nbefore entering qreject without writing a symbol (writing the\nsame symbol it read)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine M1\nComputing 01#01\n\n1\n\nx,\nR\n\nq1\n\n0, 1 → R\n\nR\n\n0\n\nx,\n\n→\n\n→\n\n#→R\n\nq2\n#→R\n\nx→R\n\nx→R\n\nq8\nt\n\nq4\n\n0, 1 → R\n\nq3\n\n→R\n\n#→R\n\nqaccept\n\nq5\n\n1\n\nL\nx,\n\n→\n\n→\n\nx,\nL\n\n0\n\n0, 1, x → L\n\nq6\n#→L\nx→R\n\nq7\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0, 1 → L\n\nTuring Machine 02\n\nx→R\n\nq1 01#01\nxq2 1#01\nx1q2 #01\nx1#q4 01\nx1q6 #x1\nxq7 1#x1\nq7 x1#x1\nxq1 1#x1\nxxq3 #x1\nxx#q5 x1\nxx#xq5 1\nxx#q6 xx\nxxq6 #xx\nxq7 x#xx\nxxq1 #xx\nxx#q8 xx\nxx#xq8 x\nxx#xxq8 t\nxx#xxtqaccept\n\n\fTuring Machine M1\nComputing 01#10\n\n1\n\nx,\nR\n\nq1\n\n0, 1 → R\n\nR\n\n0\n\nx,\n\n→\n\n→\n\n#→R\n\nq2\n#→R\n\nx→R\n\nx→R\n\nq8\nt\n\nq4\n\n0, 1 → R\n\nq3\n\n→R\n\n#→R\n\nqaccept\n\nq5\n\n1\n\nL\nx,\n\n→\n\n→\n\nx,\nL\n\n0\n\n0, 1, x → L\n\nq6\n#→L\nx→R\n\nq7\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0, 1 → L\n\nTuring Machine 02\n\nx→R\n\nq1 01#10\nxq2 1#10\nx1q2 #10\nx1#q4 10\nx1#1qreject 0\n\n\fTuring Machine M1\nComputing 01 (no # symbol)\n\n1\n\nx,\nR\n\nq1\n\n0, 1 → R\n\nR\n\n0\n\nx,\n\n→\n\n→\n\n#→R\n\nq2\n#→R\n\nx→R\n\nx→R\n\nq8\nt\n\nq4\n\n0, 1 → R\n\nq3\n\n→R\n\n#→R\n\nqaccept\n\nq5\n\n1\n\nL\nx,\n\n→\n\n→\n\nx,\nL\n\n0\n\n0, 1, x → L\n\nq6\n#→L\nx→R\n\nq7\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0, 1 → L\n\nTuring Machine 02\n\nx→R\n\nq1 01\nxq2 1\nx1q2 t\nx1tqreject\n\n\fTuring Machine Example\n\nDesign a Turing machine that recognizes the language A\nwhere\nn\nA = {02 | n ≥ 0}\nOn input string w:\n1\n2\n3\n\n4\n5\n\nSweep left to right across the tape, crossing off every other 0\nIf in stage 1 the tape contained a single 0, accept\nIf in stage 1 the tape contained more than a single 0 and the\nnumber of 0s was odd, reject\nReturn the head to the left-hand end of the tape\nGo to stage 1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fMoving the Tape Head Back\nSuppose we want to move the tape head back to the left most\nend of the tape\nNeed a state to do that\n0, 1, x → L\n\nThis will result in an infinite loop\n\nRecall that if the tape head is at the left-most square and the\ntransition is L, it will stay at the same place\nThere is no signal telling a TM that its tape head is currently\nat the left-most square\n\nThe trick is to mark the left-most symbol (depending on Γ)\nTurn 0 or 1 to t\nTurn 0 to 0̇ or x\nTurn 1 to 1̇ or t\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine M2\nn\n\nA Turing machine that decides A = {02 | n ≥ 0}.\n0→L\nx→L\n\n→\nt\n\n→R\nx→R\n\n0 → x, R\n\nt\n\nt\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n→R\n\nq3\n\n0→R\n\nqaccept\n\nt\n\nx→R\n\nL\n\nq2\n\n0 → t, R\n\nqreject\n\n→\n\nx→R\nq1\n\nt\n\nR\n\nq5\n\n→R\n\nTuring Machine 02\n\n0 → x, R\n\nq4\n\nx→R\n\n\fTuring Machine M2\nComputing 0000\nq1 0000\nq2 000\ntxq3 00\ntx0q4 0\ntx0xq3 t\ntx0q5 x\ntxq5 0x\ntq5 x0x\nq5 tx0x\ntq2 x0x\ntxq2 0x\ntxxq3 x\ntxxxq3 t\ntxxq5 x\ntxq5 xx\ntq5 xxx\nq5 txxx\ntq2 xxx\ntxq2 xx\ntxxq2 x\ntxxxq2 t\ntxxxtqaccept\nt\n\n0→L\nx→L\n\n→\nt\n\n→R\nx→R\n\n→R\n\nqaccept\n\nt\n\nq3\n\n0 → x, R\n\nt\n\nx→R\n\nL\n\nq2\n\n0 → t, R\n\nt\n\nqreject\n\n→\n\nx→R\nq1\n\nt\n\nR\n\nq5\n\n0→R\n\n0 → x, R\n\nq4\n\nx→R\n\n→R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fTuring Machine M2\n\nComputing 000\n0→L\nx→L\n\n→\nt\n\n→R\nx→R\n\n→R\n\nqaccept\n\nt\n\nq3\n\n0 → x, R\n\nt\n\nx→R\n\nL\n\nq2\n\n0 → t, R\n\nt\n\nqreject\n\n→\n\nx→R\nq1\n\nt\n\nR\n\nq5\n\n0→R\n\n0 → x, R\n\nq4\n\nx→R\n\n→R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nq1 000\nq2 00\ntxq3 0\ntx0q4 t\ntx0tqreject\nt\n\nTuring Machine 02\n\n\fDesigning a TM\nDesigning a TM in a form of a state diagram is hard\nNeed to keep in mind out the content of the tape\nNeed to worry about moving tape head\n\nBut for a simple problem, it is not that bad\nLet’s create a TM that shift all symbols on the tape to the\nright by one square by inserting the blank symbol at the\nleft-most square and move the tape head back to the\nleft-most square\nLet Σ = {0, 1} and Γ = {0, 1, t}\nHere are some input\/output (on the tape)\nInput\nOutput\n01101 t01101\n0\nt0\n111\nt111\nε\nε\nNote that this TM always accepts all strings over Σ\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\fDesigning a TM\nSolution\n0→R\n\nq1\n0 → t, R\n1 → 0, R\n\n0 → 1, R\n\nq0\n\nt\n\n1 → t, R\n\n→ 0, L\n0, 1 → L\n\nq3\nt\n\n→ 1, L\n\nt\n\n→L\nqaccept\n\nq2\n\n1→R\nt\n\n→L\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 02\n\n\f","label":[[0,14,"Concept"],[112,126,"Concept"],[132,146,"Concept"],[165,179,"Concept"],[281,285,"Concept"],[742,756,"Concept"],[762,776,"Concept"],[782,796,"Concept"],[1050,1064,"Concept"],[1075,1089,"Concept"],[1166,1175,"Concept"],[1496,1505,"Concept"],[1659,1673,"Concept"],[1679,1693,"Concept"],[1932,1946,"Concept"],[2135,2149,"Concept"],[2388,2402,"Concept"],[2464,2478,"Concept"],[2728,2742,"Concept"],[2784,2798,"Concept"],[2817,2831,"Concept"],[3001,3005,"Concept"],[3053,3057,"Concept"],[3170,3174,"Concept"],[3237,3251,"Concept"],[3268,3277,"Concept"],[3311,3320,"Concept"],[3354,3358,"Concept"],[3453,3462,"Concept"],[3575,3577,"Concept"],[3587,3596,"Concept"],[3792,3806,"Concept"],[3812,3826,"Concept"],[3835,3849,"Concept"],[4047,4061,"Concept"],[4086,4100,"Concept"],[4490,4504,"Concept"],[4510,4524,"Concept"],[4771,4785,"Concept"],[4803,4805,"Concept"],[4818,4820,"Concept"],[4902,4906,"Concept"],[4934,4943,"Concept"],[5005,5007,"Concept"],[5038,5042,"Concept"],[5137,5146,"Concept"],[5309,5311,"Concept"],[5393,5407,"Concept"],[5425,5427,"Concept"],[5599,5613,"Concept"]],"Comments":[]}
