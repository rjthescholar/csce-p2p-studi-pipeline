{"id":290,"text":"Introduction to Operating Systems\nCS 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne ©2013)\n\n\fAnnouncements\n• Upcoming deadlines:\n• Homework 11: due on 4\/18\n• Project 3: Late due date on 4\/13\n• Late penalty waived\n\n• Lab 4: due on 4\/15\n• Quiz 3: due on 4\/15\n• Homework 12: due on 4\/25\n• Lab 5: due on 5\/2\n• Project 4 and Quiz 4: due on 5\/2\n• Bonus Homework: due on 5\/2\n• Course Post-Test: due on 5\/2\nCS 1550 – Operating Systems – Sherif Khattab\n\n2\n\n\fMuddiest Points (1\/2)\n• when is the parity checked to see if there is a bit error\n• a little confused about parity example\n• How to flip the correct bits back that were changed with\nparity?\n• What is parity used for\n• ECC\n• What things move how using what in the disk\n• disk request time delay factors\n•\n\ntransfer time\/rotating time\/seek time\n\n• I feel like rotational delay and actual transfer time are\noverlapped. The sector is spending time to rotate to the\nhead, and at the same time, the head is rotating to find\nthat sector. Are they moving towards each other at the\nsame time?\nCS 1550 – Operating Systems – Sherif Khattab\n\n3\n\n\fDisk drive structure\nhead\nsector\n\nplatter\ntrack\ncylinder\n\nsurfaces\n\nspindle\n\nactuator\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n4\n\n\fMuddiest Points (2\/2)\n• In the last top hat question, why the page table gets\nsmaller if the page frames are larger. I understand\nthat would mean less entries, but wouldn't each entry\nwould be larger, making the overall table the same\nsize?\n• What are RAIDs for?\n\n• Does RAID4 have any advantages over RAID5?\n• All of it, bro\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n5\n\n\fProblem of the Day – Part 1\n• How does a file system handle errors?\n• Answer: Defense in Depth\n• multiple layers of error detection\/correction\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n6\n\n\fWhen good disks go bad…\nDisks have defects\nIn 3M+ sectors, this isn’t surprising!\n\nECC helps with errors, but sometimes this isn’t enough\n\nDisks keep spare sectors (normally unused) and remap bad\nsectors into these spares\nIf there’s time, the whole track could be reordered…\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n7\n\n\fRAIDs, RAIDs, and more RAIDs\nstrip\n\nstrip\n\nStripe\nRAID 0\n(Redundant Array of Inexpensive Disks\n\nRAID 1\n(Mirrored copies)\n\nRAID 4\n(Striped with parity)\n\nRAID 5\n(Parity rotates through disks)\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n8\n\n\fBacking up a file system\n• A file system to be dumped\n• Squares are directories, circles are files\n• Shaded items, modified since last dump\n• Each directory & file labeled by i-node number\n\nFile that has\nnot changed\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n9\n\n\fBitmaps used in a file system dump\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n10\n\n\fChecking the file system for consistency\nConsistent\n\nMissing (“lost”) block\n\nDuplicate block in free list\n\nDuplicate block in two files\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n11\n\n\fProblem of the Day – Part 2\n• How does a file system hide disk access delays?\n• Answer: Caching\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n12\n\n\fFile block cache data structures\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n13\n\n\fLog-structured file systems\n• Trends in disk & memory\n• Faster CPUs\n• Larger memories\n\n• Result\n• More memory -> disk caches can also be larger\n• Increasing number of read requests can come from cache\n• Thus, most disk accesses will be writes\n\n• LFS structures entire disk as a log\n• All writes initially buffered in memory\n• Periodically write these to the end of the disk log\n• When file opened, locate i-node, then find blocks\n\n• Issue: what happens when blocks are deleted?\nCS 1550 – Operating Systems – Sherif Khattab\n\n14\n\n\fLog Structured File System\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n15\n\n\fLog Structured File System\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n16\n\n\fFlash File System\n\nWear Leveling\n\nCount total writes per flash sector and attempt to\nbalance across the whole disk\nCS 1550 – Operating Systems – Sherif Khattab\n\n17\n\n\fWear leveling for SSDs\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n18\n\n\fDisk block size\n• Dark line (left hand scale) gives data rate of a disk\n\n• Dotted line (right hand scale) gives disk space\nefficiency\n• All files 2KB\n\nBlock size\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n19\n\n\fProblem of the Day – Part 3\n• How do device drivers program I\/O devices?\n• Answer: three methods\n• polling\n• Interrupts\n• DMA\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n20\n\n\fHow are I\/O devices connected?\n• Single-bus\n• All memory accesses go\nover a shared bus\n• I\/O and RAM accesses\ncompete for bandwidth\n\nCPU\n\nMemory\n\nI\/O\n\nCPU\n\nMemory\n\nI\/O\n\n• Dual-bus\n• RAM access over highspeed bus\n• I\/O access over lower-speed\nbus\n• Less competition\n• More hardware (more\nexpensive…)\n\nThis port allows I\/O devices\naccess into memory\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n21\n\n\fMemory-Mapped vs. separate I\/O Space\n\nMemory\n0xFFF…\n\nI\/O ports\n\n0\n\nSeparate\nI\/O & memory\nspace\n\nMemory-mapped I\/O\n\nCS 1550 – Operating Systems – Sherif Khattab\n\nHybrid: both\nmemory-mapped &\nseparate spaces\n\n22\n\n\fExample: Dynamic Frequency on XScale\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n23\n\n\fProgrammed I\/O example: printing a page\n\nUser\n\nPrinted\npage\n\nKernel\n\nABCD\nEFGH\n\nPrinted\npage\nABCD\nEFGH\n\nA\n\nABCD\nEFGH\n\nCS 1550 – Operating Systems – Sherif Khattab\n\nPrinted\npage\nABCD\nEFGH\n\nAB\n\nABCD\nEFGH\n\n24\n\n\fPolling\n\ncopy_from_user (buffer, p, count); \/\/ copy into kernel buffer\nfor (j = 0; j < count; j++) {\n\/\/ loop for each char\nwhile (*printer_status_reg != READY)\n;\n\/\/ wait for printer to be ready\n*printer_data_reg = p[j]; \/\/ output a single character\n}\nreturn_to_user();\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n25\n\n\fHardware’s view of interrupts\n\nBus\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n26\n\n\fInterrupt-driven I\/O\ncopy_from_user (buffer, p, count);\nj = 0;\nenable_interrupts();\nwhile (*printer_status_reg != READY)\n;\n*printer_data_reg = p[0];\nscheduler(); \/\/ and block user\nif (count == 0) {\nunblock_user();\n} else {\nj++;\n*printer_data_reg = p[j];\ncount--;\n}\nacknowledge_interrupt();\nreturn_from_interrupt();\n\nCode run by system call\n\nCode run at interrupt time\n(Interrupt handler)\n\nCS 1550 – Operating Systems – Sherif Khattab\n\n27\n\n\f","label":[[539,545,"Concept"],[611,617,"Concept"],[685,691,"Concept"],[703,709,"Concept"],[721,724,"Concept"],[766,770,"Concept"],[773,796,"Concept"],[808,821,"Concept"],[822,835,"Concept"],[836,845,"Concept"],[861,877,"Concept"],[889,902,"Concept"],[923,929,"Concept"],[964,968,"Concept"],[996,1000,"Concept"],[1026,1032,"Concept"],[1137,1157,"Concept"],[1158,1162,"Concept"],[1163,1169,"Concept"],[1171,1178,"Concept"],[1179,1184,"Concept"],[1185,1193,"Concept"],[1195,1203,"Concept"],[1205,1212,"Concept"],[1214,1222,"Concept"],[1336,1346,"Concept"],[1367,1378,"Concept"],[1425,1432,"Concept"],[1452,1457,"Concept"],[1526,1531,"Concept"],[1545,1550,"Concept"],[1576,1581,"Concept"],[1692,1703,"Concept"],[1748,1793,"Concept"],[1855,1860,"Concept"],[1869,1874,"Concept"],[1895,1902,"Concept"],[1928,1931,"Concept"],[1984,1989,"Concept"],[1995,2008,"Concept"],[2037,2048,"Concept"],[2094,2099,"Concept"],[2171,2176,"Concept"],[2178,2183,"Concept"],[2194,2199,"Concept"],[2200,2205,"Concept"],[2207,2212,"Concept"],[2214,2220,"Concept"],[2221,2227,"Concept"],[2229,2265,"Concept"],[2267,2273,"Concept"],[2293,2299,"Concept"],[2301,2308,"Concept"],[2314,2320,"Concept"],[2323,2329,"Concept"],[2331,2337,"Concept"],[2354,2359,"Concept"],[2425,2436,"Concept"],[2441,2452,"Concept"],[2587,2593,"Concept"],[2679,2686,"Concept"],[2697,2713,"Concept"],[2779,2790,"Concept"],[2995,3006,"Concept"],[3012,3030,"Concept"],[3042,3049,"Concept"],[3102,3134,"Concept"],[3187,3214,"Concept"],[3227,3231,"Concept"],[3300,3311,"Concept"],[3354,3367,"Concept"],[3382,3387,"Concept"],[3401,3414,"Concept"],[3423,3429,"Concept"],[3433,3436,"Concept"],[3455,3459,"Concept"],[3465,3468,"Concept"],[3475,3481,"Concept"],[3492,3500,"Concept"],[3556,3564,"Concept"],[3592,3598,"Concept"],[3716,3742,"Concept"],[3795,3821,"Concept"],[3874,3891,"Concept"],[3893,3906,"Concept"],[3920,3926,"Concept"],[3931,3943,"Concept"],[3984,3988,"Concept"],[4040,4053,"Concept"],[4058,4062,"Concept"],[4115,4130,"Concept"],[4167,4186,"Concept"],[4227,4237,"Concept"],[4366,4380,"Concept"],[4428,4435,"Concept"],[4438,4448,"Concept"],[4451,4454,"Concept"],[4540,4550,"Concept"],[4583,4593,"Concept"],[4678,4686,"Concept"],[4705,4718,"Concept"],[4737,4752,"Concept"],[4907,4943,"Concept"],[4974,5001,"Concept"],[5003,5020,"Concept"],[5081,5112,"Concept"],[5128,5145,"Concept"],[5208,5222,"Concept"],[5416,5423,"Concept"],[5473,5486,"Concept"],[5824,5844,"Concept"],[6193,6210,"Concept"]],"Comments":[]}
{"id":291,"text":"CS 0007: Introduction to Java\nLecture 7\nNathan Ong\nUniversity of Pittsburgh\nSeptember 22, 2016\n\n\fFUNCTIONS\n\n\fFunctions\n• A function is similar to its mathematical\ncounterpart\n• f(x) = x2, plug in 3, get 9\n• Contains several more parts\n\n\fJava Functions\n• Takes in zero or more parameters,\nprocesses them in the function body,\nand returns a result\n• Imagine going to BestBuyTM and telling\nthem you want your computer fixed.\nYou are telling them to run a fixing\nfunction, with your computer being a\nparameter. What you get back is your\nfixed computer.\n\n\fYou Already Have the Power!\n• You already know how to call functions!\nStatic:\nClassName.functionName(<parameters\n>);\nNon-static:\nobjectName.functionName(<parameter\ns>);\n• How do I make my own?\n\n\fFunction Components\n\n1.\n2.\n3.\nFunction 4.\nHeader 5.\n\nFunction\nBody 6.\n\nVisibility type (public\/protected\/private)\nstatic (For now, required)\nReturn Type\nfunctionName\nParentheses “()”\n–\na)\nb)\nc)\n\nParameters\nType1 parameterName1\nType2 parameterName2\n…\n\nCurly Brackets\/Braces “{}”\n–\n\nreturn a value\n\n\fA Simple Unnecessary\nFunction\n• I want this function to take two doubles\nand return their sum.\n• Let us go through the list and see what\nneeds to be incorporated for the\nfunction.\n\n\fFunction Components\n1.\n2.\n3.\n4.\n5.\n\nWe’ll just use public for now.\nstatic (For now, required)\nWhat is the Return Type?\nWhat is an appropriate functionName?\nParentheses “()”\n–\n\nWhat are the parameters?\n\n6. Curly Brackets\/Braces “{}”\n–\n–\n\nWhat do we do in the Function Body?\nWhat do we return?\n\n\fReturn Type\n• What kind of thing are we going to give\nback to the function caller?\n• “I want this function to take two\ndoubles and return their sum.”\n• The sum of two doubles better be a\ndouble.\n\n\fFunction Name\n• The function name should easily\ndescribe what the function does.\n• “I want this function to take two\ndoubles and return their sum.”\n• “sum”? Probably not enough detail,\nsince there are many types that can be\nsummed.\n• sumDoubles\n\n\fParameters\n• The required input to the function.\n• The data that the function needs in\norder to properly execute its duties.\n• “I want this function to take two\ndoubles and return their sum.”\n• Two doubles.\n• Names?\n\n\fFunction Header\n\n\/\/sums two doubles together\npublic static double sumDoubles\n(double addend1, double addend2)\n\n\fFunction Body\n…(Function Header)\n{\n???\n}\n\n\fFunction Body\n…(Function Header)\n{\ndouble sum = addend1 + addend2;\nreturn sum;\n}\/\/end method(double,double)\n\n\fFunction Body\n…(Function Header)\n{\nreturn addend1 + addend2;\n}\/\/end method(double,double)\n\n\fFunction Body\npublic class Functions\n{\n…(Function)\npublic static void main(String[] args)\n{\ndouble sum = sumDoubles(2.5,3.9);\nSystem.out.println(sum);\n}\/\/end method main\n}\/\/End class Functions\n\n\fimport java.util.Scanner;\npublic class AddingMachine\n{\n…(Function)\npublic static void main(String[] args)\n{\nScanner scan = new Scanner(System.in);\nSystem.out.println(\"Please enter a number:\");\ndouble firstNum = scan.nextDouble();\nSystem.out.println(\"Please enter a second\nnumber:\");\ndouble secondNum = scan.nextDouble();\ndouble sum = sumDoubles(firstNum,secondNum);\nSystem.out.println(\"The sum of \" + firstNum +\n\" and \" + secondNum + \" equals \" +\nsum);\n}\/\/end method main\n}\/\/End class AddingMachine\n\n\fScope\n• Why did we need to submit firstNum\nand secondNum to sumDoubles?\n• Why can’t sumDoubles just use the\nalready created variables?\n• This relates to scope.\n\n\fScope\nConfidential\nSecret\nTop Secret\n\n\fScope\npublic class\nAddingMachine\npublic\nstatic void\nmain\n\npublic\nstatic\ndouble\nsumDoubl\nes\n\n\fPassing-in Parameters\n• The act of providing parameters in a\nfunction call is called Passing-in.\n• Java has two kinds of passing-in.\n\n\fPass-by-Value\n• Passing-in a copy of the value of the\nvariable.\n• Any change made to the variable is not\nreflected when the function returns.\n• All primitive type parameters are passby-value.\n\n\fPass-by-Reference\n• Passing-in the actual variable.\n• Any change made to the variable IS\nreflected when the function returns,\nUNLESS the parameter name is\nREASSIGNED.\n• All non-primitive type parameters are\npass-by-reference.\n\n\fAnother Simple Function\n• I want a function that prints a nice\nBritish greeting, complete with the\nperson’s full name.\nSource:\nhttp:\/\/www.bbcamerica.com\/anglophen\nia\/2011\/07\/five-slang-ways-to-say-hello\/\n\n\fFunction Components\n1.\n2.\n3.\n4.\n5.\n\npublic\nstatic\nWhat is the Return Type?\nWhat is an appropriate functionName?\nParentheses “()”\n–\n\nWhat are the parameters?\n\n6. Curly Brackets\/Braces “{}”\n–\n–\n\nWhat do we do in the Function Body?\nWhat do we return?\n\n\fReturn Type\n• Does this function even need to return\nany data or information?\n• No, so we should use void as our\nreturn type.\n\n\fFunction Header\n\npublic static void britishGreeting\n(String fullName)\n\n\fFunction Body\n…(Function Header)\n{\nSystem.out.println(\"Wotcha \" +\nfullName +\n\". Fancy a cuppa?\");\n}\/\/end method(String)\n\/\/Note no return statement\n\n\f","label":[[97,106,"Concept"],[109,118,"Concept"],[123,131,"Concept"],[242,251,"Concept"],[276,286,"Concept"],[310,323,"Concept"],[329,336,"Concept"],[459,467,"Concept"],[496,505,"Concept"],[610,619,"Concept"],[621,627,"Concept"],[629,667,"Concept"],[668,678,"Concept"],[680,719,"Concept"],[746,754,"Concept"],[776,794,"Concept"],[799,812,"Concept"],[817,832,"Concept"],[834,840,"Concept"],[841,850,"Concept"],[851,858,"Concept"],[860,866,"Concept"],[887,898,"Concept"],[899,911,"Concept"],[912,928,"Concept"],[941,951,"Concept"],[997,1023,"Concept"],[1027,1033,"Concept"],[1065,1073,"Concept"],[1088,1096,"Concept"],[1109,1116,"Concept"],[1121,1127,"Concept"],[1214,1222,"Concept"],[1226,1245,"Concept"],[1277,1283,"Concept"],[1293,1299,"Concept"],[1332,1343,"Concept"],[1368,1380,"Concept"],[1382,1398,"Concept"],[1415,1425,"Concept"],[1431,1457,"Concept"],[1484,1497,"Concept"],[1510,1516,"Concept"],[1520,1531,"Concept"],[1586,1601,"Concept"],[1618,1626,"Concept"],[1639,1646,"Concept"],[1651,1657,"Concept"],[1687,1694,"Concept"],[1707,1713,"Concept"],[1717,1730,"Concept"],[1737,1750,"Concept"],[1783,1791,"Concept"],[1813,1821,"Concept"],[1834,1841,"Concept"],[1846,1852,"Concept"],[1923,1928,"Concept"],[1964,1974,"Concept"],[2003,2011,"Concept"],[2033,2041,"Concept"],[2104,2112,"Concept"],[2125,2132,"Concept"],[2137,2143,"Concept"],[2162,2169,"Concept"],[2182,2197,"Concept"],[2210,2217,"Concept"],[2227,2233,"Concept"],[2234,2240,"Concept"],[2241,2247,"Concept"],[2260,2266,"Concept"],[2276,2282,"Concept"],[2294,2307,"Concept"],[2310,2325,"Concept"],[2337,2350,"Concept"],[2353,2368,"Concept"],[2372,2378,"Concept"],[2404,2410,"Concept"],[2423,2429,"Concept"],[2430,2436,"Concept"],[2437,2443,"Concept"],[2447,2460,"Concept"],[2463,2478,"Concept"],[2482,2488,"Concept"],[2515,2521,"Concept"],[2522,2528,"Concept"],[2529,2535,"Concept"],[2539,2552,"Concept"],[2553,2559,"Concept"],[2560,2575,"Concept"],[2580,2588,"Concept"],[2590,2596,"Concept"],[2597,2603,"Concept"],[2604,2608,"Concept"],[2609,2613,"Concept"],[2614,2620,"Concept"],[2631,2637,"Concept"],[2665,2683,"Concept"],[2697,2708,"Concept"],[2716,2731,"Concept"],[2734,2740,"Concept"],[2741,2758,"Concept"],[2760,2766,"Concept"],[2767,2772,"Concept"],[2791,2799,"Concept"],[2801,2807,"Concept"],[2808,2814,"Concept"],[2815,2819,"Concept"],[2820,2824,"Concept"],[2825,2831,"Concept"],[2842,2849,"Concept"],[2861,2879,"Concept"],[2881,2899,"Concept"],[2927,2933,"Concept"],[2945,2962,"Concept"],[2964,2982,"Concept"],[3017,3023,"Concept"],[3036,3053,"Concept"],[3055,3061,"Concept"],[3100,3118,"Concept"],[3194,3205,"Concept"],[3213,3218,"Concept"],[3235,3240,"Concept"],[3359,3368,"Concept"],[3388,3393,"Concept"],[3397,3402,"Concept"],[3436,3441,"Concept"],[3442,3454,"Concept"],[3469,3475,"Concept"],[3476,3482,"Concept"],[3483,3487,"Concept"],[3488,3492,"Concept"],[3494,3500,"Concept"],[3501,3507,"Concept"],[3508,3514,"Concept"],[3529,3550,"Concept"],[3574,3584,"Concept"],[3590,3603,"Concept"],[3614,3624,"Concept"],[3650,3660,"Concept"],[3664,3677,"Concept"],[3680,3690,"Concept"],[3718,3726,"Concept"],[3753,3761,"Concept"],[3788,3796,"Concept"],[3797,3804,"Concept"],[3812,3837,"Concept"],[3842,3854,"Concept"],[3858,3875,"Concept"],[3878,3888,"Concept"],[3900,3908,"Concept"],[3935,3943,"Concept"],[3966,3974,"Concept"],[3975,3982,"Concept"],[3995,4009,"Concept"],[4031,4060,"Concept"],[4065,4082,"Concept"],[4101,4109,"Concept"],[4121,4129,"Concept"],[4292,4300,"Concept"],[4328,4334,"Concept"],[4335,4341,"Concept"],[4354,4365,"Concept"],[4390,4402,"Concept"],[4404,4420,"Concept"],[4437,4447,"Concept"],[4453,4479,"Concept"],[4506,4519,"Concept"],[4532,4538,"Concept"],[4542,4553,"Concept"],[4566,4574,"Concept"],[4588,4594,"Concept"],[4643,4647,"Concept"],[4655,4666,"Concept"],[4670,4685,"Concept"],[4687,4693,"Concept"],[4694,4700,"Concept"],[4701,4705,"Concept"],[4723,4729,"Concept"],[4742,4755,"Concept"],[4758,4773,"Concept"],[4777,4795,"Concept"],[4847,4853,"Concept"],[4854,4860,"Concept"],[4872,4888,"Concept"]],"Comments":[]}
{"id":292,"text":"CS 0007: Introduction to Java\nLecture 17\nNathan Ong\nUniversity of Pittsburgh\nNovember 8, 2016\n\n\fMain Portions of OOP\n• Building a class\n• Determining inter-class relationships\n\n\fClass Components\n• Class-level\/Instance Variables\n• Methods\n• Constructor(s)\n\n\fInter-class Relationships\n• Building a single class is useless. It\nneeds to be used in context.\n• There are two main relationships\nbetween classes\n– Sub\/Super class\n– Ownership\n\n\fSubclasses\n• A subclass of a class is a more specific\ntype of a class\n• Also known as the child of a class\n• For example, a tree would be a subclass\nof plant\n• Subclasses are meant to expand upon\nthe behavior of their more general\nparent class\n• You can have several subclasses\n\n\fSuperclasses\n• On the converse, a superclass is a more\nabstract and general version of a class\n• Also known as the parent of a class\n• Plant is the superclass of Tree\n• You can only have one superclass\n\n\fDeclaring a Class to be a\nSubtype\n• In order to declare a class’s parent, use\nthe keyword extends\n• (Classes that do not have a parent class\nimplicitly extend the Object class)\n\n\fInheritance\n• A subclass inherits all non-private fields\nand methods\n• Accessing these fields and methods\nrequires the keyword super.\n• (Note: you may also be able to access\nprivate fields with the parent class’s\ngetters and setters, which may be safer)\n\n\fRestricting Access\n• What if you want a field or method to be\ninherited, but still do not necessarily\nwant it to be accessed by anyone?\n• Use the keyword protected\n• Remember, releasing your access to\nthese fields and methods should only\nbe done when necessary\n\n\fRegarding Constructors\n• Constructors cannot be inherited, even\nthough they are public\n• However, you can, and should, use them\nfrom the subclass’s constructor, to\nensure complete initialization\n• You can call the parent’s constructor by\nusing the keyword super\n\n\fCalling Superclass Constructor\n• Unlike calling an overloaded\nconstructor of the same class, calling a\nsuperclass constructor does not need to\nbe the only line of code\n• However, it must still be the first line of\ncode in the constructor\n\n\fExample\npublic class Vehicle\n{\nprivate final int numWheels;\n…\npublic Vehicle(int numWheels)\n{\nthis.numWheels = numWheels;\n…\n}\/\/end function(double)\n…\n}\/\/End class Vehicle\n\n\fExample\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n…\npublic Car(int numPassengers, double gasRemaining)\n{\nsuper(4);\nthis.numPassengers = numPassengers;\nthis.gasRemaining = gasRemaining;\n}\/\/end constructor(int,double)\n…\n}\/\/End class Plant\n\n\fWhat If the Superclass’s Method\nDefinition Does Not Fit the Class’s?\n• We can override the definition by using\nthe exact same function header\n• The line directly above function header\nmust have “@Override” only\n• As an example, our Car class should\nprobably use the original “move”\nmethod, rather than creating an entirely\nnew “drive” method that does\nsomething similar\n\n\fOverride\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n…\n@Override\npublic boolean move(double dist)\n{\nreturn super.move(dist*10.0) &&\n(this.gasRemaining > 0);\n}\/\/end function(double)\n…\n}\/\/End class Plant\n\n\fOverriding\n• I can still reference the original method\nusing the super keyword\n• Unless your overridden method totally\ndiscards the functionality of the\nsuperclass’s method, you should call the\nsuperclass’s method at least once\n\n\fNote\n• You cannot override constructors\n\n\fOwnership\n• Ownership is simply one class using\nanother as a property\n• A Car may have an Engine, a Radio, and\nan Owner, depending on what you need\n• A Car’s superclass and subclasses\ncertainly are not Engine, Radio, and\nOwner\n\n\fUsing the Classes\npublic class Garage\n{\nprivate Vehicle[] vehicles;\n…\npublic Garage(int capacity)\n{\nthis.vehicles = new Vehicle[capacity];\nfor(int i = 0; i < vehicles.length; i++)\n{\nvehicles[i] = null;\n}\n…\n}\/\/end constructor(int)\n…\n}\/\/End class Garage\n\n\fUsing the Classes\npublic class Garage\n{\n…\npublic boolean addVehicle(Vehicle vehicle)\n{\n\/\/Note: there is a better way!\nfor(int i = 0; i < vehicles.length; i++)\n{\nif(vehicles[i] == null)\n{\nvehicles[i] = vehicle;\nreturn true;\n}\n}\nreturn false;\n}\/\/end method(Vehicle)\n}\/\/End class Garage\n\n\fQUESTIONS?\n\n\fModeling a Problem\n“Joe’s Automotive Shop services foreign cars, and\nspecializes in servicing cars made by Mercedes,\nPorsche, and BMW. When a customer brings a car to\nthe shop, the manager gets the customer’s name,\naddress, and telephone number. Then the manager\ndetermines the make, model, and year of the car, and\ngives the customer a service quote. The service\nquote shows the estimated parts charges, estimated\nlabor charges, sales tax, and total estimated\ncharges.”\nSource: Starting Out with Java: From Control Structures\nthrough Objects by Tony Gaddis\n\n\fFind the Nouns\n“Joe’s Automotive Shop services foreign cars,\nand specializes in servicing cars made by\nMercedes, Porsche, and BMW. When a\ncustomer brings a car to the shop, the\nmanager gets the customer’s name, address,\nand telephone number. Then the manager\ndetermines the make, model, and year of the\ncar, and gives the customer a service quote.\nThe service quote shows the estimated parts\ncharges, estimated labor charges, sales tax,\nand total estimated charges.”\n\n\fCoalescing\naddress\nBMW\ncar\nquote\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nPorsche\nJoe’s Automotive Shop sales tax\nmake\nservice\nmanager\nMercedes\nmodel\n\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\n\fNoun Out of Scope\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\n\fSubtypes\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\nname\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated charges\nyear\n\nWhether these subtypes are specific objects\n(instances) or more specific types of cars\n(subclasses) will depend on your needs. In this\nscenario, there is no need to represent them as\nclasses.\n\n\fSimple Properties\naddress\nforeign cars\nBMW\nJoe’s Automotive Shop\ncar\nmake service quote\ncars\nmanager\ncustomer Mercedes\nestimated labor charges\nmodel\nestimated parts charges\nname\n\nPorsche\nsales tax\nshop\ntelephone number\ntotal estimated charges\nyear\n\nSimple properties can be composed of\nprimitives or preexisting object\ndefinitions, and fall under a particular\nobject class.\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA car had three simple properties in our\nscenario. What types would they be?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA car had three simple properties in our\nscenario. What types would they be?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA customer had three simple properties\nin our scenario. What types would they\nbe?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA customer had three simple properties\nin our scenario. What types would they\nbe?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA service quote had four simple\nproperties in our scenario. What types\nwould they be?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe’s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA service quote had four simple\nproperties in our scenario. What types\nwould they be?\n\n\fWho Owns Everything?\naddress\nforeign cars\nBMW\nJoe’s Automotive Shop\ncar\nmake service quote\ncars\nmanager\ncustomer\nMercedes\nestimated labor charges\nmodel\nestimated parts charges\nname\n\nPorsche\nsales tax\nshop\ntelephone number\ntotal estimated charges\nyear\n\nOur scenario revolves around the\nautomotive shop, so this will hold the\nmain method and will be the overarching\nclass.\n\n\fCode on the board!\n\n\f","label":[[113,116,"Concept"],[130,135,"Concept"],[150,175,"Concept"],[178,183,"Concept"],[197,227,"Concept"],[230,237,"Concept"],[240,254,"Concept"],[257,282,"Concept"],[303,308,"Concept"],[396,403,"Concept"],[406,421,"Concept"],[424,433,"Concept"],[436,446,"Concept"],[451,459,"Concept"],[465,470,"Concept"],[490,494,"Concept"],[500,505,"Concept"],[526,542,"Concept"],[576,584,"Concept"],[596,606,"Concept"],[667,679,"Concept"],[703,713,"Concept"],[716,728,"Concept"],[750,760,"Concept"],[805,810,"Concept"],[831,848,"Concept"],[864,874,"Concept"],[907,917,"Concept"],[932,937,"Concept"],[946,953,"Concept"],[978,992,"Concept"],[1010,1017,"Concept"],[1021,1028,"Concept"],[1048,1060,"Concept"],[1072,1078,"Concept"],[1083,1095,"Concept"],[1099,1110,"Concept"],[1115,1123,"Concept"],[1124,1132,"Concept"],[1137,1167,"Concept"],[1186,1192,"Concept"],[1197,1204,"Concept"],[1226,1231,"Concept"],[1273,1287,"Concept"],[1297,1331,"Concept"],[1395,1400,"Concept"],[1404,1410,"Concept"],[1417,1426,"Concept"],[1509,1518,"Concept"],[1562,1568,"Concept"],[1573,1580,"Concept"],[1628,1640,"Concept"],[1643,1655,"Concept"],[1666,1675,"Concept"],[1698,1704,"Concept"],[1755,1777,"Concept"],[1798,1812,"Concept"],[1832,1852,"Concept"],[1874,1879,"Concept"],[1890,1912,"Concept"],[1933,1955,"Concept"],[1968,1973,"Concept"],[1985,2007,"Concept"],[2108,2119,"Concept"],[2137,2142,"Concept"],[2153,2160,"Concept"],[2161,2166,"Concept"],[2184,2190,"Concept"],[2216,2220,"Concept"],[2279,2284,"Concept"],[2303,2309,"Concept"],[2310,2315,"Concept"],[2320,2327,"Concept"],[2338,2345,"Concept"],[2365,2372,"Concept"],[2396,2402,"Concept"],[2449,2454,"Concept"],[2459,2463,"Concept"],[2495,2499,"Concept"],[2536,2547,"Concept"],[2569,2574,"Concept"],[2595,2625,"Concept"],[2643,2650,"Concept"],[2661,2669,"Concept"],[2709,2724,"Concept"],[2751,2766,"Concept"],[2778,2787,"Concept"],[2819,2824,"Concept"],[2865,2871,"Concept"],[2918,2924,"Concept"],[2955,2963,"Concept"],[2964,2970,"Concept"],[2971,2976,"Concept"],[2981,2988,"Concept"],[2999,3006,"Concept"],[3026,3033,"Concept"],[3057,3066,"Concept"],[3067,3073,"Concept"],[3109,3114,"Concept"],[3192,3197,"Concept"],[3206,3216,"Concept"],[3231,3240,"Concept"],[3254,3260,"Concept"],[3271,3276,"Concept"],[3299,3316,"Concept"],[3359,3378,"Concept"],[3400,3419,"Concept"],[3454,3462,"Concept"],[3463,3475,"Concept"],[3478,3487,"Concept"],[3490,3499,"Concept"],[3514,3519,"Concept"],[3539,3547,"Concept"],[3636,3646,"Concept"],[3651,3661,"Concept"],[3717,3724,"Concept"],[3725,3731,"Concept"],[3732,3737,"Concept"],[3747,3754,"Concept"],[3777,3783,"Concept"],[3807,3811,"Concept"],[3823,3826,"Concept"],[3920,3931,"Concept"],[3946,3951,"Concept"],[3971,3978,"Concept"],[3979,3985,"Concept"],[3986,3991,"Concept"],[4003,4009,"Concept"],[4209,4215,"Concept"],[4232,4237,"Concept"],[4795,4802,"Concept"],[5788,5796,"Concept"],[6043,6051,"Concept"],[6065,6072,"Concept"],[6074,6083,"Concept"],[6102,6107,"Concept"],[6117,6127,"Concept"],[6212,6219,"Concept"],[6230,6240,"Concept"],[6479,6489,"Concept"],[6509,6519,"Concept"],[6535,6553,"Concept"],[6583,6595,"Concept"],[6606,6616,"Concept"],[6874,6884,"Concept"],[6907,6912,"Concept"],[6937,6947,"Concept"],[7205,7215,"Concept"],[7238,7243,"Concept"],[7268,7278,"Concept"],[7541,7551,"Concept"],[7574,7579,"Concept"],[7604,7614,"Concept"],[7877,7887,"Concept"],[7910,7915,"Concept"],[7940,7950,"Concept"],[8217,8227,"Concept"],[8250,8255,"Concept"],[8280,8290,"Concept"],[8557,8567,"Concept"],[8590,8595,"Concept"],[8937,8948,"Concept"],[8977,8982,"Concept"]],"Comments":[]}
