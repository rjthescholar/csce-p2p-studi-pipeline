{"id": 292, "segment": "dev_set", "course": "cs0007", "lec": "lec17", "text": "CS 0007: Introduction to Java\nLecture 17\nNathan Ong\nUniversity of Pittsburgh\nNovember 8, 2016\n\n\fMain Portions of OOP\n\u2022 Building a class\n\u2022 Determining inter-class relationships\n\n\fClass Components\n\u2022 Class-level/Instance Variables\n\u2022 Methods\n\u2022 Constructor(s)\n\n\fInter-class Relationships\n\u2022 Building a single class is useless. It\nneeds to be used in context.\n\u2022 There are two main relationships\nbetween classes\n\u2013 Sub/Super class\n\u2013 Ownership\n\n\fSubclasses\n\u2022 A subclass of a class is a more specific\ntype of a class\n\u2022 Also known as the child of a class\n\u2022 For example, a tree would be a subclass\nof plant\n\u2022 Subclasses are meant to expand upon\nthe behavior of their more general\nparent class\n\u2022 You can have several subclasses\n\n\fSuperclasses\n\u2022 On the converse, a superclass is a more\nabstract and general version of a class\n\u2022 Also known as the parent of a class\n\u2022 Plant is the superclass of Tree\n\u2022 You can only have one superclass\n\n\fDeclaring a Class to be a\nSubtype\n\u2022 In order to declare a class\u2019s parent, use\nthe keyword extends\n\u2022 (Classes that do not have a parent class\nimplicitly extend the Object class)\n\n\fInheritance\n\u2022 A subclass inherits all non-private fields\nand methods\n\u2022 Accessing these fields and methods\nrequires the keyword super.\n\u2022 (Note: you may also be able to access\nprivate fields with the parent class\u2019s\ngetters and setters, which may be safer)\n\n\fRestricting Access\n\u2022 What if you want a field or method to be\ninherited, but still do not necessarily\nwant it to be accessed by anyone?\n\u2022 Use the keyword protected\n\u2022 Remember, releasing your access to\nthese fields and methods should only\nbe done when necessary\n\n\fRegarding Constructors\n\u2022 Constructors cannot be inherited, even\nthough they are public\n\u2022 However, you can, and should, use them\nfrom the subclass\u2019s constructor, to\nensure complete initialization\n\u2022 You can call the parent\u2019s constructor by\nusing the keyword super\n\n\fCalling Superclass Constructor\n\u2022 Unlike calling an overloaded\nconstructor of the same class, calling a\nsuperclass constructor does not need to\nbe the only line of code\n\u2022 However, it must still be the first line of\ncode in the constructor\n\n\fExample\npublic class Vehicle\n{\nprivate final int numWheels;\n\u2026\npublic Vehicle(int numWheels)\n{\nthis.numWheels = numWheels;\n\u2026\n}//end function(double)\n\u2026\n}//End class Vehicle\n\n\fExample\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n\u2026\npublic Car(int numPassengers, double gasRemaining)\n{\nsuper(4);\nthis.numPassengers = numPassengers;\nthis.gasRemaining = gasRemaining;\n}//end constructor(int,double)\n\u2026\n}//End class Plant\n\n\fWhat If the Superclass\u2019s Method\nDefinition Does Not Fit the Class\u2019s?\n\u2022 We can override the definition by using\nthe exact same function header\n\u2022 The line directly above function header\nmust have \u201c@Override\u201d only\n\u2022 As an example, our Car class should\nprobably use the original \u201cmove\u201d\nmethod, rather than creating an entirely\nnew \u201cdrive\u201d method that does\nsomething similar\n\n\fOverride\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n\u2026\n@Override\npublic boolean move(double dist)\n{\nreturn super.move(dist*10.0) &&\n(this.gasRemaining > 0);\n}//end function(double)\n\u2026\n}//End class Plant\n\n\fOverriding\n\u2022 I can still reference the original method\nusing the super keyword\n\u2022 Unless your overridden method totally\ndiscards the functionality of the\nsuperclass\u2019s method, you should call the\nsuperclass\u2019s method at least once\n\n\fNote\n\u2022 You cannot override constructors\n\n\fOwnership\n\u2022 Ownership is simply one class using\nanother as a property\n\u2022 A Car may have an Engine, a Radio, and\nan Owner, depending on what you need\n\u2022 A Car\u2019s superclass and subclasses\ncertainly are not Engine, Radio, and\nOwner\n\n\fUsing the Classes\npublic class Garage\n{\nprivate Vehicle[] vehicles;\n\u2026\npublic Garage(int capacity)\n{\nthis.vehicles = new Vehicle[capacity];\nfor(int i = 0; i < vehicles.length; i++)\n{\nvehicles[i] = null;\n}\n\u2026\n}//end constructor(int)\n\u2026\n}//End class Garage\n\n\fUsing the Classes\npublic class Garage\n{\n\u2026\npublic boolean addVehicle(Vehicle vehicle)\n{\n//Note: there is a better way!\nfor(int i = 0; i < vehicles.length; i++)\n{\nif(vehicles[i] == null)\n{\nvehicles[i] = vehicle;\nreturn true;\n}\n}\nreturn false;\n}//end method(Vehicle)\n}//End class Garage\n\n\fQUESTIONS?\n\n\fModeling a Problem\n\u201cJoe\u2019s Automotive Shop services foreign cars, and\nspecializes in servicing cars made by Mercedes,\nPorsche, and BMW. When a customer brings a car to\nthe shop, the manager gets the customer\u2019s name,\naddress, and telephone number. Then the manager\ndetermines the make, model, and year of the car, and\ngives the customer a service quote. The service\nquote shows the estimated parts charges, estimated\nlabor charges, sales tax, and total estimated\ncharges.\u201d\nSource: Starting Out with Java: From Control Structures\nthrough Objects by Tony Gaddis\n\n\fFind the Nouns\n\u201cJoe\u2019s Automotive Shop services foreign cars,\nand specializes in servicing cars made by\nMercedes, Porsche, and BMW. When a\ncustomer brings a car to the shop, the\nmanager gets the customer\u2019s name, address,\nand telephone number. Then the manager\ndetermines the make, model, and year of the\ncar, and gives the customer a service quote.\nThe service quote shows the estimated parts\ncharges, estimated labor charges, sales tax,\nand total estimated charges.\u201d\n\n\fCoalescing\naddress\nBMW\ncar\nquote\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nPorsche\nJoe\u2019s Automotive Shop sales tax\nmake\nservice\nmanager\nMercedes\nmodel\n\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\n\fNoun Out of Scope\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\n\fSubtypes\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\nname\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated charges\nyear\n\nWhether these subtypes are specific objects\n(instances) or more specific types of cars\n(subclasses) will depend on your needs. In this\nscenario, there is no need to represent them as\nclasses.\n\n\fSimple Properties\naddress\nforeign cars\nBMW\nJoe\u2019s Automotive Shop\ncar\nmake service quote\ncars\nmanager\ncustomer Mercedes\nestimated labor charges\nmodel\nestimated parts charges\nname\n\nPorsche\nsales tax\nshop\ntelephone number\ntotal estimated charges\nyear\n\nSimple properties can be composed of\nprimitives or preexisting object\ndefinitions, and fall under a particular\nobject class.\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA car had three simple properties in our\nscenario. What types would they be?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA car had three simple properties in our\nscenario. What types would they be?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA customer had three simple properties\nin our scenario. What types would they\nbe?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA customer had three simple properties\nin our scenario. What types would they\nbe?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA service quote had four simple\nproperties in our scenario. What types\nwould they be?\n\n\fSimple Properties\naddress\nBMW\ncar\ncars\ncustomer\nestimated labor charges\ncharges\nestimated parts charges\n\nforeign cars\nJoe\u2019s Automotive Shop\nmake\nmanager\nMercedes\nmodel\n\nPorsche\nsales tax\nservice quote\nshop\ntelephone number\ntotal estimated\n\nname\n\nyear\n\nA service quote had four simple\nproperties in our scenario. What types\nwould they be?\n\n\fWho Owns Everything?\naddress\nforeign cars\nBMW\nJoe\u2019s Automotive Shop\ncar\nmake service quote\ncars\nmanager\ncustomer\nMercedes\nestimated labor charges\nmodel\nestimated parts charges\nname\n\nPorsche\nsales tax\nshop\ntelephone number\ntotal estimated charges\nyear\n\nOur scenario revolves around the\nautomotive shop, so this will hold the\nmain method and will be the overarching\nclass.\n\n\fCode on the board!\n\n\f", "Comments": [], "label": [[113, 116, "Concept"], [130, 135, "Concept"], [150, 175, "Concept"], [178, 183, "Concept"], [197, 227, "Concept"], [230, 237, "Concept"], [240, 251, "Concept"], [257, 282, "Concept"], [303, 308, "Concept"], [396, 403, "Concept"], [406, 409, "Concept"], [410, 421, "Concept"], [424, 433, "Concept"], [436, 446, "Concept"], [451, 459, "Concept"], [465, 470, "Concept"], [500, 505, "Concept"], [526, 531, "Concept"], [537, 542, "Concept"], [576, 584, "Concept"], [596, 606, "Concept"], [667, 679, "Concept"], [703, 713, "Concept"], [716, 728, "Concept"], [750, 760, "Concept"], [805, 810, "Concept"], [831, 837, "Concept"], [843, 848, "Concept"], [864, 874, "Concept"], [907, 917, "Concept"], [932, 937, "Concept"], [946, 953, "Concept"], [986, 992, "Concept"], [1010, 1017, "Concept"], [1021, 1028, "Concept"], [1048, 1054, "Concept"], [1055, 1060, "Concept"], [1083, 1089, "Concept"], [1090, 1095, "Concept"], [1099, 1110, "Concept"], [1115, 1123, "Concept"], [1124, 1132, "Concept"], [1149, 1155, "Concept"], [1186, 1192, "Concept"], [1197, 1204, "Concept"], [1226, 1231, "Concept"], [1281, 1287, "Concept"], [1297, 1309, "Concept"], [1312, 1319, "Concept"], [1324, 1331, "Concept"], [1395, 1400, "Concept"], [1404, 1410, "Concept"], [1417, 1426, "Concept"], [1509, 1518, "Concept"], [1628, 1640, "Concept"], [1643, 1655, "Concept"], [1666, 1675, "Concept"], [1755, 1765, "Concept"], [1766, 1777, "Concept"], [1832, 1838, "Concept"], [1841, 1852, "Concept"], [1874, 1879, "Concept"], [1890, 1900, "Concept"], [1901, 1912, "Concept"], [1944, 1955, "Concept"], [1985, 1995, "Concept"], [1996, 2007, "Concept"], [2108, 2119, "Concept"], [2595, 2606, "Concept"], [2643, 2649, "Concept"], [2661, 2669, "Concept"], [2778, 2787, "Concept"], [2955, 2963, "Concept"], [3057, 3066, "Concept"], [3206, 3216, "Concept"], [3254, 3260, "Concept"], [3271, 3276, "Concept"], [3299, 3309, "Concept"], [3310, 3316, "Concept"], [3359, 3369, "Concept"], [3372, 3378, "Concept"], [3400, 3410, "Concept"], [3413, 3419, "Concept"], [3454, 3462, "Concept"], [3463, 3475, "Concept"], [3478, 3487, "Concept"], [3490, 3499, "Concept"], [3514, 3519, "Concept"], [3636, 3646, "Concept"], [3651, 3661, "Concept"], [3717, 3724, "Concept"], [3920, 3931, "Concept"], [3946, 3951, "Concept"], [3971, 3978, "Concept"], [4260, 4278, "Concept"], [5788, 5796, "Concept"], [6043, 6051, "Concept"], [6074, 6083, "Concept"], [6117, 6127, "Concept"], [6223, 6240, "Concept"], [6472, 6489, "Concept"], [6509, 6519, "Concept"], [6599, 6616, "Concept"], [6867, 6884, "Concept"], [6930, 6947, "Concept"], [7198, 7215, "Concept"], [7261, 7278, "Concept"], [7534, 7551, "Concept"], [7597, 7614, "Concept"], [7870, 7887, "Concept"], [7933, 7950, "Concept"], [8210, 8227, "Concept"], [8273, 8290, "Concept"], [8550, 8567, "Concept"]]}