{"id": 294, "segment": "dev_set", "course": "cs0449", "lec": "lec11", "text": "11\n\nHow\nPrograms\n\nAre Managed\n\nCS/COE 0449\nIntroduction to\nSystems Software\n\nLuis Oliveira\n(with content borrowed from wilkie and Vinicius Petrucci)\n\n\fWhere\u2019s the Lie?\nAnd other operating systems questions.\n\n2\n\n\fOn the last episode\u2026\n\u2022 Programs are loaded into memory by the\noperating system.\n\u2022 They have to exist in memory before they can\nbe executed.\n\nKernel Memory\nstack\nlibz.so .data\n\nlibz.so .text\n\n\u2022 Programs go through a lot of trouble to have\nall their data/code in memory.\n\n.bss\n.data\n\n.text\n\n3\n\n3\n\n\fThe Lie\n\u2022 Programs are told that they are\nthe only things running\u2026\n\u2022 The only things in memory\u2026\n\u2022 We know that this is not true!\n\u2022 Operating Systems are big liars\ncrafting illusions.\n\n4\n\n\fThe Truth\n\u2022 In reality, many programs can be running at the same time.\n\u2022 Each program, when running, is typically called a process.\n\u25aa A multitasking OS is (a rather common) one that supports concurrent\nprocesses.\n\n\u2022 The OS must handle switching from one process to another.\n\u25aa Which processes get to run?\n\u25aa What if you have more processes than CPUs?\n\u25aa When do you switch from one to another?\n\u25aa What if one is more urgent??\n5\n\n\fMy process is one of method\u2026\n\u2022 A process is an abstraction representing a single instance of a program.\n\u25aa An executable represents the initial state of a program and thus the process.\n\u25aa A program can be instantiated multiple times, if needed.\n\u25aa Each one would be a separate process\u2026 of the same program.\n\u25aa Note: A processor is the hardware unit that executes a process. (makes sense!!)\n\n\u2022 The Operating System defines what a process and its abstraction is.\n\u25aa There is an OS representation and metadata associated with a process.\n\u25aa The OS maintains two key lies:\n\n\u2022 The control flow (exclusive use of CPU): as defined by the code (this lecture)\n\u2022 The memory layout (exclusive use of memory): defined by executable/code (next lecture)\n\n\u2022 We are focusing on the control flow, here.\n\n\u25aa How do we determine when a program runs? When does the lie\u2026 break down?\n6\n\n\fCPU Scheduling\nEeny Meeny Miney Moe\n\n7\n\n\fThe Reality\n\u2022 Let us say that we have a machine with four separate CPUs.\n\u25aa You could run four processes concurrently (at the same time) relatively easily.\n\u25aa What about the fifth?\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State:\nRegisters\n,\n\n8\n\n\fMultiplexing the CPU\n\u2022 Truth be told, we often have fewer resources than needed.\n\u25aa Sharing a common resource is called multiplexing.\n\n\u2022 Now, consider a machine with a single CPU.\n\nProcess\n\nstack\n.bss\n\n\u2022 We often want to run something in the foreground.\n\n\u25aa Word processor, web browser, minesweeper\u2026 whatever.\n\n.data\n\n\u2022 We still want some things running the background\u2026\n\n.text\n\n\u2022 We need to switch from one process to another at\nparticular times.\n\nCPU State:\nRegisters\n,\n\n\u25aa Music player, virus scanner, chat client.\n\n\u25aa Yet\u2026 we have to keep the illusion that the program is\nuninterrupted\u2026\n\nCPU\n\n9\n\n\fNa\u00efve Campbell was great in The Craft (1996)\n\u2022 One way is to run processes sequentially (the na\u00efve solution)\n\u25aa When one process ends\u2026 run the next.\n\u25aa Yet that\u2019s not very flexible. (Stop your music player to open a PDF)\n\u2022 Humans are in the mix! We need computers to be useful to us.\n\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nMemory\nCPU\n\n10\n\n\fThe cruel passage of time\n\u2022 To multiplex the CPU, we quickly switch from process to process.\n\u2022 The OS retains/restores the state (context) of the process.\n\u25aa The OS must store this as a form of process metadata in memory.\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nCPU State C:\nRegisters\n,\n\nCPU State D:\nRegisters\n,\n\nMemory\nCPU\n\n11\n\n\fThe Context Switch\n\u2022 When an Operating System goes from\none process to another, it performs a\ncontext switch.\n\u2022 This swaps out the CPU state of one\nprocess for the next one to run.\n1. Store registers (including stack\npointer and program counter) to\nmemory.\n2. Determine next process to run.\n3. Load those registers from memory.\nSwitch memory space. (see next lecture:\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nContext\n\nContext\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nvirtual memory)\n\n4. Jump to old program counter. Go!\n\nCPU\n\n12\n\n\fA deeper dive\n\u2022 When we pause a process\u2026 we store the state of registers (context)\nx86-64 (gas / AT&T syntax) \u2013 Process A\n\nContext (A)\n\nx86-64 (gas / AT&T syntax) \u2013 Process B\n\nCPU State\n\n13\n\n\fWhen is a good time to call you?\n\u2022 When should a program pause and let another one go?\n\u2022 When programs voluntarily pause, this is called cooperative\nscheduling.\n\u25aa They may give up control at convenient points such as system calls.\n\n\u2022 We often do not expect this, so modern Operating Systems forcibly\npause programs from time to time. Called preemptive scheduling.\n\u25aa Processes give up control when hardware interjects via an \u201cinterrupt\u201d\n\u25aa How does this work?\n\n14\n\n\fRound Robin Scheduling\n\u2022 One method is to just cycle through each process each for equal time.\n\u25aa This is an element of \u201cfairness\u201d \u2026 each gets equal stake.\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nCPU State C:\nRegisters\n,\n\nCPU State D:\nRegisters\n,\n\nMemory\nCPU\n\n15\n\n\fProblems with \u201cfairness\u201d\n\u2022 Let\u2019s say I want to play Doom Eternal\n\u25aa In round-robin, I give the video game 25% of my resources.\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nstack\n\nstack\n\nstack\n\nstack\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\n.bss\n.data\n.text\n\nCPU State A:\nRegisters\n,\n\nCPU State B:\nRegisters\n,\n\nCPU State C:\nRegisters\n,\n\nCPU State D:\nRegisters\n,\n\nThis should get\nmore priority.\n\nCPU\n\n16\n\n\fI have priorities!\n\u2022 Round-Robin schedulers are fair; then we tweak to meet expectations.\n\u25aa How might we add a sense of \u201cpriority\u201d to the scheduler?\n\n\u2022 Let\u2019s look at a visualization of how processes are currently scheduled\nwith a round-robin scheme: (Doom gets only 25% of resources!) \uf04c\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nA\n\nA\nB\n\nB\n\nC\n50ms / 200ms = 25%\n\n17\n\n\fI have priorities!\n\u2022 Round-Robin schedulers are fair; then we tweak to meet expectations.\n\u25aa How might we add a sense of \u201cpriority\u201d to the scheduler?\n\n\u2022 We could give some tasks a longer quantum.\n\u25aa A quantum is the amount of time a task is guaranteed to run.\n100ms\n\n50ms\n\n50ms\n\n50ms\n\n100ms\n\nA\nB\n\nC\n100ms / 250ms = 40%\n\n18\n\n\fI have priorities!\n\u2022 Round-Robin schedulers are fair; then we tweak to meet expectations.\n\u25aa How might we add a sense of \u201cpriority\u201d to the scheduler?\n\n\u2022 We could increase the chance a specific task is scheduled.\n\u25aa Round-robin + priority: two queues, switch back and forth and round-robin\nwithin them.\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\n50ms\n\nA\nB\n\nC\n100ms / 200ms = 50%\n\n19\n\n\fI have priorities!\n\u2022 Round-Robin schedulers are fair; then we tweak to meet expectations.\n\u25aa How might we add a sense of \u201cpriority\u201d to the scheduler?\n\n\u2022 We can then always do some sort of combination.\n\u25aa Hybrid approaches do seem very alluring. Hmm. The power of trade-offs.\n100ms\n\n50ms\n\n100ms\n\n50ms\n\nA\nB\n200ms / 300ms = 67%\n\n20\n\n\fIdeal circumstances: Human perception\n\u2022 The reality: (very quickly switching)\n100ms\n\n50ms\n\n100ms\n\n50ms\n\nA\nB\n\n\u2022 The illusion: (an ideal: perceived concurrency\u2026 no delay noticed)\n100ms\n\n50ms\n\n100ms\n\n50ms\n\nA\nB\n\n21\n\n\fThere is no optimal.\n\u2022 Like many of the topics in this course, there is no possible \u201cbest\u201d.\n\u25aa That is, there is no way to perfectly schedule general processes.\n\n\u2022 Consider: It would be very lovely to schedule a process that handles\nsome user input, like a button press or a network request.\n\u25aa Perfect situation: the OS schedules the task that handles the button\nimmediately before the button is pressed. What luck!\n\n\u2022 However: You do not know when that button will be pressed.\n\u25aa Maybe it is a sensor, like for detecting a fire!\n\u2022 FIRE SEEMS IMPORTANT!! \u2026 and yet.\n\n\u2022 Moral of the story: humans being users make things very hard.\n\n22\n\n\fAgain, it is not magic.\n\u2022 But\u2026 wait\u2026 how does hardware stop a program?\n\u25aa For instance, when the quantum is up, how does the OS get control and\nperform the context switch?\n\n\u2022 Ah, the hardware has support for \u201cbeing rude\u201d which is called an\ninterrupt.\n\u25aa A programmable mechanism for asynchronously calling a function when a\nparticular type of error or signal is noticed.\n\n\u2022 Let\u2019s take a look.\n\n23\n\n\fInterrupts\nIt\u2019s rude\u2026 but necessary.\n\n24\n\n\fHow rude\n\u2022 An interrupt is an exceptional state that diverts execution from its\nnormal flow.\n\u25aa When issued by hardware, sometimes referred to as a hardware exception\n\u2022 For instance, a hardware timer or external event caused by a sensor.\n\n\u25aa When caused by a user process, sometimes referred to as a software trap\n\u2022 Divide-by-zero error, some floating-point exceptions, system calls.\n\n\u2022 We have seen these before!\n\u25aa System calls are a type of interrupt (software trap).\n\u25aa This is an intentional interrupt caused by a specific program instruction.\n\u2022 The program is \u201cinterrupted\u201d while the OS performs a task.\n\n\u2022 We have also encountered them in our failures.\n\u25aa Segmentation / Protection / Page Faults are also interrupts. (trap? exception?)\n\u25aa These are (usually) unintentional interrupts caused by a generic instruction. 25\n\n\fHere are some typical UNIX/Linux system calls:\nNumber\n\nName\n\nDescription\n\nread\n\nReads bytes from an open file.\n\nwrite\n\nWrites bytes to an open file.\n\nopen\n\nOpens a file and returns the file handle.\n\nclose\n\nCloses an open file.\n\nstat\n\nReturns metadata about a file.\n\nfork\n\nSpawns a copy of the current process.\n\nexecve\n\nLoads and then executes a program.\n\n26\n\n\fSystem calls\n\u2022 System calls: predictable, intentional interrupts at specific instructions.\n\u25aa Interrupts occurring at specific instructions are synchronous interrupts.\n\n\u2022 In x86-64, the program pauses at a\ninstruction, then resumes\nat the following instruction when the OS finishes the task\n\u25aa (\u2026 and the OS calls the\n\ninstruction)\n\n\u2022 Let\u2019s take a deeper look.\n27\n\n\fHello, Hello World\nx86-64 (gas / AT&T syntax) - Application\n\nx86-64 (gas / AT&T syntax) - Kernel (main OS program)\n\nPre-registered to be called on syscall\nSaves CPU state\n\nA jump to the kernel\n\nPerforms action\nRestores state\n\nReturns to process\n\n28\n\n\fTick tock tick tock merrily sings the clock\n\u2022 A hardware timer can preempt (forcibly pause) a program at any time.\n\u25aa Interrupts that occur at any instruction are asynchronous interrupts.\n\n\u2022 In a preemptive operating system, a hardware timer is used to give a\nmaximum bound to how long a process runs.\n\u25aa Your operating system programs the timer such that it sends a signal at a\nregular interval.\n\u25aa Your operating system has a function that is called when such a signal is read.\n\u25aa That function will respond by invoking the scheduler and pausing the current\ntask and resuming or starting another.\n\n\u2022 Let\u2019s look at the basic procedure an OS uses to program an interrupt.\n29\n\n\fProgramming interruption\n\u2022 On most hardware, there is a programmable table somewhere in\nmemory that, when written to, defines where code exist to handle\neach interrupt.\n\u2022 Every possible interrupt is given a number. Segmentation faults might\nbe interrupt 10. Timers might be interrupt 0. Et cetera.\n\u2022 When an interrupt occurs, based on its interrupt number, the\ncorresponding entry in a lookup table called an interrupt vector table\nor an interrupt descriptor table would be used to determine where in\nthe kernel to jump.\n30\n\n\fThe Interrupt Table\n#\n\nValue\n\n\u2022 The interrupt table is a simple table.\n\nDescription\nDivide by zero\n\n\u2022 Fun Fact: It is often located at\naddress 0x0 in memory!\n\nOverflow\nDouble Fault\nGeneral Protection Fault\nPage Fault\nStack Fault\nAlignment Error\n...\nTimer Signal\nNetwork Device Signal\n\n\u25aa So, operating system kernels can\u2019t\nexactly always treat zero as an invalid\naddress\u2026\n\n\u2022 When a process triggers a listed\ninterrupt or external hardware sends\na signal to the interrupt controller\u2026\n\u25aa the CPU jumps to the given address.\n\nAudio Device Signal\n\n31\n\n\fAh! There art thee ol\u2019 interrupt!\n\u2022 Let\u2019s take a look at interrupt handling\u2026\nx86-64 (gas / AT&T syntax) \u2013 Process B\nA\n\nContext (A)\n\nCPU State\n\nx86-64 (gas / AT&T syntax) \u2013 Kernel\n\n\u2022 An interrupt is the likely\ncause of our prior\ninterruption.\n\u2022 The interrupt handler is the\ncode that handles context\nswitching and scheduling\n32\n\n\fOverview\n\u2022 Interrupts can be categorized in several ways:\n\u25aa They can occur outside of our program:\nhardware exceptions\n\u25aa They can occur on an instruction in our program: software trap\n\u25aa They can occur at any time:\nasynchronous interrupts\n\u25aa They can occur at specific times:\nsynchronous interrupts\n\n\u2022 Interrupts are what allow operating systems to function!\n\u25aa When you press a key on your keyboard.\n\u25aa When you receive a packet on the network.\n\u25aa When your sound card wants the next second of audio.\n\u25aa When you divide by zero\u2026\n\u2022 To then mercilessly murder your process.\n\n33\n\n\f", "Comments": [], "label": [[353, 366, "Concept"], [367, 372, "Concept"], [373, 380, "Concept"], [381, 386, "Concept"], [388, 395, "Concept"], [396, 401, "Concept"], [483, 486, "Concept"], [488, 492, "Concept"], [495, 499, "Concept"], [819, 826, "Concept"], [832, 847, "Concept"], [887, 907, "Concept"], [950, 957, "Concept"], [978, 987, "Concept"], [1024, 1033, "Concept"], [1059, 1065, "Concept"], [1125, 1132, "Concept"], [1155, 1162, "Concept"], [1231, 1241, "Concept"], [1297, 1304, "Concept"], [1396, 1403, "Concept"], [1483, 1490, "Concept"], [1547, 1554, "Concept"], [1593, 1595, "Concept"], [1642, 1649, "Concept"], [1691, 1703, "Concept"], [1772, 1785, "Concept"], [1882, 1893, "Concept"], [1980, 1994, "Concept"], [2115, 2124, "Concept"], [2200, 2205, "Concept"], [2207, 2212, "Concept"], [2214, 2219, "Concept"], [2221, 2226, "Concept"], [2228, 2232, "Concept"], [2233, 2238, "Concept"], [2239, 2244, "Concept"], [2247, 2250, "Concept"], [2251, 2256, "Concept"], [2257, 2262, "Concept"], [2264, 2268, "Concept"], [2269, 2274, "Concept"], [2275, 2280, "Concept"], [2282, 2286, "Concept"], [2287, 2292, "Concept"], [2293, 2298, "Concept"], [2311, 2320, "Concept"], [2328, 2340, "Concept"], [2447, 2459, "Concept"], [2508, 2515, "Concept"], [2517, 2522, "Concept"], [2523, 2527, "Concept"], [2637, 2642, "Concept"], [2697, 2702, "Concept"], [2717, 2723, "Concept"], [2733, 2740, "Concept"], [2785, 2794, "Concept"], [2899, 2912, "Concept"], [2989, 2998, "Concept"], [3044, 3051, "Concept"], [3207, 3212, "Concept"], [3214, 3219, "Concept"], [3221, 3226, "Concept"], [3228, 3233, "Concept"], [3235, 3239, "Concept"], [3240, 3245, "Concept"], [3246, 3251, "Concept"], [3253, 3257, "Concept"], [3258, 3263, "Concept"], [3264, 3269, "Concept"], [3271, 3275, "Concept"], [3276, 3281, "Concept"], [3282, 3287, "Concept"], [3289, 3293, "Concept"], [3294, 3299, "Concept"], [3300, 3305, "Concept"], [3355, 3364, "Concept"], [3397, 3404, "Concept"], [3408, 3415, "Concept"], [3454, 3461, "Concept"], [3470, 3477, "Concept"], [3517, 3524, "Concept"], [3545, 3550, "Concept"], [3552, 3557, "Concept"], [3559, 3564, "Concept"], [3566, 3571, "Concept"], [3573, 3577, "Concept"], [3578, 3583, "Concept"], [3584, 3589, "Concept"], [3591, 3595, "Concept"], [3596, 3601, "Concept"], [3602, 3607, "Concept"], [3609, 3613, "Concept"], [3614, 3619, "Concept"], [3620, 3625, "Concept"], [3627, 3631, "Concept"], [3632, 3637, "Concept"], [3638, 3643, "Concept"], [3658, 3667, "Concept"], [3684, 3693, "Concept"], [3710, 3719, "Concept"], [3736, 3745, "Concept"], [3770, 3784, "Concept"], [3795, 3811, "Concept"], [3826, 3833, "Concept"], [3860, 3874, "Concept"], [3914, 3921, "Concept"], [3956, 3965, "Concept"], [3977, 3990, "Concept"], [3995, 4009, "Concept"], [4041, 4048, "Concept"], [4071, 4080, "Concept"], [4101, 4113, "Concept"], [4135, 4140, "Concept"], [4142, 4147, "Concept"], [4149, 4153, "Concept"], [4154, 4159, "Concept"], [4160, 4165, "Concept"], [4167, 4171, "Concept"], [4172, 4177, "Concept"], [4178, 4183, "Concept"], [4185, 4192, "Concept"], [4194, 4201, "Concept"], [4216, 4225, "Concept"], [4242, 4251, "Concept"], [4255, 4269, "Concept"], [4287, 4302, "Concept"], [4351, 4358, "Concept"], [4382, 4391, "Concept"], [4393, 4400, "Concept"], [4431, 4438, "Concept"], [4442, 4449, "Concept"], [4484, 4491, "Concept"], [4648, 4670, "Concept"], [4728, 4740, "Concept"], [4784, 4801, "Concept"], [4852, 4873, "Concept"], [4877, 4886, "Concept"], [4936, 4945, "Concept"], [4975, 4997, "Concept"], [5041, 5048, "Concept"], [5154, 5159, "Concept"], [5161, 5166, "Concept"], [5168, 5173, "Concept"], [5175, 5180, "Concept"], [5182, 5186, "Concept"], [5187, 5192, "Concept"], [5193, 5198, "Concept"], [5200, 5204, "Concept"], [5205, 5210, "Concept"], [5211, 5216, "Concept"], [5218, 5222, "Concept"], [5223, 5228, "Concept"], [5229, 5234, "Concept"], [5236, 5240, "Concept"], [5241, 5246, "Concept"], [5247, 5252, "Concept"], [5267, 5276, "Concept"], [5293, 5302, "Concept"], [5319, 5328, "Concept"], [5345, 5354, "Concept"], [5445, 5456, "Concept"], [5553, 5557, "Concept"], [5558, 5563, "Concept"], [5564, 5569, "Concept"], [5571, 5575, "Concept"], [5576, 5581, "Concept"], [5582, 5587, "Concept"], [5589, 5593, "Concept"], [5594, 5599, "Concept"], [5600, 5605, "Concept"], [5607, 5611, "Concept"], [5612, 5617, "Concept"], [5618, 5623, "Concept"], [5638, 5647, "Concept"], [5664, 5673, "Concept"], [5690, 5699, "Concept"], [5716, 5725, "Concept"], [5750, 5758, "Concept"], [5778, 5788, "Concept"], [5792, 5814, "Concept"], [5892, 5900, "Concept"], [5909, 5918, "Concept"], [5960, 5969, "Concept"], [5984, 5993, "Concept"], [6002, 6012, "Concept"], [6139, 6149, "Concept"], [6153, 6175, "Concept"], [6253, 6261, "Concept"], [6318, 6325, "Concept"], [6331, 6338, "Concept"], [6462, 6472, "Concept"], [6476, 6498, "Concept"], [6576, 6584, "Concept"], [6655, 6664, "Concept"], [6668, 6679, "Concept"], [6682, 6690, "Concept"], [6730, 6741, "Concept"], [6831, 6841, "Concept"], [6845, 6867, "Concept"], [6945, 6953, "Concept"], [6962, 6971, "Concept"], [7299, 7310, "Concept"], [7498, 7506, "Concept"], [7515, 7524, "Concept"], [7566, 7574, "Concept"], [7577, 7584, "Concept"], [7685, 7694, "Concept"], [8097, 8104, "Concept"], [8125, 8127, "Concept"], [8157, 8170, "Concept"], [8240, 8249, "Concept"], [8398, 8408, "Concept"], [8455, 8464, "Concept"], [8588, 8606, "Concept"], [8739, 8752, "Concept"], [8809, 8821, "Concept"], [8855, 8867, "Concept"], [8882, 8891, "Concept"], [8893, 8906, "Concept"], [8934, 8943, "Concept"], [9127, 9138, "Concept"], [9148, 9158, "Concept"], [9161, 9165, "Concept"], [9167, 9176, "Concept"], [9215, 9225, "Concept"], [9297, 9309, "Concept"], [9565, 9572, "Concept"], [9624, 9636, "Concept"], [9639, 9651, "Concept"], [9717, 9727, "Concept"], [9767, 9789, "Concept"], [10078, 10084, "Concept"], [10135, 10142, "Concept"], [10174, 10180, "Concept"], [10225, 10232, "Concept"], [10287, 10300, "Concept"], [10306, 10313, "Concept"], [10356, 10366, "Concept"], [10401, 10424, "Concept"], [10434, 10461, "Concept"], [10465, 10479, "Concept"], [10526, 10533, "Concept"], [10547, 10563, "Concept"], [10641, 10657, "Concept"], [10761, 10770, "Concept"], [10874, 10876, "Concept"], [10896, 10905, "Concept"], [11070, 11079, "Concept"], [11098, 11107, "Concept"], [11156, 11165, "Concept"], [11186, 11195, "Concept"], [11220, 11229, "Concept"], [11321, 11343, "Concept"], [11350, 11376, "Concept"], [11442, 11451, "Concept"], [11474, 11489, "Concept"], [11597, 11605, "Concept"], [11644, 11654, "Concept"], [11729, 11753, "Concept"], [11845, 11854, "Concept"], [11898, 11918, "Concept"], [12008, 12017, "Concept"], [12042, 12060, "Concept"], [12104, 12111, "Concept"], [12170, 12179, "Concept"], [12233, 12250, "Concept"], [12277, 12293, "Concept"], [12298, 12308, "Concept"], [12325, 12335, "Concept"], [12413, 12432, "Concept"], [12484, 12497, "Concept"], [12528, 12551, "Concept"], [12588, 12610, "Concept"], [12614, 12624, "Concept"], [12640, 12657, "Concept"], [12872, 12879, "Concept"]]}