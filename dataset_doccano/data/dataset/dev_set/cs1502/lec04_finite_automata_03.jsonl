{"id": 293, "segment": "dev_set", "course": "cs1502", "lec": "lec04_finite_automata_03", "text": "Finite Automata 03\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fNondeterministic Finite Automaton\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\nLet \u03a3 = {0, 1}\nDifferent between Deterministic Finite Automaton (DFA) and\nNondeterministic Finite Automaton (NFA):\nDFA always has exactly one exiting transition arrow for each\nsymbol in the alphabet\nNFA may have none, one, or many exiting arrows for each\nsymbol\n\nDFA have no arrow with the label \u03b5\nNFA may have Zero, one, or many arrows exiting from each\nstate with the label \u03b5.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fCompute an NFA\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\nIf you encounter a state with multiple way to proceed for a\nregular input:\nThe machine splits into multiple copies of itself\nThe machines follow all the possibilities in parallel.\nEach copy of the machine takes one of the possible ways.\n\nIf you encounter a state with an \u03b5 symbol as an exiting arrow:\nWithout reading any input, the machine splits into multiple\ncopies.\nEach follows each of the exiting \u03b5-labeled arrows, and\nOne stays at the current state.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nSymbol read\n\nq1\n\nStart\n\n0, 1\n\n0, 1\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nSymbol read\n\nq1\n\nStart\n\n0\n\nq1\n\n0, 1\n\n0, 1\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq3\n\n0, 1\n\n0, 1\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nq1\n\nFinite Automata 03\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nq1\n\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nq1\n\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\nq2\n\nq3\n\nq4\n\nq4\n\n1\n\nq1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nq4\n\n\fCompute an NFA (Computational Tree)\nComputation of the machine on input 010110\n\nq1\n\nSymbol read\n\nStart\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq1\n\nq3\n\nq3\n\n0, 1\n\n0, 1\n\n0\n1\n\nq1\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\nq1\n\nq2\n\nq3\n\nq4\n\nq4\n\nq1\n\nq3\n\nq4\n\nq4\n\n1\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nIf there is at least one copy in an accept state,\nthe machine accept the input string.\nFinite Automata 03\n\nq4\n\n\fExample\nLet A be the language consisting of all strings over {0, 1}\ncontaining a 1 in the third position from the end (e.g., 000100 is in\nA but 0011 is not in A).\nDesign a DFA for this problem is quite complicate\nDesign an NFA is easier\n0, 1\n\n1\n\nq1\n\n0, 1\n\nq2\n\n0, 1\n\nq3\n\nq4\n\nThe transition from q1 to q2 is our guess that this is the 1 in\nthe third position from the end.\nIf our guess is wrong:\nThe input string is shorter, it will end at reject state.\nThe input string is longer, the machine will die but other one\nremains alive.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nAn equivalent DFA machine\n0\n\n0\n\n0\n\nq000\n1\n1\n\n0\n\nq100\n\nq010\n\nq110\n1\n\n0\n\n1\n\n0\n\n0\n\n0\n\nq001\n\nq101\n\n1\n\nq011\n\n1\n\n1\n\nName states according to the last three symbols\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\nq111\n\n1\n\n\fExample\nSuppose the alphabet \u03a3 is {0}. Design a machine that recognizes\nthe language A where A is an empty string or all strings over \u03a3\nthat their length is a multiple of 2 or 3.\n0\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nSuppose the alphabet \u03a3 is {0}. Design a machine that recognizes\nthe language A where A is an empty string or all strings over \u03a3\nthat their length is a multiple of 2 or 3.\n0\n\n0\n\n0\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n\nFinite Automata 03\n\n\fExample\nSuppose the alphabet \u03a3 is {0}. Design a machine that recognizes\nthe language A where A is an empty string or all strings over \u03a3\nthat their length is a multiple of 2 or 3.\n0\n\n\u03b5\n\n0\n\n\u03b5\n0\n\n0\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n\nFinite Automata 03\n\n\fFormal Definition of A Nondeterministic Finite Automaton\nA nondeterministic finite automaton is a 5-tuple\n(Q, \u03a3, \u03b4, q0, F )\n1\n2\n3\n\nQ is a finite set of states\n\u03a3 is a finite alphabet\n\u03b4 : Q \u00d7 \u03a3\u03b5 \u2192 P(Q) is the transition function,\n\u03a3\u03b5 = \u03a3 \u222a {\u03b5} and\nP(Q) is the powerset of Q (set of set of states).\n\n4\n5\n\nq0 \u2208 Q is the start state\nF \u2286 Q is the set of accept states.\n\nNotes\nIn an NFA, one input symbol can change the state of the\nmachine to multiple states.\nSplit to multiple copies with different current states\nExample: \u03b4(q0 , 1) = {q0 , q1 }\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nQ = {q1 , q2 , q3 , q4 }\n\u03a3 = {0, 1} and \u03a3\u03b5 = {0, 1, \u03b5}\n\u03b4 is given as\n\u03b4\n0\n1\nq1 {q1 } {q1 , q2 }\nq2 {q3 }\n\u2205\nq3\n\u2205\n{q4 }\nq4 {q4 }\n{q4 }\n\nq4\n\n\u03b5\n\u2205\n{q3 }\n\u2205\n\u2205\n\nWe treat \u03b5 as a regular input symbol\nIf there is no \u03b5 transitions, we can ignore the \u03b5 column\n\nq1 is the start state\nF = {q4 }\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fNFA and DFA\n\nNFA is a slightly different computation model compared to\nDFA\nNFA can split into multiple copies\nNFA may have \u03b5 transitions\n\nIs there a language that can be recognized by an NFA but\ncannot be recognized by any DFAs?\nIn theory of computation, we try to see whether we can\ncapture the behavior of an NFA using a DFA\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fSimulating and NFA with a DFA\nSimulate 010110\n\u03b4\n\n0\n\n\u03b5\n\n1\n\nq1\n\nq1 {q1 } {q1 , q2 } \u2205\n{q3 }\nq2 {q3 }\n\u2205\n{q4 }\n\u2205\nq3 \u2205\n\u2205\nq4 {q4 } {q4 }\n\nStart\n\n{q1 }\n\n= {q1 }\n\n{q1 }\n\n= {q1 }\n\n{q1 , q2 , q3 }\n\n= {q1 , q2 , q3 }\n\n{q1 } \u222a {q3 } \u222a \u2205\n\n= {q1 , q3 }\n\n{q1 , q2 , q3 } \u222a {q4 }\n\n= {q1 , q2 , q3 , q4 }\n\n0\n\nq1\n1\n\nq1\n\nq2\n\nq3\n0\n\nq1\n\nq3\n1\n\nq1\n\nq2\n\nq3\n\nq4\n1\n\nq1\n\nq2\n\nq3\n\nq4\n\n{q1 , q2 , q3 } \u222a \u2205 \u222a {q4 } \u222a {q4 } = {q1 , q2 , q3 , q4 }\n\nq4\n0\n\nq1\n\nq3\n\nq4\n\nq4\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n{q1 } \u222a {q3 } \u222a \u2205 \u222a {q4 } \u222a {q4 } = {q1 , q3 , q4 }\nFinite Automata 03\n\n\fEquivalence of NFAs and DFAs\n\nEvery nondeterministic finite automaton has an equivalent\ndeterministic finite automaton.\nLet N = (Q, \u03a3, \u03b4, q0 , F ) be the NFA recognizing some\nlanguage A\nWe are going to construct a DFA M = (Q0 , \u03a3, \u03b4 0 , q00 , F 0 )\nrecognizing A\nLet\u2019s consider the case where N has no \u03b5 transitions.\n1\n2\n\nQ0 = P(Q) [\n\u03b4 0 (R, a) =\n\u03b4(r, a)\nr\u2208R\n\n3\n4\n\nq00 = {q0 }\nF 0 = {R \u2208 Q0 | R contains an accept state of N }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nLet \u03a3 be {0, 1}. The following NFA N recognizes the\nlanguage A where A is a set of strings that end with a 1.\n0, 1\n\n1\n\nq0\n\nq1\n\nN = (Q, \u03a3, \u03b4, q0 , F )\n1\n2\n3\n\nQ = {q0 , q1 },\n\u03a3 = {0, 1}\n\u03b4 is given as\nq0\nq1\n\n4\n5\n\n0\n{q0 }\n\u2205\n\n1\n{q0 , q1 }\n\u2205\n\nq0 is the start state\nF = {q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nConstruct a DFA M = (Q0 , \u03a3, \u03b4 0 , q00 , F 0 )\nQ0 = P(Q) = P({q0 , q1 })\nQ0 = {\u2205, {q0 }, {q1 }, {q0 , q1 }}\nWe will construct \u03b4 0 later\nq00 = {q0 } where q0 is the start state of the NFA\nF 0 = {R \u2208 Q0 | R contains an accept state of N }\nF 0 = {{q1 }, {q0 , q1 }}\nwhere F = {q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nLet\u2019s focus on transition functions\nThe transition function \u03b4 of the NFA is as follows:\n0\n1\nq0 {q0 } {q0 , q1 }\nq1\n\u2205\n\u2205\nRecall that the set of state of the equivalent DFA is the power\nset of set of state of the NFA\n\u03b40\n0\n1\n\u2205\n\u2205\n\u2205\n{q0 } {q0 , q1 }\n{q0 }\n{q1 }\n\u2205\n\u2205\n{q0 , q1 } {q0 } {q0 , q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nMachine M = (Q0 , \u03a3, \u03b4 0 , q00 , F 0 ) equivalent to N can be\ndefined as follows:\nQ0 = P(Q) [\n= {\u2205, {q0 }, {q1 }, {q0 , q1 }},\n0\n\u03b4 (R, a) =\n\u03b4(r, a)\nr\u2208R\n0\n\n\u03b4 (\u2205, 0) =\n\n[\n\n\u03b4(r, 0) = \u2205\n\nr\u2208\u2205\n\n\u03b4 0 (\u2205, 1) =\n\n[\n\n\u03b4(r, 1) = \u2205\n\nr\u2208\u2205\n\n\u03b4 0 ({q0 }, 0) =\n\n[\n\n\u03b4(r, 0) = \u03b4(q0 , 0) = {q0 }\n\nr\u2208{q0 }\n\n\u03b4 0 ({q0 }, 1) =\n\n[\n\n\u03b4(r, 1) = \u03b4(q0 , 1) = {q0 , q1 }\n\nr\u2208{q0 }\n\n\u03b4 0 ({q1 }, 0) =\n\n[\n\n\u03b4(r, 0) = \u03b4(q1 , 0) = \u2205\n\nr\u2208{q1 }\n\n\u03b4 0 ({q1 }, 1) =\n\n[\n\n\u03b4(r, 1) = \u03b4(q1 , 1) = \u2205\n\nr\u2208{q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nMachine M (Continue)\n\u03b4 0 (Continue)\n\u03b4 0 ({q0 , q1 }, 0) =\n\n[\n\n\u03b4(r, 0) = \u03b4(q0 , 0) \u222a \u03b4(q1 , 0) =\n\nr\u2208{q0 ,q1 }\n\n{q0 } \u222a \u2205 = {q0 }\n\u03b4 0 ({q0 , q1 }, 1) =\n\n[\n\n\u03b4(r, 0) = \u03b4(q0 , 1) \u222a \u03b4(q1 , 1) =\n\nr\u2208{q0 ,q1 }\n\n{q0 , q1 } \u222a \u2205 = {q0 , q1 }\n\nThus \u03b4 0 is given by\n\u03b40\n\u2205\n{q0 }\n{q1 }\n{q0 , q1 }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n\u2205\n{q0 }\n\u2205\n{q0 }\n\n1\n\u2205\n{q0 , q1 }\n\u2205\n{q0 , q1 }\n\nFinite Automata 03\n\n\fExample\nThe state diagram of the machine M = (Q0 , \u03a3, \u03b4 0 , q00 , F 0 )\nequivalent to N (L(M ) = L(N )) is shown below:\n0\n\n1\n\n1\n\n{q0 }\n\n{q0 , q1 }\n\n0\n0\n\n0\n\n{q1 }\n\n\u2205\n1\n\n1\n\nWithout bottom part, it is the same as one of our previous\nexample\nIt is okay for a DFA to have unreachable states\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fNFA to DFA with \u03b5 Symbol\nLet E(R) be the collection of states that can be reached from\nmembers of R by going only along \u03b5 arrows, including the\nmembers of R themselves.\nE(R) = {q | q can be reached from R by travel along\n0 or more \u03b5 arrows}\nNote that a state q can be reached from its own state q by\ntravel along no \u03b5 arrow (R \u2286 E(R))\nExample:\n0, 1\n\n0, 1\n\n1\n\nq1\n\n0, \u03b5\n\nq2\n\n1\n\nq3\n\nE({q1 }) = {q1 }\nE({q2 }) = {q2 , q3 }\nE({q1 , q2 }) = {q1 , q2 , q3 }\nE({q1 , q3 }) = {q1 , q3 }\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\nq4\n\n\fNFA to DFA with \u03b5 Symbol\n\nLet NFA N = (Q, \u03a3, \u03b4, q0 , F ) with \u03b5 transitions that\nrecognizes a language A\nWe can construct a DFA M = (Q0 , \u03a3, \u03b4 0 , q00 , F 0 ) as\n1\n2\n\nQ0 = P(Q)\n\u03b4 0 is given by\n\u03b4 0 (R, a) =\n\n[\n\nE(\u03b4(r, a))\n\nr\u2208R\n3\n\nq00 = E({q0 })\nIf q0 has no exiting arrow for \u03b5, q00 = {q0 }\n\n4\n\nF 0 = {R \u2208 Q0 | R contains an accept state of N }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nConsider the following NFA machine:\n1\nb\n\na\n\n\u03b5\n2\n\na\n\n3\na, b\n\nN = (Q, \u03a3, \u03b4, q0 , F )\nQ = {1, 2, 3}\n\u03a3 = {a, b}\n\u03b4 is given by\n1\n2\n3\n\na\n\u2205\n{2, 3}\n{1}\n\nb\n{2}\n{3}\n\u2205\n\n\u03b5\n{3}\n\u2205\n\u2205\n\nq0 = 1\nF = {1}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\n\nMachine M = (Q0 , \u03a3, \u03b4 0 , q00 , F 0 ) equivalent to N :\nQ0 = P(Q) = P({1, 2, 3})\nQ0 = {\u2205, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}\nStart state is E({1}) = {1, 3}\nF 0 is a set of set of states that contain accept states of N\n(F = {1}).\nF 0 = {{1}, {1, 2}, {1, 3}, {1, 2, 3}}\n[\n\u03b4 0 (R, a) =\nE(\u03b4(r, a))\nr\u2208R\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nLet\u2019s focus on transition functions\nThe transition function \u03b4 of the NFA is as follows:\n\u03b4\na\nb\n\u03b5\n1\n\u2205\n{2} {3}\n2 {2, 3} {3}\n\u2205\n{1}\n\u2205\n\u2205\n3\nRecall that the set of state of the equivalent DFA is the power\nset of set of state of the NFA\n\u03b40\na\nb\n\u2205\n\u2205\n\u2205\n\u2205\n{2}\n{1}\n{2}\n{2, 3}\n{3}\n{3}\n{1, 3}\n\u2205\n{2, 3}\n{2, 3}\n{1, 2}\n{1, 3}\n{2}\n{1, 3}\n{2, 3}\n{1, 2, 3}\n{3}\n{1, 2, 3} {1, 2, 3} {2, 3}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fMachine M \u2019s \u03b4 0\n0\n\n\u03b4 (\u2205, a) =\n\n[\n\nE(\u03b4(r, a))\n\n0\n\n= E(\u03b4(2, b))\n= E({3})\n\nr\u2208\u2205\n\n= {3}\n[\n\u03b4 ({3}, a) =\n\n=\u2205\n0\n\n0\n\n[\n\nE(\u03b4(r, b))\n\nr\u2208{2}\n\n=\u2205\n[\n0\n\u03b4 (\u2205, b) =\nE(\u03b4(r, b))\n\n\u03b4 ({1}, a) =\n\n[\n\n\u03b4 ({2}, b) =\n\nr\u2208\u2205\n\nE(\u03b4(r, a))\n\nE(\u03b4(r, a))\n\nr\u2208{3}\n\nr\u2208{1}\n\n= E(\u03b4(3, a))\n\n= E(\u03b4(1, a))\n\n= E({1})\n\n= E(\u2205)\n=\u2205\n0\n\n\u03b4 ({1}, b) =\n\n0\n\n[\n\n= {1, 3}\n[\n\n\u03b4 ({3}, b) =\n\nE(\u03b4(r, b))\n\nE(\u03b4(r, b))\n\nr\u2208{3}\n\nr\u2208{1}\n\n= E(\u03b4(3, b))\n\n= E(\u03b4(1, b))\n\n= E(\u2205)\n\n= E({2})\n= {2}\n[\n0\n\u03b4 ({2}, a) =\n\n=\u2205\n0\n\nE(\u03b4(r, a))\n\n\u03b4 ({1, 2}, a) =\n\n[\n\nE(\u03b4(r, a))\n\nr\u2208{1,2}\n\nr\u2208{2}\n\n= E(\u03b4(1, a)) \u222a E(\u03b4(2, a))\n\n= E(\u03b4(2, a))\n\n= \u2205 \u222a {2, 3}\n\n= E({2, 3})\n\n= {2, 3}\n\n= {2, 3}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fMachine M \u2019s \u03b4 0\n0\n\n\u03b4 ({1, 2}, b) =\n\n[\n\nE(\u03b4(r, b))\n\nr\u2208{1,2}\n\n0\n\n\u03b4 ({2, 3}, b) =\n\n= E(\u03b4(1, b)) \u222a E(\u03b4(2, b))\n= {2} \u222a {3}\n= {2, 3}\n[\n0\n\u03b4 ({1, 3}, a) =\n\n= E(\u03b4(2, b)) \u222a E(\u03b4(3, b))\nE(\u03b4(r, a))\n\n= {3}\n0\n\n= E(\u03b4(1, a)) \u222a E(\u03b4(3, a))\n\n\u03b4 ({1, 2, 3}, a) =\n\nE(\u03b4(3, a))\nE(\u03b4(r, b))\n\nr\u2208{1,3}\n\n= {2} \u222a \u2205\n= {2}\n[\n\u03b4 ({2, 3}, a) =\n\nE(\u03b4(r, a))\n\n= E(\u03b4(1, a) \u222a E(\u03b4(2, a))\u222a\n\n= E(\u03b4(1, b)) \u222a E(\u03b4(3, b))\n\n0\n\n[\nr\u2208{1,2,3}\n\n= \u2205 \u222a {1, 3}\n= {1, 3}\n[\n\u03b4 ({1, 3}, b) =\n\nE(\u03b4(r, b))\n\n= {3} \u222a \u2205\n\nr\u2208{1,3}\n\n0\n\n[\nr\u2208{2,3}\n\n= \u2205 \u222a {2, 3} \u222a {1, 3}\n= {1, 2, 3}\n[\n\u03b4 ({1, 2, 3}, b) =\nE(\u03b4(r, b))\n0\n\nr\u2208{1,2,3}\n\n= E(\u03b4(1, b) \u222a E(\u03b4(2, b))\u222a\nE(\u03b4(r, a))\n\nE(\u03b4(3, b))\n\nr\u2208{2,3}\n\n= {2} \u222a {3} \u222a \u2205\n\n= E(\u03b4(2, a)) \u222a E(\u03b4(3, a))\n\n= {2, 3}\n\n= {2, 3} \u222a {1, 3}\n= {1, 2, 3}\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fExample\nRecall the transition function of M\na\n\u2205\n\u2205\n{2, 3}\n{1, 3}\n{2, 3}\n{1, 3}\n{1, 2, 3}\n{1, 2, 3}\n\n\u2205\n{1}\n{2}\n{3}\n{1, 2}\n{1, 3}\n{2, 3}\n{1, 2, 3}\n\nb\n\u2205\n{2}\n{3}\n\u2205\n{2, 3}\n{2}\n{3}\n{2, 3}\n\nThe state diagram of M\na\na, b\n\nb\n{1}\n\n\u03c6\n\n{2}\na, b\n\nb\n\nb\n\n{1,2}\n\na\n\nb\n\na\n{3}\n\na\n\n{1,3}\n\na\n\n{2,3}\n\n{1,2,3}\nb\n\nb\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\na\n\n\fClosure Under Union Operation\nN1\n\nN\n\n\u03b5\n\n\u03b5\nN2\n\nN1 recognizes a regular language A\nN2 recognizes a regular language B\nN recognizes A \u222a B (A \u222a B is regular)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\n\nLet N1 = (Q1 , \u03a3, \u03b41 , q1 , F1 ) recognizes A1 .\nLet N2 = (Q2 , \u03a3, \u03b42 , q2 , F2 ) recognizes A2 .\nTo construct N = (Q, \u03a3, \u03b4, q0 , F ) to recognizes A1 \u222a A2 :\n1\n2\n3\n4\n\nQ = {q0 } \u222a Q1 \u222a Q2\nThe state q0 is the start state of N\nThe set of accept state F = F1 \u222a F2\n\u03b4 is given by\n\uf8f1\n\u03b41 (q, a) q \u2208 Q1\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f2\u03b4 (q, a) q \u2208 Q\n2\n2\n\u03b4(q, a) =\n\uf8f4\n{q\n,\nq\n}\nq\n=\nq\nand a = \u03b5\n1\n2\n0\n\uf8f4\n\uf8f4\n\uf8f3\n\u2205\nq = q0 and a 6= \u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\n\nGiven state diagrams of finite-state machines N1 and N2\nTo draw a state diagram of a new machine N where\nL(N ) = L(N1 ) \u222a L(N2 ):\n1\n2\n3\n4\n\nDraw the state diagram of N1 on the top half\nDraw the state diagram of N2 on the bottom half\nAdd a new start state\nAdd \u03b5 transitions from the new start state to the start states\nof N1 and N2 , respectively\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nDraw N1 on the top half\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nDraw N2 on the bottom half\nN1\n\nN2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nAdd new start state\nN1\n\nN2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Union Operation\nAdd \u03b5 transitions\nN\n\nN1\n\u03b5\n\n\u03b5\n\nN2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\nLet N1 recognizes A and N2 recognizes B\nGiven a string w, how do we know whether w \u2208 AB?\nRecall the definition of AB (A concatenated by B)\nAB = {xy | x \u2208 A and y \u2208 B}\nFor w to be in AB, w must be divided into two strings x and\ny where w = xy such that x \u2208 A and y \u2208 B\nIf x \u2208 A, x \u2208 L(N1 )\nSince x \u2208 L(N1 ), by simulating N1 on input x, the simulation\nwill end in an accept state of N1 (N1 accepts x)\n\nBut if x 6\u2208 A, simulation will end in a non-accept state of N1\nIf y \u2208 B, y \u2208 L(N2 )\nSince y \u2208 L(N2 ), by simulating N2 on input y, the simulation\nwill end in an accept state of N2 (N2 accepts y)\n\nBut if y 6\u2208 B, simulation will end in a non-accept state of N2\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\nN1\n\nN2\n\nN\n\n\u03b5\n\u03b5\n\u03b5\n\nN1 recognizes a regular language A\nN2 recognizes a regular language B\nN recognizes AB (AB is regular)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nLet N1 = (Q1 , \u03a3, \u03b41 , q1 , F1 ) recognizes A1 .\nLet N2 = (Q2 , \u03a3, \u03b42 , q2 , F2 ) recognizes A2 .\nTo construct N = (Q, \u03a3, \u03b4, q0 , F ) to recognizes A1 \u25e6 A2 :\n1\n2\n3\n4\n\nQ = Q1 \u222a Q2\nThe state q1 is the start state of N\nThe set of accept state F = F2\n\u03b4 is given by\n\uf8f1\n\u03b41 (q, a)\nq \u2208 Q1 and q 6\u2208 F1\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f2\u03b4 (q, a)\nq\n\u2208 Q2 and a 6= \u03b5\n2\n\u03b4(q, a) =\n\uf8f4\n\u03b41 (q, a) \u222a {q2 } q \u2208 F1 and a = \u03b5\n\uf8f4\n\uf8f4\n\uf8f3\n\u03b42 (q, a)\nq \u2208 Q2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nGiven state diagrams of finite-state machines N1 and N2\nTo draw a state diagram of a new machine N where\nL(N ) = L(N1 ) \u25e6 L(N2 ):\n1\n2\n3\n\n4\n\nDraw the state diagram of N1 on the left side\nDraw the state diagram of N2 on the right side\nFor every accept state of N1 , add the \u03b5 transition to the start\nstate of N2\nChange all accept states of N1 to non-accept states\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nDraw the state diagram of N1 on the left side\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nDraw the state diagram of N2 on the right side\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nN2\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\n\u03b5 from accept states of N1 to start state of N2\nN1\n\nN2\n\u03b5\n\u03b5\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Concatenation Operation\n\nAccept states of N1 to non-accept states\nN\n\nN1\n\nN2\n\u03b5\n\u03b5\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\nStar operator is similar to concatenation except that it can be\nconcatenated any number of times:\nA\u2217 = {x1 x2 x3 . . . xk | k \u2265 0 and xi \u2208 A}\nand\n\u03b5 \u2208 A\u2217\nN1\n\nfor any language A\nN\n\u03b5\n\u03b5\n\u03b5\n\nN1 recognizes a regular language A\nN recognizes A\u2217 (A\u2217 is regular)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nLet N1 = (Q1 , \u03a3, \u03b41 , q1 , F1 ) recognizes A1 .\nTo construct N = (Q, \u03a3, \u03b4, q0 , F ) to recognizes A\u22171 :\n1\n2\n3\n4\n\nQ = {q0 } \u222a Q1\nThe state q0 is the start state of N\nThe set of accept state F = {q0 } \u222a F1\n\u03b4 is given by\n\uf8f1\n\uf8f4\n\u03b41 (q, a)\nq \u2208 Q1 and q 6\u2208 F1\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\nq \u2208 F1 and a 6= \u03b5\n\uf8f2\u03b41 (q, a)\n\u03b4(q, a) = \u03b41 (q, a) \u222a {q1 } q \u2208 F1 and a = \u03b5\n\uf8f4\n\uf8f4\n\uf8f4\n{q1 }\nq = q0 and a = \u03b5\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f3\u2205\nq = q0 and a 6\u2208 \u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nGiven state diagrams of finite-state machines N1\nTo draw a state diagram of a new machine N where\nL(N ) = L(N1 )\u2217 :\n1\n2\n3\n\n4\n\nDraw the state diagram of N1\nAdd a new start state and make it an accept state\nAdd \u03b5 transition from the new start state to the start state of\nN1\nFor each original accept state of N1 , add \u03b5 transition to the\noriginal start state of N1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nDraw the state diagram of N1\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nAdd a new start state and make it an accept state\nN1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nAdd \u03b5 from thew new start state to the original start state of\nN1\nN1\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fClosure Under Star Operation\n\nFor each original accept state of N1 , add \u03b5 transition to the\noriginal start state of N1\nN\n\nN1\n\u03b5\n\u03b5\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\fConclusions\n\nA Nondeterministic Finite Automata (NFA) has an equivalent\nDeterministic Finite Automata (DFA)\nThe algorithm how to convert from an NFA N to an\nequivalent DFA D where L(N ) = L(D) has been discussed\n\nThe set of all regular languages is closed under union,\nconcatenation, and star operations:\nIf A and B are regular languages, A \u222a B is a regular language\nIf A and B are regular languages, AB (A \u25e6 B) is a regular\nlanguage\nIf A is a regular language, A\u2217 is a regular language\n\nThe proof process also gives us an algorithm how to construct\nDFAs\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 03\n\n\f", "Comments": [], "label": [[0, 15, "Concept"], [113, 128, "Concept"], [134, 167, "Concept"], [190, 191, "Concept"], [212, 213, "Concept"], [241, 271, "Concept"], [273, 276, "Concept"], [282, 315, "Concept"], [317, 320, "Concept"], [323, 326, "Concept"], [358, 374, "Concept"], [384, 390, "Concept"], [398, 406, "Concept"], [407, 410, "Concept"], [447, 453, "Concept"], [471, 474, "Concept"], [506, 509, "Concept"], [634, 649, "Concept"], [666, 669, "Concept"], [729, 734, "Concept"], [967, 972, "Concept"], [981, 989, "Concept"], [1112, 1128, "Concept"], [1159, 1164, "Concept"], [1245, 1248, "Concept"], [1250, 1268, "Concept"], [1314, 1320, "Concept"], [1404, 1419, "Concept"], [1457, 1460, "Concept"], [1462, 1480, "Concept"], [1623, 1638, "Concept"], [1676, 1679, "Concept"], [1681, 1699, "Concept"], [1856, 1871, "Concept"], [1909, 1912, "Concept"], [1914, 1932, "Concept"], [2099, 2114, "Concept"], [2152, 2155, "Concept"], [2157, 2174, "Concept"], [2361, 2376, "Concept"], [2414, 2417, "Concept"], [2419, 2437, "Concept"], [2646, 2661, "Concept"], [2699, 2702, "Concept"], [2704, 2722, "Concept"], [3003, 3015, "Concept"], [3054, 3069, "Concept"], [3100, 3108, "Concept"], [3127, 3134, "Concept"], [3251, 3254, "Concept"], [3302, 3305, "Concept"], [3357, 3367, "Concept"], [3518, 3529, "Concept"], [3656, 3671, "Concept"], [3699, 3702, "Concept"], [3800, 3806, "Concept"], [3941, 3949, "Concept"], [3950, 3951, "Concept"], [3982, 3992, "Concept"], [3997, 4005, "Concept"], [4042, 4049, "Concept"], [4055, 4056, "Concept"], [4153, 4168, "Concept"], [4203, 4204, "Concept"], [4235, 4245, "Concept"], [4250, 4258, "Concept"], [4415, 4430, "Concept"], [4456, 4464, "Concept"], [4465, 4466, "Concept"], [4497, 4507, "Concept"], [4512, 4520, "Concept"], [4570, 4571, "Concept"], [4682, 4697, "Concept"], [4703, 4759, "Concept"], [4763, 4795, "Concept"], [4834, 4835, "Concept"], [4862, 4863, "Concept"], [4876, 4884, "Concept"], [4885, 4886, "Concept"], [4889, 4890, "Concept"], [4893, 4895, "Concept"], [4900, 4901, "Concept"], [4910, 4929, "Concept"], [4931, 4933, "Concept"], [4936, 4937, "Concept"], [4950, 4951, "Concept"], [4960, 4968, "Concept"], [4972, 4973, "Concept"], [5004, 5006, "Concept"], [5009, 5010, "Concept"], [5018, 5029, "Concept"], [5030, 5031, "Concept"], [5050, 5063, "Concept"], [5078, 5081, "Concept"], [5115, 5120, "Concept"], [5204, 5210, "Concept"], [5220, 5221, "Concept"], [5222, 5224, "Concept"], [5233, 5235, "Concept"], [5290, 5305, "Concept"], [5355, 5356, "Concept"], [5380, 5381, "Concept"], [5395, 5397, "Concept"], [5410, 5411, "Concept"], [5559, 5572, "Concept"], [5612, 5623, "Concept"], [5624, 5625, "Concept"], [5681, 5696, "Concept"], [5702, 5705, "Concept"], [5710, 5713, "Concept"], [5715, 5718, "Concept"], [5773, 5776, "Concept"], [5777, 5780, "Concept"], [5812, 5815, "Concept"], [5825, 5838, "Concept"], [5851, 5859, "Concept"], [5889, 5892, "Concept"], [5925, 5929, "Concept"], [6013, 6016, "Concept"], [6025, 6028, "Concept"], [6077, 6092, "Concept"], [6113, 6116, "Concept"], [6124, 6127, "Concept"], [6635, 6650, "Concept"], [6671, 6675, "Concept"], [6680, 6684, "Concept"], [6692, 6725, "Concept"], [6744, 6774, "Concept"], [6785, 6786, "Concept"], [6788, 6789, "Concept"], [6791, 6792, "Concept"], [6794, 6796, "Concept"], [6799, 6800, "Concept"], [6810, 6813, "Concept"], [6831, 6839, "Concept"], [6870, 6873, "Concept"], [6884, 6885, "Concept"], [6887, 6888, "Concept"], [6905, 6916, "Concept"], [6958, 6971, "Concept"], [7063, 7075, "Concept"], [7131, 7146, "Concept"], [7164, 7165, "Concept"], [7191, 7194, "Concept"], [7212, 7220, "Concept"], [7295, 7296, "Concept"], [7298, 7299, "Concept"], [7333, 7334, "Concept"], [7344, 7345, "Concept"], [7407, 7418, "Concept"], [7477, 7492, "Concept"], [7519, 7522, "Concept"], [7633, 7634, "Concept"], [7834, 7849, "Concept"], [7879, 7899, "Concept"], [7904, 7923, "Concept"], [7924, 7925, "Concept"], [7933, 7936, "Concept"], [8030, 8033, "Concept"], [8074, 8077, "Concept"], [8200, 8215, "Concept"], [8732, 8747, "Concept"], [9138, 9153, "Concept"], [9171, 9184, "Concept"], [9414, 9417, "Concept"], [9514, 9517, "Concept"], [9521, 9524, "Concept"], [9530, 9538, "Concept"], [9569, 9575, "Concept"], [9634, 9642, "Concept"], [9745, 9753, "Concept"], [9767, 9772, "Concept"], [9803, 9808, "Concept"], [9830, 9837, "Concept"], [10039, 10054, "Concept"], [10064, 10067, "Concept"], [10071, 10074, "Concept"], [10080, 10088, "Concept"], [10094, 10097, "Concept"], [10126, 10139, "Concept"], [10145, 10155, "Concept"], [10158, 10166, "Concept"], [10188, 10191, "Concept"], [10388, 10400, "Concept"], [10456, 10471, "Concept"], [10508, 10511, "Concept"], [10582, 10583, "Concept"], [10593, 10594, "Concept"], [10716, 10731, "Concept"], [10887, 10898, "Concept"], [10961, 10974, "Concept"], [11108, 11123, "Concept"], [11152, 11172, "Concept"], [11177, 11198, "Concept"], [11206, 11209, "Concept"], [12210, 12225, "Concept"], [12981, 12996, "Concept"], [13021, 13040, "Concept"], [13188, 13201, "Concept"], [13342, 13357, "Concept"], [13366, 13385, "Concept"], [13415, 13425, "Concept"], [13428, 13444, "Concept"], [13450, 13460, "Concept"], [13463, 13479, "Concept"], [13484, 13494, "Concept"], [13511, 13518, "Concept"], [13567, 13582, "Concept"], [13588, 13607, "Concept"], [13652, 13662, "Concept"], [13701, 13711, "Concept"], [13756, 13766, "Concept"], [13810, 13815, "Concept"], [13826, 13837, "Concept"], [13854, 13866, "Concept"], [13879, 13880, "Concept"], [14055, 14070, "Concept"], [14076, 14095, "Concept"], [14113, 14127, "Concept"], [14131, 14152, "Concept"], [14173, 14186, "Concept"], [14255, 14268, "Concept"], [14300, 14313, "Concept"], [14349, 14360, "Concept"], [14365, 14378, "Concept"], [14392, 14403, "Concept"], [14411, 14423, "Concept"], [14500, 14515, "Concept"], [14521, 14540, "Concept"], [14626, 14641, "Concept"], [14647, 14666, "Concept"], [14759, 14774, "Concept"], [14780, 14799, "Concept"], [14818, 14829, "Concept"], [14906, 14925, "Concept"], [14940, 14953, "Concept"], [15017, 15032, "Concept"], [15038, 15065, "Concept"], [15083, 15093, "Concept"], [15103, 15113, "Concept"], [15196, 15208, "Concept"], [15442, 15454, "Concept"], [15638, 15650, "Concept"], [15804, 15831, "Concept"], [15863, 15873, "Concept"], [15876, 15892, "Concept"], [15898, 15908, "Concept"], [15911, 15927, "Concept"], [15932, 15942, "Concept"], [15953, 15960, "Concept"], [16030, 16057, "Concept"], [16102, 16112, "Concept"], [16151, 16161, "Concept"], [16206, 16216, "Concept"], [16268, 16279, "Concept"], [16296, 16308, "Concept"], [16316, 16317, "Concept"], [16536, 16563, "Concept"], [16581, 16595, "Concept"], [16599, 16620, "Concept"], [16641, 16654, "Concept"], [16724, 16737, "Concept"], [16770, 16783, "Concept"], [16818, 16830, "Concept"], [16847, 16859, "Concept"], [16867, 16878, "Concept"], [16896, 16909, "Concept"], [16985, 17001, "Concept"], [17006, 17032, "Concept"], [17054, 17068, "Concept"], [17142, 17156, "Concept"], [17163, 17190, "Concept"], [17211, 17225, "Concept"], [17304, 17318, "Concept"], [17326, 17352, "Concept"], [17371, 17384, "Concept"], [17394, 17405, "Concept"], [17473, 17488, "Concept"], [17494, 17521, "Concept"], [17533, 17547, "Concept"], [17638, 17652, "Concept"], [17659, 17677, "Concept"], [17688, 17702, "Concept"], [17716, 17728, "Concept"], [17752, 17764, "Concept"], [17853, 17861, "Concept"], [17889, 17905, "Concept"], [17987, 18003, "Concept"], [18007, 18020, "Concept"], [18071, 18081, "Concept"], [18126, 18136, "Concept"], [18187, 18198, "Concept"], [18215, 18227, "Concept"], [18243, 18244, "Concept"], [18478, 18493, "Concept"], [18499, 18517, "Concept"], [18535, 18549, "Concept"], [18553, 18574, "Concept"], [18588, 18601, "Concept"], [18664, 18677, "Concept"], [18694, 18705, "Concept"], [18721, 18733, "Concept"], [18738, 18750, "Concept"], [18764, 18775, "Concept"], [18783, 18794, "Concept"], [18819, 18831, "Concept"], [18844, 18856, "Concept"], [18873, 18884, "Concept"], [18939, 18954, "Concept"], [18960, 18978, "Concept"], [18999, 19012, "Concept"], [19070, 19085, "Concept"], [19091, 19109, "Concept"], [19131, 19142, "Concept"], [19158, 19169, "Concept"], [19222, 19237, "Concept"], [19243, 19261, "Concept"], [19293, 19304, "Concept"], [19321, 19332, "Concept"], [19392, 19407, "Concept"], [19413, 19431, "Concept"], [19461, 19473, "Concept"], [19486, 19498, "Concept"], [19515, 19526, "Concept"], [19593, 19608, "Concept"], [19629, 19661, "Concept"], [19663, 19666, "Concept"], [19686, 19715, "Concept"], [19717, 19720, "Concept"], [19759, 19762, "Concept"], [19782, 19785, "Concept"], [19842, 19859, "Concept"], [19863, 19881, "Concept"], [19883, 19896, "Concept"], [19902, 19917, "Concept"], [19934, 19950, "Concept"], [19964, 19980, "Concept"], [19996, 20013, "Concept"], [20031, 20047, "Concept"], [20058, 20074, "Concept"], [20084, 20100, "Concept"], [20164, 20168, "Concept"], [20217, 20232, "Concept"]]}