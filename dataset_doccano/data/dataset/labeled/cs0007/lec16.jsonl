{"id": 44, "segment": ["train_set", "labeled"], "course": "cs0007", "lec": "lec16", "text": "CS 0007: Introduction to Java\nLecture 16\nNathan Ong\nUniversity of Pittsburgh\nNovember 3, 2016\n\n\fMain Portions of OOP\n\u2022 Building a class\n\u2022 Determining inter-class relationships\n\u2013 Subclasses\n\u2013 Superclasses\n\u2013 Ownership\n\n\fRecap\nA class needs these components:\n\u2022 Class-level/Instance Variables\n\u2022 Methods\n\u2022 Constructor(s)\n\n\fCar Example\npublic class Car\n{\nprivate static int nextIDNum = 0;\nprivate final int idNum;\nprivate Color color;\nprivate String licensePlate;\npublic Car(Color color)\n{\nthis.color = color;\nthis.idNum = Car.nextIDNum;\nCar.nextIDNum++;\n\u2026\n}//end constructor(Color)\n\u2026\n}//End class Car\n\n\fOverloading Constructors\npublic class Car\n{\n\u2026\npublic Car(Color color)\n{\nthis.color = color;\nthis.idNum = Car.nextIDNum;\nCar.nextIDNum++;\n\u2026\n}//end constructor(Color)\n//default color is Color.RED\npublic Car()\n{\nthis(Color.RED);\n}//end constructor()\n\u2026\n}//End class Car\n\nReferencing\nother\nconstructors\ncan be done\nwith the\n\n\fFunctional Functions\n\u2022 The most common functions are getters\nand setters\n\u2013 Getters retrieve the values of instance\nvariables and return them\n\u2013 Setters alter the values of the instance\nvariables\n\n\u2022 Why use these functions rather than\nsetting the variable to be public?\n\u2022 Control!\n\n\fCar Example\npublic class Car\n{\nprivate static int nextIDNum = 0;\nprivate final int idNum;\nprivate Color color;\nprivate String licensePlate;\npublic int getIDNum()\n{\nreturn this.idNum;\n}//end function()\n\u2026\n}//End class Car\n\n\fCar Example\npublic class Car\n{\nprivate static int nextIDNum = 0;\nprivate final int idNum;\nprivate Color color;\nprivate String licensePlate;\npublic void setColor(Color color)\n{\nthis.color = color;\n}//end function(Color)\n\u2026\n}//End class Car\n\n\fWhy Bother?\n\u2022 Having these methods ensure you have\nfull control over the instance variables\n\u2022 Should you decide to change how the\nvariable is accessed or altered, you only\nneed to change the method.\n\u2022 You only add them when you need\nthem!\n\n\fInter-class Relationships\n\u2022 Building a single class is useless. It\nneeds to be used in context.\n\u2022 There are two main relationships\nbetween classes\n\u2013 Sub/Super class\n\u2013 Ownership\n\n\fSubclasses\n\u2022 A subclass of a class is a more specific\ntype of a class\n\u2022 Also known as the child of a class\n\u2022 For example, a tree would be a subclass\nof plant\n\u2022 Subclasses are meant to expand upon\nthe behavior of their more general\nparent class\n\u2022 You can have several subclasses\n\n\fSuperclasses\n\u2022 On the converse, a superclass is a more\nabstract and general version of a class\n\u2022 Also known as the parent of a class\n\u2022 Plant is the superclass of Tree\n\u2022 You can only have one superclass\n\n\fDeclaring a Class to be a\nSubtype\n\u2022 In order to declare a class\u2019s parent, use\nthe keyword extends\n\u2022 (Classes that do not have a parent class\nimplicitly extend the Object class)\n\n\fInheritance\n\u2022 A subclass inherits all non-private fields\nand methods\n\u2022 Accessing these fields and methods\nrequires the keyword super.\n\u2022 (Note: you may also be able to access\nprivate fields with the parent class\u2019s\ngetters and setters, which may be safer)\n\n\fRestricting Access\n\u2022 What if you want a field or method to be\ninherited, but still do not necessarily\nwant it to be accessed by anyone?\n\u2022 Use the keyword protected\n\u2022 Remember, releasing your access to\nthese fields and methods should only\nbe done when necessary\n\n\fExample\npublic class Vehicle\n{\nprivate final int numWheels;\n\u2026\npublic boolean move(double dist)\n{\nreturn dist < this.numWheels*10.0;\n}//end function(double)\n\u2026\n}//End class Vehicle\n\n\fExample A\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n\u2026\npublic boolean drive(double dist)\n{\nreturn (dist < this.numWheels*100.0) &&\n(this.gasRemaining > 0);\n}//end function(double)\n\u2026\n}//End class Plant\n\n\fExample B\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n\u2026\npublic boolean drive(double dist)\n{\nreturn super.move(dist*10.0) &&\n(this.gasRemaining > 0);\n}//end function(double)\n\u2026\n}//End class Plant\n\n\fWhich Is Better?\n\u2022 Example A totally ignores the move\nmethod (essentially its precursor), but is\nclearer\n\u2022 Example B shows the movement\nlineage\n\u2022 Either is okay, but both need\ncomments!!!!\n\n\fRegarding Constructors\n\u2022 Constructors cannot be inherited, even\nthough they are public\n\u2022 However, you can, and should, use them\nfrom the subclass\u2019s constructor, to\nensure complete initialization\n\u2022 You can call the parent\u2019s constructor by\nusing the keyword super\n\n\fCalling Superclass Constructor\n\u2022 Unlike calling an overloaded\nconstructor of the same class, calling a\nsuperclass constructor does not need to\nbe the only line of code\n\u2022 However, it must still be the first line of\ncode in the constructor\n\n\fExample\npublic class Vehicle\n{\nprivate final int numWheels;\n\u2026\npublic Vehicle(int numWheels)\n{\nthis.numWheels = numWheels;\n\u2026\n}//end function(double)\n\u2026\n}//End class Vehicle\n\n\fExample\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n\u2026\npublic Car(int numPassengers, double gasRemaining)\n{\nsuper(4);\nthis.numPassengers = numPassengers;\nthis.gasRemaining = gasRemaining;\n}//end constructor(int,double)\n\u2026\n}//End class Plant\n\n\fWhat If the Superclass\u2019s Method\nDefinition Does Not Fit the Class\u2019s?\n\u2022 We can override the definition by using\nthe exact same function header\n\u2022 The line directly above function header\nmust have \u201c@Override\u201d only\n\u2022 As an example, our Car class should\nprobably use the original \u201cmove\u201d\nmethod, rather than creating an entirely\nnew \u201cdrive\u201d method that does\nsomething similar\n\n\fReminder\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n\u2026\npublic boolean drive(double dist)\n{\nreturn super.move(dist*10.0) &&\n(this.gasRemaining > 0);\n}//end function(double)\n\u2026\n}//End class Plant\n\n\fOverride\npublic class Car extends Vehicle\n{\nprivate int numPassengers;\nprivate double gasRemaining;\n\u2026\n@Override\npublic boolean move(double dist)\n{\nreturn super.move(dist*10.0) &&\n(this.gasRemaining > 0);\n}//end function(double)\n\u2026\n}//End class Plant\n\n\fOverriding\n\u2022 I can still reference the original method\nusing the super keyword\n\u2022 Unless your overridden method totally\ndiscards the functionality of the\nsuperclass\u2019s method, you should call the\nsuperclass\u2019s method at least once\n\n\fNote\n\u2022 You cannot override constructors\n\n\fOwnership\n\u2022 Ownership is simply one class using\nanother as a property\n\u2022 A Car may have an Engine, a Radio, and\nan Owner, depending on what you need\n\u2022 A Car\u2019s superclass and subclasses\ncertainly are not Engine, Radio, and\nOwner\n\n\fUsing the Classes\npublic class Garage\n{\nprivate Vehicle[] vehicles;\n\u2026\npublic Garage(int capacity)\n{\nthis.vehicles = new Vehicle[capacity];\nfor(int i = 0; i < vehicles.length; i++)\n{\nvehicles[i] = null;\n}\n\u2026\n}//end constructor(int)\n\u2026\n}//End class Garage\n\n\fUsing the Classes\npublic class Garage\n{\n\u2026\npublic boolean addVehicle(Vehicle vehicle)\n{\n//Note: there is a better way!\nfor(int i = 0; i < vehicles.length; i++)\n{\nif(vehicles[i] == null)\n{\nvehicles[i] = vehicle;\nreturn true;\n}\n}\nreturn false;\n}//end method(Vehicle)\n}//End class Garage\n\n\fUsing the Classes\npublic class JayLeno\n{\npublic static void main(String[] args)\n{\nGarage garage = new Garage(100);\nCar ferrari = new Car(5,100.0);\ngarage.addVehicle(ferrari);\nferrari.move();//??\nferrari.drive();//??\nSystem.out.println(\"I have so many cars\");\n}//end method main\n}//End class JayLeno\n\n\fQUESTIONS?\n\n\f", "label": [[113, 116, "Concept"], [130, 135, "Concept"], [178, 188, "Concept"], [191, 203, "Concept"], [206, 215, "Concept"], [598, 622, "Concept"], [972, 979, "Concept"], [984, 991, "Concept"], [994, 1001, "Concept"], [1062, 1069, "Concept"], [1718, 1725, "Concept"], [1904, 1928, "Concept"], [2042, 2049, "Concept"], [2070, 2079, "Concept"], [2082, 2092, "Concept"], [2097, 2105, "Concept"], [2222, 2230, "Concept"], [2242, 2252, "Concept"], [2349, 2359, "Concept"], [2362, 2374, "Concept"], [2694, 2706, "Concept"], [2745, 2756, "Concept"], [2761, 2769, "Concept"], [2872, 2877, "Concept"], [2943, 2955, "Concept"], [2958, 2965, "Concept"], [2970, 2977, "Concept"], [3155, 3164, "Concept"], [4140, 4152, "Concept"], [4155, 4167, "Concept"], [4267, 4277, "Concept"], [4386, 4391, "Concept"], [4402, 4412, "Concept"], [4413, 4424, "Concept"], [5107, 5119, "Concept"], [6025, 6030, "Concept"], [6113, 6124, "Concept"], [6154, 6164, "Concept"], [6217, 6229, "Concept"], [6232, 6241, "Concept"], [6244, 6253, "Concept"], [6390, 6400, "Concept"], [6405, 6415, "Concept"]], "Comments": []}