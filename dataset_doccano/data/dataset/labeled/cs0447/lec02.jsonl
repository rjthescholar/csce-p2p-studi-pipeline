{"id": 50, "segment": ["train_set", "labeled"], "course": "cs0447", "lec": "lec02", "text": "#1\nCS 0447\nIntroduction to\nComputer Programming\n\nBinary, Hex, Octal\nOriginal slides by: Jarrett Billingsley\nModified with bits from: Bruce Childers, David\nWilkinson\n\nLu\u00eds Oliveira\n\nFall 2020\n\n\fWhat do I need to know now!\nThe classes will be recorded!\n\u25cf You will be able to access the videos online\no They are for your personal use only!\no Do not distribute them!\n\u25cf You don\u2019t need to turn on your camera\no If you do, you may be recorded\n\u25cf You can ask questions via text!\no Chat is great for that. If I don\u2019t stop and read your questions, ask them again\no But feel free to interrupt me at any point.\n\n2\n\n\fClass Announcements\nRecitation are happening!!\n\n3\n\n\fSummary\n\u25cf Numbers and bases\no Why is 2020 worth 2020??\no Or is it?\n\u25aa Maybe it\u2019s worth 8224?\n\u25cf Number representation\no Binary \u2013 what do 0s and 1s mean?\n\u25cf Other representations\no Hexadecimal and octal\n\u25cf How does a computer interpret them?\no (bait) The answer will surprise you!!\n\n4\n\n\fNumbers and bases\n\n5\n\n\fPositional number systems\n\u25cf The numbers we use are written positionally: the position of a digit within\nthe number has a meaning.\n\n3\n2 x 10\n\n2000\n2\n0 0 0 0 x 10\n=\n2021=\n1\n2 0 2 x 10\n0\n+\n1 1 x 10\n6\n\n\fPositional number systems\n\u25cf The numbers we use are written positionally: the position of a digit within\nthe number has a meaning.\n\n2021\n\nMost Significant\n\nLeast Significant\n\n1000s\n\n100s\n\n10s\n\n1s\n\n103\n\n102\n\n101\n\n100\n\n\u25cf How many (digits) symbols do we have in our number system?\n\u25cb 10: 0, 1, 2, 3, 4, 5 ,6 ,7, 8, 9\n\n7\n\n\fRange of numbers\nSuppose we have a 4-digit numeric display.\n\n\u25cf What is the smallest number it can show?\n\u25cf What is the biggest number it can show?\n\u25cf How many different numbers can it show?\no 9999 - 0 + 1 = 10,000\no What power of 10 is 10,000?\n\u25aa 104\n\n8\n\n\fSo\u2026 with the numbers we use every day\u2026\n\u25cf A number represented by the digits\n\ud835\udc51\ud835\udc5b \ud835\udc51\ud835\udc5b\u22121 \u2026 \ud835\udc511 \ud835\udc510\n\u25cf Has the value\n\ud835\udc51\ud835\udc5b \u00d7 10\ud835\udc5b + \ud835\udc51\ud835\udc5b\u22121 \u00d7 10\ud835\udc5b\u22121 + \u22ef + \ud835\udc511 \u00d7 101 + \ud835\udc510 \u00d7 100\n\u25cf Using \ud835\udc5b digits we can represent 10\ud835\udc5b different numbers\n\u25cf The smallest non-negative number representable with \ud835\udc5b digits is 0\n\u25cf The largest number representable with \ud835\udc5b digits is 10\ud835\udc5b \u2212 1\n\u25cf Using 10 symbols: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n\n9\n\n\fNumeric Bases\n\u25cf These 10s keep popping up\u2026 and for good reason\n\u25cf We use a base-10 (decimal) numbering system\no 10 different symbols, and each place is a power of 10\n\u25cf But we can use (almost) any number as a base!\n\u25cf The most common bases when dealing with computers are base-2 (binary), base-16\n(hexadecimal), and (rarely) base-8 (octal)\n\u25cf When dealing with multiple bases, you can write the base as a subscript to be explicit\nabout it:\n\n510 = 1012\n\n10\n\n\fMaking a number system\nUsing base B\n\u25cf A number represented by the digits\n\ud835\udc51\ud835\udc5b \ud835\udc51\ud835\udc5b\u22121 \u2026 \ud835\udc511 \ud835\udc510\n\u25cf Has the value\n\ud835\udc51\ud835\udc5b \u00d7 B\ud835\udc5b + \ud835\udc51\ud835\udc5b\u22121 \u00d7 B\ud835\udc5b\u22121 + \u22ef + \ud835\udc511 \u00d7 B1 + \ud835\udc510 \u00d7 B0\n\u25cf Using \ud835\udc5b digits we can represent B\ud835\udc5b different numbers\n\u25cf The smallest non-negative number representable with \ud835\udc5b digits is 0\n\u25cf The largest number representable with \ud835\udc5b digits is B\ud835\udc5b \u2212 1\n\n\u25cf Using B symbols\nIf you use base 0 you\ndon\u2019t need to\nremember any symbols\n\n11\n\n\fBinary \u2013 Base 2\n\n12\n\n\fHow many symbols in binary????\n\n13\n\n\fLet's make a base-2 number system\nUsing base 2\n\u25cf A number represented by the digits\n\ud835\udc51\ud835\udc5b \ud835\udc51\ud835\udc5b\u22121 \u2026 \ud835\udc511 \ud835\udc510\n\u25cf Has the value\n\ud835\udc51\ud835\udc5b \u00d7 2\ud835\udc5b + \ud835\udc51\ud835\udc5b\u22121 \u00d7 2\ud835\udc5b\u22121 + \u22ef + \ud835\udc511 \u00d7 21 + \ud835\udc510 \u00d7 20\n\u25cf Using \ud835\udc5b digits we can represent 2\ud835\udc5b different numbers\n\u25cf The smallest non-negative number representable with \ud835\udc5b digits is 0\n\u25cf The largest number representable with \ud835\udc5b digits is 2\ud835\udc5b \u2212 1\n\n\u25cf Using 2 symbols: 0, 1\n14\n\n\fBinary (base-2)\n\n\u2022 We call a Binary digIT a bit \u2013 a single 1 or 0\n\u2022 When we say an n-bit number, we mean one with n binary digits\n\n1001 0110 =\nMSB\n\n27 26 25 24\n128s 64s 32s 16s\n\nLSB\n\n23\n8s\n\n22\n4s\n\n21 20\n2s 1s\n\nTo convert binary to decimal: ignore 0s, It\u2019s the only\nadd up place values wherever you see a 1. odd number!\n\n1 \u00d7 128 +\n0 \u00d7 64 +\n0 \u00d7 32 +\n1 \u00d7 16 +\n0\u00d78+\n1\u00d74+\n1\u00d72+\n0\u00d71\n\n= 15010\n15\n\n\fMaking change\n\u25cf You want to give someone $9.63 in change, using the fewest bills and coins possible.\nHow do you count it out?\n\n$5\u00d71\n$1\u00d7 4\n25\u00a2\u00d7 2 10\u00a2\u00d7 1 5\u00a2\u00d7 0\n1\u00a2\u00d7__\n3\nLeft: $9.63 -$5= $4.63 -$4= $0.63 -50\u00a2= $0.13-10\u00a2=$0.03 -0\u00a2=$0.03 -3\u00a2=$0.00\n\n\u2022 Biggest to smallest\n\u2022 Most significant to least significant\n\u2022 WHERE COULD THIS BE GOING...\n16\n\n\fConverting decimal to binary\n\n\u2022 You want to convert the number 8310 to binary.\n128s\n\n64s\n\n32s\n\n16s\n\n8s\n\n4s\n\n2s\n\n1s\n\nLeft: 83- 0 =83- 64 =19 - 0 = 19- 16 = 3 - 0 = 3 - 0 = 3 - 2 = 1 - 1 = 0\n\n01010011\n\n\u2022 For each place from MSB:\n\u2022 If place value < remainder:\n\no digit = 1\no remainder = remainder - place\n\u2022 Else, digit = 0.\n17\n\n\fBits, bytes, nibbles, and words\n\u25cf A bit is one binary digit, and its unit is lowercase b.\n\n\u25cf A byte is an 8-bit value, and its unit is UPPERCASE B.\no This is (partially) why your 30 megabit (Mbps) internet connection can only give you\nat most 3.57 megabytes (MB) per second!\n\u25cf A nibble (also nybble) is 4 bits \u2013 half of a byte\no Corresponds nicely to a single hex digit.\n\n\u25cf A word is the \"most comfortable size\" of number for a CPU.\n\u25cf When we say \"32-bit CPU,\" we mean its word size is 32 bits.\no This means it can, for example, add two 32-bit numbers at once.\n\u25cf BUT WATCH OUT:\no Some things (Windows, x86) use word to mean 16 bits and double word (or\ndword) to mean 32 bits.\n\n18\n\n\fKilo, mega, tera\nPotatoes\n\nBytes\n\nBytes\n\n1g (gram)\n\n1B (Byte)\n\n1B (Byte)\n\n1kg (Kilogram) = 1000g\n\n1kB (Kilobyte) = 1000B\n\n1kiB (Kibibyte) = 1024B\n(power of 2 nearest to 1000)\n\n1Mg (Megagram) = 1000Kg\n\n1MB (Megabyte) = 1000kB\n\n1MiB (Mebibyte) = 1024kiB\n\n1Gg (Gigagram) = 1000Mg\n\n1GB (Gigabyte) = 1000MB\n\n1GiB (Gibibyte) = 1024MiB\n\n1Tg (Teragram) = 1000Gg\n\n1TB (Terabyte) = 1000GB\n\n1TiB (Tebibyte) = 1024GiB\n\n1Eg (Exagram) = 1000Tg\n\n1EB (Exabyte) = 1000TB\n\n1EiB (Exbibyte) = 1024TiB\n\nUsed for hard drive capacity and\nnetwork speeds\n\nUsed for most other things!\nBecause binary!\n\nA 1TB drive only has 931GiB!\n\n19\n\n\fThe real world IS CONFUSING!!!!\n\n931GB\n\n931GiB\n\nSometimes this is used to mean\n931GiB \uf04c\n\nThis always means 931GiB! \u263a\n\n20\n\n\fWhy binary? Whynary?\n\n\u2022 Why indeed?\no log 2 10 = 3.322\no The number of bits required to represent 10 digits\no The increase on number of components in a computer!\n\n\u2022 Because it\u2019s soooooo much easier to implement the hardware!\no And robust!\n\n\u2022 Arithmetic becomes really easy (as we'll see in several weeks)\n\n21\n\n\fWhy binary? Whynary?\n\u25cf Why indeed?\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\u25cf What color is this?\n\n22\n\n\fWhy binary? Whynary?\n\u25cf Why indeed?\n0\n\n1\n\n\u25cf What color is this?\n\n23\n\n\fWhy binary? Whynary?\n\n\u2022 Why indeed?\no log 2 10 = 3.322\no The number of bits required to represent 10 digits\no The increase on number of components in a computer!\n\n\u2022 Because it\u2019s soooooo much easier to implement the hardware!\no And robust!\n\n\u2022 Arithmetic becomes really easy (as we'll see in several weeks)\n\n24\n\n\fEverything in a computer is a number\n\u25cf So, everything on a computer is represented in binary.\no everything.\n01100101 01110110 01100101 01110010 01111001 01110100 01101000\n01101001 01101110 01100111 00001010 00000000\n\u25cf Java strings are encoded using UTF-16\no Most letters and numbers in the English alphabet are < 128.\no \u201cStrings are numbers\u201d\n\u25aa 83 116 114 105 110 103 115 32 97 114 101 32 110 117 109 98 101 114 115 0\n\u25cf ASCII is also pretty common (the best kind of common)\no That\u2019s what we will be using \u2192 8 bit numbers represent characters\no Letters and numbers (and most/all ascii characters) have the same value as UTF-16\n\nCS 0007 \u2013 Summer 2020\n\nDo try this at home: what does this mean?\n\u2022 71 111 111 100 32 74 111 98 0\n25\n\n\fEVERYTHING\n\n\u2022 Images and colors? Numbers!\n\u2022 Videos? Numbers!\n\nCS 0007 \u2013 Summer 2020\n\n122\n\n185\n\n32\n\n239\n\n97\n\n181\n\n181\n\n40\n\n41\n\n26\n\n\fOne number, many possible meanings\n\u25cf All information on computers is stored as patterns of bits, but\u2026\n\u25cf How these bits are interpreted, transformed, and displayed is up to the\nprogrammer and the user.\n\n-59\n\nSigned integer\n\nR3G3B2 color\n\n11000100\n\nUnsigned integer\n\n196\n\nz80 instruction\n\nHexadecimal\n\n0xC4\n\nUnicode\n\n\u00c4\n\ncall nz\n27\n\n\fWhat it means to be \"arbitrary\"\n\n\u2022 It means there's no reason for it to be that way.\n\u2022 we just know/agree that it's how things are.\n\u2022 One of the biggest things I want you to know is:\nWhat a pattern of bits means is arbitrary.\n\n\u2022 As a corollary:\nThe same pattern of bits can be interpreted many\ndifferent ways.\n\n28\n\n\fThe calculat--hum--computer doesn't know or care.\n\u25cf when writing assembly (and C!) programs, the computer has no idea what you\nmean, cause nothing means anything to it\n\u25cf \"my program assembles/compiles, why is it crashing?\"\no cause the computer is stupid\n\u25aa it's a big fast calculator\n\u25cf there's no difference between nonsense code and useful code\n\u25cf it's good at doing fun things with bit patterns\n\u25cf but don't confuse what it does with intelligence\n\u25cf every \"smart\" thing a computer does, it does because a human programmed it\nto act like that\n\n29\n\n\fHexadecimal \u2013 Base 16\n\n30\n\n\fHow many symbols in hexadecimal????\n\n31\n\n\fShortcomings of binary and decimal\n\u25cf Binary numbers can get really long, really quickly.\no 3,927,66410 = 11 1011 1110 1110 0111 00002\n\u25cf But nice \"round\" numbers in binary look arbitrary in decimal.\no 10000000000000002 = 32,76810\n\n\u25cf This is because 10 is not a power of 2!\n\u25cf We could use base-4, base-8, base-16, base-32, etc.\no Base-4 is not much concise than binary\n\u25aa e.g. 3,927,66410 = 120 3331 2323 00004\no Base-32 and up? would require 32+ symbols. Nope.\n\u25aa Well at least for humans\u2026 They are actually used!\no Base-8 and base-16 look promising!\n32\n\n\fLet's make a base-2 16 number system\nUsing base 16\n\u25cf A number represented by the digits\n\ud835\udc51\ud835\udc5b \ud835\udc51\ud835\udc5b\u22121 \u2026 \ud835\udc511 \ud835\udc510\n\u25cf Has the value\n\ud835\udc51\ud835\udc5b \u00d7 16 \ud835\udc5b + \ud835\udc51\ud835\udc5b\u22121 \u00d7 16 \ud835\udc5b\u22121 + \u22ef + \ud835\udc511 \u00d7 161 + \ud835\udc510 \u00d7 16 0\n\u25cf Using \ud835\udc5b digits we can represent \ud835\udfcf\ud835\udfd4\ud835\udc5b different numbers\n\u25cf The smallest non-negative number representable with \ud835\udc5b digits is 0\n\u25cf The largest number representable with \ud835\udc5b digits is 16 \ud835\udc5b \u2212 1\n\n\u25cf Using 16 symbols: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\n33\n\n\fHexadecimal, or \"hex\" (base-16)\n\u25cf Digit symbols after 9 are A-F, meaning 10-15 respectively.\n\u25cf Usually we call one hexadecimal digit a hex digit. No fancy name :(\n\n003B EE70 =\n\n167 166 165 164\n\n163 162 161 160\n\nTo convert decimal to hex: use a calculator!\n\n0 \u00d7 167 +\n0 \u00d7 166 +\n3 \u00d7 165 +\n11 \u00d7 164 +\n14 \u00d7 163 +\n14 \u00d7 162 +\n7 \u00d7 161 +\n0 \u00d7 160 =\n\n3,927,66410\n\n34\n\n\fBUT WE REALLY WANT TO KNOW!!\n\n\u2022 Ok! then. Let\u2019s go back to decimal for a bit\n\n2021\n2\n\nJust divide by 10!\n\nHow would you\nextract this\nnumber???\n\nR0\n\n10 2 0 R 2\n10 2 0 2 R 1\n10 2 0 21\n35\n\n\fBUT WE REALLY WANT TO KNOW!!\n\n\u2022 Turns out that dividing by 10 in any base has the same outcome\n\n0x10 1610\n\n003B EE7016\n\n3\n1610 59\n\nR 11\nR 14\n\nR 14\n1610 958\n1610 15 342 R 7\n1610 245 479 R 0\n\n1610\n\n3 927 664\n\n36\n\n\fBUT WE REALLY WANT TO KNOW!!\n\n\u2022 Turns out that dividing by 10 in any base has the same outcome\n\n0b10\n\n210\n\n110012\n\n210\n210\n\n1\n\nR1\n\n3\n\nR0\n\n6\n\nR0\nR1\n\n210 12\n210 25\n\n37\n\n\fThe relationship between binary and hex\n\u25cf Four bits are equivalent to one hex digit.\n\u25cf Converting between them is easy!\n\u25cf Say we had this binary number:\n\n11101111101110011100002\n\n\u25cf Starting from the LSB, divide into groups of 4\nbits (put 0s before the first digits if there are\nleftovers). Then use the table.\n\n0011 1011 1110 1110 0111 0000\n\n0x 3 B E E 7 0\n(this is common notation for hex,\nderived from the C language.)\n\nBin\n\nHex\n\nBin\n\nHex\n\n0000\n\n0\n\n1000\n\n8\n\n0001\n\n1\n\n1001\n\n9\n\n0010\n\n2\n\n1010\n\nA\n\n0011\n\n3\n\n1011\n\nB\n\n0100\n\n4\n\n1100\n\nC\n\n0101\n\n5\n\n1101\n\nD\n\n0110\n\n6\n\n1110\n\nE\n\n0111\n\n7\n\n1111\n\nF\n\nknow how to make\nthis table.\n38\n\n\fLet\u2019s do it!\n\n100100011001111000011010010101\n\n39\n\n\fLet\u2019s do it!\n\n00 10 0100 0110 0111 1000 0110 1001 0101\n\n2\n\n4\n\n6\n\n7\n\n8\n\n6\n\n9\n\n5\n\n2467869516\n\n0x24678695\n40\n\n\fWhy?\n\n1111 1111\n1 \u00d7 27 + 1 \u00d7 26 + 1 \u00d7 25 + 1 \u00d7 24 + 1 \u00d7 23 + 1 \u00d7 22 + 1 \u00d7 21 + 1 \u00d7 20\n\n1 \u00d7 23 + 1 \u00d7 22 + 1 \u00d7 21 + 1 \u00d7 20 =\n8+4+2+1=\n15\n1 \u00d7 23 + 1 \u00d7 22 + 1 \u00d7 21 + 1 \u00d7 20 \u00d7 24 + 15\n15 \u00d7 161 + 15 \u00d7 160\n\nF\n\nF\n\nFactoring\n\n24 = 16\n41\n\n\fPowers of Two\n\u25cf Memorize at least the powers up to ~28 or 210.\no If you can't remember one, double the previous one.\n\nDec\n\nHex\n\n20\n\n1\n\n0x1\n\n21\n\n2\n\n0x2\n\n22\n\n4\n\n0x4\n\n23\n\n8\n\n0x8\n\n24\n\n16\n\n0x10\n\n\u25cf How about a 16-bit value?\no 65535: 0xFFFF\n\n25\n\n32\n\n0x20\n\n26\n\n64\n\n0x40\n\n\u25cf \"0xFFFF\" is kinda like \"9999\" in decimal.\n\n27\n\n128\n\n0x80\n\n28\n\n256\n\n0x100\n\n\u25cf These are the place values for binary, and they are also\nnice \"round\" numbers in binary and hex.\n\u25cf What is the largest number that an 8-bit value can hold?\nWhat is that in hexadecimal?\no 255: 0xFF\n\n42\n\n\fOctal \u2013 Base 8\n\n43\n\n\fHow many symbols in octal????\n\n44\n\n\fBase-8?\n\u25cf base-8, octal, used to be commonplace but isn't anymore\n\u25cf each octal digit (0-7) corresponds to three bits\no this made it a nice fit for 9-, 12-, 18-, and 36-bit machines\n\u25cf buuuut no one cares about octal anymore \uf04c\n\u25cf SORRY OCTAL\no it's okay, it has its revenge from time to time\no try this out in Java sometime:\n\nSystem.out.println(\"012345 = \" + 012345);\n\n45\n\n\fLet\u2019s do it!\n\n100100011001111000011010010101\n\n46\n\n\fLet\u2019s do it!\n\n100 100 011 001 111 000 011 010 010 101\n\n4\n\n4\n\n3\n\n1\n\n7\n\n0\n\n3\n\n44317032258\n04431703225\n0o4431703225\n\n2\n\n2\n\n5\n\n47\n\n\fNext class!\n\n\u2022 Assembly!!!!!\n\no How can we program the computer?\no New language -> new bugs!\n\n\u2022 Specifically\n\no Storing and retrieving data from memory\no Manipulating the data\n\n48\n\n\f", "label": [[49, 55, "Concept"], [57, 60, "Concept"], [62, 67, "Concept"], [665, 682, "Concept"], [773, 779, "Concept"], [832, 843, "Concept"], [848, 853, "Concept"], [960, 985, "Concept"], [1159, 1184, "Concept"], [1476, 1492, "Concept"], [2125, 2138, "Concept"], [2402, 2408, "Concept"], [2420, 2431, "Concept"], [2455, 2460, "Concept"], [4520, 4523, "Concept"], [4579, 4583, "Concept"], [4763, 4769, "Concept"], [4844, 4847, "Concept"], [4860, 4864, "Concept"], [5166, 5170, "Concept"], [5172, 5176, "Concept"], [5178, 5182, "Concept"], [6215, 6221, "Concept"], [6308, 6314, "Concept"], [6377, 6383, "Concept"], [9790, 9801, "Concept"], [9807, 9810, "Concept"], [10741, 10747, "Concept"], [10752, 10755, "Concept"], [11725, 11738, "Concept"], [12269, 12274, "Concept"], [12310, 12315, "Concept"], [12344, 12349, "Concept"]], "Comments": []}