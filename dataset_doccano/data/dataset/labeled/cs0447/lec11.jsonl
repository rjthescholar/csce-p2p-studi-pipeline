{"id": 45, "segment": ["train_set", "labeled"], "course": "cs0447", "lec": "lec11", "text": "#11\n\nFinite State\nMachines\nOriginal slides by: David Wilkinson\nModified with bits from: Bruce\nChilders, and Jarrett Billingsley\n\nCS 0447\nIntroduction to\nComputer Programming\n\nLu\u00eds Oliveira\n\nFall 2020\n\n\fFinite State Machines\n\n2\n\n\fWhat's an FSM?\n\u25cf A Finite State Machine is a machine with a finite number of states.\no :\u2019)\n\u25cf A Finite State Machine is a way of thinking about a process where:\no there is a series of inputs\no we need to produce a series of outputs\no the state stores some information\no the inputs can change the state and the outputs\n\n\u25cf FSMs come up all the time in programming and hardware design\n\u25cf They're great for controlling simple multiple-step procedures\n\n3\n\n\fA very simple example\n\u25cf what states can a ceiling fan be in?\no high, medium, low, and off\n\u25cf what are the input and output?\no the chain and the motor\n\u25cf when you pull the chain, it changes state\n\noff\n\npull\n\npull\n\npull\n\nhigh\n\nmed\n\nlow\n\npull\n\n4\n\n\fMissing some arrows\n\u25cf at any point in time, which of 2 choices can the input (chain) be?\no pulled or not-pulled\n\u25cf when you don't pull the chain, what happens?\n\npull\n\nno\npull\n\noff\n\nno\npull\n\npull\n\nhigh\n\nno\npull\n\npull\n\nmed\n\nno\npull\n\nlow\n\npull\n\nthis is the state transition diagram\n5\n\n\fThe state transition table - Table-a-fyin\u2019 it\n\u25cf we can represent this diagram with a truth table\n\nS\n\nIn\n\nSnext\n\noff no pull off\npull\n\noff\nno\npull\n\nno\npull\n\npull\n\nhigh\n\nno\npull\npull\n\noff\n\npull\n\nmed\n\nno\npull\n\npull\n\nhigh\n\nhigh no pull high\nlow\n\nhigh\n\npull\n\nmed\n\nmed no pull med\nmed\n\npull\n\nlow\n\nlow no pull low\nlow\n\npull\n\noff\n6\n\n\fThe state transition table - Table-a-fyin\u2019 it\n\u25cf we can represent this diagram with a truth table\n\u25cf we have 4 states. how many bits\nare needed to represent 4 values?\npull\n\noff\nno\npull\n\nno\npull\n\npull\n\nhigh\n\nno\npull\n\npull\n\nmed\n\npull\n\nfor the state, let's say:\noff means 00\nhigh means 01\nmed means 10\nlow means 11\n\nno\npull\n\nS\n\nIn\n\nSnext\n\n00 no 0pull off\n00\noff\n00\noff\n\npull\n1\n\n01\nhigh\n\n01 no 0pull high\n01\nhigh\nlow\n\n01\nhigh\n\npull\n1\n\n10\nmed\n\n10 no 0pull med\n10\nmed\n10\nmed\n\npull\n1\n\n11\nlow\n\n11 no 0pull low\n11\nlow\n11\nlow\n\npull\n1\n\n00\noff\n7\n\n\fThe state transition table - Table-a-fyin\u2019 it\n\u25cf we can represent this diagram with a truth table\n\u25cf we have 4 states. how many bits\nare needed to represent 4 values?\npull\n\noff\nno\npull\n\nno\npull\n\npull\n\nhigh\n\nno\npull\n\npull\n\nmed\n\npull\n\nfor the input, let's say:\n0 means not pulling\n1 means pulling\n\nno\npull\n\nS\n00\n00\n\n01\nlow\n\n01\n10\n10\n11\n11\n\nIn\n\nSnext\n\nno0pull 00\npull\n1\n\n01\n\nno0pull 01\npull\n1\n\n10\n\nno0pull 10\n\npull\n1\n\n11\n\nno0pull 11\npull\n1\n\n00\n8\n\n\fThe state transition table - Table-a-fyin\u2019 it\n\u25cf we can represent this diagram with a truth table\n\u25cf we have 4 states. how many bits\nare needed to represent 4 values?\n1\n\noff\n0\n\n0\n\n1\n\nhigh\n\n0\n\n1\n\nmed\n\n1\n\nfor the input, let's say:\n0 means not pulling\n1 means pulling\n\n0\n\nlow\n\nS\n\nIn\n\nSnext\n\n00\n\n0\n\n00\n\n00\n\n1\n\n01\n\n01\n\n0\n\n01\n\n01\n\n1\n\n10\n\n10\n\n0\n\n10\n\n10\n\n1\n\n11\n\n11\n\n0\n\n11\n\n11\n\n1\n\n00\n9\n\n\fIt\u2019s a UNIX system truth table, I know this!\n\n*it\u2019s a Silicon Graphics IRIX, which counts\u2026 kinda\nImage from Jurassic Park (1993), distributed by Universal Pictures\n\n10\n\n\fTruth tables with multiple output bits\n\u25cf there's no tricky stuff here \u2013 each output bit is its own expression\nS\n\nIn\n\nSnext\n\nS1\n\nS0\n\nIn\n\nSnext1\n\nS1\n\nS0\n\nIn\n\nSnext0\n\n00\n\n0\n\n00\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n00\n\n1\n\n01\n\n0\n\n0\n\n1\n\n0\n\n0\n\n0\n\n1\n\n1\n\n01\n\n0\n\n01\n\n0\n\n1\n\n0\n\n0\n\n0\n\n1\n\n0\n\n1\n\n01\n\n1\n\n10\n\n0\n\n1\n\n1\n\n1\n\n0\n\n1\n\n1\n\n0\n\n10\n\n0\n\n10\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n0\n\n10\n\n1\n\n11\n\n1\n\n0\n\n1\n\n1\n\n1\n\n0\n\n1\n\n1\n\n11\n\n0\n\n11\n\n1\n\n1\n\n0\n\n1\n\n1\n\n1\n\n0\n\n1\n\n11\n\n1\n\n00\n\n1\n\n1\n\n1\n\n0\n\n1\n\n1\n\n1\n\n0\n11\n\n\fWhat about the outputs\n\u25cf our fan controller has to control the motor after all\n\u25cf we can make a table showing the output(s) for each state\n\nAssume this is\nhow you\ncontrol the\nmotor\n\nnote that the\ninput isn't\ninvolved at all\n\nState\n\nMotor power\n\nOutput\n\noff\n\n0%\n\n00\n\nthe outputs\nonly have to\ndepend on the\ncurrent state!\n\nhigh\n\n100%\n\n11\n\nmed\n\n50%\n\n10\n\nlow\n\n25%\n\n01\n12\n\n\fRepresenting the output\n\u25cf We can represent the output in the state machine!\n\n1\n\noff\n[00]\n0\n\n0\n\n1\n\nhigh\n[11]\n\n0\n1\n\n1\n\nmed\n[10]\n\n0\n\nlow\n[01]\n\nS\n\nOutput\n\n00\n\n00\n\n01\n\n11\n\n10\n\n10\n\n11\n\n01\n\n13\n\n\fMaking a circuit out of it\n\u25cf This is a sequential circuit \u2013 the state changes over time\n\u25cf But the state transition and output tables are just combinational\n\u25cf Here's the general organization of any Moore FSM circuit:\n\nstate feeds back into transition logic\n\nD\n\ninputs\n\ntransition\nlogic\n\noutputs based\non state\n\noutputs\n\nQ\n\nstate\nregister\n\noutput\nlogic\n14\n\n\fHow to create a state machine?\n\u25cf Understand the problem\n\u25cf Represent all possible states and transitions\n\u25cf Encode the states\n\u25cf Implement the machine\n\n15\n\n\fUnderstanding the problem\nA problem:\n\u25cf You have an espresso machine\no Each espresso costs 15c <3\no The machine takes:\n\u25aa 5c - (N)ickels\n\u25aa 10c - (D)imes\no No change is given back!\nN\nCoin\nsensor\n\nD\n\nEspresso\nmachine\n\nPour\n\nCoffee\nBrewer\n\nReset\n16\n\n\fRepresent all possible states and transitions\nReset\n0c\n\n0c\n\n0c\n[0]\nN\n\n5c\n[0]\n\nD\n\nN\n0c\nD\n\n10c\n[0]\nN\n\n15c\n[1]\n\nD\n\nS\n\nD\n\nN\n\nSnext\n\nOutput\n\n0c\n\n0\n\n0\n\n0c\n\n0\n\n0c\n\n0\n\n1\n\n5c\n\n0\n\n0c\n\n1\n\n0\n\n10c\n\n0\n\n0c\n\n1\n\n1\n\nX\n\nX\n\n5c\n\n0\n\n0\n\n5c\n\n0\n\n5c\n\n0\n\n1\n\n10c\n\n0\n\n5c\n\n1\n\n0\n\n15c\n\n0\n\n5c\n\n1\n\n1\n\nX\n\nX\n\n10c\n\n0\n\n0\n\n10c\n\n0\n\n10c\n\n0\n\n1\n\n15c\n\n0\n\n10c\n\n1\n\n0\n\n15c\n\n0\n\n10c\n\n1\n\n1\n\nX\n\nX\n\n15c\n\nX\n\nX\n\n15c\n\n1\n\n17\n\n\fEncode the states\n\nS\n\nEncoded\n\n0c\n\n00\n\n5c\n\n01\n\n10c\n\n10\n\n15c\n\n11\n\nS\n\nD\n\nN\n\nSnext\n\nOutput\n\n00\n0c\n\n0\n\n0\n\n00\n0c\n\n0\n\n00\n0c\n\n0\n\n1\n\n01\n5c\n\n0\n\n00\n0c\n\n1\n\n0\n\n10c\n10\n\n0\n\n00\n0c\n\n1\n\n1\n\nX\n\nX\n0\n\n01\n5c\n\n0\n\n0\n\n01\n5c\n\n0\n\n01\n5c\n\n0\n\n1\n\n10c\n10\n\n0\n\n01\n5c\n\n1\n\n0\n\n15c\n11\n\n0\n\n01\n5c\n\n1\n\n1\n\nX\n\nX\n0\n\n10c\n10\n\n0\n\n0\n\n10c\n10\n\n0\n\n10c\n10\n\n0\n\n1\n\n15c\n11\n\n0\n\n10c\n10\n\n1\n\n0\n\n15c\n11\n\n0\n\n10c\n10\n\n1\n\n1\n\nX\n\nX\n0\n\n15c\n11\n\nX\n\nX\n\n15c\n11\n\n1\n\n18\n\n\fOur good old friend K-map - \ud835\udc7a\ud835\udc8f\ud835\udc86\ud835\udc99\ud835\udc95\ud835\udfce\n\ud835\udc7a\ud835\udfcf \ud835\udc7a\ud835\udfce\n\ud835\udc6b\ud835\udc75\n\n\ud835\udfce\ud835\udfce \ud835\udfce\ud835\udfcf \ud835\udfcf\ud835\udfcf \ud835\udfcf\ud835\udfce\n\n0\n\ud835\udfce\ud835\udfcf 1\n\ud835\udfcf\ud835\udfcf X\n\ud835\udfcf\ud835\udfce 0\n\ud835\udfce\ud835\udfce\n\n1\n0\nX\n1\n\n1\n1\nX\n1\n\n0\n1\nX\n1\n\nRed: \ud835\udc03\ud835\udc12\ud835\udfcf\n\u0d25 \ud835\udc12\ud835\udfce\nBlue: \ud835\udc75\n\nGreen:\ud835\udc75\ud835\udc7a\ud835\udfce\nPurple: \ud835\udc0d\ud835\udc12\ud835\udfcf\n\n\ud835\udc7a\ud835\udc8f\ud835\udc86\ud835\udc99\ud835\udc95\ud835\udfce = \ud835\udc03\ud835\udc12\ud835\udfcf + \ud835\udc75\ud835\udc7a\ud835\udfce\n\u0d25 \ud835\udc12\ud835\udfce + \ud835\udc0d\ud835\udc12\ud835\udfcf\n+\ud835\udc75\n\n19\n\n\fOur good old friend K-map -\ud835\udc7a\ud835\udc8f\ud835\udc86\ud835\udc99\ud835\udc95\ud835\udfcf\n\ud835\udc7a\ud835\udfcf \ud835\udc7a\ud835\udfce\n\ud835\udc6b\ud835\udc75\n\n\ud835\udfce\ud835\udfce \ud835\udfce\ud835\udfcf \ud835\udfcf\ud835\udfcf \ud835\udfcf\ud835\udfce\n\n0\n\ud835\udfce\ud835\udfcf 0\n\ud835\udfcf\ud835\udfcf X\n\ud835\udfcf\ud835\udfce 1\n\ud835\udfce\ud835\udfce\n\n0\n1\nX\n1\n\n1\n1\nX\n1\n\n1\n1\nX\n1\n\nRed: \ud835\udc12\ud835\udfcf\nGreen: \ud835\udc0d\ud835\udc12\ud835\udfce\nBlue: \ud835\udc03\n\n\ud835\udc7a\ud835\udc8f\ud835\udc86\ud835\udc99\ud835\udc95\ud835\udfcf = \ud835\udc12\ud835\udfcf + \ud835\udc0d\ud835\udc12\ud835\udfce + \ud835\udc03\n\n20\n\n\fOur good old friend K-map - Output\n\ud835\udc7a\ud835\udfce\n\ud835\udc7a\ud835\udfcf\n\n\ud835\udfce\n\n\ud835\udfce\n\ud835\udfcf\n\n\ud835\udfcf\n\n0 0\n0 1\n\nRed: \ud835\udc12\ud835\udfce \ud835\udc12\ud835\udfcf\n\nOutput= \ud835\udc12\ud835\udfce \ud835\udc12\ud835\udfcf\n\n21\n\n\fGet everything together\n\n22\n\n\f", "label": [[5, 26, "Concept"], [248, 268, "Concept"], [324, 345, "Concept"], [1175, 1190, "Concept"], [1208, 1230, "Concept"], [1534, 1556, "Concept"], [2068, 2090, "Concept"], [2510, 2533, "Concept"], [4429, 4443, "Concept"]], "Comments": []}