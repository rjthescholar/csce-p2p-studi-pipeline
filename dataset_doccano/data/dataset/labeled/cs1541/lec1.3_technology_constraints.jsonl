{"id": 105, "segment": ["train_set", "labeled"], "course": "cs1541", "lec": "lec1.3_technology_constraints", "text": "CS 1541 Introduction\nTechnology Constraints\n\nWonsun Ahn\nDepartment of Computer Science\nSchool of Computing and Information\n\n\fTechnology Constraints\n\n\fTechnology Constraints\n\u25fc Constraints in technology push architecture too\nApp 1\n\nTechnology push\n\nApp 2\n\nApp 3\n\nOperating System\n\nSoftware Layer\n\nInstruction Set Architecture\nProcessor Organization\n\nComputer\nArchitecture\n\nTransistor Implementation\n\nPhysical Layer\n\n\u26ab Power Wall: Thermal Design Power (TDP) constraint\n\u26ab Memory Wall: Constraint in bandwidth to memory\n\u26ab Variability: Limits in the precision of manufacturing technology\n\n\u25fc Processor must be designed to meet all constraints\n\n\fPower Wall\n\u25fc PowerCPU = Powerdynamic + Powerleakage\nPowerdynamic \u221d A * N * CFV2\nPowerleakage \u221d f(N, V, Vth) \u221d N * V * e-Vth\n\u26ab Leakage power is also called static power\n\u26ab This total CPU power cannot exceed TDP\n\n\u25fc Moore\u2019s Law transistor scaling means two things:\n\u26ab N = Number of transistors (\u221d 1/transistor size2) \uf0f1 \uf0f1\n\u26ab C = Capacitance (\u221d transistor size) \uf0f2\n\u26ab Reductions in C does not compensate for increases in N\n\n\u25fc Architects must use tricks to keep power in check\n\u26ab To keep packing more transistors to increase performance\n\n\f1. Reducing Dynamic Power\n\u25fc Powerdynamic (\u221d A * N * CFV2) + Powerleakage (\u221d N * V * e-Vth)\n\u25fc Reducing A (Activity): Clock gating\n\u26ab Disables the clock signal to unused parts of the chip (idle cores)\n\u26ab Wake-up is instantaneous (the moment clock signal goes in)\n\n\u25fc Reducing F (Frequency) and V (Supply Voltage)\n\u26ab When F is reduced, V can also be reduced\n(Transistor 101 and water pressure, remember?)\n\u26ab Dynamic Voltage Frequency Scaling (DVFS) done on multi-cores\nSlow down low-priority cores, speed up high-priority cores\n\n\fDVFS and Transistor Speed\n\u25fc RC Charging Curve of VG\nVdd1\nVG1\nVG2\n\nVdd2\n\nVth\n\nT1 T2\n\u25fc Vdd1 \u2192 Vdd2 saves power, but slows down T1 \u2192 T2\n\u25fc Vdd2 \u2192 Vdd1 uses more power, but speeds up T2 \u2192 T1\n\u25fc Vdd \u221d 1/T \u221d F (Vdd is proportional to frequency)\n\n\f2. Reducing Leakage Power\n\u25fc Powerdynamic (\u221d A * N * CFV2) + Powerleakage (\u221d N * V * e-Vth)\n\u25fc Reducing N (Transistor Number): Power gating\n\u26ab Disables power to unused parts of the chip (unused cores)\n\u26ab Eliminates dynamic power and leakage power to those parts\n\u26ab Drawback: wake-up takes a much longer time than clock gating\nDelay for supply voltage to stabilize\nDelay to backup and restore CPU state to/from memory\n\n\u25fc Reducing V (Supply Voltage): DVFS also helps here\n\n\fOS Manages Power\n\u25fc Who decides which cores to clock gate and power gate?\n\u25fc Who decides how to apply DVFS to the cores?\n\u25fc ACPI (Advanced Configuration and Power Interface)\n\u26ab OS performs power management using this interface\nOS knows best which threads to prioritize for best user experience\n\n\u26ab Open standard interface to system firmware\nFirmware sends signals to processor cores to control them\n\nApp 1\n\nApp 2\n\nApp 3\n\nOS Power Management\n\nSoftware Layer\n\nSystem Firmware\n\nComputer\nArchitecture\n\nACPI\n\nProcessor Cores\n\n\f3. Simpler Processor Design\n\u25fc Plenty of transistors but not enough power\n\u26ab Power becomes the ultimate currency in processor design\n\n\u25fc Complex logic for performance is power hungry\n\u26ab Not easy to eke out the last bit of performance out of a program\n\u26ab Diminishing returns on performance for power investment\n\n\u25fc Push towards simpler architectures:\n\u26ab Multi-cores: Run multiple programs (threads) on simple cores\n\u26ab GPUs: Run each instruction on massively parallel compute units\n\u26ab Caches: Memory caches are power efficient (low dynamic power)\n\n\fMemory Wall\n\u25fc Refers to both latency (ns) and bandwidth (GB/s)\n\u26ab CPU frequency and overall performance increased dramatically\n\u26ab Memory (DRAM) latency and bandwidth have lagged far behind\n\n\u25fc Why?\n\u26ab Limit on the number of CPU / DRAM pins that can be soldered on\n\n\u26ab DRAM manufacturers have traditionally prioritized capacity\n\u26ab DDR1 (1998): 1.6 GB/s \u2192 DDR4 (2014): 25.6 GB/s\n(Impressive? Not so much compared to CPU performance)\n\n\fMemory Wall\n\nSource: SC16 Invited Talk \u201c\u201cMemory Bandwidth and System Balance in HPC Systems\u201d by John D. McCalpin\n\n\u25fc FLOPS = floating point operations per second (performance)\n\n\fMemory Wall\n\u25fc Where did the Memory Wall push architecture?\n\u25fc Caches: If hit in cache, no need to go to memory\n\u26ab Caching reduces both data access latency/bandwidth\n\n\u25fc 3D-Stacked Memory: Stack CPU on top of memory\n\u26ab Drill vias, or holes, through silicon to bond CPU with memory\n\u26ab Through silicon vias (TSVs) have low latency / high bandwidth\n\n\fVariability\n\u25fc Variability: differences in speed of individual transistors\n\u26ab If fab can\u2019t ensure uniformity of transistors, speeds will differ\n\u26ab Speed differences mostly come from variations in Vth:\nlow Vth \u2192 cycle time \uf0f2 but leakage power \uf0f1\nhigh Vth \u2192 cycle time \uf0f1 but leakage power \uf0f2\n\n\u25fc If unlucky and a logic path has lots of slow transistors\n\u2192 CPU may miss clock cycle time if path is exercised\n\u2192 CPU must be discarded, since it malfunctions\n\u25fc If unlucky and a region has too many fast transistors\n\u2192 Region may generate too much heat due to low Vth\n\u2192 CPU must be discarded, due to overheating\n\u25fc Leads to low chip yield\n\n\fWafer Yield\n\n\u25fc Lower yield leads to higher production cost\n\n\fVariability\n\u25fc Where did Variability push architecture?\n\u25fc Product binning: Sell slower CPUs at a cheaper \u201cbin\u201d\n\u26ab And rate slower CPUs at a lower CPU frequency\n\u26ab Instead of discarding them as \u201cmalfunctioning\u201d\n\n\u25fc Multi-cores: Easy to disable one or two buggy cores\n\u26ab Compared to single core where subcomponents must be disabled\n\u26ab Used when one or two cores are extremely slow\n\n\u25fc Limited pipelining: pipelining exacerbates variability\n\u26ab With long stages, many transistors so tend to even each other out\n\u26ab With short stages, few transistors so probable all are slow\n\n\fIntel i9 Product Binning\nWhy the close to\n4X difference?\nClock difference\nis just 2X!\n\nProduced from\none wafer\n\nSource: https://www.techspot.com/article/2039-chip-binning/\n* TDP is calculated using the Base Clock frequency at a nominal supply voltage\n\n\fOpportunities for Speed Improvement\n\u25fc So Dennard Scaling is dead\n\u26ab Free CPU frequency gains are no longer there\n\n\u25fc And we are walled in by technology constraints\n\u26ab Power wall\n\u26ab Memory wall\n\u26ab Variability\n\u26ab\u2026\n\n\u25fc Where do architects go look for performance?\n\n\fImproving Execution Time\ninstructions\n\u25fc Execution time = program X\n\n\u25fc Improving\n\nseconds\ncycle\n\ncycles\nseconds\nX\ncycle\ninstructions\n\n:\n\n\u26ab Pipelining can lead to higher frequencies\ncycles\n\u25fc Improving instructions :\n\n\u26ab Caching can reduce cycles for memory instructions\n\u26ab Superscalars can execute multiple instructions per cycle\n\u26ab Multi-cores execute multi-instructions from multi-threads\n\ninstructions\n\u25fc Improving program :\n\n\u26ab GPUs are SIMD (Single Instruction Multiple Data) processors\n\n\fWhat about Other Performance Goals?\n\u25fc We talked a lot about execution speed\n\u25fc But there are other performance goals such as:\n\u26ab Energy efficiency\n\u26ab Reliability\n\u26ab Security\n\u26ab\u2026\n\n\u25fc In this class, we will mainly focus on speed\n\u26ab Not that other goals are not important\n\u26ab We will touch upon other goals when relevant\n\u26ab Performance will be used synonymously with speed\n\n\fTextbook Chapters\n\u25fc Please review Chapter 1 of the textbook.\n\n\f", "label": [[21, 43, "Concept"], [125, 147, "Concept"], [150, 172, "Concept"], [190, 205, "Concept"], [206, 218, "Concept"], [230, 245, "Concept"], [295, 323, "Concept"], [324, 346, "Concept"], [348, 369, "Concept"], [416, 426, "Concept"], [428, 448, "Concept"], [450, 453, "Concept"], [468, 479, "Concept"], [495, 504, "Concept"], [508, 514, "Concept"], [517, 528, "Concept"], [638, 648, "Concept"], [662, 674, "Concept"], [677, 689, "Concept"], [690, 702, "Concept"], [718, 730, "Concept"], [764, 777, "Concept"], [793, 805, "Concept"], [823, 828, "Concept"], [843, 846, "Concept"], [850, 861, "Concept"], [960, 971, "Concept"], [1089, 1094, "Concept"], [1177, 1190, "Concept"], [1193, 1205, "Concept"], [1270, 1278, "Concept"], [1281, 1293, "Concept"], [1439, 1448, "Concept"], [1457, 1471, "Concept"], [1565, 1598, "Concept"], [1600, 1604, "Concept"], [1687, 1691, "Concept"], [1696, 1712, "Concept"], [1790, 1795, "Concept"], [1844, 1849, "Concept"], [1913, 1922, "Concept"], [1938, 1951, "Concept"], [1954, 1966, "Concept"], [1986, 1998, "Concept"], [2031, 2048, "Concept"], [2051, 2063, "Concept"], [2075, 2080, "Concept"], [2137, 2150, "Concept"], [2155, 2168, "Concept"], [2234, 2246, "Concept"], [2257, 2271, "Concept"], [2353, 2367, "Concept"], [2370, 2374, "Concept"], [2393, 2409, "Concept"], [2439, 2449, "Concept"], [2454, 2464, "Concept"], [2493, 2497, "Concept"], [2514, 2518, "Concept"], [2520, 2562, "Concept"], [2578, 2594, "Concept"], [2809, 2828, "Concept"], [2886, 2890, "Concept"], [2913, 2937, "Concept"], [2977, 2982, "Concept"], [2985, 2990, "Concept"], [3256, 3267, "Concept"], [3292, 3299, "Concept"], [3319, 3323, "Concept"], [3383, 3390, "Concept"], [3392, 3405, "Concept"], [3410, 3415, "Concept"], [3431, 3444, "Concept"], [3448, 3459, "Concept"], [3477, 3484, "Concept"], [3494, 3503, "Concept"], [3517, 3526, "Concept"], [3576, 3582, "Concept"], [3584, 3588, "Concept"], [3590, 3597, "Concept"], [3602, 3611, "Concept"], [3674, 3678, "Concept"], [3711, 3715, "Concept"], [3772, 3776, "Concept"], [3796, 3800, "Concept"], [3875, 3886, "Concept"], [3991, 3996, "Concept"], [3999, 4035, "Concept"], [4052, 4063, "Concept"], [4080, 4091, "Concept"], [4113, 4119, "Concept"], [4131, 4136, "Concept"], [4155, 4161, "Concept"], [4164, 4171, "Concept"], [4197, 4204, "Concept"], [4205, 4214, "Concept"], [4218, 4235, "Concept"], [4257, 4263, "Concept"], [4321, 4327, "Concept"], [4330, 4350, "Concept"], [4352, 4356, "Concept"], [4367, 4374, "Concept"], [4382, 4391, "Concept"], [4394, 4405, "Concept"], [4408, 4419, "Concept"], [5005, 5015, "Concept"], [5018, 5029, "Concept"], [5079, 5090, "Concept"], [5103, 5114, "Concept"], [5136, 5151, "Concept"], [5227, 5236, "Concept"], [5289, 5300, "Concept"], [5455, 5473, "Concept"], [5475, 5485, "Concept"], [5498, 5509, "Concept"], [5651, 5666, "Concept"], [5816, 5819, "Concept"], [5878, 5892, "Concept"], [5936, 5951, "Concept"], [5971, 5980, "Concept"], [6034, 6056, "Concept"], [6059, 6069, "Concept"], [6072, 6083, "Concept"], [6086, 6097, "Concept"], [6161, 6175, "Concept"], [6191, 6205, "Concept"], [6289, 6299, "Concept"], [6319, 6330, "Concept"], [6368, 6375, "Concept"], [6420, 6432, "Concept"], [6479, 6490, "Concept"], [6576, 6580, "Concept"], [6585, 6589, "Concept"], [6591, 6623, "Concept"], [6698, 6713, "Concept"], [6765, 6782, "Concept"], [6785, 6796, "Concept"], [6799, 6807, "Concept"]], "Comments": []}