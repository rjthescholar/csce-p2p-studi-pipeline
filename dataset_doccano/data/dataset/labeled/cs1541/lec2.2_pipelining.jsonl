{"id": 104, "segment": ["train_set", "labeled"], "course": "cs1541", "lec": "lec2.2_pipelining", "text": "Processor Pipelining\nCS 1541\nWonsun Ahn\n\n\fPipelining Basics\n\n2\n\n\fImproving Washer / Dryer / Closet Utilization\n\n\u25cf If you work on loads of laundry one by one, you only get ~33% utilization\n\u25cf If you form an \u201cassembly line\u201d, you achieve ~100% utilization!\n\n3\n\n\fMulti-cycle instruction execution\n\u25cf Let's watch how an instruction flows through the datapath.\n\nadd\nMemory\n\nClock!\n\nID\nSet all control signals...\n\nIns. Decoder\n\nIF\n\nClock!\n\nRegister\nFile\n\nEX\n\nClock!\n\nMEM\n\nAdd...\n\nALU\n\nMemory\n\nClock!\nData flows back to registers...\n\nWB\n4\n\n\fPipelined instruction execution\n\u25cf Pipelining allows one instruction to be fetched each cycle!\n\nadd\nsub\nsw\nMemory\n\nID\nIns. Decoder\n\nIF\n\nRegister\nFile\n\nEX\n\nALU\n\nMEM\n\nMemory\n\nWB\n5\n\n\fPipelining Timeline\n\u25cf This type of parallelism is called pipelined parallelism.\nCycle\n\n1\n\n2\n\n3\n\n4\n\n5\n\nadd t0,t1,t2\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nadd t3,t4,t5\n\nadd s0,s1,s2\n\nadd s3,s4,s5\n\n6\n\n7\n\n8\n\nWB\n\n6\n\n\fA Pipelined Implementation is even Faster!\n\u25cf Again each instruction takes different number of cycles to complete\no lw takes 5 cycles: IF/ID/EX/MEM/WB\no add takes 4 cycles: IF/ID/EX/WB\n\u25cf If each stage takes 1 ns each:\no lw takes 5 ns and add takes 4 ns\nQ) The average instruction execution time (given 100 instructions)?\nA) (99 ns + 5 ns) / 100 = 1.04 ns\no Assuming last instruction is a lw (a 5-cycle instruction)\no A ~5X speed up from single cycle!\n\n7\n\n\fPipelined vs. Multi-cycle vs. Single-cycle\n\u25cf What happened to the three components of performance?\ninstructions\nX\nprogram\n\ncycles\ninstruction\n\nArchitecture\n\nInstructions\n\nCPI\n\nCycle Time\n(1/F)\n\nSingle-cycle\n\nSame\n\n1\n\n5 ns\n\nMulti-cycle\n\nSame\n\n4~5\n\n1 ns\n\nPipelined\n\nSame\n\n1\n\n1 ns\n\nX\n\nseconds\ncycle\n\n\u25cf Compared to single-cycle, pipelining improves clock cycle time\no Or in other words CPU clock frequency\no The deeper the pipeline, the higher the frequency will be\n* Caveat: latch delay and unbalanced stages can increase cycle time\n8\n\n\fHow about the control signals?\n\nMemory\n\nRegister\nFile\n\nALU\n\nMEM\n\nWB\n\nEX\n\nMEM/WB\n\nID\nIns. Decoder\n\nIF\n\nEX/MEM/WB\n\n\u25cf A new instruction is decoded at every cycle!\n\u25cf Control signals must be passed along with the data at each stage\n\nMemory\n\nWB\n9\n\n\fPipeline Hazards\n\n10\n\n\fPipeline Hazards\n\u25cf For pipelined CPUs, we said CPI is practically 1\no But that depends entirely on having the pipeline filled\no In real life, there are hazards that prevent 100% utilization\n\u25cf Pipeline Hazard\no When the next instruction cannot execute in the following cycle\no Hazards introduce bubbles (delays) into the pipeline timeline\n\u25cf Architects have some tricks up their sleeves to avoid hazards\n\u25cf But first let\u2019s briefly talk about the three types of hazards:\nStructural hazard, Data hazard, Control Hazard\n\n11\n\n\fStructural Hazards\n\u25cf Two instructions need to use the same hardware at the same time.\nCycle\n\n1\n\n2\n\n3\n\n4\n\n5\n\nlw t0,0($0)\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nlw t1,4($0)\n\nlw t2,8($0)\n\nlw t3,12($0)\n\n6\n\n7\n\n8\n\nWB\n\n12\n\n\fData Hazards\n\u25cf An instruction depends on the output of a previous one.\nCycle\n\n1\n\n2\n\n3\n\n4\n\n5\n\nadd t0,t1,t2\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nsub s0,t0,t1\n\n6\n\n7\n\n8\n\nWB\n\n\u25cf sub must wait until add's WB phase is over before doing its ID phase\nadd t0,t1,t2\n\nsub s0,t0,t1\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nbubble\n\nbubble\n\nbubble\n\nID\n\nEX\n\nMEM\n13\n\n\fControl Hazards\n\u25cf You don't know the outcome of a conditional branch.\nCycle\n\n1\n\n2\n\n3\n\n4\n\n5\n\nbeq t0,$0,end\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nadd t0,t1,t2\n\n6\n\n7\n\n8\n\nWB\n\n\u25cf add must wait until beq\u2019s EX phase is over before its IF phase\nbeq t0,$0,end\n\nadd t0,t1,t2\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nbubble\n\nbubble\n\nIF\n\nID\n\nEX\n\nWB\n14\n\n\fDealing with Hazards\n\u25cf Pipeline must be controlled so that hazards don\u2019t cause malfunction\n\u25cf Who is in charge of that? You have a choice.\n1. Compiler can avoid hazards by inserting nops\n\u00a7 Insert a nop where compiler thinks a hazard would happen\n2. CPU can internally avoid hazards using a hazard detection unit\n\u00a7 If structural/data hazard, pipeline stalled until resolved\n\u00a7 If control hazard, pipeline flushed of wrong path instructions\n\n15\n\n\fCompiler avoiding a data hazard\n\u25cf The nops flow through the pipeline not doing any work\nCycle\n\n1\n\n2\n\n3\n\n4\n\n5\n\nadd t0,t1,t2\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nIF\n\nID\n\nEX\n\nMEM\n\nnop\n\nnop\n\nnop\n\nsub s0,t0,t1\n\n6\n\n7\n\n8\n\n16\n\n\fCompiler avoiding a control hazard\n\u25cf The nops give time for condition to resolve before instruction fetch\nCycle\n\n1\n\n2\n\n3\n\n4\n\n5\n\nbeq t0,$0,end\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nIF\n\nID\n\nEX\n\nMEM\n\nnop\n\nnop\n\nadd t0,t1,t2\n\n6\n\n7\n\n8\n\nWB\n\n17\n\n\fHazard Detection Unit\nCreates bubbles by zeroing all control signals,\nthereby creating a nop instruction\n\nFreezes IF and ID until\nhazard is resolved\n18\n\n\fHazard Detection Unit avoiding a data hazard\n\u25cf Suppose we have an add that depends on an lw.\n\nsub\nadd\nlw\n\nID\nIns. Decoder\n\nIF\n\nEX\n\nMEM\n\nWAIT!\n\nMemory\n\nRegister\nFile\n\nALU\n\nMemory\n\nWB\n19\n\n\fStructural / Data Hazards cause stalls\n\u25cf If HDU detects a structural or data hazard, it does the following:\no It stops fetching instructions (doesn't update the PC).\no It stops clocking the pipeline registers for the stalled stages.\no The stages after the stalled instructions are filled with nops.\n\u00a7 Change control signals to 0 using the mux!\no In this way, all following instructions will be stalled\n\u25cf When structural or data hazard is resolved\no HDU resumes instruction fetching and clocking of stalled stages\n\u25cf But what about control hazards?\no Instructions in wrong path are already in pipeline!\no Need to flush these instructions\n20\n\n\fControl Hazard Example\n\u25cf Supposed we had this for loop followed by printf(\u201cdone\u201d):\n\nfor(s0 = 0 .. 10)\nprint(s0);\nprintf(\"done\");\nBy the time s0, 10\nare compared at blt\nEX stage, the CPU\nwould have already\nfetched la and jal!\n\nli\n\ns0, 0\n\ntop:\nmove a0, s0\njal print\naddi s0, s0, 1\nblt s0, 10, top\nla\njal\n\na0, done_msg\nprintf\n\n21\n\n\fWhat's a flush?\n\u25cf A pipeline flush removes all wrong path instructions from pipeline\nTime\n\n0\n\n1\n\n2\n\n3\n\n4\n\nblt s0,10,top\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nP OW\n\nIF\n\nBO\n\nla a0,done_msg\n\njal printf\ns0 < 10...\nOOPS!\nmove a0,s0\n\n5\n\n6\n\n7\n\nEX\n\nMEM\n\nWB\n\nOM\n\nIF\n\nID\n\n22\n\n\fHazard Detection Unit avoiding a control hazard\n\u25cf Let's watch the previous example.\n\nmove\nblt\njal\nla\nMemory\n\nID\nnop\n\nIns. Decoder\n\nIF\n\nEX\n\nMEM\n\nnop\nRegister\nFile\n\nALU\n\nMemory\n\nWB\n23\n\n\fControl Hazards cause flushes\n\u25cf If a control hazard is detected due to a branch instruction:\no Any \"newer\" instructions (those already in the pipeline)\n\u2192 transformed into nops.\no Any \"older\" instructions (those that came BEFORE the branch)\n\u2192 left alone to finish executing as normal.\n\n24\n\n\fPerformance penalty of pipeline stalls\n\u25cf Remember the three components of performance:\ninstructions\nX\nprogram\n\ncycles\ninstruction\n\nX\n\nseconds\ncycle\n\nArchitecture\n\nInstructions\n\nCPI\n\nCycle Time (1/F)\n\nSingle-cycle\n\nSame\n\n1\n\n5 ns\n\nIdeal 5-stage pipeline\n\nSame\n\n1\n\n1 ns\n\nPipeline w/ stalls\n\nSame\n\n2\n\n1 ns\n\n\u25cf Pipelining increases clock frequency proportionate to depth\n\u25cf But stalls increase CPI (cycles per instruction)\no If stalls prevent new instructions from being fetched half the time,\nthe CPU will have a CPI of 2 \u2192 Only 2.5X speed up (instead of 5X)\n\u25cf We\u2019d like to avoid this penalty if possible!\n25\n\n\fCompiler nops vs. CPU Hazard Detection Unit\n\u25cf Limitations of compiler nops\no Compiler must make assumptions about processor design\n\u00a7 That means processor design must become part of ISA\n\u00a7 What if that design is no longer ideal in future generations?\no Length of MEM stage is very hard to predict by the compiler\n\u00a7 Until now we assumed MEM takes a uniform one cycle\n\u00a7 But remember what we said about the Memory Wall?\n\u00a7 MEM isn\u2019t uniform really and sometimes hundreds of cycles\n\u25cf But compiler nops is very energy-efficient\no Hazard Detection Unit can be power hungry\n\u00a7 A lot of long wires controlling remote parts of the CPU\n\u00a7 Adds to the Power Wall problem\no Compiler scheduling via nops removes need for HDU\n26", "label": [[0, 20, "Concept"], [42, 52, "Concept"], [358, 364, "Concept"], [374, 376, "Concept"], [405, 417, "Concept"], [419, 421, "Concept"], [423, 428, "Concept"], [431, 444, "Concept"], [446, 448, "Concept"], [450, 455, "Concept"], [458, 461, "Concept"], [471, 474, "Concept"], [476, 482, "Concept"], [484, 489, "Concept"], [524, 526, "Concept"], [531, 540, "Concept"], [565, 575, "Concept"], [637, 643, "Concept"], [645, 647, "Concept"], [648, 660, "Concept"], [662, 664, "Concept"], [666, 679, "Concept"], [681, 683, "Concept"], [685, 688, "Concept"], [690, 693, "Concept"], [695, 701, "Concept"], [703, 705, "Concept"], [710, 720, "Concept"], [745, 756, "Concept"], [767, 788, "Concept"], [826, 828, "Concept"], [830, 832, "Concept"], [834, 836, "Concept"], [838, 841, "Concept"], [843, 845, "Concept"], [847, 849, "Concept"], [851, 853, "Concept"], [855, 857, "Concept"], [859, 862, "Concept"], [864, 866, "Concept"], [868, 870, "Concept"], [872, 874, "Concept"], [876, 878, "Concept"], [880, 883, "Concept"], [885, 887, "Concept"], [889, 891, "Concept"], [893, 895, "Concept"], [897, 899, "Concept"], [901, 904, "Concept"], [957, 959, "Concept"], [967, 976, "Concept"], [1059, 1065, "Concept"], [1091, 1097, "Concept"], [1099, 1101, "Concept"], [1102, 1104, "Concept"], [1105, 1107, "Concept"], [1108, 1111, "Concept"], [1112, 1114, "Concept"], [1129, 1135, "Concept"], [1137, 1139, "Concept"], [1140, 1142, "Concept"], [1143, 1145, "Concept"], [1146, 1148, "Concept"], [1420, 1429, "Concept"], [1434, 1445, "Concept"], [1450, 1462, "Concept"], [1506, 1517, "Concept"], [1591, 1594, "Concept"], [1596, 1606, "Concept"], [1614, 1626, "Concept"], [1643, 1654, "Concept"], [1673, 1682, "Concept"], [1731, 1743, "Concept"], [1745, 1755, "Concept"], [1765, 1781, "Concept"], [1806, 1821, "Concept"], [1839, 1847, "Concept"], [1864, 1873, "Concept"], [1968, 1983, "Concept"], [1986, 1992, "Concept"], [1994, 2007, "Concept"], [2009, 2012, "Concept"], [2014, 2017, "Concept"], [2019, 2021, "Concept"], [2023, 2025, "Concept"], [2027, 2030, "Concept"], [2031, 2033, "Concept"], [2035, 2037, "Concept"], [2038, 2050, "Concept"], [2052, 2054, "Concept"], [2056, 2058, "Concept"], [2059, 2062, "Concept"], [2063, 2065, "Concept"], [2090, 2097, "Concept"], [2107, 2112, "Concept"], [2116, 2131, "Concept"], [2182, 2188, "Concept"], [2190, 2192, "Concept"], [2197, 2213, "Concept"], [2220, 2236, "Concept"], [2243, 2252, "Concept"], [2330, 2338, "Concept"], [2372, 2379, "Concept"], [2412, 2427, "Concept"], [2488, 2493, "Concept"], [2496, 2503, "Concept"], [2514, 2521, "Concept"], [2523, 2529, "Concept"], [2540, 2548, "Concept"], [2614, 2621, "Concept"], [2678, 2685, "Concept"], [2687, 2704, "Concept"], [2706, 2717, "Concept"], [2719, 2733, "Concept"], [2740, 2758, "Concept"], [2826, 2831, "Concept"], [2861, 2863, "Concept"], [2865, 2867, "Concept"], [2869, 2871, "Concept"], [2873, 2876, "Concept"], [2878, 2880, "Concept"], [2882, 2884, "Concept"], [2886, 2888, "Concept"], [2890, 2892, "Concept"], [2894, 2897, "Concept"], [2899, 2901, "Concept"], [2903, 2905, "Concept"], [2907, 2909, "Concept"], [2911, 2913, "Concept"], [2915, 2918, "Concept"], [2920, 2922, "Concept"], [2924, 2926, "Concept"], [2928, 2930, "Concept"], [2932, 2934, "Concept"], [2936, 2939, "Concept"], [2990, 2992, "Concept"], [2999, 3011, "Concept"], [3070, 3075, "Concept"], [3106, 3108, "Concept"], [3110, 3112, "Concept"], [3114, 3116, "Concept"], [3118, 3121, "Concept"], [3123, 3125, "Concept"], [3127, 3129, "Concept"], [3131, 3133, "Concept"], [3135, 3137, "Concept"], [3139, 3142, "Concept"], [3167, 3169, "Concept"], [3199, 3201, "Concept"], [3233, 3235, "Concept"], [3270, 3272, "Concept"], [3274, 3276, "Concept"], [3278, 3280, "Concept"], [3282, 3285, "Concept"], [3287, 3289, "Concept"], [3291, 3293, "Concept"], [3295, 3301, "Concept"], [3303, 3309, "Concept"], [3311, 3317, "Concept"], [3319, 3321, "Concept"], [3323, 3325, "Concept"], [3327, 3330, "Concept"], [3336, 3351, "Concept"], [3406, 3411, "Concept"], [3443, 3445, "Concept"], [3447, 3449, "Concept"], [3451, 3453, "Concept"], [3455, 3458, "Concept"], [3460, 3462, "Concept"], [3464, 3466, "Concept"], [3468, 3470, "Concept"], [3472, 3474, "Concept"], [3476, 3479, "Concept"], [3504, 3506, "Concept"], [3536, 3538, "Concept"], [3564, 3566, "Concept"], [3602, 3604, "Concept"], [3606, 3608, "Concept"], [3610, 3612, "Concept"], [3614, 3617, "Concept"], [3619, 3621, "Concept"], [3623, 3629, "Concept"], [3631, 3637, "Concept"], [3639, 3641, "Concept"], [3643, 3645, "Concept"], [3647, 3649, "Concept"], [3651, 3653, "Concept"], [3672, 3679, "Concept"], [3682, 3690, "Concept"], [3718, 3725, "Concept"], [3800, 3808, "Concept"], [3819, 3826, "Concept"], [3840, 3844, "Concept"], [3856, 3859, "Concept"], [3884, 3890, "Concept"], [3932, 3939, "Concept"], [3948, 3969, "Concept"], [3975, 3985, "Concept"], [3986, 3997, "Concept"], [3999, 4007, "Concept"], [4008, 4015, "Concept"], [4036, 4050, "Concept"], [4052, 4060, "Concept"], [4061, 4068, "Concept"], [4122, 4133, "Concept"], [4140, 4144, "Concept"], [4162, 4170, "Concept"], [4190, 4195, "Concept"], [4226, 4228, "Concept"], [4230, 4232, "Concept"], [4234, 4236, "Concept"], [4238, 4241, "Concept"], [4243, 4245, "Concept"], [4247, 4253, "Concept"], [4255, 4261, "Concept"], [4263, 4269, "Concept"], [4271, 4277, "Concept"], [4279, 4285, "Concept"], [4287, 4293, "Concept"], [4295, 4301, "Concept"], [4303, 4309, "Concept"], [4311, 4317, "Concept"], [4319, 4325, "Concept"], [4327, 4333, "Concept"], [4335, 4341, "Concept"], [4343, 4349, "Concept"], [4351, 4357, "Concept"], [4359, 4365, "Concept"], [4367, 4369, "Concept"], [4371, 4373, "Concept"], [4375, 4377, "Concept"], [4379, 4382, "Concept"], [4384, 4387, "Concept"], [4389, 4392, "Concept"], [4394, 4397, "Concept"], [4447, 4461, "Concept"], [4468, 4472, "Concept"], [4515, 4532, "Concept"], [4533, 4538, "Concept"], [4570, 4572, "Concept"], [4574, 4576, "Concept"], [4578, 4580, "Concept"], [4582, 4585, "Concept"], [4587, 4589, "Concept"], [4591, 4597, "Concept"], [4599, 4605, "Concept"], [4607, 4613, "Concept"], [4615, 4621, "Concept"], [4623, 4629, "Concept"], [4631, 4637, "Concept"], [4639, 4645, "Concept"], [4647, 4653, "Concept"], [4655, 4661, "Concept"], [4663, 4669, "Concept"], [4671, 4673, "Concept"], [4675, 4677, "Concept"], [4679, 4681, "Concept"], [4683, 4686, "Concept"], [4688, 4691, "Concept"], [4693, 4696, "Concept"], [4721, 4723, "Concept"], [4730, 4751, "Concept"], [4760, 4767, "Concept"], [4783, 4798, "Concept"], [4819, 4822, "Concept"], [4844, 4846, "Concept"], [4851, 4853, "Concept"], [4860, 4866, "Concept"], [4884, 4905, "Concept"], [4917, 4928, "Concept"], [4990, 4992, "Concept"], [4993, 5005, "Concept"], [5007, 5009, "Concept"], [5011, 5013, "Concept"], [5015, 5018, "Concept"], [5027, 5033, "Concept"], [5035, 5048, "Concept"], [5050, 5053, "Concept"], [5055, 5061, "Concept"], [5063, 5065, "Concept"], [5071, 5096, "Concept"], [5103, 5109, "Concept"], [5115, 5118, "Concept"], [5129, 5154, "Concept"], [5190, 5198, "Concept"], [5232, 5234, "Concept"], [5248, 5256, "Concept"], [5261, 5269, "Concept"], [5288, 5295, "Concept"], [5327, 5334, "Concept"], [5364, 5368, "Concept"], [5379, 5394, "Concept"], [5465, 5472, "Concept"], [5480, 5505, "Concept"], [5520, 5523, "Concept"], [5544, 5552, "Concept"], [5557, 5565, "Concept"], [5569, 5576, "Concept"], [5601, 5616, "Concept"], [5662, 5670, "Concept"], [5682, 5687, "Concept"], [5712, 5726, "Concept"], [5880, 5882, "Concept"], [5917, 5924, "Concept"], [6050, 6055, "Concept"], [6061, 6075, "Concept"], [6117, 6125, "Concept"], [6162, 6164, "Concept"], [6166, 6168, "Concept"], [6170, 6172, "Concept"], [6174, 6177, "Concept"], [6179, 6181, "Concept"], [6183, 6185, "Concept"], [6187, 6189, "Concept"], [6197, 6199, "Concept"], [6270, 6272, "Concept"], [6274, 6277, "Concept"], [6279, 6281, "Concept"], [6287, 6289, "Concept"], [6291, 6293, "Concept"], [6300, 6321, "Concept"], [6333, 6347, "Concept"], [6401, 6407, "Concept"], [6409, 6411, "Concept"], [6412, 6415, "Concept"], [6417, 6429, "Concept"], [6431, 6433, "Concept"], [6435, 6437, "Concept"], [6439, 6442, "Concept"], [6444, 6447, "Concept"], [6448, 6461, "Concept"], [6463, 6466, "Concept"], [6468, 6474, "Concept"], [6476, 6478, "Concept"], [6483, 6499, "Concept"], [6506, 6513, "Concept"], [6521, 6535, "Concept"], [6626, 6634, "Concept"], [6655, 6659, "Concept"], [6773, 6812, "Concept"], [6885, 6891, "Concept"], [6951, 6954, "Concept"], [6974, 6986, "Concept"], [7003, 7025, "Concept"], [7042, 7050, "Concept"], [7054, 7060, "Concept"], [7079, 7089, "Concept"], [7100, 7115, "Concept"], [7145, 7151, "Concept"], [7161, 7164, "Concept"], [7166, 7188, "Concept"], [7195, 7201, "Concept"], [7238, 7245, "Concept"], [7281, 7284, "Concept"], [7388, 7392, "Concept"], [7401, 7422, "Concept"], [7449, 7453, "Concept"], [7640, 7643, "Concept"], [7713, 7716, "Concept"], [7737, 7742, "Concept"], [7781, 7792, "Concept"], [7796, 7799, "Concept"], [7847, 7853, "Concept"], [7869, 7873, "Concept"], [7901, 7922, "Concept"], [8015, 8025, "Concept"], [8060, 8064, "Concept"], [8082, 8085, "Concept"]], "Comments": []}