{"id": 103, "segment": ["train_set", "labeled"], "course": "cs1541", "lec": "lec2.3_optimizing_pipeline_hazards", "text": "Optimizing Pipeline Hazards\nCS 1541\nWonsun Ahn\n\n\fSolving Structural Hazards\n\n2\n\n\fStructural Hazard on Memory\n\u25cf Two instructions need to use the same hardware at the same time.\nTime\n\n0\n\n1\n\n2\n\n3\n\n4\n\nlw t0,0($0)\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nlw t1,4($0)\n\nlw t2,8($0)\n\nlw t3,12($0)\n\n5\n\n6\n\n7\n\nWB\n\n3\n\n\fWhat could we do??\n\u25cf Two people need to use one sink at the same time\no Well, in this case, it\u2019s memory but same idea\n\n4\n\n\fWe can do something similar!\n\u25cf One option is to wait (a.k.a. stall).\nTime\n\n0\n\n1\n\n2\n\n3\n\n4\n\nlw t0,0($0)\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nYou know\nwhat\u2019s worse?\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nlw t2,8($0)\n\nIF\n\nID\n\nEX\n\nMEM\n\nlw t3,12($0)\n\nThe pattern is\ngoing to repeat\n\nWAIT!\n\nIF\nWAIT!\n\nWAIT!\n\nlw t1,4($0)\n\n5\n\n6\n\n7\n\nWB\n\nIF\n\n5\n\n\fOr we could throw in more hardware!\n\u25cf For less commonly used CPU resources, stalling can work fine\n\u25cf But memory (and some other things) is used CONSTANTLY\n\u25cf How do the bathrooms solve this problem?\no Throw in lots of sinks!\no In other words, throw more hardware at the problem!\n\u25cf Memory's a resource with a lot of contention\no So have two memories, one for instructions, and one for data!\no Not literally but CPUs have separate instruction and data caches\n\n6\n\n\fStructural Hazard removed with two Memories\n\u25cf With separate i-cache and d-cache, MEM and IF can work in parallel\nTime\n\n0\n\n1\n\n2\n\n3\n\n4\n\nlw t0,0($0)\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nlw t1,4($0)\n\nlw t2,8($0)\n\nlw t3,12($0)\n\n5\n\n6\n\n7\n\nWB\n\n7\n\n\fStructural Hazard removed with two Memories\n\u25cf But is that the only hardware duplication going on here?\n\nInstruction\nMemory\n\nIns. Decoder\n\nPC\n\nPCSrc\n\n+\n\n4\n\n+\n\nimm field\n\ndst\nsrc1\nsrc2\n\nRegDataSrc\n\nData\nMemory\n\nRegister\nFile\n\nRegWrite\n\nimm field\n\nsxt\n\nMemWrite\n\nALUSrc\n\nALUOp\n\n8\n\n\fStructural Hazards removed with Multiple Adders\n\u25cf Why do we need 3 adders? To avoid stalls due to contention on ALU!\nEX Stage\n\nInstruction\nMemory\n\nIns. Decoder\n\nPC\n\nPCSrc\n\n+\n\n4\n\n+\n\nimm field\n\nIF Stage dst\nsrc1\nsrc2\n\nRegDataSrc\n\nData\nMemory\n\nRegister\nFile\n\nRegWrite\n\nimm field\n\nsxt\n\nMemWrite\n\nALUSrc\n\nALUOp\n\n9\n\n\fSolving Structural Hazards\n\u25cf There are mainly two ways to throw more hardware at the problem\n\n1. Duplicate contentious resource\no One memory cannot sustain MEM + IF stage at same cycle\n\u2192 Duplicate into one instruction memory, one data memory\no One ALU cannot sustain IF + EX stage at same cycle\n\u2192 Duplicate into one ALU and two simple adders\n2. Add ports to a single shared memory resource\no Port: Circuitry that allows either read or write access to memory\no If current number of ports cannot sustain rate of access per cycle\n\u2192 Add more ports to memory structure for simultaneous access\n\n10\n\n\fTwo Register Read Ports\n\u25cf By adding more MUXes, you can add even more read ports\n\n11\n\n\fOne Register Write Port\n\u25cf By adding more decoders, you can add more write ports\n\n12\n\n\fTwo Register Write + Two Register Read Ports\n\nDave Tweed (https://electronics.stackexchange.com/users/11683/dave-tweed),\nBuild A Two Port Write and Two Port Read Register File with 4 Registers, URL (version: 2017-02-21):\nhttps://electronics.stackexchange.com/q/273002\n\n13\n\n\fTwo read ports and one write port is the minimum\n\u25cf 2 read ports for 2 source registers, 1 write port for dest register\no Enough to sustain one ID and one WB stage per cycle\no Enough to sustain CPI = 1 (or in other words IPC = 1)\n\u25cf But what if we want an IPC > 1? (a.k.a superscalar processor)\no Must sustain more than one ID / WB stage per cycle\no Need more register read ports and write ports!\no Not only registers, (cache) memory would need more ports too!\n\u2192 Muxes, decoders increase critical path (lowers frequency)\n\u2192 Extra circuitry consumes more power\n\n\u25cf We\u2019ll talk more about this when we discuss superscalars\n\n14\n\n\fSolving Data Hazards\n\n15\n\n\fData Hazards\n\u25cf An instruction depends on the output of a previous one.\nTime\n\n0\n\n1\n\n2\n\n3\n\n4\n\nadd t0,t1,t2\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nsub s0,t0,t1\n\n5\n\n6\n\n7\n\nWB\n\n\u25cf When does add finish computing its sum?\n\u25cf Well then... why not just use the sum when we need it?\n\n16\n\n\fSolution 1: Data Forwarding\n\u25cf Since we've pipelined control signals, we can check if instructions in\nthe pipeline depend on each other (see if registers match).\n\u25cf If we detect any dependencies, we can forward the needed data.\nTime\n\n0\n\n1\n\n2\n\n3\n\n4\n\nadd t0,t1,t2\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nsub s0,t0,t1\n\n5\n\n6\n\n7\n\nWB\n\n\u25cf This handles one kind of data forwarding...\n\u25cf Where else can data come from and be written into registers?\n\u25cf Memory!\n17\n\n\fData Forwarding from Memory\n\u25cf Well memory accesses happen a cycle later...\n\u25cf What are we going to have to do?\nTime\n\n0\n\n1\n\n2\n\n3\n\n4\n\nlw t0,0(t4)\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nsub s0,t0,t1\n\nWAIT!\n\nEX\n\n5\n\n6\n\nMEM\n\nWB\n\n7\n\n\u25cf This kind of stall is unavoidable in our current pipeline\n\n18\n\n\fForwarding Unit and Use-after-load-hazard\nIf dependent on MemRead (load) instruction,\neven forwarding unit can\u2019t avoid stall\n\n19\n\n\fForwarding Unit\n\u25cf Just like the HDU, the Forwarding Unit is power hungry\n\n\u25cf Number of forwarding wires \u221d (pipeline stages)2\no Why the quadratic relationship?\no Per pipeline stage, N stages after it from which data is forwarded\n\u25aa In previous picture, see number of inputs to MUX before ALU!\no And there are N stages to which data must be forwarded\n\u25aa In previous picture, only one EX stage is shown,\nbut if there are multiple stages, need MUXes in all those stages\n\u25cf Deep pipelining has diminishing returns on power investment\no Cycle time improves by a factor of N\no Power consumption increases by a factor of N2 (or more)\no Not the only problem with deep pipelining that we will see\n20\n\n\fSolution 2: Avoid stalls by reordering\n\u25cf Let\u2019s say the following is your morning routine (2 hours total)\n1. Have laundry running in washing machine (30 minutes)\n2. Have laundry running in dryer (30 minutes)\n3. Have some tea boiling in the pot (30 minutes)\n4. Drink tea (30 minutes)\n\n1\n2\n3\n\n4\n\u25cf Can you make this shorter? Yes! (1 hour total)\n1. Have washing machine running and 3. Tea boiling (30 minutes)\n2. Have dryer running and 4. Drink tea (30 minutes)\n\n\u25cf How? By simply by reordering our actions\no Steps 1 \u2192 2 and 3 \u2192 4 have data dependencies\no Other steps can be freely reordered with each other\n\n1\n\n3\n\n2\n\n4\n\n21\n\n\fData Hazard removed through Compiler Reordering\n\u25cf If the compiler has knowledge of how the pipeline works, it can\nreorder instructions to let loads complete before using their data.\nTime\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\nlw t0,0(t4)\n\nsub s0,t0,t1\n\nlw t2,4(t4)\n\nsub s1,t2,t3\n\n22\n\n\fData Hazard removed through Compiler Reordering\n\u25cf If the compiler has knowledge of how the pipeline works, it can\nreorder instructions to let loads complete before using their data.\nTime\n\n0\n\n1\n\n2\n\n3\n\n4\n\nlw t0,0(t4)\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nlw t2,4(t4)\nsub s0,t0,t1\n\nsub s1,t2,t3\n\n5\n\n6\n\n7\n\nWB\n\n23\n\n\fLimits of Static Scheduling\n\u25cf Reordering done by the compiler is called static scheduling\n\n\u25cf Static scheduling is a powerful tool but is in some ways limited\no Again, compiler must make assumptions about pipeline\n\u25aa Length of MEM stage is very hard to predict by the compiler\n\u25aa Remember the Memory Wall?\no Data dependencies are hard to figure out by a compiler\n\u25aa When data is in registers, trivial to figure out\n\u25aa When data is in memory locations, more difficult. Given:\nlw t0,0(t4)\nsw s0,8(t0) We want to reorder to remove the data hazard.\nlw t2,4(t4) But what if 8(t0) and 4(t4) are the same addresses?\n\nThis involves pointer analysis, a notoriously difficult analysis!\n24\n\n\fDynamic scheduling is another option\n\u25cf Dynamic scheduling is scheduling done by the CPU\n\n\u25cf It doesn\u2019t have the limitations of static scheduling\no It doesn\u2019t have to predict memory latency\n\u25aa It can adapt as things unfold\no It\u2019s easy to figure out data dependencies, even memory ones\n\u25aa At runtime, addresses of 8(t0) and 4(t4) are easily calculated\n\u25cf But at runtime it uses lots of power for the data analysis\no \u2026 which again causes problems with the Power Wall\no But more on this later\n\n25\n\n\fSolving Control Hazards\n\n26\n\n\fLoops\n\u25cf Loops happen all the time in programs.\n\nfor(s0 = 0 .. 10)\nprint(s0);\nprintf(\"done\");\nHow often does this\nblt instruction go to\ntop? How often does\nit go to the following\nla instruction?\n\nli\n\ns0, 0\n\ntop:\nmove a0, s0\njal print\naddi s0, s0, 1\nblt s0, 10, top\nla\njal\n\na0, done_msg\nprintf\n\n27\n\n\fPipeline Flushes at Every Loop Iteration\n\u25cf The pipeline must be flushed every time the code loops back!\nTime\n\nblt s0,10,top\n\nla a0,done_msg\n\njal printf\ns0 < 10...\nOOPS!\nmove a0,s0\n\n0\n\n1\n\n2\n\n3\n\n4\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nIF\n\nID\n\n5\n\n6\n\n7\n\nEX\n\nMEM\n\nWB\n\nIF\n\n28\n\n\fPerformance Impact from Control Hazards\n\u25cf Frequency of flushes \u221d frequency of branches\no If we have a tight loop, branches happen every few instructions\no Typically, branches account for 15~20% of all instructions\n\u25cf Penalty from one flush \u221d depth of pipeline\no Number of flushed instructions == distance from IF to EX\no What if 3 IF stages, 4 ID stages, and 3 EX stages? Penalty == 10!\n\n\u25cf Current architectures can have more than 20 stages!\no May spend more time just flushing instructions than doing work!\no Another reason why deep pipelines are problematic\n\n29\n\n\fPerformance Impact from Control Hazards\n\u25cf CPI = CPInch + a * p * K\n\no CPInch : CPI with no control hazard\no a : fraction of branch instructions in the instruction mix\no p : probability a branch is actually taken\no K : penalty per pipeline flush\n\nExample: If 20% of instructions are branches and the probability that a\nbranch is taken is 50%, and pipeline flush penalty 7 cycles, then:\nCPI = CPInch + 0.2 * 0.5 * 7 = CPInch + 0.7 cycles per instruction\n\n\u25cf What if we had a compiler insert no-ops, with no HDU?\no It\u2019s even worse, as we will soon see.\n\n30\n\n\fCompiler avoiding the control hazard without HDU\n\u25cf Since compiler does not know direction, must always insert two nops\nCycle\n\n1\n\n2\n\n3\n\n4\n\n5\n\nblt s0,10,top\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nbubble\n\nIF\n\nID\n\nEX\n\nMEM\n\nnop\n\nnop\n\nmove a0,s0\n\n6\n\n7\n\n8\n\nWB\n\n31\n\n\fPerformance Impact without Hazard Detection Unit\n\u25cf CPI = CPInch + a * K\n\no CPInch : CPI with no control hazard\no a : fraction of branch instructions in the instruction mix\no K : no-ops inserted after each branch\n\nExample: If 20% of instructions are branches and the probability that a\nbranch is taken is 50%, and branch resolution delay of 7 no-ops, then:\nCPI = CPInch + 0.2 * 7 = CPInch + 1.4 cycles per instruction\n\no Branch-taken rate is irrelevant - compiler always inserts two nops\n\u25cf Is there a way to minimize the performance impact?\n\n32\n\n\fSolution 1: Delay Slots\n\u25cf Idea: Use compiler static scheduling to fill no-ops with useful work\no Remember? We did the same for no-ops due to data hazards.\n\u25cf Delay slot: One or more instructions immediately following a\nbranch instruction that executes regardless of branch direction\no Processor never needs to flush these instructions!\no ISA must be modified to support this branch semantic\no It\u2019s compiler\u2019s job to fill delay slots as best as it can,\nwith instructions not control dependent on the branch\n\n33\n\n\fCompiler static scheduling using delay slots\nblt s0, 10, else\nnop # Delay slot\nthen:\nadd t0, t1, t0\nj\nmerge\nelse:\nadd t1, t1, t0\nmerge:\naddi t2, t2, 1\n\nblt s0, 10, else\naddi t2, t2, 1 # Slot\nthen:\nadd t0, t1, t0\nj\nmerge\nelse:\nadd t1, t1, t0\nmerge:\n\u2026\n\n\u2022 The addi instruction is moved into delay slot\n\no It is not control dependent on the branch outcome of blt\no It is not data dependent on registers t0 or t1\n34\n\n\fDelay slots are losing popularity\n\u25cf Sounded like a good idea on paper but didn\u2019t work well in practice\n\n1. Turns out filling delay slots with the compiler is not always easy\no Often data and control independent instructions don\u2019t exist\n2. Delay slots baked into the ISA were not future proof\no Number of delay slots did not match new generation of CPUs\no New generation of CPUs had fancier ways to avoid bubbles\no Delays slots ended up being a hindrance\n\u25cf Next idea please!\n\n35\n\n\fSolution 2: MORE SINKS! (a.k.a. hardware)\n\n36\n\n\fDo we reeeally need to compare at EX stage?\n\u25cf What if branch comparison was done at the ID stage, not EX stage?\nTime\n\nblt s0,10,top\n\nla a0,done_msg\ns0 < 10...\nOOPS!\nmove a0,s0\n\n0\n\n1\n\n2\n\n3\n\n4\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\n5\n\n6\n\nMEM\n\nWB\n\n7\n\nIF\n\n\u25cf Reduced penalty from 2 cycles \u2192 1 cycle!\n\u25cf But of course that means we need a comparator at the ID stage\n37\n\n\fSolution 2: MORE SINKS! (a.k.a. hardware)\nExtra comparator to determine branch direction\nInstead of doing it here\n\n38\n\n\fNot all sunshine and rainbows\n\u25cf Extra delay on data hazards. Used to have no delay:\nTime\n\n0\n\n1\n\n2\n\n3\n\n4\n\nsub t0,t1,t2\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\n\nEX\n\nMEM\n\nbeq t0,$0,end\n\n5\n\n6\n\n7\n\n5\n\n6\n\n7\n\nMEM\n\nWB\n\nWB\n\n\u25cf Now we need to insert one bubble even with forwarding:\nTime\n\n0\n\n1\n\n2\n\n3\n\n4\n\nsub t0,t1,t2\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\nWAIT!\n\nID\n\nEX\n\nbeq t0,$0,end\n\n39\n\n\fNot all sunshine and rainbows\n\u25cf Extra delay on data forwarded from lw also:\nTime\n\n0\n\n1\n\n2\n\n3\n\n4\n\nlw t0,0($t1)\n\nIF\n\nID\n\nEX\n\nMEM\n\nWB\n\nIF\n\nID\nWAIT!\n\nID\nWAIT!\n\nID\n\nbeq t0,$0,end\n\n5\n\n6\n\n7\n\nEX\n\nMEM\n\nWB\n\n\u25cf Now we must insert two bubbles instead of one!\n\u25cf Not to mention we must now add more forwarding paths:\n\u25cf EX \u2192 ID, MEM \u2192 ID\n\u25cf We also need to add MUXes before our new comparator\n\n40\n\n\fTextbook figure correction\nThe figure in textbook is incomplete.\nNeeds MUXes and forwarding lines just like the ALU.\n\n41\n\n\f", "label": [[11, 27, "Concept"], [57, 75, "Concept"], [81, 98, "Concept"], [102, 108, "Concept"], [210, 212, "Concept"], [214, 216, "Concept"], [218, 220, "Concept"], [222, 225, "Concept"], [227, 229, "Concept"], [231, 233, "Concept"], [235, 237, "Concept"], [239, 241, "Concept"], [243, 246, "Concept"], [248, 250, "Concept"], [252, 254, "Concept"], [256, 258, "Concept"], [260, 262, "Concept"], [264, 267, "Concept"], [269, 271, "Concept"], [273, 275, "Concept"], [277, 279, "Concept"], [281, 283, "Concept"], [285, 288, "Concept"], [339, 341, "Concept"], [444, 450, "Concept"], [531, 536, "Concept"], [573, 575, "Concept"], [577, 579, "Concept"], [581, 583, "Concept"], [585, 588, "Concept"], [590, 592, "Concept"], [618, 620, "Concept"], [622, 624, "Concept"], [626, 628, "Concept"], [630, 633, "Concept"], [635, 637, "Concept"], [652, 654, "Concept"], [656, 658, "Concept"], [660, 662, "Concept"], [664, 667, "Concept"], [722, 724, "Concept"], [761, 763, "Concept"], [765, 767, "Concept"], [849, 857, "Concept"], [878, 884, "Concept"], [1053, 1061, "Concept"], [1087, 1097, "Concept"], [1112, 1120, "Concept"], [1192, 1228, "Concept"], [1234, 1251, "Concept"], [1269, 1277, "Concept"], [1294, 1301, "Concept"], [1306, 1313, "Concept"], [1315, 1318, "Concept"], [1323, 1325, "Concept"], [1381, 1383, "Concept"], [1385, 1387, "Concept"], [1389, 1391, "Concept"], [1393, 1396, "Concept"], [1398, 1400, "Concept"], [1402, 1404, "Concept"], [1406, 1408, "Concept"], [1410, 1412, "Concept"], [1414, 1417, "Concept"], [1419, 1421, "Concept"], [1423, 1425, "Concept"], [1427, 1429, "Concept"], [1431, 1433, "Concept"], [1435, 1438, "Concept"], [1440, 1442, "Concept"], [1444, 1446, "Concept"], [1448, 1450, "Concept"], [1452, 1454, "Concept"], [1456, 1459, "Concept"], [1510, 1512, "Concept"], [1518, 1535, "Concept"], [1553, 1561, "Concept"], [1585, 1605, "Concept"], [1622, 1640, "Concept"], [1642, 1654, "Concept"], [1656, 1658, "Concept"], [1714, 1725, "Concept"], [1727, 1740, "Concept"], [1797, 1815, "Concept"], [1881, 1887, "Concept"], [1895, 1905, "Concept"], [1909, 1912, "Concept"], [1914, 1916, "Concept"], [1924, 1942, "Concept"], [1944, 1956, "Concept"], [1958, 1960, "Concept"], [2025, 2036, "Concept"], [2038, 2051, "Concept"], [2116, 2134, "Concept"], [2205, 2235, "Concept"], [2242, 2248, "Concept"], [2264, 2267, "Concept"], [2270, 2272, "Concept"], [2287, 2292, "Concept"], [2314, 2332, "Concept"], [2338, 2349, "Concept"], [2356, 2359, "Concept"], [2375, 2377, "Concept"], [2380, 2382, "Concept"], [2424, 2427, "Concept"], [2457, 2462, "Concept"], [2500, 2504, "Concept"], [2559, 2565, "Concept"], [2589, 2594, "Concept"], [2629, 2634, "Concept"], [2646, 2651, "Concept"], [2655, 2671, "Concept"], [2715, 2725, "Concept"], [2743, 2748, "Concept"], [2772, 2782, "Concept"], [2802, 2812, "Concept"], [2830, 2838, "Concept"], [2857, 2868, "Concept"], [2875, 2919, "Concept"], [3008, 3012, "Concept"], [3027, 3031, "Concept"], [3153, 3163, "Concept"], [3172, 3182, "Concept"], [3202, 3212, "Concept"], [3239, 3249, "Concept"], [3292, 3294, "Concept"], [3303, 3305, "Concept"], [3342, 3345, "Concept"], [3419, 3440, "Concept"], [3471, 3473, "Concept"], [3476, 3478, "Concept"], [3489, 3494, "Concept"], [3516, 3526, "Concept"], [3531, 3542, "Concept"], [3567, 3572, "Concept"], [3574, 3580, "Concept"], [3597, 3602, "Concept"], [3610, 3615, "Concept"], [3617, 3625, "Concept"], [3635, 3648, "Concept"], [3657, 3666, "Concept"], [3700, 3705, "Concept"], [3779, 3791, "Concept"], [3798, 3810, "Concept"], [3904, 3906, "Concept"], [3908, 3910, "Concept"], [3912, 3914, "Concept"], [3916, 3919, "Concept"], [3921, 3923, "Concept"], [3925, 3927, "Concept"], [3929, 3931, "Concept"], [3933, 3935, "Concept"], [3937, 3940, "Concept"], [3965, 3967, "Concept"], [4086, 4101, "Concept"], [4116, 4125, "Concept"], [4126, 4141, "Concept"], [4179, 4187, "Concept"], [4254, 4266, "Concept"], [4275, 4282, "Concept"], [4335, 4337, "Concept"], [4339, 4341, "Concept"], [4343, 4345, "Concept"], [4347, 4350, "Concept"], [4352, 4354, "Concept"], [4356, 4358, "Concept"], [4360, 4362, "Concept"], [4364, 4366, "Concept"], [4368, 4371, "Concept"], [4396, 4398, "Concept"], [4427, 4442, "Concept"], [4511, 4517, "Concept"], [4524, 4539, "Concept"], [4545, 4551, "Concept"], [4584, 4589, "Concept"], [4668, 4670, "Concept"], [4672, 4674, "Concept"], [4676, 4678, "Concept"], [4680, 4683, "Concept"], [4685, 4687, "Concept"], [4689, 4691, "Concept"], [4693, 4695, "Concept"], [4718, 4720, "Concept"], [4728, 4731, "Concept"], [4733, 4735, "Concept"], [4755, 4760, "Concept"], [4806, 4821, "Concept"], [4826, 4847, "Concept"], [4897, 4912, "Concept"], [4925, 4930, "Concept"], [4937, 4952, "Concept"], [4969, 4972, "Concept"], [4978, 4993, "Concept"], [5043, 5058, "Concept"], [5101, 5115, "Concept"], [5119, 5125, "Concept"], [5154, 5163, "Concept"], [5211, 5214, "Concept"], [5222, 5225, "Concept"], [5245, 5251, "Concept"], [5316, 5318, "Concept"], [5319, 5324, "Concept"], [5361, 5367, "Concept"], [5374, 5379, "Concept"], [5393, 5399, "Concept"], [5402, 5417, "Concept"], [5464, 5474, "Concept"], [5503, 5520, "Concept"], [5587, 5602, "Concept"], [5643, 5649, "Concept"], [5653, 5663, "Concept"], [6103, 6113, "Concept"], [6201, 6210, "Concept"], [6245, 6256, "Concept"], [6273, 6292, "Concept"], [6336, 6344, "Concept"], [6359, 6366, "Concept"], [6516, 6527, "Concept"], [6544, 6563, "Concept"], [6607, 6615, "Concept"], [6630, 6637, "Concept"], [6732, 6734, "Concept"], [6736, 6738, "Concept"], [6740, 6742, "Concept"], [6744, 6747, "Concept"], [6749, 6751, "Concept"], [6753, 6755, "Concept"], [6757, 6759, "Concept"], [6761, 6763, "Concept"], [6765, 6768, "Concept"], [6770, 6772, "Concept"], [6774, 6776, "Concept"], [6778, 6780, "Concept"], [6782, 6784, "Concept"], [6786, 6789, "Concept"], [6791, 6793, "Concept"], [6795, 6797, "Concept"], [6799, 6801, "Concept"], [6803, 6805, "Concept"], [6807, 6810, "Concept"], [6861, 6863, "Concept"], [6880, 6897, "Concept"], [6900, 6910, "Concept"], [6923, 6931, "Concept"], [6942, 6959, "Concept"], [6963, 6980, "Concept"], [7074, 7082, "Concept"], [7095, 7098, "Concept"], [7160, 7171, "Concept"], [7175, 7192, "Concept"], [7489, 7505, "Concept"], [7546, 7564, "Concept"], [7585, 7603, "Concept"], [7672, 7689, "Concept"], [7792, 7809, "Concept"], [7995, 8005, "Concept"], [8045, 8060, "Concept"], [8365, 8373, "Concept"], [8374, 8381, "Concept"], [8412, 8420, "Concept"], [8429, 8436, "Concept"], [8561, 8563, "Concept"], [8565, 8567, "Concept"], [8569, 8571, "Concept"], [8573, 8576, "Concept"], [8578, 8580, "Concept"], [8582, 8584, "Concept"], [8586, 8588, "Concept"], [8590, 8592, "Concept"], [8594, 8596, "Concept"], [8607, 8609, "Concept"], [8611, 8614, "Concept"], [8616, 8618, "Concept"], [8620, 8622, "Concept"], [8653, 8668, "Concept"], [8671, 8680, "Concept"], [8684, 8691, "Concept"], [8862, 8867, "Concept"], [8879, 8887, "Concept"], [8900, 8907, "Concept"], [9097, 9105, "Concept"], [9157, 9171, "Concept"], [9218, 9233, "Concept"], [9682, 9688, "Concept"], [9698, 9701, "Concept"], [9771, 9785, "Concept"], [9794, 9797, "Concept"], [9863, 9867, "Concept"], [9905, 9907, "Concept"], [9909, 9911, "Concept"], [9913, 9915, "Concept"], [9917, 9920, "Concept"], [9922, 9924, "Concept"], [9926, 9932, "Concept"], [9934, 9940, "Concept"], [9942, 9948, "Concept"], [9950, 9956, "Concept"], [9958, 9964, "Concept"], [9966, 9972, "Concept"], [9974, 9980, "Concept"], [9982, 9988, "Concept"], [9990, 9996, "Concept"], [9998, 10004, "Concept"], [10006, 10008, "Concept"], [10010, 10012, "Concept"], [10014, 10016, "Concept"], [10018, 10021, "Concept"], [10023, 10026, "Concept"], [10028, 10031, "Concept"], [10054, 10056, "Concept"], [10090, 10111, "Concept"], [10114, 10117, "Concept"], [10147, 10150, "Concept"], [10159, 10173, "Concept"], [10241, 10247, "Concept"], [10405, 10411, "Concept"], [10545, 10549, "Concept"], [10621, 10632, "Concept"], [10654, 10671, "Concept"], [10680, 10686, "Concept"], [10736, 10742, "Concept"], [10750, 10762, "Concept"], [10766, 10776, "Concept"], [11029, 11040, "Concept"], [11129, 11146, "Concept"], [11408, 11418, "Concept"], [11533, 11544, "Concept"], [11658, 11669, "Concept"], [11772, 11783, "Concept"], [11837, 11848, "Concept"], [11937, 11944, "Concept"], [11947, 11959, "Concept"], [12095, 12097, "Concept"], [12149, 12151, "Concept"], [12163, 12165, "Concept"], [12253, 12255, "Concept"], [12257, 12259, "Concept"], [12261, 12263, "Concept"], [12265, 12268, "Concept"], [12270, 12272, "Concept"], [12274, 12276, "Concept"], [12278, 12280, "Concept"], [12282, 12284, "Concept"], [12292, 12295, "Concept"], [12297, 12299, "Concept"], [12388, 12398, "Concept"], [12406, 12408, "Concept"], [12468, 12478, "Concept"], [12587, 12599, "Concept"], [12659, 12661, "Concept"], [12663, 12665, "Concept"], [12667, 12669, "Concept"], [12671, 12674, "Concept"], [12676, 12678, "Concept"], [12680, 12682, "Concept"], [12684, 12686, "Concept"], [12688, 12690, "Concept"], [12692, 12695, "Concept"], [12730, 12733, "Concept"], [12735, 12737, "Concept"], [12739, 12741, "Concept"], [12771, 12777, "Concept"], [12788, 12798, "Concept"], [12835, 12837, "Concept"], [12839, 12841, "Concept"], [12843, 12845, "Concept"], [12847, 12850, "Concept"], [12852, 12854, "Concept"], [12856, 12858, "Concept"], [12860, 12862, "Concept"], [12870, 12872, "Concept"], [12874, 12876, "Concept"], [12945, 12959, "Concept"], [13009, 13011, "Concept"], [13013, 13015, "Concept"], [13017, 13019, "Concept"], [13021, 13024, "Concept"], [13026, 13028, "Concept"], [13030, 13032, "Concept"], [13034, 13036, "Concept"], [13044, 13046, "Concept"], [13054, 13056, "Concept"], [13082, 13084, "Concept"], [13086, 13089, "Concept"], [13091, 13093, "Concept"], [13120, 13127, "Concept"], [13182, 13198, "Concept"], [13202, 13204, "Concept"], [13207, 13209, "Concept"], [13211, 13214, "Concept"], [13217, 13219, "Concept"], [13242, 13247, "Concept"], [13263, 13273, "Concept"], [13351, 13356, "Concept"], [13361, 13377, "Concept"], [13392, 13395, "Concept"]], "Comments": []}