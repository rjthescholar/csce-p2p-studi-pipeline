{"id": 296, "segment": ["train_set", "labeled"], "course": "cs1550", "lec": "lec02", "text": "Introduction to Operating Systems\nCS/COE 1550\nProcess Synchronization - 1\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne \u00a92013)\n\n\fAnnouncements\n\u2022 Homework 1 is due next Monday at 11:59 pm\n\n\u2022 Recitations started last week\n\u2022 Please watch the videos\n\n\u2022 Lab 1 is due on 2/4 at 11:59 pm\n\u2022 Distributed using GitHub Classroom\n\n\u2022 Explained in this week\u2019s recitations\n\n\u2022 Steps of a syscall posted on Canvas\n\u2022 TA Office hours available on the syllabus page\n\u2022 Muddiest points will be anonymous and not seen to\nstudents\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n2\n\n\fMuddiest Points\n\u2022 storage/access of the mode bits\n\u2022 syscalls\n\u2022\n\nidt/isr vs syscall table\n\n\u2022\n\nDifference between f1~f7(what to call them?) and\nf8~f10(syscall functions)\n\n\u2022\n\nthe beginning of the syscall process\n\n\u2022\n\nsyscall steps\n\n\u2022\n\neax register relevance to interrupts/syscall\n\n\u2022\n\nHow user programs need to be changed for new syscalls\n\n\u2022\n\nHow high level code interacts with syscalls\n\n\u2022 xv6 walkthrough\n\u2022\n\nArray of functions syntax in C\n\n\u2022 monolithic vs micro\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n3\n\n\fProblem: race conditions\n\u2022 R is a CPU register\n\n\u2022 X is a variable\nstored in memory\n\nP1\nx++\n\nP2\nx++\nx=3\n\nR <= x\nR = R+1\nR => x\n\nR <= x\nR = R+1\nR => x\n\nx=5\nR <= x\n\nR <= x\nR = R+1\nR = R+1\nR => x\nR => x\n\nx=6!\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n4\n\n\fRace conditions\n\u2022\n\nCooperating processes share storage (memory)\n\n\u2022\n\nBoth may read and write the shared memory\n\n\u2022\n\nProblem: can\u2019t guarantee that read followed by write is atomic\n\u2022\n\nAtomic means uninterruptible\n\n\u2022\n\nOrdering matters!\n\n\u2022\n\nThis can result in erroneous results!\n\n\u2022\n\nWe need to eliminate race conditions\u2026\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n5\n\n\fAtomic operations\n\u2022 If done in one instruction, then not interruptible\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n6\n\n\fContext Switching\nHow did the CPU switch from P1 to P2 then to P1 then\nto P2 again \u2026?\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n7\n\n\fProcess Control Block\n``Active entities are data structures when viewed from a\nlower level.\u2019\u2019\n\nRaphael Finkel, University of Kentucky\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n8\n\n\fProcess Control Block (PCB)\nInformation associated with each process\n(also called task control block)\n\u2022 Process state \u2013 running, waiting, etc\n\u2022 Program counter \u2013 location of instruction to execute next\n\u2022 CPU registers \u2013 contents of all process-centric registers\n\u2022 CPU scheduling information- priorities, scheduling queue\npointers\n\u2022 Memory-management information \u2013 memory allocated to\nthe process\n\u2022 Accounting information \u2013 CPU used, clock time elapsed\nsince start, time limits\n\u2022 I/O status information \u2013 I/O devices allocated to process,\nlist of open files\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n9\n\n\fProcess Representation in Linux\nRepresented by the C structure task_struct\npid_t pid; /* process identifier */\nlong state; /* state of the process */\nunsigned int time_slice /* scheduling information */\nstruct task_struct *parent; /* this process\u2019s parent */\nstruct list_head children; /* this process\u2019s children */\nstruct files_struct *files; /* list of open files */\nstruct mm_struct *mm; /* address space of this process */\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n10\n\n\fContext Switch\n\u2022 When CPU switches to another process, the system\nmust save the state of the old process and load the\nsaved state for the new process via a context\nswitch\n\u2022 Context of a process represented in the PCB\n\u2022 Context-switch time is overhead; the system does no\nuseful work while switching\n\u2022 The more complex the OS and the PCB \u2794 the longer the\ncontext switch\n\n\u2022 Time dependent on hardware support\n\u2022 Some hardware provides multiple sets of registers per\nCPU \u2794 multiple contexts loaded at once\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n11\n\n\fContext Switching\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n12\n\n\fXv6 Code Walkthrough\n\u2022 PCB and process table\n\n\u2022 Context switching\n\u2022 Calling of the swtch routine\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n13\n\n\fContext Switching in Xv6\n%eax\n%edx\n\ncontext\n\nPCB of Process \ud835\udc430\n\nReturn address\n\n%esp\n%eip\n\nStack of Process \ud835\udc430\n\nCPU\nReturn\nReturn address\naddress\n\ncontext\n\nPCB of Process \ud835\udc431\n\nStack of Process \ud835\udc431\nMemory\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n14\n\n\fCritical regions\n\u2022\n\nBack to the race conditions problem\n\n\u2022\n\nUse critical regions to provide mutual exclusion and help fix race conditions\n\n\u2022\n\nLet\u2019s put the statement x++ in a critical region\nP1 enters\ncritical region\n\nP1 leaves\ncritical region\n\nProcess P1\nP2 tries to enter\ncritical region\n\nProcess P2\n\nP2 enters\ncritical region\n\nP2 leaves\ncritical region\n\nP2 blocked\nTime\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n15\n\n\fHow to implement critical regions?\n\u2022 Turn-based solutions\n\n\u2022 Spinlocks\n\u2022 Semaphores\n\u2022 Monitors\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n16\n\n\fUsing Spinlocks\nSpinlock lock;\n\nCode for process Pi\n\nWhile(1){\nLock(lock)\n// critical section\nUnlock(lock);\n// remainder of code\n}\n}\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n17\n\n\fSpinlock implementation (1/2)\n\u2022 Solution: use hardware\n\n\u2022 Several hardware methods\n\u2022 Test & set: test a variable and set it in one instruction\n\u2022 Atomic swap: switch register & memory in one instruction\n\u2022 Turn off interrupts: process won\u2019t be switched out unless it\nasks to be suspended\n\n\u2022 The first two methods can be implemented in user\nland\n\u2022 Why can\u2019t we implement the third method in user land?\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n18\n\n\f", "label": [[16, 33, "Concept"], [46, 69, "Concept"], [422, 429, "Concept"], [571, 588, "Concept"], [651, 660, "Concept"], [663, 671, "Concept"], [675, 678, "Concept"], [679, 682, "Concept"], [686, 693, "Concept"], [760, 767, "Concept"], [804, 811, "Concept"], [824, 831, "Concept"], [842, 845, "Concept"], [868, 878, "Concept"], [879, 886, "Concept"], [936, 944, "Concept"], [984, 992, "Concept"], [996, 999, "Concept"], [1049, 1059, "Concept"], [1063, 1068, "Concept"], [1083, 1100, "Concept"], [1132, 1147, "Concept"], [1157, 1169, "Concept"], [1199, 1205, "Concept"], [1343, 1360, "Concept"], [1383, 1398, "Concept"], [1414, 1423, "Concept"], [1439, 1445, "Concept"], [1479, 1492, "Concept"], [1553, 1559, "Concept"], [1563, 1569, "Concept"], [1681, 1696, "Concept"], [1713, 1730, "Concept"], [1753, 1770, "Concept"], [1839, 1856, "Concept"], [1879, 1896, "Concept"], [1980, 1997, "Concept"], [2020, 2041, "Concept"], [2169, 2186, "Concept"], [2209, 2230, "Concept"], [2232, 2235, "Concept"], [2270, 2277, "Concept"], [2291, 2309, "Concept"], [2313, 2326, "Concept"], [2353, 2368, "Concept"], [2413, 2426, "Concept"], [2445, 2470, "Concept"], [2473, 2499, "Concept"], [2513, 2529, "Concept"], [2541, 2570, "Concept"], [2573, 2579, "Concept"], [2597, 2604, "Concept"], [2607, 2629, "Concept"], [2632, 2635, "Concept"], [2642, 2652, "Concept"], [2688, 2710, "Concept"], [2738, 2745, "Concept"], [2755, 2765, "Concept"], [2780, 2797, "Concept"], [2820, 2827, "Concept"], [2883, 2894, "Concept"], [3262, 3279, "Concept"], [3303, 3317, "Concept"], [3325, 3328, "Concept"], [3349, 3356, "Concept"], [3383, 3388, "Concept"], [3400, 3407, "Concept"], [3427, 3432, "Concept"], [3445, 3452, "Concept"], [3459, 3473, "Concept"], [3476, 3483, "Concept"], [3489, 3496, "Concept"], [3516, 3519, "Concept"], [3522, 3541, "Concept"], [3545, 3553, "Concept"], [3625, 3627, "Concept"], [3636, 3639, "Concept"], [3657, 3671, "Concept"], [3752, 3761, "Concept"], [3766, 3769, "Concept"], [3781, 3789, "Concept"], [3819, 3836, "Concept"], [3860, 3877, "Concept"], [3893, 3910, "Concept"], [3934, 3937, "Concept"], [3957, 3960, "Concept"], [3965, 3978, "Concept"], [3982, 3999, "Concept"], [4046, 4063, "Concept"], [4087, 4104, "Concept"], [4108, 4111, "Concept"], [4112, 4116, "Concept"], [4117, 4121, "Concept"], [4123, 4130, "Concept"], [4132, 4135, "Concept"], [4139, 4146, "Concept"], [4167, 4171, "Concept"], [4172, 4176, "Concept"], [4187, 4194, "Concept"], [4199, 4202, "Concept"], [4234, 4241, "Concept"], [4243, 4246, "Concept"], [4250, 4257, "Concept"], [4271, 4278, "Concept"], [4282, 4288, "Concept"], [4303, 4320, "Concept"], [4344, 4360, "Concept"], [4376, 4391, "Concept"], [4408, 4424, "Concept"], [4466, 4481, "Concept"], [4519, 4534, "Concept"], [4545, 4560, "Concept"], [4572, 4587, "Concept"], [4589, 4596, "Concept"], [4618, 4633, "Concept"], [4635, 4642, "Concept"], [4657, 4672, "Concept"], [4684, 4699, "Concept"], [4732, 4749, "Concept"], [4790, 4806, "Concept"], [4810, 4830, "Concept"], [4834, 4843, "Concept"], [4846, 4856, "Concept"], [4859, 4867, "Concept"], [4883, 4900, "Concept"], [4930, 4939, "Concept"], [4940, 4948, "Concept"], [4965, 4972, "Concept"], [5072, 5089, "Concept"], [5113, 5121, "Concept"], [5258, 5269, "Concept"], [5278, 5286, "Concept"], [5289, 5295, "Concept"], [5326, 5336, "Concept"], [5338, 5345, "Concept"], [5446, 5455, "Concept"], [5501, 5510, "Concept"], [5527, 5544, "Concept"]], "Comments": []}