{"id": 110, "segment": ["train_set", "labeled"], "course": "cs1622", "lec": "lec15_structs_and_classes_oop", "text": "Structs and Classes, OOP\nCS 1622\nJarrett Billingsley\n\n\fClass Announcements\n\u25cf yet another \"real example\" of adding a language feature\no though you already did the lexing, parsing, and some of the\nsemantic analysis for this stuff in the projects\u2026\no so we\u2019ll kinda skip that stuff!\n\n2\n\n\fStructured types\n\n3\n\n\fType survey\n\u25cf primitive types can only get you so far.\no remember these are things like int, bool, and char.\n\u25cf arrays give the programmer a lot of problem-solving power.\no even in very simplistic languages (like old BASIC dialects), arrays\ngive you the power of indirection and dynamically-sized data\nstructures, which you can't do with primitives.\n\u25cf but more complex problems will require the user to define their own\ntypes suited to solving the problem.\no and if we want to let the user define their own types, the most\nobvious place to start is with\u2026 classes structs tuples!\n\n4\n\n\fTuples??\n\u25cf a tuple is an ordered sequence of heterogeneous types.\no heterogeneous = \"they can be different\"\n\u25cf typically, tuple types are written in parens, like (T1, \u2026, Tn)\n\u25cf you could use them to represent\u2026\no coordinates in an n-dimensional space: (10, 4)\n\u25aa this one's type is (int, int)\no the absence of a value: ()\n\u25aa this is also called unit or, in our language, void\no simple objects: (\"Billingsley\", \"Jarrett\", 35)\n\u25aa this one's type is (string, string, int)\no maybe you can see where this is going\u2026\n\n5\n\n\fOperations on tuples\n\u25cf like arrays, we can index them to access their values:\no t[2] = 34;\n\u25cf unlike arrays, we know their length statically\u2026\no but each element can be a different type!\no therefore: we can only index them with constant values.\n\u25cf what if we had a way of defining named constants?\nconst LNAME = 0;\nconst FNAME = 1;\nconst AGE\n= 2;\nlet me = (\"Billingsley\", \"Jarrett\", 35);\nme[AGE] = 36; // next year..\n\n\u25cf\ud83e\udd14\n6\n\n\f\u2026yeah okay that's basically a struct isn't it\n\u25cf a struct or record type is like a class that only has data.\n\u25cf tuples and structs are almost the same thing, except\u2026\no tuples' fields are anonymous while structs' fields are named.\n\u25cf it's probably pretty obvious now how structs work:\n\nstruct Point {\nx: int, y: int\n}\nlet p = new Point(3, 8);\np.x = p.x + 1;\n\n\u2248\n\u2248 let p = (3, 8);\np[0] = p[0] + 1;\n\u2248\n(int, int)\n\n7\n\n\fOne important difference\n\u25cf in most languages that have both structs and tuples:\no tuples have structural identity, but structs have nominal identity\n\u25cf what that means is:\n\n(int, int, int)\n\n\u2248\n\nstruct Point3D {\nx: int, y: int, z: int\n}\n\nsame type!\n\ndifferent types!\n\n(int, int, int)\n\nstruct Color {\nr: int, g: int, b: int\n}\n\n\u2248\n\n8\n\n\fValue types and reference types\n\u25cf all variables contain bit patterns.\n\u25cf for value type variables, that bit pattern is the value.\no examples include int, float, char, and bool.\n\u25cf for reference type variables, that bit pattern is a memory address.\no examples include Java arrays and objects.\n\u25cf assigning from one variable to another copies the bit patterns.\n\u25cf for value types, that means you copy the entire value.\nint x = 5;\nint y = x; // now we have two 5s!\n\u25cf but for reference types, you only copy the address.\nObject x = new Object();\nObject y = x; // still only one Object...\n\n9\n\n\fDecision time!\n\u25cf Rust, C, C++, and C# consider structs to be value types. In Rust:\nlet s = Point { x: 3, y: 8 };\nlet t = s; // now we have two Points, both {3, 8}!\n\u25cf in these languages, this is nonsense: struct Node { next: Node }\no how can something contain itself??\n\u25cf Java doesn't let the programmer create their own value types.\no so, this is fine: class Node { Node next; }\no because Node next; declares a reference variable.\n\u25cf so: should Truss\u2019s structs be value types, or reference types?\n\u25cf well, for \"simplicity,\" let's stick with reference types.\no reference types let us solve more problems than value types do,\njust sometimes with more space/time overhead.\n\u25cf but if we have references, then we probably need\u2026 null.\n10\n\n\fThe billion dollar mistake: null\n\u25cf null is a special value you can put into a reference variable to\nindicate that it is uninitialized or \u201cnot pointing to anything.\u201d\n\u25cf trying to perform any operation besides assignment on null will\nlead to a runtime error (a crash).\n\u25cf unfortunately, most of the time, you do not want references to be null.\no so by putting null in a language, and not requiring checks before\nusing a reference, you are adding a huge number of potential\ncrashes into virtually every program.\n\u25cf also it\u2019s just weird when it comes to typechecking.\no it\u2019s the only value that can be put into multiple different types.\no String s = null; Object o = null; int[] a = null;\n\u25cf so null does not have a type of its own! type theory calls it a\nbottom type, because it is at the bottom of the type hierarchy and\nacts as a subtype of all other types.\n11\n\n\fStruct Runtime\nRepresentation\n\n12\n\n\fData layout\n\u25cf how are structs (and classes?) going to be represented in memory?\no arrays work by putting the values next to each other.\no okay, let's do that.\n\nstruct Point3D { x: int, y: int, z: int }\nassuming int is\n32 bits (4 Bytes)\u2026\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10 11\n\nthese numbers are the offsets from the beginning of the struct.\n(assuming we're using a byte-addressable machine)\n\nthey say how far \"into the struct\" each field is.\n13\n\n\fNot so fast, Mister Gordon!\n\u25cf since bool takes up 1 byte, what if we had a struct like this:\nstruct Hmm { b: bool, i: int }\n\nb\n\ni\n\n0\n\n1\n\nthis is a totally valid way of doing it.\n\n2\n\n3\n\n4\n\nunfortunately, lots of CPU\narchitectures hate this.\n\nCPUs like values to be aligned. that means: the memory\naddress in an n-byte load/store must be a multiple of n.\nx86 CPUs will access unaligned values very slowly.\nMIPS CPUs will crash. (unless you use the much slower unaligned loads/stores)\n\nso, we need to insert padding (extra unused bytes) into\nour structs to ensure each field is properly aligned.\n14\n\n\fStruct padding\n\u25cf we place each field at an offset that is a multiple of its alignment.\n\u25cf then, the struct's size as a whole is rounded up to the largest\nalignment of any field. (this is important for arrays of structs.)\n\u25cf so for this: struct Hmm { b: bool, i: int }\n\nb\n0\n\ni\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\nand if we swapped b and i:\n\ni\n0\n\nb\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\neither way, the struct is\n8 bytes, and it must be\n4-byte aligned\nbecause of the int.\n15\n\n\fWait, why does the whole struct need to be padded?\n\u25cf strictly speaking, for our language where structs are reference types,\nthe structs don't need padding at the end.\n\u25cf but in languages where they're value types, it's crucial for maintaining\nalignment in arrays of structs. consider these arrays of two structs:\ni\n0\n\nb\n1\n\n2\n\n3\n\ni\n0\n\n1\n\n2\n\n3\n\ni\n\n4\n\n5\n\nb\n\ni\n\n4\n\n5\n\n6\n\n7\n\n8\n\nb\n9\n\n10 11 12 13 14 15\n\nb\n6\n\n7\n\n8\n\n9\n\nwithout the end-padding, this int field\nof the second item is now misaligned.\n\nthe memory allocator will\nhave to allocate things at\naligned memory addresses\nas well, for this to work.\n16\n\n\fAnyway\u2026 allocation\n\u25cf now we know the size and alignment of each struct.\n\u25cf we'll need a runtime library function to dynamically allocate structs.\no let's call it rt$new(size: int). it'll return an address.\no to keep it simple, it'll always align things to 4 bytes.\nstruct Thing {\n// size: 12\nname:\nstring,\nin_use: bool,\nflag:\nbool,\ncount: int,\n}\n\nlet t = new Thing();\n\nallocations get generated\nas calls to this function.\naddi sp, sp, -4\nli\ns0, 12\nsw\ns0, 0(sp) # size\njal rt$new\nsw\nv0, -24(fp) # t\n\n17\n\n\fAccessing fields\n\u25cf we use the fields' offsets and types to generate code for field access.\nstruct Thing {\nname:\nstring, // offs: 0\nin_use: bool,\n// offs: 4\nflag:\nbool,\n// offs: 5\ncount: int,\n// offs: 8\n}\n\nto access a field, we add its\noffset to the struct instance's\naddress, then use the right\n\"flavor\" of load/store.\n\nlet t = new Thing();\nt.in_use = true;\nt.count\n\n= 20;\n\nlw s0, -24(fp) # t\nli s1, 1\n# true\nsb s1, 4(s0)\n# t.in_use = true\nlw s0, -24(fp) # t\nli s1, 20\nsw s1, 8(s0)\n# t.count = 20\n18\n\n\fOOP\n\n19\n\n\fWhat is OOP (object-oriented programming)?\n\u25cf we might gesture vaguely in Java's direction and say \"it's like that\"\no but \"Java-flavored OOP\" isn't the only kind\u2026\n\u25cf C has structs, but it isn't \"OOP.\" C++ has \"classes\", and it is \"OOP.\"\n\u25cf the core idea of OOP is packaging data alongside operations on\nthat data into a single, indivisible entity.\no so: the main thing that distinguishes C++ from C\u2026 is methods.\n\u25cf a method call is a special kind of function call:\nobj.method();\no method calls can be more complex than \"regular\" function calls.\n\u25cf other OOP concepts, which are not required but are common, include\ninheritance, subtyping, interfaces, privacy, constructors, and runtime type identification.\n\n20\n\n\fMethods\n\u25cf methods are special functions which are associated with an object.\n\u25cf they take the object they are called on as an argument.\nstruct Point {\nthis is passed implicitly,\nx: int,\nbut it's still an argument.\ny: int\nfn to_string(): string {\nreturn to_string(this.x) + \", \" + to_string(this.y);\n}\n}\nlet p = new Point(3, 8);\nprintln_s(p.to_string());\n\nhere, the method call is syntactic\nsugar for something like:\nPoint.to_string(p)\n\nthis is static dispatch, because we can determine\nwhich method to call at compile-time.\n\n21\n\n\fConstructors\n\u25cf a constructor is just a method that is called on an instance of an\nobject immediately after allocating it, to let you initialize its fields.\nclass C {\nString s;\n\nC() {\n// s == null\ns = \"hi\";\n}\n}\nC c = new C();\n\nin this Java code, new C() does the following:\n\n1. allocates an instance of C\n2. initializes all its fields to default values*\n\n3. calls the constructor on that instance\nbut Java doesn\u2019t really enforce that you do\nanything useful in the constructor, and before\nit completes, the object may be in an\ninconsistent state (i.e. calling methods on\nthis may behave erratically or crash).\n22\n\n\fData inheritance\n\u25cf first, let's look at a simpler kind of inheritance, which just inherits data\nfields without inheriting methods, and does not imply subtyping.\nstruct RGB { r: int, g: int, b: int } the base class's fields are\nstruct RGBA : RGB { a: int }\ncopied into the derived\nlet color = new RGBA(255, 127, 0, 95);\nclass's definition.\n\nwe represent this in memory by prefixing:\nthe beginning of an RGBA is an RGB.\n\nRGB\nRGBA\n\nr\n\ng\n\nb\n\n0\n\n4\n\n8\n\nr\n\ng\n\nb\n\na\n\n0\n\n4\n\n8\n\n12\n\nreusing only the data is\nlimited in usefulness. reusing\nmethods is much more useful.\n23\n\n\fMethod inheritance\n\u25cf method inheritance takes advantage of the prefixed representation.\no base class methods can be called on derived class instances,\nbecause the base class fields are at the same offsets.\nstruct Animal {\nspecies: string\nfn to_string(): string {\nreturn \"Animal(\" + this.species + \")\";\n}\n}\nstruct Cat : Animal { whiskers: int }\nlet c = new Cat(\"felis cattus\", 15);\nprintln_s(c.to_string());\n\nthis is still static dispatch: the method\ncall is sugar for Animal.to_string(c).\n\nwe can now say that Cat\nis a subtype of Animal.\n\n24\n\n\fWhere it starts getting crazy\n\u25cf what if we want to specialize to_string() in the Cat struct?\nstruct Animal {\nspecies: string\nfn to_string(): string {\nreturn \"Animal(\" + this.species + \")\";\n}\nthe compiler might be able to\n}\nstatically determine in this case that\nstruct Cat : Animal {\nit should call Cat.toString(c).\nwhiskers: int\nfn to_string(): string {\nreturn \"meow meow meow!\";\nbut it can't determine that in\n}\nthe general case.\n}\nlet c = new Cat(\"felis cattus\", 15);\nprintln_s(c.to_string());\n25\n\n\fThe problem\n\u25cf since a subtype can be used anywhere a base type is expected\u2026\no a base type variable can contain different types of values.\n\u25cf and since subtypes can have different implementations of the\nsame methods as the supertype\u2026\no you can't know what subtype implementation to call until runtime!\nfn print(a: Animal) {\n// how does this call to\n// to_string know which\n// implementation to use?\nprintln_s(a.to_string());\n}\nprint(new Cat());\nprint(new Dog());\nprint(new Horse());\n\nthe problem (as it often is) is that\nwe lose type information in the\ntranslation from the source\nlanguage to the target language.\nso, let's\u2026 not do that. let's\nkeep some of that type info.\n26\n\n\fVirtual Methods and\nDynamic Dispatch\n\n27\n\n\fRTTI (Run-time Type Identification)\n\u25cf the solution is to make each class instance carry an ID card.\no this is implemented as a \"secret\" field in every class instance.\nc = new Cat(\u2026);\ntype: Cat\nspecies: \"felis cattus\"\nwhiskers: 15\n\nd = new Dog(\u2026);\ntype: Dog\nspecies: \"canis lupus\"\ndrooly: true\n\nfn print(a: Animal) {\nprintln_s(a.to_string());\n}\nthis method call could be\nimplemented something like:\n\nif a.type == Cat {\nCat.to_string(a)\n} else if a.type == Dog {\nDog.to_string(a)\n}\nbut that would be horribly inefficient.\n28\n\n\fVirtual method tables (vtables)\n\u25cf to implement this efficiently, and to allow an unlimited number of\nsubtypes, the \"ID card\" is a pointer to an array of function pointers.\nc = new Cat(\u2026);\n\nCat vtable\n\n0 vtbl\n\n0 breathe\n\nAnimal.breathe()\n\n4 species\n\n4 to_string\n\nCat.to_string()\n\n8 whiskers\n\n8 play_string\n\nCat.play_string()\n\nd = new Dog(\u2026);\n\nDog vtable\n\n0 vtbl\n\n0 breathe\n\n4 species\n\n4 to_string\n\nDog.to_string()\n\n8 drooly\n\n8 play_fetch\n\nDog.play_fetch()\n29\n\n\fVirtual method calls\n\u25cf to call a virtual method, we index the table to get the address\u2026\no and do an indirect function call to that address.\nthis method call becomes:\nfn print(a: Animal) {\na.vtbl[1](a)\nprintln_s(a.to_string());\n}\nor in assembly:\nthe compiler knows the\nmethod indexes because\nthe vtables for each class\nuse prefixing:\nsubtypes' vtables are\nprefixed with their\nsupertype's vtable.\n\naddi sp, sp, -4\nlw\ns0, -16(fp) # s0 = a\nsw\ns0, 0(sp)\n# pass 'this'\nlw\ns0, 0(s0)\n# s0 = a.vtbl\nlw\ns0, 4(s0)\n# s0 = a.vtbl[1]\njalr s0\n# call to_string\n\njalr works like jal, but uses a register\nas the address of the function to call.\n30\n\n\fThings to ponder on\n\u25cf what are interfaces, then?\no a \"slice\" of a vtable, sort of!\no when a class implements an interface, those methods are present\nin its vtable at runtime.\n\u25cf what about public/protected/private? final? override?\no these are all semantic; they have no effect on the implementation.\n\u25cf what about static variables/methods?\no they're globals whose names happen to be scoped inside a class.\n\u25cf what about null?\no we could have nullable reference types, like a restricted form of\nRust's Option<T> that only works for references.\n\u25cf what about inheriting from multiple classes?\no don't even go there. noooooope nope nope\n31\n\n\f", "label": [[0, 7, "Concept"], [12, 19, "Concept"], [21, 24, "Concept"], [162, 168, "Concept"], [170, 177, "Concept"], [195, 212, "Concept"], [284, 300, "Concept"], [306, 310, "Concept"], [417, 423, "Concept"], [539, 545, "Concept"], [568, 579, "Concept"], [584, 617, "Concept"], [725, 730, "Concept"], [812, 817, "Concept"], [860, 867, "Concept"], [868, 875, "Concept"], [876, 882, "Concept"], [889, 895, "Concept"], [902, 907, "Concept"], [948, 953, "Concept"], [1010, 1015, "Concept"], [1016, 1021, "Concept"], [1159, 1163, "Concept"], [1412, 1418, "Concept"], [1426, 1432, "Concept"], [1498, 1504, "Concept"], [1520, 1526, "Concept"], [1850, 1856, "Concept"], [1870, 1876, "Concept"], [1880, 1891, "Concept"], [1902, 1907, "Concept"], [1930, 1936, "Concept"], [1941, 1948, "Concept"], [1986, 1992, "Concept"], [2005, 2014, "Concept"], [2021, 2028, "Concept"], [2041, 2046, "Concept"], [2087, 2094, "Concept"], [2290, 2297, "Concept"], [2302, 2308, "Concept"], [2312, 2318, "Concept"], [2324, 2343, "Concept"], [2349, 2356, "Concept"], [2362, 2378, "Concept"], [2560, 2571, "Concept"], [2576, 2591, "Concept"], [2636, 2646, "Concept"], [2742, 2756, "Concept"], [2830, 2836, "Concept"], [2922, 2933, "Concept"], [3028, 3043, "Concept"], [3205, 3216, "Concept"], [3348, 3354, "Concept"], [3463, 3474, "Concept"], [3496, 3501, "Concept"], [3554, 3572, "Concept"], [3606, 3617, "Concept"], [3622, 3637, "Concept"], [3682, 3697, "Concept"], [3701, 3710, "Concept"], [3749, 3760, "Concept"], [3828, 3838, "Concept"], [3863, 3867, "Concept"], [3902, 3906, "Concept"], [3909, 3913, "Concept"], [3952, 3970, "Concept"], [4095, 4099, "Concept"], [4115, 4128, "Concept"], [4208, 4212, "Concept"], [4230, 4234, "Concept"], [4290, 4299, "Concept"], [4421, 4433, "Concept"], [4497, 4502, "Concept"], [4582, 4586, "Concept"], [4599, 4610, "Concept"], [4622, 4633, "Concept"], [4670, 4684, "Concept"], [4699, 4706, "Concept"], [4720, 4725, "Concept"], [4732, 4761, "Concept"], [4768, 4779, "Concept"], [4790, 4797, "Concept"], [4803, 4810, "Concept"], [4850, 4856, "Concept"], [4928, 4934, "Concept"], [5065, 5072, "Concept"], [5099, 5105, "Concept"], [5185, 5191, "Concept"], [5306, 5312, "Concept"], [5477, 5484, "Concept"], [5587, 5596, "Concept"], [5718, 5725, "Concept"], [5756, 5763, "Concept"], [5797, 5804, "Concept"], [5811, 5825, "Concept"], [5854, 5860, "Concept"], [5887, 5896, "Concept"], [5964, 5973, "Concept"], [6011, 6017, "Concept"], [6021, 6028, "Concept"], [6046, 6052, "Concept"], [6277, 6283, "Concept"], [6295, 6301, "Concept"], [6347, 6354, "Concept"], [6359, 6374, "Concept"], [6380, 6387, "Concept"], [6399, 6406, "Concept"], [6452, 6463, "Concept"], [6494, 6503, "Concept"], [6507, 6513, "Concept"], [6517, 6524, "Concept"], [6541, 6547, "Concept"], [6555, 6562, "Concept"], [6678, 6685, "Concept"], [6728, 6738, "Concept"], [6745, 6761, "Concept"], [6794, 6801, "Concept"], [6859, 6869, "Concept"], [6888, 6892, "Concept"], [6897, 6906, "Concept"], [6915, 6921, "Concept"], [6938, 6953, "Concept"], [6966, 6986, "Concept"], [6987, 6994, "Concept"], [7090, 7095, "Concept"], [7115, 7121, "Concept"], [7219, 7230, "Concept"], [7354, 7370, "Concept"], [7384, 7390, "Concept"], [7392, 7399, "Concept"], [7413, 7426, "Concept"], [7431, 7443, "Concept"], [7445, 7451, "Concept"], [7562, 7576, "Concept"], [7589, 7595, "Concept"], [7603, 7609, "Concept"], [7856, 7859, "Concept"], [7874, 7877, "Concept"], [7879, 7906, "Concept"], [8002, 8005, "Concept"], [8036, 8043, "Concept"], [8059, 8062, "Concept"], [8095, 8098, "Concept"], [8120, 8123, "Concept"], [8137, 8141, "Concept"], [8152, 8175, "Concept"], [8266, 8273, "Concept"], [8279, 8290, "Concept"], [8331, 8337, "Concept"], [8343, 8354, "Concept"], [8415, 8418, "Concept"], [8476, 8487, "Concept"], [8489, 8498, "Concept"], [8500, 8510, "Concept"], [8512, 8519, "Concept"], [8521, 8533, "Concept"], [8539, 8566, "Concept"], [8574, 8581, "Concept"], [8584, 8591, "Concept"], [8643, 8649, "Concept"], [8667, 8673, "Concept"], [8709, 8715, "Concept"], [8938, 8949, "Concept"], [8953, 8968, "Concept"], [9017, 9032, "Concept"], [9065, 9071, "Concept"], [9083, 9095, "Concept"], [9103, 9115, "Concept"], [9120, 9131, "Concept"], [9142, 9148, "Concept"], [9170, 9178, "Concept"], [9185, 9191, "Concept"], [9210, 9220, "Concept"], [9251, 9257, "Concept"], [9380, 9389, "Concept"], [9393, 9401, "Concept"], [9430, 9436, "Concept"], [9470, 9481, "Concept"], [9490, 9498, "Concept"], [9566, 9577, "Concept"], [9608, 9614, "Concept"], [9661, 9668, "Concept"], [9716, 9732, "Concept"], [9774, 9785, "Concept"], [9798, 9806, "Concept"], [9812, 9818, "Concept"], [9827, 9837, "Concept"], [9838, 9845, "Concept"], [9866, 9875, "Concept"], [9877, 9883, "Concept"], [9943, 9949, "Concept"], [9972, 9978, "Concept"], [10087, 10096, "Concept"], [10244, 10251, "Concept"], [10278, 10296, "Concept"], [10299, 10317, "Concept"], [10341, 10349, "Concept"], [10368, 10378, "Concept"], [10379, 10386, "Concept"], [10404, 10417, "Concept"], [10418, 10427, "Concept"], [10441, 10451, "Concept"], [10452, 10458, "Concept"], [10475, 10482, "Concept"], [10484, 10490, "Concept"], [10584, 10590, "Concept"], [10700, 10715, "Concept"], [10721, 10727, "Concept"], [10797, 10804, "Concept"], [10907, 10913, "Concept"], [10915, 10921, "Concept"], [11017, 11025, "Concept"], [11084, 11090, "Concept"], [11346, 11353, "Concept"], [11377, 11386, "Concept"], [11404, 11413, "Concept"], [11445, 11450, "Concept"], [11474, 11482, "Concept"], [11530, 11537, "Concept"], [11578, 11585, "Concept"], [11615, 11622, "Concept"], [11851, 11867, "Concept"], [12000, 12015, "Concept"], [12020, 12036, "Concept"], [12043, 12047, "Concept"], [12049, 12077, "Concept"], [12110, 12124, "Concept"], [12194, 12208, "Concept"], [12568, 12589, "Concept"], [12591, 12598, "Concept"], [12669, 12677, "Concept"], [12712, 12717, "Concept"], [12761, 12767, "Concept"], [12914, 12920, "Concept"], [13028, 13048, "Concept"], [13061, 13075, "Concept"], [13128, 13150, "Concept"], [13173, 13184, "Concept"], [13277, 13285, "Concept"], [13296, 13302, "Concept"], [13323, 13330, "Concept"], [13340, 13345, "Concept"], [13350, 13359, "Concept"], [13361, 13369, "Concept"], [13371, 13378, "Concept"], [13383, 13391, "Concept"], [13403, 13414, "Concept"], [13415, 13421, "Concept"], [13548, 13552, "Concept"], [13574, 13578, "Concept"], [13691, 13701, "Concept"], [13726, 13732, "Concept"], [13752, 13757, "Concept"], [13772, 13781, "Concept"], [13816, 13822, "Concept"], [13826, 13833, "Concept"], [13848, 13854, "Concept"], [13855, 13864, "Concept"], [13865, 13872, "Concept"], [13874, 13879, "Concept"], [13881, 13889, "Concept"], [13907, 13915, "Concept"], [14058, 14063, "Concept"], [14078, 14082, "Concept"], [14109, 14124, "Concept"], [14214, 14224, "Concept"]], "Comments": []}