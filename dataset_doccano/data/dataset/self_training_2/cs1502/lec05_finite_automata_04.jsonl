{"id": 257, "segment": "self_training_2", "course": "cs1502", "lec": "lec05_finite_automata_04", "text": "Finite Automata 04\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expressions\nA regular expression can be constructed using the following\nrules:\n1\n2\n3\n4\n\n5\n\n6\n\na is a regular expression for some a in the alphabet \u03a3,\n\u03b5 is a regular expression\n\u2205 is a regular expression\nIf R1 and R2 are regular expressions, R1 \u222a R2 is a regular\nexpression\nIf R1 and R2 are regular expressions, R1 \u25e6 R2 or R1 R2 is a\nregular expression\nIf R is a regular expression, R\u2217 is a regular expression\n\nNote that to use rules 4, 5, or 6, you need to have regular\nexpressions R1 , R2 , or R first which can only be constructed\nfrom rules 1, 2, or 3\nThis is a recursive definition\nOnce you get regular expressions, you can apply rules 4, 5, or 6\nmultiple time to obtain more and more regular expressions\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression Examples\nSuppose \u03a3 = {0, 1}\nFrom rule 1, we have:\n0 is a regular expression\n1 is a regular expression\n\nFrom rule 2, we have:\n\u03b5 is a regular expression\n\nFrom rule 3, we have:\n\u2205 is a regular expression\n\nSo far, we have four regular expressions, 0, 1, \u03b5, and \u2205\nFrom rule 4, 0 \u222a 1 is a regular expression\nFrom rule 5, 11 is a regular expression\nFrom rule 6, 0\u2217 is a regular expression\n\nWe can keep building larger and larger regular expressions by\napplying rules 4, 5, and 6 multiple times\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression Examples\n\nSuppose \u03a3 = {0, 1}\nFrom rule 1, 0 and 1 are regular expressions\nFrom rule 4, 0 \u222a 1 is a regular expression\nFrom rule 6, (0 \u222a 1)\u2217 is a regular expression\nFrom rule 5, 01 is a regular expression\nFrom rule 5, 011 is a regular expression\nFrom rule 5, (0 \u222a 1)\u2217 011 is a regular expression\nFrom rule 5, (0 \u222a 1)\u2217 011(0 \u222a 1)\u2217 is a regular expression\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expressions\nIn arithmetic, an arithmetic expression can be used to\nrepresent its object (number)\n5 + 12 is an arithmetic expression\n5 + 12 can be used to represent 17\nWe usually write 5 + 12 = 17\n\nIn theory of computation, a regular expression can be used to\nexpress a language\nLet \u03a3 = {0, 1}\nThe regular expression 0 = {0}\nThe regular expression 1 = {1}\nThe regular expression \u03b5 = {\u03b5}\nThe regular expression \u2205 = { }\nSuppose regular expressions R1 = A and R2 = B for\nlanguages A and B, the regular expression R1 \u222a R2 = A \u222a B\nSuppose regular expressions R1 = A and R2 = B for\nlanguages A and B, the regular expression R1 R2 = AB\nSuppose the regular expression R = A for a language A,\nR \u2217 = A\u2217\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expressions (Other Notations)\n\nR+ is a shorthand notation for RR\u2217 for a regular expression R\nAll strings that are 1 or more concatenations of strings from R\nExamples:\n1+ = 11\u2217\n(0 \u222a 1)+ = (0 \u222a 1)(0 \u222a 1)\u2217\n\nRk is a shorthand notation for the concatenation of k R\u2019s\nwith each other\nExamples:\n15 = 11111\n(0 \u222a 1)3 = (0 \u222a 1)(0 \u222a 1)(0 \u222a 1)\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expressions (By Examples)\n\nA regular expression expresses a language:\n0\u222a1\n0 \u222a 1 = {0} \u222a {1} = {0, 1}\nA language that consists of two strings, 0 and 1\n\n0\u2217\n0\u2217 = {0}\u2217\nRecall that A\u2217 = {x1 x2 . . . xk | k \u2265 0 and each xi \u2208 A}\n{0}\u2217 = {\u03b5, 0, 00, 000, 0000, 00000, . . . }\n0\u2217 expresses the language that consists of all string that\ncontains nothing but 0s including the empty string\n\n(0 \u222a 1)0\u2217\n(0 \u222a 1)0\u2217 = {0, 1} \u25e6 0\u2217 = {0, 1} \u25e6 {\u03b5, 0, 00, 000, . . . }\nRecall that A \u25e6 B = {xy | x \u2208 A and y \u2208 B}\n{0, 1}0\u2217 = {0, 1, 00, 10, 000, 100, 0000, 1000, . . . }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expressions (By Examples)\nA regular expression expresses a language:\n(0 \u222a 1)\u2217\n(0 \u222a 1)\u2217 = {0, 1}\u2217 = {\u03b5, 0, 1, 00, 01, 10, 11, 000, 001, . . . }\nThis is the set of all strings over 0 and 1\nWe generally use \u03a3\u2217 instead of (0 \u222a 1)\u2217\n\n0\u2217 10\u2217\n0\u2217 10\u2217 = {0}\u2217 \u25e6 {1} \u25e6 {0}\u2217\n{0}\u2217 is a language consisting of all strings containing zero or\nmore 0s ({\u03b5, 0, 00, 000, . . . })\n0\u2217 10\u2217 = {w | w contains a single 1}\n\n\u03a3\u2217 1\u03a3\u2217\n\u03a3\u2217 1\u03a3\u2217 = \u03a3\u2217 \u25e6 {1} \u25e6 \u03a3\u2217\n\u03a3\u2217 is the language consisting of all stings over \u03a3\n\u03a3\u2217 1\u03a3\u2217 = {w | w has at least one 1}\n\n\u03a3\u2217 001\u03a3\u2217\n\u03a3\u2217 001\u03a3\u2217 = \u03a3\u2217 \u25e6 {001} \u25e6 \u03a3\u2217\n\u03a3\u2217 001\u03a3\u2217 = {w | w contains the string 001 as a substring}\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expressions (By Examples)\nA regular expression expresses a language:\n1\u2217 (01+ )\u2217\n1\u2217 (01+ )\u2217 = {1}\u2217 \u25e6 (01+ )\u2217\n{1}\u2217 is a language consisting of all strings containing zero or\nmore 1s ({\u03b5, 1, 11, 111, . . . })\n01+ = {0} \u25e6 {1}+ = {0} \u25e6 ({1} \u25e6 {1}\u2217 ) = {01, 011, 0111, . . . }\n(01+ )\u2217 = {01, 011, 0111, . . . }\u2217 =\n{\u03b5, 01, 0101, 01011, 01101, 011011, . . . }\n1\u2217 (01+ )\u2217 = {w | every 0 in w is followed by at least one 1}\n\n(\u03a3\u03a3)\u2217\n\u03a3\u03a3 = \u03a3 \u25e6 \u03a3 = {0, 1} \u25e6 {0, 1} = {00, 01, 10, 11}\n(\u03a3\u03a3)\u2217 = {00, 01, 10, 11}\u2217\n(\u03a3\u03a3)\u2217 = {w | w is a string of even length}\n\n(\u03a3\u03a3\u03a3)\u2217\n\u03a3\u03a3\u03a3 = {0, 1} \u25e6 {0, 1} \u25e6 {0, 1} =\n{000, 001, 010, 011, 100, 101, 110, 111}\n(\u03a3\u03a3\u03a3)\u2217 = {000, 001, 010, 011, 100, 101, 110, 111}\u2217\n(\u03a3\u03a3\u03a3)\u2217 = {w | the length of w is a multiple of 3}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expressions (By Examples)\nA regular expression expresses a language:\n01 \u222a 10\n01 \u222a 10 = ({0} \u25e6 {1}) \u222a ({1} \u25e6 {0}) = {01} \u222a {10} = {01, 10}\n\n0\u03a3\u2217 0 \u222a 1\u03a3\u2217 1 \u222a 0 \u222a 1\n0\u03a3\u2217 0 = {0} \u25e6 \u03a3\u2217 \u25e6 {0} is a set of all string that start and end\nwith 0\n1\u03a3\u2217 1 is a set of all string that start and end with 1\n0\u03a3\u2217 0 \u222a 1\u03a3\u2217 1 \u222a 0 \u222a 1 =\n{w | w starts and ends with the same symbol}\n\n(0 \u222a \u03b5)1\u2217\n0 \u222a \u03b5 = {0} \u222a {\u03b5} = {0, \u03b5}\n1\u2217 = {\u03b5, 1, 11, 111, . . . }\n(0 \u222a \u03b5)1\u2217 = {0, \u03b5} \u25e6 {\u03b5, 1, 11, 111, . . . }\n(0 \u222a \u03b5)1\u2217 = {\u03b5, 0, 01, 011, . . . , 1, 11, 111, . . . }\n(0 \u222a \u03b5)1\u2217 = 01\u2217 \u222a 1\u2217\n\n(0 \u222a \u03b5)(1 \u222a \u03b5) = {0, \u03b5} \u25e6 {1, \u03b5} = {\u03b5, 0, 1, 01}\n1\u2217 \u2205 = {1}\u2217 \u25e6 \u2205 = \u2205\n\u2205\u2217 = {\u03b5}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fOperator Precedences and Identities\nOperator Precedences:\n\u2217\n\nhas the highest precedence.\n\u222a has the lowest precedence.\n\nSome properties:\nR\u222a\u2205=R\nAdding the empty language to any other language will not\nchange it\n\nR\u25e6\u03b5=R\nJoining the empty string to any string will not change it\n\nR \u222a {\u03b5} =\n6 R\nIf R = {0, 1}, R \u222a {\u03b5} = {0, 1, \u03b5} 6= R\n\nR \u25e6 \u2205 6= R\nIf R = {0, 1}, R \u25e6 \u2205 = {0, 1} \u25e6 \u2205\n{0, 1}\u25e6 = {xy | x \u2208 {0, 1} and y \u2208 \u2205} = \u2205\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fExample: Regular Expression\nProblem: Write a program to evaluate a string representing a\nfloating-point number\n72\ntrue\n35.9\ntrue\n20 67\nfalse\n+7.\ntrue\n71a3\nfalse\n-.29\ntrue\n\nSolution\nCreate a DFA that recognize a set of all strings that are valid\nfloating-point numbers and turn it into a program\nIt would be great if there is an easy way to do this\n\nFor now, can we create a regular expression that express the\nset of all valid floating-point representations?\n(+ \u222a \u2212 \u222a \u03b5)(D+ \u222a D+ .D\u2217 \u222a D\u2217 .D+ )\nwhere D = {0, 1, 2, . . . , 9}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression and Finite Automata\n\nNow we know that a regular expression can be used to express\na language\nQuestion: Is language expressed by a regular expression\nregular?\nLet\u2019s try to prove that a regular expression expresses a regular\nlanguage\n\nRecall a regular expression:\nA regular expression is defined recursively (those 6 rules)\nSo, we need to show that a regular expressions constructed\nfrom those rules expresses a regular language\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fLemma 1.55\nFrom rule 1: a for some a in the alphabet \u03a3 is a regular\nexpression\nWe need to show that a language expressed by a regular\nexpression generated from this rule is regular\nGiven a symbol a \u2208 \u03a3, according to this rule, a is a regular\nexpression\na expresses the language {a}\nIs {a} regular?\nCan we construct a DFA that recognizes the language {a}?\n\nThis is an NFA that recognizes {a}\na\nq1\n\nq2\n\nFor every NFA, there is an equivalent DFA\nThus {a} is a regular language\nTherefore, a expresses a regular language\n\nA regular expression constructed by rule 1 expresses a regular\nlanguage\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fLamma 1.55\nFrom rule 2: \u03b5 is a regular expression\nAgain, we need to show that a language expressed by \u03b5 is\nregular\nRecall that \u03b5 expresses the language {\u03b5}\nIs {\u03b5} regular?\nCan we construct a DFA that recognizes the language {\u03b5}?\n\nThis is an NFA that recognizes {\u03b5}\nq1\n\nFor every NFA, there is an equivalent DFA\nThus, {\u03b5} is a regular language\nTherefore, \u03b5 expresses a regular language\n\nA regular expression constructed by rule 2 expresses a regular\nlanguage\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fLamma 1.55\nFrom rule 3: \u2205 is a regular expression\nAgain, we need to show that a language expressed by \u2205 is\nregular\nRecall that \u2205 expresses the language { }\nIs { } regular?\nCan we construct a DFA that recognizes the language { }?\n\nThis is an NFA that recognizes { }\nq\n\nFor every NFA, there is an equivalent DFA\nThus, \u2205 is a regular language\nTherefore, \u2205 expresses a regular language\n\nA regular expression constructed by rule 3 expresses a regular\nlanguage\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fLemma 1.55\nRecall that you cannot use rules 4, 5, and 6 to create a new\nregular expressions unless you already have some regular\nexpressions created by rules 1, 2, or 3\nWe already prove that each regular expression created by rules\n1, 2, or 3 expresses a regular language\nFor rule 4:\nR1 and R2 are regular expressions that express regular\nlanguages (from rules 1, 2, or 3)\nRecall that R1 = A and R2 = B for some languages A and B,\nR1 \u222a R2 = A \u222a B\nWe already prove that if A and B are regular languages, A \u222a B\nis regular (regular language is closed under union operation)\nThus, a regular expression obtain by rule 4 express a regular\nlanguage\n\nSame for rules 5 and 6\nRegular language is closed under concatenation and star\noperations\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fLemma 1.55\n\nLemma 1.55\nIf a language is described by a regular expression, then it is regular.\nWe just proved the above lemma\nBy proving the above lemma, it gives us a tool to construct\nan NFA that recognizes the language expressed by a regular\nexpression\nBased on how we prove that regular language is closed under\nunion, concatenation, and star operations\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expressions to NFA\n\nSuppose we want to construct an NFA that recognizes the\nlanguage expressed by the regular expression (ab \u222a a)\u2217 where\n\u03a3 = {a, b}\nWe need to apply those 6 rules to obtain the regular expression\nThis will be a guideline step-by-step to construct an NFA\n\nHere are steps to construct the regular expression (ab \u222a a)\u2217\n1\n2\n3\n4\n5\n\na is a regular expression (rule 1)\nb is a regular expression (rule 1)\nab is a regular expression (rule 5 with (1) and (2))\nab \u222a a is a regular expression (rule 4 with (3) and (1))\n(ab \u222a a)\u2217 is a regular expression (rule 6 with (4))\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\n\nb\n\nab\n\nab U a\n\n(ab U a) *\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\na\n\nb\n\nab\n\nab U a\n\n(ab U a) *\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\na\nb\nb\n\nab\n\nab U a\n\n(ab U a) *\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\na\nb\nb\na\nab\n\nab U a\n\n(ab U a) *\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\na\nb\nb\na\nab\n\nab U a\n\n(ab U a) *\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\nb\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\na\nb\nb\na\nab\n\nab U a\n\n(ab U a) *\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\u03b5\n\nb\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\na\nb\nb\na\nab\n\nab U a\n\n(ab U a) *\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\u03b5\n\nb\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\na\nb\nb\na\n\n\u03b5\n\nb\n\na\n\n\u03b5\n\nb\n\nab\n\nab U a\n\n(ab U a) *\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\na\nb\nb\na\n\n\u03b5\n\nb\n\na\n\n\u03b5\n\nb\n\nab\n\nab U a\na\n\n(ab U a) *\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\na\nb\nb\na\n\n\u03b5\n\nb\n\na\n\n\u03b5\n\nb\n\nab\n\n\u03b5\nab U a\na\n\u03b5\n\n(ab U a) *\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\na\nb\nb\na\n\n\u03b5\n\nb\n\na\n\n\u03b5\n\nb\n\n\u03b5\n\nb\n\nab\n\n\u03b5\nab U a\na\n\u03b5\n\na\n\u03b5\n(ab U a) *\na\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\na\nb\nb\na\n\n\u03b5\n\nb\n\na\n\n\u03b5\n\nb\n\n\u03b5\n\nb\n\nab\n\n\u03b5\nab U a\na\n\u03b5\n\na\n\u03b5\n(ab U a) *\n\n\u03b5\na\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (ab \u222a a)\u2217 to an NFA.\na\na\nb\nb\na\n\n\u03b5\n\nb\n\na\n\n\u03b5\n\nb\n\nab\n\n\u03b5\nab U a\na\n\u03b5\n\u03b5\n\na\n\u03b5\n(ab U a) *\n\n\u03b5\na\n\u03b5\n\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\u03b5\n\nb\n\n\fRegular Expressions to NFA\n\nSuppose we want to construct an NFA that recognizes the\nlanguage expressed by the regular expression (a \u222a b)\u2217 aba\nwhere \u03a3 = {a, b}\nAgain, we need to apply those 6 rules to get a guideline\nHere are steps to construct the regular expression (a \u222a b)\u2217 aba\n1\n2\n3\n4\n5\n6\n7\n\na is a regular expression (rule 1)\nb is a regular expression (rule 1)\na \u222a b is a regular expression (rule 4 with (1) and (2))\n(a \u222a b)\u2217 is a regular expression (rule 6 with (3))\nab is a regular expression (rule 5 with (1) and (2))\naba is a regular expression (rule 5 with (5) and (1))\n(a \u222a b)\u2217 aba is a regular expression (rule 5 with (4) and (6))\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\n\nb\n\naUb\n\n(a U b) *\n\naba\n\n(a U b) *aba\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\n\nb\n\naUb\n\n(a U b) *\n\naba\n\n(a U b) *aba\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\nb\nb\n\naUb\n\n(a U b) *\n\naba\n\n(a U b) *aba\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\nb\nb\na\naUb\n\n(a U b) *\n\naba\n\n(a U b) *aba\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\nb\nb\na\naUb\nb\n\n(a U b) *\n\naba\n\n(a U b) *aba\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\nb\nb\n\n\u03b5\n\na\n\naUb\nb\n\u03b5\n\n(a U b) *\n\naba\n\n(a U b) *aba\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\nb\nb\n\n\u03b5\n\na\n\naUb\nb\n\u03b5\n\n\u03b5\n\na\n\n(a U b) *\nb\n\u03b5\n\naba\n\n(a U b) *aba\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\nb\nb\na\n\n\u03b5\naUb\n\nb\n\u03b5\n\n\u03b5\n\na\n\n\u03b5\n(a U b) *\nb\n\u03b5\n\naba\n\n(a U b) *aba\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\nb\nb\na\n\n\u03b5\naUb\n\nb\n\u03b5\n\u03b5\n\u03b5\n\na\n\n\u03b5\n(a U b) *\nb\n\u03b5\n\u03b5\n\naba\n\n(a U b) *aba\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\nb\nb\na\n\n\u03b5\naUb\n\nb\n\u03b5\n\u03b5\na\n\n\u03b5\n\u03b5\n(a U b) *\n\nb\n\u03b5\n\u03b5\na\n\n\u03b5\n\nb\n\n\u03b5\n\na\n\naba\n\n(a U b) *aba\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\nb\nb\na\n\n\u03b5\naUb\n\nb\n\u03b5\n\u03b5\na\n\n\u03b5\n\u03b5\n(a U b) *\n\nb\n\u03b5\n\u03b5\na\n\nb\n\n\u03b5\n\n\u03b5\n\na\n\naba\n\n\u03b5\n\u03b5\n\na\n\n\u03b5\n(a U b) *aba\nb\n\u03b5\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\nb\nb\na\n\n\u03b5\naUb\n\nb\n\u03b5\n\u03b5\na\n\n\u03b5\n\u03b5\n(a U b) *\n\nb\n\u03b5\n\u03b5\na\n\n\u03b5\n\nb\n\n\u03b5\n\na\n\na\n\n\u03b5\n\nb\n\naba\n\n\u03b5\n\u03b5\n\na\n\n\u03b5\n(a U b) *aba\nb\n\u03b5\n\u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\u03b5\n\na\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\nb\nb\na\n\n\u03b5\naUb\n\nb\n\u03b5\n\u03b5\na\n\n\u03b5\n\u03b5\n(a U b) *\n\nb\n\u03b5\n\u03b5\na\n\nb\n\n\u03b5\n\n\u03b5\n\na\n\n\u03b5\n\nb\n\naba\n\n\u03b5\n\u03b5\n\na\n\n\u03b5\n(a U b) *aba\nb\n\u03b5\n\n\u03b5\n\u03b5\n\u03b5\n\n\u03b5\na\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\u03b5\n\na\n\n\fRegular Expression to NFA\nConvert the regular expression (a \u222a b)\u2217 aba to an NFA.\na\na\nb\nb\na\n\n\u03b5\naUb\n\nb\n\u03b5\n\u03b5\na\n\n\u03b5\n\u03b5\n(a U b) *\n\nb\n\u03b5\n\u03b5\na\n\nb\n\n\u03b5\n\n\u03b5\n\na\n\n\u03b5\n\nb\n\naba\n\n\u03b5\n\u03b5\n\na\n\n\u03b5\n(a U b) *aba\nb\n\u03b5\n\n\u03b5\n\u03b5\n\u03b5\n\n\u03b5\na\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\u03b5\n\na\n\n\fUseful Tool\n\nRecall that the set of all valid floating-point representation is\nexpressed by a regular expression\n(+ \u222a \u2212 \u222a \u03b5)(D+ \u222a D+ .D\u2217 \u222a D\u2217 .D+ )\nwhere\nD = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n\nNow, we can easily convert the above regular expression into\nan NFA, construct an equivalent DFA, and turn the DFA into\na program\nThis process is done by computer\nOften used in compiler\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\fConclusion\n\nA regular expression expresses a regular language\nWe have a tool to convert a regular expression into an\nequivalent NFA\nWhat is next?\nWe still do not know whether every regular language can be\nexpressed by a regular expression\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 04\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}