{"id": 263, "segment": "self_training_2", "course": "cs1502", "lec": "lec20_reducibility_as_methods", "text": "Turing Machines as Methods\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Turing Machine\n\nThe language of a Turing machine M denoted by L(M ) is the\nset of all strings accepted by the Turing machine\nGiven a Turing machine M and a string w\nIf M accepts w, w \u2208 L(M )\nIf M rejects w, w 6\u2208 L(M )\nIf M loops indefinitely on w, w 6\u2208 L(M )\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\n\nLets think about Turing machines as Java methods with the\nfollowing signature:\nboolean method_name(String x)\n\nLets\ntrue in Java means accept\nfalse in Java means reject\n\nNow, we can define the language of a method as the set of\nall strings that the method returns true\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\nConsider the following method\nboolean M1(String x)\n{\nreturn true;\n}\n\nWhat is the language of the above method?\nObviously, M1() returns true no matter what argument of\ntype String you use\nThus, the language of the method M1() is \u03a3\u2217\n\nThe above method is pretty much the same as the Turing\nmachine below:\nM1 = \u201cOn input x:\n1\n\naccept\u201d\n\nNote that L(M1 ) = \u03a3\u2217\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\nConsider the following method\nboolean M2(String x)\n{\nreturn false;\n}\n\nWhat is the language of the above method?\nObviously, M2() returns false no matter what argument of\ntype String you use\nThus, the language of the method M2() is \u2205\n\nThe above method is pretty much the same as the Turing\nmachine below:\nM2 = \u201cOn input x:\n1\n\nreject\u201d\n\nNote that L(M2 ) = \u2205\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\n\nConsider the following method\nboolean M3(String x)\n{\nif(x.equals(\"\"))\nreturn true;\nelse\nreturn false;\n}\n\nWhat is the language of the above method?\nThe above method only returns true if we call use the empty\nstring as the argument\nFor any other arguments that are not the empty string, it will\nalways return false\nThus, the language of the method M3() is {\u03b5}\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\n\nThe method M3() is pretty much the same as the Turing\nmachine below:\nM3 = \u201cOn input x:\n1\n2\n\nIf x = \u03b5, accept\nIf x 6= \u03b5, reject\n\nNote that L(M3 ) = {\u03b5}\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\n\nSuppose we have the method named is 0n1n with the\nfollowing signature:\nboolean is_0n1n(String s)\n\nThis method returns true if the string s is in the form of 0n 1n\nfor any n \u2265 0\nIt returns false for any other strings\nExamples:\nis 0n1n(\"\") is true\nis 0n1n(\"0101\") is false\nis 0n1n(\"01\") is true\nis 0n1n(\"00111\") is false\nis 0n1n(\"000111\") is true\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\n\nConsider the following method\nboolean M4(String x)\n{\nboolean p = is_0n1n(x);\nif(p)\nreturn true;\nelse\nreturn false;\n}\n\nWhat is the language of the above method?\nObviously, M4() returns true for any argument of type\nString of the form 0n 1n for any n \u2265 0\nFor any other strings, it will return false\nThus, the language of the method M4() is {0n 1n | n \u2265 0}\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\n\nThe method M4() is pretty much the same as the Turing\nmachine below:\nM4 = \u201cOn input x:\n1\n2\n\nIf x is in the form of 0n 1n , accept\nIf x is not in the form of 0n 1n , reject\n\nThe language of the above machine is\nL(M4 ) = {0n 1n | n \u2265 0}\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\nConsider the following method\nboolean M5(String x)\n{\nwhile(true);\nreturn true;\n}\n\nWhat is the language of the above method?\nObviously, no matter what argument of type String you use\nwhen call the above method, it will not return\nIt loops indefinitely on all arguments.\nThus, the language of the method M5() is \u2205\n\nThe above method M5() is pretty much the same as the\nTuring machine below:\nM5 = \u201cOn input x:\n1\n2\n\nEnter infinite loop\naccept\u201d\n\nNote that L(M5 ) = \u2205\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\nNow suppose we have a method named M() and and a string\nnamed w as follows:\nboolean M(String s) {...}\nString w = \"...\";\n\nNote that we have no idea what is the method M()\nIt just a method that takes an argument of type String and\nreturns boolean\nJust imagine that it can be any method with the above\nsignature\nCan even thing of M as a reference variable that refers to a\nmethod of the above signature\n\nObviously, w is a variable of type String.\nWhat if we call M(w)?\nWe do not know whether it will return true, or false\nIt may not return at all (loops indefinitely)\nWe have no idea what are M and w\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\nConsider the following method\nboolean N1(String x)\n{\nboolean p = M(w);\nif(p)\nreturn true;\nelse\nreturn false;\n}\n\nIn this case, we have no idea about the language of the\nmethod N1()\nThis is because have no idea what does M(w) return when\ncalled\nIt may return true\nIt may return false\nIt may not return at all (M(w) loops indefinitely)\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\nSuppose M(w) returns true, we can replace M(w) by true as\nshown below:\nboolean N1(String x)\n{\nboolean p = true;\nif(p)\nreturn true;\nelse\nreturn false;\n}\n\n// Used to be boolean p = M(w);\n\nNow, what is the language of the above method N1?\nThe language of the method N1 is \u03a3\u2217\nThis is under the assumption that M(w) returns true\n\nSo, here is what we can say about the method N1() so far:\nIf M(w) returns true, the language of N1() is \u03a3\u2217\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\nSuppose M(w) returns false, we can replace M(w) by false\nas shown below:\nboolean N1(String x)\n{\nboolean p = false;\nif(p)\nreturn true;\nelse\nreturn false;\n}\n\n// Used to be boolean p = M(w);\n\nNow, what is the language of the above method N1?\nThe language of the method N1() is \u2205\nThis is under the assumption that M(w) returns false\n\nSo, here is what we can say about the method N1() so far:\nIf M(w) returns true, the language of N1() is \u03a3\u2217\nIf M(w) returns false, the language of N1() is \u2205\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\nSuppose M(w) does not return at all\nIt loops indefinitely when called\n\nSince N1() calls M(w) and M(w) loops indefinitely, N1() also\nloops indefinitely.\nIn this case, we can insert the statement while(true); as\nshown below\nboolean N1(String x)\n{\nwhile(true);\nboolean p = M(w);\nif(p)\nreturn true;\nelse\nreturn false;\n}\n\n// Inserted to make N1 loops indefinitely\n\nNow, what is the language of the above method N1?\nSince N1() does not return true on any argument of type\nString\nThe language of the method N1 is \u2205\n\nThis is under the assumption that M(w) loops indefinitely\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\nSo, here is what we can say about the method N1() below:\nboolean N1(String x)\n{\nboolean p = M(w);\nif(p)\nreturn true;\nelse\nreturn false;\n}\n\nIf M(w) returns true, the language of N1() is \u03a3\u2217\nIf M(w) returns false, the language of N1() is \u2205\nIf M(w) loops indefinitely, the language of N1() is \u2205\n\nThe behavior of the methods N1() depends on what happen\nwhen M(w) is called\nBut again, we have no idea what are M() and w\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\fLanguage of a Method\nGiven a Turing machine M and a string w, the method N1()\nis pretty much the same as the Turing machine below:\nN1 = \u201cOn input x:\n1\n2\n\nRun M on input w\nIf M accepts w, accept\nIf M rejects w, reject\u201d\n\nSimilarly, we have no idea what is the language of N1 but at\nleast we know that\nIf M accepts w, L(N1 ) = \u03a3\u2217\nIf M rejects w, L(N1 ) = \u2205\nIf M loops indefinitely on w, L(N1 ) = \u2205\n\nWe can also conclude that\nIf M accepts w, the language of N1 is not empty\nIf M does not accept w, the language of N1 is empty\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machines as Methods\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}