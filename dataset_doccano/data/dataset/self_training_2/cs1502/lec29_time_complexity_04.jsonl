{"id": 268, "segment": "self_training_2", "course": "cs1502", "lec": "lec29_time_complexity_04", "text": "Time Complexity 04\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fNP-COMPLETENESS\n\nNP-Complete is a class of problems discovered by Cook and\nLevin\nComplexity of these problems are closely related\nIf a polynomial time algorithm exists for a problem in this\nclass, problems of entire class can be solved in polynomial time\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fPolynomial Time Reducibility\nDefinition 7.28\nA function f : \u03a3\u2217 \u2192 \u03a3\u2217 is a polynomial time computable\nfunction if some polynomial time Turing machine M exists that\nhalts with just f (w) on its tape, when started on any input w.\nDefinition 7.29\nLanguage A is polynomial time mapping reducible, or simply\npolynomial time reducible, to language B, written A \u2264p B, if a\npolynomial time computable function f : \u03a3\u2217 \u2192 \u03a3\u2217 exists, where\nfor every w,\nw \u2208 A \u2194 f (w) \u2208 B.\nThe function f is called the polynomial time reduction of A to\nB.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fPolynomial Time Reducibility\n\nRecall the property from previous slide:\nw \u2208 A \u2194 f (w) \u2208 B\nThis is exactly the same as mapping reducibility property\nRecall that if A \u2264m B and B is decidable, A is decidable\nA \u2264p B gives you exactly the same as A \u2264m B with one\nextra property that the reduction f runs in polynomial time\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fPolynomial Time Reducibility\n\nTheorem 7.31\nIf A \u2264p B and B \u2208 P , then A \u2208 P .\nIf you can convert an instance of a problem A into an\ninstance of a problem B in polynomial time\nIf the problem B can be solved in polynomial time\nThe problem A can be solved in polynomial time\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fPolynomial Time Reducibility\nTheorem 7.31\nIf A \u2264p B and B \u2208 P , then A \u2208 P .\nProof:\nAssume that A \u2264p B\nThere exists a polynomial time reduction f satisfying:\nw \u2208 A \u2194 f (w) \u2208 B\n\nAssume that B \u2208 P\nThere exists a TM MB that decides B\nMB runs in polynomial time\n\nWe need to show that we can decide A in polynomial time\nNeed a TM MA that decides A in polynomial time\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fPolynomial Time Reducibility\n\nThis TM MA decides A:\nMA = \u201cOn input w:\n1\n\n2\n3\n\nCompute f (w) where f is a polynomial time reduction from A\nto B.\nRun MB (a decider of B) on f (w).\nIf MB accepts f (w), accept. If MB rejects f (w), reject.\u201d\n\nProve that MA is a decider for A:\nw\u2208A\nw 6\u2208 A\n\nf (w) \u2208 B\nf (w) 6\u2208 B\n\nMB accepts f (w)\nMB rejects f (w)\n\nMA accepts w\nMA rejects w\n\nSince f runs in polynomial time and MB can decide B in\npolynomial time, MA runs in polynomial time\nSince MA decides A in polynomial time, A \u2208 P\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fSatisfiability Problem\n\nA formula \u03c6 can be construed from boolean variables and\nboolean operators (\u2227, \u2228, and \u00ac)\nSometimes we use x instead of \u00acx for a boolean variable x\nFor simplicity, this textbook uses 1 for true and 0 for false\n\nFor example, \u03c6 = (x \u2227 y) \u2228 (x \u2227 z)\nA formula is satisfiable if there exists an assignment of 0s\nand 1s to the variables which makes the formula evaluate to 1\nIn the above example, \u03c6 is 1 when x = 0, y = 1, and z = 0.\n\nThe satisfiability problem is defined formally as follows:\nSAT = {h\u03c6i | \u03c6 is a satisfiable Boolean formula}\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fConjunctive Normal Form (CNF)\nWe will use a special form of boolean formula called\nConjunctive Normal Form (cnf)\nA literal is a Boolean variable or a negation of a boolean\nvariable, as in x or x\nA clause is several literals connected with \u2228s\n(x1 \u2228 x2 \u2228 x3 \u2228 x4 )\nA cnf-formula comprises several clauses connected with \u2227s\n(x1 \u2228 x2 \u2228 x3 \u2228 x4 ) \u2227 (x3 \u2228 x5 \u2228 x6 ) \u2227 (x3 \u2228 x6 )\nA 3cnf-formula is a cnf-formula where all the clauses have\nexactly three literals, as in\n(x1 \u2228 x2 \u2228 x3 ) \u2227 (x3 \u2228 x5 \u2228 x6 ) \u2227 (x3 \u2228 x6 \u2228 x4 ) \u2227 (x4 \u2228 x5 \u2228 x6 )\nLet 3SAT = {h\u03c6i | \u03c6 is a satisfiable 3cnf-formula}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\f3SAT \u2264p CLIQUE\n\nIs 3SAT \u2264p CLIQUE ?\nWe need to create a polynomial time reduction\nf : \u03a3\u2217 \u2192 \u03a3\u2217 such that\nw \u2208 3SAT \u2194 f (w) \u2208 CLIQUE\nRecall 3SAT and CLIQUE :\n3SAT = {h\u03c6i | \u03c6 is a satisfiable 3cnf-formula}\nCLIQUE = {hG, ki | G is an undirected graph with a k-clique}\n\nThese are two totally different problems\nWe need to convert h\u03c6i to hG, ki such that \u03c6 is satisfiable if\nand only if graph G contains k-clique for some k\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\f3SAT \u2264p CLIQUE\nA 3cnf-formula is of the form \u03c6 = c1 \u2227 c2 \u2227 . . . cn for some\nn\u22651\n\u03c6 is evaluated to 1 if ci = 1 for every 1 \u2264 i \u2264 n\nEvery clause ci in \u03c6 depends on other clauses cj in \u03c6 to be 1\nto make \u03c6 evaluated to 1\nEach clause c in a 3cnf-formula is of the form\nc = (xp \u2228 xq \u2228 xr )\nfor literals xp , xq , and xr\nThe clause c is evaluated to 1 if one of its literal is 1\nIf a literal in a clause is 1, for \u03c6 to be evaluated to 1, it\ndepends on at least one literal in other clauses to be 1\nNote that it cannot depend on its negation literals\nIt does not depend on the other two literals in its clause since\nits clause is already evaluated to 1\n\nThis create relations among n literals (one from each clause)\nwhich can be represented using edges in an indirected graph\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\f3SAT \u2264p CLIQUE\nLet \u03c6 be a formula with k clauses as\n\u03c6 = (a1 \u2228 b1 \u2228 c1 ) \u2227 (a2 \u2228 b2 \u2228 c2 ) \u2227 \u00b7 \u00b7 \u00b7 \u2227 (ak \u2228 bk \u2228 ck )\nNodes in G are organized in k groups of tree nodes each call\ntriples\nEach triple corresponds to one of the clauses in \u03c6\nEach node in a triple corresponds to a literal in its associated\nclause\nEdges connect every two nodes in G except the following:\nNo edge among nodes in the same triple\nNo edge is present between two nodes with contradictory\nlabels, as in x2 and x2\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\f3SAT \u2264p CLIQUE\nx1\n\nx2\n\nx2\n\nx1\n\nx1\n\nx1\n\nx2\n\nx2\n\nx2\n\n\u03c6 = (x1 \u2228 x1 \u2228 x2 ) \u2227 (x1 \u2228 x2 \u2228 x2 ) \u2227 (x1 \u2228 x2 \u2228 x2 )\n3SAT \u2264p CLIQUE\nIf a boolean 3cnf formular \u03c6 with k clauses is satisfiable, the\ngraph converted from \u03c6 will contain k clique\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\f3SAT \u2264p CLIQUE\nIf \u03c6 is satisfiable, there exists an assignment that makes \u03c6 = 1\nFor each clause, select exactly one true literal based on the\nassignment\nIf there are k clauses, selected literals form k-clique\n\nIf graph G has a k-clique\nEach node in k-clique corresponds to a node (literal) in a triple\n(clause)\nAssign true to those literals\n\nRecall the theorem 7.31:\nIf A \u2264p B and B \u2208 P , then A \u2208 P\nIf we can solve CLIQUE in polynomial time, we can solve\n3SAT in polynomial time by simply convert h\u03c6i to hG, ki (in\npolynomial time) and then solve it\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fNP-Completeness\n\nRecall that NP-Complete is a class of problems that are\nclosely related\nIf you can solve one problem in this class in polynomial time,\nall problems in this class can be solved in polynomial time\nDefinition 7.34\nA language B is NP-Complete if it satisfies two conditions:\n1\n\nB is in NP , and\n\n2\n\nEvery language A in NP is polynomial time reducible to B.\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fNP-Completeness\n\nIn other words, to show that a language B is NP-Complete\nwe need to show the following:\n1\n\nShow that B is in NP which can be done by one of the\nfollowing:\n1\n2\n\n2\n\nShow a polynomial time verifier V for B, or\nShow a NTM N that decide B in polynomial time\n\nShow that every language A in NP is polynomial time\nreducible to B\nShow an polynomial time reduction f : \u03a3\u2217 \u2192 \u03a3\u2217 satisfying\nw \u2208 A \u2194 f (w) \u2208 B\nfor every language A \u2208 NP\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fSAT is NP-Complete\nSo, to show that SAT is NP-Complete, we need to show the\nfollowing:\n1\n\nSAT \u2208 NP\nSimply construct a NTM that generates all possible\nassignments\nIf one of them evaluated to 1, accept\n\n2\n\nShow that a every language A in NP is polynomial time\nreducible to SAT\nUnfortunately, there are a lot of languages in NP\nBut if we have an NP-Complete language B\nB is in NP\nEvery language A \u2208 NP , A \u2264p B\nIf we can show that B \u2264p SAT , every language A \u2208 NP ,\nA \u2264p SAT\nBut we do not have an NP-Complete problem yet\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fSAT is NP-Complete\n\nSuppose a language A is in NP\nThere exists a NTM M that decides A in polynomial time\n\nNote that we do not specify what is the language A and what\nis the description of NTM M\nThe language A can be any language that is in NP and M is\nan NTM that decides A in polynomial time\n\nWhat we need is to show that A \u2264p SAT?\nSince we do not know what is the language A, we cannot\nsimply use the description of A\nEven though we do not have the description of NTM M but\nwe know the following:\nM is a nondeterministic Turing machine\nNTM M is a decider for the language A\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fSAT is NP-Complete\nAbout NTM M that decides A\nw\u2208A\nthe accepting computation\nIf M accepts w\nhistory for M on input w exists\nIf M rejects w\nw 6\u2208 A\nthe accepting computation history\nfor M on input w does not exists\n\nThis is an NTM, there can be multiple computation histories\nWe need to use reduction via computation histories\nConvert computation histories of M on input w to a formula \u03c6\nsuch that\nIf the accepting computation history for M on input w exists,\n\u03c6 is satisfiable (\u03c6 \u2208 SAT)\nIf the accepting computation history for M on input w does\nnot exists, \u03c6 is not satisfiable (\u03c6 6\u2208 SAT)\n\nCook-Levin Theorem shows the method describe above and\nconclude that SAT is NP-Complete.\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\f3SAT is NP-Complete\n\nSince we already know that SAT is NP-Complete, to show\nthat 3SAT is NP-Complete, we need to show the following:\n1\n\n3SAT \u2208 NP :\nConstruct an NTM that generates all possible assignments\nIf one of them evaluate to 1, accept\n\n2\n\nSAT \u2264p 3SAT :\nConvert the formula \u03c6 into a 3cnf f (\u03c6) satisfying\n\u03c6 \u2208 SAT \u2194 f (\u03c6) \u2208 3SAT\nwhere f is a polynomial time reduction from SAT to 3SAT\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fFrom SAT to 3SAT\n\nIf a clause has less than three literal, add one or two literals\nfrom the same clause\nx1\n(x1 \u2228 x1 \u2228 x1 )\n(x1 \u2228 x2 )\n(x1 \u2228 x1 \u2228 x2 )\n(x1 \u2228 x2 )\n(x1 \u2228 x2 \u2228 x2 )\nThese results are logically equivalent with their original clauses\n\nIf a clause has more than tree literals, split it into a number of\nclauses of three literals each.\n(x1 \u2228 x2 \u2228 x3 \u2228 x4 )\n\n(x1 \u2228 x2 \u2228 z) \u2227 (z \u2228 x3 \u2228 x4 )\n\nThis is not logically equivalent\nIt is equivalent in terms of satisfiability\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\fAdditional NP-Complete Problems\n\nCLIQUE is NP-Complete\nWe already show that 3SAT \u2264p CLIQUE\n\nVERTEX \u2212COVER is NP-Complete where\nVERTEX \u2212COVER = {hG, ki | G is an undirected graph that\nhas a k-node vertex cover}\nTextbook shows that 3SAT \u2264p VERTEX \u2212COVER\n\nHAMPATH is NP-Complete\nTextbook shows that 3SAT \u2264p HAMPATH\n\nSUBSET \u2212SUM is NP-Complete\nTextbook shows that 3SAT \u2264p SUBSET \u2212SUM\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTime Complexity 04\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}