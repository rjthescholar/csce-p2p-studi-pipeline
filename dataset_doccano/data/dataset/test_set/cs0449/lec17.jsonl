{"id": 7, "segment": ["test_set", "labeled"], "course": "cs0449", "lec": "lec17", "text": "17\n\nFiles and\nDirectories\n\nIntroduction to\nSystems Software\n\nwilkie\n\nSpring 2019/2020\n\n\fThe Nature of Data\nThe Lord of the Files\n\nSpring 2019/2020\n\n2\n\n\fFiles and Data\n\u2022 What is a file? What is \u201cdata\u201d? What is a binary file vs. a text file?\n\nfiles.c\nSpring 2019/2020\n\nfiles.o\n\ncat.gif\n3\n\n\fFormats\n\u2022 What is a file \u201cformat\u201d? Why are there so many different image types??\n\u25aa All files are flat binary blobs of information. How can we tell them apart?\n\n\u2022 Well, remember ELF? Our executable format?\n\u25aa And the MAGIC NUMBER inside the box?\n\n\u2022 This is one way we differentiate different files.\n\u25aa Archivists and librarians keep track of different\nfile formats when they digitize, store, and retrieve\ndata. They maintain the PRONOM database of formats.\n\n\u2022 Ok. How do we read files?\nSpring 2019/2020\n\n4\n\n\fC Programming: Manipulating Files with stdio\nC(\n\n)\n\n\u2022 Here is a simple C program that creates a\nfile called \u201c\n\u201d and writes a string\nto it, then opens it again to print it out.\n\nOpen for\nwriting\n\n\u2022\n\n:\n\nOpen read-only\n\nOpens a file with the given path. The\nstring that follows is the access mode.\n\u201c \u201d opens for writing; overwrites file.\n\u201c \u201d opens read-only.\n\n\u2022\n\n:\n\nReads to the provided buffer the given\nnumber of bytes. (The \u201c \u201d is the number\nof elements to read if reading an array.)\n\nSeek 0 from end\nSeek to byte 0 \u2022\nPolitely close the file\n\nSpring 2019/2020\n\n:\n\nWrites from the provided buffer the given\nnumber of bytes. (Similar to\n)\n\n\u2022\n\n:\n\nMoves the current file position.\n\n\u2022\n\n:\n\nReturns the current file position.\n\n5\n\n\fC Programming: Manipulating Files with syscalls\nC(\n\n)\n\nOpen for\nwriting\n\n\u2022 Here is a simple C program that creates a\nfile called \u201c\n\u201d and writes a string\nto it, then opens it again to print it out.\n\u2022\n\n:\n\nOpens a file with the given path. The\nvalue that follows is the access mode.\nopens for writing.\ncreates the file, if needed.\nremoves the data in the file.\nopens read-only.\n\n\u2022\n\n:\n\nReads to the provided buffer the given\nnumber of bytes.\n\nOpen read-only\nSeek to end\nSeek to byte 0\nPolitely close the file\n\nSpring 2019/2020\n\n\u2022\n\n:\n\nWrites from the provided buffer the given\nnumber of bytes. (Similar to\n)\n\n\u2022\n\n:\n\nMoves the current file position. Returns\nthe new position.\n\n6\n\n\fEverything is a \u201cfile\u201d\n\u2022 UNIX makes lots of things \u201cfiles\u201d in a\nnon-traditional sense.\n\u2022 Sockets, named pipes, all kinds of exotic\nthings. Directories are files in the\ntraditional sense (stored on disk\nproperly)\n\u2022 You can use the\n,\n, and\nsystem calls with any of these diverse\nset of data streams.\nSpring 2019/2020\n\nThe Internet\n7\n\n\fHow data is stored\u2026\n\u2022 Data in RAM is generally volatile memory.\n\u25aa It disappears after you shut off your computer.\n\n\u2022 So, you want some kind of persistent memory.\n\u25aa Storing data on disk involves creating a physical\nrepresentation of that binary data.\n\n\u2022 Fun fact: there are non-volatile (persistent)\nmain memories in development. (NVRAM)\n\u25aa They are really neat! (and slow!)\n\u25aa But wow they really complicate things!!\n\u2022 Consider the implications.\n\n\u2022 Let\u2019s dig in\u2026\nSpring 2019/2020\n\n8\n\n\fDisks\nYou throw them and dogs chase them. Wait.. no\u2026 don\u2019t do that.\n\nSpring 2019/2020\n\n9\n\n\fFloppy Disks\n\u2022 Data is stored in analog on magnetic material.\n\u25aa I love them.\n\u2022 Buy me a random box for my birthday, please.\n\u2022 When is my birthday? It is everyday.\n\n\u2022 Termed \u201cfloppy\u201d due to the soft, flexible\nnature of the magnetic material.\n\u2022 Wait. Magnets?\n\u2022 How do you store data\u2026 with magnets?\n\u25aa If you\u2019re thinking \u201cthey have two poles\u2026 so they\nare binary natured,\u201d then you are on to something.\nSpring 2019/2020\n\n10\n\n\fRepresenting continuous data\u2026\n\u2022 If you have some (continuous) data, represented by a waveform\u2026\n\u2022 How to transmit/store that wave?\n\u2022 Amplitude modulation\u2026\n\u25aa Send pulses of data sampling the wave.\n\u25aa Data encoded in the amplitude of pulse.\n\n\u2022 Frequency modulation\u2026\n\nDifferent waveform streams\n\n\u25aa Data encoded in variation of frequency\nof pulse. (Yes, like FM radio)\n\u25aa Disks actually store data using a form of this encoding!\nSpring 2019/2020\n\n11\n\n\fData and magnets\u2026 how do they work\n\u2022 We can use magnets to represent\n\nand\n\n(discrete binary)\n\n\u25aa The drive\u2019s read head contains a sensor that detects the \u201cmagnetic flux\u201d\n\u25aa It can sense a change in magnetism over time.\n\u2022 This shows the ideal world, without any modulation:\n\nN\n\nS\n\nS\n\nN\n\nN\n\nN\n\nS\n\nS\n\nS\n\nS\n\nN\n\nN\n\nS\n\nS\n\nS\n\nN\n\nN\n\nN\n\nSpring 2019/2020\n\nNorth and South poles indicate stored values\n\n12\n\n\fThe peril of nature\u2026\n\u2022 The magnetic drives read the change in magnetism.\n\u25aa It is difficult to tell the difference between two consecutive magnets\u2026\n\u25aa This is also because co-aligned magnets HATE being next to each other.\n\u2022 Opposites attract, n\u2019at. (They repel and affect each other\u2019s signal)\n\nN\n\nS\n\nS\n\nN\n\nN\n\nN\n\nS\n\nS\n\nS\n\nS\n\nN\n\nN\n\nS\n\nS\n\nS\n\nN\n\nN\n\nN\n\nSpring 2019/2020\n\n13\n\n\fThe peril of nature\u2026\n\u2022 So, we can give up almost half of our data to add synchronization.\n\u25aa When we read, every other \u201csense\u201d affects the next read.\n\u25aa If we read a \u201c0\u201d and then sense a change, the next bit stays the same.\n\u2022 If we sense a delay (long frequency), it is a \u201c1\u201d and we continue. (Modified-FM Encoding)\n\nSenses delay\n\nSwaps bit\n\nS\n\nN\n\nS\n\nN\n\nS\n\nS\n\nN\n\nS\n\nN\n\nN\n\nS\n\nN\n\nS\n\nN\n\nN\n\nS\n\nN\n\nS\n\nSpring 2019/2020\n\nBounds the amount of \u201c0\u201ds physically stored.\n\n14\n\n\fDisk Drives\n\u2022 Also known as a \u201chard disk\u201d due to the\ninflexible nature of its magnetic material.\n\u2022 Data is also stored digitally using a physical\nmedium, such as, again, magnets.\n\u25aa Uses a similar yet stronger encoding scheme.\n\nPlatter\n\nHead\n\n\u2022 Mechanical parts.\n\u25aa Can read random access, but it is slower than\nreading data sequentially (in physical order).\n\n\u2022 Bits are hard\u2026 let\u2019s start abstracting\u2026\nSpring 2019/2020\n\n15\n\n\fThe platter matters:\n\u2022 Magnetic disk is represented by a set of\nstacked platters with magnetic bits.\n\u2022 A cylinder is a subdivision of platters (a\ntrack is such a subdivision on a single\nplatter.)\n\u2022 A sector is a subdivision of a\ncylinder/track.\n\u25aa You typically read information from a\ndisk in units of sectors.\n\u25aa Files are, generally, a set of sectors.\nSpring 2019/2020\n\nSector\nCylinder\n\n16\n\n\fMaking heads turn (actually, they don\u2019t turn at all)\n\u2022 Magnetic disk is represented by a set of\nstacked platters with magnetic bits.\n\u25aa There may be several platters.\n\u25aa Each read by at least one head.\n\u25aa Access time is how long it takes to read a sector.\n\n\u2022 As a head moves, it goes to a different cylinder.\n\u25aa As the platter spins, the head reads\na different sector.\n\n\u2022 You can potentially read multiple sectors in\nparallel.\n\u25aa So how should we layout data on disk to take\nadvantage of this?\nSpring 2019/2020\n\n17\n\n\fMaking best use of sequential access\n\u2022 Seek time is the time it takes for the head to get into\nposition. Latency: the time for the platter to spin.\n\u25aa Data is located at a two-dimensional coordinate\non a spinning surface.\n\u2022 so the math is not trivial.\n\n\u2022 Seek time is relative to the current\nposition of the head.\n\u25aa The closer the next bit of data you need\u2026\n\u2022 The sooner it will get there.\n\n\u2022 So\u2026 to reduce the seek time to nil\u2026\n\u25aa We position adjacent data in the same\ncylinder and respective sector.\n\u25aa Next set goes into subsequent sector. Heads don\u2019t move; the platters spin.\nSpring 2019/2020\n\n18\n\n\fAin\u2019t no platter like a hard disk platter \u2018cause a hard disk platter don\u2019t stop\n\n\u2022 Seek time is the time it takes for the head to get into\nposition. Latency: the time for the platter to spin.\n\u25aa Data is located at a two-dimensional coordinate\non a spinning surface.\n\u2022 so the math is not trivial.\n\n\u2022 Seek time is relative to the current\nposition of the head.\n\u25aa The closer the next bit of data you need\u2026\n\u2022 The sooner it will get there.\n\n\u2022 Here, the head does not have to move at\nall and blocks 0 and 1 are read easily.\n\u25aa Yet, to read block 2, we have to wait for the platter\nto completely spin back around!! Seek time is zero, but maximum latency loss.\nSpring 2019/2020\n\n19\n\n\fAin\u2019t no platter like a hard disk platter \u2018cause a hard disk platter don\u2019t stop\n\n\u2022 Seek time is the time it takes for the head to get into\nposition. Latency: the time for the platter to spin.\n\u25aa Data is located at a two-dimensional coordinate\non a spinning surface.\n\u2022 so the math is not trivial.\n\n\u2022 Seek time is relative to the current\nposition of the head.\n\u25aa The closer the next bit of data you need\u2026\n\u2022 The sooner it will get there.\n\n\u2022 Yikes! Blocks are in different cylinders\nand subsequent blocks are behind the head.\n\u25aa Worst case! Latency and seek time really suffer.\n\u25aa Need to keep data in order! How do we organize data on disk?\nSpring 2019/2020\n\n20\n\n\fFile Systems\nYet another abstraction\u2026 moving toward applications.\n\nSpring 2019/2020\n\n21\n\n\fFile Systems\n\u2022 There are many ways of representing files on the disks themselves.\n\u2022 As you know, you are familiar with:\n\u25aa Files having names!\n\u25aa Directories/folders for organization\n\u25aa Perhaps special files such as symbolic-links/shortcuts\n\n\u2022 A file system entails describing how we represent:\n\u25aa File data (of course)\n\u25aa The location of the file (a file path)\n\u25aa Meta data about the file (what kind of file?)\n\u25aa Access control (who can access the file)\nSpring 2019/2020\n\n22\n\n\fFile Metadata\n\u2022 There is a long list of possible\nmetadata associated with files:\n\u25aa The file size.\n\u25aa The file name.\n\u25aa When it was last accessed.\n\u25aa Who created it and when.\n\n\u2022 And access control:\n\u25aa Who can read it.\n\u25aa Who can write it.\n\u25aa Who can run it.\n\nSpring 2019/2020\n\n23\n\n\fLinux/UNIX\n\nSpring 2019/2020\n\nmetadata:\n\n24\n\n\fOperating Systems and Files\n\u2022 The\nfunction returns a file descriptor, an integer that identifies\nthe open file in the process.\n\u25aa Every process can have open files, but none are shared across processes.\n\n\u2022 On Linux/UNIX, some file descriptors are established automatically\nfor every process by the shell:\n\u25aa\n\u25aa\n\u25aa\n\n\u2013 the output file (can be a file on disk! Recall terminal redirection.)\n\u2013 a file for error output.\n\u2013 the input file (could be a file on disk\u2026 or user input in the terminal.)\n\n\u2022 The OS maintains a table of open files per process. When it sees a\nsyscall such as\nor\n, it uses that table to determine the file.\nSpring 2019/2020\n\n25\n\n\fProcesses and Files\n\u2022 The OS maintains a table of open files per process. When it sees a\nsyscall such as\nor\n, it uses that table to determine the file.\n\u2022 The table contains a set of\nopen files indexed by the file\ndescriptor.\n\nProcess\n\nstack\n.bss\n.data\n.text\nCPU State A:\nRegisters\n,\n\nPID: 4356\nPage Table A\nSpring 2019/2020\n\nFile Table\n\n\u2022 Several files are generally\nopened for you by the shell.\n\u2022 Each open file maintains its\nown current position.\n\u25aa\n\n/\n\nmanipulate it.\n26\n\n\fI nodes, you nodes, we all nodes for inodes\n\u2022 Files are a set of disk blocks.\n\u25aa Hopefully laid out in a nice order!\n\n\u2022 How do we organize these?\n\u25aa Similar to virtual memory!\n\nmain.c\n\ninode\n\n\u2022 We use a disk block that holds\naddresses to other blocks.\n\u25aa It is a simple table. The blocks that\nmake up the file are in the order\nreflected by the table.\n\n\u2022 An index node is this main block.\n\u25aa Often seen shortened to \u201cinode\u201d\nSpring 2019/2020\n\n27\n\n\fFile systems are about organizing the disk\nmain.c\n\ninode\n\nSpring 2019/2020\n\n28\n\n\fCheap Versioning: WAFL\nHere is WAFL performing \u201csnapshot\u201d backups of files:\nWe can keep around snapshots and back them up\nto remote systems at our leisure.\n\nsnapshot\n\ninode\n\ninode\n\nThe prior\nstate\nremains.\n\nSpring 2019/2020\n\nSmall changes overwrite\nonly parts of the file.\nOnce we back them up, we can\noverwrite the snapshot inode with the current inode.\n\n29\n\n\fHierarchies\n\u2022 Directories maintain strict hierarchical structure for files in the system.\n\u25aa For instance, your home folder is often something like\n\n.\n\n\u2022 An absolute path is a fully-qualified name for a file that indicates\nexactly where in the hierarchy it is located.\n\u25aa Often organized by a human being in some logical way:\n\u2022\n\n\u25aa There are many special paths. OS data structures go in:\n\u2022\n\n\u25aa Devices go in:\n\u2022\n\n\u25aa Use the Linux\n\nSpring 2019/2020\n\ncommand to find out where your system binaries go!\n30\n\n\fDirectories (Folders)\n\u2022 A directory is a file that contains a\nset of named links to other files.\n\nroot\n\n\u25aa The earliest file systems did not even\nhave directories\u2026 just a bunch of files.\n\nhome\n\n\u2022 Groups a set of files together under\na single name.\n\nsys\n\n\u25aa Strictly hierarchical\u2026\n\u25aa Generally, a file can only be within one\ndirectory.\n\u25aa Although, a directory can also be within\na directory\u2026 creating a cascade.\nhw1.doc\n\nhw2.doc\n\nmain.c\n\n/root/home/main.c\nSpring 2019/2020\n\nmain.h\n\n31\n\n\fImplementing Directories\n\u2022 Directories can simply be text files, if you want!\n\u25aa Every line contains a name and then a block address on disk for the inode.\n\n\u2022 Obviously, there are a variety of ways to do this.\n\u25aa Do you keep a sorted order to make searching directories easier?\n\u25aa Can a directory refer to a file that is part of a different disk?\n\u2022 A file from a completely different machine??\n\n\u2022 If a directory is the only thing linking to a file, and removes that link,\nwhat happens?\n\u25aa How do you access a file if you cannot look up where it is?\n\u25aa Deleting a file is really as simple as removing it from the directory.\n\u25aa (And marking its blocks on disk free)\nSpring 2019/2020\n\n32\n\n\fA directory\nName Block Address\n\nType\n\n\u2022 A directory is a simple table,\nimplemented as a file, that maps\nnames to inodes.\n\u25aa Each file system (NTFS, FAT, HFS,\nEXT) will implement it slightly\ndifferently.\n\n\u2022 It may also contain metadata\nabout the file for each entry.\n\u25aa Creation date, author, file size.\n\n\u2022 How does a directory know its\nparent?\nSpring 2019/2020\n\n\u25aa Special entry! \u201c \u201d points to parent.\n\u25aa\u201c\n\u201d is quite literal.\n33\n\n\fHeretic of the Day: Alternatives to Hierarchies\n\u2022 Margo Seltzer: Hierarchical File-Systems are\nDead (HotOS \u201809)\n\u25aa In this paper, she re-orients file systems around\nhuman beings and our own needs.\n\n\u2022 She asks the simple task: \u201cGroup these.\u201d\n\nProfessor Margo Seltzer\nUniversity of British Columbia\n\nSpring 2019/2020\n\n34\n\n\fAww\u2026 Human nature at work\u2026\n\u2022 How did you group them?\n\nSpring 2019/2020\n\n35\n\n\fGreat Expectations\n\u2022 How can we expect anybody to use hierarchies?\n\u25aa It does not seem to be how we actually think.\n\n\u2022 Organize by description instead.\n\u25aa No more placing files in directories.\n\u25aa Tag files based on what they are.\n\u25aa Search for files based on tag / keyword.\n\n\u2022 \u201cI want to see all images that are red.\u201d\n\u25aa \u201cI want all images of squares\u2026,\u201d etc.\n\u25aa \u201cI want to list all music that is 135bpm.\u201d\n\n\u2022 Draws inspiration from the web: we often search by keywords.\nSpring 2019/2020\n\n36\n\n\fFiles with tags\u2026\n\u2022 We can attach tags to data files.\n\u2022 Then, when I\u2019m feeling down and\nout, I can ask my computer:\n\u201cHey, show me all the pictures\nthat are cute.\u201d\n\ncute\n\n\u25aa No longer looking into random\ndirectories to find what I need.\n\ncat\n\nfood\nImage by\nDimitri\nHoutteman\nSpring 2019/2020\n\ncat.gif\n37\n\n\fPOSIX: Contradicting the definition of \u201cpath\u201d\n\u2022 One piece of trouble with being heretical is that everybody asks you\n\u201chow will you implement this and get people to switch????\u201d\n\u2022 You don\u2019t want to completely change C functions\u2026 so\u2026 let\u2019s make use\nof traditional ideas to implement tags.\n\u25aa\n\u25aa\n\u25aa\n\ncan still list all the files with both tags!\ncan open a particular file.\nis, naturally but oddly, the same file.\n\n\u2022 And you can also fit traditional POSIX paths to tags. Files in\n\u201c\n\u201d can simply be files tagged with\n\u201c\n\u201d\n\u25aa We don\u2019t do this. Why\u2026 don\u2019t we just do this? \u2026 \u2026 Well, change is hard.\nSpring 2019/2020\n\n38\n\n\fC File I/O Summary\n\u2022 C Standard IO\n\u25aa\n\u25aa\nReads to the given buffer the given number of bytes from the file indicated by the file descriptor. Returns the\nnumber of bytes read or 0 if the file reached its end. Negative on error.\n\n\u25aa\nSimilarly writes to the given buffer to the file indicated by the file descriptor.\n\n\u25aa\nModifies and returns the file position for the given file descriptor to the given offset from the reference point.\n\n\u25aa\nCloses the file for this process. No subsequent action can be taken on this file. Returns negative on error.\n\n\u25aa\nOpens the given file at the provided path with access depending on the provided flags. If the flags consist of a\nstring with \u201cr\u201d in it, it will be read-only. If it contains a \u201cw\u201d it will be writable. If it contains a \u201cb\u201d it will not be\ninterpreted as a text file, but as \u201cbinary\u201d instead. If it is \u201cw+\u201d, it will completely overwrite the file. If it has an\n\u201ca\u201d, it will automatically write to the end of the existing file.\nSpring 2019/2020\n\n39\n\n\fC File I/O Summary\n\u2022 UNIX System Calls\n\u25aa\n\u25aa\nReads to the given buffer the given number of bytes from the file indicated by the file descriptor. Returns the\nnumber of bytes read or 0 if the file reached its end. Negative on error.\n\n\u25aa\nSimilarly writes to the given buffer to the file indicated by the file descriptor.\n\n\u25aa\nModifies and returns the file position for the given file descriptor to the given offset from the reference point.\n\n\u25aa\nCloses the file for this process. No subsequent action can be taken on this file. Returns negative on error.\n\n\u25aa\n\u25aa\nOpens the given file at the provided path with access depending on the provided flags. If the O_CREAT flag is\ngiven, the file is created if it does not exist. If the O_TRUNC is passed and the file is writable, it will remove all\nthe data in the file after it opens. If O_RDONLY is specified, no writes can occur.\nSpring 2019/2020\n\n40\n\n\fSummary\n\u2022 Files are just binary blobs of information.\n\u25aa Disambiguating that data requires a specification and consistency.\n\n\u2022 Disks are physical and rely on nature, which is chaotic.\n\u25aa We have strategies for encoding digital data on analog (magnetic) media.\n\u25aa Physical addressing requires care in where blocks of data are stored.\n\n\u2022 File systems are an opinionated space related to how humans organize\ndata on disk (and share/discover that data)\n\u25aa Files are generally organized in trees, much like our virtual memory!\n\u25aa Hierarchical file systems still dominate: directory structures.\n\u25aa Other file systems are possible: relational searches and tags.\nSpring 2019/2020\n\n41\n\n\fDistributed Filesystems and Storage\n\u2022 Now\u2026 what happens when we have file systems that span machines?\n\u25aa The power of networks and storage combined!\n\n\u2022 What are some unique issues to files that span multiple systems?\n\u2022 How can we create better methods of transmitting data between\nmachines?\n\u25aa What if we break down the \u201cclient-server\u201d model.\n\u25aa What if files and data need not be in one particular place?\n\u25aa How do we find information, then?\n\n\u2022 Stay tuned!\nSpring 2019/2020\n\n42\n\n\f", "label": [[2216, 2220, "Concept"], [2571, 2586, "Concept"], [2667, 2684, "Concept"], [3652, 3672, "Concept"], [3760, 3780, "Concept"], [5720, 5728, "Concept"], [5761, 5766, "Concept"], [5815, 5821, "Concept"], [5844, 5852, "Concept"], [5853, 5858, "Concept"], [5900, 5904, "Concept"], [5917, 5924, "Concept"], [5986, 5992, "Concept"], [5993, 6001, "Concept"], [6072, 6076, "Concept"], [6112, 6120, "Concept"], [6164, 6172, "Concept"], [6202, 6206, "Concept"], [6253, 6259, "Concept"], [6269, 6273, "Concept"], [6304, 6312, "Concept"], [6323, 6330, "Concept"], [6342, 6346, "Concept"], [6365, 6371, "Concept"], [6410, 6417, "Concept"], [6465, 6469, "Concept"], [6559, 6568, "Concept"], [6625, 6632, "Concept"], [6774, 6783, "Concept"], [6827, 6831, "Concept"], [6988, 6996, "Concept"], [7012, 7018, "Concept"], [7052, 7058, "Concept"], [7082, 7090, "Concept"], [7129, 7136, "Concept"], [7154, 7161, "Concept"], [7181, 7188, "Concept"], [7203, 7212, "Concept"], [7242, 7246, "Concept"], [7269, 7276, "Concept"], [7418, 7427, "Concept"], [7471, 7475, "Concept"], [7566, 7570, "Concept"], [7684, 7691, "Concept"], [7756, 7763, "Concept"], [7802, 7809, "Concept"], [7827, 7834, "Concept"], [7854, 7861, "Concept"], [7876, 7885, "Concept"], [7915, 7919, "Concept"], [7942, 7949, "Concept"], [7968, 7975, "Concept"], [8091, 8100, "Concept"], [8144, 8148, "Concept"], [8260, 8269, "Concept"], [8307, 8311, "Concept"], [8327, 8334, "Concept"], [8339, 8348, "Concept"], [8450, 8462, "Concept"], [8540, 8552, "Concept"], [8783, 8794, "Concept"], [8891, 8895, "Concept"], [9385, 9400, "Concept"], [9450, 9457, "Concept"], [9467, 9474, "Concept"], [9523, 9532, "Concept"], [9557, 9573, "Concept"], [9614, 9621, "Concept"], [9863, 9870, "Concept"], [9973, 9982, "Concept"], [10038, 10045, "Concept"], [10181, 10196, "Concept"], [10199, 10206, "Concept"], [10802, 10812, "Concept"], [11488, 11501, "Concept"], [11831, 11842, "Concept"], [11857, 11866, "Concept"], [11950, 11962, "Concept"]], "Comments": []}