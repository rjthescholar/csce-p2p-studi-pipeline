{"id": 14, "segment": ["test_set", "labeled"], "course": "cs1502", "lec": "lec06_finite_automata_05", "text": "Finite Automata 05\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fRegular Language\n\nQuestion: Given a regular language, can it be expressed by a\nregular expression?\nThere are infinite number of regular languages\nLuckily, all of them have one thing in common\nEach of them has some finite-state machines that recognize it\n\nSo, to try to answer the above question, we need to show a\nway to convert a finite-state machine into a regular expression\nthat expresses the language of the machine\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fGeneralized Nondeterministic Finite Automaton\nA Generalized Nondeterministic Finite Automaton (GNFA) N\nof a DFA M is\na special NFA where L(N ) = L(M )\nN has exactly one accept state\nall transitions of N are regular expressions\nTo transition from one state to another, you need a string in\nthe language expressed by the regular expression instead of a\nsymbol\n\nExample:\nq2\n\n0\u2217 \u222a 11\u2217 0\n\nq5\n\nAt q2 , if you encounter a string in the language 0\u2217 \u222a 11\u2217 0,\nmove to state q5\n0\u2217 \u222a 11\u2217 0 = {\u03b5, 0, 00, . . . } \u222a {10, 110, 1110, . . . }\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fConverting a DFA to a GNFA\n1\n2\n\n3\n\nStart with a DFA M\nAdd a new start state s with an \u03b5 arrow to the original start\nstate of M\nAdd a new accept state a\nFrom every accept state of M , add an \u03b5 arrow to the new\naccept state\nChange all original accept states of M to non-accept states\n\n4\n\n5\n\nTurn transition labels to regular expressions (rule #1 of\nregular expression)\nAdd necessary transition arrows\nChange multiple arrows or multiple labels to a single arrow\nwhile label is the union of the previous labels\na\na\u222ab\nb\n0, 1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\u222a1\nFinite Automata 05\n\n\fConverting a DFA to a GNFA (Example)\n\nA DFA\nb\n\na\n1\n\n2\na\nb\na\n\nb\n3\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fConverting a DFA to a GNFA (Example)\n\nAdd a new start state s\nb\n\na\n1\n\n2\na\nb\n\ns\n\na\n\nb\n3\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fConverting a DFA to a GNFA (Example)\n\n\u03b5 from s to the original start state\nb\n\na\n1\n\n2\n\n\u03b5\n\na\nb\n\ns\n\na\n\nb\n3\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fConverting a DFA to a GNFA (Example)\n\nAdd a new accept state a\nb\n\na\n1\n\n2\n\n\u03b5\n\na\nb\n\ns\n\na\n\nb\n3\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\na\n\n\fConverting a DFA to a GNFA (Example)\n\n\u03b5 from all accepts state to a\nb\n\na\n1\n\n2\n\n\u03b5\n\n\u03b5\n\na\nb\n\ns\n\n3\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\na\n\na\n\nb\n\n\u03b5\n\nFinite Automata 05\n\n\fConverting a DFA to a GNFA (Example)\n\nAll original accept states to non-accept state\nb\n\na\n1\n\n2\n\n\u03b5\n\n\u03b5\n\na\nb\n\ns\n\n3\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\na\n\na\n\nb\n\n\u03b5\n\nFinite Automata 05\n\n\fGNFA to Regular Expression\nNote that by converting a DFA and an equivalent GNFA, the\nlanguage of the machine remain unchanged\nNext, we are going to remove original states of DFA one at a\ntime until there are only two states left\nWhen a state is removed, we have to make sure that the\nlanguage of the machine is not changed\nThe new start state s and the new accept state a\n\nExample:\n3\u2212state\nDFA\n\n5\u2212state\nGNFA\n\n4\u2212state\nGNFA\n\nregular\nexpression\n\n2\u2212state\nGNFA\n\n3\u2212state\nGNFA\n\nThe transition from s to a is a regular expression that\nexpresses the language of the original DFA\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fReducing Number of States of GNFA\nRemoving qrip\nqi\n\nR4\n\nR1\n\nqj\nR3\n\nqrip\n\nR2\n\nHow to go from qi to qj ?\nqi \u2192 qj using a string in R4\nqi \u2192 qrip \u2192 qj\nqi \u2192 qrip using a string in R1\nqrip \u2192 qrip using a string in R2 any number of times (R2\u2217 )\nqrip \u2192 qj using a string in R3\n\nFrom qi to qj by any strings in R1 R2\u2217 R3 \u222a R4\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fReducing Number of States of GNFA\nRemoving qrip\nqi\n\nR4\n\nqj\nR3\n\nR1\n\nqi\n\nR1 R2 \u2217 R3 \u222a R4\n\nqj\n\nqrip\n\nR2\n\nTo remove qrip\n1\n\nSearch for all possible paths from a state q to qrip and to a\nstate r\nq \u2192 qrip \u2192 r\n\n2\n\nTurn all paths from previous step to regular expressions\nRemove qrip which results in q \u2192 r\nInsert paths q \u2192 r back with their regular expressions\n\n3\n4\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fExample\nDFA\n1\n\na\n\nb\n\n2\n\na, b\n\n{w | w contains at least one b}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fExample\nDFA to GNFA\n\u03b5\n1\n\na\n\ns\n\n1\n\nb\n\na\n\nb\n\u03b5\n\n2\n\na, b\n\na\n\n2\n\n{w | w contains at least one b}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\naUb\n\n\fExample\nGet rid of state 2\n\u03b5\n1\n\ns\n\na\n\n1\n\na\n\nb\n\nb\n\u03b5\n2\n\na, b\n\na\n\n2\n\n\u03b5\ns\n\n1\n\na\n\nb(a U b)*\na\n\n{w | w contains at least one b}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\naUb\n\n\fExample\nGet rid of state 1\n\u03b5\n1\n\ns\n\na\n\n1\n\nb\n\na\n\nb\n\u03b5\na, b\n\n2\n\na\n\n2\n\n\u03b5\ns\n\n1\n\na\n\ns\n\na*b(a U b)*\n\nb(a U b)*\na\n\na\n\n{w | w contains at least one b}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\naUb\n\n\fExample\n\nDFA to GNFA\nb\n\nb\n\na\n\na\n1\n\n2\n\n1\n\nb\na\n\nb\n\n2\n\n\u03b5\n\na\n\nb\n\ns\n\n3\n\nFinite Automata 05\n\na\n\na\n\nb\n\n3\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n\u03b5\n\na\n\n\u03b5\n\n\fExample\nGet rid of state 1\naa U b\n\nb\n\na\n1\n\n2\n\n\u03b5\n\n2\n\na\n\na\n\nb\n3\n\n\u03b5\nab\n\nb\n\ns\n\na\n\n\u03b5\n\na\n\ns\n\nba U a\nb\n\n\u03b5\n\n3\n\nbb\n\nPaths that go through state 1 (q \u2192 1 \u2192 r)\ns\u21921\u21922\ns\u21921\u21923\n2\u21921\u21922\n2\u21921\u21923\n3\u21921\u21922\n3\u21921\u21923\n\n\u03b5a = a\n\u03b5b = b\naa\nab\nba\nbb\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\u03b5\n\na\n\n\fExample\nGet rid of state 2\naa U b\n\na(aa U b)*\ns\n\n2\na\n\na\n\n\u03b5\nab\n\ns\n\nba U a\nb\n\n3\n\na\n(ba U a)(aa U b)* U \u03b5\n\na(aa U b)*ab U b\n\n\u03b5\n3\n\nbb\n(ba U a)(aa U b)*ab U bb\n\nPaths that go through state 2 (q \u2192 2 \u2192 r)\ns\u21922\u2192a\ns\u21922\u21923\n3\u21922\u2192a\n3\u21922\u21923\n\na(aa \u222a b)\u2217 \u03b5 = a(aa \u222a b)\u2217\na(aa \u222a b)\u2217 ab\n(ba \u222a a)(aa \u222a b)\u2217 \u03b5 = (ba \u222a a)(aa \u222a b)\u2217\n(ba \u222a a)(aa \u222a b)\u2217 ab\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fExample\n\nGet rid of state 3\na(aa U b)*\ns\n\na\n\na(aa U b)*ab U b\n\n(ba U a)(aa U b)* U \u03b5\n\ns\n\na\n\n3\n(a(aa U b)*ab U b)((ba U a)(aa U b)*ab U bb)*((ba U a)(aa U b)* U \u03b5 ) U a(aa U b)*\n\n(ba U a)(aa U b)*ab U bb\n\nPaths that go through state 3 (q \u2192 3 \u2192 r)\ns\u21923\u2192a\n(a(aa\u222ab)\u2217 ab\u222ab)((ba\u222aa)(aa\u222ab)\u2217 ab\u222abb)\u2217 ((ba\u222aa)(aa\u222ab)\u2217 \u222a\u03b5)\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fTheorem 1.54\n\nEarlier, we show that every regular expression expresses a\nregular language\nWe just show that every state diagram of a DFA can be\nconverted into an equivalent regular expression\nTheorem (1.54)\nA language is regular if and only if some regular expression\ndescribes it.\nProblem: If you cannot express a language using a regular\nexpression, it does not mean it is not regular\nThe language is so complicate that it needs a very long and\ncomplicate regular expression\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fFinite Automaton and Algorithm\n\nFor every finite automaton, there is an equivalent algorithm\nFor example, consider a machine where its language is the set\nof all strings over 0 and 1 that consist of an odd number of 1s.\n0\n\n0\n1\n\nq0\n\nq1\n\n1\n\nThe above machine can be converted into a Java method that\nTakes a string of 0s and 1s as an argument\nReturns true (accept) of the input string consisting of an odd\nnumber of 1s. Otherwise, returns false (reject).\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fFinite Automata and Algorithm\npublic boolean isAccepted(String input)\n{\nString state = \"q0\";\nint length = input.length();\nfor(int i = 0; i < length; i++)\n{\nchar c = input.charAt(i);\nif(state.equals(\"q0\") && c == \u20190\u2019)\nstate = \"q0\";\nelse if(state.equals(\"q0\") && c == \u20191\u2019)\nstate = \"q1\";\nelse if(state.equals(\"q1\") && c == \u20190\u2019)\nstate = \"q1\";\nelse if(state.equals(\"q1\") && c == \u20191\u2019)\nstate = \"q0\";\n}\nif(state.equals(\"q1\"))\nreturn true;\nelse\nreturn false;\n}\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\fLimitation of Finite Automaton\nFinite Automaton only captures a small subset of algorithms\nProblems that associated with Regular languages\n\nNot all language can be recognized by a finite state machine\nSuch languages is called Nonregular Languages\n\nExample: B = {0n 1n | n \u2265 0}\nB = {\u03b5, 01, 0011, 000111, . . . }\nThe machine need to be able to remember how many 0s and\nhow many 1s it sees so far\nWe need an infinite number of states\n\nIf you cannot express a language using regular expression, it\ndoes not mean it is not a regular language\nToo complicate and requires a huge number of states\n\nWe need a way to determine whether a language is not\nregular.\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nFinite Automata 05\n\n\f", "label": [[134, 150, "Concept"], [170, 186, "Concept"], [624, 669, "Concept"], [672, 717, "Concept"], [719, 723, "Concept"], [2882, 2886, "Concept"], [6218, 6236, "Concept"], [6249, 6265, "Concept"], [6397, 6404, "Concept"], [6425, 6443, "Concept"], [6722, 6738, "Concept"], [6743, 6752, "Concept"], [6764, 6780, "Concept"], [6805, 6814, "Concept"], [7778, 7794, "Concept"], [7795, 7811, "Concept"], [7885, 7902, "Concept"], [7990, 8010, "Concept"]], "Comments": []}