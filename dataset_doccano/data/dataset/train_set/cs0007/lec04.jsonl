{"id": 48, "segment": ["train_set", "labeled"], "course": "cs0007", "lec": "lec04", "text": "CS 0007: Introduction to Java\nLecture 4\nNathan Ong\nUniversity of Pittsburgh\nSeptember 12, 2016\n\n\fboolean\n\u2022 Two values only:\n\u2013 true\n\u2013 false\n\n\u2022 We can also assign the variable an\nexpression to be evaluated.\n\n\fboolean Operators\n&&\n||\n!\n\n\u2013 Logical AND\n\u2013 Logical OR\n\u2013 Logical NOT\n\nboolean needUmb = rain || cloud;\nParentheses can be used as a way to\ngroup\n\n\fTruth Tables\nA B\n\nA&&B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nF\n\nF F\n\nF\n\n\fTruth Tables\nA B\n\nA||B\n\nT T\n\nT\n\nT F\n\nT\n\nF T\n\nT\n\nF F\n\nF\n\n\fTruth Tables\nA\n\n!A\n\nT\n\nF\n\nF\n\nT\n\n\fOrder of Operators\n1.\n2.\n3.\n\n!\n&&\n||\n\n\u2013 Logical NOT\n\u2013 Logical AND\n\u2013 Logical OR\n\nboolean needUmb = rain || !sun;\n\n\fConditional Logic\n\u2022 \u201cIf \u2026 then \u2026\u201d\n\u2022 Does not have an operator in Java\n\nA B\n\nA\uf0e0B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nT\n\nF F\n\nT\n\n\fConditional Logic\n\u2022 We can use an equivalent statement to\nget the result we want.\n\nA B\n\nA\uf0e0B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nT\n\nF F\n\nT\n\n\fConditional Logic\n\u2022 We can use an equivalent statement to\nget the result we want.\n\nA B\n\nA\uf0e0B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nT\n\nF F\n\nT\n\n\fConditional Logic\n\u2022 We can use an equivalent statement to\nget the result we want.\n\nA B\n\n!A||B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nT\n\nF F\n\nT\n\n\fOrder of Operators\n1.\n2.\n3.\n4.\n\nequality\n\n==/!=\n\n\u2013 Equality/Non-\n\n!\n&&\n||\n\n\u2013 Logical NOT\n\u2013 Logical AND\n\u2013 Logical OR\n\nboolean same = bool1 == bool2;\n\n\fBad Coding Practice\nboolean isTrue = bool1 == true;\n\n\fint\n\u2022 Integers\n\u2022 We can also assign the variable an\nexpression to be evaluated.\n\n\fint Operators\n+\n\u2013 Addition\n\u2013\n\u2013 Subtraction\n*\n\u2013 Multiplication\n/\n\u2013 (Integer) Division\n%\n\u2013 Modular Operation\nFollows normal rules of order of\noperation (PEMDAS)\n\n\fInteger Division\nRemoves (truncates) the Mantissa\n(numbers after the decimal point)\n5/2\uf0e02\n20 / 3 \uf0e0 6\n\n\fModular Arithmetic\nRemember back to grade school division:\n5 divided by 2 equals 2 remainder 1\n5%2\uf0e01\n20 divided by 3 equals 6 remainder 2\n20 % 3 \uf0e0 2\n\n\fInteger Division + Modular\nArithmetic\nThey fit nicely together:\n5 divided by 2 equals 2 remainder 1\n5/2\uf0e02\n5%2\uf0e01\n20 divided by 3 equals 6 remainder 2\n20 / 3 \uf0e0 6\n20 % 3 \uf0e0 2\n\n\fMore int Operators\nSpecial operators convert two ints into a\nboolean by comparing them\n==\n\u2013 Equality\n!=\n\u2013 Non-Equality\n> \u2013 Greater than\n>=\n\u2013 Greater than or equal to\n< \u2013 Less than\n<=\n\u2013 Less than or equal to\nEvaluated AFTER PEMDAS\n\n\fMore int Operators\n5 == 0?\n6 > 7?\n4 <= 4?\n!(8 < 3)?\n(3 / 2 > 9 % 3) && (10 <= 5*3)?\n\n\fdouble\n\u2022 Decimal numbers\n\u2022 Cannot trust this for calculations that\nrequire precision due to representation\nlimits\n\u2022 All int operations can be applied to\ndoubles, except modular arithmetic (%)\n\u2022 Division is regular\n\n\fMixing Types with Division\n5/2\uf0e02\n5.0 / 2.0 \uf0e0 2.5\n5.0 / 2 \uf0e0 ?\n5 / 2.0 \uf0e0 ?\n\n\fchar\n\u2022 Single characters\n\u2022 CANNOT use + to combine two\ncharacters together.\n\u2022 Internally represented as a very small\nnumber in American Standard Code for\nInformation Interchange (ASCII)\nrepresentation.\n\n\fASCII Table\n\n\fchar Operators\nSpecial operators convert two chars into\na boolean by comparing them\n==\n\u2013 Equality\n>\n\u2013 Greater than*\n>=\n\u2013 Greater than or equal to*\n<\n\u2013 Less than*\n<=\n\u2013 Less than or equal to*\n*(based on ASCII value)\n\n\fExpression?\n\u2022 How do you express the sum of 2 and 3?\n\u2022 No, not the answer, the expression\n\u2022 2+3\n\u2022 Hmm, will int x = 2 + 3; work?\n\u2022 Let's test it\n\n\fHow do you test that?\n\u2022 Write a valid program\n\u2022 You can do one of two things:\n\u2013 Print the expected value and the value you\nactually retrieved\n\u2013 Compare the two values and print the\nboolean value\n\n\u2022 Why would you choose one over the\nother?\n\u2022 Depends on what you want/need\n\n\fTest 1\npublic class Test\n{\npublic static void main(String[]\n{\nint x = 2 + 3;\nSystem.out.println(\"Value\nexpected: 5, Actual\nvalue: \" + x);\n}//end method main\n}//End class Test\nWhat is the expected output?\n\nargs)\n\n\fThey're the same, YAAAAAYYYYYY!!!\n\n\fTest 2\npublic class Test\n{\npublic static void main(String[]\n{\nint x = 2 + 3;\nSystem.out.println(\"x == 5 is\"\n5));\n}//end method main\n}//End class Test\nWhat is the expected output?\n\nargs)\n\n+ (x ==\n\n\fIt's true, YAAAAAYYYYYY!!!\n\n\fExpressions\n\u2022 All primitives allow you to\ndeclare/replace\n\u2022 boolean b = (x == 5);\n\u2022 b = (x == 6);\n\u2022 double d = 2.0/3.5;\n\n\fWARNING\n\u2022 The caret (^) does NOT indicate\nexponentiation.\n\u2022 In other words, in Java, 2^3 does not\nequal 8\n\u2022 There is another way to do\nexponentiation, but we'll come back to\nthis.\n\n\fQuestions?\n\n\f", "label": [[97, 104, "Concept"], [236, 247, "Concept"], [250, 260, "Concept"], [263, 274, "Concept"], [276, 283, "Concept"], [353, 365, "Concept"], [410, 422, "Concept"], [467, 479, "Concept"], [540, 551, "Concept"], [554, 565, "Concept"], [567, 578, "Concept"], [614, 631, "Concept"], [728, 745, "Concept"], [854, 871, "Concept"], [980, 997, "Concept"], [1185, 1196, "Concept"], [1198, 1210, "Concept"], [1213, 1223, "Concept"], [1225, 1232, "Concept"], [1278, 1285, "Concept"], [1312, 1315, "Concept"], [1394, 1397, "Concept"], [1412, 1420, "Concept"], [1425, 1436, "Concept"], [1441, 1455, "Concept"], [1460, 1478, "Concept"], [1483, 1500, "Concept"], [1555, 1571, "Concept"], [1658, 1676, "Concept"], [1809, 1825, "Concept"], [1987, 1990, "Concept"], [2031, 2035, "Concept"], [2043, 2050, "Concept"], [2074, 2082, "Concept"], [2088, 2100, "Concept"], [2105, 2117, "Concept"], [2123, 2147, "Concept"], [2152, 2161, "Concept"], [2166, 2188, "Concept"], [2219, 2222, "Concept"], [2300, 2306, "Concept"], [2420, 2423, "Concept"], [2453, 2460, "Concept"], [2469, 2487, "Concept"], [2534, 2542, "Concept"], [2591, 2595, "Concept"], [2795, 2806, "Concept"], [2809, 2823, "Concept"], [2898, 2906, "Concept"], [2911, 2923, "Concept"], [2930, 2954, "Concept"], [2960, 2969, "Concept"], [2976, 2997, "Concept"], [3353, 3360, "Concept"], [3507, 3510, "Concept"]], "Comments": []}