{"id": 299, "segment": ["train_set", "labeled"], "course": "cs1550", "lec": "lec15", "text": "Introduction to Operating Systems\nCS/COE 1550\nFall 2021\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne \u00a92013)\n\n\fAnnouncements\n\u2022 Upcoming deadlines:\n\u2022 10/25: Project 2 (extended deadline)\n\u2022 10/29: Homework 6\n\u2022 11/8: Lab 3\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n2\n\n\fLast Lecture \u2026\n\u2022 Deadlock prevention\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n3\n\n\fMuddiest Points (Banker\u2019s Algorithm)\n\u2022\n\nwhat are the three steps of the bankers algorithm?\n\n\u2022\n\nCould you go over the Bankers algorithm example again?\n\n\u2022\n\nFor the safe/unsafe algorithm, does that mean we need to know the resources that are available,\nkeep track of the used ones, and also know how many each process will have in the future?\n\n\u2022\n\nIt seems like this detection algorithm has a lot of overhead. Are there any ways of reducing the time\nspent doing these checks\n\n\u2022\n\ncan we run the banker's algorithm or some alternative as a static analysis tool? like build this kind of\ncheck into the compiler or something instead of running it for each request during runtime\n\n\u2022\n\nIf a state is determined unsafe, does that always mean that the resource will not be allocated or is it\npossible to still allocate it and take the risk\n\n\u2022\n\nWhat does the E, P and A stand for in the bankers algorithm\n\n\u2022\n\nif bankers algorithm finds a valid path and grants the resource, can a deadlock still occur if a different\npath is followed than the one bankers algorithm found?\n\n\u2022\n\nI'm a little confused on what the want and hold tables represent\n\n\u2022\n\nWhy is the runtime n^2 * n for the wait algorithm\n\n\u2022\n\nWhat is the difference between wanted and max again?\n\n\u2022\n\nTracing bankers algorithms with multiple resource instances\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n4\n\n\fMuddiest Points (Resource Trajectory)\n\u2022 the l1, l2 l3 ... in the resource trajectory graph\n\n\u2022 resource trajectory graphs with more than 2 resources\n\u2022 How to prevent a resource trajectory that would cause a\ndeadlock\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n5\n\n\fMuddiest Points (General Deadlock)\n\u2022 breaking circular wait seems almost always better than breaking\nhold and wait since breaking hold and wait requires you take all\nresources you need whereas breaking circular wait only makes you\ntake some extra resources before you need them\n\u2022 Starvation vs deadlock\n\u2022 Which detection alg is fastest?\n\u2022 Where do deadlock detection algorithms exist? (Operating system\nor external application.) When do they run? Runtime or compile\ntime? Also, how do deadlock avoidance algorithms interfere to\nmake sure a program doesn\u2019t deadlock? Are they integrated fully\ninto the application?\n\u2022 how do we know what resources are available to use and the best\nway to choose who gets what resources\n\u2022 What is better practice, deadlock avoidance or deadlock detection?\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n6\n\n\fMuddiest Points (Deadlock Prevention)\n\u2022 When checking a program to see it is free of deadlocks, you have to\nlook for whether one of the four condtions is being broken\nsomewhere?\n\u2022 Why do you only need to attack one of the 4 conditions to prevent\ndeadlock?\n\u2022 How to know which deadlock prevention technique to use.\n\u2022 How spooling works\n\u2022\n\nWhat exactly is spooling?\n\n\u2022\n\nSpooling in applications\n\n\u2022\n\nWhen is it appropriate to spool? How do you know?\n\n\u2022 How non-resource deadlocks occur\n\u2022 In regard to attacking \"no preemption\", how would you determine\nwhether it's viable to take a resource away from a process?\n\u2022 how 2 phase locking avoids the hold and wait condition?\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n7\n\n\fAttacking Circular Wait\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n8\n\n\fSpooling Example\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n9\n\n\fToday \u2026\n\u2022 CPU Scheduling\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n10\n\n\f", "label": [[330, 349, "Concept"], [422, 440, "Concept"], [477, 494, "Concept"], [522, 539, "Concept"], [801, 809, "Concept"], [895, 913, "Concept"], [1278, 1295, "Concept"], [1303, 1320, "Concept"], [1371, 1379, "Concept"], [1437, 1454, "Concept"], [1778, 1797, "Concept"], [1826, 1845, "Concept"], [1855, 1874, "Concept"], [1928, 1947, "Concept"], [1967, 1975, "Concept"], [2056, 2064, "Concept"], [2077, 2090, "Concept"], [2132, 2145, "Concept"], [2161, 2174, "Concept"], [2233, 2246, "Concept"], [2311, 2321, "Concept"], [2325, 2333, "Concept"], [2379, 2397, "Concept"], [2516, 2534, "Concept"], [2587, 2595, "Concept"], [2776, 2794, "Concept"], [2798, 2816, "Concept"], [2889, 2908, "Concept"], [2957, 2966, "Concept"], [3192, 3200, "Concept"], [3226, 3234, "Concept"], [3240, 3248, "Concept"], [3295, 3300, "Concept"], [3326, 3348, "Concept"], [3381, 3394, "Concept"], [3514, 3527, "Concept"], [3603, 3616, "Concept"], [3672, 3680, "Concept"], [3754, 3768, "Concept"]], "Comments": []}