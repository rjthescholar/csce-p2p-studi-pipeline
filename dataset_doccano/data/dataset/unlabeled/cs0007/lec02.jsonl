{"id": 137, "segment": "unlabeled", "course": "cs0007", "lec": "lec02", "text": "CS 0007: Introduction to Java\nLecture 2\nNathan Ong\nUniversity of Pittsburgh\nSeptember 6, 2016\n\n\fOutline\n\u2022 Recap of last lecture\n\u2022 Java\u2019s \u201cPlace of Residence\u201d\n\u2022 Your First Program\n\n\fWhy Learn Java?\n\u2022 Widely used\n\u2022 Constantly updating and receiving\nsupport\n\u2022 Easily understood due to standardized\nand consistent syntax\n\u2022 Forces code readability\n\u2022 Virtual Machine isolates running code\n\n\fSoftware Layers\n\u2022 Applications: Software\nthat interfaces with\nthe user\n\u2022 System Software:\nOperating System\n(e.g. Windows, Mac\nOSX, Linux)\n\u2022 Device Drivers:\nSoftware to talk to\nnon-computer devices\n(e.g. printers,\nwebcams, etc.)\nSource:\n\n\fWHAT ABOUT JAVA?\n\n\fVirtual Machine\n\u2022 Java is run on a \"Virtual Machine.\"\n\u2022 A Virtual Machine (VM) is an emulation\nof all of the components (hardware or\nsoftware) necessary to run a certain\npiece of software.\n\u2022 It is technically an application.\n\n\fJava Flowchart\nJava\nProgra\nm\n\nC\nO\nM\nP\nI\nL\nE\nR\n\nJava\nByteco\nde\n\nJava\nVM\n\nApplication Software\nLevel\n\n\fVM Pros and Cons\nPros:\nCons:\n\u2022 Code and bytecode\n\u2022 Generally slower\nworks independently\nruntime (than\nfrom the platform\nnatively compiled\n(operating system) it\nlanguages like C++).\nwas compiled on.\n\u2022 Arguably provides\n\u2022 More secure due to\nless fine-tuned\nruntime isolation.\nusage of lower levels\nof software\n\n\fMy First Program\nCOMPILING AND COMMENTING\n\n\fHello World!\n\u2022 A \"Hello World\" program is frequently a\nstudent's first program of any language.\n\u2022 Similar to learning \"Hello\" greetings in\nother languages.\n\u2022 Note: all code is CaSe SeNsItIvE\n\n\fHello World!\npublic class HelloWorld\n{\npublic static void main(String[] args)\n{\nSystem.out.println(\"Hello World!\");\n}//end method main\n}//End class HelloWorld\n\n\fCompilation\n\n\fCompiling\njavac \u2013 compiling a\njava file\n(javac FileName.java)\njava \u2013 running a\ncompiled java file\n(java FileName)\n\n\fHello World!\npublic class HelloWorld\n{\npublic static void main(String[] args)\n{\nSystem.out.println(\"Hello World!\");\n}//end method main\n}//End class HelloWorld\n\n\fSystem.out.println(\"Hello World!\");\n\u2022 Statement\n\u2022 Ends with a semicolon (like a period in\nEnglish)\n\u2022 Prints stuff\n\u2013 Where to?\n\u2013 What stuff?\n\n\u2022 To the console\n\u2022 Strings\n\n\fHello World v2\npublic class Hello\n{\npublic static void main(String[] args)\n{\nSystem.out.println(\"My name is\nNathan Ong! YAAAAYYYY LALALALA\nRANDOM TYPING\");\n}//end method main\n}//End class Hello\n\nWhat is the output?\n\n\fString\n\u2022 Characters in between quotation marks\n\u2022 Some valid Strings\n\u2013 \"Hi\"\n\u2013 \"#&^@!*(QQQQQQQQ\"\n\n\u2022 What if we want quotation marks in the\nString?\n\n\f\\\n\u2022 Escape character \\ tells the computer\nthat the next character should not be\ntaken literally\n\u2013 \\\"\n\u2013 Tab? \\t\n\u2013 New line? \\n\n\u2013 Slash? \\\\\n\u2022 \"Java said, \"OMG SYNTAX ERROR\"\"\n\n\u2022 How do we make the line above a valid\nString?\n\n\fHello World v2\npublic class Hello\n{\npublic static void main(String[] args)\n{\nSystem.out.println(\"My name is\nNathan Ong! YAAAAYYYY LALALALA\nRANDOM TYPING\");\n}//end method main\n}//End class Hello\n\nWhat if I want to use my name in another\nprint statement?\n\n\fRecycling\n\u2022 What if I want to use the string\nsomewhere else?\n\u2022 I'm so lazy, I don't want to type in my\nname when printing it out all the time.\n\u2022 String name = \"Nathan Ong\";\n\u2022 Now I can call name wherever I want\n(not really)!\n-->Variables<--\n\n\fString name = \"Nathan\nOng\";\n\n\fString name = \"Nathan\nOng\";\n\nTyp\ne\n\n\fString name = \"Nathan\nOng\";\n\n\fString name = \"Nathan\nOng\";\nvalu\ne\n\n\fTo Declare a Variable:\nType name = value;\n\n\fTo Use a Variable:\nname\n\n\fNaming\n\u2022 The name of a variable (and other\nthings) are called identifiers.\n\u2022 There are some rules regarding valid\nidentifiers, and further conventions that\nyou should follow.\n\n\fValid Identifiers\n\u2022 You must have at least one character in\nthe name\n\u2022 You can only use alphanumeric\ncharacters (letters and numbers),\nunderscores (_), and dollar signs ($) in\nthe name\n\u2022 You CANNOT use a number as the first\ncharacter.\n\u2022 You CANNOT use reserved Java\nkeywords.\n\n\fReserved Java Keywords\nboolean\ndo int\nstatic\nbreak double long super\nbyte else\nnew\nswitch\ncase final package\nthis\ncatch finally private\nthrow\nchar float protected throws\nclass for\npublic try\ncontinue if\nreturn void\ndefault\nimport short while\n\n\fConventional Naming\n\u2022 Variables and functions:\nlowerCamelCase\n\u2013 First word starts with a lowercase letter,\nsubsequent words have uppercase first\nletters\n\n\u2022 Class names: UpperCamelCase\n\u2013 All words have uppercase first letters\n\n\u2022 Never use dollar signs or underscores\n\n\fHello World v3\npublic class Name\n{\npublic static void main(String[] args)\n{\nString name = \"Nathan Ong\";\nSystem.out.println(name);\nSystem.out.println(\" is \");\nSystem.out.println(name);\n}//end method main\n}//End class Name\n\nWhat is the output?\n\n\fOh I changed my name\u2026Nathan Ong is\nno longer Nathan Ong\u2026What am I going\nto do?\n\n\fWhat can we do with it?\npublic class Name\n{\npublic static void main(String[] args)\n{\nString name = \"Nathan Ong\";\nSystem.out.println(name);\nSystem.out.println(\" is \");\nString name = \"Brandon Ong\";\nSystem.out.println(name);\n}//end method main\n}//End class Name\n\nCan we do this?\nNo, because we re-declared a variable!\n\n\fDeclaring a new variable:\nType name = value;\nChanging the old variable:\nname = newValue;\n\n\fWhat can we do with it?\npublic class Name\n{\npublic static void main(String[] args)\n{\nString name = \"Nathan Ong\";\nSystem.out.println(name);\nSystem.out.println(\" is \");\nname = \"Brandon Ong\";\nSystem.out.println(name);\n}//end method main\n}//End class Name\n\nWhat is the output?\n\n\fOkay so I'm not really changing my name.\nRegardless, the output is really annoying.\nHow do we put it all in one line?\n\n\fWhat can we do with it?\npublic class Name\n{\npublic static void main(String[] args)\n{\nString name = \"Nathan Ong\";\nSystem.out.print(name);\nSystem.out.print(\" is \");\nSystem.out.println(name);\n}//end method main\n}//End class Name\n\nUse print instead. No new line added.\nSaying print print print is kind of annoying\u2026\n\n\f*cough* \\n\n*cough*\nAhhhhh, that's better.\nBut just for fun, how do we get it back to\nthe multiple-line version using the print\nstatements instead of println?\n\n\fWhat can we do with it?\npublic class Name\n{\npublic static void main(String[] args)\n{\nString name = \"Nathan Ong\";\nSystem.out.print(name);\nSystem.out.print(\"\\n is \\n\");\nSystem.out.println(name);\n}//end method main\n}//End class Name\n\nGetting the same output from before with only print.\nBut we don't like that, so we'll take that out\nSaying print print print is kind of annoying\u2026\n\n\fWhat can we do with it?\npublic class Name\n{\npublic static void main(String[] args)\n{\nString name = \"Nathan Ong\";\nSystem.out.println(name + \" is \" + name);\n}//end method main\n}//End class Name\n\nUsing + with Strings is called\nconcatenation\n(Note: there's no such thing as \u2013 for\nStrings)\n\n\fWhat can we do with it?\npublic class Name\n{\npublic static void main(String[] args)\n{\nString name = \"Nathan Ong\";\nSystem.out.println(name + \" is \" +\nname);\n}//end method main\n}//End class Name\n\nConcatenation does not add spaces\nautomatically.\n\n\fNicknames\n\u2022 System.out.println(name +\n\" is \" + name);\n\u2022 Seems useful, like if someone had a\nnickname\n\u2022 System.out.println(nickName +\n\" is \" + name);\n\u2022 But I don't have one\u2026how do we make\nit so it doesn't matter?\n\n\fNicknames\npublic class Name\n{\npublic static void main(String[] args)\n{\nString name = \"Nathan Ong\";\nString nickName = name;\nSystem.out.println(nickName + \" is \" +\nname);\n}//end method main\n}//End class Name\n\nOh so we can make nickName the exact same thing\nas name without having to type everything again!\nWhat is the output?\n\n\fSame thing\n\n\fComments\npublic class Name\n{\npublic static void main(String[] args)\n{\nString name = \"Nathan Ong\";\nString nickName = name;\nSystem.out.println(nickName + \" is \" +\nname);\n}//end method main\n}//End class Name\n\n\fCommenting\n\u2022 You must comment every line of useful\ncode.\n\u2022 Don't forget the //\n\u2022 If you need a block of comments, use /*\n*/\n\u2022 Everything in between is commented\nout\n\u2022 Careful about nested comments\u2026\n\u2022 /* This /* Comment Ends */ Here???*/\n\n\fLine-by-Line Commenting\n//The file name\n^Bad comment\n//Prints out statistics for\n//Nathan Ong\n^Good Comment\npublic class Name\n\n\fLine-by-Line Commenting\n//The main method\n^Bad comment\n//The program begins here\n^Good Comment\npublic static void main(String[]\nargs)\n\n\fLine-by-Line Commenting\n//A String\n^Bad comment\n//The first name held in a\n//String\n^Good Comment\nString name = \"Nathan\";\n\n\fLine-by-Line Commenting\n//Prints out stuff\n^Bad comment\n//Prints out the names\n^Okay comment\n/*Prints the nickname and links it to\nthe original name.*/\n^Good comment\nSystem.out.println(nickName +\n\" is \" + name);\n\n\fRecap\n\u2022 Hello World!\n\u2022 System.out.println (and print)\n\u2022 Strings and String concatenation\n\u2022 Compiling and running\n\u2022 Variables\nType name = value;\nname = newValue;\n\u2022 Commenting\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}