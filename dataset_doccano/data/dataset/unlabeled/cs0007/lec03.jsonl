{"id": 186, "segment": "unlabeled", "course": "cs0007", "lec": "lec03", "text": "CS 0007: Introduction to Java\nLecture 3\nNathan Ong\nUniversity of Pittsburgh\nSeptember 8, 2016\n\n\fPrimitive Types\nNO, STRING IS NOT A PRIMITIVE\n\n\fI Don't Want to Do Strings Anymore.\nIsn't There Anything Else?\n\u2022 Strings are okay, but\nthey don't do much\nfor us.\n\u2022 What about\nrepresenting\nnumbers and other\nthings?\n\u2022 We must use the\nbuilding blocks of\nJava!\n\n\u2022 Primitive Values:\n\u2013\n\u2013\n\u2013\n\u2013\n\u2013\n\u2013\n\u2013\n\u2013\n\nboolean\nbyte\nchar\ndouble\nfloat\nint\nlong\nshort\n\n\fI Don't Want to Do Strings Anymore.\nIsn't There Anything Else?\n\u2022 Most useful\n\u2013\n\u2013\n\u2013\n\u2013\n\nboolean\nchar\ndouble\nint\n\n\u2022 Second tier\n\u2013 byte\n\u2013 long\n\n\u2022 Primitive Values:\n\u2013\n\u2013\n\u2013\n\u2013\n\u2013\n\u2013\n\u2013\n\u2013\n\nboolean\nbyte\nchar\ndouble\nfloat\nint\nlong\nshort\n\n\fboolean\n\u2022 Two values only:\n\u2013 true\n\u2013 false\n\n\u2022 How do we declare one?\n\n\fType name = value;\n\n\fboolean name = value;\n\n\fboolean yes = true;\n\n\fchar\n\u2022 Characters in single quotation marks\n\u2022 How do we declare one?\n\n\fType name = value;\n\n\fchar mander = 'z';\n\n\fdouble\n\u2022 Decimal numbers (not whole numbers)\n\u2022 When providing a value, it must have at\nleast one decimal place (2 should be\n2.0)\n\u2022 How do we declare one?\n\n\fdouble pi = 3.14;\n\n\fint\n\u2022 Integers (whole numbers)\n\u2022 How do we declare one?\n\n\fint zero = 0;\n\n\fbyte\n\u2022 Special tiny whole number\n\u2022 How do we declare one?\n\n\fbyte kiloB = (byte)127;\n\n\flong\n\u2022 Special larger whole number\n\u2022 How do we declare one?\n\n\flong timeAgo =\n123456789L;\n\n\fshort\n\u2022 Special smaller whole number\n\u2022 How do we declare one?\n\n\fshort y = (short)-4;\n\n\ffloat\n\u2022 Special smaller double\n\u2022 How do we declare one?\n\n\ffloat away = 3.5f;\n\n\fWhy is String not purple?\n\u2022 Why is String not a primitive value?\n\u2022 What is a String made up of?\n\u2022 Characters \uf0e0 char\n\n\fWARNING\n\u2022 char uses SINGLE QUOTATIONS\n\u2022 String uses DOUBLE QUOTATIONS\n\u2022 String can be empty! (\"\" \uf0df legal)\n\u2022 char CANNOT be empty! ('' \uf0df illegal)\n\u2022 Concatenation: + with only chars has a\ndifferent behavior than with Strings\n\n\fOkay, Let's Do Some Stuff\nNow!\npublic class Name\n{\npublic static void main(String[] args)\n{\nString firstName = \"Nathan\";\nchar midInitial = 'R';\nString lastName = \"Ong\";\nint age = 19;\nboolean hasFacebook = true;\nSystem.out.println(firstName + \" \" + midInitial + \" \" + lastName +\n\", age: \" + age +\n\", has a Facebook: \" + hasFacebook);\n}//end method main\n}//End class Name\n\nWhat is the output?\n\n\fWait Whaaaaa?\n\u2022 How did he add all of those things\ntogether??? Is that even legal? Is he\ncheating? He must have hacked Java.\n\u2022 Concatenation with any String forces\nother values to use their String\nrepresentations!\n\u2022 The value 19 is now \"19\"!\n\u2022 The value true is now \"true\"!\n\u2022 So again, what is the output?\n\n\fHmm, no one really says \"has a Facebook:\ntrue\"\nNow what? How do we fix this?\n\n\fRange of Values\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\nboolean\n\u2013 false, true\nbyte \u2013 -2^7, 2^7-1\nchar \u2013 ASCII\ndouble\u2013 -\u221e, +\u221e; with limited precision, and NaN\n(Not a Number)\nfloat \u2013 -\u221e, +\u221e; with limited precision, and NaN\n(Not a Number)\nint\n\u2013 -2^31, 2^31-1\nlong \u2013 -2^63, 2^63-1\nshort \u2013 -2^15, 2^15-1\n\n\fThis is great and all, but I really want\nto be able to store more useful info\n\u2022 Feels limited if we have to stay with the\nType name = value; structure\n\u2022 And thus we can introduce a new\nstructure\n\n\fType name = expression;\n\n\fboolean\n\u2022 Two values only:\n\u2013 true\n\u2013 false\n\n\u2022 We can also assign the variable an\nexpression to be evaluated.\n\n\fboolean Operators\n&&\n||\n!\n\n\u2013 Logical AND\n\u2013 Logical OR\n\u2013 Logical NOT\n\nboolean needUmb = rain || cloud;\nParentheses can be used as a way to\ngroup\n\n\fTruth Tables\nA B\n\nA&&B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nF\n\nF F\n\nF\n\n\fTruth Tables\nA B\n\nA||B\n\nT T\n\nT\n\nT F\n\nT\n\nF T\n\nT\n\nF F\n\nF\n\n\fTruth Tables\nA\n\n!A\n\nT\n\nF\n\nF\n\nT\n\n\fOrder of Operators\n1.\n2.\n3.\n\n!\u2013 Logical NOT\n&&\n\u2013 Logical AND\n||\n\u2013 Logical OR\n\nboolean needUmb = rain || !sun;\n\n\fConditional Logic\n\u2022 \u201cIf \u2026 then \u2026\u201d\n\u2022 Does not have an operator in Java\n\nA B\n\nA\uf0e0B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nT\n\nF F\n\nT\n\n\fConditional Logic\n\u2022 We can use an equivalent statement to\nget the result we want.\n\nA B\n\nA\uf0e0B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nT\n\nF F\n\nT\n\n\fConditional Logic\n\u2022 We can use an equivalent statement to\nget the result we want.\n\nA B\n\nA\uf0e0B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nT\n\nF F\n\nT\n\n\fConditional Logic\n\u2022 We can use an equivalent statement to\nget the result we want.\n\nA B\n\n!A||B\n\nT T\n\nT\n\nT F\n\nF\n\nF T\n\nT\n\nF F\n\nT\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}