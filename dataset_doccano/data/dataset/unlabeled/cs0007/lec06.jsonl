{"id": 174, "segment": "unlabeled", "course": "cs0007", "lec": "lec06", "text": "CS 0007: Introduction to Java\nLecture 6\nNathan Ong\nUniversity of Pittsburgh\nSeptember 20, 2016\n\n\fEven more API for your first Object\n\nSCANNERS\n\n\fScanner\n\n\fWhat is a Scanner?\n\u2022 Retrieves input\n\u2022 Can take input from a file, an input\nstream (console, network, etc.), or from\na String\n\u2022 Can read all primitives (except chars),\nand can read Strings\n\u2022 An object\n\n\fDeclaring Objects\n\nType name = expression;\n\n\fScanner name = new Scanner();\nWe will fill this in with something,\nbut what exactly goes here?\n\n\fDeclaring Objects\n\u2022 Any declaration of objects requires the\nkeyword \u201cnew\u201d\n\u2022 The method that follows the keyword\nare called constructors\n\u2022 Where can I look for them?\n\n\fA Special InputStream\nSystem.in\n\u2022 The standard way to retrieve input (via\nthe console)\n\u2022 A \u201cspecial\u201d variable.\n\u2022 Is this static or non-static?\n\n\fScanner consoleInput =\nnew Scanner(System.in);\n\n\fWhat can I do with it?\n\u2022 I have a Scanner that can read input\nfrom the user via the console.\n\u2022 How do I actually use it?\n\n\fUsing Scanner\npublic class AddingMachine\n{\npublic static void main(String[] args)\n{\nScanner scan = new Scanner(System.in);\nSystem.out.println(\"Please enter a number:\");\ndouble firstNum = scan.nextDouble();\nSystem.out.println(\"Please enter a second\nnumber:\");\ndouble secondNum = scan.nextDouble();\ndouble sum = firstNum + secondNum;\nSystem.out.println(\"The sum of \" + firstNum +\n\" and \" + secondNum + \" equals \" + sum);\n}//end method main\n}//End class AddingMachine\n\n\fUsing Scanner\npublic class AddingMachine\n{\npublic static void main(String[] args)\n{\nScanner scan = new Scanner(System.in);\nSystem.out.println(\"Please enter a number:\");\ndouble firstNum = scan.nextDouble();\nSystem.out.println(\"Please enter a second\nnumber:\");\ndouble secondNum = scan.nextDouble();\ndouble sum = firstNum + secondNum;\nSystem.out.println(\"The sum of \" + firstNum +\n\" and \" + secondNum + \" equals \" + sum);\n}//end method main\n}//End class AddingMachine\n\n\fUsing Scanner\npublic class AddingMachine\n{\npublic static void main(String[] args)\n{\nScanner scan = new Scanner(System.in);\nSystem.out.println(\"Please enter a number:\");\ndouble firstNum = scan.nextDouble();\nSystem.out.println(\"Please enter a second\nnumber:\");\ndouble secondNum = scan.nextDouble();\ndouble sum = firstNum + secondNum;\nSystem.out.println(\"The sum of \" + firstNum +\n\" and \" + secondNum + \" equals \" + sum);\n}//end method main\n}//End class AddingMachine\n\n\fLet\u2019s Compile\n\n???\n\n\fError?!?\n\u201cCannot find symbol\u201d\n\u2022 This indicates that the name does not\nrefer to anything\n\u2022 Based on the console output, \u201cScanner\u201d\ndoes not exist\n\u2022 Is there a way to figure out why?\n\n\fFrom the API\n\n\fError?!?\n\u2022 Rather than being a part of \u201cjava.lang,\u201d\nwhich is already included by default, it is\npart of a different package\n\u2022 In order to include Scanner, we need to\ndo an import\n\n\fimport java.util.Scanner;\npublic class AddingMachine\n{\npublic static void main(String[] args)\n{\nScanner scan = new Scanner(System.in);\nSystem.out.println(\"Please enter a number:\");\ndouble firstNum = scan.nextDouble();\nSystem.out.println(\"Please enter a second\nnumber:\");\ndouble secondNum = scan.nextDouble();\ndouble sum = firstNum + secondNum;\nSystem.out.println(\"The sum of \" + firstNum +\n\" and \" + secondNum + \" equals \" + sum);\n}//end method main\n}//End class AddingMachine\n\n\fDon\u2019t Forget to Import\n\n\fFUNCTIONS\n\n\fFunctions\n\u2022 A function is similar to its mathematical\ncounterpart\n\u2022 f(x) = x2, plug in 3, get 9\n\u2022 Contains several more parts\n\n\fJava Functions\n\u2022 Takes in zero or more parameters,\nprocesses them in the function body,\nand returns a result\n\u2022 Imagine going to BestBuyTM and telling\nthem you want your computer fixed.\nYou are telling them to run a fixing\nfunction, with your computer being a\nparameter. What you get back is your\nfixed computer.\n\n\fYou Already Have the Power!\n\u2022 You already know how to call functions!\nStatic:\nClassName.functionName(<parameters\n>);\nNon-static:\nobjectName.functionName(<parameter\ns>);\n\u2022 How do I make my own?\n\n\fFunction Components\n\n1.\n2.\n3.\nFunction 4.\nHeader 5.\n\nFunction\nBody 6.\n\nVisibility type (public/protected/private)\nstatic (For now, required)\nReturn Type\nfunctionName\nParentheses \u201c()\u201d\n\u2013\na)\nb)\nc)\n\nParameters\nType1 parameterName1\nType2 parameterName2\n\u2026\n\nCurly Brackets/Braces \u201c{}\u201d\n\u2013\n\nreturn a value\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}