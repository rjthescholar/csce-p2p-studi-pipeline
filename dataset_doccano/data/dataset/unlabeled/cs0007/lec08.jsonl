{"id": 143, "segment": "unlabeled", "course": "cs0007", "lec": "lec08", "text": "CS 0007: Introduction to Java\nLecture 8\nNathan Ong\nUniversity of Pittsburgh\nSeptember 27, 2016\n\n\fAnnouncement\n\u2022 Your midterm exam is scheduled for\nTuesday, October 11, during the normal\nclass period.\n\u2022 Anything from the lecture, homework,\nquiz, labs, is fair game.\n\u2022 You should also be comfortable with\nanalyzing previously unseen code in\nconjunction with using the API (as seen\nin several homeworks).\n\n\fFunction Components\n\n1.\n2.\n3.\nFunction 4.\nHeader 5.\n\nFunction\nBody 6.\n\nVisibility type (public/protected/private)\nstatic (For now, required)\nReturn Type\nfunctionName\nParentheses \u201c()\u201d\n\u2013\na)\nb)\nc)\n\nParameters\nType1 parameterName1\nType2 parameterName2\n\u2026\n\nCurly Brackets/Braces \u201c{}\u201d\n\u2013\n\nreturn a value\n\n\fFunction Overloading\n\u2022 Sometimes, the function name that was\nalready used fits perfectly with a\nfunction you need to create\n\u2022 They have similar functions, but operate\non different parameters\n\u2022 Turns out, you can use the same name,\nin what is called function overloading\n\n\fFunction Overloading Rules\n\u2022 Functions with the same name MUST\nhave different typed parameters, or a\ndifferent number of parameters.\n\u2022 We have seen this before!!!\n(System.out.println())\n\n\fExamples\npublic static void britishGreeting\n(String fullName)\npublic static void britishGreeting\n(String yourName, String childName)\n\npublic static int britishGreeting\n(int numOfPeople)\npublic static char britishGreeting\n(String firstNameOnly)\n\n\fSpecial Functions\n\u2022 Constructors: Functions that create new\nobjects, preceded by the keyword new\nbefore calling it.\n\u2022 main: The first function that is always\nrun by any Java program. It always has\na String[] as the only parameter.\n\u2022 Functions common to all objects: we\nmay return to this later.\n\n\fAnd More Booleans and Scope\n\nIF STATEMENTS\n\n\fIf Statements\n\u2022 English usage?\n\u2022 \u201cIf it will rain today, then I will bring my\numbrella.\u201d\n\u2022 Rain today would indicate that I have\nbrought my umbrella\n\u2022 Cause and effect relationship: when a\ncondition is met, a behavior is elicited.\n\n\fSkeleton Statement\nif(<boolean condition>)\n{\n\u2026\n}\n\u2026\n\n\fBoolean Condition\n\u2022 Must evaluate to true in order for the\nstatements within the if-block to\nexecute.\n\u2022 Evaluating to false will skip the block.\n\n\fJava Example\n/* checkWeather returns true if\nit\n* will rain today.*/\nboolean rainToday = checkWeather();\nif(rainToday)\n{\nbringUmbrella();\n}\ngoToSchool();\n\n\fRemember this?\n\"has a Facebook: true\u201c\nHow do we fix this?\n\n\fCode Reminder\npublic class Name\n{\npublic static void main(String[] args)\n{\nString firstName = \"Nathan\";\nchar midInitial = 'R';\nString lastName = \"Ong\";\nint age = 19;\nboolean hasFacebook = true;\nSystem.out.println(firstName + \" \" + midInitial +\n\" \" + lastName + \",\nage: \"\n+ age +\n\", has a Facebook: \" + hasFacebook);\n}//end method main\n}//End class Name\n\n\fA More Useful Output\n\u2022 if hasFacebook is true, then print what?\n\u2022 \"has a Facebook\"\n\u2022 Otherwise, if hasFacebook is false, then\nprint what?\n\u2022 \"does not have a Facebook\"\n\n\fif()\n\u2022 if hasFacebook is true, then print \"has a\nFacebook\"\nif(hasFacebook is true)\n{\nSystem.out.println(\"has a\nFacebook\");\n}//end block if(hasFacebook is true)\n\n\fhasFacebook is true\n\u2022 How do we model this?\n\u2022 hasFacebook = true; //?\n\u2022 But that let us do name-changing!\n\u2022 name = \"Brandon Ong\";\n\n\fMaking a new thing:\nType name = value;\nChanging the old thing:\nname = newValue;\n\n\fhasFacebook is true\n\u2022 How do we model this?\n\u2022 hasFacebook = true //?\n\u2022 But that let us do name-changing!\n\u2022 name = \"Brandon Ong\";\n\u2022 So no, we can't do this to check for\nequality\n\u2022 We instead use double equals (==)\n\n\f== vs =\n\u2022 = is for assignment\n\n\u2013 String name = \"Nathan Ong\";\n\u2013 name has value?\n\u2013 int age = 19;\n\u2013 age has value?\n\n\u2022 == is for comparison (equal or not equal)\n\u2013 age == 19;\n\u2013 name == \"Nathan Ong\";\n\n\u2022 What values do we get for the last two\nstatements?\n\u2022 What type are they?\n\n\fWARNING\n\u2022 Be careful when comparing nonprimitive values!!!\n\u2022 name == \"Nathan Ong\" could actually\ngive us false!\n\u2022 Instead you will need to use equals()\n\u2022 name.equals(\"Nathan Ong\");\n\n\fif()\n\u2022 if hasFacebook is true, then print \"has a\nFacebook\"\nif(hasFacebook == true)\n{\nSystem.out.println(\"has a\nFacebook\");\n}//end block if(hasFacebook == true)\n\u2022 But how do I represent when hasFacebook is\nfalse?\n\n\felse if()\n\u2022 If an if condition fails (the boolean\ncondition evaluates to false), it will\ncheck the condition for the subsequent\nelse if.\n\u2022 Can also be placed directly after\nanother else if block (i.e. you can\nhave several).\n\n\felse if()\n\u2022 Otherwise, if hasFacebook is false, then\nprint \"does not have a Facebook\"\nelse if(hasFacebook == false)\n{\nSystem.out.println(\"does not\nhave a Facebook\");\n}//end block else if(hasFacebook\n// == false)\n\n\felse if()\nif(hasFacebook == true)\n{\nSystem.out.println(\"has a Facebook\");\n}//end block if(hasFacebook == true)\nelse if(hasFacebook == false)\n{\nSystem.out.println(\"does not have a\nFacebook\");\n}//end block else if(hasFacebook == false)\n\nSeems kinda wordy\u2026\n\n\fhasFacebook == true\n\u2022 What does that give us?\n\u2022 What type?\n\u2022 hasFacebook == true when\nhasFacebook = true gives us?\n\u2022 hasFacebook == true when\nhasFacebook = false gives us?\n\u2022 hasFacebook == true \uf0e0\nhasFacebook\n\u2022 *Gasp*\n\n\fif()\nif(hasFacebook)\n{\nSystem.out.println(\"has a Facebook\");\n}//end block if(hasFacebook)\nelse if(hasFacebook == false)\n{\nSystem.out.println(\"does not have a\nFacebook\");\n}//end block else if(hasFacebook == false)\n\nStill kinda wordy\u2026\n\n\fhasFacebook == false\n\u2022 We want to use the same trick we did\nbefore, except this time with false\ninstead of true.\n\u2022 Remember the boolean operators?\n\n\fif()\nif(hasFacebook)\n{\nSystem.out.println(\"has a Facebook\");\n}//end block if(hasFacebook)\nelse if(!hasFacebook)\n{\nSystem.out.println(\"does not have a\nFacebook\");\n}//end block else if(!hasFacebook)\n\nStill kinda wordy\u2026\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}