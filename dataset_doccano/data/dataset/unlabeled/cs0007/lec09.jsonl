{"id": 190, "segment": "unlabeled", "course": "cs0007", "lec": "lec09", "text": "CS 0007: Introduction to Java\nLecture 9\nNathan Ong\nUniversity of Pittsburgh\nSeptember 29, 2016\n\n\fIf Statements\n\u2022 English usage?\n\u2022 \u201cIf it will rain today, then I will bring my\numbrella.\u201d\n\u2022 Rain today would indicate that I have\nbrought my umbrella\n\u2022 Cause and effect relationship: when a\ncondition is met, a behavior is elicited.\n\n\fSkeleton Statement\nif(<boolean condition>)\n{\n\u2026\n}\n\u2026\n\n\fBoolean Condition\n\u2022 Must evaluate to true in order for the\nstatements within the if-block to\nexecute.\n\u2022 Evaluating to false will skip the block.\n\n\fJava Example\n/* checkWeather returns true if\nit\n* will rain today.*/\nboolean rainToday = checkWeather();\nif(rainToday)\n{\nbringUmbrella();\n}\ngoToSchool();\n\n\fif()\n\u2022 if hasFacebook is true, then print \"has a\nFacebook\"\nif(hasFacebook)\n{\nSystem.out.println(\"has a\nFacebook\");\n}//end block if(hasFacebook == true)\n\u2022 But how do I represent when hasFacebook is\nfalse?\n\n\felse if()\n\u2022 Otherwise, if hasFacebook is false, then\nprint \"does not have a Facebook\"\nelse if(!hasFacebook)\n{\nSystem.out.println(\"does not\nhave a Facebook\");\n}//end block else if(hasFacebook\n// == false)\n\n\fif()\nif(hasFacebook)\n{\nSystem.out.println(\"has a Facebook\");\n}//end block if(hasFacebook)\nelse if(!hasFacebook)\n{\nSystem.out.println(\"does not have a\nFacebook\");\n}//end block else if(!hasFacebook)\n\nStill kinda wordy\u2026\n\n\felse if(!hasFacebook)\n\u2022 How many values can hasFacebook\nhave?\n\u2022 How many values can a boolean have?\n\u2022 Why do we even need to check for !\nhasFacebook when we know if it is not\ntrue, it should do that portion of code?\n\u2022 \uf0e0 else\n\n\felse\n\u2022 When all else fails, execute everything\ninside this block.\n\u2022 All boolean expressions from the\nprevious if and else if blocks must\nall evaluate to false for this block to\nexecute.\n\u2022 In the hasFacebook example, because\nwe know it can only hold two values, if it\nis not true, then it must be false.\n\n\felse\nif(hasFacebook)\n{\nSystem.out.println(\"has a Facebook\");\n}//end block if(hasFacebook)\nelse\n{\nSystem.out.println(\"does not have a\nFacebook\");\n}//end block else\n\nSTILL kinda wordy\u2026\n\n\fSystem.out.println(\"has a\nFacebook\");\n\u2022 Both lines use \"a Facebook\"\n\u2022 How can we use this to our advantage?\n\u2022 Why do we even want to do this?\n\n\fOptimization\n\u2022 Eventually, we get down all of that code\ninto something very short\n\u2022 Shorter code generally (in all the\nprogramming you will be doing) means a\nfaster program and is easier to read\n\u2022 if statements take time to evaluate\n\u2022 If you had five million of them, your\nprogram would be painfully slow. Reduce\nthe number of if statements, if you can.\n\n\fReducing Common Code\nif(hasFacebook)\n{\nSystem.out.print(\"has\");\n}//end block if(hasFacebook)\nelse\n{\nSystem.out.print(\"does not have\");\n}//end block else\nSystem.out.println(\" a Facebook\");\n\nThis is overkill for this example, but may prove useful in\nlater situations. I can still make this even shorter.\n\n\f?:\n\u2022 Simple choice operator\n(boolean expression) ? true return : false\nreturn;\n\u2022 Only use this in very simple if cases\n\n\f?:\n(hasFacebook ? \"has\" : \"does not\nhave\") + \" a Facebook\");\n\u2022 Now we can get it all in one line!\n\n\fAdding It in\npublic class Name\n{\npublic static void main(String[] args)\n{\nString firstName = \"Nathan\";\nchar midInitial = 'R';\nString lastName = \"Ong\";\nint age = 19;\nboolean hasFacebook = true;\nSystem.out.println(firstName + \" \" + midInitial +\n\" \" +\nlastName + \", age: \" + age + \", \" +\n(hasFacebook ? \"has\" :\n\"does not have\") +\n\" a Facebook\");\n}//end method main\n}//End class Name\n\nWhat is the output?\n\n\fWas it really worth it?\nHow messy was that code?\n\n\fTrade-Offs\n\u2022 Readability vs. Length\n\u2022 Who even wants to read a four-line oneliner?\n\u2022 Instead you should somehow tell the\nprogrammer what you mean (also so\nyou don't forget)\n\u2022 Remember the strange green thing at\nthe end?\n\n\fComment Reminders\npublic class Name\n{\npublic static void main(String[] args)\n{\nString firstName = \"Nathan\";\nchar midInitial = 'R';\nString lastName = \"Ong\";\nint age = 19;\nboolean hasFacebook = true;\nSystem.out.println(firstName + \" \" + midInitial +\n\" \" +\nlastName + \", age: \" + age + \", \" +\n(hasFacebook ? \"has\" :\n\"does not have\") +\n\" a Facebook\");\n}//end method main\n}//End class Name\n\n\fif() recap\n//always run this code\nif(condition1 is true)\n{\n//run this code\n}\nelse if(condition2 is true)\n{\n//run this code\n}\nelse if(condition3 is true)\n{\n\u2026\n}\n\u2026\nelse //if conditions 1\u2026n were not satisfied\n{\n//run this code\n}\n//always run this code\n\n\fRevisiting Scope\n\u2022 Scope works by curly brackets.\n\u2022 Curly brackets surround all newly\ndeclared information, keeping it hidden\nfrom code outside of the curly brackets.\n\n\fScope\nConfidential\nSecret\nTop Secret\n\n\fScope\npublic class ScopeExample\npublic static void main\n\npublic static void func\n\nif\n\nif\nif\n\nelse if\n\nDarker shades can see lighter shades,\nbut not vice versa\n\n\fScope in Code\npublic class Name\n{\npublic static void main(String[] args)\n{\nint x = 0;\n//x == 0, y is undefined\nif(x == 0)\n{\nint y = 10;\nx = 15;\n//x == 15, y == 10\n}\n//x == 15, y is undefined\n}//end method main\n}//End class Name\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}