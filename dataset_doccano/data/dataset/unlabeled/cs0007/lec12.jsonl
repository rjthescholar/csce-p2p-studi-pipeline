{"id": 142, "segment": "unlabeled", "course": "cs0007", "lec": "lec12", "text": "CS 0007: Introduction to Java\nLecture 12\nNathan Ong\nUniversity of Pittsburgh\nOctober 20, 2016\n\n\fAnnoucements\n\u2022 Project 0 submission link is now\navailable via CourseWeb\n\u2022 When submitting, please organize your\nsource code and your essay into one zip\nfile. The zip file name should be\nLastnameFirstname_Project0.zip\n\u2022 Please DO NOT include any *.class files\n\n\fType[] name = new Type[size];\n\n\fint[] empty = new int[10];\n\n\fint[] list = {1,2,3,4};\n\n\fwhile(){\u2026}\n\u2022 While a condition is true, run the block\n\u2022 While not at the end of the list, print out\nthe next element\nwhile(not at end of list)\n{\nSystem.out.println(next element);\n}//end loop while(not at end of list)\n\n\fwhile(){\u2026}\nint currElement = 0;\nwhile(currElement < list.length)\n{\nSystem.out.println(list[currElement]);\ncurrElement++;\n}//end loop\nwhile(currElement<list.length)\n\n\fSo Many Things We Have to\nRemember\u2026WHYYYYYYYYYY\nint counter = start;\nwhile(condition)\n{\n//Do stuff\ncounter increment\n}//end loop while(condition)\n\u2022 There must be a better way\n\u2022 WILD KEYWORD APPEARS\n\n\ffor(;;){\u2026}\n\u2022 The for loop allows us to put everything\ntogether for us!\n\u2022 for(counter = start; condition; counter\nincrement)\n\u2022 Now we don't have to worry about the\nplacement of the counter and\nincrementing it!\n\n\fEQUIVALENCE\nint counter = start;\nwhile(condition)\n{\n//Do stuff\ncounter\nincrement\n}//end loop\n//while(condition)\n\nfor(int counter = start;\ncondition; counter\nincrement)\n{\n//Do stuff\n}//end loop\nfor(condition)\n\n\ffor(;;){\u2026}\nfor(int currElement = 0; currElement <\nlist.length; currElement++)\n{\nSystem.out.println(list[currElement]);\n}//end loop for(currElement <\nlist.length)\n\n\fA Note\n\u2022 Programmers are lazy\n\u2022 Therefore, currElement is too long for\na name\n\u2022 Conventional counter names are:\ni, j , k , l , m , n , c , a , b , d , num ,\ncount , counter\n\n\ffor(;;){\u2026}\nfor(int i = 0; i < list.length; i++)\n{\nSystem.out.println(\nlist[currElement]);\n}//end loop for(i < list.length)\n\n\fLet's Test It on List\n\nint[] list = {1,2,3,4};\n\n\fLet's Test It on List\npublic class Test\n{\npublic static void main(String[] args)\n{\nint[] list = {1,2,3,4};\nfor(int i = 0; i < list.length; i++)\n{\nSystem.out.println(\"Counting...\nlist[i]);\n}//end loop for(i < list.length)\n}//end method main\n}//End class Test\n\nWhat is the output?\n\nNow at \" +\n\n\fIt works, YAAAAAYYYYYY!!!\n\n\fUsage\n\u2022 When do I use For Loops?\n\u2013 Iteration, or going through all of the\nelements of an array or other type of list.\n\u2013 When the number of times you need to\nloop is known, either explicitly with a value,\nor through a variable.\n\n\u2022 While loops are used otherwise\n\n\fMulti-dimension Arrays\n\u2022 Arrays don't just have to be lists\n\u2022 They can also be grids, cubes, hypercubes, \u2026\n\n\fType[]\u2026[] name = new Type[size1]\u2026\n[sizeN];\n\n\fType[]\u2026[] name = values\u2026s;\n\n\fint[][] listList = {{1,2,3},\n{4,5,6},{7,8,9}};\n\n\fThings to Remember\n\u2022 In 2-D Arrays, referencing an element\nrequires TWO PAIRS of square brackets\n\u2022 To get the #1 from listList\n\u2022 listList[0][0]\n\u2022 To get the #4 from listList\n\u2022 listList[1][0]\n\u2022 Remember: element \uf0e0 listList[row][col]\n\n\fHow Do We Go Through a 2-D\nArray?\n\u2022 If it took one for loop to go though a 1D array, then\u2026\n\u2022 It will take two for loops to go through a\n2-D array\n\u2022 It will take N for loops to go through an\nN-D array\n\u2022 If you don't have to go through\neverything, don't. It just wastes time\n\n\fWe need to modify this\npublic class Test\n{\npublic static void main(String[] args)\n{\nint[][] listList =\n{{1,2,3},{4,5,6},{7,8,9}};\nfor(int i = 0; i < listList.length; i++)\n{\nSystem.out.println(\"Counting...\n\nNow at \" + listList[i]);\n\n}//end loop for(i < list.length)\n}//end method main\n}//end class Test\n\nThere is only one loop. How do we write the next one?\n\n\fInner For Loop\nfor(int i = 0; i < listList.length;\ni++)\n{\n//inner for loop\n//\u2026\n//end inner for loop\n}//end outer-loop for(i <\n//listList.length)\nWhat does the outer for loop go through?\nWhat should the inner for loop go through?\n\n\flistList[row][col]\n\n\fInner For Loop\nfor(int i = 0; i < listList.length;\ni++)\n{\n//inner for loop\n//\u2026\n//end inner for loop\n}//end outer-loop for(i <\n//listList.length)\nThe outer loop goes through the row\nThe inner loop goes through the columns\n\n\fInner For Loop\n//inner for loop\nfor(int i = 0; i < listList.length;\ni++)\n{\nSystem.out.println(\"Counting\u2026\nNow at \" + listList[i][i]);\n}//end inner-loop for(i <\n//listList.length)\nIs this allowed?\nNo because i is already used\n\n\fInner For Loop\n//inner for loop\nfor(int j = 0; j < listList.length; j++)\n{\nSystem.out.println(\"Counting\u2026\nNow at \"\n+ listList[i][j]);\n}//end inner-loop for(j <\n//listList.length)\nIs this allowed?\nNo because listList.length only gets the number of\nrows!\nWhat can we do?\nWhat if we use each individual row's length?\n\n\fInner For Loop\n//inner for loop\nfor(int j = 0; j <\nlistList[i].length; j++)\n{\nSystem.out.println(\"Counting\u2026\nNow at \" + listList[i][j]);\n}//end inner-loop for(j <\n//listList[i].length)\nDoes this work?\n\n\fLet's Test It on listList\npublic class Test\n{\npublic static void main(String[] args)\n{\nint[][] list = {{1,2,3},{4,5,6},{7,8,9}};\nfor(int i = 0; i < list.length; i++)\n{\nfor(int j = 0; j < list[i].length; j++)\n{\nSystem.out.println(\"Counting...\nNow at \" + list[i][j]);\n}//end inner-loop for(j < list[i].length)\n}//end outer-loop for(i < list.length)\n}//end method main\n}//End class Test\n\nFor convenience sake, listList \uf0e0 list\nWhat is the output?\n\n\fIt works, YAAAAAYYYYYY!!!\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}