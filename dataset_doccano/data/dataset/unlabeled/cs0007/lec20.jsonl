{"id": 166, "segment": "unlabeled", "course": "cs0007", "lec": "lec20", "text": "CS 0007: Introduction to Java\nLecture 20\nNathan Ong\nUniversity of Pittsburgh\nNovember 22, 2016\n\n\fLong Story Short\n\u2022 Scanner has a buffering quirk. When\nscanning for a token (an item like\nboolean, int) that is not a line, the\nscanner reads up to the new line\ncharacter, but does not consume it.\n\u2022 When you call nextLine(), it sees the\nnew line, assumes it is done reading,\nand returns an empty String.\n\n\fA Reminder\n\u2022 The act of receiving input is called\nreading\n\u2022 Relevant classes that do reading are\nReaders\n\n\fA Re-examination\n\u2022 System.in\n\u2022 An InputStream\n\u2022 If we examine the API, InputStreams\ncan only read bytes. Not very helpful.\n\u2022 What could we try?\n\n\fInputStreamReader\n\u2022 Now we can read characters, but having\nto combine all the characters is difficult\n\u2022 Why don\u2019t we use the suggestion from\nthe API?\n\n\fBufferedReader\n\u2022 This thankfully allows us to read full\nlines of input\n\u2022 The input needs to be processed\ndepending on your needs\n\u2022 Let us first learn how to use\nBufferedReader correctly\n\n\fExceptions\n\u2022 An exception is an event meant to disrupt the\nflow of execution\n\u2022 To throw an exception is to see an exception\nbeing raised\n\u2022 To catch an exception is to acknowledge a\nthrown exception\n\u2022 You probably have already encountered some\nwhile debugging your code\n\u2022 We will focus on two of three types, which are\nmore common\n\n\fException Types\n\u2022 Checked\n\n\u2013 Exceptions that need to have a contingency plan\nshould the exception arise\n\u2013 These stop the compiler from running\n\u2013 Example: IOException\n\n\u2022 Unchecked\n\n\u2013 Exceptions that tend to indicate the program has\na flaw during its execution\n\u2013 These stop the program in the middle of\nexecution\n\u2013 Example: ArrayIndexOutOfBoundsException\n\n\fDealing with Exceptions\n\u2022 Checked\n\u2013 try, catch, finally\n\n\u2022 Unchecked\n\u2013 Fix your program code\n\n\fKeywords in Context\n\u2022 Everything inside the try block\nindicates the section of code that may\nthrow exceptions\n\u2022 Inside the catch\u2019s parentheses is the\nexpected exception to process, and the\nname given to it (usually \u2018e\u2019)\n\u2022 Inside the catch block indicates the\nsection of code that should be executed\nif the exception is caught\n\n\fSome FAQ\n\u2022 How do I know when an exception is thrown?\n\u2013 Check the API for relevant methods\n\n\u2022 How do I know which exception is thrown?\n\u2013 Check the API\n\n\u2022 How much code should I surround with try?\n\u2013 Only as much as you need\n\u2013 Note that scope applies here as well\n\n\u2022 Can I catch multiple exceptions?\n\u2013 Yes, you can use several catch blocks\n\u2013 We\u2019ll see an example soon\n\n\fExample\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\n\npublic class BRExample\n{\npublic static void main(String[] args)\n{\nString line = \"\";\nSystem.out.println(\"Type something!\");\ntry\n{\nBufferedReader reader = new\nBufferedReader(new\nInputStreamReader(System.in));\nline = reader.readLine();\nreader.close();\n}\ncatch (IOException e)\n{\ne.printStackTrace();\n}\nSystem.out.println(line + \" is what you wrote.\");\n}//end method main\n}//End class BRExample\n\n\fConverting Strings into Useful\nPrimitives\n\u2022 Scanner gave us useful methods like\nnextInt() or nextDouble(). We can\ndo the same with BufferedReader, but\nnot directly.\n\u2022 We need to take another trip to the API,\nspecifically for the classes that back the\nprimitives.\n\u2022 Let\u2019s look at Integer\n\n\fExample\npublic class Converter\n{\npublic static int convertToInt(String line)\n{\ntry\n{\nreturn Integer.parseInt(line);\n}\ncatch (NumberFormatException e)\n{\n//??\n}\n}//end method main\n}//End class Converter\n\n\fExample\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\n\npublic class BRExample2\n{\npublic static void main(String[] args)\n{\nint inputNum = -1;\nSystem.out.println(\"Type an integer!\");\ntry\n{\nBufferedReader reader = new\nBufferedReader(new\nInputStreamReader(System.in));\nString line = reader.readLine();\ninputNum = Converter.convertToInt(line);\nreader.close();\n}\ncatch (IOException e)\n{\ne.printStackTrace();\n}\nSystem.out.println(inputNum + \" + 1 = \" + (inputNum+1));\n}//end method main\n}//End class BRExample2\n\n\fA Note about Integer\n\u2022 Integer is a wrapper class around the\nprimitive int\n\u2022 All primitives have wrapper classes\n\u2022 Consult the API\n\n\fFile Input/Output\n\u2022 Files are the biggest way we interact\nwith computer data.\n\u2022 Your Word documents, your game save\nfiles, your Java source code, all of them\nare stored as files.\n\u2022 We want to read them too!\n\u2022 Let\u2019s check BufferedReader\u2019s API for\nany clues.\n\n\fFile Input/Output\n\u2022 Files are the biggest way we interact\nwith computer data.\n\u2022 Your Word documents, your game save\nfiles, your Java source code, all of them\nare stored as files.\n\u2022 We want to read them too!\n\u2022 Let\u2019s check BufferedReader\u2019s API for\nany clues.\n\n\fimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\n\npublic class BRWithFiles\n{\npublic static void main(String[] args)\n{\nint inputNum = -1;\nSystem.out.println(\"Type an integer!\");\ntry\n{\nBufferedReader reader = new BufferedReader(new\nFileReader(\"test.txt\"));\nString line = reader.readLine();\ninputNum = Converter.convertToInt(line);\nreader.close();\n}\ncatch (FileNotFoundException e)\n{\nSystem.err.println(\"The file was not found\");\n}\ncatch (IOException e)\n{\ne.printStackTrace();\n}\nSystem.out.println(\"The number in the file was: \" + inputNum);\n}//end method main\n}//End class BRWithFiles\n\n\fWriters and Writing\n\u2022 The act of providing output is called\nwriting\n\u2022 Relevant classes that do writing are\nWriters\n\u2022 How do I write to a File?\n\n\fimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\npublic class InputAndOutput\n{\n\u2026\npublic static String getInput(String prompt)\n{\nSystem.out.println(prompt);\nString input = null;\ntry\n{\nBufferedReader reader = new BufferedReader(new\nInputStreamReader(System.in));\ninput = reader.readLine();\nreader.close();\n}\ncatch (IOException e)\n{\ne.printStackTrace();\n}\nreturn input;\n}//end method getInput(String)\n}//End class InputAndOutput\n\n\fimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\npublic class InputAndOutput\n{\n\u2026\npublic static void writeOutput(String lines, String filename)\n{\ntry\n{\nFileWriter writer = new FileWriter(filename);\nwriter.write(lines);\nwriter.flush();\nwriter.close();\n}\ncatch (IOException e)\n{\ne.printStackTrace();\n}\n}//end method writeOutput(String,String)\n}//End class InputAndOutput\n\n\fExample\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\npublic class InputAndOutput\n{\n\u2026\npublic static void main(String[] args)\n{\nString filename = getInput(\"What\nfile would you like to\ncreate?\");\nString toStore = getInput(\"What\nwould you like to store in\nthe file?\");\nwriteOutput(filename,toStore);\n}//end method main\n}//End class InputAndOutput\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}