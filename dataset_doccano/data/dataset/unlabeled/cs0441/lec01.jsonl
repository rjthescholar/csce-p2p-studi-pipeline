{"id": 185, "segment": "unlabeled", "course": "cs0441", "lec": "lec01", "text": "Discrete Structures for Computer\nScience\n\nWilliam Garrison\nbill@cs.pitt.edu\n6311 Sennott Square\nLecture #1: Course Introduction\n\nBased on materials developed by Dr. Adam Lee\n\n\fAdministrivia\nCS 441: Discrete Structures for Computer Science\nInstructor:\n\nTA:\n\nWilliam Garrison\nbill@cs.pitt.edu\n6311 Sennott Square\nOH: TBA, by appt.\n\nTBA\n\nhttp://cs.pitt.edu/~bill/441\n\n\fCourse meeting times\nn Lecture\nl B: Flex@Pitt, M/W 5:00\u20136:15\nl C: Flex@Pitt, T/H 4:30\u20135:45\n\nn Recitations\nl Wednesday or Friday (see website)\n\nn It is important to attend both lecture and your\nassigned recitation section!\nl (No recitations this week)\n\n\fGrading\nn Overall breakdown:\nl 30% Midterm exam\nl 30% Final exam\nl 20% Homework\nl 10% Recitation exercises\nl 10% Lecture participation (Top Hat)\nl 100%\n\n\fRecitation\nRecitation exercises\nl Covers the previous week\u2019s material (W\u2013T)\nl Assigned the day before recitation, due the day of your\nrecitation at 11:59 PM via Gradescope\nl Late submissions are not accepted\u2014submit early and often\nl Two lowest exercise grades will be dropped\n\nRecitations are collaborative\nl You should try the exercises in advance of recitation\nl You\u2019ll go over much of the solutions in recitations\nl Submit solutions that you understand\u2014don\u2019t just copy what\nyour TA writes or copy a friend\u2019s submission\n\n\fHomework\nWeekly homework assignments\nl Assigned on Friday, due the next Tuesday at 11:59 PM\nl Late homework is not accepted\u2014submit early and often\nl Two lowest homework grades will be dropped\n\nHomework may be discussed with others, but must be\nsolved and written up individually\nl Limit discussion to understanding problems and developing\nhigh-level solution tactics\nl Canvas is a good place to do this\n\nl Identify collaborators on your homework cover sheet\nl No online resources (except Canvas)\nl Failure to comply with this policy is a violation of academic\nintegrity (F in the course)\n\n\fPolicies\nn Check the web page and Canvas frequently. Announcements,\nhomework, and lecture slides will be posted there\nn We will drop your two lowest homework and recitation scores\nbefore computing your homework average\u2014no excuses necessary!\nn Regrade requests accepted within 2 weeks of hand-back. Grade\nmay increase, decrease, or stay the same.\nn Other policies are on the web page\nl Accommodating students with disabilities\nl Religious observances\nl Etc.\n\n\fQuestions?\n\n\fCourse overview\nn What is discrete mathematics?\nn Why is a math course part of the computer science\ncurriculum?\nn Will I really ever use this stuff again?\nn How to succeed in this course\n\n\fWhat is discrete mathematics?\nn Discrete mathematics is the study of distinct objects or\nstructures and their relationships to one another\nn For example:\nl How many ways can a valid password be chosen?\nl Can traffic flow between two computers in a network?\nl How can we transform messages to hide their contents?\nl How do we parse a given sequence of commands?\n\nn By contrast, continuous mathematics (e.g., calculus)\nstudies objects and relationships that vary continuously\nl e.g., position, velocity, and acceleration of a projectile\n\n\fWhy study discrete math?\nReason 1: Computers do not process continuous data\n\nSampling and\ndiscretization\nAnalog (continuous) input\n\nDigital (discrete) output\n\n\fWhy study discrete math?\nReason 2: Computers aren\u2019t actually all that smart, they are\njust deterministic functions that map discrete\ninputs to discrete outputs\nExample: Does a given string contain an odd number of 1s?\n1\nRead\n\n0\n\nNo\n\n0\n\n1\n\n1\n\n1\n\n0\n\n1\n\n0\n\n1\n\n\u2026\n\nYes\n1\n\n0\n\n\fWhy study discrete math?\nIn general: Discrete mathematics allows us to better understand\ncomputers and algorithms\n\nfunction fib(int n)\nif(n == 0 || n == 1)\nreturn 1;\nelse\nreturn fib(n-1) + fib(n-2);\n\nfunction fib(int n)\nint first = 0;\nint second = 1;\nint tmp;\nfor(i = 1 to n)\ntmp = first + second;\nfirst = second;\nsecond = tmp;\nend for\nreturn first;\n\n\fTentative Syllabus\nn Logic and proofs\nn Sets\nn Functions\nn Integers and modular arithmetic\nn Counting\nn Probability and expectation\nn Relations\n\nAre these topics really useful?\n\n\fLogic and proofs\ngrant(X, projector) :- role(X, presenter), located(X, 104)\nlocated(adam, 104)\nrole(adam, presenter)\n=> ?grant(adam, projector)\n=> true\n\nAutomated reasoning, AI, security\n\nexp()\n+\n*\nVerifying data structures\nand hardware\n\n3\n\n3.1415\n4\n\n2\n\nParsing\nexpressions\n\nfunction fib(int n)\nint first = 0;\nint second = 1;\nint tmp;\nfor(i = 1 to n)\ntmp = first + second;\nfirst = second;\nsecond = tmp;\nend for\nreturn first;\n\nAlgorithm and\nprotocol analysis\n\n\fSets\n\u2026 and give us a means of\nreasoning about the\nrelationships between objects\n\nSets define collections of\nobjects\u2026\n\n\fFunctions\n\nHardware design\n\nTheory of computation\nComputer graphics\n\n\fIntegers and Modular Arithmetic\nATTACK AT DAWN\n0111 0101 0110 1011\n+ 0101 1001 1110 0001\n1100 1111 0100 1100\nBinary arithmetic and\nbitwise operations\n\n01 20 20 01 03 11 01 20 04 01 23 14\nC = P+ 6 (mod 26)\n\n06 25 25 06 09 16 06 26 10 06 03 20\n\nFYYFIPFZJFCU\nCryptography\n\n\fCounting\n\nHow many valid\npasswords exist for a\ngiven set of rules?\n\nHow many IP addresses can be\nassigned within a network\nsegment? Will we run out?\n\n\fProbability and Expectation\n\nSpam classification\n\nHardware, software, and\nnetwork simulation\n\nRisk assessment\n\n\fRelations\nName\n\nAge\n\nPhone\n\nAlice\n\n19\n\n555-1234\n\nDanielle\n\n33\n\n555-5353\n\nZach\n\n27\n\n555-3217\n\nCharlie\n\n21\n\n555-2335\n\nRelational databases\n\nRoute\nplanning\n\nDHTs, DNS,\nname services\n\n\fSyllabus, redux\nn Logic and proofs\nn Sets\nn Functions\nn Integers and modular arithmetic\nn Counting\nn Probability and expectation\nn Relations\n\nAre these topics really useful?\nYes\n\n\fMastering discrete mathematics requires practice!\n\nn Succeeding in this class requires practicing the skills\nthat we will acquire, thinking critically, and asking\nquestions\nn Keys to success:\nl Attend class and take notes\nl Do your homework\nl Work extra problems when you\u2019re unsure\n\u27a3Solutions to odd-numbered exercises provided in textbook\n\nl Go to your recitation every week\nl Take advantage of office hours\n\n\fFinal thoughts\nn Our goal is to prepare you to be stronger computer\nscientists by:\nl Exploring the formal underpinnings of computer science\nl Developing critical thinking skills\nl Articulating ties between theory and practice\n\nn Next: Propositional logic\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}