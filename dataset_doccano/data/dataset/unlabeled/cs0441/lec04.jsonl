{"id": 139, "segment": "unlabeled", "course": "cs0441", "lec": "lec04", "text": "Discrete Structures for Computer\nScience\n\nWilliam Garrison\nbill@cs.pitt.edu\n6311 Sennott Square\nLecture #4: Predicates and Quantifiers\n\nBased on materials developed by Dr. Adam Lee\n\n\fTopics\nn Predicates\nn Quantifiers\nn Logical equivalences in predicate logic\nn Translations using quantifiers\n\n\fPropositional logic is simple, therefore limited\nPropositional logic cannot represent some classes of\nnatural language statements\u2026\nGiven: Kody is one\nof my dogs\n\nGiven: All of my dogs like peanut butter\n\nPropositional logic gives us no way to draw the\n(obvious) conclusion that Kody likes peanut butter!\n\n\fPropositional logic also limits the mathematical truths\nthat we can express and reason about\nConsider the following:\nl p1 \u00ba 2 has no divisors other than 1 and itself\nl p2 \u00ba 3 has no divisors other than 1 and itself\nl p3 \u00ba 5 has no divisors other than 1 and itself\nl p4 \u00ba 7 has no divisors other than 1 and itself\nl p5 \u00ba 11 has no divisors other than 1 and itself\nl\u2026\n\nThis is an inefficient way to reason about the\nproperties of prime numbers!\nGeneral problem: Propositional logic has no way of\nreasoning about instances of general statements.\n\n\fHistorical Context\nThe previous examples are called syllogisms\nAristotle used syllogisms in his Prior\nAnalytics to deductively infer new facts\nfrom existing knowledge\nMajor premise\n\nAll men are mortal\nSocrates is a man\nSocrates is mortal\nConclusion\n\nMinor premise\n\n\fPredicate logic allows us to reason about the properties\nof individual objects and classes of objects\nPredicate logic allows us to use propositional functions\nduring our logical reasoning\n\nP(x) \u00ba x3 > 0\nvariable\n\npredicate\n\nNote: A propositional function P(x) has no truth value\nunless it is evaluated for a given x or set of xs.\n\n\fExamples\nAssume P(x) \u00ba x3 > 0. What are the truth values of the\nfollowing expressions:\nl P(0)\nfalse\nl P(23)\ntrue\nl P(-42)\nfalse\nWe can express the prime number property using\npredicate logic:\nl P(x) \u00ba \u201cx is prime\u201d\nl D(x) \u00ba \u201cx has no divisors other than 1 and itself\u201d\nl P(x) \u00ab D(x)\n\n\fPredicates can also be defined on more than one\nvariable\nLet P(x, y) \u00ba x + y = 42. What are the truth values of\nthe following expressions:\nl P(45, -3)\ntrue\nl P(23, 23)\nfalse\nl P(1, 119)\nfalse\nLet S(x, y, z) \u00ba x + y = z. What are the truth values of\nthe following expressions:\ntrue\nl S(1, 1, 2)\nfalse\nl S(23, 24, 42)\ntrue\nl S(-9, 18, 9)\n\n\fPredicates play a central role in program control\nflow and debugging\nIf/then statements:\nl if x > 17 then y = 13\n\nLoops:\nl while y <= 14 do\n\u2026\nend while\n\nDebugging in C/C++:\nl assert(strlen(passwd) > 0);\n\nThis is a predicate!\n\n\fQuantifiers allow us to make general statements that\nturn propositional functions into propositions\nIn English, we use quantifiers on a regular basis:\nl All students can ride the bus for free\nl Many people like chocolate\nl I enjoy some types of tea\nl At least one person will sleep through their final exam\n\nQuantifiers require us to define a universe of discourse\n(also called a domain) in order for the quantification\nto make sense\nl \u201cMany like chocolate\u201d doesn\u2019t make sense!\n\nWhat are the universes of discourse for the above\nstatements?\n\n\fUniversal quantification allows us to make statements\nabout the entire universe of discourse\nExamples:\nl All of my dogs like peanut butter\nl Every even integer is a multiple of two\nl For each positive integer x, 2x > x\n\nGiven a propositional function P(x), we express the\nuniversal quantification of P(x) as \"x P(x)\nWhat is the truth value of \"x P(x)?\nl true if P(x) is true for every x in the universe of discourse\nl false if P(x) is false for even one x in the universe of discourse\n\n\fExamples\nAll rational numbers are greater than 42\nl Domain: rational numbers\nl Propositional function: Let G(x) \u00ba \u201cx is greater than 42\u201d\nl Statement: \"x G(x)\nl Truth value: false (counterexample: \u00bd)\n\nIf a natural number is prime, it has no divisors other than 1\nand itself\nl Domain: natural numbers\nl Propositional functions:\n\u27a3Let P(x) \u00ba \u201cx is prime\u201d\n\u27a3Let D(x) \u00ba \u201cx has no divisors other than 1 and itself\u201d\n\nl Statement: \"x [P(x) \u00ae D(x)]\nl Truth value: true (by definition)\n\n\fExistential quantifiers allow us to make\nstatements about some objects\nExamples:\nl Some elephants are scared of mice\nl There exist integers a, b, and c such that the equality\na2 + b2 = c2 is true\nl There is at least one person who did better than John on the\nmidterm\n\nGiven a propositional function P(x), we express the\nexistential quantification of P(x) as $x P(x)\nWhat is the truth value of $x P(x)?\nl true if P(x) is true for at least one x in the universe of discourse\nl false if P(x) is false for each x in the universe of discourse\n\n\fExamples\nThe inequality x + 1 < x holds for at least one integer\nl Domain: Integers\nl Propositional function: P(x) \u00ba x + 1 < x\nl Statement: $x P(x)\nl Truth value: false\n\nFor some integers, the equality a2 + b2 = c2 is true\nl Domain: Integers\nl Propositional function: P(a, b, c) \u00ba a2 + b2 = c2\nl Statement: $a,b,c P(a,b,c)\nl Truth value: true\n\n\fWe can restrict the domain of quantification\nThe square of every natural number less than 4 is no more\nthan 9\nl Domain: natural numbers\nl Statement: \"x<4 (x2 \u2264 9)\nl Truth value: true\n\nThis is equivalent to writing\n\n\"x [(x < 4) \u00ae (x2 \u2264 9)]\n\nSome integers between 0 and 6 are prime\nl Domain: Integers\nl Propositional function: P(x) \u00ba \u201cx is prime\u201d\nl Statement: $0\u2264x\u22646 P(x)\nl Truth value: true\nThis is equivalent to writing\n\n$x [(0\u2264x\u22646) \u00d9 P(x)]\n\n\fPrecedence of quantifiers\nThe universal and existential quantifiers have the\nhighest precedence of all logical operators\nFor example:\nl \"x P(x) \u00d9 Q(x) actually means (\"x P(x)) \u00d9 Q(x)\nl $x P(x) \u00ae Q(x) actually means ($x P(x)) \u00ae Q(x)\n\nFor the most part, we will use parentheses to\ndisambiguate these types of statements\nBut you are still responsible\nfor understanding precedence!\n\n\fIn-class exercises\nSee on Top Hat\n\n\fWe can extend the notion of logical equivalence to\nexpressions containing predicates or quantifiers\n\nDefinition: Two statements involving predicates and\nquantifiers are logically equivalent iff they take on the\nsame truth value regardless of which predicates are\nsubstituted into these statements and which domains\nof discourse are used.\n\n\fProve: $x [P(x) \u00da Q(x)] \u00ba $x P(x) \u00da $x Q(x)\nWe must prove each \u201cdirection\u201d of the equivalence.\nAssume that P and Q have the same domain.\nFirst, prove $x [P(x) \u00da Q(x)] \u00ae $x P(x) \u00da $x Q(x):\nl If $x [P(x) \u00da Q(x)] is true, this means that there is some value v in\nthe domain such that either P(v) is true or Q(v) is true\nl If P(v) is true, then $x P(x) is true and [$x P(x) \u00da $x Q(x)] is true\nl If Q(v) is true, then $x Q(x) is true and [$x P(x) \u00da $x Q(x)] is true\nl Thus $x [P(x) \u00da Q(x)] \u00ae $x P(x) \u00da $x Q(x)\n\n\fProve: $x [P(x) \u00da Q(x)] \u00ba $x P(x) \u00da $x Q(x)\nThen, prove $x P(x) \u00da $x Q(x) \u00ae $x [P(x) \u00da Q(x)]:\nl If $x P(x) \u00da $x Q(x) is true, this means that there is some\nvalue v in the domain such that either P(v) is true or Q(v) is\ntrue\nl If P(v) is true, then $x [P(x) \u00da Q(x)] is true\nl If Q(v) is true, then $x [P(x) \u00da Q(x)] is true\nl Thus $x P(x) \u00da $x Q(x) \u00ae $x [P(x) \u00da Q(x)]\n\nSince $x [P(x) \u00da Q(x)] \u00ae $x P(x) \u00da $x Q(x) and\n$x P(x) \u00da $x Q(x) \u00ae $x [P(x) \u00da Q(x)] then\n$x [P(x) \u00da Q(x)] \u00ba $x P(x) \u00da $x Q(x).\n\n\fWe also have DeMorgan\u2019s laws for quantifiers\nNegation over universal quantifier: \u00ac\"x P(x) \u00ba $x \u00acP(x)\nIntuition: If P(x) is not true for all x, then\nthere is at least one x for which P(x) is\nfalse\n\nNegation over existential quantifier: \u00ac$x P(x) \u00ba \"x \u00acP(x)\nIntuition: If P(x) is not true for at least\none value x, then P(x) is false for all x\n\nThese are very useful logical equivalences, so let\u2019s prove\none of them\u2026\n\n\fProve: \u00ac\"x P(x) \u00ba $x \u00acP(x)\nn \u00ac\"x P(x) \u00ae $x \u00acP(x)\nl \u00ac\"x P(x) is true if and only if \"x P(x) is false\nl \"x P(x) is false if and only if there is some v such that \u00acP(v)\nis true\nl If \u00acP(v) is true, then $x \u00acP(x)\n\nn $x \u00acP(x) \u00ae \u00ac\"x P(x)\nl $x \u00acP(x) is true if and only if there is some v such that \u00acP(v)\nis true\nl If \u00acP(v) is true, then clearly P(x) does not hold for all\npossible values in the domain and thus we have \u00ac\"x P(x)\n\nTherefore \u00ac\"x P(x) \u00ba $x \u00acP(x).\n\n\fTranslations from English\nTo translate English sentences into logical expressions:\n1. Rewrite the sentence to make it easier to translate\n2. Determine the appropriate quantifiers to use\n3. Look for words that indicate logical operators\n4. Formalize sentence fragments\n5. Put it all together\n\n\fExample: At least one person in this classroom is named Bill and\nhas lived in Pittsburgh for 8 years\nExistential quantifier\n\nRewrite: There exists at least one person who is in this\nclassroom, is named Bill, and has lived in Pittsburgh\nfor 8 years\nConjunction\n\nFormalize:\nl C(x) \u00ba \u201cx is in this classroom\u201d\nl N(x) \u00ba \u201cx is named Bill\u201d\nl P(x) \u00ba \u201cx has lived in Pittsburgh for 8 years\u201d\n\nFinal expression: $x [C(x) \u00d9 N(x) \u00d9 P(x)]\n\n\fExample: If a student is taking CS441, then they have\ntaken high school algebra\nUniversal quantifier\n\nRewrite: For all students, if a student is in CS 441,\nthen they have taken high school algebra\n\nFormalize:\n\nImplication\n\nl C(x) \u00ba \u201cx is taking CS441\u201d\nl H(x) \u00ba \u201cx has taken high school algebra\u201d\n\nFinal expression: \"x [C(x) \u00ae H(x)]\n\n\fNegate the previous example\nDeMorgan\u2019s law for\nnegation over the universal\nquantifier\n\n\u00ac\"x [C(x) \u00ae H(x)] \u00ba $x \u00ac[C(x) \u00ae H(x)]\n\u00ba $x \u00ac[\u00acC(x) \u00da H(x)]\n\u00ba $x [\u00ac\u00acC(x) \u00d9 \u00acH(x)]\na \u00ae b \u00ba \u00aca \u00da b\n\u00ba $x [C(x) \u00d9 \u00acH(x)]\nDeMorgan\u2019s law for\nDouble negation law\n\nnegation over\ndisjunction\n\nTranslate back into English:\nl There is a student taking CS441 that has not taken high\nschool algebra!\n\n\fExample: Jane enjoys drinking some types of tea\nRewrite: There exist some types of tea that Jane\nenjoys drinking\n\nFormalize:\nl T(x) \u00ba \u201cx is a type of tea\u201d\nl D(x) \u00ba \u201cJane enjoys drinking x\u201d\n\nFinal expression: $x [T(x) \u00d9 D(x)]\nNegate the previous example:\n\u00ac$x [T(x) \u00d9 D(x)] \u00ba \"x \u00ac[T(x) \u00d9 D(x)]\n\u00ba \"x [\u00acT(x) \u00da \u00acD(x)]\n\u00ba \"x [T(x) \u00ae \u00acD(x)]\n\u201cFor all types of drink, if x is a tea, Jane does not enjoy\ndrinking it.\u201d\n\n\fIn-class exercises\nProblem 3: Translate the following sentences into\nlogical expressions.\na) Some cows have black spots\nb) At least one student likes to watch football or ice hockey\nc) Any adult citizen of the US can register to vote if he or\nshe is not a convicted felon\n\nProblem 4: Negate the translated expressions from\nproblem 3. Translate these back into English.\n\n\fFinal Thoughts\nn The simplicity of propositional logic makes it unsuitable for\nsolving certain types of problems\nn Predicate logic makes use of\nl Propositional functions to describe properties of objects\nl The universal quantifier to assert properties of all objects within\na given domain\nl The existential quantifier to assert properties of some objects\nwithin a given domain\n\nn Predicate logic can be used to reason about relationships\nbetween objects and classes of objects\nn Next lecture:\nl Applications of predicate logic and nested quantifiers\nl Please read section 1.5\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}