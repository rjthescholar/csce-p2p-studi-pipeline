{"id": 144, "segment": "unlabeled", "course": "cs0441", "lec": "lec11", "text": "Discrete Structures for Computer\nScience\n\nWilliam Garrison\nbill@cs.pitt.edu\n6311 Sennott Square\nLecture #11: Integers and Modular Arithmetic\n\nBased on materials developed by Dr. Adam Lee\n\n\fToday\u2019s Topics\nIntegers and division\nl The division algorithm\nl Modular arithmetic\nl Applications of modular arithmetic\n\n\fWhat is number theory?\nNumber theory is the branch of mathematics that\nexplores the integers and their properties.\nNumber theory has many applications within computer\nscience, including:\nl Organizing data\nl Encrypting sensitive data\nl Developing error correcting codes\nl Generating \u201crandom\u201d numbers\nl \u2026\n\nWe will only scratch the surface\u2026\n\n\fThe notion of divisibility is one of the most basic\nproperties of the integers\nDefinition: If a and b are integers and a \u2260 0, we say\nthat a divides b if there is an integer c such that b = ac.\nWe write a | b to say that a divides b, and a /| b to say\nthat a does not divide b.\n\nMathematically: a | b \u21d4 \u2203 c\u2208Z (b = ac)\nNote: If a | b, then\nla is called a factor of b\nlb is called a multiple of a\n\nWe\u2019ve been using the notion of divisibility all along!\nlE = {x | x = 2k \u2227 k \u2208 Z}\n\n\fDivision examples\nExamples:\nl Does 4 | 16?\nl Does 3 | 11?\nl Does 7 | 42?\n\nYes, 16 = 4 \u00d7 4\nNo, because 11/3 is not an integer\nYes, 42 = 7 \u00d7 6\n\nQuestion: Let n and d be two positive integers. How\nmany positive integers not exceeding n are divisible by\nd?\nAnswer: We want to count the number of integers of the\nform dk that are less than n. That is, we want to know\nthe number of integers k with 0 \u2264 dk \u2264 n, or 0 \u2264 k \u2264\nn/d. Therefore, there are \u230an/d\u230b positive integers not\nexceeding n that are divisible by d.\n\n\fImportant properties of divisibility\nProperty 1: If a | b and a | c, then a | (b + c)\n\nProperty 2: If a | b, then a | bc for all integers c.\n\nProperty 3: If a | b and b | c, then a | c.\n\n\fDivision algorithm\nTheorem: Let a be an integer and let d be a positive\ninteger. There are unique integers q and r, with\n0 \u2264 r < d, such that a = dq + r.\n\nFor historical reasons, the above theorem is called the\ndivision algorithm, even though it isn\u2019t an algorithm!\n\nTerminology: Given a = dq + r\nl a is called the dividend\nl d is called the divisor\nl q is called the quotient\nl r is called the remainder\nl q = a div d\nl r = a mod d\n\ndiv and mod are operators\n\n\fExamples\nQuestion: What are the quotient and remainder when 123 is\ndivided by 23?\nAnswer: We have that 123 = 23 \u00d7 5 + 8. So the quotient is 123\ndiv 23 = 5, and the remainder is 123 mod 23 = 8.\nQuestion: What are the quotient and remainder when -11 is\ndivided by 3?\nAnswer: Since -11 = 3 \u00d7 -4 + 1, we have that the quotient is -4\nand the remainder is 1.\nRecall that since the remainder must be non-negative, 3 \u00d7 -3 \u2212 2\nis not a valid use of the division theorem!\n\n\fMany programming languages use the div and\nmod operations\nFor example, in Java, C, and C++\nl / corresponds to div when used on integer arguments\nl % corresponds to mod\n\nPrints out 1\n\npublic static void main(String[] args)\n{\nint x = 2;\nPrints out 2, not 2.5!\nint y = 5;\nfloat z = 2.0;\nSystem.out.println(y/x);\nSystem.out.println(y%x);\nSystem.out.println(y/z);\n\nPrints out 2.5\n\n}\nThis can be a source of many errors, so be careful in\nyour future classes!\n\n\fIn-class exercises\nProblem 1 & 2: On Top Hat\nProblem 3: Show that if \ud835\udc4e is an integer and \ud835\udc51 is an\ninteger greater than 1, then the quotient and remainder\n!\n!\nobtained dividing \ud835\udc4e by \ud835\udc51 are \" and \ud835\udc4e \u2212 \ud835\udc51 \" ,\nrespectively.\n\n\fSometimes, we care only about the remainder of an\ninteger after it is divided by some other integer\nExample: What time will it be 22 hours from now?\n\nAnswer: If it is 6am now, it will be (6 + 22) mod 24 =\n28 mod 24 = 4 am in 22 hours.\n\n\fSince remainders can be so important, they have\ntheir own special notation!\nDefinition: If a and b are integers and m is a positive\ninteger, we say that a is congruent to b modulo m if\nm | (a \u2013 b). We write this as a \u2261 b (mod m).\nNote: a \u2261 b (mod m) iff a mod m = b mod m.\n\nExamples:\nl Is 17 congruent to 5 modulo 6?\nl Is 24 congruent to 14 modulo 6?\n\nYes, since 6 | (17 \u2013 5)\nNo, since 6 |\n/ (24 \u2013 14)\n\n\fProperties of congruencies\nTheorem: Let m be a positive integer. The integers a\nand b are congruent modulo m (a \u2261 b (mod m)) iff\nthere is an integer k such that a = b + km.\n\nTheorem: Let m be a positive integer. If a \u2261 b (mod\nm) and c \u2261 d (mod m), then\nl (a + c) \u2261 (b + d) (mod m)\nl ac \u2261 bd (mod m)\n\n\fCongruencies have many applications within\ncomputer science\nToday we\u2019ll look at three:\n1. Hash functions\n2. The generation of pseudorandom numbers\n3. Cryptography\n\n\fHash functions allow us to quickly and\nefficiently locate data\nProblem: Given a large collection of records, how can we find the\none we want quickly?\nSolution: Apply a hash function that determines the storage\nlocation of the record based on the record\u2019s ID. A common hash\nfunction is h(k) = k mod n, where n is the number of available\nstorage locations.\n\nMemory:\n\n0\n\n42 mod 8 = 2\nID: 42\n\u2026\n\u2026\n\n1\n\n2\n\n3\n\n4\n\n276 mod 8 = 4\nID: 276\n\u2026\n\u2026\n\n5\n\n6\n\n7\n\n23 mod 8 = 7\nID: 23\n\u2026\n\u2026\n\n\fMany areas of computer science rely on the ability to\ngenerate pseudorandom numbers\n\nCoding algorithms\nHardware, software, and\nnetwork simulation\nSecurity\n\nNetwork protocols\n\n\fCongruencies can be used to generate\npseudorandom sequences\nStep 1: Choose\nl A modulus m\nl A multiplier a\nl An increment c\nl A seed x0\n\nStep 2: Apply the following\nl xn+1 = (axn + c) mod m\n\nExample: m = 9, a = 7, c = 4, x0 = 3\nl x1 = 7x0 + 4 mod 9 = 7\u00d73 + 4 mod 9 = 25 mod 9 = 7\nl x2 = 7x1 + 4 mod 9 = 7\u00d77 + 4 mod 9 = 53 mod 9 = 8\nl x3 = 7x2 + 4 mod 9 = 7\u00d78 + 4 mod 9 = 60 mod 9 = 6\nl x4 = 7x3 + 4 mod 9 = 7\u00d76 + 4 mod 9 = 46 mod 9 = 1\nl x5 = 7x4 + 4 mod 9 = 7\u00d71 + 4 mod 9 = 11 mod 9 = 2\nl\u2026\n\n\fThe field of cryptography makes heavy use of\nnumber theory and congruencies\nCryptography is the study of secret messages\nUses of cryptography:\nl Protecting medical records\nl Storing and transmitting military secrets\nl Secure web browsing\nl\u2026\n\nCongruencies are used in cryptosystems from antiquity, as\nwell as in modern-day algorithms\nSince modern algorithms require quite a bit of background to\ndiscuss, we\u2019ll examine an ancient cryptosystem\n\n\fThe Caesar cipher is based on congruencies\nTo encode a message using the Caesar cipher:\nl Choose a shift index s\nl Convert each letter A-Z into a number 0-25\nl Compute f(p) = p + s mod 26\n\nExample: Let s = 9. Encode \u201cATTACK\u201d.\nl ATTACK = 0 19 19 0 2 10\nl f(0) = 9, f(19) = 2, f(2) = 11, f(10) = 19\nl Encrypted message: 9 2 2 9 11 19 = JCCJLT\n\n\fDecryption involves using the inverse function\nThat is, f-1(p) = p - s mod 26\n\nExample: Assume that s = 3. Decrypt the message\n\u201cUHWUHDW\u201d.\nl UHWUHDW = 20 7 22 20 7 3 22\nl f-1(20) = 17, f-1(7) = 4, f-1(22) = 19, f-1(3) = 0\nl Decrypted result: 17 4 19 17 4 0 19 = RETREAT\n\n\fIn-class exercises\nProblem 4 & 5: On Top Hat\n\n\fFinal thoughts\nn Number theory is the study of integers and their\nproperties\nn Divisibility, modular arithmetic, and congruency are\nused throughout computer science\nn Next time:\nl Prime numbers, GCDs, integer representation (Section 4.2\nand 4.3)\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}