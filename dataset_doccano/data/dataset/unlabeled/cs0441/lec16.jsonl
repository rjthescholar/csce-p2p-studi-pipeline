{"id": 157, "segment": "unlabeled", "course": "cs0441", "lec": "lec16", "text": "Discrete Structures for Computer\nScience\n\nWilliam Garrison\nbill@cs.pitt.edu\n6311 Sennott Square\nLecture #16: Counting Basics\n\nBased on materials developed by Dr. Adam Lee\n\n\fToday\u2019s Topics\nn Introduction to combinatorics\nn Product rule\nn Sum rule\n\n\fWhat is combinatorics?\nCombinatorics is the study of arrangements of discrete\nobjects.\nWe can think of this as a fancy\nword for \u201ccounting\u201d\n\nMany applications throughout computer science:\nl Algorithm complexity analysis\nl Resource allocation & scheduling\nl Security analysis\nl\u2026\n\nToday, we will learn the basics of counting. More\nadvanced topics will be covered in later lectures.\n\n\fA motivating example\u2026\nTo access most computer systems, you need to login\nwith a user name and a password.\n\nSuppose that for a certain system\nl Passwords must contain either 6, 7, or 8 characters\nl Each character must be an uppercase letter or a digit\nl Every password must contain at least one digit\n\nHow many valid passwords are there?\n\n\fSolving these types of problems requires that we learn\nhow to count complex objects\nFortunately, we can solve many types of combinatorial\nproblems using two simple rules:\n\nThe product rule\n\nThe sum rule\n\n\fProduct rule applies when a counting problem\ncan be broken into multiple tasks\nThe Product Rule: Suppose a procedure can be broken\ninto a sequence t1, t2, \u2026, tk of tasks. Further, let there\nbe n1, n2, \u2026, nk ways to complete each task. Then there\nare n1\u00d7 n2\u00d7 \u2026\u00d7 nk ways to complete the procedure.\nTo apply the product rule, do the following:\n1. Identify each task t1, \u2026, tk\n2. For each task ti, determine the ni, the number of possible\nways to complete ti\n3. Compute n1\u00d7 n2\u00d7 \u2026\u00d7 nk\n\nLet\u2019s look at a few examples\u2026\n\n\fAn example: Assigning offices\nExample: It is Sherif and Bill\u2019s first day of work at Pitt.\nIf there are 10 unused offices in their department, how\nmany ways can Sherif and Bill be assigned an office?\n\nStep 1: Determine tasks\n1. Give Sherif an office\n2. Give Bill an office\n\nStep 2: Count possible completions\n1. Can give any one of 10 offices to Sherif\n2. Can give any one of the remaining 9 offices to Bill\n\nStep 3: Compute the product\nl\n\nSherif and Bill can be assigned offices in 10\u00d7 9 = 90 ways!\n\n\fAuditorium Seating\nExample: The chairs in an auditorium are to be labeled\nusing an upper case letter and a positive number not\nexceeding 100 (e.g., B23). What is the maximum\nnumber of seats that can be placed in the auditorium?\n\nSolution:\nl Task 1: Count the letters that can be used\n(26)\nl Task 2: Count the numbers that can be used\n(100)\nl So, the auditorium can hold 26\u00d7 100 = 2600 chairs.\n\n\fCounting Bit Strings\nExample: How many bit strings of length 5 are there?\nSolution:\nl Task 1: Choose first bit\nl Task 2: Choose second bit\nl Task 3: Choose third bit\nl Task 4: Choose fourth bit\nl Task 5: Choose fifth bit\n\n(2)\n(2)\n(2)\n(2)\n(2)\n\nl So, there are 2\u00d7 2\u00d7 2\u00d7 2\u00d7 2 = 25 = 32 bit strings of length 5\n\n\fCounting 1-to-1 Functions\nExample: How many 1-to-1 functions are there\nmapping a set A containing m elements to another set\nB containing n elements (assuming that m \u2264 n)?\n\nSolution:\nl Task 1: Map first element of A to B\nl Task 2: Map second element of A to B\nl Task 3: Map third element of A to B\nl \u2026\nl Task m: Map last element of A to B\n\n(n)\n(n-1)\n(n-2)\n(n-m+1)\n\nl So, there are a total of n \u00d7(n-1) \u00d7\u2026 \u00d7(n-m+1) 1-to-1\nfunctions from A to B\n\n\fLicense Plates\nExample: Suppose that in some state, license plates\nconsist of three letters followed by three decimal\ndigits. How many valid license plates are there?\n\nA B C 1 2 3\n26 choices for each\n\n10 choices for each\n\nSolution: There are 263\u00d7103 = 17,576,000 possible\nvalid license plates\n\n\fIn-class exercises\nTop Hat\n\n\fThe sum rule applies when a single task can be\ncompleted using several different approaches\nThe Sum Rule: Suppose that a single task can be\ncompleted in either one of n1 ways, one of n2 ways, \u2026,\nor one of nk ways. Then the task can be completed in n1\n+ n2 + \u2026 + nk different ways.\nNote: We can break the set of all possible solutions to\nthe problem into disjoint subsets. E.g., if we have k\n\u201cclasses\u201d of solutions, then S = S1 \u222a S2 \u222a \u2026 \u222a Sk\nl |S| = |S1 \u222a S2 \u222a \u2026 \u222a Sk|\nl\n= |S1| + |S2| + \u2026 + |Sk|\nl\n= n1 + n2 + \u2026 + nk\n\nSince S1, \u2026, SK are disjoint\n\n\fUniversity Committees\nExample: Suppose that either a CS professor or a CS\ngraduate student can be nominated to serve on the CS\nDay Committee. If there are 21 CS professors and 101\nCS graduate students, how many ways can this seat on\nthe committee be chosen?\n\nSolution:\nl Let\n\u27a3 P be the set of professors\n\u27a3 G be the set of graduate students\n\u27a3 S be the solution set, with S = P \u222a G\n\nl Then there are |S| = |P \u222a G| = |P| + |G| = 21 + 101 = 122\nways to fill the empty seat on the committee.\n\n\fTravel Choices\nExample: Jane wants to travel from Pittsburgh to New\nYork City. If she flies, she can leave at any one of 12\ndeparture times. If she takes the bus, she can leave at\nany one of 6 departure times. If she takes the train, she\ncan leave at any one of 4 departure times. How many\ndifferent departure times can Jane choose from?\n\nSolution:\nl S = F \u222a B \u222a T, so\nl |S| = |F \u222a B \u222a T|\nl\nl\nl\n\n= |F| + |B| + |T|\n= 12 + 6 + 4\n= 22 departure times\n\n\fThe product and sum rules are kind of boring\u2026\nMost interesting counting problems cannot\nbe solved using the product rule or the\nsum rule alone\u2026\n\n\u2026 but many interesting problems can be\nsolved by combining these two approaches!\n\nLet\u2019s revisit our password example\u2026\n\n\fPasswords revisited\u2026\nTo access most computer systems, you need to login\nwith a user name and a password.\nUse the product rule to count\npasswords of each possible\nlength!\n\nChoices: Sum rule!\n\nSuppose that for a certain system\nl Passwords must contain either 6, 7, or 8 characters\nl Each character must be an uppercase letter or a digit\nl Every password must contain at least one digit\n\nHow many valid passwords are there?\n\n\fFirst, we\u2019ll apply the sum rule\nLet:\nl P6 = Set of passwords of length 6\nl P7 = Set of passwords of length 7\nl P8 = Set of passwords of length 8\nl S = P6 \u222a P7 \u222a P8\n\nNote: |S| = |P6| + |P7| + |P8|\nSince each element of P6, P7, and P8 is made up of\nindependent choices of letters and numbers, we can\napply the product rule to determine |P6|, |P7|, and\n|P8|\n\n\fRecall: a password must contain at least one number!\n\nObservation: To figure out the number of 6-character\npasswords containing at least one number, it is easier\nfor us to count all 6-character passwords and then\nsubtract away those passwords not containing a\nnumber.\nNote: there are\nl (26 + 10)6 = 366 6-character passwords\nl 266 6-character passwords not containing a digit\n\nSo, |P6| = 366 \u2013 266 = 1,867,866,560\n\n\fWrapping it all up\u2026\nWe can compute\nl |P6| = 366 \u2013 266 = 1,867,866,560\nl |P7| = 367 \u2013 267 = 70,332,353,920\nl |P8| = 368 \u2013 268 = 2,612,282,842,880\n\nBy leveraging our earlier observation that |S| = |P6| + |P7|\n+ |P8|, we can conclude that there are\n2,684,483,063,360 valid passwords for our target\nsystem.\n\n\fIP Addresses\nAn IP address (in IPv4) is a 32-bit string that is used to\nidentify a computer that is connected to the Internet.\n\nThere are three categories of IP addresses that can be\nassigned to computers:\n1. Class A addresses consist of the prefix \u201c0\u201d followed by a 7bit network ID and a 24-bit host ID\n2. Class B addresses consist of the prefix \u201c10\u201d followed by a\n14-bit network ID and a 16-bit host ID\n3. Class C addresses consist of the prefix \u201c110\u201d followed by a\n21-bit network ID and an 8-bit host ID\n\n\fSo how many valid IP addresses are there?\nNote: IP addresses are subject to restrictions:\nl 1111111 cannot be used as the network ID of a Class A IP\nl Host IDs consisting of only 1s or only 0s cannot be used\n\nTo count IP addresses, we will use the sum rule and\nthe product rule. So S = SA \u222a SB \u222a SC, so |S| = |SA|\n+ |SB| + |SC|\nCompute SA:\nl 27 \u2013 1 network IDs since 1111111 can\u2019t be used\nl 224 \u2013 2 host IDs for each network ID\nl Total of 2,130,706,178 Class A IP addresses\n\n\fSo how many valid IP addresses are there? (cont.)\nCompute SB:\nl 214 network IDs\nl 216 \u2013 2 host IDs for each network ID\nl Total of 1,073,709,056 Class B IP addresses\n\nCompute SC:\nl 221 network IDs\nl 28 \u2013 2 host IDs for each network ID\nl Total of 532,676,608 Class C IP addresses\n\nSince |S| = |SA| + |SB| + |SC|, there are\n3,737,091,842 IP addresses that can be assigned to\ncomputers connected to the Internet!\n\n\fIn-class exercises\nTop Hat\n\n\fFinal Thoughts\nn Combinatorics is just a fancy word for counting!\nn There are many uses of combinatorics throughout\ncomputer science\nn We can solve a variety of interesting problems using\nsimple rules like the product rule and the sum rule\nn Next time:\nl Inclusion/Exclusion principle (Section 6.1)\nl The pigeonhole principle (Section 6.2)\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}