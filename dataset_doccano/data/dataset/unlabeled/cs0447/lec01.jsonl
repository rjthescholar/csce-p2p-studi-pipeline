{"id": 161, "segment": "unlabeled", "course": "cs0447", "lec": "lec01", "text": "#0\n\nWelcome!\n\nCS 0447\nIntroduction to\nComputer Programming\n\nLu\u00eds Oliveira\nOriginal slides by: Jarrett Billingsley\nModified with bits from: Bruce Childers, David\nWilkinson\n\nFall 2020\n\n\fWhat do I need to know now!\nThe classes will be recorded!\n\u25cf You will be able to access the videos online\no They are for your personal use only!\no Do not distribute them!\n\n\u25cf You don\u2019t need to turn on your camera\no If you do, you may be recorded\n\u25cf You can ask questions via text!\no Chat is great for that. If I don\u2019t stop and read your questions, ask them\nagain\no But feel free to interrupt me at any point.\n\n2\n\n\fWelcome!\n\u25cf My name is Luis (pronounced Loo-eesh, but I don\u2019t really care \u263a )\n\u25cf I\u2019m not from these parts as you can tell from my accent\no I come from Portugal\ni before e except after c\u2026\nand this guy\u2019s name!\n\n\u25cf course site: cs.pitt.edu/~loliveira or\nluisfnqoliveira.github.io/CS447\no all the stuff I talk about today is on the course site\n\u25cf email: loliveira@pitt.edu\n\u25cf office: 5421 SENSQ (haha \u2013 more like Zoom) (check site)\n\u25cf office Hours: TBD (check the site)\n3\n\n\fTextbook\n\n\u2022 Computer Organization & Design (Patterson\n& Hennessy)\n\n\u2022 Not mandatory!\n\no Get it if you really want\no No readings, no exercises\no May reference it once in a while\n\n\u2022 gets into a lot of detail\n\no fun read if you pick this stuff up easily\n\n4\n\n\fGrading\n\u25cf There will be no attendance\no But you should come to classes!\no Sometimes the slides alone may not be clear enough\n\u25aa Even from seasoned professors! (I know, I\u2019ve been there!)\n\u25cf labs: 20%\no there'll be around 12? (~one a week)\no lowest 2 lab grades are dropped\n\u25cf 3 projects: 40%\no two in MIPS assembly language, one in Logisim\no 15% two highest grades, 10% lowest grade\n\u25cf 2 exams: 40%\no 1 midterms, 1 (semi-cumulative) final\no Lowest grade 15%; highest is 25%\n5\n\n\fExpectations\n\u25cf Religious absences are excused: contact me ASAP\n\n\u25cf Students with disabilities should contact the Office of Disability Resources\nand Services (DRS) if you haven\u2019t already\no 216 William Pitt Union; 412-648-7890; TTY:412-383-7355\n\u25cf Please, no comments about sex, gender, race, ethnicity, religion, etc..\no Anywhere!\no Just be nice!\n\u25cf Cheating: Don\u2019t!\no 0 on assignment first time,\no fail the course second time.\no Do not publish your work in public palaces (no github!)\no you can also talk about labs, but still no sharing stuff\n6\n\n\fDO NOT CHEAT!\n\u25cf If you're confused, don't cheat, ask me for help?\no Hot tips for not cheating:\n1. Don\u2019t!\n2. Do not!\no You have LOTS of resources\n\u25aa Me! and the TAs\n\u25aa Undergraduate Helpdesk (CRC)\n\u25cf People can tell when you cheat\no It is usually quite obvious!\no So don\u2019t do it, it\u2019s not worth it!\no The university is quite strict about it.\n7\n\n\fTeaching\n\u25cf No questions are dumb!\n\u25cf Are you confused?\no Surprise, surprise, surprise! IT\u2019S EXPECTED!\no You are learning a bunch of new stuff!\no So ASK QUESTIONS!\no DON\u2019T STRUGGLE IN SILENCE ON YOUR PROJECTS/LABS!!!!!!!\n\u25cf Regret #1 of my students:\no I should have started earlier ;)\n\u25cf Come to lectures synchronously if you can!\no You have access to me, we can interact\no You can ask questions, and get the answers promptly!\no Please\u2026 be interactive \u263a\n8\n\n\fNo recitations this first week.\n\u25cf My suggestion!\no You take this link, and meet your fellow recitation mates!\nTopic: Recitation get together\nTime: Aug 20, 2020 03:25 PM Eastern Time (US and Canada)\nhttps://pitt.zoom.us/j/95693091291\nMeeting ID: 956 9309 1291\nPasscode: 447meet\no Or this link, and meet your fellow recitation mates!\nTopic: Recitation get together\nTime: Aug 21, 2020 12:00 PM Eastern Time (US and Canada)\nhttps://pitt.zoom.us/j/98887922292\nMeeting ID: 988 8792 2292\nPasscode: 447meet\no I won\u2019t be there, so you can speak freely \u263a\n9\n\n\fFLEXing @ Pitt\n\n10\n\n\fIDK you tell me\n\u25cf Let\u2019s discuss some things:\no What were your experiences last semester with remote teaching?\n\u25aa Good/bad/ugly\no If the university authorizes, do you want to attend classes physically?\n\u25aa Why? (I really want to know your reasons!)\n\u25aa Note the question is not do you prefer\n(cause, ya know, we all preferred no CoViD pandemic)\n\u25aa My opinion: There is no benefit in coming that overweighs your health.\no Who has timezone restrictions?\n\u25aa How should I distribute my office hours?\no Anything else?\n\n11\n\n\fWhat I know!\no Lectures will be synchronous! And online! ALWAYS!\n\u25aa But video will be available!\n\u25aa If you can, attend synchronously!\no You can attend lectures asynchronously\n\u25aa Have a job? some scheduling problem? Idk?\no Recitations are ALL remote!\no IF we go back to the classroom\n\u25aa First lecture, I\u2019ll be in the classroom, you will be at home. Why?\n\u2013 If technical issues come, I\u2019ll just relocate to teach remotely\n\u2013 You can experience how it feels (teacher in classroom, students remote)\n\no EVERYONE WILL FOLLOW THE RULES (distance, mask, etc.!)\n\u25aa https://www.coronavirus.pitt.edu/\n\u25aa NO EXCEPTION (class will be dismissed)\n\n12\n\n\fIntroduction and Context\n\n13\n\n\fGoals of this course\n\u25cf Why should I take it?\no Looking under the hood (car analogy)\u2026\no How do you understand complex modern architectures?\n\u25aa Learning the basics (here)\n\n\u25cf Topics covered\no Data representation\no Assembly language\no Program execution\n\u25cf Learning important fundamental skills:\no Representing numbers in different bases (binary, hexadecimal, \u2026)\no Logical operations: The binary revolution\no Logic design: Making circuits without knowing EE :sad:\no Programming an assembly language \u2013 FUN! (your mileage may vary)\n14\n\n\fWhere does this material fit in with CS and EE?\nComputational Theory\nAlgorithm Design\nApplications\nOperating Systems\nLogic Design\nElectrical Design\n\nPhysics\n\nmore concrete\n\nISA\n\nmore abstract\n\n\u25cf The \u201chardware-software interface\u201d\no where CS and EE overlap\n\u25cf Each layer affects/is affected by\nlayers above and below\n\u25cf ISA: Instruction Set Architecture\no Programmer's interface to\nthe computer hardware\n\u25cf logic design\no how we make 0\u2019s and 1\u2019s do stuff\no How do we build a CPU\n\n15\n\n\fMore goals\n\u25cf Let\u2019s learn Assembly!\n\u25cf Let\u2019s unlearn High-level languages (Java, C)\no Datatypes/structures? Nope!\no Infinite number of variables? Nope!\n\u25cf \u201cLearning assembly is like a car mechanic learning how an engine runs\u201d\no Normal people don\u2019t want to, but it\u2019s fun to take things apart!!!\n\u25aa Also putting them back together and (hopefully) see them work!\no And we are not normal people!\n\n16\n\n\fFAQ\n\u25cf Maybe the answer for my question is in the next slide. Should I ask?\no Yes! I\u2019ll let you know if that\u2019s the case\n\u25cf I\u2019m sure I should know this. I shouldn\u2019t ask!\no NO! Probably you should not know that yet! So just ASK!\no NO! Maybe you should know, BUT you don\u2019t\u2026 So ASK!\n\u25cf I\u2019m embarrassed I don\u2019t want to ask\no That\u2019s fine! But don\u2019t be! Others will have the same question! I assure you!\no But if you want, write the question down, send it to me privately!\no BUT ASK!!!! (later)\n\u25cf Should I ask?\no YES! Interrupt me at any time!!!\no Like now? INTERRUPT ME!!!\n\n17\n\n\fComputers\n\n18\n\n\fThey are old!\n\nThe Antikythera\nMechanism\n\u2022 Thousands of years old\n\u25aa Late second/early first century BC\n\u25aa That\u2019s like -100 ish\n\n\u2022 Used for astronomy\n\u25aa Eclipses\n\u25aa Astronomical positions\n\n19\n\n\fThey are not (ALL) war machines\n\nJacquard machine\n\u2022 Mechanical loom (1804)\n\u25aa Programmed using perforated cards\n\u25aa Used to produce complex patterns\n\nWoven in silk\nusing 24k punch\ncards!\n\n20\n\n\fThe pre-history of computers\n\nThe Differential\nEngine\n\u2022 Designed by Charles Babbage\n\u25aa 1792-1871\n\n\u2022 Ermmm\u2026 Designed\u2026 right!\n\u25aa It was intended as a programmable\ncalculator\n\u25aa A multipurpose calculator!\n\n21\n\n\fThe pre-history of computers\n\u25cf The Differential Engine\no Devised by J.H. M\u00fcller in the Hessian army (1784)\no Designed by Charles Babbage (1819-ish)\no Built at Science Museum library in London (1980s)\no Outputs to a table that can be used for printing\n\u25aa Copying was a source of error\n\u25aa It still is nowadays\n\u25aa So never copy results manually if you can avoid it\n\n22\n\n\fThe pre-history of computers\n\nThe Analytical\nEngine\n\u2022 Designed by Charles Babbage\n\u25aa YES! Designed\u2026 again!\n\n\u2022 Mechanical general-purpose\ncomputer\n\u25aa Which had many modern\ncharacteristics\n\nNo actual picture because\u2026 it was never built\n23\n\n\f\u201cThe Enchantress of Numbers\u201d - the first programmer\n\u25cf Augusta Ada King, Countess of Lovelace\no Wrote algorithms for this computer \u2192\n\u25aa Yeah, that one!\n\u25aa But they probably would have worked\no Translating a paper, she added notes\no A LOT of notes\n\u25aa More than the actual paper\no Including instructions on how to calculate\na number series\n\u25aa Note G\no Studied the relation between maths and music\n\n24\n\n\fPart of note G\n\nThe Analytical Engine has no pretensions\n(\u2026) to originate anything. It can do\nwhatever we know how to order it to\nperform.\nIt can follow analysis; but it has no\npower of anticipating any analytical\nrelations or truths.\n25\n\n\fThe pre-history of computers\n(replica)\n\nHollerith Electric\nTabulating System\n\u2022 Census happen every 10 years\n\u25aa Hey, they just did!\n\n\u2022 It took people 8 years to count\nresponses (in 1880)\n\u25aa It would soon take more than 10!\n\u25aa 7,000 cards a day using this system\n\n\u2022 Company would become IBM\n\u25aa After a merge with others\n\nhttps://www.computerhistory.org/revoluti\non/punched-cards/2/2/5\n\n26\n\n\fBubbles\n\n\u2022 Check what Bubbles has to say about it \u263a\n\u25aa https://www.youtube.com/watch?v=L7jAOcc9kBU\n27\n\n\fDriven by the need for complex calculations\nhttps://computerhistory.org/blog/first-steps-lectures-from-the-dawn-of\u25cf George Stibitz (Bell Labs)\ncomputing/\no Day-job: Electrical engineer\no Model K \u2013 binary addition with relays (Boolean algebra)\no Complex Number Computer \u2013 used remotely via telegraph lines!!\no Art with Amiga (1990s) - http://stibitz.denison.edu/art.html\n\u25cf Konrad Zuse (Germany)\no Day-job: Aircraft designer (civil engineer)\no World's first programmable computer\no Several computers used for military calculations\n\u25cf John Atanasoff (Iowa State)\no Day-job: Physics professor\no Built the ABC (Atanasoff-Berry Computer)\n\u25aa solved 30 equations in 30 unknowns\n\n28\n\n\fThe first \u201cmodern\u201d computers\n\nENIAC (Electronic Numerical Integrator and Computer)\n\u2022 1946 \u2013 ENIAC\n\u25aa University of Pennsylvania\n\u25aa Developed during WWII to calculate\nbalistic missile trajectories\n\u25aa Designed by :\n\u2022 John Mauchly\n\u2022 J. Presper Eckert\n\n\u25aa Joined by a huge team!\n\u25aa Modular and reconfigurable\n\u2022 Flipping switches and connecting cables\nU. S. Army Photo\n\n29\n\n\fENIAC (Electronic Numerical Integrator and Computer)\n\u25cf Some numbers:\no 18000 valves (tubes)\no 1500 relays\no 30 tons\no 175 kW\no 5000 additions / s\no 357 multiplications / s\no 40 divisions / s\no Programs \"hardwired\"\n\nU. S. Army Photo\n30\n\n\fThe first \u201cmodern\u201d computers\n\nEDVAC (Electronic Discrete Variable Automatic Computer)\n\u2022 1947 \u2013 EDVAC\n\u25aa University of Pennsylvania\n\u25aa The ENIAC team joined by John Von Neumann\n\u25aa A computer with a new concept:\n\u2022 \"Memory Stored Program\" \u2013 same as data\n\n\u25aa Became operational in 1951\n\nU. S. Army Photo\n\n31\n\n\fThe first \u201cmodern\u201d computers\n\nEDSAC (Electronic Delay Storage Automatic Calculator)\n\u2022 1949 \u2013 EDSAC\n\u25aa Cambridge University\n\u25aa Designed by Maurice Wilkes\n\u25aa Based on the first EDVAC draft\n\u2022 Not to be better, but to be used!\n\u2022 accessible and practical vs. push technology\n\n\u2022 Was completed before the EDVAC!\n\n\u25aa Used for scientific research\n\u2022 Chemistry, Medicine, Physics\nhttps://en.wikipedia.org/wiki/EDSAC\n\nhttps://www.tnmoc.org/edsac\n\n32\n\n\fThe first \u201cmodern\u201d computers\n\nUNIVAC (Universal Automatic Computer)\n\u2022 1951 \u2013 UNIVAC\n\u25aa First commercial computer!\n\u2022 Sold 46! Units\n\u2022 Used to predict the 1952 presidential election\n\n\u25aa Used MERCURY!! memory (as did the EDSAC)\nDelay\nStorage\n\nhttps://en.wikipedia.org/wiki/Delay_line_memory\n\n33\n\n\fThen came the transistor\n\n\u2022 The symbol for a transistor\n\u25aa Photo taken in the university\nwhere I did my master degree\n\n\u2022 They were tiny\n\u25aa Didn\u2019t get HOT!\n\u25aa Didn\u2019t break as often\n\nhttps://en.wikipedia.org/wiki/Transistor\n\n34\n\n\fThen came the Integrated circuit\n\n2300 of these\nin there\n\n\u2022 Things became tiny\n\u25aa More transistors could be fitted\n\u25aa Cheaper circuits\n\u25aa More affordable\n\n35\n\n\fExtremely brief story of Intel CPUs\n\u25cf 1971 \u2013 Intel 4004\no 4-bit microprocessor\no with 2300! Transistors\n\n\u25cf 2004 \u2013 Pentium 4\no x86 32-bit\no 125 Million transistors\n\u25cf 2017 \u2013 Kaby Lake\no x86_64 64-bit\no >1000 Million! (undisclosed?)\n36\n\n\fMoore\u2019s Law\n\n82944 processors\nfrom a supercomputer\nWhere used to simulate\n1s of human brain activity\nIn 40m\n\nIllustration:\nhttps://www.wired.com/2013/05\n/neurologist-markam-humanbrain/\n\n37\n\n\fAll different but all (mostly) the\nsame\n\n38\n\n\fClasses of computers: Embedded (Microcontrollers)\n\u25cf 8/16-bit architectures are still common\no What does this mean?\n\u25cf As little as 32 BYTES of memory!\no almost always run one, built-in program\n\u25cf Focus on ultra-low power, cost, and size\no becoming more common every day\no \u201cInternet of Things\u201d (IoT)\no now your fridge can crash,\nyour TV can crash,\nyour dishwasher can crash,\neverything can crash!\n\n39\n\n\fSome are small and cheap\n\n\u2022 They run a single program\n\u25aa E.g your refrigerator\n\n\u2022 Are used by hobbyists\n\u25aa For small projects\n\n40\n\n\fClasses of computers: Consumer-grade (PC/Mobile)\n\u25cf 1-8 cores, 32/64-bit architectures, MB-GB of\nmemory, GB-TB of persistent storage\n\u25cf multitasking operating systems\n\u25cf similar capabilities, different design goals\n\u25cf focus is real-time user interaction:\nproductivity, media, browsing, games\n\u25cf Energy consumption is still relevant\no Mobile\n\n41\n\n\fSome are small, cheap, and powerful\n\n\u2022 The Raspberry Pi\n\u25aa Affordable, yet powerful\n\u25aa ~$35\n\u25aa Can be used for A LOT of projects\n\u2022 Home automation\n\u2022 Affordable PC\n\u2022 Great to learn how to program\non a budget\n\n42\n\n\fSome are small, expensive, and powerful\n\n\u2022 My Moto G3 \uf04c\n\u25aa I sacrificed it for you!\n\u2022 (battery was bloated, it had to go)\n\n\u25aa Had to rip some parts :D\n\u25aa Mobility is important (~1 day)\n\u25aa Portability is important\n\u25aa But it runs beefy apps!\n\n43\n\n\fWe hold them in our laps (does anyone do that often?)\n\n\u2022 Power and mobility\n\u25aa Battery life is important\n\u2022 We want to fly with them \uf04c\n\n\u25aa Weight is important\n\u25aa Run demanding programs!\n\n44\n\n\fWe have them at home\n\nMy computer\n\n\u2022 Desktop computers\n\u25aa Wide range of prices ($300 to +$5k)\n\u25aa Energy consumption not important\n\u2022 Beyond cost and heat generation\n\n\u25aa Performance\n\u2022 Games\n\u2022 Browsers!!\n\u2022 Word?\n\nThat\u2019s a\nRaspberry Pi\n\n45\n\n\fClasses of computers: Servers and Mainframes\n\u25cf from high end desktops to much more powerful machines or groups of\nmachines\n\u25cf dozens of cores, 32GB+ of RAM, massive storage systems, very high-speed\nnetworking\n\u25cf focus on real-time data delivery - either from storage or after processing\n\u25cf redundancy and hot-swappability\n\u25cf goal is 100% uptime\n\u25cf power and cooling become huge concerns\n\n46\n\n\fWe have them in warehouses\n\n\u2022 Server on a \u201cdrawer\u201d (rack)\n\u25aa Don\u2019t have monitors\n\u2022 People don\u2019t \u201cuse them\u201d directly\n\u2022 Non-interactive\n\n\u25aa Crunch numbers and return results\n\u2022 Webpages\n\u2022 Remote storage (e.g., box)\n\n47\n\n\fClasses of computers: Supercomputers\n\u25cf cluster of hundreds to thousands of CPUs\n\u25cf focus on crunching ENORMOUS datasets non-interactively\n\u25cf science, research, design, and simulation\no and now, stock trading and \"cryptocurrencies\"\u2026\n\n48\n\n\fAll looking pretty much the same\n\nThe Internet\n49\n\n\fGeneral computer organization\n\nPersistent\nStorage\n\nRegisters\n\nControl\n\nMemory\nDatapath\n\nProcessor\n\nOther\nPeripherals\n\nOther\nComputers\n\nInput/Output\nDevices\n\nNetwork\n50\n\n\fAssembly\n\n51\n\n\fDifferent language levels\n\nx=x+1\nHigh-level language\nWritten by humans \u2192 Abstracted\nlw\n$t0, x\naddi $t0, $t0, 1\nsw\n$t0, x\n\nEasier to\nread\n\nCloser to the\nhardware\n\nAssembly language\nWritten by humans\u2192 No abstraction\n\n10011101100110011001111101111001\n11011110110010111011101001111001\n10011100100110110001101111111011\n\nRandom numbers \u263a\n\nMachine language\nSpoken by the CPU\u2192 Binary\n\n52\n\n\fSo what exactly is assembly?\n\n\u2022 Assembly: Human-readable representation of machine code\n\u2022 Machine code: Machine code is what a CPU actually runs\n\u2022 Essentially it's the \"atoms\" that make up a program\n\no CPUs are actually pretty simple in concept\n\u25aa (oh wait, we still have a whole semester about it\u2026 huh)\n\u2022 Each CPU has its own machine language and therefore its own assembly\nlanguage\n\u2022 We\u2019ll be using MIPS:\no Not that common (why then?)\no Yet, often found in surprising places. (Nintendo 64, PS1/2, FPGAs)\no Very influential, and most common assembly looks like it.\n\u25aa ARM and RISC-V are similar-ish ISA\nseeing much more usage\n53\n\n\fDifferent language levels\nx=x+1\nHigh-level language\n\u2192 Same for different CPUs\nlea x, %eax\nmov 0(%eax), %ecx\ninc\n%ecx\nmov %ecx, 0(%eax)\n\nlw\n$t0, x\naddi $t0, $t0, 1\nsw\n$t0, x\n\nAssembly language\n\u2192 Different for different CPUs\n\n010011110111100100011\n011001011100111101100\nRandom numbers \u263a\n101110011010110100111\n101111001000110110010\n1110\n\n1001110110011001100\n1111101111001110111\n1011001011101110100\nRandom numbers \u263a\n1111001100111001001\n1011000110111111101\n1\n\nMachine language\n\u2192 Different for different CPUs\n\n54\n\n\fis assembly language useful today?\n\n\u2022 Short answer: YES\n\u2022 Assembly is \u201cfast\u201d, so we should use it for everything!\n\n--- NO!!! --\u2022 No type-checking, no control structures, very few abstractions\no Probably you can be fairly fast using compiler optimizations\n--- Fairly impractical for large things --\u2022 Tied to a particular CPU.\no So, large programs have to be rewritten (usually) to work on new things.\n\u2022 Yet: good for specialized stuff.\no Critical paths and \u201cboot\u201d code in Kernels / Operating Systems\no HPC (simulators, supercomputer stuff)\no Real-time programs (video games; tho increasingly less / abstracted away)\no And\u2026\n55\n\n\fEmbedded systems\n\u25cf You\u2019d be amazed at how many consumer devices have CPUs.\n\u25cf Many are programmed largely/entirely in assembly (or C)\n\n56\n\n\fand next time we'll start\n\u2022 Data representations\n\u2022 How does a CPU look at numbers, letters, etc.\n\u2022 Learn about number bases:\no Decimal (that\u2019s what we use!)\no Binary\no Octal\no Hexadecimal\n\n57\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}