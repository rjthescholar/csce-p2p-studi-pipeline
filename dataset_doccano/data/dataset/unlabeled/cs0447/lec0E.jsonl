{"id": 149, "segment": "unlabeled", "course": "cs0447", "lec": "lec0E", "text": "#E\n\nMinimization and\nK-maps\nOriginal slides by: Jarrett Billingsley\nModified with bits from: Bruce\nChilders, David Wilkinson\n\nCS 0447\nIntroduction to\nComputer Programming\n\nLu\u00eds Oliveira\n\nFall 2020\n\n\fClass announcements\n\u25cf Check the schedule\no I\u2019ll post examples of circuits and suggestions of exercises\n\u25cf Labs will be submitted via Gradescope\n\n2\n\n\fHow ICs are made in 3 slides\n(another For Fun\u2122 section)\n\n3\n\n\fHow ICs (integrated circuits) are made\n\u25cf silicon is purified and grown into a\nmonolithic crystal (extremely expensive)\n\u25cf this is sliced thinly to make wafers\n\no gooey caramel is put between them to make stroopwafel\n\n\u25cf a series of complicated photochemical\nprocesses do things like:\no change its electrical properties\no make wires to connect things\no make inert insulating layers\n\n4\n\n\fHow ICs (integrated circuits) are made\n\u25cf many ICs are printed on one wafer\n\u25cf the wafers are diced (chopped up)\n\u25cf the ICs are tested\n\u25cf the ICs are mounted in a package ->\n\u25cf they're tested again\n\u25cf then they're ready to sell\n\n5\n\n\fManufacturing yield\n\u25cf ICs are tiny and complex\n\u25cf silicon crystals can have defects\n\u25cf a tiny speck of dust during production can ruin an entire chip\n\u25cf the yield is the percentage of usable chips\no bigger chips have smaller yields: more opportunities for mistakes!\n\u25cf the size of the silicon is the biggest factor in the price of an IC\no huge ICs (several cm on each side!), such as very high-resolution camera\nsensors, can cost tens of thousands of dollars!\n\u25cf manufacturers can also bin resulting chips\no bug-free ones can be sold as Core i7s for lotsa money\no slightly malformed ones can be sold as Core i5s and i3s\no the ones they sweep off the floor are the Celerons\n\n6\n\n\fLogic Minimization\n\n7\n\n\fSilicon is expensive, rocks are slow\n\u25cf Logic minimization means using the smallest number of gates/transistors\npossible to implement a boolean function\no a boolean function is anything we've talked about\no it has boolean inputs, and boolean outputs\n\u25aa Less inputs can also improve speed\n\u25cf Fewer transistors means:\no smaller area:\n\u25aa cheaper chips!\n\u25aa more stuff on one chip!\n\u25aa smaller chance of manufacturing defects!\no less gate delay:\n\u25aa faster circuits!\n\n8\n\n\fMinimizing Booleans\n\u25cf How do we minimize Boolean functions?\no Logical adjacency!\n\u25cf If in two Boolean terms being ORed only one of the variables changes then it\ncan be removed\n\n\u0d25 + \ud835\udc00\ud835\udc01 = \ud835\udc00 \ud835\udc69\n\u0d25 +\ud835\udc69 =\ud835\udc68\no \ud835\udc78 = \ud835\udc00\ud835\udc69\n\u0d25 = \ud835\udc68\ud835\udc69\n\u0d25 = \ud835\udc68\ud835\udc69\n\u0d25 \ud835\udc6a + \ud835\udc68\ud835\udc69\n\u0d25\ud835\udc6a\n\u0d25 \ud835\udc6a+\ud835\udc6a\n\u0d25\no \ud835\udc78 = \ud835\udc68\ud835\udc69\n\u25cf To minimize a Boolean expression\no Find the terms where only one variable changes\no Eliminate that variable\n\n9\n\n\fA first try\n\u25cf The truth table for a two-input 1-bit\nmultiplexer.\n\nA\n\nA\nQ\n\nB\n\nQ\n\nB\nS=0\n\nS=1\n\nS Q\n\nS A B Q\n\n0 A\n\n0 0 0 0\n\n0 A\n\n0 0 1 0\n\n0 A\n\n0 1 0 1\n\n0 A\n\n0 1 1 1\n\n1 B\n\n1 0 0 0\n\n1 B\n\n1 0 1 1\n\n1 B\n\n1 1 0 0\n\n1 B\n\n1 1 1 1\n10\n\n\fA first try\n\u25cf The truth table for a two-input 1-bit multiplexer.\n\nS A B Q\n0 0 0 0\n0 0 1 0\n\n\u0d25 0 1 0 1\n\ud835\udc12\u0d24\ud835\udc00\ud835\udc69\n\ud835\udc12\u0d24\ud835\udc00\ud835\udc01 0 1 1 1\n1 0 0 0\n\n\u0d25\ud835\udc01 1 0 1 1\n\ud835\udc12\ud835\udc68\n1 1 0 0\n\n\ud835\udc12\ud835\udc00\ud835\udc01 1 1 1 1\n\n\u0d25 + \ud835\udc12\u0d24\ud835\udc00\ud835\udc01 + \ud835\udc12\ud835\udc68\n\u0d25 \ud835\udc01 + \ud835\udc12\ud835\udc00\ud835\udc01\n\ud835\udc78 = \ud835\udc12\u0d24\ud835\udc00\ud835\udc69\nAre there any adjacencies?\nWell\u2026 I guess we don\u2019t need\nthose variables\n\n\ud835\udc78 = \ud835\udc12\u0d24\ud835\udc00 + \ud835\udc12\u0d24\ud835\udc00 + \ud835\udc12\ud835\udc01 + \ud835\udc12\ud835\udc01\nThis seems easy\u2026\n\n\ud835\udc78 = \ud835\udc12\u0d24\ud835\udc00 + \ud835\udc12\ud835\udc01\n11\n\n\fIt makes sense, right?\n\u25cf We know that if S=0 then the output is A\n\u25cf We know that if S=1 then the output is B\no We don\u2019t care about one of the variables\n\u25cf So, let\u2019s solve this truth table\n1. find all rows with an output of 1\n2. for each one, write an AND of all the inputs,\nwith NOTs on the 0s\n3. eliminate duplicate terms\n4. OR the remaining terms together\n\n\u0d24 + \ud835\udc12\ud835\udc01\n\ud835\udc10 = \ud835\udc12\ud835\udc00\n\n\u25cf Getting the sum-of-products\no an OR of multiple ANDed terms\n\nS A B Q\n0 0 X 0\n\n0 0 X 0\n\n\ud835\udc12\u0d24\ud835\udc00 0 1 X 1\n\ud835\udc12\u0d24\ud835\udc00 0 1 X 1\n1 X 0 0\n\n\ud835\udc12\ud835\udc01 1 X 1 1\n1 X 0 0\n\n\ud835\udc12\ud835\udc01 1 X 1 1\n12\n\n\fTurning that expression into gates\n\u25cf making \ud835\udc10 = \ud835\udc12\u0d24\ud835\udc00 + \ud835\udc12\ud835\udc01 into gates is pretty straightforward:\n\nS\n\nA\nQ\nB\n\n13\n\n\fMinimization using Boolean\nAlgebra\n\n14\n\n\fBoolean algebra\n\u25cf Idempotent\no \ud835\udc4e. \ud835\udc4e = \ud835\udc4e + \ud835\udc4e = \ud835\udc4e\n\u25cf Commutative\no \ud835\udc4e. \ud835\udc4f = \ud835\udc4f. \ud835\udc4e\no \ud835\udc4e+\ud835\udc4f =\ud835\udc4f+\ud835\udc4e\n\u25cf Associative\no \ud835\udc4e. \ud835\udc4f. \ud835\udc50 = \ud835\udc4e. \ud835\udc4f . \ud835\udc50\no \ud835\udc4e+ \ud835\udc4f+\ud835\udc50 = \ud835\udc4e+\ud835\udc4f +\ud835\udc50\n\u25cf Distributive\no \ud835\udc4e. \ud835\udc4f + \ud835\udc50 = \ud835\udc4e. \ud835\udc4f + \ud835\udc4e. \ud835\udc50\no \ud835\udc4e + \ud835\udc4f. \ud835\udc50 = \ud835\udc4e + \ud835\udc4f . (\ud835\udc4e + \ud835\udc50)\n\n\u25cf De Morgan\u2019s laws\no \ud835\udc4e. \ud835\udc4f = \ud835\udc4e\u0d24 + \ud835\udc4f\u0d24\no \ud835\udc4e + \ud835\udc4f = \ud835\udc4e.\n\u0d24 \ud835\udc4f\u0d24\n\u25cf Other\no \ud835\udc4e + \ud835\udc4e. \ud835\udc4f = \ud835\udc4e\no \ud835\udc4e. \ud835\udc4e + \ud835\udc4f = \ud835\udc4e\no \ud835\udc4e\u0d24 = \ud835\udc4e\no \ud835\udc4e + \ud835\udc4e\u0d24 = 1\no \ud835\udc4e. \ud835\udc4e\u0d24 = 0\n\n15\n\n\fWhat if the function is more complex?\n\u25cf if we use that method on the Cout of a full adder:\n\nA\n0\n0\n0\n0\n1\n1\n1\n1\n\nB\n0\n0\n1\n1\n0\n0\n1\n1\n\n\u0d25 \ud835\udc01\ud835\udc02\ud835\udc22\ud835\udc27 + \ud835\udc00\ud835\udc69\n\u0d25 \ud835\udc02\ud835\udc22\ud835\udc27 + \ud835\udc00\ud835\udc01\ud835\udc02\ud835\udc22\ud835\udc27 + \ud835\udc00\ud835\udc01\ud835\udc02\ud835\udc22\ud835\udc27\nCin Cout \ud835\udc02\ud835\udc28\ud835\udc2e\ud835\udc2d = \ud835\udc00\n0\n0\n\u25cf It feels too complex, somehow\n1\n0\n\u25cf each NOT gate uses 2 transistors\n0\n0\n\u25cf each AND/OR gate uses 6\n\u0d25 \ud835\udc01\ud835\udc02\ud835\udc22\ud835\udc27 \u25cf this will use 72 transistors\n1\n1 \ud835\udc00\no just for the carry\n0\n0\n\u0d25 \ud835\udc02\ud835\udc22\ud835\udc27 o of one one-bit addition\n1\n1 \ud835\udc00\ud835\udc69\n0\n1 \ud835\udc00\ud835\udc01\ud835\udc02\ud835\udc22\ud835\udc27\n1\n1 \ud835\udc00\ud835\udc01\ud835\udc02\ud835\udc22\ud835\udc27\n16\n\n\fMinimizing equations \u2013WHYYYYY!!\n\ud835\udc68\ud835\udc69\ud835\udc6a + \ud835\udc68\ud835\udc69\ud835\udc6a + \ud835\udc68\ud835\udc69\ud835\udc6a + \ud835\udc68\ud835\udc69\ud835\udc6a\nUsing distributivity \ud835\udc34\ud835\udc35 + \ud835\udc34\ud835\udc36 = \ud835\udc34(\ud835\udc35 + \ud835\udc36) :\n\ud835\udc34\ud835\udc35 \ud835\udc36 + \ud835\udc36 + \ud835\udc34\ud835\udc35\ud835\udc36 + \ud835\udc34\ud835\udc35\ud835\udc36\n\n72 transistors\n\nAdjacency #1 tackled:\n\ud835\udc34\ud835\udc35 + \ud835\udc34\ud835\udc35\ud835\udc36 + \ud835\udc34\ud835\udc35\ud835\udc36\nWhat about now? Two variables change \uf04c\n\n17\n\n\fMinimizing equations \u2013WHYYYYY!!\n\ud835\udc68\ud835\udc69\ud835\udc6a + \ud835\udc68\ud835\udc69\ud835\udc6a + \ud835\udc68\ud835\udc69\ud835\udc6a + \ud835\udc68\ud835\udc69\ud835\udc6a\nAdding (ORing) the same term multiple times is ok:\n\ud835\udc34\ud835\udc35 + \ud835\udc34\ud835\udc35\ud835\udc36 + \ud835\udc34\ud835\udc35\ud835\udc36 + \ud835\udc34\ud835\udc35\ud835\udc36 + \ud835\udc34\ud835\udc35\ud835\udc36\nNote the two adjacencies :D\n\ud835\udc34\ud835\udc35 + \ud835\udc34\ud835\udc36 \ud835\udc35 + \ud835\udc35 + \ud835\udc35\ud835\udc36 \ud835\udc34 + \ud835\udc34\nAdjacency #2 and #3 tackled:\n\ud835\udc68\ud835\udc69 + \ud835\udc6a\ud835\udc68 + \ud835\udc6a\ud835\udc69\n30 transistors\n18\n\n\fIt\u2019s hard!\n\nIf only we had a better tool to help us\n\n19\n\n\fKarnaugh Maps\n\n20\n\n\fGray Code\n\u25cf Gray code is a way of encoding binary where\nonly one bit changes on each step\n\u25cf How can we construct it?\n\u25cf Let\u2019s revisit our binary number table:\no Start by creating the first two 1-bit entries\no Mirror them and complete the next column\no Repeat!\n\u25cf See how only one bit changes from the\nlast to the first number!\n\u25cf We\u2019ll only be using 2-bit code.\n\n000\n001\n011\n010\n110\n111\n101\n100\n\n21\n\n\fKarnaugh Maps (K-maps) \u2013 Setting up\n\u25cf Karnaugh Maps are a tool for minimizing boolean functions\n\u25cf It helps us finding adjacencies\no let's start with a function that has two inputs\nTruth Table\n\nK-map\n\nA\n0\n0\n1\n1\n\n0\n\nB\n0\n1\n0\n1\n\nQ\n1\n0\n1\n1\n\n\u0d25\n\ud835\udc01\n\n\u0d25\n0 \ud835\udc00\n\n1\n\n\ud835\udc01\n\n1 0\n1 \ud835\udc00 1 1\n\n1. Karnaugh maps are\nrepresented as a table\n2. write input values in Gray\ncode along axes.\no (there's only one input on\neach side here, it's easy)\n3. Fill in cells from truth table.\n\n22\n\n\fKarnaugh Maps (K-maps) \u2013 Finding rects\nK-map\n\n\u0d25\n\ud835\udc01\n\n\u0d25\n\ud835\udc00\n\n\ud835\udc01\n\n1 0\n\ud835\udc00 1 1\n\n3. find rectangles of 1s with these rules:\no width and height can only be 1, 2, or 4\n\u25aa NEVER 3\no overlapping is totally fine! it's good!\no use the biggest rectangles possible\no use the fewest rectangles possible\n\n23\n\n\fKarnaugh Maps (K-maps) \u2013 Interpreting rects\nK-map\n\n\u0d25\n\ud835\udc01\n\n\ud835\udc01\n\n\u0d25\n\ud835\udc00\n\n1 0\n\ud835\udc00 1 1\n\u0d25\nRed: \ud835\udc01\n\nBlue: \ud835\udc00\n\n\u0d25\n\ud835\udc10=\ud835\udc00+\ud835\udc01\n\n4. for each rectangle, look at the values of\nthe variables along the axes. some\nvariables change, and others don't.\no which variable changes in the red\nrectangle? which doesn't?\no what about the blue rectangle?\n5. each rectangle is an AND minterm\no write the variables that stay the same\nfor that rect (keeping the NOT bars)\no ignore the variables that change\n6. OR all the terms together\n7. WHEW!\n24\n\n\fI'd like to place an order for the carry-out bit\n\u25cf With more than 2 variables, put two along one axis (GRAY CODE!)\ntry to make the rectangles as big as\nC A B Co\npossible. overlap is goooood.\n\n0\n0\n0\n0\n1\n1\n1\n1\n\n0\n0\n1\n1\n0\n0\n1\n1\n\n0\n1\n0\n1\n0\n1\n0\n1\n\n0\n0\n0\n1\n0\n1\n1\n1\n\n00\n\n01\n\n11\n\n10\n\n\u0d25\ud835\udc01\n\u0d25 \ud835\udc00\n\u0d25 \ud835\udc01 \ud835\udc00\ud835\udc01 \ud835\udc00\ud835\udc01\n\u0d25 Red: \ud835\udc00\ud835\udc6a\n\ud835\udc00\n0 \ud835\udc02\u0d24\n\n0 0 1 0\n1 \ud835\udc02 0 1 1 1\n\nGreen: \ud835\udc00\ud835\udc01\nBlue: \ud835\udc01\ud835\udc02\n\n\ud835\udc02\ud835\udc28 = \ud835\udc00\ud835\udc6a + \ud835\udc00\ud835\udc01 + \ud835\udc01\ud835\udc6a\n25\n\n\fI'd like to place an order for the carry-out bit\n\u25cf With more than 2 variables, put two along one axis (GRAY CODE!)\ntry to make the rectangles as big as\nC A B Co\npossible. overlap is goooood.\n\n0\n0\n0\n0\n1\n1\n1\n1\n\n0\n0\n1\n1\n0\n0\n1\n1\n\n0\n1\n0\n1\n0\n1\n0\n1\n\n0\n0\n0\n1\n0\n1\n1\n1\n\n00\n\n01\n\n11\n\n10\n\n\u0d25\ud835\udc01\n\u0d25 \ud835\udc00\n\u0d25 \ud835\udc01 \ud835\udc00\ud835\udc01 \ud835\udc00\ud835\udc01\n\u0d25\n\ud835\udc00\n0 \ud835\udc02\u0d24\n\n0 0 1 0\n1 \ud835\udc02 0 1 1 1\nDid you notice this? \ud835\udc34\ud835\udc35\ud835\udc36\nThis is the term we needed to add multiple times :D\n26\n\n\fJust like a 2D RPG world map\u2026\n\u25cf rectangles on K-maps can wrap around (left-right AND top-bottom!)\n\n00\n\n01\n\n11\n\n10\n\n\u0d25\ud835\udc18\n\u0d25 \ud835\udc17\n\u0d25\ud835\udc18 \ud835\udc17\ud835\udc18 \ud835\udc17\ud835\udc18\n\u0d25\n\ud835\udc17\n\u0d24\n0 \ud835\udc19\n\n1 1 0 1\n1 \ud835\udc19 1 0 0 1\n\n\u0d25\nRed: \ud835\udc18\n\u0d25\ud835\udc19\u0d24\nBlue: \ud835\udc17\n\n\u0d25+\ud835\udc17\n\u0d25\ud835\udc19\u0d24\n\ud835\udc10=\ud835\udc18\n\nthis is really a 2x2 rectangle.\nit's just\u2026 doing its best.\n27\n\n\fOkay, maybe it's not perfect.\n\u25cf let's try the Sum output of a full adder\n\n00\n\n01\n\n11\n\n10\n\na 1x1 rectangle\nbecomes a term that\nuses all the variables\n\n\u0d25\ud835\udc69\n\u0d25\ud835\udc6a\n\u0d25\ud835\udc01\n\u0d25 \ud835\udc00\n\u0d25 \ud835\udc01 \ud835\udc00\ud835\udc01 \ud835\udc00\ud835\udc01\n\u0d25 Red: \ud835\udc00\n\ud835\udc00\n\n\u0d25\ud835\udc22\n0 \ud835\udc02\n\n0 1 0 1\n1 \ud835\udc02\ud835\udc22 1 0 1 0\n\n\u0d25\n\u0d25 \ud835\udc01\ud835\udc6a\nGreen: \ud835\udc00\nBlue: \ud835\udc00\ud835\udc01\ud835\udc02\ud835\udc22\n\u0d25\n\u0d25\ud835\udc6a\nPurple: \ud835\udc00\ud835\udc01\n\n\u0d25 + \ud835\udc00\ud835\udc01\ud835\udc6a + \ud835\udc00\ud835\udc01\n\u0d25\n\u0d25\ud835\udc69\n\u0d25\ud835\udc6a + \ud835\udc00\n\u0d25 \ud835\udc01\ud835\udc6a\n\u0d25\ud835\udc6a\n\ud835\udc12\ud835\udc2e\ud835\udc26 = \ud835\udc00\nwait, can\u2019t we do that as:\n\n\ud835\udc12\ud835\udc2e\ud835\udc26 = \ud835\udc00\u2a01\ud835\udc01\u2a01\ud835\udc6a (that's xor!)\n28\n\n\fTradeoffs, tradeoffs\n\u25cf there are extensions to K-maps to detect XORs\n\u25cf but\u2026\no XOR gates are slower than AND/OR gates\no if area is a concern, an XOR make sense\no if speed is a concern, AND/OR gates make sense\n\u25cf what do real hardware designers do?\no they use programs to do this stuff for them lol\no things like GALs, CPLDs, and FPGAs are reconfigurable hardware which\nusually use \"sum-of-products\" to do logic, so ANDs and ORs are all you've\ngot\n\n29\n\n\fSome more examples\n\u25cf Can you solve this?\n\n00\n\n01\n\n11\n\n10\n\n\u25cf In AB: A is both {0,1}\n\u25cf In CD: D is both {0,1}\n\n0\n\u0d25\ud835\udc6b 0\n01 \ud835\udc6a\n11 \ud835\udc6a\ud835\udc6b 0\n\u0d25 0\n10 \ud835\udc6a\ud835\udc6b\n\n0\n0\n1\n1\n\n0\n0\n1\n1\n\n0\n0\n0\n0\n\n\u25cf Eliminate both A,D\n\u25cf We get\n\ud835\udc36\ud835\udc35\n\n\u0d25\ud835\udc01\n\u0d25 \ud835\udc00\n\u0d25 \ud835\udc01 \ud835\udc00\ud835\udc01 \ud835\udc00\ud835\udc01\n\u0d25\n\ud835\udc00\n\u0d25\ud835\udc6b\n\u0d25\n00 \ud835\udc6a\n\n30\n\n\fSome more examples\n\u25cf Can you solve this?\n\n00\n\n01\n\n11\n\n10\n\n\u25cf In AB: Both have {0,1}\n\u25cf In CD: C is both {0,1}\n\n0\n\u0d25\ud835\udc6b 1\n01 \ud835\udc6a\n11 \ud835\udc6a\ud835\udc6b 1\n\u0d25 0\n10 \ud835\udc6a\ud835\udc6b\n\n0\n1\n1\n0\n\n0\n1\n1\n0\n\n0\n1\n1\n0\n\n\u25cf Eliminate both A, B, C\n\u25cf We get\n\n\u0d25\ud835\udc01\n\u0d25 \ud835\udc00\n\u0d25 \ud835\udc01 \ud835\udc00\ud835\udc01 \ud835\udc00\ud835\udc01\n\u0d25\n\ud835\udc00\n\u0d25\ud835\udc6b\n\u0d25\n00 \ud835\udc6a\n\n\ud835\udc37\n\n31\n\n\fSome more examples\n\u25cf Can you solve this?\n\n00\n\n01\n\n11\n\n10\n\n\u25cf In AB: A has both {0,1}\n\u25cf In CD: C is both {0,1}\n\n1\n\u0d25\ud835\udc6b 0\n01 \ud835\udc6a\n11 \ud835\udc6a\ud835\udc6b 0\n\u0d25 1\n10 \ud835\udc6a\ud835\udc6b\n\n0\n0\n0\n0\n\n0\n0\n0\n0\n\n1\n0\n0\n1\n\n\u25cf Eliminate both A, C\n\u25cf We get\n\n\u0d25\ud835\udc01\n\u0d25 \ud835\udc00\n\u0d25 \ud835\udc01 \ud835\udc00\ud835\udc01 \ud835\udc00\ud835\udc01\n\u0d25\n\ud835\udc00\n\u0d25\ud835\udc6b\n\u0d25\n00 \ud835\udc6a\n\n\u0d25\ud835\udc37\n\u0d25\nB\n\nthis is still a 2x2 rectangle!\n32\n\n\f7 segment LED display\n\u25cf This is a 7 segment LED display\no It displays numbers\no It has 8 LEDs (one for the decimal point)\n\u25cf Problem\no Given a 4-bit number, draw the\ncorresponding numeral.\no E.g. 0000 is \u201c0\u201d; 1001 is \u201c9\u201d.\no Ignore the dot\n\u25cf Solution\no Create a Boolean function for each\nsegment.\n\nd2\n\nd1\n\nd3\nd0\n\nd7\n\nd5\nd6\n\nd4\n\n33\n\n\f7 segment LED display\nNumber 0\n01110111\n\nd2\n\nd1\n\nd0\n\nd7\n\nd3\nd0\n\nd7\n\nd5\n\nd6\n\nd4\n\nHex Digit LED\n7 segments, 1 decimal point\nTurn each segment on/off\nState: 0=OFF, 1=ON\n\u201cDraw\u201d numbers 0 to 9\n34\n\n\f7 segment LED display\nNumber 1\n00010100\n\nd2\n\nd1\n\nd0\n\nd7\n\nd3\nd0\n\nd7\n\nd5\n\nd6\n\nd4\n\nHex Digit LED\n7 segments, 1 decimal point\nTurn each segment on/off\nState: 0=OFF, 1=ON\n\u201cDraw\u201d numbers 0 to 9\n35\n\n\f7 segment LED display\nNumber 2\n10110011\n\nd2\n\nd1\n\nd0\n\nd7\n\nd3\nd0\n\nd7\n\nd5\n\nd6\n\nd4\n\nHex Digit LED\n7 segments, 1 decimal point\nTurn each segment on/off\nState: 0=OFF, 1=ON\n\u201cDraw\u201d numbers 0 to 9\n36\n\n\f7 segment LED display\nNumber 3\n10110110\n\nd2\n\nd1\n\nd0\n\nd7\n\nd3\nd0\n\nd7\n\nd5\n\nd6\n\nd4\n\nHex Digit LED\n7 segments, 1 decimal point\nTurn each segment on/off\nState: 0=OFF, 1=ON\n\u201cDraw\u201d numbers 0 to 9\n37\n\n\f7 segment LED display\nNumber 4\n11010100\n\nd2\n\nd1\n\nd0\n\nd7\n\nd3\nd0\n\nd7\n\nd5\n\nd6\n\nd4\n\nHex Digit LED\n7 segments, 1 decimal point\nTurn each segment on/off\nState: 0=OFF, 1=ON\n\u201cDraw\u201d numbers 0 to 9\n38\n\n\f7 segment LED display\nNumber 5\n11100110\n\nd2\n\nd1\n\nd0\n\nd7\n\nd3\nd0\n\nd7\n\nd5\n\nd6\n\nd4\n\nHex Digit LED\n7 segments, 1 decimal point\nTurn each segment on/off\nState: 0=OFF, 1=ON\n\u201cDraw\u201d numbers 0 to 9\n39\n\n\f7 segment LED display\nNumber 6\n11100111\n\nd2\n\nd1\n\nd0\n\nd7\n\nd3\nd0\n\nd7\n\nd5\n\nd6\n\nd4\n\nHex Digit LED\n7 segments, 1 decimal point\nTurn each segment on/off\nState: 0=OFF, 1=ON\n\u201cDraw\u201d numbers 0 to 9\n40\n\n\f7 segment LED display\nNumber 7\n00110100\n\nd2\n\nd1\n\nd0\n\nd7\n\nd3\nd0\n\nd7\n\nd5\n\nd6\n\nd4\n\nHex Digit LED\n7 segments, 1 decimal point\nTurn each segment on/off\nState: 0=OFF, 1=ON\n\u201cDraw\u201d numbers 0 to 9\n41\n\n\f7 segment LED display\nNumber 8\n11110111\n\nd2\n\nd1\n\nd0\n\nd7\n\nd3\nd0\n\nd7\n\nd5\n\nd6\n\nd4\n\nHex Digit LED\n7 segments, 1 decimal point\nTurn each segment on/off\nState: 0=OFF, 1=ON\n\u201cDraw\u201d numbers 0 to 9\n42\n\n\f7 segment LED display\nNumber 9\n11110110\n\nd2\n\nd1\n\nd0\n\nd7\n\nd3\nd0\n\nd7\n\nd5\n\nd6\n\nd4\n\nHex Digit LED\n7 segments, 1 decimal point\nTurn each segment on/off\nState: 0=OFF, 1=ON\n\u201cDraw\u201d numbers 0 to 9\n43\n\n\f7 segment LED display\nHow to approach this?\n\u25cf Create a truth table\no Inputs are i0 to i3 (4 bits)\no Outputs are numbered d0, to d7, corresponding to segments\n\n\u25cf Minimize the circuit using a K-map\no Create the table\no Follow the rules!\n\u25cf Draw the numerals by setting d0 to d7 to 1s or 0s\no Build the circuit!\n\n44\n\n\f7 segment LED display\ni3\n\ni2\n\ni1\n\ni0\n\nd0\n\nd1\n\nd2\n\nd3\n\nd4\n\nd5\n\nd6\n\nd7\n\n0\n\n0\n\n0\n\n0\n\n0\n\n1\n\n1\n\n1\n\n0\n\n1\n\n1\n\n1\n\n0\n\n0\n\n0\n\n1\n\n0\n\n0\n\n0\n\n1\n\n0\n\n1\n\n0\n\n0\n\n0\n\n0\n\n1\n\n0\n\n1\n\n0\n\n1\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n1\n\n1\n\n1\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n0\n\n1\n\n0\n\n0\n\n1\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n0\n\n1\n\n0\n\n1\n\n1\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n0\n\n1\n\n1\n\n0\n\n1\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n0\n\n1\n\n1\n\n1\n\n0\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n1\n\n0\n\n0\n\n0\n\n1\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n1\n\n0\n\n0\n\n1\n\n1\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n1\n\n0\n\n1\n\n0\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n45\n\n\f7 segment LED display\ni3\n\ni2\n\ni1\n\ni0\n\nd0\n\nd1\n\nd2\n\nd3\n\nd4\n\nd5\n\nd6\n\nd7\n\n0\n\n0\n\n0\n\n0\n\n0\n\n1\n\n1\n\n1\n\n0\n\n1\n\n1\n\n1\n\n0\n\n0\n\n0\n\n1\n\n0\n\n0\n\n0\n\n1\n\n0\n\n1\n\n0\n\n0\n\n0\n\n0\n\n1\n\n0\n\n1\n\n0\n\n1\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n1\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n0\n\n1\n\n0\n\n1 It can\n1\n\u2026\n\u2026\nonly\n0\n1\n\u2026\n\u2026\ndisplay\n\n\u2026\n\n\u2026\n\n0\n\n1\n\n0\n\n1 numbers\n1\n\u2026up \u2026\n\n0\n\n1\n\n1\n\n0\n\n1to 9!\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n0\n\n1\n\n1\n\n1\n\n0\n\n\u2026\n\n\u2026\n\n\u2026\n\n1\n\n0\n\n0\n\n0\n\n1\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n1\n\n0\n\n0\n\n1\n\n1\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n1\n\n0\n\n1\n\n0\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\nSo we \u201cdon\u2019t\n\u2026\n\u2026\n\u2026\ncare\u201d about\n\u2026\n\u2026\n\u2026\n\u2026\nthe outputs\n\u2026\n\u2026\n\u2026\n\u2026\nfor larger\n\u2026\n\u2026\n\u2026\n\u2026\nnumbers\n\n46\n\n\f7 segment LED display\n\u25cf Now use a K-map for each output\nfunction d0-d7 - Let\u2019s start with d0\n\n00\n\n01\n\n11\n\n10\n\n\ud835\udc8a\u0d25\ud835\udfcf \ud835\udc8a\u0d25\ud835\udfce \ud835\udc8a\u0d25\ud835\udfcf \ud835\udc8a\ud835\udfce \ud835\udc8a\ud835\udfcf \ud835\udc8a\ud835\udfce \ud835\udc8a\ud835\udfcf \ud835\udc8a\u0d25\ud835\udfce\n00 \ud835\udc8a\u0d25\ud835\udfd1 \ud835\udc8a\u0d25\ud835\udfd0\n\n0\n01 \ud835\udc8a\u0d25\ud835\udfd1 \ud835\udc8a\ud835\udfd0 1\n11 \ud835\udc8a\ud835\udfd1 \ud835\udc8a\ud835\udfd0 X\n10 \ud835\udc8a\ud835\udfd1 \ud835\udc8a\u0d25\ud835\udfd0 1\n\n0\n1\nX\n1\n\n1\n0\nX\nX\n\n1\n1\nX\nX\n\ni3\n\ni2\n\ni1\n\ni0\n\nd0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n1\n\n0\n\n0\n\n0\n\n1\n\n0\n\n1\n\n0\n\n0\n\n1\n\n1\n\n1\n\n0\n\n1\n\n0\n\n0\n\n1\n\n0\n\n1\n\n0\n\n1\n\n1\n\n0\n\n1\n\n1\n\n0\n\n1\n\n0\n\n1\n\n1\n\n1\n\n0\n\n1\n\n0\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n1\n\n1\n\n1\n\n0\n\n1\n\n0\n\nX\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n\u2026\n\n47\n\n\f7 segment LED display\n\u25cf Now use a K-map for each output function d0-d7\n\u25cf Let\u2019s start with d0\n\n00\n\n01\n\n11\n\n10\n\n0\n01 \ud835\udc8a\u0d25\ud835\udfd1 \ud835\udc8a\ud835\udfd0 1\n11 \ud835\udc8a\ud835\udfd1 \ud835\udc8a\ud835\udfd0 X\n10 \ud835\udc8a\ud835\udfd1 \ud835\udc8a\u0d25\ud835\udfd0 1\n\n0\n1\nX\n1\n\n1\n0\nX\nX\n\n1\n1\nX\nX\n\n\ud835\udc8a\u0d25\ud835\udfcf \ud835\udc8a\u0d25\ud835\udfce \ud835\udc8a\u0d25\ud835\udfcf \ud835\udc8a\ud835\udfce \ud835\udc8a\ud835\udfcf \ud835\udc8a\ud835\udfce \ud835\udc8a\ud835\udfcf \ud835\udc8a\u0d25\ud835\udfce\n00 \ud835\udc8a\u0d25\ud835\udfd1 \ud835\udc8a\u0d25\ud835\udfd0\n\nOutput\n\u201cdon\u2019t cares\u201d\ncan be\nwhatever we\nneed them to\nbe \u263a\n\n48\n\n\f7 segment LED display\n00\n\n01\n\n11\n\n10\n\n\ud835\udc8a\u0d25\ud835\udfcf \ud835\udc8a\u0d25\ud835\udfce \ud835\udc8a\u0d25\ud835\udfcf \ud835\udc8a\ud835\udfce \ud835\udc8a\ud835\udfcf \ud835\udc8a\ud835\udfce \ud835\udc8a\ud835\udfcf \ud835\udc8a\u0d25\ud835\udfce\n00 \ud835\udc8a\u0d25\ud835\udfd1 \ud835\udc8a\u0d25\ud835\udfd0\n\n0\n01 \ud835\udc8a\u0d25\ud835\udfd1 \ud835\udc8a\ud835\udfd0 1\n11 \ud835\udc8a\ud835\udfd1 \ud835\udc8a\ud835\udfd0 X\n10 \ud835\udc8a\ud835\udfd1 \ud835\udc8a\u0d25\ud835\udfd0 1\n\n0\n1\nX\n1\n\n1\n0\nX\nX\n\n1\n1\nX\nX\n\n\u25cf Four minterms:\n\no \ud835\udc8a\ud835\udfd1\no \ud835\udc8a\ud835\udfd0 \ud835\udc8a\ud835\udfcf\no \ud835\udc8a\ud835\udfcf \ud835\udc8a\ud835\udfd0\no \ud835\udc8a\ud835\udfcf \ud835\udc8a\ud835\udfce\n\n\ud835\udc85\ud835\udfce = \ud835\udc8a\ud835\udfd1 + \ud835\udc8a\ud835\udfd0 \ud835\udc8a\ud835\udfcf + \ud835\udc8a\ud835\udfcf \ud835\udc8a\ud835\udfd0 + \ud835\udc8a\ud835\udfcf \ud835\udc8a\ud835\udfce\n\n49\n\n\fOn your own\n\u25cf Try making a circuit in Logisim using the 7 segment LED display\no Find it in input/output\n\u25cf Connect the logic you just solved into d0 (top-left pin) and test it\n\n\u25cf Solve for the remaining segments\no It\u2019s fun and practice\n\n50\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}