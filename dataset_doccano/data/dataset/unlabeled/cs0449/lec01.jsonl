{"id": 131, "segment": "unlabeled", "course": "cs0449", "lec": "lec01", "text": "0\n\nIntroduction\n\nCS/COE 0449\nIntroduction to\nSystems Software\n\nLuis Oliveira\n(with content borrowed from wilkie and Vinicius Petrucci)\n\nSummer 2021\n\n\fWhat do I need to know now!\nThe classes will be recorded!\n\u2022 You will be able to access the videos online\n\u25aa They are for your personal use only!\n\u25aa Do not distribute them!\n\n\u2022 You don\u2019t need to turn on your camera\n\u25aa If you do, you may be recorded\n\n\u2022 You can ask questions via text!\n\u25aa Chat is great for that. If I don\u2019t stop and read your questions, ask them again\n\u25aa But feel free to interrupt me at any point.\n\n2\n\n\fSyllabus / Administrivia\nI\u2019m obligated to inform you that this is, in fact, a university course.\n\n3\n\n\fWelcome!\n\u2022 My name is Luis (pronounced Loo-eesh, but I don\u2019t really care \u263a )\n\u2022 I\u2019m not from these parts as you can tell from my accent\n\u25aa I come from Portugal\n\ni before e except after c\u2026\nand this guy\u2019s name!\n\n\u2022 course site: luisfnqoliveira.gitlab.io/cs449_su2021\n\u25aa all the stuff I talk about today is on the course site\n\n\u2022 email: loliveira@pitt.edu\n\u2022 office: 5421 SENSQ (haha \u2013 more like Zoom) (check site)\n\u2022 office Hours: TBD (check the site)\n4\n\n\fThe Textbooks\n\u2022 The ANSI C Programming\nLanguage (2nd Edition)\n\u25aa By Brian Kernighan and Dennis Ritchie\n\u25aa Published by Prentice Hall, 1988\n\u25aa Often called the K&R book.\n\u25aa Conventions referred to as K&R style.\n\u25aa Old but trusty!\n\n\u2022 Computer Systems:\n\nA Programmer\u2019s Perspective (3rd Edition)\n\u25aa By Randal E. Bryant and David R. O\u2019Hallaron\n\u25aa Published by Pearson, 2016\n\n5\n\n\fCourse Layout\n\u2022 Lectures\n\n\u25aa Present high-level concepts.\n\n\u2022 Recitations\n\n\u25aa Applied concepts and introduce tools and skills for lab-work.\n\u25aa Clarify lectures and review topics.\n\n\u2022 Programming Assignments (Labs)\n\n\u25aa THE BULK OF YOUR COURSEWORK!\n\u25aa Roughly one-two weeks per assignment.\n\u25aa Provide deeper dive into some new skill or systems concept.\n\u25aa Programming, measurement, design.\n\n\u2022 Exams (Midterm + Final)\n\n\u25aa Tests comprehension of concepts\n\n6\n\n\fPolicies: Lab Assignments\n\u2022 Collaboration\n\u25aa You MUST WORK ALONE on all lab assignments.\n\n\u2022 Submission\n\u25aa Electronic submission using Gradescope (no exception)\n\u25aa Check due dates on the course website\n\n\u2022 Thoth Machine\n\u25aa Many labs will assume the use of a specialized machine.\n\u25aa You must use this machine:\n\u2022\n\n\u25aa Use your Pitt username and password.\n\u25aa Talk to your TA if you have any issues. (Do NOT start assignments late!)\n7\n\n\fPolicies: Late Work\n\u2022 You get 5 Late Days\n\u25aa Covers most normal setbacks and life and schedule mishaps.\n\u25aa A maximum of 2 Late Days per lab assignment.\n\u25aa That is, assignments 3 days late will always take at least 1 penalty day.\n\n\u2022 When you run out\u2026\n\u25aa Late penalty incurs a 15% penalty for each day. (out of original 100%)\n\u25aa An assignment cannot be submitted after the 3rd penalty day.\n\u2022 Four days late: that\u2019s a 0.\n\n\u2022 Emergencies\n\u25aa Major emergencies require haste communication with me and your advisor.\n\n\u2022 Start everything early!!\n8\n\n\fPolicies: Grading\n\u2022 I don\u2019t keep track of attendance\n\u25aa But you should come to class!\n\u25aa A lot of the concepts are best demonstrated interactively.\n\n\u2022 Labs: 50% (Weighted according to effort)\n\u2022 Quizzes: 5%\n\u2022 Midterm: 15%\n\u2022 Final: 20% (Necessarily Cumulative)\n\u2022 Homework: 10% (Online problem sets)\n\u2022 You CANNOT pass without doing the lab assignments.\n9\n\n\fPolicies: Conduct / Academic Integrity\n\u2022 Disability Resources / Services:\n\u25aa Contact DRS 412-648-7890; TTY: 412-383-7355\n\u25aa They will email me, and I will listen to what they tell me to do.\n\n\u2022 Cheating:\n\u25aa The default penalty is to be removed from the course with a failing grade\n\u25aa Pro-tip: DON\u2019T CHEAT. Start early. Ask appropriate staff for help.\n\u25aa The syllabus online has a more thorough policy.\n\n\u2022 Conduct:\n\u25aa Jokes/comments about sex, gender, race, ethnicity, religion, etc are not\ntolerated. Includes any online spaces involved.\n\n10\n\n\fMore Notes about Cheating\n\u2022 Again, do not cheat.\n\u2022 I\u2019m not grading lab assignments, but I still look at your work.\n\u2022 Ask for help (There are PLENTY of resources)\n\u25aa TAs and my own office hours\n\u25aa Undergraduate Helpdesk (CRC)\n\u25aa We want you to succeed!\n\n\u2022 I can definitely tell when someone cheats.\n\u25aa It is very obvious.\n\u25aa Do not do it.\n\u25aa The University is justifiably strict about it.\n\n\u2022 Do not publish your code until after the semester (if at all)\n11\n\n\fTeaching Pedagogy / Philosophy\n\u2022 I want you to walk away with a direction/goal to do something else.\n\u25aa Hopefully, you find something to be inspired by.\n\n\u2022 I trust my students that they could learn on their own.\n\u25aa But don\u2019t want them to have to do so.\n\u25aa Ask questions! Challenge concepts! Ask for help!\n\n\u2022 No questions are dumb!\n\u25aa You ARE learning! You are not supposed to know things\u2026\n\u25aa Even if you are supposed to know that, you don\u2019t\u2026 so ask!\n\u25aa So ASK QUESTIONS!\n\u25aa DON\u2019T STRUGGLE IN SILENCE\n\n12\n\n\fLessons learned\n\u2022 I scare some students (source: OMETs)\n\u25aa Sorry :\u2019)\n\u25aa Don\u2019t be scared! I like to help!\n\n\u2022 Regret #1 of my students:\n\u25aa I should have started earlier ;)\n\n\u2022 Come to lectures synchronously if you can!\n\u25aa You have access to me, we can interact\n\u25aa You can ask questions, and get the answers promptly!\n\u25aa Please\u2026 be interactive \u263a\n\n13\n\n\fQuiz: CS 447 situation\n\u2022 What is your CS 447 situation?\n(A) I am *not* taking CS 447 (CS minor?)\n\n(B) I am taking CS 447 *this* semester\n(C) I completed CS 447 *last* semester\n(D) I completed CS 447 at least 2 semesters ago\n\n14\n\n\fFLEXing @ Pitt\n\nhttps://www.kasperonbi.com/w\norking-from-home-for-thelast-3-years-tips-and-tricks/\n\n15\n\n\fIDK you tell me\n\u2022 Let\u2019s discuss some things:\n\u25aa What were your experiences last semester with remote teaching?\n\u2022 Good/bad/ugly\n\n\u25aa If the university authorizes, do you want to attend classes physically?\n\u2022 Why? (I really want to know your reasons!)\n\u2022 Note the question is not do you prefer\n(cause, ya know, we all preferred no CoViD pandemic)\n\u2022 My opinion: There is no benefit in coming that overweighs your health.\n\n\u25aa Who has timezone restrictions?\n\u2022 How should I distribute my office hours?\n\n\u25aa Anything else?\n\n16\n\n\fWhat I know!\n\u25aa Lectures will be synchronous! And online! ALWAYS!\n\u2022 But video will be available!\n\u2022 If you can, attend synchronously!\n\n\u25aa You can attend lectures asynchronously\n\u2022 Have a job? some scheduling problem? Idk?\n\n\u25aa Recitations are ALL remote!\n\u2022 I think\u2026\n\n\u25aa IF we go back to the classroom\n\u2022 First lecture, I\u2019ll be in the classroom, you will be at home. Why?\n\u2022 If technical issues come, I\u2019ll just relocate to teach remotely\n\u2022 You can experience how it feels (teacher in classroom, students remote)\n\n\u25aa EVERYONE WILL FOLLOW THE RULES (distance, mask, etc.!)\n\u2022 https://www.coronavirus.pitt.edu/\n\u2022 NO EXCEPTION (class will be dismissed)\n\n17\n\n\fCourse Overview\nIf food were knowledge, this would be, like, our restaurant menu.\n\n18\n\n\fTopics (Subject to deviation)\n\u2022 We\u2019re going to (tentatively) learn SO MUCH fun stuff!\n\u2022 The C Systems Programming Language\n\u25aa Some x86 Assembly\n\n\u2022 Memory Models\n\n\u25aa Addresses and Pointers\n\u25aa Memory management\n\n\u2022 Memory Caches\n\u2022 Operating Systems\n\n\u25aa Processes / Signals\n\u25aa Interprocess Communication\n\u25aa The Basics of Virtual Memory\n\u25aa Basic Network Programming\n19\n\n\fSkills\n\u2022 C Programming\n\u25aa Abstractions and coping without them\n\u25aa x86 assembly (ISA) / calling conventions (ABI)\n\u25aa Interactive debugging\n\u25aa Data representation\n\u25aa We gain an appreciation of abstraction (and respecting limitations)\n\n\u2022 Systems Design\n\u25aa Learning the \u201cwhy\u201d for many systems abstractions\n\u25aa Manipulating systems and existing programs\n\u25aa Thinking about how systems might change in the future\n\u25aa We demystify software so as to no longer be a hostage to its design\n\n20\n\n\fWhat is Systems?\n\u2022 Systems is broad\n\u25aa A subfield of CS dealing with the interactions between software/hardware.\n\u25aa A layer that provides abstractions and must constantly reevaluate them.\n\u2022 Operating Systems\n\u2022 File Systems\n\u2022 Program Analysis / Debugging Tools\n\u2022 Intra/Inter System Protocols\n\n\u25aa A house built from trade-offs in approach\u2026\n\u2022 Do you build better hardware? Add more memory?\n\u2022 Or, do you design better software?\n\n\u25aa And trade-offs in design\u2026\n\u2022 Do you choose the specialized path?\n\u2022 Or, do you create a general system?\n\u2022 Both??\n\n\u25aa Very opinionated!!!!!!!!!!\n21\n\n\fWhat is Systems??\nLooking for guidance by looking at recent research:\n\u2022 Research Conferences\n\n\u25aa SOSP/OSDI/EuroSys \u2013 OS design, kernel design, virtualization\n\u2022 Parit models: erasure-coded resilience for prediction serving systems\n\u2022 Teechain: a secure payment network with asynchronous blockchain access\n\u2022 Finding semantic bugs in file systems with an extensible fuzzing framework\n\u2022 File systems unfit as distributed storage backends: lessons from 10 years of Ceph evolution\n\u2022 Snap: a microkernel approach to host networking\n\n\u25aa HotOS \u2013 Positions on Systems\u2019 future\n\u2022 Machine Learning Systems are Stuck in a Rut\n\u2022 Granular Computing\n\u2022 I/O Is Faster Than the CPU -- Let's Partition Resources and Eliminate (Most) OS Abstractions\n\u2022 I'm Not Dead Yet!: The Role of the Operating System in a Kernel-Bypass Era\n\u2022 Unikernels: The Next Stage of Linux's Dominance\n\u2022 The Case for I/O-Device-as-a-Service\n\n22\n\n\fWhy the C Programming Language?\n\u2022 Because B sucks and D wasn\u2019t invented yet. J/K.\n\u2022 C was invented in 1972 alongside UNIX to an effort to aid\napplication development of that system.\n\u2022 Eventually UNIX itself was rewritten in C cementing C as a systems\nlanguage.\n\u2022 As such, C provides a high-level abstraction of assembly / machinecode and a low-level abstraction of memory, from the perspective\nof the C programmer.\n\u25aa This is important for programming systems code!\n\u25aa Allows full manipulation of memory (to one\u2019s peril, often.)\n\u25aa This, in turn, allows for full manipulation of cpu/hardware.\n23\n\n\fWhy the C Programming Language??\n\u2022 Learning C helps you understand Systems.\n\u2022 Understanding Systems lets you\nmake them better.\n\u25aa Or break them. \u263a\n\n\u2022 C reveals the underlying memory\nmodel and execution environment.\n\u25aa Lets you understand any program.\n\u25aa Even if you do not have the original code.\n\n\u2022 Failing at C helps you learn\u2026\n\u25aa Because then you debug your program.\n\u25aa And debuggers are very useful tools.\n24\n\n\fHow people use these skills\n\u2022 Writing Operating Systems\n\u25aa not the entire thing hopefully\n\u25aa \u2026 but parts are generally gonna be C/C-like\n\u25aa Understanding systems means knowing how to\nmitigate/improve performance.\n\u2022 Important that your abstractions don\u2019t hurt performance\nbecause EVERY user application suffers.\n\u2022 Yet, performance is not the only consideration;\nunderstanding abstractions should help alleviate design\nfatigue. https://wilkie.how/posts/kaashoeks-law\n\n\u25aa Linux and Device Drivers: 10+ million lines of C\n\u2022 Yikes.\n\u2022 But, learning C means you can potentially read this and\nlearn more about / improve / extend Linux.\n\n25\n\n\fHow people use these skills\n\u2022 Debugging Higher-level Programs\n\u25aa Yes, even Python itself crashes!\n\u25aa \u2026 and the Python interpreter is written in C \u2026\n\u25aa \u2026 and computers don\u2019t understand C \u2026\n\u25aa \u2026 so it\u2019s gonna give you an assembly dump.\n\n26\n\n\fHow people use these skills\n\u2022 Creating Art\n\u25aa Real-time art includes not just video games.\n\u25aa There is a lot of fun and skill involved.\n\u25aa Being creative within a constraint has been\nvery alluring.\n\u25aa The Demoscene is such a community.\n\n27\n\n\fHow people use these skills\n\u2022 Breaking Things for Great Good\n\n\u25aa Or great bad\u2026 I\u2019m not your parents.\n\u25aa Why? Old programs with copy-protection\nare still useful.\n\u2022 Original source code backed up??\nWhat time do you think this is?? Never????\n\n\u25aa And it is technically legal to reverse-engineer\nand/or change them.\n\u2022 The best kind of legal.\n\u2022 But I\u2019m not a lawyer and this is not legal advice. lol\n\n\u25aa You will typically use a \u201cdebugger\u201d to break\ndown a program\u2019s behavior.\n\u25aa And then patch it to do / not-do things.\n\u25aa Generally done professionally by librarians/archivists.\n\u25aa We will also do this!!\n\n28\n\n\fHow YOU will use these skills\n\u2022 All of the above!!\n\u2022 And, of course, TO HAVE FUN!!\n\n29\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}