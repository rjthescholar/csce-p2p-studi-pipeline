{"id": 130, "segment": "unlabeled", "course": "cs0449", "lec": "lec16", "text": "Network\nProgramming\n\nCS/COE 0449\nIntroduction to\nSystems Software\n\nLuis Oliveira\n(with content borrowed from wilkie and Vinicius Petrucci)\n\n\fA Client-Server Transaction\n\u2022 Most network applications are based on the client-server\nmodel:\n\u2022 A server process and one or more client processes\n\u2022 Server manages some resource\n\u2022 Server provides service by manipulating resource for clients\n\u2022 Server activated by request from client (vending machine\nanalogy)\n\n4. Client\nhandles\nresponse\n\nClient\nprocess\n\n1. Client sends request\n3. Server sends response\n\nServer\nprocess\n\nResource\n2. Server\nhandles\nrequest\n\nNote: clients and servers are processes running on hosts\n(can be the same or different hosts)\n\n2\n\n\fHardware Organization of a Network Host\nCPU chip\nregister file\nALU\nsystem bus\n\nmemory bus\nmain\nmemory\n\nI/O\nbridge\n\nMI\n\nExpansion slots\nI/O bus\nUSB\ncontroller\n\ngraphics\nadapter\n\nmouse keyboard\n\nmonitor\n\ndisk\ncontroller\n\nnetwork\nadapter\n\ndisk\n\nnetwork\n\n3\n\n\fComputer Networks\n\u2022 A network is a hierarchical system of boxes and wires organized by\ngeographical proximity\n\u2022 SAN* (System Area Network) spans cluster or machine room\n\u2022 Switched Ethernet, Quadrics QSW, \u2026\n\n\u2022 LAN (Local Area Network) spans a building or campus\n\u2022 Ethernet is most prominent example\n\n\u2022 WAN (Wide Area Network) spans country or world\n\u2022 Typically high-speed point-to-point phone lines\n\n\u2022 An internetwork (internet) is an interconnected set of networks\n\u2022 The Global IP Internet (uppercase \u201cI\u201d) is the most famous example of an internet\n(lowercase \u201ci\u201d)\n4\n* Not to be confused with a Storage Area Network\n\n\fLogical Structure of an internet\n\nhost\n\nrouter\n\nhost\n\nrouter\nrouter\n\nrouter\n\nrouter\n\nrouter\n\n\u2022 Ad hoc interconnection of networks\n\u2022 No particular topology\n\u2022 Vastly different router & link capacities\n\n\u2022 Send packets from source to destination by hopping through\nnetworks\n\u2022 Router forms bridge from one network to another\n\u2022 Different packets may take different routes\n\n5\n\n\fThe Notion of an internet Protocol\n\u2022 How is it possible to send bits across incompatible\nLANs and WANs?\n\u2022 Solution: protocol software running on each host and\nrouter\n\u2022 Protocol is a set of rules that governs how hosts and\nrouters should cooperate when they transfer data from\nnetwork to network.\n\u2022 Smooths out the differences between the different\nnetworks\n\n6\n\n\fWhat Does an internet Protocol Do?\n\u2022 Provides a naming scheme\n\u2022 An internet protocol defines a uniform format for host\naddresses\n\u2022 Each host (and router) is assigned at least one of these\ninternet addresses that uniquely identifies it\n\n\u2022 Provides a delivery mechanism\n\u2022 An internet protocol defines a standard transfer unit\n(packet)\n\u2022 Packet consists of header and payload\n\u2022 Header: contains info such as packet size, source and destination\naddresses\n\u2022 Payload: contains data bits sent from source host\n7\n\n\fGlobal IP Internet (upper case)\n\u2022 Most famous example of an internet\n\u2022 Based on the TCP/IP protocol family\n\u2022 IP (Internet Protocol)\n\n\u2022 Provides basic naming scheme and unreliable delivery capability\nof packets (datagrams) from host-to-host\n\n\u2022 UDP (Unreliable Datagram Protocol)\n\n\u2022 Uses IP to provide unreliable datagram delivery from\nprocess-to-process\n\n\u2022 TCP (Transmission Control Protocol)\n\n\u2022 Uses IP to provide reliable byte streams from process-to-process over\nconnections\n\n\u2022 Accessed via a mix of Unix file I/O and functions from the\nsockets interface\n8\n\n\fHardware and Software Organization\nof an Internet Application\nInternet client host\n\nInternet server host\n\nClient\n\nUser code\n\nServer\n\nTCP/IP\n\nKernel code\n\nTCP/IP\n\nNetwork\nadapter\n\nHardware\nand firmware\n\nNetwork\nadapter\n\nSockets interface\n(system calls)\nHardware interface\n(interrupts)\n\nGlobal IP Internet\n\n9\n\n\fA Programmer\u2019s View of the Internet\n1. Hosts are mapped to a set of 32-bit IP addresses\n\u2022 128.2.203.179\n\n2. The set of IP addresses is mapped to a set of\nidentifiers called Internet domain names\n\u2022 136.142.156.73 is mapped to www.cs.pitt.edu\n\n3. A process on one Internet host can communicate\nwith a process on another Internet host over a\nconnection\n10\n\n\f(1) IP Addresses\n\u2022 32-bit IP addresses are stored in an IP address struct\n\u2022 IP addresses are always stored in memory in network byte order\n(big-endian byte order)\n\u2022 True in general for any integer transferred in a packet header\nfrom one machine to another.\n\u2022 E.g., the port number used to identify an Internet connection.\n/* Internet address structure */\nstruct in_addr {\nuint32_t s_addr; /* network byte order (big-endian) */\n};\n\n\fDotted Decimal Notation\n\u2022 By convention, each byte in a 32-bit IP address is\nrepresented by its decimal value and separated by a\nperiod\n\u2022 IP address: 0x8002C2F2 = 128.2.194.242\n\n\u2022 Use getaddrinfo and getnameinfo functions to\nconvert between IP addresses and dotted decimal\nformat.\n\n\f(2) Internet Domain Names\nunnamed root\n\n.edu\n\n.gov\n\nmit\n\npitt\n\nberkeley\n\namazon\n\nSecond-level domain names\n\nsci\n\nwww\n\nThird-level domain names\n\ncs\n\n.com\n\n54.230.48.28\n\nthoth\n\nFirst-level domain names\n\n.net\n\nwww\n\n136.142.23.51 136.142.156.73\n\n\fDomain Naming System (DNS)\n\u2022 The Internet maintains a mapping between IP\naddresses and domain names in a huge worldwide\ndistributed database called DNS\n\n\u2022 Conceptually, programmers can view the DNS\ndatabase as a collection of millions of host entries.\n\u2022 Each host entry defines the mapping between a set of\ndomain names and IP addresses.\n\n\fProperties of DNS Mappings\n\u2022 Can explore properties of DNS mappings using\nnslookup\n\u2022 (Output edited for brevity)\n\n\u2022 Each host has a locally defined domain name\nlocalhost which always maps to the loopback address\n127.0.0.1\nlinux> nslookup localhost\nAddress: 127.0.0.1\n\n\u2022 Use hostname to determine real domain name of local\nhost:\nlinux> hostname\nthoth.cs.pitt.edu\n\n\fProperties of DNS Mappings (cont)\n\u2022 Simple case: one-to-one mapping between domain name\nand IP address:\nlinux> nslookup thoth.cs.cmu.edu\nAddress: 136.142.23.51\n\n\u2022 Multiple domain names mapped to the same IP address:\nlinux> nslookup cs.pitt.edu\nAddress: 136.142.156.73\nlinux> nslookup sci.pitt.edu\nAddress: 136.142.156.73\n\n\fProperties of DNS Mappings (cont)\n\u2022 Multiple domain names mapped to multiple IP\naddresses: linux> nslookup www.twitter.com\nAddress: 104.244.42.65\nAddress: 104.244.42.129\nAddress: 104.244.42.193\nAddress: 104.244.42.1\nlinux> nslookup www.twitter.com\nAddress: 104.244.42.129\nAddress: 104.244.42.65\nAddress: 104.244.42.193\nAddress: 104.244.42.1\n\n\u2022 Some valid domain names don\u2019t map to any IP address:\nlinux> nslookup bla.cs.pitt.edu\n(No Address given)\n\n\f(3) Internet Connections\n\u2022 Clients and servers communicate by sending streams of bytes\nover connections. Each connection is:\n\u2022 Point-to-point: connects a pair of processes.\n\u2022 Full-duplex: data can flow in both directions at the same time,\n\u2022 Reliable: stream of bytes sent by the source is eventually received by\nthe destination in the same order it was sent.\n\n\u2022 A socket is an endpoint of a connection\n\u2022 Socket address is an IPaddress:port pair\n\n\u2022 A port is a 16-bit integer that identifies a process:\n\u2022 Ephemeral port: Assigned automatically by client kernel when client\nmakes a connection request.\n\u2022 Well-known port: Associated with some service provided by a server\n(e.g., port 80 is associated with Web servers)\n\n\fWell-known Service Names and Ports\n\u2022 Popular services have permanently assigned well-known ports and\ncorresponding well-known service names:\n\u2022 echo servers: echo 7\n\u2022 ftp servers:\nftp 21\n\u2022 ssh servers: ssh 22\n\u2022 email servers: smtp 25\n\u2022 Web servers: http 80\n\n\u2022 Mappings between well-known ports and service names is contained\nin the file /etc/services on each Linux machine.\n\n\fAnatomy of a Connection\n\u2022 A connection is uniquely identified by the socket\naddresses of its endpoints (socket pair)\n\u2022 (cliaddr:cliport, servaddr:servport)\nClient socket address\n128.2.194.242:51213\nClient\n\nServer socket address\n208.216.181.15:80\n\nConnection socket pair\n(128.2.194.242:51213, 208.216.181.15:80)\n\nClient host address\n128.2.194.242\n\n51213 is an ephemeral port\nallocated by the kernel\n\nServer\n(port 80)\n\nServer host address\n208.216.181.15\n\n80 is a well-known port\nassociated with Web servers\n\n\fUsing Ports to Identify Services\nServer host 128.2.194.242\nClient host\nClient\n\nService request for\n128.2.194.242:80\n(i.e., the Web server)\n\nWeb server\n(port 80)\nKernel\nEcho server\n(port 7)\n\nClient\n\nService request for\n128.2.194.242:7\n(i.e., the echo server)\n\nWeb server\n(port 80)\nKernel\nEcho server\n(port 7)\n\n\fSockets Interface\n\u2022 Set of system-level functions used in conjunction\nwith Unix I/O to build network applications.\n\u2022 Created in the early 80\u2019s as part of the original\nBerkeley distribution of Unix that contained an\nearly version of the Internet protocols.\n\u2022 Available on all modern systems\n\u2022 Unix variants, Windows, OS X, IOS, Android, ARM\n\n\fSockets\n\u2022 What is a socket?\n\u2022 To the kernel, a socket is an endpoint of communication\n\u2022 To an application, a socket is a file descriptor that lets the\napplication read/write from/to the network\n\u2022 Remember: All Unix I/O devices, including networks, are modeled as\nfiles\n\n\u2022 Clients and servers communicate with each other by reading from\nand writing to socket descriptors\nClient\nclientfd\n\nServer\nserverfd\n\n\u2022 The main distinction between regular file I/O and socket I/O is how\nthe application \u201copens\u201d the socket descriptors\n\n\fSocket Programming Example\n\u2022 Echo server and client\n\u2022 Server\n\u2022 Accepts connection request\n\u2022 Repeats back lines as they are typed\n\n\u2022 Client\n\u2022 Requests connection to server\n\u2022 Repeatedly:\n\u2022 Read line from terminal\n\u2022 Send to server\n\u2022 Read reply from server\n\u2022 Print line to terminal\n\n\fEcho Server/Client Session Example\n\nClient\nthoth $ ./echoclient\nThis line is being echoed\nThis line is being echoed\nThis one is, too\nThis one is, too\n^D\n\n(A)\n(B)\n(C)\n\nServer\nthoth $ ./echoserver\nServer connected to client.\nserver received 26 bytes\nserver received 17 bytes\n\n(A)\n(B)\n(C)\n\n\f2. Start client\nClient\n\n1. Start server\nServer\n\nlisten\nconnect\n\nConnection\nrequest\n\nClient /\nServer\nSession\n\naccept\n\nterminal read\nsocket write\n\nsocket read\n\nsocket read\nterminal write\n\nsocket write\n\nclose\n\n4. Disconnect client\n\nEOF\n\nEcho\nServer\n+ Client\nStructure\nAwait connection\nrequest from client\n\n3. Exchange\ndata\n\nsocket read\n\n5. Drop client\nclose\n\n\f2. Start client\nClient\n\n1. Start server\nServer\n\nlisten\nconnect\n\nConnection\nrequest\n\nClient /\nServer\nSession\n\naccept\n\nfgets\nwrite\n\nread\n\nread\nfputs\n\nwrite\n\nclose\n\n4. Disconnect client\n\nEOF\n\nEcho\nServer\n+ Client\nStructure\nAwait connection\nrequest from client\n\n3. Exchange\ndata\n\nread\n\n5. Drop client\nclose\n\n\fEcho Server: Main Routine\nC (gcc -o echoserver echoserver.c)\n\n// Listen for connections\nresult = listen(server_fd, 3);\nif (result < 0) {\nperror(\"listen\");\nexit(EXIT_FAILURE);\n}\n\n#include <stdio.h> // fgets, etc\n#include <sys/socket.h> // socket API\n#include <arpa/inet.h> // inet functions, htons\n#include <unistd.h> // read/close system calls\n#include <stdlib.h> // exit\n#include <string.h> // strlen\n#define PORT 9997\n\n// Listen will return when a connection is requested...\n// Accept that connection\nint addrlen = sizeof(address);\nint new_socket = accept(server_fd, (struct sockaddr *)&address,\n(socklen_t*)&addrlen);\nif (new_socket < 0) {\nperror(\"accept\");\nexit(EXIT_FAILURE);\n}\n\nint main(void) {\n// Creating socket file descriptor (using internet protocol)\nint server_fd = socket(AF_INET, SOCK_STREAM, 0);\nif (server_fd == 0) {\nperror(\"socket failed\");\nWe create a socket.\nexit(EXIT_FAILURE);\n}\n// We want to use the internet protocol\nstruct sockaddr_in address;\naddress.sin_family = AF_INET;\naddress.sin_addr.s_addr = INADDR_ANY;\naddress.sin_port = htons(PORT);\n\nWe wait until somebody\nrequests a connection.\n\nWe accept that connection.\n\nprintf(\"Server connected to client.\\n\");\nchar buffer[1024] = {0};\nint count = 0;\ndo {\n// Read data (it waits until data is available)\ncount = read(new_socket, buffer, 1024);\nprintf(\"Server received %d bytes.\\n\", count);\nbuffer[count] = '\\0';\nwrite(new_socket, buffer, strlen(buffer));\n} while(count);\n\nWe define what port and\nprotocol we want\n\n// Bind socket to the port (so it listens to that port)\nint result = bind(server_fd, (struct sockaddr *)&address, sizeof(address));\nif (result < 0) {\nperror(\"bind failed\");\nWe bind ourselves to that port.\nexit(EXIT_FAILURE);\n}\n}\n\nclose(new_socket);\nclose(server_fd);\nreturn 0;\n\nWe wait until data\narrives and read it.\n\nWe write it back out. Stopping our\nloop when nothing was read.\n\nWe close all of our connections.\n\n\f1. Start server\nServer\n\n2. Start client\nClient\n\nlisten\nconnect\n\nConnection\nrequest\n\nClient /\nServer\nSession\n\naccept\n\nfgets\nwrite\n\nread\n\nread\nfputs\n\nwrite\n\nclose\n\nEOF\n\nread\n\nclose\n\nEcho\nServer\n+ Client\nStructure\nAwait connection\nrequest from client\n\n3. Exchange\ndata\n\n\fEcho Client: Main Routine\nC (gcc -o echoclient echoclient.c)\n\nint result = connect(sock,\n(struct sockaddr *)&serv_addr,\nsizeof(serv_addr));\nif (result < 0) {\nprintf(\"\\nConnection Failed \\n\");\nreturn -1;\nIf we got here, the server\n}\naccepted our connection!\n\n#include <stdio.h> // fgets, etc\n#include <sys/socket.h> // socket API\n#include <arpa/inet.h> // inet functions, htons\n#include <unistd.h> // read/close system calls\n#include <string.h> // strlen\n#define PORT 9997\nint main(void) {\n// Creating socket file descriptor (using internet protocol)\nint sock = socket(AF_INET, SOCK_STREAM, 0);\nif (sock < 0) {\nWe create a socket.\nprintf(\"\\n Socket creation error \\n\");\nreturn -1;\n}\nUsing the Internet protocol.\nstruct sockaddr_in serv_addr;\nserv_addr.sin_family = AF_INET;\nserv_addr.sin_port = htons(PORT);\n\nActually request a connection.\n\nchar buffer[1024] = {0};\nint count = 0;\nThis loop reads from stdin (user input)\ndo {\nif (fgets(buffer, 1024, stdin) == NULL) {\nbreak; // Exit when line is empty (CTRL+D is pressed)\n}\nWe write everything to the server!\nwrite(sock, buffer, strlen(buffer));\ncount = read(sock, buffer, 1023);\nbuffer[count] = '\\0';\nAnd print out everything the\nfputs(buffer, stdout);\nserver sends us.\n} while(count);\n\nConnecting to localhost\n\n// Convert IPv4 and IPv6 addresses from text to binary form\nif (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr)<=0) {\nprintf(\"\\nInvalid address / Address not supported \\n\");\nreturn -1;\n}\n\nclose(sock);\nreturn 0;\n}\n\nWe clean up when the loop ends (when\nno user input via CTRL+D)\n\n\fRead and write system calls\n\u2022 Same interface used to read/write files.\n\u2022 Because sockets are also files! Neat.\n#include <unistd.h>\nssize_t read(int fd, void *usrbuf, size_t n);\nssize_t write(int fd, void *usrbuf, size_t n);\nReturn: number of bytes transferred if OK, 0 on EOF (read only), -1 on error\n\n\u2022 read returns a count of 0 only if it encounters EOF\n\u2022 So, it is useful to notice if the other machine disconnected.\n\n\u2022 Calls to read and write can be interleaved arbitrarily on the\nsame file descriptor (socket, file on disk, etc)\n\n\fSockets Interface\n\nClient\n\nServer\n\ngetaddrinfo\n\ngetaddrinfo\n\nsocket\n\nsocket\n\nlisten\nconnect\n\nbind\n\nlisten\n\nconnect\n\nClient /\nServer\nSession\n\nConnection\nrequest\n\naccept\n\nwrite\n\nread\n\nread\n\nwrite\n\nclose\n\nEOF\n\nread\n\nclose\n\nAwait connection\nrequest from\nnext client\n\n\fconnect/accept Illustrated\nlistenfd(3)\nClient\n\nServer\n\nclientfd\n\nConnection\nrequest\nClient\n\nlistenfd(3)\nServer\n\n1. Server blocks in accept,\nwaiting for connection request\non listening descriptor\nlistenfd\n\n2. Client makes connection request by\ncalling and blocking in connect\n\nclientfd\n\nlistenfd(3)\nClient\nclientfd\n\nServer\nconnfd(4)\n\n3. Server returns connfd from accept.\nClient returns from connect.\nConnection is now established between\nclientfd and connfd\n\n\fConnected vs. Listening Descriptors\n\u2022 Listening descriptor\n\u2022 End point for client connection requests\n\u2022 Created once and exists for lifetime of the server\n\n\u2022 Connected descriptor\n\u2022 End point of the connection between client and server\n\u2022 A new descriptor is created each time the server accepts a\nconnection request from a client\n\u2022 Exists only as long as it takes to service client\n\n\u2022 Why the distinction?\n\u2022 Allows for concurrent servers that can communicate over many\nclient connections simultaneously\n\u2022 E.g., Each time we receive a new request, we fork a child to handle the request\n\n\fTesting Servers Using telnet\n\u2022 The telnet program is invaluable for testing\nservers that transmit ASCII strings over Internet\nconnections\n\u2022 Our simple echo server\n\u2022 Web servers\n\u2022 Mail servers\n\n\u2022 Usage:\n\u2022 linux> telnet <host> <portnumber>\n\u2022 Creates a connection with a server running on <host>\nand listening on port <portnumber>\n\n\fTesting the Echo Server With telnet\noccam.dev $ ./echoserver 10001\nServer connected to client.\nServer received 11 bytes\nServer received 8 bytes\n\nthoth $ telnet occam.dev 10001\nTrying 142.4.212.185...\nConnected to occam.dev (142.4.212.185).\nEscape character is '^]'.\nHi there!\nHi there!\nHowdy!\nHowdy!\n^]\n\u00df This means CTRL+]\ntelnet> quit\nConnection closed.\nthoth $\n\n\fWeb Server Basics\n\u2022 Clients and servers\ncommunicate using the\nHyperText Transfer Protocol\n(HTTP)\n\u2022 Client and server establish TCP\nconnection\n\u2022 Client requests content\n\u2022 Server responds with requested\ncontent\n\u2022 Client and server close\nconnection (eventually)\n\n\u2022 Current version is HTTP/1.1\n\nWeb\nclient\n(browser)\n\nHTTP request\nWeb\nserver\nHTTP response\n(content)\n\nHTTP\n\nWeb content\n\nTCP\n\nStreams\n\nIP\n\nDatagrams\n\n\u2022 RFC 2616, June, 1999.\nhttp://www.w3.org/Protocols/rfc2616/rfc2616.html\n\n\fWeb Content\n\u2022 Web servers return content to clients\n\u2022 content: a sequence of bytes with an associated MIME (Multipurpose\nInternet Mail Extensions) type\n\n\u2022 Example MIME types\n\u2022 text/html\n\u2022 text/plain\n\u2022 image/gif\n\u2022 image/png\n\u2022 image/jpeg\n\nHTML document\nUnformatted text\nBinary image encoded in GIF format\nBinar image encoded in PNG format\nBinary image encoded in JPEG format\n\nYou can find the complete list of MIME types at:\nhttp://www.iana.org/assignments/media-types/media-types.xhtml\n\n\fStatic and Dynamic Content\n\u2022 The content returned in HTTP responses can be either static or dynamic\n\u2022 Static content: content stored in files and retrieved in response to an HTTP request\n\u2022 Examples: HTML files, images, audio clips, Javascript programs\n\u2022 Request identifies which content file\n\n\u2022 Dynamic content: content produced on-the-fly in response to an HTTP request\n\u2022 Example: content produced by a program executed by the server on behalf of the client\n\u2022 Request identifies file containing executable code\n\n\u2022 Bottom line: Web content is associated with a file that is managed by the\nserver\n\n\fURLs and how clients and servers use them\n\u2022 Unique name for a file: URL (Universal Resource Locator)\n\u2022 Example URL:\nhttp://www.google.edu:80/index.html\n\u2022 Clients use prefix (http://www.google.edu:80) to\ninfer:\n\u2022 What kind (protocol) of server to contact (HTTP)\n\u2022 Where the server is (www.google.com)\n\u2022 What port it is listening on (80)\n\n\u2022 Servers use suffix (/index.html) to:\n\n\u2022 Determine if request is for static or dynamic content.\n\n\u2022 No hard and fast rules for this\n\u2022 One convention: executables reside in cgi-bin directory\n\n\u2022 Find file on file system\n\n\u2022 Initial \u201c/\u201d in suffix denotes home directory for requested content.\n\u2022 Minimal suffix is \u201c/\u201d, which server expands to configured default\nfilename (usually, index.html)\n\n\fHTTP Requests\n\u2022 HTTP request is a request line, followed by zero or more\nrequest headers\n\u2022 Request line: <method> <uri> <version>\n\u2022 <method> is one of GET, POST, OPTIONS, HEAD, PUT,\nDELETE, or TRACE\n\u2022 <uri> is typically URL for proxies, URL suffix for servers\n\u2022 A URL is a type of URI (Uniform Resource Identifier)\n\u2022 See http://www.ietf.org/rfc/rfc2396.txt\n\n\u2022 <version> is HTTP version of request (HTTP/1.0 or HTTP/1.1)\n\n\u2022 Request headers: <header name>: <header data>\n\u2022 Provide additional information to the server\n\n\fHTTP Responses\n\u2022 HTTP response is a response line followed by zero or more response headers, possibly\nfollowed by content, with blank line (\u201c\\r\\n\u201d) separating headers from content.\n\u2022 Response line:\n<version> <status code> <status msg>\n\u2022 <version> is HTTP version of the response\n\u2022 <status code> is numeric status\n\u2022 <status msg> is corresponding English text\n\u2022\n\n200\n\nOK\n\nRequest was handled without error\n\n\u2022\n\n301\n\nMoved\n\nProvide alternate URL\n\n\u2022\n\n404\n\nNot found Server couldn\u2019t find the file\n\n\u2022 Response headers: <header name>: <header data>\n\u2022 Provide additional information about response\n\u2022 Content-Type: MIME type of content in response body\n\u2022 Content-Length: Length of content in response body\n\n\fExample HTTP Transaction\nwhaleshark> telnet www.cmu.edu 80\nClient: open connection to server\nTrying 128.2.42.52...\nTelnet prints 3 lines to terminal\nConnected to WWW-CMU-PROD-VIP.ANDREW.cmu.edu.\nEscape character is '^]'.\nGET / HTTP/1.1\nClient: request line\nHost: www.cmu.edu\nClient: required HTTP/1.1 header\nClient: empty line terminates headers\nHTTP/1.1 301 Moved Permanently\nServer: response line\nDate: Wed, 05 Nov 2014 17:05:11 GMT\nServer: followed by 5 response headers\nServer: Apache/1.3.42 (Unix)\nServer: this is an Apache server\nLocation: http://www.cmu.edu/index.shtml Server: page has moved here\nTransfer-Encoding: chunked\nServer: response body will be chunked\nContent-Type: text/html; charset=...\nServer: expect HTML in response body\nServer: empty line terminates headers\n15c\nServer: first line in response body\n<HTML><HEAD>\nServer: start of HTML content\n\u2026\n</BODY></HTML>\nServer: end of HTML content\n0\nServer: last line in response body\nConnection closed by foreign host.\nServer: closes connection\n\nHTTP standard requires that each text line end with \u201c\\r\\n\u201d\n\u00a2 Blank line (\u201c\\r\\n\u201d) terminates request and response headers\n\u00a2\n\n\fExample HTTP Transaction, Take 2\nwhaleshark> telnet www.cmu.edu 80\nClient: open connection to server\nTrying 128.2.42.52...\nTelnet prints 3 lines to terminal\nConnected to WWW-CMU-PROD-VIP.ANDREW.cmu.edu.\nEscape character is '^]'.\nGET /index.shtml HTTP/1.1\nClient: request line\nHost: www.cmu.edu\nClient: required HTTP/1.1 header\nClient: empty line terminates headers\nHTTP/1.1 200 OK\nServer: response line\nDate: Wed, 05 Nov 2014 17:37:26 GMT\nServer: followed by 4 response headers\nServer: Apache/1.3.42 (Unix)\nTransfer-Encoding: chunked\nContent-Type: text/html; charset=...\nServer: empty line terminates headers\n1000\nServer: begin response body\n<html ..>\nServer: first line of HTML content\n\u2026\n</html>\n0\nServer: end response body\nConnection closed by foreign host.\nServer: close connection\n\n\fProxies\n\u2022 A proxy is an intermediary between a client and an origin\nserver\n\u2022 To the client, the proxy acts like a server\n\u2022 To the server, the proxy acts like a client\n\n1. Client request\nClient\n\n2. Proxy request\nOrigin\nServer\n\nProxy\n\n4. Proxy response\n\n3. Server response\n\n\u2022 This is what you will be implementing in Proxy Lab\n\n\fWhy Proxies?\n\u2022 Can perform useful functions as requests and responses\npass by\n\u2022 Examples: Caching, logging, anonymization, filtering,\ntranscoding\nClient\nA\n\nRequest foo.html\nProxy\ncache\n\nRequest foo.html\nClient\nB\n\nRequest foo.html\n\nfoo.html\n\nfoo.html\n\nFast inexpensive local network\n\nfoo.html\n\nOrigin\nServer\n\nSlower more expensive global network\n\n\fSockets Interface\nClient\n\nServer\n\ngetaddrinfo\n\ngetaddrinfo\n\nSA list\n\nSA list\n\nsocket\n\nsocket\n\nopen_listenfd\nopen_clientfd\n\nbind\n\nlisten\n\nconnect\n\nClient /\nServer\nSession\n\nConnection\nrequest\n\naccept\n\nrio_writen\n\nrio_readlineb\n\nrio_readlineb\n\nrio_writen\n\nclose\n\nEOF\n\nrio_readlineb\n\nclose\n\nAwait connection\nrequest from\nnext client\n\n\fSockets Interface: socket\n\u2022 Clients and servers use the socket function to create a\nsocket descriptor:\nint socket(int domain, int type, int protocol)\n\n\u2022 Example:\nint clientfd = socket(AF_INET, SOCK_STREAM, 0);\n\nIndicates that we are using\n32-bit IPV4 addresses\n\nIndicates that the socket\nwill be the end point of a\nconnection\n\nProtocol specific! Best practice is to use getaddrinfo to\ngenerate the parameters automatically, so that code is\nprotocol independent.\n\n\fSockets Interface\nClient\n\nServer\n\ngetaddrinfo\n\ngetaddrinfo\n\nSA list\n\nSA list\n\nsocket\n\nsocket\n\nopen_listenfd\n\nlistenfd\n\nclientfd\nopen_clientfd\n\nbind\n\nlisten\n\nconnect\n\nClient /\nServer\nSession\n\nConnection\nrequest\n\naccept\n\nwrite\n\nread\n\nread\n\nwrite\n\nclose\n\nEOF\n\nread\n\nclose\n\nAwait connection\nrequest from\nnext client\n\n\fSockets Interface: bind\n\u2022 A server uses bind to ask the kernel to associate the server\u2019s\nsocket address with a socket descriptor:\nint bind(int sockfd, SA *addr, socklen_t addrlen);\n\nRecall: typedef struct sockaddr SA;\n\n\u2022 Process can read bytes that arrive on the connection whose\nendpoint is addr by reading from descriptor sockfd\n\u2022 Similarly, writes to sockfd are transferred along connection\nwhose endpoint is addr\nBest practice is to use getaddrinfo to supply the arguments\naddr and addrlen.\n\n\fSockets Interface\n\nClient\n\nServer\n\ngetaddrinfo\n\ngetaddrinfo\n\nSA list\n\nSA list\n\nsocket\n\nsocket\n\nopen_listenfd\n\nlistenfd\n\nclientfd\nopen_clientfd\n\nbind\n\nlistenfd <-> SA\nlisten\n\nconnect\n\nClient /\nServer\nSession\n\nConnection\nrequest\n\naccept\n\nwrite\n\nread\n\nread\n\nwrite\n\nclose\n\nEOF\n\nread\n\nclose\n\nAwait connection\nrequest from\nnext client\n\n\fSockets Interface: listen\n\u2022 By default, kernel assumes that descriptor from socket\nfunction is an active socket that will be on the client\nend of a connection.\n\u2022 A server calls the listen function to tell the kernel that a\ndescriptor will be used by a server rather than a client:\nint listen(int sockfd, int backlog);\n\n\u2022 Converts sockfd from an active socket to a listening\nsocket that can accept connection requests from\nclients.\n\u2022 backlog is a hint about the number of outstanding\nconnection requests that the kernel should queue up\nbefore starting to refuse requests.\n\n\fSockets Interface\nClient\n\nServer\n\ngetaddrinfo\n\ngetaddrinfo\n\nSA list\n\nSA list\n\nsocket\n\nsocket\n\nopen_listenfd\n\nlistenfd\n\nclientfd\nopen_clientfd\n\nbind\n\nlistenfd <-> SA\nlisten\n\nconnect\n\nClient /\nServer\nSession\n\nConnection\nrequest\n\nlistening listenfd\naccept\n\nwrite\n\nread\n\nread\n\nwrite\n\nclose\n\nEOF\n\nrio_readlineb\n\nclose\n\nAwait connection\nrequest from\nnext client\n\n\fSockets Interface: accept\n\u2022 Servers wait for connection requests from clients by\ncalling accept:\nint accept(int listenfd, SA *addr, int *addrlen);\n\n\u2022 Waits for connection request to arrive on the\nconnection bound to listenfd, then fills in\nclient\u2019s socket address in addr and size of the\nsocket address in addrlen.\n\u2022 Returns a connected descriptor that can be used to\ncommunicate with the client via Unix I/O routines.\n\n\fSockets Interface\nClient\n\nServer\n\ngetaddrinfo\n\ngetaddrinfo\n\nSA list\n\nSA list\n\nsocket\n\nsocket\n\nopen_listenfd\n\nlistenfd\n\nclientfd\nopen_clientfd\n\nbind\n\nlistenfd <-> SA\nlisten\n\nconnect\n\nClient /\nServer\nSession\n\nConnection\nrequest\n\nlistening listenfd\naccept\n\nwrite\n\nread\n\nread\n\nwrite\n\nclose\n\nEOF\n\nread\n\nclose\n\nAwait connection\nrequest from\nnext client\n\n\fSockets Interface: connect\n\u2022 A client establishes a connection with a server by calling\nconnect:\nint connect(int clientfd, SA *addr, socklen_t addrlen);\n\n\u2022 Attempts to establish a connection with server at socket\naddress addr\n\u2022 If successful, then clientfd is now ready for reading and writing.\n\u2022 Resulting connection is characterized by socket pair\n(x:y, addr.sin_addr:addr.sin_port)\n\u2022 x is client address\n\u2022 y is ephemeral port that uniquely identifies client process on\nclient host\n\nBest practice is to use getaddrinfo to supply the\n\n\fSockets Interface\nClient\n\nServer\n\ngetaddrinfo\n\ngetaddrinfo\n\nSA list\n\nSA list\n\nsocket\n\nsocket\n\nopen_listenfd\n\nlistenfd\n\nclientfd\nopen_clientfd\n\nbind\n\nlistenfd <-> SA\nlisten\n\nconnect\n\nConnection\nrequest\n\nlistening listenfd\naccept\n\nconnected (to SA) clientfd\nClient /\nServer\nSession\n\nconnected connfd\n\nwrite\n\nread\n\nread\n\nwrite\n\nclose\n\nEOF\n\nrio_readlineb\n\nclose\n\nAwait connection\nrequest from\nnext client\n\n\fSockets Interface\nClient\n\nServer\n\ngetaddrinfo\n\ngetaddrinfo\n\nsocket\n\nsocket\n\nopen_listenfd\nopen_clientfd\n\nbind\n\nlisten\n\nConnection\nrequest\n\nClient /\nServer\nSession\n\nconnect\n\naccept\n\nwrite\n\nread\n\nread\n\nwrite\n\nclose\n\nEOF\n\nread\n\nclose\n\nAwait connection\nrequest from\nnext client\n\n\fSockets Helper: open_clientfd\n\u2022 Establish a connection with a server\nint open_clientfd(char *hostname, char *port) {\nint clientfd;\nstruct addrinfo hints, *listp, *p;\n/* Get a list of potential server addresses */\nmemset(&hints, 0, sizeof(struct addrinfo));\nhints.ai_socktype = SOCK_STREAM; /* Open a connection */\nhints.ai_flags = AI_NUMERICSERV; /* \u2026using numeric port arg. */\nhints.ai_flags |= AI_ADDRCONFIG; /* Recommended for connections */\ngetaddrinfo(hostname, port, &hints, &listp);\n\ncsapp.c\n\n\fgetaddrinfo Linked List\nresult\n\naddrinfo structs\nai_canonname\nai_addr\nai_next\n\nSocket address structs\n\nNULL\nai_addr\nai_next\n\nNULL\nai_addr\nNULL\n\n\u2022 Clients: walk this list, trying each socket address in turn,\nuntil the calls to socket and connect succeed.\n\u2022 Servers: walk the list until calls to socket and bind\nsucceed.\n\n\fSockets Helper: open_clientfd (cont)\n/* Walk the list for one that we can successfully connect to */\nfor (p = listp; p; p = p->ai_next) {\n/* Create a socket descriptor */\nif ((clientfd = socket(p->ai_family, p->ai_socktype,\np->ai_protocol)) < 0)\ncontinue; /* Socket failed, try the next */\n/* Connect to the server */\nif (connect(clientfd, p->ai_addr, p->ai_addrlen) != -1)\nbreak; /* Success */\nclose(clientfd); /* Connect failed, try another */\n}\n/* Clean up */\nfreeaddrinfo(listp);\nif (!p) /* All connects failed */\nreturn -1;\nelse\n/* The last connect succeeded */\nreturn clientfd;\n}\n\ncsapp.c\n\n\fSockets Interface\nClient\n\nServer\n\ngetaddrinfo\n\ngetaddrinfo\n\nsocket\n\nsocket\n\nopen_listenfd\nopen_clientfd\n\nbind\n\nlisten\n\nconnect\n\nClient /\nServer\nSession\n\nConnection\nrequest\n\naccept\n\nwrite\n\nread\n\nread\n\nwrite\n\nclose\n\nEOF\n\nread\n\nclose\n\nAwait connection\nrequest from\nnext client\n\n\fSockets Helper: open_listenfd\n\u2022 Create a listening descriptor that can be used to\naccept connection requests from clients.\nint open_listenfd(char *port)\n{\nstruct addrinfo hints, *listp, *p;\nint listenfd, optval=1;\n/* Get a list of potential server addresses */\nmemset(&hints, 0, sizeof(struct addrinfo));\nhints.ai_socktype = SOCK_STREAM;\n/* Accept connect. */\nhints.ai_flags = AI_PASSIVE | AI_ADDRCONFIG; /* \u2026on any IP addr */\nhints.ai_flags |= AI_NUMERICSERV;\n/* \u2026using port no. */\ngetaddrinfo(NULL, port, &hints, &listp);\n\ncsapp.c\n\n\fSockets Helper: open_listenfd (cont)\n/* Walk the list for one that we can bind to */\nfor (p = listp; p; p = p->ai_next) {\n/* Create a socket descriptor */\nif ((listenfd = socket(p->ai_family, p->ai_socktype,\np->ai_protocol)) < 0)\ncontinue; /* Socket failed, try the next */\n/* Eliminates \"Address already in use\" error from bind */\nsetsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR,\n(const void *)&optval , sizeof(int));\n/* Bind the descriptor to the address */\nif (bind(listenfd, p->ai_addr, p->ai_addrlen) == 0)\nbreak; /* Success */\nclose(listenfd); /* Bind failed, try the next */\n}\n\ncsapp.c\n\n\fSockets Helper: open_listenfd (cont)\n/* Clean up */\nfreeaddrinfo(listp);\nif (!p) /* No address worked */\nreturn -1;\n/* Make it a listening socket ready to accept conn. requests */\nif (listen(listenfd, LISTENQ) < 0) {\nclose(listenfd);\nreturn -1;\n}\nreturn listenfd;\n\ncsapp.c\n\n}\n\n\u00a2\n\nKey point: open_clientfd and open_listenfd are\nboth independent of any particular version of IP.\n\n\fCase Study\nTiny Web Server\n\n\fTiny Web Server\n\u2022 Tiny Web server described in textbook (CS:APP)\n\u2022 Tiny is a sequential Web server\n\u2022 Serves static and dynamic content to real browsers\n\u2022 text files, HTML files, GIF, PNG, and JPEG images\n\n\u2022 239 lines of commented C code\n\u2022 Not as complete or robust as a real Web server\n\u2022 You can break it with poorly-formed HTTP\nrequests (e.g., terminate lines with \u201c\\n\u201d instead\nof \u201c\\r\\n\u201d)\n\n\fTiny Operation\n\u2022 Accept connection from client\n\u2022 Read request from client (via connected socket)\n\u2022 Split into <method> <uri> <version>\n\u2022 If method not GET, then return error\n\n\u2022 If URI contains \u201ccgi-bin\u201d then serve dynamic content\n\u2022 (Would do wrong thing if had file \u201cabcgi-bingo.html\u201d)\n\u2022 Fork process to execute program\n\n\u2022 Otherwise serve static content\n\u2022 Copy file to output\n\n\fTiny Serving Static Content\nvoid serve_static(int fd, char *filename, int filesize)\n{\nint srcfd;\nchar *srcp, filetype[MAXLINE], buf[MAXBUF];\n/* Send response headers to client */\nget_filetype(filename, filetype);\nsprintf(buf, \"HTTP/1.0 200 OK\\r\\n\");\nsprintf(buf, \"%sServer: Tiny Web Server\\r\\n\", buf);\nsprintf(buf, \"%sConnection: close\\r\\n\", buf);\nsprintf(buf, \"%sContent-length: %d\\r\\n\", buf, filesize);\nsprintf(buf, \"%sContent-type: %s\\r\\n\\r\\n\", buf, filetype);\nwrite(fd, buf, strlen(buf));\n/* Send response body to client */\nsrcfd = open(filename, O_RDONLY, 0);\nsrcp = mmap(0, filesize, PROT_READ, MAP_PRIVATE, srcfd, 0);\nclose(srcfd);\nwrite(fd, srcp, filesize);\nmunmap(srcp, filesize);\n}\n\ntiny.c\n\n\fServing Dynamic Content\n\u2022 Client sends request to\nserver\n\nGET /cgi-bin/env.pl HTTP/1.1\nClient\n\n\u2022 If request URI contains the\nstring \u201c/cgi-bin\u201d, the\nTiny server assumes that\nthe request is for dynamic\ncontent\n\nServer\n\n\fServing Dynamic Content (cont)\n\n\u2022 The server creates a child\nprocess and runs the\nprogram identified by the\nURI in that process\n\nClient\n\nServer\nfork/exec\nenv.pl\n\n\fServing Dynamic Content (cont)\n\n\u2022 The child runs and\ngenerates the dynamic\ncontent\n\u2022 The server captures the\ncontent of the child and\nforwards it without\nmodification to the client\n\nClient\n\nContent\n\nServer\nContent\nenv.pl\n\n\fIssues in Serving Dynamic Content\n\u2022 How does the client pass program\narguments to the server?\nClient\n\u2022 How does the server pass these\narguments to the child?\n\u2022 How does the server pass other\ninfo relevant to the request to the\nchild?\n\u2022 How does the server capture the\ncontent produced by the child?\n\u2022 These issues are addressed by the\nCommon Gateway Interface (CGI)\nspecification.\n\nRequest\nContent\nContent\n\nServer\nCreate\nenv.pl\n\n\fCGI\n\u2022 Because the children are written according to the CGI spec, they are often\ncalled CGI programs.\n\u2022 However, CGI really defines a simple standard for transferring information\nbetween the client (browser), the server, and the child process.\n\u2022 CGI is the original standard for generating dynamic content. Has been\nlargely replaced by other, faster techniques:\n\u2022 E.g., fastCGI, Apache modules, Java servlets, Rails controllers\n\u2022 Avoid having to create process on the fly (expensive and slow).\n\n\fThe add.com Experience\nhost\n\nport\n\nCGI program\narguments\n\nOutput page\n\n\fServing Dynamic Content With GET\n\u2022 Question: How does the client pass arguments to the\nserver?\n\u2022 Answer: The arguments are appended to the URI\n\u2022 Can be encoded directly in a URL typed to a browser\nor a URL in an HTML link\n\u2022 http://add.com/cgi-bin/adder?15213&18213\n\u2022 adder is the CGI program on the server that will do the\naddition.\n\u2022 argument list starts with \u201c?\u201d\n\u2022 arguments separated by \u201c&\u201d\n\u2022 spaces represented by \u201c+\u201d or \u201c%20\u201d\n\n\fServing Dynamic Content With GET\n\u2022 URL suffix:\n\u2022 cgi-bin/adder?15213&18213\n\n\u2022 Result displayed on browser:\nWelcome to add.com: THE Internet addition portal.\nThe answer is: 15213 + 18213 = 33426\nThanks for visiting!\n\n\fServing Dynamic Content With GET\n\u2022 Question: How does the server pass these\narguments to the child?\n\u2022 Answer: In environment variable QUERY_STRING\n\u2022 A single string containing everything after the \u201c?\u201d\n\u2022 For add: QUERY_STRING = \u201c15213&18213\u201d\n/* Extract the two arguments */\nif ((buf = getenv(\"QUERY_STRING\")) != NULL) {\np = strchr(buf, '&');\n*p = '\\0';\nstrcpy(arg1, buf);\nstrcpy(arg2, p+1);\nn1 = atoi(arg1);\nn2 = atoi(arg2);\n}\nadder.c\n\n\fServing Dynamic Content with GET\n\u2022 Question: How does the server capture the content produced by the child?\n\u2022 Answer: The child generates its output on stdout. Server uses dup2 to\nredirect stdout to its connected socket.\nvoid serve_dynamic(int fd, char *filename, char *cgiargs)\n{\nchar buf[MAXLINE], *emptylist[] = { NULL };\n/* Return first part of HTTP response */\nsprintf(buf, \"HTTP/1.0 200 OK\\r\\n\");\nRio_writen(fd, buf, strlen(buf));\nsprintf(buf, \"Server: Tiny Web Server\\r\\n\");\nRio_writen(fd, buf, strlen(buf));\nif (Fork() == 0) { /* Child */\n/* Real server would set all CGI vars here */\nsetenv(\"QUERY_STRING\", cgiargs, 1);\nDup2(fd, STDOUT_FILENO);\n/* Redirect stdout to client */\nExecve(filename, emptylist, environ); /* Run CGI program */\n}\nWait(NULL); /* Parent waits for and reaps child */\n}\n\ntiny.c\n\n\fServing Dynamic Content with GET\n\u00a2\n\nNotice that only the CGI child process knows the content\ntype and length, so it must generate those headers.\n\n/* Make the response body */\nsprintf(content, \"Welcome to add.com: \");\nsprintf(content, \"%sTHE Internet addition portal.\\r\\n<p>\", content);\nsprintf(content, \"%sThe answer is: %d + %d = %d\\r\\n<p>\",\ncontent, n1, n2, n1 + n2);\nsprintf(content, \"%sThanks for visiting!\\r\\n\", content);\n/* Generate the HTTP response */\nprintf(\"Content-length: %d\\r\\n\", (int)strlen(content));\nprintf(\"Content-type: text/html\\r\\n\\r\\n\");\nprintf(\"%s\", content);\nfflush(stdout);\nexit(0);\n\nadder.c\n\n\fServing Dynamic Content With GET\nbash:makoshark> telnet whaleshark.ics.cs.cmu.edu 15213\nTrying 128.2.210.175...\nConnected to whaleshark.ics.cs.cmu.edu (128.2.210.175).\nEscape character is '^]'.\nGET /cgi-bin/adder?15213&18213 HTTP/1.0\n\nHTTP request sent by client\n\nHTTP/1.0 200 OK\nServer: Tiny Web Server\nConnection: close\nContent-length: 117\nContent-type: text/html\n\nHTTP response generated\nby the server\n\nHTTP response generated\nWelcome to add.com: THE Internet addition portal. by the CGI program\n<p>The answer is: 15213 + 18213 = 33426\n<p>Thanks for visiting!\nConnection closed by foreign host.\nbash:makoshark>\n\n\fFor More Information\n\u2022 W. Richard Stevens et. al. \u201cUnix Network\nProgramming: The Sockets Networking API\u201d,\nVolume 1, Third Edition, Prentice Hall, 2003\n\u2022 THE network programming bible.\n\n\u2022 Michael Kerrisk, \u201cThe Linux Programming\nInterface\u201d, No Starch Press, 2010\n\u2022 THE Linux programming bible.\n\n\u2022 Code examples\n\u2022 csapp.{.c,h}, hostinfo.c, echoclient.c, echoserveri.c,\ntiny.c, adder.c\n\u2022 You can use any of this code in your assignments.\n\n\fBONUS\nSLIDES\nThe following slides are for those curious.\nYou will NOT be expected to know this material.\n\n\fLowest Level: Ethernet Segment\nhost\n100 Mb/s\n\nhost\nhub\n\nhost\n100 Mb/s\nport\n\n\u2022 Ethernet segment consists of a collection of hosts\nconnected by wires (twisted pairs) to a hub\n\u2022 Spans room or floor in a building\n\u2022 Operation\n\u2022 Each Ethernet adapter has a unique 48-bit address (MAC address)\n\n\u2022 E.g., 00:16:ea:e3:54:e6\n\n\u2022 Hosts send bits to any other host in chunks called frames\n\u2022 Hub slavishly copies each bit from each port to every other port\n\u2022 Every host sees every bit\n[Note: Hubs are obsolete. Bridges (switches, routers) became cheap enough to replace them]\n\n\fNext Level: Bridged Ethernet Segment\nA\nhost\n\nhost\nhub\n\nB\nhost\n100 Mb/s\n\nhost\nX\nbridge\n\n100 Mb/s\n\n1 Gb/s\nhub\nhost\n\nhost\n\n100 Mb/s\n\nbridge\n\n100 Mb/s\n\nY\nhost\n\nhost\n\nhub\n\nhost\n\nhost\n\nhub\nhost\n\nhost\nC\n\n\u2022 Spans building or campus\n\u2022 Bridges cleverly learn which hosts are reachable from which\nports and then selectively copy frames from port to port\n\n\fConceptual View of LANs\n\u2022 For simplicity, hubs, bridges, and wires are often shown as a collection of\nhosts attached to a single wire:\n\nhost\n\nhost\n\n...\n\nhost\n\n\fNext Level: internets\n\u2022 Multiple incompatible LANs can be physically connected by\nspecialized computers called routers\n\u2022 The connected networks are called an internet (lower case)\n\nhost\n\nhost ...\n\nhost\n\nhost ...\n\nhost\n\nLAN 1\n\nhost\nLAN 2\n\nrouter\n\nWAN\n\nrouter\n\nWAN\n\nrouter\n\nLAN 1 and LAN 2 might be completely different, totally incompatible\n(e.g., Ethernet, Fibre Channel, 802.11*, T1-links, DSL, \u2026)\n\n\fTransferring internet Data Via Encapsulation\nLAN1\n\n(1)\n\nclient\n\nserver\n\nprotocol\nsoftware\n\ndata\n\nPH\n\ndata\n\nPH\n\nLAN1\nadapter\n\nPH: internet packet header\nFH: LAN frame header\n\nLAN1\nadapter\ndata\n\n(8)\n\ndata\n\n(7)\n\ndata\n\nPH\n\nFH2\n\n(6)\n\ndata\n\nPH\n\nFH2\n\nFH2\n\n(5)\n\nLAN2\nadapter\n\nRouter\n\nFH1\n\n(4)\n\nLAN2\n\nprotocol\nsoftware\n\nFH1\n\nLAN1 frame\n\n(3)\n\nHost B\n\ndata\n\ninternet packet\n(2)\n\nHost A\n\nPH\n\nLAN2\nadapter\n\nFH1\n\nLAN2 frame\ndata\n\nprotocol\nsoftware\n\nPH\n\n\fAside: IPv4 and IPv6\n\u2022 The original Internet Protocol, with its 32-bit addresses,\nis known as Internet Protocol Version 4 (IPv4)\n\u2022 1996: Internet Engineering Task Force (IETF) introduced\nInternet Protocol Version 6 (IPv6) with 128-bit\naddresses\n\u2022 Intended as the successor to IPv4\n\n\u2022 Majority of Internet traffic still carried by IPv4\nIPv6 traffic at Google\n\n\u2022 We will focus on IPv4, but will show you how to write\nnetworking code that is protocol-independent.\n\n\fSocket Address Structures\n\u2022 Generic socket address:\n\u2022 For address arguments to connect, bind, and accept\n\u2022 Necessary only because C did not have generic (void *) pointers when the\nsockets interface was designed\n\u2022 For casting convenience, we adopt the Stevens convention:\ntypedef struct sockaddr SA;\nstruct sockaddr {\nuint16_t sa_family;\nchar\nsa_data[14];\n};\n\n/* Protocol family */\n/* Address data */\n\nsa_family\n\nFamily Specific\n\n\fSocket Address Structures\n\u2022 Internet (IPv4) specific socket address:\n\u2022 Must cast (struct sockaddr_in *) to (struct sockaddr *) for\nfunctions that take socket address arguments.\nstruct sockaddr_in {\nuint16_t\nsin_family; /* Protocol family (always AF_INET) */\nuint16_t\nsin_port;\n/* Port num in network byte order */\nstruct in_addr sin_addr;\n/* IP addr in network byte order */\nunsigned char\nsin_zero[8]; /* Pad to sizeof(struct sockaddr) */\n};\n\nsin_port\nAF_INET\n\nsin_addr\n\n0\n\n0\n\nsa_family\nsin_family\n\nFamily Specific\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n\fHost and Service Conversion: getaddrinfo\n\u2022 getaddrinfo is the modern way to convert string representations of\nhostnames, host addresses, ports, and service names to socket address\nstructures.\n\u2022 Replaces obsolete gethostbyname and getservbyname funcs.\n\n\u2022 Advantages:\n\n\u2022 Reentrant (can be safely used by threaded programs).\n\u2022 Allows us to write portable protocol-independent code\n\u2022 Works with both IPv4 and IPv6\n\n\u2022 Disadvantages\n\n\u2022 Somewhat complex\n\u2022 Fortunately, a small number of usage patterns suffice in most cases.\n\n\fHost and Service Conversion: getaddrinfo\nint getaddrinfo(const char *host,\n/* Hostname or address */\nconst char *service,\n/* Port or service name */\nconst struct addrinfo *hints,/* Input parameters */\nstruct addrinfo **result);\n/* Output linked list */\nvoid freeaddrinfo(struct addrinfo *result);\n\n/* Free linked list */\n\nconst char *gai_strerror(int errcode);\n\n/* Return error msg */\n\n\u2022 Given host and service, getaddrinfo returns result that points to a linked list\nof addrinfo structs, each of which points to a corresponding socket address struct,\nand which contains arguments for the sockets interface functions.\n\u2022 Helper functions:\n\u2022 freeadderinfo frees the entire linked list.\n\u2022 gai_strerror converts error code to an error message.\n\n\fLinked List Returned by getaddrinfo\nresult\n\naddrinfo structs\nai_canonname\nai_addr\nai_next\n\nSocket address structs\n\nNULL\nai_addr\nai_next\n\nNULL\nai_addr\nNULL\n\n\u2022 Clients: walk this list, trying each socket address in turn, until the calls\nto socket and connect succeed.\n\u2022 Servers: walk the list until calls to socket and bind succeed.\n\n\faddrinfo Struct\nstruct addrinfo {\nint\nai_flags;\n/* Hints argument flags */\nint\nai_family;\n/* First arg to socket function */\nint\nai_socktype; /* Second arg to socket function */\nint\nai_protocol; /* Third arg to socket function */\nchar\n*ai_canonname; /* Canonical host name */\nsize_t\nai_addrlen;\n/* Size of ai_addr struct */\nstruct sockaddr *ai_addr;\n/* Ptr to socket address structure */\nstruct addrinfo *ai_next;\n/* Ptr to next item in linked list */\n};\n\n\u2022 Each addrinfo struct returned by getaddrinfo contains\narguments that can be passed directly to socket\nfunction.\n\u2022 Also points to a socket address struct that can be\npassed directly to connect and bind functions.\n\n\fHost and Service Conversion: getnameinfo\n\u2022 getnameinfo is the inverse of getaddrinfo, converting a socket address\nto the corresponding host and service.\n\u2022 Replaces obsolete gethostbyaddr and getservbyport funcs.\n\u2022 Reentrant and protocol independent.\n\nint getnameinfo(const SA *sa, socklen_t salen, /* In: socket addr */\nchar *host, size_t hostlen,\n/* Out: host */\nchar *serv, size_t servlen,\n/* Out: service */\nint flags);\n/* optional flags */\n\n\fConversion Example (writing our own nslookup)\nint main(int argc, char **argv)\n{\nstruct addrinfo *p, *listp, hints;\nchar buf[MAXLINE];\nint rc, flags;\n/* Get a list of addrinfo records */\nmemset(&hints, 0, sizeof(struct addrinfo));\n// hints.ai_family = AF_INET;\n/* IPv4 only */\nhints.ai_socktype = SOCK_STREAM; /* Connections only */\nif ((rc = getaddrinfo(argv[1], NULL, &hints, &listp)) != 0) {\nfprintf(stderr, \"getaddrinfo error: %s\\n\", gai_strerror(rc));\nexit(1);\n}\n\nhostinfo.c\n\n\fConversion Example (cont)\n\n/* Walk the list and display each IP address */\nflags = NI_NUMERICHOST; /* Display address instead of name */\nfor (p = listp; p; p = p->ai_next) {\ngetnameinfo(p->ai_addr, p->ai_addrlen,\nbuf, MAXLINE, NULL, 0, flags);\nprintf(\"%s\\n\", buf);\n}\n/* Clean up */\nfreeaddrinfo(listp);\nexit(0);\n}\n\nhostinfo.c\n\n\fRunning hostinfo\nwhaleshark> ./hostinfo localhost\n127.0.0.1\nwhaleshark> ./hostinfo whaleshark.ics.cs.cmu.edu\n128.2.210.175\nwhaleshark> ./hostinfo twitter.com\n199.16.156.230\n199.16.156.38\n199.16.156.102\n199.16.156.198\nwhaleshark> ./hostinfo google.com\n172.217.15.110\n2607:f8b0:4004:802::200e\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}