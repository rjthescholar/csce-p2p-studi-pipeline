{"id": 255, "segment": "unlabeled", "course": "cs1502", "lec": "lec09_turing_machine_01", "text": "Turing Machine 01\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fHuman Computer\nImagine a human computer working with a pencil and paper:\nThe only things written on the paper are symbols from some\nfixed finite alphabet\nEach step taken by the computer depends only on the symbol\nhe/she is currently examining and on his \u201cstate of mind\u201d at\nthe time\nHis state of mind may change as a result of his examining\ndifferent symbols, only a finite number of distinct states of\nmind are possible\n\nThis sounds like a finite-state machine that has its input\nstring written on the paper\nPrimitive Steps of Human Computation:\nExamining an individual symbol on the paper\nErasing a symbol or replacing it by another\nTransferring attention from one symbol to another nearby\nsymbol\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fTuring Machines\nYou can think of a Turing machine a finite state machine\nwith unlimited amount of memory\nControl\n\n0\n\n1\n\n1\n\n0\n\n1\n\n0\n\n0\n\n1\n\n0\n\nTape\n\nA Turing machine has the following:\nA control (state diagram/transition functions)\nAn infinite long tape\nA tape head that can move around on the tape\nA TM can read input symbols from its tape\nA TM can write output symbols to its tape\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fTuring Machines\nAt first, tape contains the input string follows by infinite blank\n(t) symbols\nExample: Input: 101\n1\n\n0\n\n1\n\nExample: Input: 011010010\n0\n\n1\n\n1\n\n0\n\n1\n\n0\n\n0\n\n1\n\n0\n\nExample: Input: \u03b5\n\nThe machine can store information by writing symbols onto\nthe tape\nThe output of a machine is either accept or reject\nOutput symbols/strings can also be on the tape\n\nA Turing machine may run forever\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fTuring Machine\nControl\n\na\n\n1\n\n2\n\n3\n\n4\n5\n\nb\n\na\n\nb\n\nA Turing machine can read a symbol from the tape under the\ntape head\nA Turing machine can write a symbol to the tape under the\ntape head\nThe tape head can move to the left and to the right one\nsquare at a time\nThe tape is infinite\nThe special states for rejecting and accepting take effect\nimmediately (qreject and qaccept )\nUnlike DFA that needs to process the last input symbol before\naccepting or rejecting an input string\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fExample\n\nLet \u03a3 = {0, 1, #}\nConsider the language B = {w#w | w \u2208 {0, 1}\u2217 }\nExample of strings in B are\n01101#01101\n#\n01#01\n\nThis language is not regular\nNeed an infinite states to to remember all symbols in w\nWe can use the Pumping lemma to prove that it is not regular\n\nIf the number of # symbol in a string is not exactly 1, the\nstring is not in the language B\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fExample\n\nLet \u03a3 = {0, 1, #} and B = {w#w | w \u2208 {0, 1}\u2217 }\nImaging what would you do if I give you a very long piece of\npaper and it contains a string of the form x#y where\nx, y \u2208 {0, 1}\u2217 and they are so long that you cannot remember\nall its symbols\nOne way is to go back and forth across the # and compare\nsymbols at the same position one symbol at a time\nYou may need to cross off those that have been compared\n0110110101011010111010100101011001100101010#0110110101011010111010100101011001100101010\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fFormal Definition of a Turing Machine\n\nA Turing machine is a 7-tuple, (Q, \u03a3, \u0393, \u03b4, q0 , qaccept , qreject ),\nwhere Q, \u03a3, \u0393 are all finite sets and\n1\n\nQ is a set of states,\n\n2\n\n\u03a3 is the input alphabet not containing the blank symbol t,\n\n3\n\n\u0393 is the tape alphabet, where t \u2208 \u0393 and \u03a3 \u2286 \u0393,\n\n4\n\n\u03b4 : Q \u00d7 \u0393 \u2192 Q \u00d7 \u0393 \u00d7 {L, R} is the transition function,\n\n5\n\nq0 \u2208 Q is the start state,\n\n6\n\nqaccept \u2208 Q is the accept state, and\n\n7\n\nqreject \u2208 Q is the reject state.\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fTransition Function of a Turing Machine\n\nThe transition function of a TM is defined as:\n\u03b4 : Q \u00d7 \u0393 \u2192 Q \u00d7 \u0393 \u00d7 {L, R}\nAn assignment \u03b4(q, a) = (r, b, L) means if the machine is at\nstate q and the tape head is over a square containing a, the\nmachine write symbol b (replacing a), change its state to r\nand move the tape head to the left one square\nThis transition can be represented in a state diagram as shown\nbelow:\na \u2192 b, L\nq\nr\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fComputation of a Turing Machine\n\nThe input string w = w1 w2 . . . wn \u2208 \u03a3\u2217 is on the leftmost n\nsquare of the tape and the rest are filled with blank symbols\nThe tape head starts at the leftmost square of the tape\nThe machine processes input according to its transition\nfunction\nIf the tape head is at the leftmost square and the transition\nfunction indicates L, the tape head stays at the same place\nThe machine continues until it enter the qaccept or qreject state\nThe machine may run forever\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fTracing a Turing Machine\nTo trace whether a DFA accept or reject a string is easy\nTo trace whether an NFA accept or reject a string is harder\nAn NFA can split into multiple copies\nEach copy has its own current state\nWe use a computational tree to keep track of all copies\n\nTo trace whether a TM accept or reject a string is even harder\nWe need to keep track or the current state (similar to DFA or\nNFA)\nWe also need to keep track of the content of the tape\nThe content of the tape is changed over time (TM can write\nonto the tape)\n\nWe also need to keep track of the location of its tape head\nNeed to know the symbol under the tape head\nThe tape head needs to move to either left or right direction\nat every step\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fConfiguration\n\nWhen a machine process an alphabet, three things change:\nthe state of the machine,\nthe content of the tape, and\nthe location of the tape head\n\nThe above three items can be represented by a configuration\nA configuration is in the form of u q v\nu and v are strings that can be empty\nq is a state that represents the current state of TM\nThe content of the tape is the string uv\nThe tape head is on the first alphabet of the string v\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fConfiguration (Examples)\n\nExample: The configuration 1011q7 01111 corresponds to a\nmachine as shown below:\nq7\n1\n\n0\n\n1\n\n1\n\n0\n\n1\n\n1\n\n1\n\n1\n\nExample: The configuration q3 101101111 corresponds to a\nmachine as shown below:\nq3\n1\n\n0\n\n1\n\n1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n\n1\n\n1\n\n1\n\nTuring Machine 01\n\n1\n\n\fConfiguration (Examples)\n\nExample: The configuration 10110111q8 1 corresponds to a\nmachine as shown below:\nq8\n1\n\n0\n\n1\n\n1\n\n0\n\n1\n\n1\n\n1\n\n1\n\nExample: The configuration 101101111q4 corresponds to a\nmachine as shown below:\nq4\n1\n\n0\n\n1\n\n1\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n0\n\n1\n\n1\n\n1\n\nTuring Machine 01\n\n1\n\n\fConfiguration\nWe say that the configuration C1 yields configuration C2 if\nthe machine can legally go from C1 to C2 in one step\nFor example, suppose a TM has the following transition\nfunction:\n\u03b4(qi , 0) = (qj , 1, L)\nConsider the configuration 010010qi 0101\nFor the above configuration, u = 010010, q = qi , and v = 0101\nThe current state is qi\nThe content of the tape is 0100100101\nThe tape head is on top of the symbol 0 (the first symbol of v)\n\nAccording to the above transition function, the next\nconfiguration would be\n\n01001qj 01101\nWe says that the 010010qi 0101 yields 01001qj 01101\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fConfiguration\n\nFormally:\nLet a, b, c \u2208 \u0393 and u, v \u2208 \u0393\u2217\na, b, and c are symbols\nu and v are strings over \u0393\nBy concatenating the symbol a to the end of the string u, we\nget the string ua\n\nWe say that\nua qi bv\n\nyields\n\nu qj acv\n\nif \u03b4(qi , b) = (qj , c, L)\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fStarting Configuration\n\nGiven a string w = w0 w1 w2 . . . wn\nSuppose the start state of a TM M is q0\nWhen M is about to process the string w:\nq0\n\nw0 w1 w2\n\nwn\n\nThe starting configuration of M on input w is q0 w\nExample: The starting configuration of M on input 01101 will\nbe q0 01101\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fConfiguration\n\nIf the state in a configuration is qaccept , the configuration is\ncalled accepting configuration\n0101qaccept 101\nqaccept 1111\n\nSimilarly, if the state in a configuration is qreject , it is called\nrejecting configuration\nqreject 010100\n011qreject 01\n\nOnce a machine yields either the accepting or rejecting\nconfiguration, the machine will not yield any other\nconfiguration (halting configuration).\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fLanguage of a TM\nA machine M accepts a string w if the sequence of\nconfiguration C1 , C2 , . . . Ck exists, where\n1\n2\n3\n\nC1 is the starting configuration of M on input w,\neach Ci yields Cj , and\nCk is an accepting configuration\n\nThe set of all strings A accepted by M is the language of M\nM recognizes A or\nL(M ) = A\n\nNote: If L(M ) = A, it does not mean that M rejects all\nstrings that are not in the language A\nGiven a string s 6\u2208 A, M may loop indefinitely on input s\nUnlike a DFA D, if L(D) = B, D rejects all strings not in the\nlanguage D\nDFA D cannot loop indefinitely on any string\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\fLanguage of a TM\nA language B is called Turing-recognizable if some Turing\nmachine recognize it\nSometimes we call B is recognizable\n\nGiven a string w and a TM M there are three possibilities:\n1\n2\n3\n\nM accepts w\nM rejects w\nM loops indefinitely on input w\n\nTuring machines that never loop indefinitely are called\ndeciders\nThese type of TMs will always halt on all inputs\n\nA decider that recognizes a language is said to decide that\nlanguage\nA language is called Turing-decidable if some Turing\nmachines decide it\nSuppose TM M is a decider and L(M ) = C, we say that\nM decides C\nC is decidable\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nTuring Machine 01\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}