{"id": 264, "segment": "unlabeled", "course": "cs1502", "lec": "lec21_reducibility_04", "text": "Reducibility 04\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fUndecidability Proofs\n\nSo far, we have only one undecidable language:\nATM = {hM, wi | M is a TM that accepts w}\nThis is a fact since we already prove it\nGiven a language A, how to prove that it is undecidable?\nFirst, we are going to use the proof by contradiction\nAssume that A is decidable\nShow that since A is decidable, ATM is decidable\nContradict with the fact that ATM is undecidable\nA is undecidable\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fHalting Problem\nFrom a programmer point of view:\nGiven a method foo and an input x, there is no algorithm that\ncan check whether foo will halt on input x\nFor some methods, you may be able to spot that it will halt or\nwill not halt but not all\nBut there are infinite number of methods and infinite number\nof inputs\n\nFrom the computation theory point of view:\nGiven a Turing machine M and input string w, there is no\nalgorithm that can check whether M will halt on input w\nFormally,\nHALT TM = {hM, wi | M is a TM that halts on input w}\n\nTo prove halting problem, we just need to show that\nHALT TM is undecidable\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fHALT TM\nFirst, assume that HALT TM is decidable\nNext, we need to show that since HALT TM is decidable ATM\nis decidable\nWe need to take the advantage of HALT TM being decidable\nto help us decide ATM\n\nWhat does it mean when HALT TM is decidable?\nThere exists a TM R that decides HALT TM\n\nWhat TM R (a decider for HALT TM ) can do?\nIf we run R on input hM, wi where M is a TM and w is a\nstring, R will either accept or reject hM, wi\nIf R accepts hM, wi\n\nhM, wi \u2208 HALT TM\nM halts on input w\nhM, wi 6\u2208 HALT TM\nIf R rejects hM, wi\nM does not halts on input w\n\nCan R loops in definitely on input hM, wi?\nNo because R is a decider\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fHALT TM\nWhen HALT TM is decidable, given a TM M 0 and a string w0 ,\nwe know whether M 0 halts on input w0\nBy running R on input hM 0 , w0 i\nIf R accepts hM 0 , w0 i\nhM 0 , w0 i \u2208 HALT TM\nM 0 halts on input w0\n0\n0\nIf R rejects hM , w i\nhM 0 , w0 i 6\u2208 HALT TM\n0\nM does not halt on input w0\n\nWe need to use TM R to help us decide ATM\nBut what does it mean when ATM is undecidable?\nGiven a TM M and a string w, we have no idea whether\nM accepts w or\nM does not accepts w\n\nIf we can distinguish between M accepts w and M does not\naccept w, ATM is decidable\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fHALT TM\nWhat if we can construct TM M 0 and w0 (from the TM M\nand the string w) such that\nIf M accepts w, M 0 halts on input w0\nIf M does not accept w, M 0 does not halt on input w0\n\nand give hM 0 , w0 i to TM R?\nBy running R on the above input hM 0 , w0 i:\nIf R accepts hM 0 , w0 i:\nR accepts hM 0 , w0 i\nhM 0 , w0 i \u2208 HALT TM\n0\n0\nhM , w i \u2208 HALT TM\nM 0 halts on input w0\n0\n0\nM halts on input w\nM accepts w\nM accepts w\nhM, wi \u2208 ATM\n\nIf R rejects hM 0 , w0 i:\nR rejects hM 0 , w0 i\nhM 0 , w0 i 6\u2208 HALT TM\n0\n0\nhM , w i 6\u2208 HALT TM\nM 0 does not halt on input w0\nM 0 does not halt on input w0\nM does not accept w\nM does not accept w\nhM, wi 6\u2208 ATM\n\nThis gives us the conclusion that ATM is decidable\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fHALT TM\n\nAgain, we need to construct TM M 0 and w0 (from the TM M\nand the string w) such that\nIf M accepts w, M 0 halts on input w0\nIf M does not accept w, M 0 does not halt on input w0\n\nHere is an example of TM M 0 :\nM 0 = \u201cOn input x:\n1\n2\n\nRun M on input w\nIf M accepts w, accept. If M rejects w, enter infinite loop.\u201d\n\nNote that there are infinite number of TMs that satisfy the\nabove specification\nLet\u2019s analyze the behavior of the above TM M 0 case-by-case\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fHALT TM\n\nThe TM M 0 :\nM 0 = \u201cOn input x:\n1\n2\n\nRun M on input w\nIf M accepts w, accept. If M rejects w, enter infinite loop.\u201d\n\nWhat if M accepts w (hM, wi \u2208 ATM )?\nM accepts w\nM 0 accepts all input strings\n0\nM 0 halts on all input strings\nM accepts all input strings\n0\nM halts on all input strings\nM 0 halts on \u03b5\n0\n0\nhM , \u03b5i \u2208 HALT TM\nM halts on \u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fHALT TM\n\nThe TM M 0 :\nM 0 = \u201cOn input x:\n1\n2\n\nRun M on input w\nIf M accepts w, accept. If M rejects w, enter infinite loop.\u201d\n\nWhat if M rejects w (hM, wi 6\u2208 ATM )?\nM rejects w\nM 0 enters infinite loop on all input strings\n0\nM 0 does not halt\nM enters infinite loop on all input strings\non all input strings\nM 0 does not halt on \u03b5\nM 0 does not halt on all input strings\n0\n0\nhM , \u03b5i 6\u2208 HALT TM\nM does not halt on \u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fHALT TM\n\nThe TM M 0 :\nM 0 = \u201cOn input x:\n1\n2\n\nRun M on input w\nIf M accepts w, accept. If M rejects w, enter infinite loop.\u201d\n\nWhat if M loops indefinitely on w (hM, wi 6\u2208 ATM )?\nM 0 loops indefinitely (in step 1)\nM loops indefinitely on w\non all input strings\nM 0 does not halt\nM 0 loops indefinitely on all input strings\non all input strings\nM 0 does not halt on all input strings\nM 0 does not halt on \u03b5\n0\n0\nhM , \u03b5i 6\u2208 HALT TM\nM does not halt on \u03b5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fHALT TM\n\nAgain, we just construct TM M 0 and w0 = \u03b5 from a TM M\nand a string w such that\nIf hM, wi \u2208 ATM , hM 0 , \u03b5i \u2208 HALT TM\nIf hM, wi 6\u2208 ATM , hM 0 , \u03b5i 6\u2208 HALT TM\n\nNow, we can simply run TM R (a decider for HALT TM to\ncheck whether hM 0 , \u03b5i is in HALT TM\nIf R accepts hM 0 , \u03b5i\nIf R rejects hM 0 , \u03b5i\n\nhM 0 , \u03b5i \u2208 HALT TM\nhM 0 , \u03b5i 6\u2208 HALT TM\n\nhM, wi \u2208 ATM\nhM, wi 6\u2208 ATM\n\nLet\u2019s see the whole proof where we construct a TM S that\ndecides ATM where\nS constructs TM M 0 as we discussed earlier and\nuses R as a helper machine to help decide ATM\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fHALT TM\nProve that HALT TM = {hM, wi | M is a TM that halts in input w} is undecidable.\nProof: Assume that HALT TM is decidable. Since HALT TM is decidable, there exists\na TM R that decides HALT TM . Let construct a TM S (to decide ATM ) as follows:\nS = \u201cOn input hM, wi where M is a TM and w is a string:\n1 Construct TM M 0 as follows:\nM 0 = \u201cOn input x:\n1 Run M on input w\n2 If M accepts w, accept. If M rejects w, enter infinite loop.\u201d\n2 Run R on input hM 0 , \u03b5i\n3 If R accepts hM 0 , \u03b5i, accept. If R rejects hM 0 , \u03b5i, reject.\u201d\nNext, we need to prove that TM S is a decider for ATM .\nProve that if hM, wi \u2208 ATM , S accepts hM, wi: Assume that hM, wi \u2208 ATM .\nSince hM, wi \u2208 ATM , M is a TM that accepts w. Since M accepts w, from the\ndefinition of TM M 0 , M 0 halts on all strings including \u03b5. Since M 0 halts on \u03b5,\nhM 0 , \u03b5i \u2208 HALT TM . Since R is a decider for HALT TM , by running R on input\nhM 0 , \u03b5i, R will accept hM 0 , \u03b5i. Since R accepts hM 0 , \u03b5i, S accepts hM, wi.\nProve that if hM, wi 6\u2208 ATM , S rejects hM, wi: Assume that hM, wi 6\u2208 ATM .\nSince hM, wi 6\u2208 ATM , M is a TM that does not accept w. Since M does not\naccept w, from the definition of TM M 0 , M 0 does not halt on all strings\nincluding \u03b5. Since M 0 does not halt on \u03b5, hM 0 , \u03b5i 6\u2208 HALT TM . Since R is a\ndecider for HALT TM , by running R on input hM 0 , \u03b5i, R will reject hM 0 , \u03b5i.\nSince R rejects hM 0 , \u03b5i, S rejects hM, wi.\nThis show that TM S is a decider for ATM . Therefore, ATM is decidable\ncontradiction. Therefore, HALT TM is undecidable.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fUndecidability\n\nLet\u2019s recap and make some notes\nTo prove that a language A is undecidable:\nAssume that A is decidable\nSince A is decidable, there exists a TM R that decides A\nNext, we try to decide ATM using R as a helper machine\nTo decide ATM , we need to know whether hM, wi \u2208 ATM\nIn other words, we need to know whether M accepts w\n\nSince R is a decider for the language A, R can tell you\nwhether a string s is in A\n\nSo, we need to construct a string s such that whether s is in\nA depending on whether M accepts w\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fUndecidability\n\nTo construct a string s such that whether s is in A depending\non whether M accepts w, there are two choices:\n1\n\nChoice #1:\nIf M accepts w, s \u2208 A\nIf M does not accept w, s 6\u2208 A\n\n2\n\nChoice #2:\nIf M accepts w, s 6\u2208 A\nIf M does not accept w, s \u2208 A\n\nWhich one?\nIt depends on the problem\nFor some problems, either choices will work\nFor some problems, only one of those choices will work\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fUndecidability\n\nFrom the previous example, we have two choices as well:\n1\n\nChoice #1:\nIf M accepts w, hM 0 , w0 i \u2208 HALT TM\nIf M does not accept w, hM 0 , w0 i 6\u2208 HALT TM\n\n2\n\nChoice #2:\nIf M accepts w, hM 0 , w0 i 6\u2208 HALT TM\nIf M does not accept w, hM 0 , w0 i \u2208 HALT TM\n\nWe picked the first choice\nIf you try, you will see that you cannot construct a TM M 0\nthat satisfies the second choice\nThe hard part is when M loops indefinitely on input w\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fETM\n\nProblem: Given a TM M , how to check whether L(M ) = \u2205?\nUnfortunately, we cannot\nNote that a TM may have a path from the start state to its\naccept state but it accepts no string\n\nFormally:\nETM = {hM i | M is a TM and L(M ) = \u2205}\nTo show that there is no algorithm that can solve the above\nproblem, we need to show that ETM is undecidable\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fETM\nAgain, for the sake of contradiction, assume that ETM is\ndecidable\nWe need to show that if ETM is decidable, ATM is decidable\n\nSince ETM is decidable, there exists a TM R that decides\nETM\nAgain, in plain English, given a TM M 0 , we know whether\nL(M 0 ) = \u2205 by simply run R on input hM 0 i\nIf R accepts hM 0 i\nIf R rejects hM 0 i\n\nhM 0 i \u2208 ETM\nhM 0 i 6\u2208 ETM\n\nL(M 0 ) = \u2205\nL(M 0 ) 6= \u2205\n\nWe are going to use the same method as in previous example:\nSince we are trying to decide ATM , we need to know whether\nM accepts w\nWe are going to construct a TM M 0 from a given TM M and\na string w such that L(M 0 ) (whether it is empty or not)\ndepends on whether M accepts w\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fETM\n\nSpecification: Construct a TM M 0 from a given TM M and\na string w such that L(M 0 ) (whether it is empty or not)\ndepends on whether M accepts w\nAccording to the above specification, we have two choices:\n1\n\nChoice #1:\nIf M accepts w, L(M 0 ) = \u2205\nIf M does not accept w, L(M 0 ) 6= \u2205\n\n2\n\nChoice #2:\nIf M accepts w, L(M 0 ) 6= \u2205\nIf M does not accept w, L(M 0 ) = \u2205\n\nIn this case, we will not be able to construct TM M 0 that\nsatisfies the first choice\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fETM\nHere is an example of TM M 0 (constructed from a TM M\nand a string w) that satisfies:\nIf M accepts w, L(M 0 ) 6= \u2205\nIf M does not accept w, L(M 0 ) = \u2205\n\nTM M 0 :\nM 0 = \u201cOn input x:\n1\n2\n\nRun M on input w\nIf M accepts w, accept. If M rejects w, reject.\u201d\n\nFrom the above TM M 0 :\nIf M accepts w, M 0 accepts all strings (L(M 0 ) 6= \u2205)\nIf M does not accepts w:\nIf M rejects w, M 0 rejects all strings (L(M 0 ) = \u2205)\nIf M loops indefinitely on input w, M 0 loops indefinitely on all\nstrings (L(M 0 ) = \u2205)\n\nNow, let\u2019s see the whole proof\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\fETM\nProve that ETM = {hM i | M is a TM and L(M ) = \u2205} is undecidable.\nProof: Assume that ETM is decidable. Since ETM is decidable, there exists a TM R\nthat decides ETM . Let construct a TM S (to decide ATM ) as follows:\nS = \u201cOn input hM, wi where M is a TM and w is a string:\n1 Construct TM M 0 as follows:\nM 0 = \u201cOn input x:\n1 Run M on input w\n2 If M accepts w, accept. If M rejects w, reject.\u201d\n2 Run R on input hM 0 i\n3 If R accepts hM 0 i, reject. If R rejects hM 0 i, accept.\u201d\nNext, we need to prove that TM S is a decider for ATM .\nProve that if hM, wi \u2208 ATM , S accepts hM, wi: Assume that hM, wi \u2208 ATM .\nSince hM, wi \u2208 ATM , M is a TM that accepts w. Since M accepts w, from the\ndefinition of TM M 0 , M 0 accepts all strings. In other words, L(M 0 ) 6= \u2205. Since\nL(M 0 ) 6= \u2205, hM 0 i 6\u2208 ETM . Since R is a decider for ETM , by running R on\ninput hM 0 i, R will reject hM 0 i. Since R rejects hM 0 i, S accepts hM, wi.\nProve that if hM, wi 6\u2208 ATM , S rejects hM, wi: Assume that hM, wi 6\u2208 ATM .\nSince hM, wi 6\u2208 ATM , M is a TM that does not accept w. Since M does not\naccept w, from the definition of TM M 0 , M 0 accepts no strings. In other words,\nL(M 0 ) = \u2205. Since L(M 0 ) = \u2205, hM 0 i \u2208 ETM . Since R is a decider for ETM , by\nrunning R on input hM 0 i, R will accept hM 0 i. Since R accepts hM 0 i, S rejects\nhM, wi.\nThis show that TM S is a decider for ATM . Therefore, ATM is decidable\ncontradiction. Therefore, ETM is undecidable.\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nReducibility 04\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}