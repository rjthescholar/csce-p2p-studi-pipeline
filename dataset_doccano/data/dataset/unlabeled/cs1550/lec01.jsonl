{"id": 230, "segment": "unlabeled", "course": "cs1550", "lec": "lec01", "text": "Introduction to Operating Systems\nCS/COE 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne \u00a92013)\n\n\fAnnouncements\n\u2022 Lab 0 due this Friday (soft deadline; not graded)\n\n\u2022 Homework 1 will be posted this Friday\n\u2022 Recitations start this week\n\u2022 VS Code setup tutorial on Piazza (also linked from\nCanvas)\n\n\u2022 Draft Slides linked from Canvas\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fAgenda\n\u2022 Main tasks of an operating system\n\n\u2022 System Calls\n\u2022 What an interrupt is\n\u2022 What happens when an interrupt occurs\n\u2022 What a system call is\n\n\u2022 How system calls implemented\n\u2022 Effect of OS structure on system calls\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fWhat is an Operating System?\nA program that acts as an intermediary between a user\nof a computer and the computer hardware\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fWhat does an OS do?\n\u2022 Manages (controls and arbitrates) resources\n\u2022 Processors, Memory, Input/output devices,\nCommunication devices, Storage, Software applications\n\u2022 Conflicting goals:\n\u2022\n\ne.g., performance vs. utilization\n\n\u2022\n\nSeparation of policy and mechansim\n\n\u2022 Provides abstractions to application programs\n\u2022 Ease of use\n\u2022 Virtualization\n\n\u2022 Protects resources\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fInterrupts\nHardware or software:\n\u2022 Hardware interrupt by one of the devices\n\u2022 Software interrupt (exception or trap):\n\u2022 Software error (e.g., division by zero)\n\u2022 Other process problems include processes trying to modify each\nother\u2019s or the operating system\u2019s memory (e.g., segmentation\nfault)\n\u2022 Request for operating system service (i.e., system call)\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fInterrupt Descriptor Table\n\u2022 Interrupt transfers control to the interrupt service\nroutine (ISR)\n\u2022 ISRs are segments of code that determine what\naction should be taken for each type of interrupt\n\u2022 part of the OS kernel\n\n\u2022 An interrupt vector contains the address of the ISR\nfor one interrupt\n\u2022 An interrupt vector table is an array of interrupt\nvectors\n\u2022 also known as interrupt descriptor table (IDT)\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fDual-mode Operation\n\u2022 Dual-mode operation allows OS to protect itself and\nother system components\n\u2022 At least two modes: user mode and kernel mode\n\u2022 Mode bit(s) provided by hardware (inside CPU registers)\n\u2022 Provides ability to distinguish when system is running user code\nor kernel code\n\u2022 Some instructions designated as privileged, only executable in\nkernel mode\n\u2022 Some memory addresses designated as privileged, only\naccessible in kernel mode\n\u2022\n\nTherefore, we get segmentation fault on null (i.e., 0) pointer dereference\n\n\u2022 Interrupts change mode to kernel\n\u2022\n\nreturn from interrupt resets mode back to user\n\n\u2022 Increasingly CPUs support multi-mode operations\n\u2022 virtual machine manager (VMM) mode for guest VMs\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fWhat happens when an interrupt occurs?\nThe CPU transitions from User Mode to Kernel Mode\n\nan interrupt\noccurs\n\nreturn from ISR\n\nexecute ISR\n\nTime\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fHow does an OS (roughly) work?\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fWhat happens on a hardware interrupt?\n6\n\n1\n\n4\n\n5\n\n9\n\n3\n\n8\n\n2\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n7\n\n\fSystem Calls\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fSystem Calls\n\u2022 Programming interface to OS services\n\u2022 Typically written in a high-level language (C or C++)\n\u2022 Mostly accessed by programs via a high-level\nApplication Programming Interface (API) rather\nthan direct system call use\n\u2022 Win32 API for Windows\n\u2022 POSIX API for POSIX-based systems (including virtually\nall versions of UNIX, Linux, and Mac OS X), and\n\u2022 Java API for the Java virtual machine (JVM)\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fSystem Call Implementation\n\u2022 Typically, there is a number associated with each system\ncall\n\u2022 Each system call has a corresponding system call\nimplementation function (part of the OS kernel)\n\u2022 System-call table indexed according to these numbers\n\u2022\n\nEach entry in the table contains the address of the\ncorresponding system call implementation function\n\n\u2022 The system call interface is the ISR corresponding to the\nsyscall software interrupt\n\u2022\n\u2022\n\u2022\n\ninvokes the intended system call in OS kernel,\npasses arguments if needed, and\nreturns status of the system call and any return values\n\n\u2022 The caller need know nothing about how the system call\nis implemented\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fAPI \u2013 System Call \u2013 OS Relationship\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fStandard C Library Example\n\u2022 C program invoking printf() library call, which calls\nwrite() system call\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fWhat happens on a syscall?\n2\n\n1\n6\n\n7\n12\n\n1 eax <-- 1\nint 64\n\n10\n\n3\n\n4\n\n11\n\n5\n\n8\n\n9\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fSystem Call Parameter Passing\n\u2022 Three general methods used to pass parameters to\nthe OS\n\u2022 Simplest: pass the parameters in registers\n\u2022\n\nIn some cases, may be more parameters than registers\n\n\u2022 Parameters stored in a block, or table, in memory, and\naddress of block passed as a parameter in a register\n\u2022 This approach taken by Linux and Solaris\n\n\u2022 Parameters placed, or pushed, onto the stack by the\nprogram and popped off the stack by the operating\nsystem\n\u2022\n\nXV6\n\n\u2022 Block and stack methods do not limit the number or\nlength of parameters being passed\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fHow to add a system call to an OS?\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fXv6 Code Walkthrough\n\u2022 IDT table initialization\n\n\u2022 Syscall table\n\u2022 How a syscall is invoked\n\u2022 Syscall implementation\n\u2022 Parameter passing into a syscall\n\u2022 In Lab 1 you will add a system call to Xv6\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fTraditional UNIX System Structure\nBeyond simple but not fully layered\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fMicrokernel System Structure\nApplication\nProgram\n\nFile\nSystem\n\nmessages\n\nInterprocess\nCommunication\n\nDevice\nDriver\n\nuser\nmode\n\nCPU\nscheduling\n\nkernel\nmode\n\nmessages\n\nmemory\nmanagment\n\nmicrokernel\n\nhardware\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}