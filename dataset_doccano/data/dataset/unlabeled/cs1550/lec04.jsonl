{"id": 209, "segment": "unlabeled", "course": "cs1550", "lec": "lec04", "text": "Introduction to Operating Systems\nCS/COE 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne \u00a92013)\n\n\fAnnouncements\n\u2022 Upcoming deadlines\n\u2022 Homework 1 is due today at 11:59 pm\n\u2022 Homework 2 is due next Monday at 11:59 pm\n\u2022 Lab 1 is due on 2/4 at 11:59 pm\n\u2022 Project 1 is due on 2/18 at 11:59 pm\n\n\u2022 TA Office hours available on the syllabus page\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n2\n\n\fPrevious Lecture \u2026\n\u2022 Busy waiting problem and how to solve it using\nsemaphores\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n3\n\n\fMuddiest Points\n\u2022\n\na little confused on the relationship between semaphores and\nspinlocks\n\n\u2022\n\nwhat\u2019s the advantage between a binary semaphore and a spinlock if\na binary semaphore can only be for one process?\n\n\u2022\n\nWhat happens to each process with each up() and down() for\nmultiple processes with varying priorities? Another walkthrough\nbasically\n\n\u2022\n\ncould you further explain how the semaphores with spinlocks still are\nable to keep their benefits?\n\u2022\n\u2022\n\nWhat is the point of having semaphores if you are going to tie them with\nspinlocks? Does that not defeat the benefits of using a semaphore?\nBy introducing a spinlock within our semaphore implementation, doesn't\nthat bring up the issue of busy waiting? Or is this not an issue because\nthe critical section is a relatively small block of code?\n\n\u2022\n\nwhat is the different between swap and test&set?\n\n\u2022\n\nDo Semaphores have the same issue with reordering instructions\nthat spinlocks have?\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n4\n\n\f\u2022\n\nMuddiest Points (2/3)\nwhere the lock() and unlock() go in the pseudo code of the spinlock in\nsemaphores example\n\u2022\n\nHow to stop the up/down from breaking (the if else thing you brought up at the\nend)\n\n\u2022\n\nfor the process list I am assuming we would use some sort of priority queue\nto sort the processes for the ProcessList?\n\n\u2022\n\nHow a spinlock is implemented in a semaphore\n\n\u2022\n\nI think the functional difference between blocking and waiting. As in, what is\nactually happening while a process is infinite looping and awaiting a lock?\nSince it's not \"blocked\", does that mean that it prevents other processes from\nrunning, or can it be context switched out like any normal process?\n\n\u2022\n\nwhich implementation is most commonly used for semaphores\n\n\u2022\n\ndifference between counting and binary semaphore (why counting would be\nused)\n\n\u2022\n\ncan the semaphore be > 0, and if so what does that mean?\n\n\u2022\n\nHow are spinlocks implemented in hardware? Are they the only locking\nmechanism implemented in hardware?\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n5\n\n\fMuddiest Points (3/3)\n\u2022\n\nHow process states are switched/clarification on\nready/waiting/running\n\n\u2022\n\nWhat does the comment above the line of assembly code mean?\n\u2022\n\nI'm curious about memory barriers. could you talk more about how to use\n_sync_synchronize() and how it works?\n\n\u2022\n\nWhere exactly the code blocks\n\n\u2022\n\nfrom the tophat question: why can down move a process into ready\n\n\u2022\n\nWhen/why is reordering instructions in a critical section beneficial?\n\n\u2022\n\nToday, We heard \"Block\" a lot but it has the same meaning\n\n\u2022\n\nImplementation of mutex vs standard semaphore\n\n\u2022\n\nWhen would you know to use a spinlock instead of a semaphore?\n\n\u2022\n\nWhy two context switches in semaphore\n\n\u2022\n\nWhat is/makes an operation atomic?\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n6\n\n\fSemaphore Usage Problem: Compromising Mutual Exclusion\n\n\u2022 Any process can up() the semaphore\n\n\u2022 Solution: A Mutex can be up()\u2019d only by the same\nprocess that down()\u2019d it\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n7\n\n\f\u2022\n\n\u2022\n\nSemaphore Usage Problem: Deadlock and Starvation\nDeadlock: two or more processes are\nwaiting indefinitely for an event that can\nonly be caused by a waiting process\n\u2022\n\nP0 gets A, needs B\n\n\u2022\n\nP1 gets B, needs A\n\n\u2022\n\nEach process waiting for the other to signal\n\nShared variables\nSemaphore A(1),B(1);\n\nStarvation: indefinite blocking\n\u2022\n\nProcess is never removed from the\nsemaphore queue in which its suspended\n\n\u2022\n\nMay be caused by ordering in queues\n(priority)\n\nProcess P0\nA.down();\nB.down();\n.\n.\n.\nB.up();\nA.up();\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\nProcess P1\nB.down();\nA.down();\n.\n.\n.\nA.up();\nB.up();\n\n8\n\n\fSemaphore Usage Problem: Priority Inversion\n\u2022 Priority inversion is still possible using semaphores\n\u2022 Slightly less likely\n\u2022 Needs at least three processes\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n9\n\n\ffork() tracing\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n10\n\n\ffork()\u2019s of fork()\u2019s\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n11\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}