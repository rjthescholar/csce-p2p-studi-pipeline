{"id": 212, "segment": "unlabeled", "course": "cs1550", "lec": "lec05", "text": "Introduction to Operating Systems\nCS/COE 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne \u00a92013)\n\n\fAnnouncements\n\u2022 Lectures and recitations are back in-person\n\n\u2022 Upcoming deadlines\n\u2022 Homework 2 is due next Monday at 11:59 pm\n\u2022 Lab 1 is due on 2/4 at 11:59 pm\n\u2022 Project 1 is due on 2/18 at 11:59 pm\n\u2022 Explained in this week\u2019s recitations\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n2\n\n\fPrevious Lecture \u2026\nThree-usage problems of Semaphores\n\u2022 compromising mutual exclusion\n\u2022 Solution: Mutex\n\n\u2022 deadlock\n\u2022 Solution: Not yet discussed\n\n\u2022 priority inversion\n\u2022 Solution: priority inheritance\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n3\n\n\fMuddiest Points (basic concepts)\n\u2022 Deadlock\n\n\u2022 mutual exclusion\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n4\n\n\fMuddiest Points (semaphore)\n\u2022 What the semaphore value means.\n\u2022 Can we see a process that utilizes a\nsemaphore/spinlock and trace it?\n\n\u2022 Where we move after down is called\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n5\n\n\fMuddiest Points (Mutex)\n\u2022 With mutex, what happens when a process tries to\nup() when it hasn't down()'d, does it skip over the\ninstruction or does it do something else?\n\u2022 how does a mutex semaphore verify that the same\nprocess that called down on it in the first place is the\none that called up on it?\n\n\u2022 Can a mutex have a negative value or is it only 0 or\n1?\n\u2022 Advantages/disadvantages of Mutex\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n6\n\n\fMuddiest Points (priority inheritance)\n\u2022 What is priority inheritance?\n\u2022 I'm confused on what the solution for priority\ninversion is or did we not mention it yet?\n\n\u2022 Does Priority Inheritance solve the Deadlock and\nStarvation problems along with the Priority Inversion\nproblem?\n\u2022 Why running P1 in the priority inversion question not\ndown the semaphore?\n\u2022 Does priority inversion (of semaphores) cause the\nlower process to run instead of the higher priority\nprocess indefinitely or does this resolve itself? If so\nhow?\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n7\n\n\fSemaphore Usage Problem: Priority Inversion\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n8\n\n\fMuddiest Points (forking 1)\n\u2022 if fork creates copies of the process that called it, how\ncan you tell which copy has priority to run first?\n\u2022 child processes & where they pick up in the code\n\u2022 Not exactly sure how semaphores are inherited between\nprocesses\n\u2022 In the last example, when p1 calls fork and creates the\nchild p3, will p1\u2019s PCB be copied to p3, which means the\ncontent of p0\u2019s pcb will be in p3 too?\n\u2022 What is a PID and how is it related to the return value of\nfork()?\n\u2022 P3 is forked and created before P2 so why is it named\nP2? Is it simply renamed after P1 gets forked again?\n\u2022 Is the order of possible outcomes from a forking program\nthe permutation of any of the leaf nodes from a forking\ntree?\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n9\n\n\ffork()\u2019s of fork()\u2019s\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n10\n\n\fMuddiest Points (forking 2)\n\u2022 does the fork return zero for all children?\n\u2022 Somewhat confused about what order the various forks\nwill actually form. I see why and from where they form,\nbut not how it decides which one to run\n\u2022 how are all processes a fork of another process? i know\nthe root of the tree is another process in the OS, but i\ndon't get how for example a program you create and\nexecute is a fork of something else.\n\u2022 the forking process with child processes. The\nrelationship between the number of child processes\ncreated and the number of times fork() is called by the\nparent process\n\u2022 what int fork returns for the child and parent process\n\u2022 practical uses of forking?\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n11\n\n\fToday\u2019s Problem/Question\n\nHow are processes created and terminated?\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n12\n\n\fProcess Lifecycle (AKA Process States)\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n13\n\n\fProcess Creation\n\u2022 Via fork() syscall\n\n\u2022 Parent process: the process that calls fork()\n\u2022 Child process: the process that gets created\n\u2022 Memory of parent process copied to child process\n\u2022 Too much copying\n\n\u2022 Even not necessary sometimes\n\u2022 e.g., fork() followed by exec() to run a different program\n\n\u2022 Optimization trick:\n\u2022 copy-on-write\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n14\n\n\ffork() example\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n15\n\n\fProcess Termination\n\u2022 Via exit(), abort(), or kill() syscalls\n\n\u2022 The parent process may wait for termination of a\nchild process by using the wait()system call.The\ncall returns status information and the pid of the\nterminated process\npid = wait(&status);\n\u2022 When a process terminates\n\n\u2022 If no parent waiting (did not invoke wait()) process is a\nzombie\n\u2022 If parent terminated without invoking wait , process is an\norphan\n\u2022 adopted by the init process\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n16\n\n\fOrphan vs. Zombie Processes\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n17\n\n\fBenefits of Orphan Processes\n\u2022 Allow a long-running job to continue running even\nafter session (e.g., ssh connection) ends.\n\u2022 The nohup command does that\n\n\u2022 Create daemon processes\n\u2022 Long-running background processes adopted by the init\nprocess.\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n18\n\n\fThread Synchronization\nSynchronization issues apply to threads as well\n\u2022 Threads can share data easily (same address space)\n\u2022 Other two issues apply to threads\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n19\n\n\fProcess vs. Thread\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n20\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}