{"id": 224, "segment": "unlabeled", "course": "cs1550", "lec": "lec07", "text": "Introduction to Operating Systems\nCS/COE 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne \u00a92013)\n\n\fAnnouncements\n\u2022 Upcoming deadlines\n\u2022 Homework 3 is due next Monday 2/7\n\u2022 Lab 1 is due this Friday 2/4\n\u2022 Project 1 due on 2/18\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fPrevious lecture \u2026\n\u2022 Bounded buffer problem\n\u2022 semaphore-based solution\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fMuddiest Points\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fProblem of the Day\n\nIt is easy to make mistakes when using semaphores\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fProduces Consumers Problem\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fSolving Producers Consumers using Semaphores\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fIs this sequence feasible?\nn == 3\nfor (i=0; i<3; i++){\nPi arrives\nPi enters\nPi leaves\n}\nP3 arrives\nC0 arrives\nC0 enters\nC0 leaves\nP3 enters\nP3 leaves\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fSome thoughts\n\u2022 If we have one producer and one consumer\n\u2022 do we need count?\n\u2022 do we need the mutex?\n\n\u2022 For multiple producers and consumers\n\u2022 what benefit do we get if we have one mutex for\nproducers and one for consumers?\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fLet\u2019s make a \u201csmall\u201d change\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fLet\u2019s make a \u201csmall\u201d change\nSemaphore empty(n), full(0);\nMutex sem(1);\nConsumer\n\nProducer\n\ndown(sem)\n\ndown(full)\n\ndown(empty)\n\ndown(sem)\n\nbuffer[in] = new item\n\nItem = buffer[out]\n\nin = (in + 1) % n\n\nout = (out + 1) % n\n\ncount++\n\ncount--\n\nup(empty)\n\nup(sem)\n\nup(sem)\n\nup(full)\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fIs this sequence feasible?\nn == 3\nfor (i=0; i<3; i++){\nPi arrives\nPi enters\nPi leaves\n}\nP3 arrives\nC0 arrives\nC0 enters\nC0 leaves\nP3 enters\nP3 leaves\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fSolution\n\u2022 Condition Variable\n\u2022\n\nYet another construct (Add to Spinlock and Semaphore)\n\n\u2022\n\nHas 3 operations\n\u2022 These 3 operations have to be called while holding a mutex lock\n\u2022 wait()\n\u2022\n\u2022\n\u2022\n\u2022\n\nunlock mutex\nblock process\nwhen awake, relock mutex\nwhen successful, return\n\n\u2022 signal()\n\u2022\n\nwakeup one waiting process in the condition variable\u2019s queue if any\n\n\u2022 broadcast()\n\u2022\n\n\u2022\n\nwakeup all waiting processes in the condition variable\u2019s queue if any\n\nNot foreign to us at all\n\u2022 Every object variable in Java is a Condition Variable\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\fSolving Bounded Buffer Using Condition Variables\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}