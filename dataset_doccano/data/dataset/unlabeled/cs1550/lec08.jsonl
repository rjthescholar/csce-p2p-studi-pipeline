{"id": 221, "segment": "unlabeled", "course": "cs1550", "lec": "lec08", "text": "Introduction to Operating Systems\nCS/COE 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne \u00a92013)\n\n\fAnnouncements\n\u2022 Upcoming deadlines\n\u2022 Homework 4 is due next Monday 2/14\n\u2022 Project 1 due on 2/18\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n2\n\n\fPrevious lecture \u2026\n\u2022 It is easy to make mistakes when using semaphores\n\n\u2022 Solution: Mutex and Condition Variables\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n3\n\n\fMuddiest Points\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n4\n\n\fProblem of the Day\nReaders & Writers\n\u2022\n\nMany processes that may read and/or write\n\n\u2022\n\nOnly one writer allowed at any time\n\n\u2022\n\nMany readers allowed, but not while a process is writing\n\n\u2022\n\nReal-world Applications\n\u2022\n\nDatabase queries\n\n\u2022\n\nWe have this problem in Project 1\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n5\n\n\fSemaphore-based Solution\nShared variables\nint nreaders;\nSemaphore mutex(1), writing(1);\n\nReader process\n\nWriter process\n\n\u2026\nmutex.down();\nnreaders += 1;\nif (nreaders == 1) // wait if\nwriting.down(); // 1st reader\nmutex.up();\n// Read some stuff\nmutex.down();\nnreaders -= 1;\nif (nreaders == 0)\n// signal if\nwriting.up();\n// last reader\nmutex.up();\n\u2026\n\n\u2026\nwriting.down();\n// Write some stuff\nwriting.up();\n\u2026\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n6\n\n\fSolution Tracing\n\u2022 enterRead\n\nReader process\n\u2026\nmutex.down();\nnreaders += 1;\nif (nreaders == 1) // wait if\nwriting.down(); // 1st reader\nmutex.up();\n// Read some stuff\nmutex.down();\nnreaders -= 1;\nif (nreaders == 0)\n// signal if\nwriting.up(); // last reader\nmutex.up();\n\u2026\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n7\n\n\fSolution Tracing\n\u2022 read\n\nReader process\n\u2026\nmutex.down();\nnreaders += 1;\nif (nreaders == 1) // wait if\nwriting.down(); // 1st reader\nmutex.up();\n// Read some stuff\nmutex.down();\nnreaders -= 1;\nif (nreaders == 0)\n// signal if\nwriting.up(); // last reader\nmutex.up();\n\u2026\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n8\n\n\fSolution Tracing\n\u2022 doneRead\n\nReader process\n\u2026\nmutex.down();\nnreaders += 1;\nif (nreaders == 1) // wait if\nwriting.down(); // 1st reader\nmutex.up();\n// Read some stuff\nmutex.down();\nnreaders -= 1;\nif (nreaders == 0)\n// signal if\nwriting.up(); // last reader\nmutex.up();\n\u2026\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n9\n\n\fWriter Events\n\u2022 enterWrite\n\nWriter process\n\u2026\nwriting.down();\n// Write some stuff\nwriting.up();\n\u2026\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n10\n\n\fWriter Events\n\u2022 write\n\nWriter process\n\u2026\nwriting.down();\n// Write some stuff\nwriting.up();\n\u2026\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n11\n\n\fWriter Events\n\u2022 doneWrite\n\nWriter process\n\u2026\nwriting.down();\n// Write some stuff\nwriting.up();\n\u2026\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n12\n\n\fSequence 1\n\u2022 W0 enterWrite\nReader process\n\n\u2022 W0 write\n\n\u2026\nmutex.down();\nnreaders += 1;\nif (nreaders == 1) // wait if\nwriting.down(); // 1st reader\nmutex.up();\n// Read some stuff\nmutex.down();\nnreaders -= 1;\nif (nreaders == 0)\n// signal if\nwriting.up();\n// last reader\nmutex.up();\n\u2026\n\n\u2022 R0 enterRead\n\u2022 R1 enterRead\n\u2022 R2 enterRead\n\u2022 W0 doneWrite\n\u2022 R2 read\n\u2022 W1 enterWrite\n\n\u2022 R2 doneRead\n\u2022 W1 write\n\nWriter process\n\u2026\nwriting.down();\n// Write some stuff\nwriting.up();\n\u2026\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n13\n\n\f\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\nSequence 2\nR0 enterRead\nR0 read\nR1 enterRead\nR1 read\nW0 enterWrite\nR2 enterRead\nR2 read\nR2 doneRead\nR1 doneRead\nR0 doneRead\nW0 write\nW0 doneWrite\n\nReader process\n\u2026\nmutex.down();\nnreaders += 1;\nif (nreaders == 1) // wait if\nwriting.down(); // 1st reader\nmutex.up();\n// Read some stuff\nmutex.down();\nnreaders -= 1;\nif (nreaders == 0)\n// signal if\nwriting.up();\n// last reader\nmutex.up();\n\u2026\n\nWriter process\n\u2026\nwriting.down();\n// Write some stuff\nwriting.up();\n\u2026\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n14\n\n\fSolution using Mutex and Condition Variables\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n15\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}