{"id": 208, "segment": "unlabeled", "course": "cs1550", "lec": "lec12", "text": "Introduction to Operating Systems\nCS/COE 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne \u00a92013)\n\n\fAnnouncements\n\u2022 Upcoming deadlines:\n\u2022 Quiz 1: due 2/25\n\u2022 Homework 6: due 2/28\n\u2022 Lab 2: due on 2/28\n\u2022 Project 2: due on 3/18\n\n\u2022 Midterm exam on Thursday 3/3\n\u2022 In-person, on paper, closed book\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n2\n\n\fPrevious Lecture \u2026\n\u2022 How to implement condition variables\u201d\n\n\u2022 Reflections on using semaphores and condition\nvariables\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n3\n\n\fMuddiest Points (Condition Variable Implementation)\n\u2022\n\nfor the user side implementation of condition variables, is the next\nqueue only holding processes that have signaled and yielded to the\nawakened process and therefore have to sleep?\n\n\u2022\n\nHoare and Mesa semantics.\n\n\u2022\n\nare there any performance drawbacks when implementing condition\nvariables at the application level?\n\n\u2022\n\nI think the code for the implementation of the CV was a little fast, so\nI'm not confident I got it fully.\n\n\u2022\n\nHow you can connect the cv implementation in and outside kernel\n\n\u2022\n\nI don't understand what all the locks do for the condition variable\nimplementation.\n\n\u2022\n\nWould you please explain the implementation of Signal() in Userlevel implement of Condition variable? Thank you.\n\n\u2022\n\nWhy Hoare semantics are necessary for a user level\nimplementation. The implementation of the user level condition\nvariable was also generally confusing without fully understanding\nwhy it\u2019s being done that way. I\u2019ll need to review this on my own\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n4\n\n\fMuddiest Points (Deadlocks)\n\u2022 How often do deadlocks occur even if the algorithm tells\nus it is possible to not deadlock\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n5\n\n\fMuddiest Points (Misc.)\n\u2022 n/a BUT PLEASE EXTEND PROJ 1. THOTH IS\nALWAYSSS DOWNNN!!!!\n\u2022 where the sleepy barber would actually be used\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n6\n\n\fFinal Remarks on Process Synchronization\n\u2022 Many other synchronization mechanisms\n\u2022 Message passing\n\u2022 Barriers\n\u2022 Futex\n\u2022 Re-entrant locks\n\n\u2022 Atomic*\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n7\n\n\fProblem of the Day: CPU Scheduling\n\nHow does the short-term scheduler select the next\nprocess to run?\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n8\n\n\fCPU Scheduling\n\u2022 Scheduling the processor among all ready\nprocesses\n\u2022 User-oriented criteria\n\u2022 Response Time: Elapsed time between the submission\nof a request and the receipt of a response\n\n\u2022 Turnaround Time: Elapsed time between the submission\nof a process to its completion\n\n\u2022 System-oriented criteria\n\u2022 Processor utilization\n\n\u2022 Throughput: number of process completed per unit time\n\u2022 Fairness\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n9\n\n\fShort-Term Scheduler Dispatcher\n\u2022 The dispatcher is the module that gives control of the\nCPU to the process selected by the short-term\nscheduler\n\u2022 The functions of the dispatcher include:\n\u2022 Switching context\n\u2022 Switching to user mode\n\u2022 Jumping to the location in the user program to restart\nexecution\n\n\u2022 The dispatch latency must be minimal\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n10\n\n\fThe CPU-I/O Cycle\n\u2022 Processes require alternate use of processor and I/O\nin a repetitive fashion\n\u2022 Each cycle consist of a CPU burst followed by an I/O\nburst\n\u2022 A process terminates on a CPU burst\n\n\u2022 CPU-bound processes have longer CPU bursts than\nI/O-bound processes\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n11\n\n\fResponse time vs. Turnaround time\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n12\n\n\fScheduling Algorithms\n\u2022 First-Come, First-Served Scheduling\n\u2022 Shortest-Job-First Scheduling\n\u2022 Also referred to as Shortest Process Next\n\n\u2022 Priority Scheduling\n\n\u2022 Round-Robin Scheduling\n\u2022 Multilevel Queue Scheduling\n\u2022 Multilevel Feedback Queue Scheduling\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n13\n\n\fCharacterization of Scheduling Policies\n\u2022\n\nThe selection function determines which ready process is\nselected next for execution\n\n\u2022\n\nThe decision mode specifies the instants in time the selection\nfunction is exercised\n\u2022\n\nNonpreemptive\n\u2022 Once a process is in the running state, it will continue until it\nterminates or blocks for an I/O\n\n\u2022\n\nPreemptive\n\u2022 Currently running process may be interrupted and moved to the\nReady state by the OS\n\u2022 Prevents one process from monopolizing the processor\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n14\n\n\fProcess Mix Example\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nService time = total processor time needed in one (CPU-I/O) cycle\nJobs with long service time are CPU-bound jobs and are referred\nto as \u201clong jobs\u201d\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n15\n\n\fFirst Come First Served (FCFS)\n\u2022 Selection function: the process that has been waiting\nthe longest in the ready queue (hence, FCFS)\n\u2022 Decision mode: non-preemptive\n\u2022 a process runs until it blocks for an I/O\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n16\n\n\fAverage Response Time\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n17\n\n\fFCFS drawbacks\n\u2022\n\nFavours CPU-bound processes\n\u2022\n\nCPU-bound processes monopolize the processor\n\n\u2022\n\nI/O-bound processes have to wait until completion of CPUbound process\n\u2022 I/O-bound processes may have to wait even after their I/Os are\ncompleted (poor device utilization)\n\u2022 Convoy effect\n\n\u2022\n\nBetter I/O device utilization could be achieved if I/O bound\nprocesses had higher priority\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n18\n\n\fConvoy Effect\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n19\n\n\f\u2022\n\nShortest Job First (Shortest Process Next)\nSelection function: the process with the shortest expected CPU\nburst time\n\n\u2022\n\nI/O-bound processes will be selected first\n\n\u2022\n\nDecision mode: non-preemptive\n\n\u2022\n\nThe required processing time, i.e., the CPU burst time, must be\nestimated for each process\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n20\n\n\fSJF / SPN Critique\n\u2022\n\nPossibility of starvation for longer processes\n\n\u2022\n\nLack of preemption is not suitable in a time sharing\nenvironment\n\n\u2022 SJF/SPN implicitly incorporates priorities\n\u2022\n\nShortest jobs are given preference\n\n\u2022\n\nCPU bound processes have lower priority, but a process\ndoing no I/O could still monopolize the CPU if it is the first to\nenter the system\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n21\n\n\fPriorities\n\u2022 Implemented by having multiple ready queues to\nrepresent each level of priority\n\u2022 Scheduler selects the process of a higher priority\nover one of lower priority\n\u2022 Lower-priority may suffer starvation\n\n\u2022 To alleviate starvation allow dynamic priorities\n\u2022 The priority of a process changes based on its age or\nexecution history\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n22\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n23\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n24\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n25\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n26\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n27\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n28\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n29\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n30\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n31\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n32\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n33\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n34\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n35\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n36\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n37\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n38\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n39\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n40\n\n\fRound-Robin\nSelection function: same as\nFCFS\n\nProcess\n\nArrival Time\n\nService Time\n\n1\n\n0\n\n3\n\n2\n\n2\n\n6\n\n3\n\n4\n\n4\n\n4\n\n6\n\n5\n\n5\n\n8\n\n2\n\nDecision mode: pre-emptive\na process is allowed to run until\nthe time slice period (quantum,\ntypically from 10 to 100 ms) has\nexpired\na clock interrupt occurs and the\nrunning process is put on the\nready queue\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n41\n\n\fRR Time Quantum\n\u2022 Quantum must be substantially larger than the time\nrequired to handle the clock interrupt and dispatching\n\u2022 Quantum should be larger then the typical interaction\n\u2022 but not much larger, to avoid penalizing I/O bound\nprocesses\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n42\n\n\fRR Time Quantum\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n43\n\n\fQuantum Length\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n44\n\n\f\u2022\n\nRound Robin: critique\nStill favors CPU-bound processes\n\u2022\n\nAn I/O bound process uses the CPU for a time less than the\ntime quantum before it is blocked waiting for an I/O\n\n\u2022\n\nA CPU-bound process runs for all its time slice and is put\nback into the ready queue\n\u2022\n\nMay unfairly get in front of blocked processes\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n45\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}