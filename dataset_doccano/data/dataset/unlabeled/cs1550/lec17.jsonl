{"id": 231, "segment": "unlabeled", "course": "cs1550", "lec": "lec17", "text": "Introduction to Operating Systems\nCS 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne \u00a92013)\n\n\fAnnouncements\n\u2022 Upcoming deadlines:\n\u2022 Quiz 2: due on 3/25\n\u2022 Homework 9: due on 3/28\n\u2022 Lab 3: due on 4/1\n\u2022 Project 3: due on 4/11\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n2\n\n\fPrevious lecture \u2026\n\u2022 Page replacement algorithms\nAlgorithm\n\nComment\n\nOPT (Optimal)\n\nNot implementable, but useful as a benchmark\n\nNRU (Not Recently Used)\n\nCrude\n\nFIFO (First-In, First Out)\n\nMight throw out useful pages\n\nSecond chance\n\nBig improvement over FIFO\n\nClock\n\nBetter implementation of second chance\n\nLRU (Least Recently Used)\n\nExcellent, but hard to implement exactly\n\nNFU (Not Frequently Used)\n\nPoor approximation to LRU\n\nAging\n\nGood approximation to LRU, efficient to implement\n\nWorking Set\n\nSomewhat expensive to implement\n\nWSClock\n\nImplementable version of Working Set\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n3\n\n\fMuddiest Points (Memory)\n\u2022 Difference between NRU and NFU\n\u2022 For NRU, what is the way in which it separates the pages into\nclasses in order to pick a victim from a group of the lowest nonempty class\n\u2022 On the clock for the clock algorithm, what is t and why does it\nchange to 32 on the referenced pages?\n\u2022 What are we adding to the shift register in the working set\nreplacement algorithm?\n\u2022 Why is the tracking of a process\u2019 working set necessary?\n\u2022 Which page replacement algorithm is the best (generally)?\n\u2022 The question on the homework that has the numerical entry\nanswer. I'm not quite sure how to adapt what we discussed in\nclass to that question.\n\u2022 How the eviction happens in the pages\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n4\n\n\fMuddiest Points (Memory)\n\u2022 How do we determine tau again?\n\u2022 On the last slide about working set page, does the page\ntable get updated every clock tick? Or do we only care\nabout evey clock interrupt here? I am a little confused\nabout how is the clock interrupt concept applied to the\nworking set page replacement algorithm.\n\u2022 What is k in the working set graph?\n\u2022 in second chance and clock replacement, why do\nreferenced pages have their ref bit set back to 0?\n\u2022 Do most algorithms need to iterate through all pages\n(O(N) runtime)?\n\n\u2022 I am confused on the details of thrashing\n\u2022 LRU page replacement\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n5\n\n\fMuddiest Points (Misc.)\n\u2022 i had a bit of a hard time keeping up with pretty much\neverything but i think that's just a side effect of\ncoming back from break\n\u2022 what is it that makes the TLB access fast while being\nslower for memory PTE access\n\u2022 when is the midterm grades posted also will there be\nmakeup to get up to 30% back?\n\u2022 When are TLB entries replaced\n\u2022 Is \"Frame\" the same thing as a physical page?\n\u2022 How is the page table indexed?\n\n\u2022 redo a walk through the address translation process\nwith the CPU, MMU, & TLB caching\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n6\n\n\fProblem of the Day\n\u2022 How to simulate page replacement algorithms\n\u2022 FIFO/Clock\n\u2022 LRU, OPT\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n7\n\n\f\u2022\n\n\u2022\n\nHow is modeling done?\nGenerate a list of references\n\u2022\n\nArtificial (made up)\n\n\u2022\n\nTrace a real workload (set of processes)\n\nUse an array (or other structure) to track the pages in physical memory\nat any given time\n\u2022\n\nMay keep other information per page to help simulate the algorithm (modification\ntime, time when paged in, etc.)\n\n\u2022\n\nRun through references, applying the replacement algorithm\n\n\u2022\n\nExample: FIFO replacement on reference string 0 1 2 3 0 1 4 0 1 2 3 4\n\u2022\n\nPage replacements highlighted in yellow\nPage referenced\n0 1 2 3 0 1 4 0 1 2 3 4\nYoungest page\n\n0 1 2 3 0 1 4 4 4 2 3 3\n0 1 2 3 0 1 1 1 4 2 2\n\nOldest page\n\n0 1 2 3 0 0 0 1 4 4\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n8\n\n\fInteractive Simulation Tool\n\u2022 https://sim-50.github.io/cs-tools/\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n9\n\n\fFIFO with 3 frames\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n10\n\n\fFIFO Example 1\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n11\n\n\fFIFO with 4 frames\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n12\n\n\f\u2022\n\n\u2022\n\n\u2022\n\nBelady\u2019s anomaly\nReduce the number of page faults by supplying more memory\n\u2022\n\nUse previous reference string and FIFO algorithm\n\n\u2022\n\nAdd another page to physical memory (total 4 pages)\n\nMore page faults (10 vs. 9), not fewer!\n\u2022\n\nThis is called Belady\u2019s anomaly\n\n\u2022\n\nAdding more pages shouldn\u2019t result in worse performance!\n\nMotivated the study of paging algorithms\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n13\n\n\fCLOCK Simulation\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n14\n\n\fModeling more replacement algorithms\n\u2022 Paging system characterized by:\n\u2022 Reference string of executing process\n\u2022 Page replacement algorithm\n\u2022 Number of page frames available in physical memory (m)\n\n\u2022 Model this by keeping track of all n pages referenced\nin array M\n\u2022 Top part of M has m pages in memory\n\u2022 Bottom part of M has n-m pages stored on disk\n\n\u2022 Page replacement occurs when page moves from top\nto bottom\n\u2022 Top and bottom parts may be rearranged without causing\nmovement between memory and disk\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n15\n\n\f\u2022\n\nExample: LRU\nModel LRU replacement with\n\u2022\n\n8 unique references in the reference string\n\n\u2022\n\n4 pages of physical memory\n\n\u2022\n\nArray state over time shown below\n\n\u2022\n\nLRU treats list of pages like a stack\n0 2 1 3 5 4 6 3 7 4 7 3 3 5 5 3 1 1 1 7 1 3 4 1\n0 2 1 3 5 4 6 3 7 4 7 3 3 5 5 3 1 1 1 7 1 3 4 1\n0 2 1 3 5 4 6 3 7 4 7 7 3 3 5 3 3 3 1 7 1 3 4\n0 2 1 3 5 4 6 3 3 4 4 7 7 7 5 5 5 3 3 7 1 3\n0 2 1 3 5 4 6 6 6 6 4 4 4 7 7 7 5 5 5 7 7\n0 2 1 1 5 5 5 5 5 6 6 6 4 4 4 4 4 4 5 5\n0 2 2 1 1 1 1 1 1 1 1 6 6 6 6 6 6 6 6\n0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n16\n\n\fStack algorithms\n\u2022 LRU is an example of a stack algorithm\n\u2022 For stack algorithms\n\u2022 Any page in memory with m physical pages is also in\nmemory with m+1 physical pages\n\u2022 Increasing memory size is guaranteed to reduce (or at\nleast not increase) the number of page faults\n\n\u2022 Stack algorithms do not suffer from Belady\u2019s anomaly\n\u2022 Distance of a reference == position of the page in the\nstack before the reference was made\n\u2022 Distance is \uf0a5 if no reference had been made before\n\u2022 Distance depends on reference string and paging\nalgorithm: might be different for LRU and optimal (both\nstack algorithms)\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n17\n\n\fPredicting page fault rates using distance\n\u2022 Distance can be used to predict page fault rates\n\u2022 Make a single pass over the reference string to\ngenerate the distance string on-the-fly\n\u2022 Keep an array of counts\n\u2022 Entry j counts the number of times distance j occurs in the\ndistance string\n\n\u2022 The number of page faults for a memory of size m is\nthe sum of the counts for j>m\n\u2022 This can be done in a single pass!\n\u2022 Makes for fast simulations of page replacement\nalgorithms\n\n\u2022 This is why virtual memory theorists like stack\nalgorithms!\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n18\n\n\fLRU\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n19\n\n\fOPT\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n20\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}