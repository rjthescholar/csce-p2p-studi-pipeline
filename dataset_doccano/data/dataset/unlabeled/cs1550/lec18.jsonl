{"id": 199, "segment": "unlabeled", "course": "cs1550", "lec": "lec18", "text": "Introduction to Operating Systems\nCS 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne \u00a92013)\n\n\fAnnouncements\n\u2022 Upcoming deadlines:\n\u2022 Quiz 2: due on 3/25\n\u2022 Homework 9: due on 3/28\n\u2022 Lab 3: due on 4/1\n\u2022 Project 3: due on 4/11\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n2\n\n\fPrevious Lecture \u2026\n\u2022 Tracing page replacement algorithms\n\u2022 FIFO and CLOCK\n\u2022 LRU and OPT\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n3\n\n\fMuddiest Points\n\u2022 Do page evictions happen across processes?\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n4\n\n\fLocal vs. global allocation policies\n\u25fc\n\nWhat is the pool of pages eligible\nto be replaced?\nPages belonging to the process\nneeding a new page\n\u25fc All pages in the system\n\u25fc\n\n\u25fc\n\nLocal allocation: replace a page\nfrom this process\nMay be more \u201cfair\u201d: penalize\nprocesses that replace many pages\n\u25fc Can lead to poor performance: some\nprocesses need more pages than\nothers\n\u25fc\n\n\u25fc\n\nGlobal allocation: replace a page\nfrom any process\n\nLast access time\nPage\nA0\nA1\nA2\nA3\nA4\nB0\nB1\nA4\nB2\nC0\nC1\nC2\nC3\nC4\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n14\n12\n8\n5\n10\n9\n3\n16\n12\n8\n5\n4\n\nLocal\nallocation\nA4\n\nGlobal\nallocation\n\n5\n\n\fMuddiest Points\n\u25fc\n\nwhat measures do modern operating systems take\nin order to minimize thrashing?\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n6\n\n\fPage fault rate vs. allocated frames\n\u25fc\n\nLocal allocation may be more \u201cfair\u201d\n\u25fc\n\n\u25fc\n\nDon\u2019t penalize other processes for high page fault rate\n\nGlobal allocation is better for overall system performance\nTake page frames from processes that don\u2019t need them as much\n\u25fc Reduce the overall page fault rate (even though rate for a single\nprocess may go up)\n\u25fc\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n7\n\n\fControl overall page fault rate\nDespite good designs, system may still thrash\n\u25fc Most (or all) processes have high page fault rate\n\u25fc\n\nSome processes need more memory, \u2026\n\u25fc but no processes need less memory (and could give\nsome up)\n\u25fc\n\nProblem: no way to reduce page fault rate\n\u25fc Solution :\nReduce number of processes competing for\nmemory\n\u25fc\n\nSwap one or more to disk, divide up pages they held\n\u25fc Reconsider degree of multiprogramming\n\u25fc\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n8\n\n\fBacking up an instruction\n\u25fc\n\nProblem: page fault happens in the middle of instruction\nexecution\nSome changes may have already happened\n\u25fc Others may be waiting for VM to be fixed\n\u25fc\n\n\u25fc\n\nSolution: undo all of the changes made by the instruction\nRestart instruction from the beginning\n\u25fc This is easier on some architectures than others\n\u25fc\n\n\u25fc\n\nExample: LW R1, 12(R2)\nPage fault in fetching instruction: nothing to undo\n\u25fc Page fault in getting value at 12(R2): restart instruction\n\u25fc\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n9\n\n\fMinimum memory allocation to a process\n\u25fc\n\nExample: ADD (Rd)+,(Rs1)+,(Rs2)+\n\u25fc\n\nPage fault in writing to (Rd): may have to undo an awful lot\u2026\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n10\n\n\fMuddiest Points\n\u2022 What is disk write?\n\u2022 What does the * mean?\n\u2022 CLOCK\n\u2022\n\nWhen does the orbit (or bit?) change in the clock simulation\n(FIFO/slide 14)\n\n\u2022\n\nhow does the clock iterate in the example from class?\n\n\u2022 LRU\n\u2022\n\nDetermining page faults in LRU modelling\n\n\u2022\n\nHow to calculate the distance\n\n\u2022\n\nIs there a way to easily determine the disk writes using the\nLRU stack algorithm?\n\n\u2022\n\nWould you please solve some example for LRU and OPT?\nThank you so much\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n11\n\n\fMuddiest Points\n\u2022 How the tracing changes between different types of\nscheduling\n\u2022 FIFO\n\u2022 why does FIFO have more page faults with more memory\n(small explanation?)?\n\n\u2022 How to implement stack algorithm in code\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n12\n\n\fMuddiest Points\n\u2022 how to keep track of larger tables that can store more\npages.\n\u2022 Problem of the Day!\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n13\n\n\fSeparating policy and mechanism\n\u25fc\n\nMechanism for page replacement has to be in kernel\nModifying page tables\n\u25fc Reading and writing page table entries\n\u25fc\n\n\u25fc\n\nPolicy for deciding which pages to replace could be in user\nspace\n\u25fc\n\nMore flexibility\n3. Request page\n\nUser\nspace\nKernel\nspace\n\nUser\nprocess\n\n2. Page needed\n\n4. Page\narrives\n\nExternal\npager\n\n5. Here is page!\n1. Page fault\n\nFault\nhandler\n\n6. Map in page\n\nMMU\nhandler\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n14\n\n\fSeparating Policy and Mechanism for Page Replacement\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n15\n\n\fProject 3: OPT Simulation\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n16\n\n\fOPT Implementation Example\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n17\n\n\fProject 3: LRU and miscellaneous hints\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n18\n\n\fProject 3: Writeup hints\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n19\n\n\fProblem of the Day\n\n\u2022 How to keep track of larger page tables that can store\nmore pages\n\u2022 How big can a page table be?\n\u2022 64-bit machine\n\u2022 4 KB page size\n\n\u2022 How many pages?\n\u2022 How many PTE?\n\u2022 How big is a PTE?\n\u2022 How big is the page table of one process?\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n20\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}