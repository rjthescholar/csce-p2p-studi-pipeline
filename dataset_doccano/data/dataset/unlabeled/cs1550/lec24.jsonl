{"id": 207, "segment": "unlabeled", "course": "cs1550", "lec": "lec24", "text": "Introduction to Operating Systems\nCS 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne \u00a92013)\n\n\fAnnouncements\n\u2022 Upcoming deadlines:\n\u2022 Homework 11: due on 4/18\n\u2022 Project 3: Late due date on 4/13\n\u2022 Late penalty waived\n\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\n\nLab 4: due on 4/15\nQuiz 3: due on 4/15\nHomework 12: due on 4/25\nLab 5: due on 5/2\nProject 4 and Quiz 4: due on 5/2\nBonus Opportunities\n\u2022 Bonus Homework: due on 5/2\n\u2022 Course Post-Test: due on 5/2\n\u2022 Bonus point for all when OMET response rate >= 80%\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n2\n\n\fPrevious lecture \u2026\n\u2022 How do device drivers program I/O devices?\n\n\u2022 Answer: three methods\n\u2022 polling\n\u2022 Interrupts\n\u2022 DMA\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n3\n\n\f\u2022\n\nMuddiest Points (1/2)\nRAIDs\n\u2022\n\nDifference between RAID 4 and 5\n\n\u2022\n\nSo is the log-structured file system the same as journaling, or is that\ndifferent? If it is the same, does that mean all journaling systems\nalso track file version histories?\n\n\u2022\n\nInterrupt driven I/O\n\n\u2022\n\npolling\n\n\u2022\n\nOther situations like that bug/feature example? Seems interesting.\n\n\u2022\n\nIn file block cache data structures slide, how do you track hash table\ncollisions to make the chains?\n\n\u2022\n\nvoltage about 0/1 on solid state disk\n\n\u2022\n\nCan you explain again why SSDs degrade over time?\n\n\u2022\n\nSingle bus versus dual-bus\n\n\u2022\n\nWhat tradeoff exists having larger disk caches?\n\n\u2022\n\nmemory mapped and separate io spaces\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n4\n\n\fMuddiest Points (2/2)\n\n\u2022 can you please release final preparation material a bit\nearlier? i\u2019m nervous for the final and want to start\nstudying ahead of time\n\u2022 not about the lecture specifically but in general: are\nwe allowed to work with each other on midterm exam\ncorrections or should they be done alone?\n\n\u2022 Are we really going to having 8am final?\n\u2022 Everything was clear\n\u2022 Nothing good. Need to review myself\n\n\u2022 All good this lecture, though things went a bit fast\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n5\n\n\fPolling\n\ncopy_from_user (buffer, p, count); // copy into kernel buffer\nfor (j = 0; j < count; j++) {\n// loop for each char\nwhile (*printer_status_reg != READY)\n;\n// wait for printer to be ready\n*printer_data_reg = p[j]; // output a single character\n}\nreturn_to_user();\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n6\n\n\fHardware\u2019s view of interrupts\n\nBus\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n7\n\n\fInterrupt-driven I/O\ncopy_from_user (buffer, p, count);\nj = 0;\nenable_interrupts();\nwhile (*printer_status_reg != READY)\n;\n*printer_data_reg = p[0];\nscheduler(); // and block user\nif (count == 0) {\nunblock_user();\n} else {\nj++;\n*printer_data_reg = p[j];\ncount--;\n}\nacknowledge_interrupt();\nreturn_from_interrupt();\n\nCode run by system call\n\nCode run at interrupt time\n(Interrupt handler)\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n8\n\n\fWhat happens on an interrupt\n\u2022 Set up stack for interrupt service procedure\n\u2022 Ack interrupt controller, reenable interrupts\n\n\u2022 Copy registers from where saved\n\u2022 Run service procedure\n\u2022 (optional) Pick a new process to run next\n\u2022 Set up MMU context for process to run next\n\u2022 Load new process' registers\n\u2022 Start running the new process\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n9\n\n\fDirect Memory Access (DMA) operation\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n10\n\n\fDMA\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n11\n\n\fI/O using DMA\ncopy_from_user (buffer, p, count);\nset_up_DMA_controller();\nscheduler(); // and block user\n\nCode run by system call\n\nacknowledge_interrupt();\nunblock_user();\nreturn_from_interrupt();\n\nCode run at interrupt time\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n12\n\n\fDisk drive structure\n\u2022 Data stored on surfaces\n\u2022\n\nUp to two surfaces per platter\n\n\u2022\n\nOne or more platters per disk\n\nhead\n\nsector\n\n\u2022 Data in concentric tracks\n\u2022\n\u2022\n\nTracks broken into sectors\n\nplatter\n\n\u2022 256B-1KB per sector\n\ntrack\n\nCylinder: corresponding tracks\non all surfaces\n\ncylinder\n\n\u2022 Data read and written by\nheads\n\u2022\n\u2022\n\nActuator moves heads\n\nsurfaces\n\nspindle\n\nHeads move in unison\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\nactuator\n13\n\n\f\u2022\n\n\u2022\n\nDisk scheduling algorithms\nSchedule disk requests to minimize disk seek time\n\u2022\n\nSeek time increases as distance increases (though\nnot linearly)\n\n\u2022\n\nMinimize seek distance -> minimize seek time\n\nDisk seek algorithm examples assume a request\nqueue & head position (disk has 200 cylinders)\n\u2022\n\nQueue = 100, 175, 51, 133, 8, 140, 73, 77\n\n\u2022\n\nHead position = 63\n\nOutside edge\n8\n\nInside edge\n51\n\n73\n77\n\nread/write head position\n\n100\n\n133\n140\n\n175\n\ndisk requests\n(cylinder in which block resides)\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n14\n\n\fDisk Arm Scheduling\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n15\n\n\fFirst-Come-First Served (FCFS)\n\u2022 Requests serviced in the order in which they arrived\n\u2022\n\u2022\n\nEasy to implement!\nMay involve lots of unnecessary seek distance\n\n\u2022 Seek order = 100, 175, 51, 133, 8, 140, 73, 77\n\u2022 Seek distance = (100-63) + (175-100) + (175-51) + (133-51) +\n(133-8) + (140-8) + (140-73) + (77-73) = 646 cylinders\nread/write head start\n\n100\n175\n\n51\n133\n8\n140\n73\n77\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n16\n\n\fFCFS Example 2\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n17\n\n\f\u2022\n\nShortest Seek Time First (SSTF)\nService the request with the shortest seek time from the current\nhead position\n\u2022\n\u2022\n\nForm of SJF scheduling\nMay starve some requests\n\n\u2022\n\nSeek order = 73, 77, 100, 133, 140, 175, 51, 8\n\n\u2022\n\nSeek distance = 10 + 4 + 23 + 33 + 7 + 35 + 124 + 43 = 279\ncylinders\n\nread/write head start\n\n73\n77\n\n51\n8\n\n100\n\n133\n\n140\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n175\n18\n\n\fSSTF Example 2\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n19\n\n\f\u2022\n\nSCAN (elevator algorithm)\nDisk arm starts at one end of the disk and moves towards the other\nend, servicing requests as it goes\n\u2022\n\u2022\n\nReverses direction when it gets to end of the disk\nAlso known as elevator algorithm\n\n\u2022\n\nSeek order = 51, 8, 0 , 73, 77, 100, 133, 140, 175\n\n\u2022\n\nSeek distance = 12 + 43 + 8 + 73 + 4 + 23 + 33 + 7 + 35 = 238 cyls\n\nread/write head start\n51\n8\n73\n77\n\n100\n133\n140\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n175\n20\n\n\fSCAN Example 2\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n21\n\n\fC-SCAN\n\u2022 Identical to SCAN, except head returns to cylinder 0 when it\nreaches the end of the disk\n\u2022\n\u2022\n\nTreats cylinder list as a circular list that wraps around the disk\nWaiting time is more uniform for cylinders near the edge of the disk\n\n\u2022 Seek order = 73, 77, 100, 133, 140, 175, 199, 0, 8, 51\n\u2022 Distance = 10 + 4 + 23 + 33 + 7 + 35 + 24 + 199 + 8 + 43 = 386\ncyls\nread/write head start\n73\n77\n100\n\n133\n140\n8\n\n175\n\n51\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n22\n\n\fC-LOOK\n\u2022 Identical to C-SCAN, except head only travels as far as\nthe last request in each direction\n\u2022\n\nSaves seek time from last sector to end of disk\n\n\u2022 Seek order = 73, 77, 100, 133, 140, 175, 8, 51\n\u2022 Distance = 10 + 4 + 23 + 33 + 7 + 35 + 167 + 43 = 322\ncylinders\nread/write head start\n73\n77\n100\n\n133\n140\n8\n\n175\n\n51\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n23\n\n\fC-LOOK Example 2\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n24\n\n\fTwo-level directory system\n\u2022 Solves naming problem: each user has her own\ndirectory\n\u2022 Multiple users can use the same file name\n\u2022 By default, users access files in their own directories\n\u2022 Extension: allow users to access files in others\u2019\nRoot\ndirectories\ndirectory\n\nA\n\nA\nfoo\n\nB\n\nA\nbar\n\nB\nfoo\n\nC\n\nB\nbaz\n\nC\nbar\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\nC\nfoo\n\nC\nblah\n\n25\n\n\fHierarchical directory system\nRoot\ndirectory\nA\n\nB\n\nA\nPapers\n\nA\nfoo\n\nA\nPhotos\n\nB\nfoo\n\nB\nPapers\n\nA\nos.tex\n\nA\nsunset\n\nA\nFamily\n\nB\nfoo.tex\n\nB\nfoo.ps\n\nA\nsunset\n\nA\nkids\n\nA\nMom\n\nC\n\nC\nbar\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\nC\nfoo\n\nC\nblah\n\n26\n\n\fUnix directory tree\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n27\n\n\fProject 4: Directory Traversal\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n28\n\n\fProject 4 Hint\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n29\n\n\fSharing files\nRoot\ndirectory\nA\n\nB\n\nA\nPapers\n\nA\nfoo\n\nA\nPhotos\n\nA\nos.tex\n\nA\nsunset\n\nA\nFamily\n\nA\nsunset\n\nA\nkids\n\nB\nfoo\n\nB\nPhotos\n\nC\n\nC\nbar\n\nC\nfoo\n\nC\nblah\n\nB\nlake\n\n?\n???\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n30\n\n\fSolution: use links\n\u2022 A creates a file, and inserts into her directory\n\n\u2022 B shares the file by creating a link to it\n\u2022 A unlinks the file\n\u2022 B still links to the file\n\u2022 Owner is still A (unless B explicitly changes it)\nA\n\na.tex\n\nOwner: A\nCount: 1\n\nA\n\nB\n\nB\n\nb.tex\n\nb.tex\n\na.tex\n\nOwner: A\nCount: 2\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\nOwner: A\nCount: 1\n31\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}