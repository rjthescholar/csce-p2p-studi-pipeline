{"id": 197, "segment": "unlabeled", "course": "cs1550", "lec": "lec25", "text": "Introduction to Operating Systems\nCS 1550\nSpring 2022\n\nSherif Khattab\nksm73@pitt.edu\n(Some slides are from Silberschatz, Galvin and Gagne \u00a92013)\n\n\fAnnouncements\n\u2022 Upcoming deadlines:\n\u2022 Homework 12: due on 4/25\n\u2022 Lab 5: due on 5/2\n\u2022 Project 4 and Quiz 4: due on 5/2\n\u2022 Bonus Opportunities\n\u2022 Bonus Homework: due on 5/2\n\u2022 Course Post-Test: due on 5/2\n\u2022 Bonus point for all when OMET response rate >= 80%\n\u2022\n\nCurrently at 25-28%\n\n\u2022\n\nDeadline is Sunday 4/24\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n2\n\n\fPrevious Lecture \u2026\n\u2022 Disk arm scheduling\n\u2022 FCFS, SSTF, SCAN, C-SCAN, LOOK, C-LOOk\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n3\n\n\fMuddiest Points\n\u2022\n\nJust need to study the material more to be honest.\n\n\u2022\n\nDMA and CPU memory competition\n\n\u2022\n\nhardware view of interrupt\n\n\u2022\n\nThanks for bringing in coffee and snacks for the final! It is much\nappreciated\n\n\u2022\n\nonline vs offline problem\n\n\u2022\n\nWhat sort of questions about this material will be on the exam?\n\n\u2022\n\nIn Sharing file, if the directory A is owner of file \"a_file\" and then this\nfile is shared by directory B, Then we delete directory A, Are all files\neven shared files will be deleted and not more accessible, or we\nhave one copy of \"a_file \" in directory of B?\n\n\u2022\n\nCan you please go over File Linking again?\n\n\u2022\n\nHow do you read in the blocks from the disk file for project 4? I know\nto use fseek and fread but I don't know where to go from there.\n\n\u2022\n\nCan you explain the difference between CSCAN and CLOOK?\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n4\n\n\fJournaling File System\n\u2022 In a regular file system, changes to files and\ndirectories result in multiple separate writes to disk\n\u2022 prone to power failures\n\n\u2022 Write changes twice\n\u2022 first to an on-disk journal\n\u2022 for efficiency, journal can be put on SSD or NVRAM\n\u2022 data may or may not be written to the journal\n\n\u2022 second to main file system\n\n\u2022 Examples\n\u2022 Windows NTFS\n\u2022 Linux ext3, ext4\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n5\n\n\fJournaling File System\n\u2022 Interaction of disk arm scheduling?\n\u2022 out-of-order writes\n\u2022 ext3 and ext4 force disk to flush its cache at certain points\n(barriers)\n\n\u2022 Journaling vs. Log-structured file system\n\u2022 Journaling is not needed in LSFS\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n6\n\n\fFile Linking (left) vs. File Copying (right)\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n7\n\n\fMax Partition Size\nBlock size\n\nFAT-12\n\nFAT-16\n\n0.5 KB\n\n2 MB\n\n1 KB\n\n4 MB\n\n2 KB\n\n8 MB\n\n128 MB\n\n4 KB\n\n16 MB\n\n256 MB\n\n1 TB\n\n8 KB\n\n512 MB\n\n2 TB\n\n16 KB\n\n1024 MB\n\n2 TB\n\n32 KB\n\n2048 MB\n\n2 TB\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\nFAT-32\n\n8\n\n\fMax Partition Size\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n9\n\n\fFile-related kernel structures:\nopen file tables and disk quotas\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n10\n\n\fHW 10: Q 2-4\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n11\n\n\fHW 10: Q 10-13\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n12\n\n\fEffective Disk Access Time\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n13\n\n\fMinimum and Maximum Seek Time\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n14\n\n\fAverage Rotational Delay\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n15\n\n\fBuffering device input\nUser\nspace\n\nUser\nspace\n\nUser\nspace\n\nUser\nspace\n\nKernel\nspace\n\nKernel\nspace\n\nKernel 2\nspace\n\nKernel 2\nspace\n\n1\n\nUnbuffered\ninput\n\nBuffering in\nuser space\n\nBuffer in kernel\nCopy to user space\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n1\n\n3\n\nDouble buffer\nin kernel\n16\n\n\fI/O Buffering\n\nCS 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n17\n\n\fProblem of the Day: Protection\n\u2022 Protection is about controlling access of programs,\nprocesses, or users to the system resources (e.g.,\nmemory pages, files, devices, CPUs)\n\u2022 How to decide who can access what?\n\u2022 Specifications must be\n\u2022 Correct\n\u2022 Efficient\n\u2022 Easy to use (or nobody will use them!)\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n18\n\n\f\u2022\n\n\u2022\n\n\u2022\n\nProtection domains\nA process operates within a protection domain\n\u2022\n\nresources accessible by the process\n\n\u2022\n\neach domain lists objects with permitted operations\n\nDomains can share objects & permissions\n\u2022\n\nObjects can have different permissions in different domains\n\n\u2022\n\nThere need be no overlap between object permissions in different\ndomains\n\nHow can this arrangement be specified more formally?\n\nFile1 [R]\nFile2 [RW]\n\nDomain 1\n\nFile3 [R]\nFile4 [RWX] Printer [W]\nFile5 [RW]\n\nDomain 2\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\nFile3 [W]\nScreen1 [W]\nMouse [R]\n\nDomain 3\n19\n\n\fProtection matrix\nFile1\n\nDomain1 Read\n\nFile2\n\nFile3\n\nFile4\n\nFile5\n\nPrinter1\n\nRead\nWrite\n\nDomain2\n\nRead\n\nDomain3\n\nWrite\n\nRead\nWrite\nExecute\n\nRead\nWrite\n\nWrite\n\nWrite\n\n\u2022\n\nEach domain has a row in the matrix\n\n\u2022\n\nEach object (resource) has a column in the matrix\n\n\u2022\n\nEntry for <object, column> has the permissions\n\n\u2022\n\nWho\u2019s allowed to modify the protection matrix?\n\u2022\n\n\u2022\n\nCamera\n\nRead\n\nWhat changes can they make?\n\nHow is this implemented efficiently?\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n20\n\n\fDomains as objects in the protection matrix\nDomain\n\n\u2022\n\n\u2022\n\nFile1\n\nFile2\n\n1 Read\n\nRead\nWrite\n\nFile3\n\nFile4\n\nFile5\n\nPrinter1\n\nCamera\n\nDom1\n\nDom2\n\nDom3\n\nModify\n\n2\n\nRead\n\n3\n\nWrite\n\nRead\nWrite\nExecute\n\nRead\nWrite\n\nWrite\n\nWrite\n\nModify\n\nRead\n\nEnter\n\nSpecify permitted operations on domains in the matrix\n\u2022\n\nDomains may (or may not) be able to modify themselves\n\n\u2022\n\nDomains can modify other domains\n\n\u2022\n\nSome domain transfers (switching) permitted, others not\n\nDoing this allows flexibility in specifying domain permissions\n\u2022\n\nRetains ability to restrict modification of domain policies\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n21\n\n\fRepresenting the protection matrix\n\u2022 Need to find an efficient representation of the\nprotection matrix (also called the access matrix)\n\u2022 Most entries in the matrix are empty!\n\u2022 Compress the matrix by:\n\u2022 Associating permissions with each object: access control\nlist\n\u2022 Associating permissions with each domain: capabilities\n\n\u2022 How is this done, and what are the tradeoffs?\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n22\n\n\fAccess control lists (ACLs)\n\u2022 Each object has a list\nattached to it\n\u2022 List has\n\u2022\n\nFile2\n\nelm: <R,W>\nznm: <R>\nroot: <R,W,X>\n\nelm: <R,X>\nuber: <R,W>\nroot: <R,W>\nall: <R>\n\nProtection domain (User\nname, Group of users, Other)\n\n\u2022\n\nFile1\n\nAccess rights (Read, Write,\nExecute, Others)\n\n\u2022 No entry for domain => no\nrights for that domain\n\u2022 Operating system checks\npermissions when access\nis needed\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n23\n\n\f\u2022\n\n\u2022\n\nAccess control lists in the real world\nUnix file system\n\u2022\n\n\u2022\n\nAccess list for each file has exactly three domains on it\n\u2022\n\nUser (owner)\n\n\u2022\n\nGroup\n\n\u2022\n\nOthers\n\nRights include read, write, execute: interpreted differently for directories\nand files\n\nAFS\n\u2022\n\nAccess lists only apply to directories: files inherit rights from the directory\nthey\u2019re in\n\n\u2022\n\nAccess list may have many entries on it with possible rights:\n\u2022\n\nread, write, lock (for files in the directory)\n\n\u2022\n\nlookup, insert, delete (for the directories themselves),\n\n\u2022\n\nadminister (ability to add or remove rights from the ACL)\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n24\n\n\fACL in UNIX\n\nCS/COE 1550 \u2013 Operating Systems \u2013 Sherif Khattab\n\n25\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}