{"id": 241, "segment": "unlabeled", "course": "cs1567", "lec": "lec03_publisher_and_subscriber", "text": "Publisher and Subscriber\nThumrongsak Kosiyatrakul\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\fPublisher\n\nA publisher publishes data to topics\nA publisher has to have a name (for debugging purpose)\nA topic is a named bus (need a name as well)\nA topic must have a type associated with it (strongly typed)\nDo not need to care who are subscribers (anonymous)\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\ftalker.py\n#!/usr/bin/env python\nimport rospy\nfrom std_msgs.msg import String\ndef talker():\npub = rospy.Publisher('chatter', String, queue_size=1)\nrospy.init_node('talker', anonymous=True)\nrate = rospy.Rate(10) # 10hz\nwhile not rospy.is_shutdown():\nhello_str = \"hello world %s\" % rospy.get_time()\nrospy.loginfo(hello_str)\npub.publish(hello_str)\nrate.sleep()\nif __name__ == '__main__':\ntry:\ntalker()\nexcept rospy.ROSInterruptException:\npass\n\nDo not forget to make this file executable (chmod +x talker.py)\nYou only need to set it once\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\ftalker.py\n#!/usr/bin/env python\n\nIf you try to create a node using Python, the above line must\nbe at the top\nIt let the OS knows that this program should be passed to the\nPython interpreter\nimport rospy\n\nThis line should be in all Pyhton node\nIt imports all of the basic functionality that we will need\nfrom std_msgs.msg import String\n\nWe are going to publish messages of type String\nWe need to import String from the standard message\nstd msg.msg.\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\ftalker.py\npub = rospy.Publisher('chatter', String, queue_size=1)\n\nThis create an object of type Publisher and can be referred\nto by the variable named pub\nrospy.Publisher() is a constructor:\nFirst Argument: The topic name (chatter)\nSecond Argument: The type of message (String)\nThird Argument: The maximum number of message that will\nbe stored in case any subscriber is not receiving them fast\nenough\nrospy.init_node('talker', anonymous=True)\n\nInitialize this node with the name talker\nShould be anonymous\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\ftalker.py\nrate = rospy.Rate(10) # 10hz\n\nCreate an object of type Rate and can be referred to by the\nvariable named rate\nrospy.Rate() is a constructor\nThe argument 10 specifies the frequency in Hertz\n\nrate.sleep() will be used later which will put this node to\nsleep for 1/frequency second (0.1 second in this case).\nwhile not rospy.is_shutdown():\n\nA loop is a fairly standard rospy construct.\nThis node should stop if it gets a signal to shutdown.\nrospy.is shutdown() return True if this node gets the\nsignal to shutdown.\nThe other way to simply shut this node down is by pressing\nCtrl-c on the console that this node is executing.\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\ftalker.py\n\nhello_str = \"hello world %s\" % rospy.get_time()\n\nCreate a string named hello str.\nrospy.get time() returns the current time.\nrospy.loginfo(hello_str)\n\nPrint the message on the console screen that this node is\nexecuting.\nStore the message into node\u2019s log file\nCan also be viewed from any console using rqt console\ncommand.\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\ftalker.py\npub.publish(hello_str)\n\nPublish the message\nrate.sleep()\n\nPut this node to sleep for 0.1 second (10hz).\nif __name__ == '__main__':\ntry:\ntalker()\nexcept rospy.ROSInterruptException:\npass\n\nInterrupt may be generated by rospy.Rate.sleep()\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\fSubscriber\n\nA subscriber subscribes to receive data from topics\nA subscriber has to have a name (for debugging purpose)\nA topic is a named bus (need a name as well)\nA topic must have a type associated with it (strongly typed)\nDo not need to care who are publishers (anonymous)\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\flistener.py\n\n#!/usr/bin/env python\nimport rospy\nfrom std_msgs.msg import String\ndef callback(data):\nrospy.loginfo(rospy.get_caller_id() + \"I heard %s\", data.data)\ndef listener():\nrospy.init_node('listener', anonymous=True)\nrospy.Subscriber(\"chatter\", String, callback)\nrospy.spin()\nif __name__ == '__main__':\nlistener()\n\nDo not forget to make this file executable (chmod +x talker.py)\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\flistener.py\nrospy.init_node('listener', anonymous=True)\n\nInitialize this node with the name listener\nShould be anonymous\nrospy.Subscriber(\"chatter\", String, callback)\n\nSubscribes to the topic named chatter.\nThe type of message is String (must be the same as the\npublisher)\nEvery time a message is received, call the function\ncallback()\nrospy.spin()\n\nKeeps the node from exiting until the node has been\nshutdown.\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\fThe callback() Function\n\nThis callback() function will be called every time it receives\na message on the topic chatter:\ndef callback(data):\nrospy.loginfo(rospy.get_caller_id() + \"I heard %s\", data.data)\n\nThe argument data has type std msgs/String\nA data of this type consists of one component of type string\nnamed data\n\nTo access the actual string, we use data.data like C structure\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\fmessenger.py\n\nSometimes your ROS node may behave like a middle man\nSubscribes to a topic to receive data\nProcesses data\nPublishes new data to a new topic\n\nExample: Blob Detection\nSubscribes to a topic to receive a series of image\nFor each image received, find blobs of a specific color, and\ncalculate the middle point of each blob\nPublishes an array of coordinates of blobs\n\nThis type of node subscribes as well as publishes data\nExample:\nmessenger node subscribe to the topic chatter1 and publish\nthe modified message to the topic chatter2\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\fmessenger.py\n#!/usr/bin/env python\nimport rospy\nfrom std_msgs.msg import String\npub = rospy.Publisher('chatter2', String, queue_size=10)\ndef chatterCallback(data):\nglobal pub\nmessenger_str = \"Messenger heard %s\" % data.data\npub.publish(messenger_str);\ndef messenger():\nrospy.init_node('messenger', anonymous=True)\nrospy.Subscriber(\"chatter1\", String, chatterCallback)\nrospy.spin()\nif __name__ == '__main__':\nmessenger()\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\fNotes about Distributed Computing\nROS environment is similar to distributed environment.\nRequires a number of processes to work together to finish a\njob.\nIf a process dies, the whole thing will not work properly.\nWe need to make sure that each process is alive until the job is\ndone.\n\nGenerally, if a program finish, its process dies (exit).\nIn ROS, there are two main methods to keep a process alive.\nLoop until a job is done.\nwhile not rospy.is_shutdown():\n:\n\nUse rospy.spin() which is almost the same as\nwhile not rospy.is_shutdown():\npass\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\fLoop vs rospy.spin()\n\nYou should use either loop or rospy.spin() but not both in\nthe same program.\nUse loop when your program has to continuously checking\nand doing something.\nContinuously publishes messages.\nContinuously monitors variable values.\n\nUse rospy.spin() when you program can go to sleep until\nsomething happen.\nProcess an image or data whenever it is available (subscriber),\npublish just one message, and go back to sleep.\n\nOften time, the choice of loop vs rospy.spin() is not clear.\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\fCleanup\nA process (node) can be killed by pressing Ctrl-c or receiving\nthe kill signal from ROS master\nSometime, a process needs to clean up before exit.\nIf robot is currently moving, stop it first and exit\nOtherwise, robot may keep moving non-stop\n\nCleanup can be done by registering shutdown hooks:\ndef cleanup():\n# stop the robot\nrospy.on_shutdown(cleanup)\n\nWhen the program receive the kill signal, it will call the\nfunction cleanup() first and then exit\nA node can manually shut itself down.\nrospy.signal_shutdown(\"I am done.\")\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\fAbout Callback Functions\nRecall the listener node.\n#!/usr/bin/env python\nimport rospy\nfrom std_msgs.msg import String\ndef callback(data):\nrospy.loginfo(rospy.get_caller_id() + \"I heard %s\", data.data)\ndef listener():\nrospy.init_node('listener', anonymous=True)\nrospy.Subscriber(\"chatter\", String, callback)\nrospy.spin()\nif __name__ == '__main__':\nlistener()\n\nThe function callback() will be called every time a message\nfrom the topic chatter is received.\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\fAbout Callback Functions\nRule of Thumb:\nA callback function should be as short as possible\nIf you need to process a large data (e.g., image), the\nprocessing part should not be in the callback function\nThe callback should simply update global variables and let the\nprogram process it when it is ready to process.\n:\nfrom copy import deepcopy\nimage = None\ndef aCallback(data):\nimage = data\ndef mainProgram():\n:\nwhile not rospy.is_shutdown():\n:\ncopyImage = deepcopy(image)\n# process copyImage\n:\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\frostopic\nrostopic is a tool related to topics in ROS environment\nIt allows us to perform the following:\nList the current active topics\nShow messages publish to a specific topic on screen\nPublish a message to a specific topic\nShow information about a specific topic\nShow type of a specific topic\n\nSuppose we run the talker and listener node using the\nfollowing commands in three separate console screen:\nroscore\nrosrun mypackage talker.py\nrosrun mypackage listener.py\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\frostopic\nUse\nrostopic list\n\nto list the active topics on the console screen.\n/chatter\n/rosout\n/rosout_agg\n\nUse\nrostopic echo chatter\n\nto show messages published to the topic chatter\ndata: hello from talker 1463668746.93\n--data: hello from talker 1463668747.03\n--data: hello from talker 1463668747.23\n--data: hello from talker 1463668747.33\n--:\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\frostopic\nUse\nrostopic info chatter\n\nto show information about the topic chatter\nType: std_msgs/String\nPublishers:\n* /talker_4544_1463668570440 (http://r2-d2:56659/)\nSubscribers:\n* /listener_4723_1463668575785 (http://r2-d2:35408)\n\nUse\nrostopic type chatter\n\nto show the type of the topic chatter\nstd_msgs/String\n\nTo publish the string \"Blah Blah Blah\" to the topic\nchatter\nrostopic pub /chatter std_msgs/String \"Blah Blah Blah\"\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\fWorkspace Directory\n\nYour workspace directory is\n/home/[username]/cs1567/src/mypackage\n\nAll Python program should be in\n/home/[username]/cs1567/src/mypackage/scripts\n\nor any subdirectory under the above directory.\nTo quickly change to ../mypackage directory, you can simply\ntype\nroscd my[Tab]\n\nwhere [Tab] is the Tab button on your keyboard.\n\nThumrongsak Kosiyatrakul\n\nPublisher and Subscriber\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}