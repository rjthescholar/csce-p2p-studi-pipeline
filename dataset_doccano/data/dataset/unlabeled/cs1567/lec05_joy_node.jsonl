{"id": 219, "segment": "unlabeled", "course": "cs1567", "lec": "lec05_joy_node", "text": "Joy Node\nThumrongsak Kosiyatrakul\n\nThumrongsak Kosiyatrakul\n\nJoy Node\n\n\fJoy Node\njoy_node node communicates with a joystick connected via a\nUSB port\nProvide hardware abstractions\nTo receive data from a joystick, simply subscribe for messages\nfrom the topic named joy\nTo start a joy node, use the following series of commands on a\nconsole screen:\nrosparam set joy_node/dev \"/dev/input/js1\"\nrosrun joy joy_node\n\nMake sure roscore has been executed in another console\nscreen\nThe command rostopic list should show the following:\n/diagnostics\n/joy\n/rosout\n/rosout_agg\nThumrongsak Kosiyatrakul\n\nJoy Node\n\n\fXbox 360 Controller\n\nThumrongsak Kosiyatrakul\n\nJoy Node\n\n\fTopic joy\n\nThe joy node publishes joystick data to a topic named joy\nThe type of message is Joy\nThe message of type Joy is a data structure consisting of the\nfollowing components:\n1\n2\n3\n\nData structure named header,\nArray of floating-point numbers named axes, and\nArray of integers named buttons\n\nThumrongsak Kosiyatrakul\n\nJoy Node\n\n\fbuttons\nArray of integers named buttons are organized as follows:\nIndex Button name on the controller\n0\nA\n1\nB\n2\nX\n3\nY\n4\nLB\n5\nRB\n6\nback\n7\nstart\n8\npower\n9\nButton stick left\n10\nButton stick right\n\nThumrongsak Kosiyatrakul\n\nJoy Node\n\n\faxes\n\nArray of floating-point numbers named axes are organized as\nfollows:\nIndex Button name on the controller\n0\nLeft/Right Axis stick left\n1\nUp/Down Axis stick left\n2\nLT\n3\nLeft/Right Axis stick right\n4\nUp/Down Axis stick right\n5\nRT\n6\ncross key left/right\n7\ncross key up/down\n\nThumrongsak Kosiyatrakul\n\nJoy Node\n\n\fTopic joy\n\nNote that if the state of joystick does not change, no messages\nwill be published to the topic joy\nIf you run the command\nrostopic echo -c joy\n\nyou may not see anything\nIf you press the button A, you may see something as shown below:\nheader:\nseq: 265\nstamp:\nsecs: 1464206519\nnsecs: 129026422\nframe_id: `'\naxes: [-0.0, -0.0, 1.0, -0.0, -0.0, 1.0, 0.0, 0.0]\nbuttons: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nThumrongsak Kosiyatrakul\n\nJoy Node\n\n\fTopic joy\n\nTo import the data structure joy to your Python script, you need\nto insert the following statement in the beginning:\n#!/usr/bin/env python\nimport rospy\nfrom sensor_msgs.msg import Joy\n\nTo subscribe to the topic joy of type Joy, use the following\nstatement in your Python script:\nrospy.Subscriber(\"joy\", Joy, callback)\n\nThumrongsak Kosiyatrakul\n\nJoy Node\n\n\fExample\n\n#!/usr/bin/env python\nimport rospy\nfrom sensor_msgs.msg import Joy\ndef callback(data):\nprint data.buttons[0]\nprint data.axes[0]\ndef testJoy():\nrospy.init_node(\"joystick\", anonymous=True)\nrospy.Subscriber(\"joy\", Joy, callback)\nrospy.spin()\nif __name__ == '__main__':\ntestJoy()\n\nThumrongsak Kosiyatrakul\n\nJoy Node\n\n\fControlling a Kobuki\nA robot can be controlled by sending a message of type Twist\nTo import the data structure Twist, use the following command:\nfrom geometry_msgs.msg import Twist\n\nTo create a variable named command of type Twist, use the\nfollowing command:\ncommand = Twist()\n\nWe will only use two components:\ncommand.linear.x\nValue can be between -1.0 to 1.0\nPositive value makes the robot moves forward\nNegative value makes the robot moves backward\n\ncommand.angular.z\nValue can be between -1.0 to 1.0\nPositive value makes the robot turns to its left\nNegative value makes the robot turns to its right\nThumrongsak Kosiyatrakul\n\nJoy Node\n\n\fControlling a Kobuki\nTo control the robot, the message of type Twist must be publish\nto the following topic:\n/mobile_base/commands/velocity\n\nExamples:\nIf you want to make the robot moves forward in a straight line at\nhalf speed:\ncommand.linear.x = 0.5\ncommand.angular.z = 0.0\n\nFor example, if you want to make the robot makes a stationary\nturn to its left at half speed:\ncommand.linear.x = 0.0\ncommand.angular.z = 0.5\n\nFor example, if you want to make the robot moves forward and\nturn at the same time:\ncommand.linear.x = 0.5\ncommand.angular.z = 0.5\n\nThumrongsak Kosiyatrakul\n\nJoy Node\n\n\fUse Simulator (for now)\nROS allows you to see how robot moves in a virtual world\nFirst, run the following command in a console screen:\nroslaunch kobuki_softnode full.launch\nOpen a new console screen and run the following command:\nrosrun rviz rviz\n\nIn rviz\n1\n2\n\nOn the left pane, set Fixed Frame to /odom\nAt the bottom left corner, click Add and choose RobotModel\n\nYou should see an image of a Kobuki robot on your screen\nAt this point, if you publish a command of type Twist, robot\nwill move according to the command\n\nThumrongsak Kosiyatrakul\n\nJoy Node\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}