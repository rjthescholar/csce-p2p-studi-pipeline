{"id": 248, "segment": "unlabeled", "course": "cs1567", "lec": "lec14_pid_control", "text": "PID Control\nThumrongsak Kosiyatrakul\ntkosiyat@cs.pitt.edu\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fTracking an Object\n\nImagine that there is an object somewhere in front of our\nrobot\n\nCamera\nField\u2212of\u2212View\n\nHow to turn the robot such that it points directly to the\nobject?\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fTracking an Object\nAgain, top view\n\nCamera\nField\u2212of\u2212View\n\nHere is from the camera point-of-view\n\nThe object detection node may say it sees an object at\n(150, 160)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fTracking an Object\nThe goal is to turn the robot such that it points directly to\nthe object the object\n\nHere is from the camera point-of-view\n\nThe object detection node may say it sees an object at\n(320, 160)\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fTracking an Object\n\nThe simplified goal is to make the object appear at the center\nof the camera (x-coordinate is at 320)\nExecution (same as one of our lab)\nIf x-coordinate of the object is in between 315 to 325, stop\nmoving\nlinear.x = 0.0 and angular.z = 0.0\n\nIf x-coordinate of the object is less than 315 (on the left side),\ntell the robot to make a stationary turn left at speed 0.5\nlinear.x = 0.0 and angular.z = 0.5\n\nIf x-coordinate of the object is greater than 325 (on the right\nside), tell the robot to make a stationary turn right at speed\n0.5\nlinear.x = 0.0 and angular.z = -0.5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fTracking an Object\nThis simplified method is suitable for tracking a stationary\nobject\nAn object that does not move or move very slowly\n\nIf an object moves around the robot in circle:\nAt speed greater than 0.5 radian per second\nEventually the robot will loose track of the object because the\nobject moves out of the camera view\n\nAt speed exactly 0.5 radian per second\nThe robot will not be able to point itself directly at the object\nThe robot will not loose track of the object but will not be\nable to catch up with it\n\nAt speed less than 0.5 radian per second\nThe robot will be able to catch up with the object eventually\nThe robot will stutter (not smooth) especially when the object\nis at the center a move slightly out of center\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fControl System\n\nA control system is a device, or set of devices, that manages,\ncommands, directs or regulates the behavior of other devices\nor systems\nIn robot application, the control system is the software that\nmanage/regulate commands that control the behavior of\nrobots\nTells a robot to move faster or slower\nTells a robot to turn left or right\n\nType of Control Systems:\nOpen Loop: Output is generated purely based on the current\ninput\nClosed Loop: Current output is taken into consideration and\ncorrections are made based on feedback\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fOpen Loop Examples\n\nProject 1 (Sennott Rover): We adjust the command\nlinear.x and angular.z based only on the odometry data.\nSpeed\n1.0\n\n0.5\n\n0.5\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\n1.0\n\n1.5\n\nPID Control\n\nDistance\n\n\fOpen Loop Examples\nLab (Blob Tracker): We adjust the command angular.z\nbased only on the pointer location and the odometry data\n315\n\n480\n\nangular.z\n0.5\n\n325\n\nangular.z\n0.0\n\n640\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\nangular.z\n\u22120.5\n\n\fOpen Loop Examples\nLab (Blob Tracker): For better follower, you may have\nvarious speed based on the pointer location and the odometry\ndata\n315\n\n480\n\nangular.z\n0.8\n\nangular.z\n0.5\n\nangular.z\n0.3\n\n325\n\nangular.z\n0.0\n\n640\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\nangular.z\n\u22120.3\n\nangular.z\n\u22120.5\n\nangular.z\n\u22120.8\n\n\fOpen Loop Examples\nLab (Mouse Tracker): For even better result, the turn speed\nshould be proportional to the distance from center\n315\n\n480\n\nangular.z\n(315 \u2212 center) * delta\n\n325\n\nangular.z\n0.0\n\n640\n\ncenter is the x-coordinate of the object\ndelta \u2265 0\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\nangular.z\n(315 \u2212 center) * delta\n\n\fProblems with Open Loop Control\n\nProblem with object tracking and line following application\nOscillation:\nHard to see when the robot moves at slow speed\nAt faster speed, the robot may oscillate trying to keep at center\n\nLost track:\nThe robot may not turn fast enough\n\nOvercompensate:\nOver shoot the target (cause oscillations)\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fClosed Loop Control\n\nClosed Loop Control\nInput\n\nController\n\nOutput\n\nError\n\nFeedback\n\nThe goal is to generate output signal to minimize the error\nExample: In object tracking application\nInput the location of an object (according to the image)\nThe error is the number of pixels of the object from the center\nof the screen\nThe output is the command (Twist)\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fPID Control\n\nProportional-Integral-Derivative (PID) Controller is a closed\nloop control\nLet\nz(t) be the control value at time t (will be turned in to\nangular.z),\ne(t) be the error at time t (e.g., number of pixel of the center\nof the object to the center of the screen), and\nKp , Ki , Kd are non-negative coefficients\n\nZ t\nz(t) = Kp e(t) + Ki\n\ne(t)dt + Kd\n0\n\nde\ndt\n\nThe meaning of z(t), e(t), e(t)dt, and de\ndt depend on\napplication\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fPID Control\n\nPID:\n\nZ t\nz(t) = Kp e(t) + Ki\n\ne(t)dt + Kd\n0\n\nde\ndt\n\nFrom the above equation z(t) is adjusted based on the\nfollowing:\n1\n2\n3\n\nProportional: magnitude of the error (e(t))\nRt\nIntegral: accumulated magnitude of the error ( 0 e(t)dt), and\nDifferential: speed of error ( de\ndt )\n\nSpecify values of Kp , Ki , and Kd are difficult\nThese values depend on type of application and characteristic\nof the robot\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fProportional\n\nProportional portion of PID\nKp e(t)\nThis term allows you to adjust the speed based on the\nmagnitude of the error\nThe larger the error, the faster the robot should turn\nThe sign of the error effects the sign of the output (direction)\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fDifferential\nDifferential portion of PID\nKd\n\nde\ndt\n\nde\nis the rate of the error\ndt\nThis can be as simple as e(t) \u2212 e(t \u2212 1)\n\nIf the robot turn fast enough, the sign of the rate of the error\nwill be different than the sign of the magnitude of the error\ne(t)\nTo prevent over compensate, we should slow the speed down a\nlittle bit\n\nThis also help when the robot turns too slow, the sign of the\nerror rate will be the same as the magnitude of the error\nwhich makes the robot turn even faster\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fPID Control\n\nSometime P and D portions are not enough\nMoving object:\nThe P part makes the robot turn at the exact speed of the\nobject movement\nThe D part will be 0\nNever be able to catch up with it\n\nBalancing application (Segway)\nThe P and D parts can make it stands on its two wheels\nBut it may slowly drift forward or backward\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fIntegral\n\nIntegral portion of PID\nZ t\nKi\n\ne(t)dt\n0\n\nThis is the accumulating of error over time\nThis helps catching up with moving object\nThis also helps with drifting\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\fFind the values of Kp , Ki , and Kd\n\nPID Control\nZ t\nz(t) = Kp e(t) + Ki\n\ne(t)dt + Kd\n0\n\nde\ndt\n\nThe values of Kp , Ki , and Kd generally based on robot\napplication\nA way to find one these values is simply test it\n\nFirst, find Kp by setting Ki and Kd to 0s\nSlowly adjust Kp until the robot start oscillating\n\nSecond, fix Kp from the first step, setting Ki to 0\nSlowly adjust Kd until the robot stop oscillating\n\nThen, adjusting Ki .\n\nThumrongsak Kosiyatrakul tkosiyat@cs.pitt.edu\n\nPID Control\n\n\f", "label": [[-2, -1, "Concept"]], "Comments": []}