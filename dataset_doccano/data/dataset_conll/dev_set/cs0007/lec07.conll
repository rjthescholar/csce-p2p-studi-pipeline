dev_set|cs0007|lec07
-DOCSTART- -X- -X- O

CS _ _ O
0007 _ _ O
: _ _ O
Introduction _ _ O
to _ _ O
Java _ _ O
Lecture _ _ O
7 _ _ O
Nathan _ _ O
Ong _ _ O
University _ _ O
of _ _ O
Pittsburgh _ _ O
September _ _ O
22 _ _ O
, _ _ O
2016 _ _ O

FUNCTIONS _ _ B-Concept

Functions _ _ B-Concept
• _ _ O
A _ _ O
function _ _ B-Concept
is _ _ O
similar _ _ O
to _ _ O
its _ _ O
mathematical _ _ O
counterpart _ _ O
• _ _ O
f _ _ O
( _ _ O
x _ _ O
) _ _ O
= _ _ O
x2 _ _ O
, _ _ O
plug _ _ O
in _ _ O
3 _ _ O
, _ _ O
get _ _ O
9 _ _ O
• _ _ O
Contains _ _ O
several _ _ O
more _ _ O
parts _ _ O

Java _ _ B-Concept
Functions _ _ I-Concept
• _ _ O
Takes _ _ O
in _ _ O
zero _ _ O
or _ _ O
more _ _ O
parameters _ _ B-Concept
, _ _ O
processes _ _ O
them _ _ O
in _ _ O
the _ _ O
function _ _ B-Concept
body _ _ I-Concept
, _ _ O
and _ _ O
returns _ _ B-Concept
a _ _ O
result _ _ O
• _ _ O
Imagine _ _ O
going _ _ O
to _ _ O
BestBuyTM _ _ O
and _ _ O
telling _ _ O
them _ _ O
you _ _ O
want _ _ O
your _ _ O
computer _ _ O
fixed _ _ O
. _ _ O
You _ _ O
are _ _ O
telling _ _ O
them _ _ O
to _ _ O
run _ _ O
a _ _ O
fixing _ _ O
function _ _ B-Concept
, _ _ O
with _ _ O
your _ _ O
computer _ _ O
being _ _ O
a _ _ O
parameter _ _ B-Concept
. _ _ O
What _ _ O
you _ _ O
get _ _ O
back _ _ O
is _ _ O
your _ _ O
fixed _ _ O
computer _ _ O
. _ _ O

You _ _ O
Already _ _ O
Have _ _ O
the _ _ O
Power _ _ O
! _ _ O
• _ _ O
You _ _ O
already _ _ O
know _ _ O
how _ _ O
to _ _ O
call _ _ O
functions _ _ B-Concept
! _ _ O
Static _ _ B-Concept
: _ _ O
ClassName.functionName _ _ O
( _ _ O
< _ _ O
parameters _ _ O
> _ _ O
) _ _ O
; _ _ O
Non-static _ _ O
: _ _ O
objectName.functionName _ _ O
( _ _ O
< _ _ O
parameter _ _ O
s _ _ O
> _ _ O
) _ _ O
; _ _ O
• _ _ O
How _ _ O
do _ _ O
I _ _ O
make _ _ O
my _ _ O
own _ _ O
? _ _ O

Function _ _ B-Concept
Components _ _ O
1 _ _ O
. _ _ O
2 _ _ O
. _ _ O
3 _ _ O
. _ _ O
Function _ _ B-Concept
4 _ _ O
. _ _ O
Header _ _ B-Concept
5 _ _ O
. _ _ O
Function _ _ B-Concept
Body _ _ I-Concept
6 _ _ O
. _ _ O
Visibility _ _ O
type _ _ O
( _ _ O
public _ _ B-Concept
/ _ _ O
protected _ _ B-Concept
/ _ _ O
private _ _ B-Concept
) _ _ O
static _ _ B-Concept
( _ _ O
For _ _ O
now _ _ O
, _ _ O
required _ _ O
) _ _ O
Return _ _ B-Concept
Type _ _ I-Concept
functionName _ _ B-Concept
Parentheses _ _ O
“ _ _ O
( _ _ O
) _ _ O
” _ _ O
– _ _ O
a _ _ O
) _ _ O
b _ _ O
) _ _ O
c _ _ O
) _ _ O
Parameters _ _ B-Concept
Type1 _ _ O
parameterName1 _ _ O
Type2 _ _ O
parameterName2 _ _ O
… _ _ O
Curly _ _ O
Brackets _ _ O
/ _ _ O
Braces _ _ O
“ _ _ O
{ _ _ O
} _ _ O
” _ _ O
– _ _ O
return _ _ B-Concept
a _ _ O
value _ _ O

A _ _ O
Simple _ _ O
Unnecessary _ _ O
Function _ _ B-Concept
• _ _ O
I _ _ O
want _ _ O
this _ _ O
function _ _ B-Concept
to _ _ O
take _ _ O
two _ _ O
doubles _ _ O
and _ _ O
return _ _ O
their _ _ O
sum _ _ O
. _ _ O
• _ _ O
Let _ _ O
us _ _ O
go _ _ O
through _ _ O
the _ _ O
list _ _ O
and _ _ O
see _ _ O
what _ _ O
needs _ _ O
to _ _ O
be _ _ O
incorporated _ _ O
for _ _ O
the _ _ O
function _ _ B-Concept
. _ _ O

Function _ _ B-Concept
Components _ _ O
1 _ _ O
. _ _ O
2 _ _ O
. _ _ O
3 _ _ O
. _ _ O
4 _ _ O
. _ _ O
5 _ _ O
. _ _ O
We _ _ O
’ll _ _ O
just _ _ O
use _ _ O
public _ _ B-Concept
for _ _ O
now _ _ O
. _ _ O
static _ _ B-Concept
( _ _ O
For _ _ O
now _ _ O
, _ _ O
required _ _ O
) _ _ O
What _ _ O
is _ _ O
the _ _ O
Return _ _ B-Concept
Type _ _ I-Concept
? _ _ O
What _ _ O
is _ _ O
an _ _ O
appropriate _ _ O
functionName _ _ B-Concept
? _ _ O
Parentheses _ _ O
“ _ _ O
( _ _ O
) _ _ O
” _ _ O
– _ _ O
What _ _ O
are _ _ O
the _ _ O
parameters _ _ B-Concept
? _ _ O
6 _ _ O
. _ _ O
Curly _ _ O
Brackets _ _ O
/ _ _ O
Braces _ _ O
“ _ _ O
{ _ _ O
} _ _ O
” _ _ O
– _ _ O
– _ _ O
What _ _ O
do _ _ O
we _ _ O
do _ _ O
in _ _ O
the _ _ O
Function _ _ B-Concept
Body _ _ I-Concept
? _ _ O
What _ _ O
do _ _ O
we _ _ O
return _ _ B-Concept
? _ _ O

Return _ _ B-Concept
Type _ _ I-Concept
• _ _ O
What _ _ O
kind _ _ O
of _ _ O
thing _ _ O
are _ _ O
we _ _ O
going _ _ O
to _ _ O
give _ _ O
back _ _ O
to _ _ O
the _ _ O
function _ _ B-Concept
caller _ _ I-Concept
? _ _ O
• _ _ O
“ _ _ O
I _ _ O
want _ _ O
this _ _ O
function _ _ B-Concept
to _ _ O
take _ _ O
two _ _ O
doubles _ _ O
and _ _ O
return _ _ O
their _ _ O
sum _ _ O
. _ _ O
” _ _ O
• _ _ O
The _ _ O
sum _ _ O
of _ _ O
two _ _ O
doubles _ _ O
better _ _ O
be _ _ O
a _ _ O
double _ _ O
. _ _ O

Function _ _ B-Concept
Name _ _ I-Concept
• _ _ O
The _ _ O
function _ _ B-Concept
name _ _ I-Concept
should _ _ O
easily _ _ O
describe _ _ O
what _ _ O
the _ _ O
function _ _ O
does _ _ O
. _ _ O
• _ _ O
“ _ _ O
I _ _ O
want _ _ O
this _ _ O
function _ _ O
to _ _ O
take _ _ O
two _ _ O
doubles _ _ O
and _ _ O
return _ _ O
their _ _ O
sum _ _ O
. _ _ O
” _ _ O
• _ _ O
“ _ _ O
sum _ _ O
” _ _ O
? _ _ O
Probably _ _ O
not _ _ O
enough _ _ O
detail _ _ O
, _ _ O
since _ _ O
there _ _ O
are _ _ O
many _ _ O
types _ _ O
that _ _ O
can _ _ O
be _ _ O
summed _ _ O
. _ _ O
• _ _ O
sumDoubles _ _ O

Parameters _ _ B-Concept
• _ _ O
The _ _ O
required _ _ O
input _ _ O
to _ _ O
the _ _ O
function _ _ B-Concept
. _ _ O
• _ _ O
The _ _ O
data _ _ O
that _ _ O
the _ _ O
function _ _ B-Concept
needs _ _ O
in _ _ O
order _ _ O
to _ _ O
properly _ _ O
execute _ _ O
its _ _ O
duties _ _ O
. _ _ O
• _ _ O
“ _ _ O
I _ _ O
want _ _ O
this _ _ O
function _ _ O
to _ _ O
take _ _ O
two _ _ O
doubles _ _ O
and _ _ O
return _ _ O
their _ _ O
sum _ _ O
. _ _ O
” _ _ O
• _ _ O
Two _ _ O
doubles _ _ O
. _ _ O
• _ _ O
Names _ _ O
? _ _ O

Function _ _ B-Concept
Header _ _ I-Concept
/ _ _ O
/ _ _ O
sums _ _ O
two _ _ O
doubles _ _ O
together _ _ O
public _ _ O
static _ _ O
double _ _ O
sumDoubles _ _ O
( _ _ O
double _ _ O
addend1 _ _ O
, _ _ O
double _ _ O
addend2 _ _ O
) _ _ O

Function _ _ B-Concept
Body _ _ I-Concept
… _ _ O
( _ _ O
Function _ _ B-Concept
Header _ _ I-Concept
) _ _ O
{ _ _ O
? _ _ O
? _ _ O
? _ _ O
} _ _ O

Function _ _ B-Concept
Body _ _ I-Concept
… _ _ O
( _ _ O
Function _ _ B-Concept
Header _ _ I-Concept
) _ _ O
{ _ _ O
double _ _ O
sum _ _ O
= _ _ O
addend1 _ _ O
+ _ _ O
addend2 _ _ O
; _ _ O
return _ _ O
sum _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
( _ _ O
double _ _ O
, _ _ O
double _ _ O
) _ _ O

Function _ _ B-Concept
Body _ _ I-Concept
… _ _ O
( _ _ O
Function _ _ B-Concept
Header _ _ I-Concept
) _ _ O
{ _ _ O
return _ _ O
addend1 _ _ O
+ _ _ O
addend2 _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
( _ _ O
double _ _ O
, _ _ O
double _ _ O
) _ _ O

Function _ _ B-Concept
Body _ _ I-Concept
public _ _ B-Concept
class _ _ O
Functions _ _ B-Concept
{ _ _ O
… _ _ O
( _ _ O
Function _ _ B-Concept
) _ _ O
public _ _ B-Concept
static _ _ B-Concept
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
double _ _ O
sum _ _ O
= _ _ O
sumDoubles _ _ O
( _ _ O
2.5 _ _ O
, _ _ O
3.9 _ _ O
) _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
sum _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Functions _ _ B-Concept

import _ _ O
java.util.Scanner _ _ O
; _ _ O
public _ _ O
class _ _ O
AddingMachine _ _ O
{ _ _ O
… _ _ O
( _ _ O
Function _ _ B-Concept
) _ _ O
public _ _ B-Concept
static _ _ B-Concept
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
Scanner _ _ O
scan _ _ O
= _ _ O
new _ _ O
Scanner _ _ O
( _ _ O
System.in _ _ O
) _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
"Please _ _ O
enter _ _ O
a _ _ O
number _ _ O
: _ _ O
" _ _ O
) _ _ O
; _ _ O
double _ _ O
firstNum _ _ O
= _ _ O
scan.nextDouble _ _ O
( _ _ O
) _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
"Please _ _ O
enter _ _ O
a _ _ O
second _ _ O
number _ _ O
: _ _ O
" _ _ O
) _ _ O
; _ _ O
double _ _ O
secondNum _ _ O
= _ _ O
scan.nextDouble _ _ O
( _ _ O
) _ _ O
; _ _ O
double _ _ O
sum _ _ O
= _ _ O
sumDoubles _ _ O
( _ _ O
firstNum _ _ O
, _ _ O
secondNum _ _ O
) _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
"The _ _ O
sum _ _ O
of _ _ O
" _ _ O
+ _ _ O
firstNum _ _ O
+ _ _ O
" _ _ O
and _ _ O
" _ _ O
+ _ _ O
secondNum _ _ O
+ _ _ O
" _ _ O
equals _ _ O
" _ _ O
+ _ _ O
sum _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
AddingMachine _ _ O

Scope _ _ B-Concept
• _ _ O
Why _ _ O
did _ _ O
we _ _ O
need _ _ O
to _ _ O
submit _ _ O
firstNum _ _ O
and _ _ O
secondNum _ _ O
to _ _ O
sumDoubles _ _ O
? _ _ O
• _ _ O
Why _ _ O
ca _ _ O
n’t _ _ O
sumDoubles _ _ O
just _ _ O
use _ _ O
the _ _ O
already _ _ O
created _ _ O
variables _ _ B-Concept
? _ _ O
• _ _ O
This _ _ O
relates _ _ O
to _ _ O
scope _ _ B-Concept
. _ _ O

Scope _ _ B-Concept
Confidential _ _ O
Secret _ _ O
Top _ _ O
Secret _ _ O

Scope _ _ B-Concept
public _ _ B-Concept
class _ _ O
AddingMachine _ _ O
public _ _ B-Concept
static _ _ B-Concept
void _ _ O
main _ _ O
public _ _ B-Concept
static _ _ B-Concept
double _ _ O
sumDoubl _ _ O
es _ _ O

Passing-in _ _ O
Parameters _ _ B-Concept
• _ _ O
The _ _ O
act _ _ O
of _ _ O
providing _ _ O
parameters _ _ B-Concept
in _ _ O
a _ _ O
function _ _ B-Concept
call _ _ I-Concept
is _ _ O
called _ _ O
Passing-in _ _ B-Concept
. _ _ O
• _ _ O
Java _ _ O
has _ _ O
two _ _ O
kinds _ _ O
of _ _ O
passing-in _ _ B-Concept
. _ _ O

Pass-by-Value _ _ B-Concept
• _ _ O
Passing-in _ _ B-Concept
a _ _ O
copy _ _ O
of _ _ O
the _ _ O
value _ _ O
of _ _ O
the _ _ O
variable _ _ O
. _ _ O
• _ _ O
Any _ _ O
change _ _ O
made _ _ O
to _ _ O
the _ _ O
variable _ _ O
is _ _ O
not _ _ O
reflected _ _ O
when _ _ O
the _ _ O
function _ _ B-Concept
returns _ _ B-Concept
. _ _ O
• _ _ O
All _ _ O
primitive _ _ O
type _ _ O
parameters _ _ O
are _ _ O
passby-value _ _ B-Concept
. _ _ O

Pass-by-Reference _ _ B-Concept
• _ _ O
Passing-in _ _ B-Concept
the _ _ I-Concept
actual _ _ O
variable _ _ O
. _ _ O
• _ _ O
Any _ _ O
change _ _ O
made _ _ O
to _ _ O
the _ _ O
variable _ _ O
IS _ _ O
reflected _ _ O
when _ _ O
the _ _ O
function _ _ B-Concept
returns _ _ B-Concept
, _ _ O
UNLESS _ _ O
the _ _ O
parameter _ _ B-Concept
name _ _ O
is _ _ O
REASSIGNED _ _ O
. _ _ O
• _ _ O
All _ _ O
non-primitive _ _ O
type _ _ O
parameters _ _ B-Concept
are _ _ O
pass-by-reference _ _ B-Concept
. _ _ O

Another _ _ O
Simple _ _ O
Function _ _ B-Concept
• _ _ O
I _ _ O
want _ _ O
a _ _ O
function _ _ B-Concept
that _ _ O
prints _ _ O
a _ _ O
nice _ _ O
British _ _ O
greeting _ _ O
, _ _ O
complete _ _ O
with _ _ O
the _ _ O
person _ _ O
’s _ _ O
full _ _ O
name _ _ O
. _ _ O
Source _ _ O
: _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.bbcamerica.com _ _ O
/ _ _ O
anglophen _ _ O
ia _ _ O
/ _ _ O
2011 _ _ O
/ _ _ O
07 _ _ O
/ _ _ O
five-slang-ways-to-say-hello _ _ O
/ _ _ O

Function _ _ B-Concept
Components _ _ O
1 _ _ O
. _ _ O
2 _ _ O
. _ _ O
3 _ _ O
. _ _ O
4 _ _ O
. _ _ O
5 _ _ O
. _ _ O
public _ _ B-Concept
static _ _ B-Concept
What _ _ O
is _ _ O
the _ _ O
Return _ _ B-Concept
Type _ _ I-Concept
? _ _ O
What _ _ O
is _ _ O
an _ _ O
appropriate _ _ O
functionName _ _ B-Concept
? _ _ O
Parentheses _ _ O
“ _ _ O
( _ _ O
) _ _ O
” _ _ O
– _ _ O
What _ _ O
are _ _ O
the _ _ O
parameters _ _ B-Concept
? _ _ O
6 _ _ O
. _ _ O
Curly _ _ O
Brackets _ _ O
/ _ _ O
Braces _ _ O
“ _ _ O
{ _ _ O
} _ _ O
” _ _ O
– _ _ O
– _ _ O
What _ _ O
do _ _ O
we _ _ O
do _ _ O
in _ _ O
the _ _ O
Function _ _ B-Concept
Body _ _ I-Concept
? _ _ O
What _ _ O
do _ _ O
we _ _ O
return _ _ B-Concept
? _ _ O

Return _ _ B-Concept
Type _ _ I-Concept
• _ _ O
Does _ _ O
this _ _ O
function _ _ O
even _ _ O
need _ _ O
to _ _ O
return _ _ O
any _ _ O
data _ _ O
or _ _ O
information _ _ O
? _ _ O
• _ _ O
No _ _ O
, _ _ O
so _ _ O
we _ _ O
should _ _ O
use _ _ O
void _ _ B-Concept
as _ _ O
our _ _ O
return _ _ B-Concept
type _ _ I-Concept
. _ _ O

Function _ _ B-Concept
Header _ _ I-Concept
public _ _ O
static _ _ O
void _ _ O
britishGreeting _ _ O
( _ _ O
String _ _ O
fullName _ _ O
) _ _ O

Function _ _ B-Concept
Body _ _ I-Concept
… _ _ O
( _ _ O
Function _ _ B-Concept
Header _ _ I-Concept
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"Wotcha _ _ O
" _ _ O
+ _ _ O
fullName _ _ O
+ _ _ O
" _ _ O
. _ _ O
Fancy _ _ O
a _ _ O
cuppa _ _ O
? _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
( _ _ O
String _ _ O
) _ _ O
/ _ _ O
/ _ _ O
Note _ _ O
no _ _ O
return _ _ B-Concept
statement _ _ O



