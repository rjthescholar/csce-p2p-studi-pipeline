dev_set|cs0007|lec17
-DOCSTART- -X- -X- O

CS _ _ O
0007 _ _ O
: _ _ O
Introduction _ _ O
to _ _ O
Java _ _ O
Lecture _ _ O
17 _ _ O
Nathan _ _ O
Ong _ _ O
University _ _ O
of _ _ O
Pittsburgh _ _ O
November _ _ O
8 _ _ O
, _ _ O
2016 _ _ O

Main _ _ O
Portions _ _ O
of _ _ O
OOP _ _ B-Concept
• _ _ O
Building _ _ O
a _ _ O
class _ _ B-Concept
• _ _ O
Determining _ _ O
inter-class _ _ B-Concept
relationships _ _ I-Concept

Class _ _ B-Concept
Components _ _ O
• _ _ O
Class-level _ _ B-Concept
/ _ _ I-Concept
Instance _ _ I-Concept
Variables _ _ I-Concept
• _ _ O
Methods _ _ B-Concept
• _ _ O
Constructor _ _ B-Concept
( _ _ O
s _ _ O
) _ _ O

Inter-class _ _ B-Concept
Relationships _ _ I-Concept
• _ _ O
Building _ _ O
a _ _ O
single _ _ O
class _ _ B-Concept
is _ _ O
useless _ _ O
. _ _ O
It _ _ O
needs _ _ O
to _ _ O
be _ _ O
used _ _ O
in _ _ O
context _ _ O
. _ _ O
• _ _ O
There _ _ O
are _ _ O
two _ _ O
main _ _ O
relationships _ _ O
between _ _ O
classes _ _ B-Concept
– _ _ O
Sub _ _ B-Concept
/ _ _ O
Super _ _ B-Concept
class _ _ I-Concept
– _ _ O
Ownership _ _ B-Concept

Subclasses _ _ B-Concept
• _ _ O
A _ _ O
subclass _ _ B-Concept
of _ _ O
a _ _ O
class _ _ B-Concept
is _ _ O
a _ _ O
more _ _ O
specific _ _ O
type _ _ O
of _ _ O
a _ _ O
class _ _ B-Concept
• _ _ O
Also _ _ O
known _ _ O
as _ _ O
the _ _ O
child _ _ B-Concept
of _ _ O
a _ _ O
class _ _ B-Concept
• _ _ O
For _ _ O
example _ _ O
, _ _ O
a _ _ O
tree _ _ O
would _ _ O
be _ _ O
a _ _ O
subclass _ _ B-Concept
of _ _ O
plant _ _ O
• _ _ O
Subclasses _ _ B-Concept
are _ _ O
meant _ _ O
to _ _ O
expand _ _ O
upon _ _ O
the _ _ O
behavior _ _ O
of _ _ O
their _ _ O
more _ _ O
general _ _ O
parent _ _ B-Concept
class _ _ I-Concept
• _ _ O
You _ _ O
can _ _ O
have _ _ O
several _ _ O
subclasses _ _ B-Concept

Superclasses _ _ B-Concept
• _ _ O
On _ _ O
the _ _ O
converse _ _ O
, _ _ O
a _ _ O
superclass _ _ B-Concept
is _ _ O
a _ _ O
more _ _ O
abstract _ _ O
and _ _ O
general _ _ O
version _ _ O
of _ _ O
a _ _ O
class _ _ B-Concept
• _ _ O
Also _ _ O
known _ _ O
as _ _ O
the _ _ O
parent _ _ B-Concept
of _ _ O
a _ _ O
class _ _ B-Concept
• _ _ O
Plant _ _ O
is _ _ O
the _ _ O
superclass _ _ B-Concept
of _ _ O
Tree _ _ O
• _ _ O
You _ _ O
can _ _ O
only _ _ O
have _ _ O
one _ _ O
superclass _ _ B-Concept

Declaring _ _ O
a _ _ O
Class _ _ B-Concept
to _ _ O
be _ _ O
a _ _ O
Subtype _ _ B-Concept
• _ _ O
In _ _ O
order _ _ O
to _ _ O
declare _ _ O
a _ _ O
class _ _ O
’s _ _ O
parent _ _ B-Concept
, _ _ O
use _ _ O
the _ _ O
keyword _ _ O
extends _ _ B-Concept
• _ _ O
( _ _ O
Classes _ _ B-Concept
that _ _ O
do _ _ O
not _ _ O
have _ _ O
a _ _ O
parent _ _ B-Concept
class _ _ B-Concept
implicitly _ _ O
extend _ _ O
the _ _ O
Object _ _ B-Concept
class _ _ B-Concept
) _ _ O

Inheritance _ _ B-Concept
• _ _ O
A _ _ O
subclass _ _ B-Concept
inherits _ _ B-Concept
all _ _ O
non-private _ _ O
fields _ _ B-Concept
and _ _ O
methods _ _ O
• _ _ O
Accessing _ _ O
these _ _ O
fields _ _ B-Concept
and _ _ O
methods _ _ B-Concept
requires _ _ O
the _ _ O
keyword _ _ O
super _ _ B-Concept
. _ _ O
• _ _ O
( _ _ O
Note _ _ O
: _ _ O
you _ _ O
may _ _ O
also _ _ O
be _ _ O
able _ _ O
to _ _ O
access _ _ O
private _ _ O
fields _ _ B-Concept
with _ _ O
the _ _ O
parent _ _ B-Concept
class _ _ I-Concept
’s _ _ O
getters _ _ B-Concept
and _ _ O
setters _ _ B-Concept
, _ _ O
which _ _ O
may _ _ O
be _ _ O
safer _ _ O
) _ _ O

Restricting _ _ O
Access _ _ O
• _ _ O
What _ _ O
if _ _ O
you _ _ O
want _ _ O
a _ _ O
field _ _ B-Concept
or _ _ O
method _ _ B-Concept
to _ _ O
be _ _ O
inherited _ _ B-Concept
, _ _ O
but _ _ O
still _ _ O
do _ _ O
not _ _ O
necessarily _ _ O
want _ _ O
it _ _ O
to _ _ O
be _ _ O
accessed _ _ O
by _ _ O
anyone _ _ O
? _ _ O
• _ _ O
Use _ _ O
the _ _ O
keyword _ _ O
protected _ _ B-Concept
• _ _ O
Remember _ _ O
, _ _ O
releasing _ _ O
your _ _ O
access _ _ O
to _ _ O
these _ _ O
fields _ _ O
and _ _ O
methods _ _ O
should _ _ O
only _ _ O
be _ _ O
done _ _ O
when _ _ O
necessary _ _ O

Regarding _ _ O
Constructors _ _ B-Concept
• _ _ O
Constructors _ _ B-Concept
can _ _ O
not _ _ O
be _ _ O
inherited _ _ B-Concept
, _ _ O
even _ _ O
though _ _ O
they _ _ O
are _ _ O
public _ _ O
• _ _ O
However _ _ O
, _ _ O
you _ _ O
can _ _ O
, _ _ O
and _ _ O
should _ _ O
, _ _ O
use _ _ O
them _ _ O
from _ _ O
the _ _ O
subclass _ _ B-Concept
’s _ _ I-Concept
constructor _ _ B-Concept
, _ _ O
to _ _ O
ensure _ _ O
complete _ _ O
initialization _ _ O
• _ _ O
You _ _ O
can _ _ O
call _ _ O
the _ _ O
parent _ _ B-Concept
’s _ _ O
constructor _ _ B-Concept
by _ _ O
using _ _ O
the _ _ O
keyword _ _ O
super _ _ B-Concept

Calling _ _ O
Superclass _ _ B-Concept
Constructor _ _ B-Concept
• _ _ O
Unlike _ _ O
calling _ _ O
an _ _ O
overloaded _ _ O
constructor _ _ B-Concept
of _ _ O
the _ _ O
same _ _ O
class _ _ O
, _ _ O
calling _ _ O
a _ _ O
superclass _ _ B-Concept
constructor _ _ B-Concept
does _ _ O
not _ _ O
need _ _ O
to _ _ O
be _ _ O
the _ _ O
only _ _ O
line _ _ O
of _ _ O
code _ _ O
• _ _ O
However _ _ O
, _ _ O
it _ _ O
must _ _ O
still _ _ O
be _ _ O
the _ _ O
first _ _ O
line _ _ O
of _ _ O
code _ _ O
in _ _ O
the _ _ O
constructor _ _ B-Concept

Example _ _ O
public _ _ O
class _ _ O
Vehicle _ _ O
{ _ _ O
private _ _ O
final _ _ O
int _ _ O
numWheels _ _ O
; _ _ O
… _ _ O
public _ _ O
Vehicle _ _ O
( _ _ O
int _ _ O
numWheels _ _ O
) _ _ O
{ _ _ O
this.numWheels _ _ O
= _ _ O
numWheels _ _ O
; _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
double _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Vehicle _ _ O

Example _ _ O
public _ _ O
class _ _ O
Car _ _ O
extends _ _ O
Vehicle _ _ O
{ _ _ O
private _ _ O
int _ _ O
numPassengers _ _ O
; _ _ O
private _ _ O
double _ _ O
gasRemaining _ _ O
; _ _ O
… _ _ O
public _ _ O
Car _ _ O
( _ _ O
int _ _ O
numPassengers _ _ O
, _ _ O
double _ _ O
gasRemaining _ _ O
) _ _ O
{ _ _ O
super _ _ O
( _ _ O
4 _ _ O
) _ _ O
; _ _ O
this.numPassengers _ _ O
= _ _ O
numPassengers _ _ O
; _ _ O
this.gasRemaining _ _ O
= _ _ O
gasRemaining _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
constructor _ _ O
( _ _ O
int _ _ O
, _ _ O
double _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Plant _ _ O

What _ _ O
If _ _ O
the _ _ O
Superclass _ _ B-Concept
’s _ _ I-Concept
Method _ _ O
Definition _ _ O
Does _ _ O
Not _ _ O
Fit _ _ O
the _ _ O
Class _ _ B-Concept
’s _ _ I-Concept
? _ _ O
• _ _ O
We _ _ O
can _ _ O
override _ _ B-Concept
the _ _ O
definition _ _ O
by _ _ O
using _ _ O
the _ _ O
exact _ _ O
same _ _ O
function _ _ O
header _ _ O
• _ _ O
The _ _ O
line _ _ O
directly _ _ O
above _ _ O
function _ _ O
header _ _ O
must _ _ O
have _ _ O
“ _ _ O
@Override _ _ B-Concept
” _ _ O
only _ _ O
• _ _ O
As _ _ O
an _ _ O
example _ _ O
, _ _ O
our _ _ O
Car _ _ O
class _ _ O
should _ _ O
probably _ _ O
use _ _ O
the _ _ O
original _ _ O
“ _ _ O
move _ _ O
” _ _ O
method _ _ O
, _ _ O
rather _ _ O
than _ _ O
creating _ _ O
an _ _ O
entirely _ _ O
new _ _ O
“ _ _ O
drive _ _ O
” _ _ O
method _ _ O
that _ _ O
does _ _ O
something _ _ O
similar _ _ O

Override _ _ B-Concept
public _ _ O
class _ _ O
Car _ _ O
extends _ _ O
Vehicle _ _ O
{ _ _ O
private _ _ O
int _ _ O
numPassengers _ _ O
; _ _ O
private _ _ O
double _ _ O
gasRemaining _ _ O
; _ _ O
… _ _ O
@Override _ _ B-Concept
public _ _ O
boolean _ _ O
move _ _ O
( _ _ O
double _ _ O
dist _ _ O
) _ _ O
{ _ _ O
return _ _ O
super.move _ _ O
( _ _ O
dist*10.0 _ _ O
) _ _ O
& _ _ O
& _ _ O
( _ _ O
this.gasRemaining _ _ O
> _ _ O
0 _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
double _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Plant _ _ O

Overriding _ _ B-Concept
• _ _ O
I _ _ O
can _ _ O
still _ _ O
reference _ _ O
the _ _ O
original _ _ O
method _ _ B-Concept
using _ _ O
the _ _ O
super _ _ B-Concept
keyword _ _ O
• _ _ O
Unless _ _ O
your _ _ O
overridden _ _ B-Concept
method _ _ B-Concept
totally _ _ O
discards _ _ O
the _ _ O
functionality _ _ O
of _ _ O
the _ _ O
superclass _ _ B-Concept
’s _ _ O
method _ _ B-Concept
, _ _ O
you _ _ O
should _ _ O
call _ _ O
the _ _ O
superclass _ _ B-Concept
’s _ _ O
method _ _ B-Concept
at _ _ O
least _ _ O
once _ _ O

Note _ _ O
• _ _ O
You _ _ O
can _ _ O
not _ _ O
override _ _ B-Concept
constructors _ _ B-Concept

Ownership _ _ B-Concept
• _ _ O
Ownership _ _ B-Concept
is _ _ O
simply _ _ O
one _ _ O
class _ _ B-Concept
using _ _ O
another _ _ O
as _ _ O
a _ _ O
property _ _ O
• _ _ O
A _ _ O
Car _ _ O
may _ _ O
have _ _ O
an _ _ O
Engine _ _ O
, _ _ O
a _ _ O
Radio _ _ O
, _ _ O
and _ _ O
an _ _ O
Owner _ _ O
, _ _ O
depending _ _ O
on _ _ O
what _ _ O
you _ _ O
need _ _ O
• _ _ O
A _ _ O
Car _ _ O
’s _ _ O
superclass _ _ B-Concept
and _ _ O
subclasses _ _ O
certainly _ _ O
are _ _ O
not _ _ O
Engine _ _ O
, _ _ O
Radio _ _ O
, _ _ O
and _ _ O
Owner _ _ O

Using _ _ O
the _ _ O
Classes _ _ B-Concept
public _ _ O
class _ _ O
Garage _ _ O
{ _ _ O
private _ _ O
Vehicle _ _ O
[ _ _ O
] _ _ O
vehicles _ _ O
; _ _ O
… _ _ O
public _ _ O
Garage _ _ O
( _ _ O
int _ _ O
capacity _ _ O
) _ _ O
{ _ _ O
this.vehicles _ _ O
= _ _ O
new _ _ O
Vehicle _ _ O
[ _ _ O
capacity _ _ O
] _ _ O
; _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
vehicles.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
vehicles _ _ O
[ _ _ O
i _ _ O
] _ _ O
= _ _ O
null _ _ O
; _ _ O
} _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
constructor _ _ B-Concept
( _ _ O
int _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ B-Concept
Garage _ _ O

Using _ _ O
the _ _ O
Classes _ _ B-Concept
public _ _ O
class _ _ O
Garage _ _ O
{ _ _ O
… _ _ O
public _ _ O
boolean _ _ O
addVehicle _ _ O
( _ _ O
Vehicle _ _ O
vehicle _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
Note _ _ O
: _ _ O
there _ _ O
is _ _ O
a _ _ O
better _ _ O
way _ _ O
! _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
vehicles.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
if _ _ O
( _ _ O
vehicles _ _ O
[ _ _ O
i _ _ O
] _ _ O
= _ _ O
= _ _ O
null _ _ O
) _ _ O
{ _ _ O
vehicles _ _ O
[ _ _ O
i _ _ O
] _ _ O
= _ _ O
vehicle _ _ O
; _ _ O
return _ _ O
true _ _ O
; _ _ O
} _ _ O
} _ _ O
return _ _ O
false _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
( _ _ O
Vehicle _ _ O
) _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Garage _ _ O

QUESTIONS _ _ O
? _ _ O

Modeling _ _ B-Concept
a _ _ I-Concept
Problem _ _ I-Concept
“ _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
services _ _ O
foreign _ _ O
cars _ _ O
, _ _ O
and _ _ O
specializes _ _ O
in _ _ O
servicing _ _ O
cars _ _ O
made _ _ O
by _ _ O
Mercedes _ _ O
, _ _ O
Porsche _ _ O
, _ _ O
and _ _ O
BMW _ _ O
. _ _ O
When _ _ O
a _ _ O
customer _ _ O
brings _ _ O
a _ _ O
car _ _ O
to _ _ O
the _ _ O
shop _ _ O
, _ _ O
the _ _ O
manager _ _ O
gets _ _ O
the _ _ O
customer _ _ O
’s _ _ O
name _ _ O
, _ _ O
address _ _ O
, _ _ O
and _ _ O
telephone _ _ O
number _ _ O
. _ _ O
Then _ _ O
the _ _ O
manager _ _ O
determines _ _ O
the _ _ O
make _ _ O
, _ _ O
model _ _ O
, _ _ O
and _ _ O
year _ _ O
of _ _ O
the _ _ O
car _ _ O
, _ _ O
and _ _ O
gives _ _ O
the _ _ O
customer _ _ O
a _ _ O
service _ _ O
quote _ _ O
. _ _ O
The _ _ O
service _ _ O
quote _ _ O
shows _ _ O
the _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
, _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
, _ _ O
sales _ _ O
tax _ _ O
, _ _ O
and _ _ O
total _ _ O
estimated _ _ O
charges _ _ O
. _ _ O
” _ _ O
Source _ _ O
: _ _ O
Starting _ _ O
Out _ _ O
with _ _ O
Java _ _ O
: _ _ O
From _ _ O
Control _ _ O
Structures _ _ O
through _ _ O
Objects _ _ O
by _ _ O
Tony _ _ O
Gaddis _ _ O

Find _ _ O
the _ _ O
Nouns _ _ O
“ _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
services _ _ O
foreign _ _ O
cars _ _ O
, _ _ O
and _ _ O
specializes _ _ O
in _ _ O
servicing _ _ O
cars _ _ O
made _ _ O
by _ _ O
Mercedes _ _ O
, _ _ O
Porsche _ _ O
, _ _ O
and _ _ O
BMW _ _ O
. _ _ O
When _ _ O
a _ _ O
customer _ _ O
brings _ _ O
a _ _ O
car _ _ O
to _ _ O
the _ _ O
shop _ _ O
, _ _ O
the _ _ O
manager _ _ O
gets _ _ O
the _ _ O
customer _ _ O
’s _ _ O
name _ _ O
, _ _ O
address _ _ O
, _ _ O
and _ _ O
telephone _ _ O
number _ _ O
. _ _ O
Then _ _ O
the _ _ O
manager _ _ O
determines _ _ O
the _ _ O
make _ _ O
, _ _ O
model _ _ O
, _ _ O
and _ _ O
year _ _ O
of _ _ O
the _ _ O
car _ _ O
, _ _ O
and _ _ O
gives _ _ O
the _ _ O
customer _ _ O
a _ _ O
service _ _ O
quote _ _ O
. _ _ O
The _ _ O
service _ _ O
quote _ _ O
shows _ _ O
the _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
, _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
, _ _ O
sales _ _ O
tax _ _ O
, _ _ O
and _ _ O
total _ _ O
estimated _ _ O
charges _ _ O
. _ _ O
” _ _ O

Coalescing _ _ O
address _ _ O
BMW _ _ O
car _ _ O
quote _ _ O
cars _ _ O
customer _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
charges _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
foreign _ _ O
cars _ _ O
Porsche _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
sales _ _ O
tax _ _ O
make _ _ O
service _ _ O
manager _ _ O
Mercedes _ _ O
model _ _ O
shop _ _ O
telephone _ _ O
number _ _ O
total _ _ O
estimated _ _ O
name _ _ O
year _ _ O

Noun _ _ O
Out _ _ O
of _ _ O
Scope _ _ O
address _ _ O
BMW _ _ O
car _ _ O
cars _ _ O
customer _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
charges _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
foreign _ _ O
cars _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
make _ _ O
manager _ _ O
Mercedes _ _ O
model _ _ O
Porsche _ _ O
sales _ _ O
tax _ _ O
service _ _ O
quote _ _ O
shop _ _ O
telephone _ _ O
number _ _ O
total _ _ O
estimated _ _ O
name _ _ O
year _ _ O

Subtypes _ _ B-Concept
address _ _ O
BMW _ _ O
car _ _ O
cars _ _ O
customer _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
foreign _ _ O
cars _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
make _ _ O
manager _ _ O
Mercedes _ _ O
model _ _ O
name _ _ O
Porsche _ _ O
sales _ _ O
tax _ _ O
service _ _ O
quote _ _ O
shop _ _ O
telephone _ _ O
number _ _ O
total _ _ O
estimated _ _ O
charges _ _ O
year _ _ O
Whether _ _ O
these _ _ O
subtypes _ _ B-Concept
are _ _ O
specific _ _ O
objects _ _ O
( _ _ O
instances _ _ B-Concept
) _ _ O
or _ _ O
more _ _ O
specific _ _ O
types _ _ O
of _ _ O
cars _ _ O
( _ _ O
subclasses _ _ B-Concept
) _ _ O
will _ _ O
depend _ _ O
on _ _ O
your _ _ O
needs _ _ O
. _ _ O
In _ _ O
this _ _ O
scenario _ _ O
, _ _ O
there _ _ O
is _ _ O
no _ _ O
need _ _ O
to _ _ O
represent _ _ O
them _ _ O
as _ _ O
classes _ _ O
. _ _ O

Simple _ _ B-Concept
Properties _ _ I-Concept
address _ _ O
foreign _ _ O
cars _ _ O
BMW _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
car _ _ O
make _ _ O
service _ _ O
quote _ _ O
cars _ _ O
manager _ _ O
customer _ _ O
Mercedes _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
model _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
name _ _ O
Porsche _ _ O
sales _ _ O
tax _ _ O
shop _ _ O
telephone _ _ O
number _ _ O
total _ _ O
estimated _ _ O
charges _ _ O
year _ _ O
Simple _ _ B-Concept
properties _ _ I-Concept
can _ _ O
be _ _ O
composed _ _ O
of _ _ O
primitives _ _ B-Concept
or _ _ O
preexisting _ _ O
object _ _ O
definitions _ _ O
, _ _ O
and _ _ O
fall _ _ O
under _ _ O
a _ _ O
particular _ _ O
object _ _ O
class _ _ O
. _ _ O

Simple _ _ B-Concept
Properties _ _ I-Concept
address _ _ O
BMW _ _ O
car _ _ O
cars _ _ O
customer _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
charges _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
foreign _ _ O
cars _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
make _ _ O
manager _ _ O
Mercedes _ _ O
model _ _ O
Porsche _ _ O
sales _ _ O
tax _ _ O
service _ _ O
quote _ _ O
shop _ _ O
telephone _ _ O
number _ _ O
total _ _ O
estimated _ _ O
name _ _ O
year _ _ O
A _ _ O
car _ _ O
had _ _ O
three _ _ O
simple _ _ B-Concept
properties _ _ I-Concept
in _ _ O
our _ _ O
scenario _ _ O
. _ _ O
What _ _ O
types _ _ O
would _ _ O
they _ _ O
be _ _ O
? _ _ O

Simple _ _ B-Concept
Properties _ _ I-Concept
address _ _ O
BMW _ _ O
car _ _ O
cars _ _ O
customer _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
charges _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
foreign _ _ O
cars _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
make _ _ O
manager _ _ O
Mercedes _ _ O
model _ _ O
Porsche _ _ O
sales _ _ O
tax _ _ O
service _ _ O
quote _ _ O
shop _ _ O
telephone _ _ O
number _ _ O
total _ _ O
estimated _ _ O
name _ _ O
year _ _ O
A _ _ O
car _ _ O
had _ _ O
three _ _ O
simple _ _ B-Concept
properties _ _ I-Concept
in _ _ O
our _ _ O
scenario _ _ O
. _ _ O
What _ _ O
types _ _ O
would _ _ O
they _ _ O
be _ _ O
? _ _ O

Simple _ _ B-Concept
Properties _ _ I-Concept
address _ _ O
BMW _ _ O
car _ _ O
cars _ _ O
customer _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
charges _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
foreign _ _ O
cars _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
make _ _ O
manager _ _ O
Mercedes _ _ O
model _ _ O
Porsche _ _ O
sales _ _ O
tax _ _ O
service _ _ O
quote _ _ O
shop _ _ O
telephone _ _ O
number _ _ O
total _ _ O
estimated _ _ O
name _ _ O
year _ _ O
A _ _ O
customer _ _ O
had _ _ O
three _ _ O
simple _ _ B-Concept
properties _ _ I-Concept
in _ _ O
our _ _ O
scenario _ _ O
. _ _ O
What _ _ O
types _ _ O
would _ _ O
they _ _ O
be _ _ O
? _ _ O

Simple _ _ B-Concept
Properties _ _ I-Concept
address _ _ O
BMW _ _ O
car _ _ O
cars _ _ O
customer _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
charges _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
foreign _ _ O
cars _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
make _ _ O
manager _ _ O
Mercedes _ _ O
model _ _ O
Porsche _ _ O
sales _ _ O
tax _ _ O
service _ _ O
quote _ _ O
shop _ _ O
telephone _ _ O
number _ _ O
total _ _ O
estimated _ _ O
name _ _ O
year _ _ O
A _ _ O
customer _ _ O
had _ _ O
three _ _ O
simple _ _ B-Concept
properties _ _ I-Concept
in _ _ O
our _ _ O
scenario _ _ O
. _ _ O
What _ _ O
types _ _ O
would _ _ O
they _ _ O
be _ _ O
? _ _ O

Simple _ _ B-Concept
Properties _ _ I-Concept
address _ _ O
BMW _ _ O
car _ _ O
cars _ _ O
customer _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
charges _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
foreign _ _ O
cars _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
make _ _ O
manager _ _ O
Mercedes _ _ O
model _ _ O
Porsche _ _ O
sales _ _ O
tax _ _ O
service _ _ O
quote _ _ O
shop _ _ O
telephone _ _ O
number _ _ O
total _ _ O
estimated _ _ O
name _ _ O
year _ _ O
A _ _ O
service _ _ O
quote _ _ O
had _ _ O
four _ _ O
simple _ _ B-Concept
properties _ _ I-Concept
in _ _ O
our _ _ O
scenario _ _ O
. _ _ O
What _ _ O
types _ _ O
would _ _ O
they _ _ O
be _ _ O
? _ _ O

Simple _ _ B-Concept
Properties _ _ I-Concept
address _ _ O
BMW _ _ O
car _ _ O
cars _ _ O
customer _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
charges _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
foreign _ _ O
cars _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
make _ _ O
manager _ _ O
Mercedes _ _ O
model _ _ O
Porsche _ _ O
sales _ _ O
tax _ _ O
service _ _ O
quote _ _ O
shop _ _ O
telephone _ _ O
number _ _ O
total _ _ O
estimated _ _ O
name _ _ O
year _ _ O
A _ _ O
service _ _ O
quote _ _ O
had _ _ O
four _ _ O
simple _ _ B-Concept
properties _ _ I-Concept
in _ _ O
our _ _ O
scenario _ _ O
. _ _ O
What _ _ O
types _ _ O
would _ _ O
they _ _ O
be _ _ O
? _ _ O

Who _ _ O
Owns _ _ O
Everything _ _ O
? _ _ O
address _ _ O
foreign _ _ O
cars _ _ O
BMW _ _ O
Joe _ _ O
’s _ _ O
Automotive _ _ O
Shop _ _ O
car _ _ O
make _ _ O
service _ _ O
quote _ _ O
cars _ _ O
manager _ _ O
customer _ _ O
Mercedes _ _ O
estimated _ _ O
labor _ _ O
charges _ _ O
model _ _ O
estimated _ _ O
parts _ _ O
charges _ _ O
name _ _ O
Porsche _ _ O
sales _ _ O
tax _ _ O
shop _ _ O
telephone _ _ O
number _ _ O
total _ _ O
estimated _ _ O
charges _ _ O
year _ _ O
Our _ _ O
scenario _ _ O
revolves _ _ O
around _ _ O
the _ _ O
automotive _ _ O
shop _ _ O
, _ _ O
so _ _ O
this _ _ O
will _ _ O
hold _ _ O
the _ _ O
main _ _ O
method _ _ O
and _ _ O
will _ _ O
be _ _ O
the _ _ O
overarching _ _ O
class _ _ O
. _ _ O

Code _ _ O
on _ _ O
the _ _ O
board _ _ O
! _ _ O



