dev_set|cs0449|lec11
-DOCSTART- -X- -X- O

11 _ _ O
How _ _ O
Programs _ _ O
Are _ _ O
Managed _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
Introduction _ _ O
to _ _ O
Systems _ _ O
Software _ _ O
Luis _ _ O
Oliveira _ _ O
( _ _ O
with _ _ O
content _ _ O
borrowed _ _ O
from _ _ O
wilkie _ _ O
and _ _ O
Vinicius _ _ O
Petrucci _ _ O
) _ _ O

Where _ _ O
’s _ _ O
the _ _ O
Lie _ _ O
? _ _ O
And _ _ O
other _ _ O
operating _ _ O
systems _ _ O
questions _ _ O
. _ _ O
2 _ _ O

On _ _ O
the _ _ O
last _ _ O
episode _ _ O
… _ _ O
• _ _ O
Programs _ _ O
are _ _ O
loaded _ _ O
into _ _ O
memory _ _ O
by _ _ O
the _ _ O
operating _ _ O
system _ _ O
. _ _ O
• _ _ O
They _ _ O
have _ _ O
to _ _ O
exist _ _ O
in _ _ O
memory _ _ O
before _ _ O
they _ _ O
can _ _ O
be _ _ O
executed _ _ O
. _ _ O
Kernel _ _ B-Concept
Memory _ _ I-Concept
stack _ _ B-Concept
libz.so _ _ B-Concept
.data _ _ B-Concept
libz.so _ _ B-Concept
.text _ _ B-Concept
• _ _ O
Programs _ _ O
go _ _ O
through _ _ O
a _ _ O
lot _ _ O
of _ _ O
trouble _ _ O
to _ _ O
have _ _ O
all _ _ O
their _ _ O
data _ _ O
/ _ _ O
code _ _ O
in _ _ O
memory _ _ O
. _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
3 _ _ O
3 _ _ O

The _ _ O
Lie _ _ O
• _ _ O
Programs _ _ O
are _ _ O
told _ _ O
that _ _ O
they _ _ O
are _ _ O
the _ _ O
only _ _ O
things _ _ O
running _ _ O
… _ _ O
• _ _ O
The _ _ O
only _ _ O
things _ _ O
in _ _ O
memory _ _ O
… _ _ O
• _ _ O
We _ _ O
know _ _ O
that _ _ O
this _ _ O
is _ _ O
not _ _ O
true _ _ O
! _ _ O
• _ _ O
Operating _ _ O
Systems _ _ O
are _ _ O
big _ _ O
liars _ _ O
crafting _ _ O
illusions _ _ O
. _ _ O
4 _ _ O

The _ _ O
Truth _ _ O
• _ _ O
In _ _ O
reality _ _ O
, _ _ O
many _ _ O
programs _ _ O
can _ _ O
be _ _ O
running _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
. _ _ O
• _ _ O
Each _ _ O
program _ _ O
, _ _ O
when _ _ O
running _ _ O
, _ _ O
is _ _ O
typically _ _ O
called _ _ O
a _ _ O
process _ _ B-Concept
. _ _ O
▪ _ _ O
A _ _ O
multitasking _ _ B-Concept
OS _ _ I-Concept
is _ _ O
( _ _ O
a _ _ O
rather _ _ O
common _ _ O
) _ _ O
one _ _ O
that _ _ O
supports _ _ O
concurrent _ _ B-Concept
processes _ _ I-Concept
. _ _ O
• _ _ O
The _ _ O
OS _ _ O
must _ _ O
handle _ _ O
switching _ _ O
from _ _ O
one _ _ O
process _ _ B-Concept
to _ _ O
another _ _ O
. _ _ O
▪ _ _ O
Which _ _ O
processes _ _ B-Concept
get _ _ O
to _ _ O
run _ _ O
? _ _ O
▪ _ _ O
What _ _ O
if _ _ O
you _ _ O
have _ _ O
more _ _ O
processes _ _ B-Concept
than _ _ O
CPUs _ _ O
? _ _ O
▪ _ _ O
When _ _ O
do _ _ O
you _ _ O
switch _ _ B-Concept
from _ _ O
one _ _ O
to _ _ O
another _ _ O
? _ _ O
▪ _ _ O
What _ _ O
if _ _ O
one _ _ O
is _ _ O
more _ _ O
urgent _ _ O
? _ _ O
? _ _ O
5 _ _ O

My _ _ O
process _ _ B-Concept
is _ _ O
one _ _ O
of _ _ O
method _ _ O
… _ _ O
• _ _ O
A _ _ O
process _ _ B-Concept
is _ _ O
an _ _ O
abstraction _ _ O
representing _ _ O
a _ _ O
single _ _ O
instance _ _ O
of _ _ O
a _ _ O
program _ _ O
. _ _ O
▪ _ _ O
An _ _ O
executable _ _ B-Concept
represents _ _ O
the _ _ O
initial _ _ O
state _ _ O
of _ _ O
a _ _ O
program _ _ O
and _ _ O
thus _ _ O
the _ _ O
process _ _ B-Concept
. _ _ O
▪ _ _ O
A _ _ O
program _ _ O
can _ _ O
be _ _ O
instantiated _ _ O
multiple _ _ O
times _ _ O
, _ _ O
if _ _ O
needed _ _ O
. _ _ O
▪ _ _ O
Each _ _ O
one _ _ O
would _ _ O
be _ _ O
a _ _ O
separate _ _ O
process _ _ B-Concept
… _ _ O
of _ _ O
the _ _ O
same _ _ O
program _ _ O
. _ _ O
▪ _ _ O
Note _ _ O
: _ _ O
A _ _ O
processor _ _ O
is _ _ O
the _ _ O
hardware _ _ O
unit _ _ O
that _ _ O
executes _ _ O
a _ _ O
process _ _ B-Concept
. _ _ O
( _ _ O
makes _ _ O
sense _ _ O
! _ _ O
! _ _ O
) _ _ O
• _ _ O
The _ _ O
Operating _ _ O
System _ _ O
defines _ _ O
what _ _ O
a _ _ O
process _ _ B-Concept
and _ _ O
its _ _ O
abstraction _ _ O
is _ _ O
. _ _ O
▪ _ _ O
There _ _ O
is _ _ O
an _ _ O
OS _ _ B-Concept
representation _ _ O
and _ _ O
metadata _ _ O
associated _ _ O
with _ _ O
a _ _ O
process _ _ B-Concept
. _ _ O
▪ _ _ O
The _ _ O
OS _ _ O
maintains _ _ O
two _ _ O
key _ _ O
lies _ _ O
: _ _ O
• _ _ O
The _ _ O
control _ _ B-Concept
flow _ _ I-Concept
( _ _ O
exclusive _ _ O
use _ _ O
of _ _ O
CPU _ _ O
) _ _ O
: _ _ O
as _ _ O
defined _ _ O
by _ _ O
the _ _ O
code _ _ O
( _ _ O
this _ _ O
lecture _ _ O
) _ _ O
• _ _ O
The _ _ O
memory _ _ B-Concept
layout _ _ I-Concept
( _ _ O
exclusive _ _ O
use _ _ O
of _ _ O
memory _ _ O
) _ _ O
: _ _ O
defined _ _ O
by _ _ O
executable _ _ O
/ _ _ O
code _ _ O
( _ _ O
next _ _ O
lecture _ _ O
) _ _ O
• _ _ O
We _ _ O
are _ _ O
focusing _ _ O
on _ _ O
the _ _ O
control _ _ B-Concept
flow _ _ I-Concept
, _ _ O
here _ _ O
. _ _ O
▪ _ _ O
How _ _ O
do _ _ O
we _ _ O
determine _ _ O
when _ _ O
a _ _ O
program _ _ O
runs _ _ O
? _ _ O
When _ _ O
does _ _ O
the _ _ O
lie _ _ O
… _ _ O
break _ _ O
down _ _ O
? _ _ O
6 _ _ O

CPU _ _ B-Concept
Scheduling _ _ I-Concept
Eeny _ _ O
Meeny _ _ O
Miney _ _ O
Moe _ _ O
7 _ _ O

The _ _ O
Reality _ _ O
• _ _ O
Let _ _ O
us _ _ O
say _ _ O
that _ _ O
we _ _ O
have _ _ O
a _ _ O
machine _ _ O
with _ _ O
four _ _ O
separate _ _ O
CPUs _ _ O
. _ _ O
▪ _ _ O
You _ _ O
could _ _ O
run _ _ O
four _ _ O
processes _ _ B-Concept
concurrently _ _ O
( _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
) _ _ O
relatively _ _ O
easily _ _ O
. _ _ O
▪ _ _ O
What _ _ O
about _ _ O
the _ _ O
fifth _ _ O
? _ _ O
stack _ _ B-Concept
stack _ _ B-Concept
stack _ _ B-Concept
stack _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
CPU _ _ O
State _ _ O
: _ _ O
Registers _ _ B-Concept
, _ _ O
8 _ _ O

Multiplexing _ _ B-Concept
the _ _ O
CPU _ _ O
• _ _ O
Truth _ _ O
be _ _ O
told _ _ O
, _ _ O
we _ _ O
often _ _ O
have _ _ O
fewer _ _ O
resources _ _ O
than _ _ O
needed _ _ O
. _ _ O
▪ _ _ O
Sharing _ _ O
a _ _ O
common _ _ O
resource _ _ O
is _ _ O
called _ _ O
multiplexing _ _ B-Concept
. _ _ O
• _ _ O
Now _ _ O
, _ _ O
consider _ _ O
a _ _ O
machine _ _ O
with _ _ O
a _ _ O
single _ _ O
CPU _ _ O
. _ _ O
Process _ _ B-Concept
stack _ _ B-Concept
.bss _ _ O
• _ _ O
We _ _ O
often _ _ O
want _ _ O
to _ _ O
run _ _ O
something _ _ O
in _ _ O
the _ _ O
foreground _ _ O
. _ _ O
▪ _ _ O
Word _ _ O
processor _ _ O
, _ _ O
web _ _ O
browser _ _ O
, _ _ O
minesweeper _ _ O
… _ _ O
whatever _ _ O
. _ _ O
.data _ _ O
• _ _ O
We _ _ O
still _ _ O
want _ _ O
some _ _ O
things _ _ O
running _ _ O
the _ _ O
background _ _ O
… _ _ O
.text _ _ O
• _ _ O
We _ _ O
need _ _ O
to _ _ O
switch _ _ O
from _ _ O
one _ _ O
process _ _ O
to _ _ O
another _ _ O
at _ _ O
particular _ _ O
times _ _ O
. _ _ O
CPU _ _ O
State _ _ O
: _ _ O
Registers _ _ O
, _ _ O
▪ _ _ O
Music _ _ O
player _ _ O
, _ _ O
virus _ _ O
scanner _ _ O
, _ _ O
chat _ _ O
client _ _ O
. _ _ O
▪ _ _ O
Yet _ _ O
… _ _ O
we _ _ O
have _ _ O
to _ _ O
keep _ _ O
the _ _ O
illusion _ _ O
that _ _ O
the _ _ O
program _ _ O
is _ _ O
uninterrupted _ _ O
… _ _ O
CPU _ _ O
9 _ _ O

Naïve _ _ O
Campbell _ _ O
was _ _ O
great _ _ O
in _ _ O
The _ _ O
Craft _ _ O
( _ _ O
1996 _ _ O
) _ _ O
• _ _ O
One _ _ O
way _ _ O
is _ _ O
to _ _ O
run _ _ O
processes _ _ B-Concept
sequentially _ _ O
( _ _ O
the _ _ O
naïve _ _ O
solution _ _ O
) _ _ O
▪ _ _ O
When _ _ O
one _ _ O
process _ _ B-Concept
ends _ _ O
… _ _ O
run _ _ O
the _ _ O
next _ _ O
. _ _ O
▪ _ _ O
Yet _ _ O
that _ _ O
’s _ _ O
not _ _ O
very _ _ O
flexible _ _ O
. _ _ O
( _ _ O
Stop _ _ O
your _ _ O
music _ _ O
player _ _ O
to _ _ O
open _ _ O
a _ _ O
PDF _ _ O
) _ _ O
• _ _ O
Humans _ _ O
are _ _ O
in _ _ O
the _ _ O
mix _ _ O
! _ _ O
We _ _ O
need _ _ O
computers _ _ O
to _ _ O
be _ _ O
useful _ _ O
to _ _ O
us _ _ O
. _ _ O
stack _ _ B-Concept
stack _ _ B-Concept
stack _ _ B-Concept
stack _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
Memory _ _ O
CPU _ _ O
10 _ _ O

The _ _ O
cruel _ _ O
passage _ _ O
of _ _ O
time _ _ O
• _ _ O
To _ _ O
multiplex _ _ B-Concept
the _ _ O
CPU _ _ O
, _ _ O
we _ _ O
quickly _ _ O
switch _ _ O
from _ _ O
process _ _ B-Concept
to _ _ O
process _ _ B-Concept
. _ _ O
• _ _ O
The _ _ O
OS _ _ O
retains _ _ O
/ _ _ O
restores _ _ O
the _ _ O
state _ _ O
( _ _ O
context _ _ B-Concept
) _ _ O
of _ _ O
the _ _ O
process _ _ B-Concept
. _ _ O
▪ _ _ O
The _ _ O
OS _ _ O
must _ _ O
store _ _ O
this _ _ O
as _ _ O
a _ _ O
form _ _ O
of _ _ O
process _ _ B-Concept
metadata _ _ O
in _ _ O
memory _ _ O
. _ _ O
stack _ _ B-Concept
stack _ _ B-Concept
stack _ _ B-Concept
stack _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
CPU _ _ O
State _ _ O
A _ _ O
: _ _ O
Registers _ _ B-Concept
, _ _ O
CPU _ _ O
State _ _ O
B _ _ O
: _ _ O
Registers _ _ B-Concept
, _ _ O
CPU _ _ O
State _ _ O
C _ _ O
: _ _ O
Registers _ _ B-Concept
, _ _ O
CPU _ _ O
State _ _ O
D _ _ O
: _ _ O
Registers _ _ B-Concept
, _ _ O
Memory _ _ O
CPU _ _ O
11 _ _ O

The _ _ O
Context _ _ B-Concept
Switch _ _ I-Concept
• _ _ O
When _ _ O
an _ _ O
Operating _ _ B-Concept
System _ _ I-Concept
goes _ _ O
from _ _ O
one _ _ O
process _ _ B-Concept
to _ _ O
another _ _ O
, _ _ O
it _ _ O
performs _ _ O
a _ _ O
context _ _ B-Concept
switch _ _ I-Concept
. _ _ O
• _ _ O
This _ _ O
swaps _ _ O
out _ _ O
the _ _ O
CPU _ _ O
state _ _ O
of _ _ O
one _ _ O
process _ _ B-Concept
for _ _ O
the _ _ O
next _ _ O
one _ _ O
to _ _ O
run _ _ O
. _ _ O
1 _ _ O
. _ _ O
Store _ _ O
registers _ _ B-Concept
( _ _ O
including _ _ O
stack _ _ B-Concept
pointer _ _ I-Concept
and _ _ O
program _ _ B-Concept
counter _ _ I-Concept
) _ _ O
to _ _ O
memory _ _ O
. _ _ O
2 _ _ O
. _ _ O
Determine _ _ O
next _ _ O
process _ _ B-Concept
to _ _ O
run _ _ O
. _ _ O
3 _ _ O
. _ _ O
Load _ _ O
those _ _ O
registers _ _ B-Concept
from _ _ O
memory _ _ O
. _ _ O
Switch _ _ O
memory _ _ B-Concept
space _ _ I-Concept
. _ _ O
( _ _ O
see _ _ O
next _ _ O
lecture _ _ O
: _ _ O
stack _ _ B-Concept
stack _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
Context _ _ B-Concept
Context _ _ B-Concept
CPU _ _ O
State _ _ O
A _ _ O
: _ _ O
Registers _ _ B-Concept
, _ _ O
CPU _ _ O
State _ _ O
B _ _ O
: _ _ O
Registers _ _ B-Concept
, _ _ O
virtual _ _ B-Concept
memory _ _ I-Concept
) _ _ O
4 _ _ O
. _ _ O
Jump _ _ O
to _ _ O
old _ _ O
program _ _ B-Concept
counter _ _ I-Concept
. _ _ O
Go _ _ O
! _ _ O
CPU _ _ O
12 _ _ O

A _ _ O
deeper _ _ O
dive _ _ O
• _ _ O
When _ _ O
we _ _ O
pause _ _ O
a _ _ O
process _ _ B-Concept
… _ _ O
we _ _ O
store _ _ O
the _ _ O
state _ _ O
of _ _ O
registers _ _ B-Concept
( _ _ O
context _ _ B-Concept
) _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
– _ _ O
Process _ _ B-Concept
A _ _ O
Context _ _ B-Concept
( _ _ O
A _ _ O
) _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
– _ _ O
Process _ _ B-Concept
B _ _ O
CPU _ _ O
State _ _ O
13 _ _ O

When _ _ O
is _ _ O
a _ _ O
good _ _ O
time _ _ O
to _ _ O
call _ _ O
you _ _ O
? _ _ O
• _ _ O
When _ _ O
should _ _ O
a _ _ O
program _ _ O
pause _ _ O
and _ _ O
let _ _ O
another _ _ O
one _ _ O
go _ _ O
? _ _ O
• _ _ O
When _ _ O
programs _ _ O
voluntarily _ _ O
pause _ _ O
, _ _ O
this _ _ O
is _ _ O
called _ _ O
cooperative _ _ B-Concept
scheduling _ _ I-Concept
. _ _ O
▪ _ _ O
They _ _ O
may _ _ O
give _ _ O
up _ _ O
control _ _ O
at _ _ O
convenient _ _ O
points _ _ O
such _ _ O
as _ _ O
system _ _ B-Concept
calls _ _ I-Concept
. _ _ O
• _ _ O
We _ _ O
often _ _ O
do _ _ O
not _ _ O
expect _ _ O
this _ _ O
, _ _ O
so _ _ O
modern _ _ O
Operating _ _ B-Concept
Systems _ _ I-Concept
forcibly _ _ O
pause _ _ O
programs _ _ O
from _ _ O
time _ _ O
to _ _ O
time _ _ O
. _ _ O
Called _ _ O
preemptive _ _ B-Concept
scheduling _ _ I-Concept
. _ _ O
▪ _ _ O
Processes _ _ B-Concept
give _ _ O
up _ _ O
control _ _ O
when _ _ O
hardware _ _ O
interjects _ _ O
via _ _ O
an _ _ O
“ _ _ O
interrupt _ _ B-Concept
” _ _ O
▪ _ _ O
How _ _ O
does _ _ O
this _ _ O
work _ _ O
? _ _ O
14 _ _ O

Round _ _ B-Concept
Robin _ _ I-Concept
Scheduling _ _ I-Concept
• _ _ O
One _ _ O
method _ _ O
is _ _ O
to _ _ O
just _ _ O
cycle _ _ O
through _ _ O
each _ _ O
process _ _ B-Concept
each _ _ O
for _ _ O
equal _ _ O
time _ _ O
. _ _ O
▪ _ _ O
This _ _ O
is _ _ O
an _ _ O
element _ _ O
of _ _ O
“ _ _ O
fairness _ _ O
” _ _ O
… _ _ O
each _ _ O
gets _ _ O
equal _ _ O
stake _ _ O
. _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
stack _ _ B-Concept
stack _ _ O
stack _ _ O
stack _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
CPU _ _ O
State _ _ O
A _ _ O
: _ _ O
Registers _ _ O
, _ _ O
CPU _ _ O
State _ _ O
B _ _ O
: _ _ O
Registers _ _ O
, _ _ O
CPU _ _ O
State _ _ O
C _ _ O
: _ _ O
Registers _ _ O
, _ _ O
CPU _ _ O
State _ _ O
D _ _ O
: _ _ O
Registers _ _ O
, _ _ O
Memory _ _ O
CPU _ _ O
15 _ _ O

Problems _ _ O
with _ _ O
“ _ _ O
fairness _ _ O
” _ _ O
• _ _ O
Let _ _ O
’s _ _ O
say _ _ O
I _ _ O
want _ _ O
to _ _ O
play _ _ O
Doom _ _ O
Eternal _ _ O
▪ _ _ O
In _ _ O
round-robin _ _ B-Concept
, _ _ O
I _ _ O
give _ _ O
the _ _ O
video _ _ O
game _ _ O
25 _ _ O
% _ _ O
of _ _ O
my _ _ O
resources _ _ O
. _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
stack _ _ O
stack _ _ O
stack _ _ O
stack _ _ O
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
.bss _ _ B-Concept
.data _ _ B-Concept
.text _ _ B-Concept
CPU _ _ O
State _ _ O
A _ _ O
: _ _ O
Registers _ _ B-Concept
, _ _ O
CPU _ _ O
State _ _ O
B _ _ O
: _ _ O
Registers _ _ B-Concept
, _ _ O
CPU _ _ O
State _ _ O
C _ _ O
: _ _ O
Registers _ _ B-Concept
, _ _ O
CPU _ _ O
State _ _ O
D _ _ O
: _ _ O
Registers _ _ B-Concept
, _ _ O
This _ _ O
should _ _ O
get _ _ O
more _ _ O
priority _ _ B-Concept
. _ _ O
CPU _ _ O
16 _ _ O

I _ _ O
have _ _ O
priorities _ _ B-Concept
! _ _ O
• _ _ O
Round-Robin _ _ B-Concept
schedulers _ _ I-Concept
are _ _ O
fair _ _ O
; _ _ O
then _ _ O
we _ _ O
tweak _ _ O
to _ _ O
meet _ _ O
expectations _ _ O
. _ _ O
▪ _ _ O
How _ _ O
might _ _ O
we _ _ O
add _ _ O
a _ _ O
sense _ _ O
of _ _ O
“ _ _ O
priority _ _ B-Concept
” _ _ O
to _ _ O
the _ _ O
scheduler _ _ B-Concept
? _ _ O
• _ _ O
Let _ _ O
’s _ _ O
look _ _ O
at _ _ O
a _ _ O
visualization _ _ O
of _ _ O
how _ _ O
processes _ _ B-Concept
are _ _ O
currently _ _ O
scheduled _ _ B-Concept
with _ _ O
a _ _ O
round-robin _ _ B-Concept
scheme _ _ O
: _ _ O
( _ _ O
Doom _ _ O
gets _ _ O
only _ _ O
25 _ _ O
% _ _ O
of _ _ O
resources _ _ O
! _ _ O
) _ _ O
 _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
A _ _ O
A _ _ O
B _ _ O
B _ _ O
C _ _ O
50ms _ _ O
/ _ _ O
200ms _ _ O
= _ _ O
25 _ _ O
% _ _ O
17 _ _ O

I _ _ O
have _ _ O
priorities _ _ B-Concept
! _ _ O
• _ _ O
Round-Robin _ _ B-Concept
schedulers _ _ I-Concept
are _ _ O
fair _ _ O
; _ _ O
then _ _ O
we _ _ O
tweak _ _ O
to _ _ O
meet _ _ O
expectations _ _ O
. _ _ O
▪ _ _ O
How _ _ O
might _ _ O
we _ _ O
add _ _ O
a _ _ O
sense _ _ O
of _ _ O
“ _ _ O
priority _ _ B-Concept
” _ _ O
to _ _ O
the _ _ O
scheduler _ _ O
? _ _ O
• _ _ O
We _ _ O
could _ _ O
give _ _ O
some _ _ O
tasks _ _ O
a _ _ O
longer _ _ O
quantum _ _ B-Concept
. _ _ O
▪ _ _ O
A _ _ O
quantum _ _ B-Concept
is _ _ O
the _ _ O
amount _ _ O
of _ _ O
time _ _ O
a _ _ O
task _ _ O
is _ _ O
guaranteed _ _ O
to _ _ O
run _ _ O
. _ _ O
100ms _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
100ms _ _ O
A _ _ O
B _ _ O
C _ _ O
100ms _ _ O
/ _ _ O
250ms _ _ O
= _ _ O
40 _ _ O
% _ _ O
18 _ _ O

I _ _ O
have _ _ O
priorities _ _ B-Concept
! _ _ O
• _ _ O
Round-Robin _ _ B-Concept
schedulers _ _ I-Concept
are _ _ O
fair _ _ O
; _ _ O
then _ _ O
we _ _ O
tweak _ _ O
to _ _ O
meet _ _ O
expectations _ _ O
. _ _ O
▪ _ _ O
How _ _ O
might _ _ O
we _ _ O
add _ _ O
a _ _ O
sense _ _ O
of _ _ O
“ _ _ O
priority _ _ B-Concept
” _ _ O
to _ _ O
the _ _ O
scheduler _ _ O
? _ _ O
• _ _ O
We _ _ O
could _ _ O
increase _ _ O
the _ _ O
chance _ _ O
a _ _ O
specific _ _ O
task _ _ O
is _ _ O
scheduled _ _ B-Concept
. _ _ I-Concept
▪ _ _ O
Round-robin _ _ B-Concept
+ _ _ O
priority _ _ B-Concept
: _ _ O
two _ _ O
queues _ _ O
, _ _ O
switch _ _ O
back _ _ O
and _ _ O
forth _ _ O
and _ _ O
round-robin _ _ B-Concept
within _ _ O
them _ _ O
. _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
50ms _ _ O
A _ _ O
B _ _ O
C _ _ O
100ms _ _ O
/ _ _ O
200ms _ _ O
= _ _ O
50 _ _ O
% _ _ O
19 _ _ O

I _ _ O
have _ _ O
priorities _ _ B-Concept
! _ _ O
• _ _ O
Round-Robin _ _ B-Concept
schedulers _ _ I-Concept
are _ _ O
fair _ _ O
; _ _ O
then _ _ O
we _ _ O
tweak _ _ O
to _ _ O
meet _ _ O
expectations _ _ O
. _ _ O
▪ _ _ O
How _ _ O
might _ _ O
we _ _ O
add _ _ O
a _ _ O
sense _ _ O
of _ _ O
“ _ _ O
priority _ _ B-Concept
” _ _ O
to _ _ O
the _ _ O
scheduler _ _ B-Concept
? _ _ O
• _ _ O
We _ _ O
can _ _ O
then _ _ O
always _ _ O
do _ _ O
some _ _ O
sort _ _ O
of _ _ O
combination _ _ O
. _ _ O
▪ _ _ O
Hybrid _ _ O
approaches _ _ O
do _ _ O
seem _ _ O
very _ _ O
alluring _ _ O
. _ _ O
Hmm _ _ O
. _ _ O
The _ _ O
power _ _ O
of _ _ O
trade-offs _ _ O
. _ _ O
100ms _ _ O
50ms _ _ O
100ms _ _ O
50ms _ _ O
A _ _ O
B _ _ O
200ms _ _ O
/ _ _ O
300ms _ _ O
= _ _ O
67 _ _ O
% _ _ O
20 _ _ O

Ideal _ _ O
circumstances _ _ O
: _ _ O
Human _ _ O
perception _ _ O
• _ _ O
The _ _ O
reality _ _ O
: _ _ O
( _ _ O
very _ _ O
quickly _ _ O
switching _ _ O
) _ _ O
100ms _ _ O
50ms _ _ O
100ms _ _ O
50ms _ _ O
A _ _ O
B _ _ O
• _ _ O
The _ _ O
illusion _ _ O
: _ _ O
( _ _ O
an _ _ O
ideal _ _ O
: _ _ O
perceived _ _ O
concurrency _ _ B-Concept
… _ _ O
no _ _ O
delay _ _ O
noticed _ _ O
) _ _ O
100ms _ _ O
50ms _ _ O
100ms _ _ O
50ms _ _ O
A _ _ O
B _ _ O
21 _ _ O

There _ _ O
is _ _ O
no _ _ O
optimal _ _ O
. _ _ O
• _ _ O
Like _ _ O
many _ _ O
of _ _ O
the _ _ O
topics _ _ O
in _ _ O
this _ _ O
course _ _ O
, _ _ O
there _ _ O
is _ _ O
no _ _ O
possible _ _ O
“ _ _ O
best _ _ O
” _ _ O
. _ _ O
▪ _ _ O
That _ _ O
is _ _ O
, _ _ O
there _ _ O
is _ _ O
no _ _ O
way _ _ O
to _ _ O
perfectly _ _ O
schedule _ _ B-Concept
general _ _ O
processes _ _ B-Concept
. _ _ O
• _ _ O
Consider _ _ O
: _ _ O
It _ _ O
would _ _ O
be _ _ O
very _ _ O
lovely _ _ O
to _ _ O
schedule _ _ B-Concept
a _ _ O
process _ _ B-Concept
that _ _ O
handles _ _ O
some _ _ O
user _ _ O
input _ _ O
, _ _ O
like _ _ O
a _ _ O
button _ _ O
press _ _ O
or _ _ O
a _ _ O
network _ _ O
request _ _ O
. _ _ O
▪ _ _ O
Perfect _ _ O
situation _ _ O
: _ _ O
the _ _ O
OS _ _ O
schedules _ _ B-Concept
the _ _ O
task _ _ O
that _ _ O
handles _ _ O
the _ _ O
button _ _ O
immediately _ _ O
before _ _ O
the _ _ O
button _ _ O
is _ _ O
pressed _ _ O
. _ _ O
What _ _ O
luck _ _ O
! _ _ O
• _ _ O
However _ _ O
: _ _ O
You _ _ O
do _ _ O
not _ _ O
know _ _ O
when _ _ O
that _ _ O
button _ _ O
will _ _ O
be _ _ O
pressed _ _ O
. _ _ O
▪ _ _ O
Maybe _ _ O
it _ _ O
is _ _ O
a _ _ O
sensor _ _ O
, _ _ O
like _ _ O
for _ _ O
detecting _ _ O
a _ _ O
fire _ _ O
! _ _ O
• _ _ O
FIRE _ _ O
SEEMS _ _ O
IMPORTANT _ _ O
! _ _ O
! _ _ O
… _ _ O
and _ _ O
yet _ _ O
. _ _ O
• _ _ O
Moral _ _ O
of _ _ O
the _ _ O
story _ _ O
: _ _ O
humans _ _ O
being _ _ O
users _ _ O
make _ _ O
things _ _ O
very _ _ O
hard _ _ O
. _ _ O
22 _ _ O

Again _ _ O
, _ _ O
it _ _ O
is _ _ O
not _ _ O
magic _ _ O
. _ _ O
• _ _ O
But _ _ O
… _ _ O
wait _ _ O
… _ _ O
how _ _ O
does _ _ O
hardware _ _ O
stop _ _ O
a _ _ O
program _ _ O
? _ _ O
▪ _ _ O
For _ _ O
instance _ _ O
, _ _ O
when _ _ O
the _ _ O
quantum _ _ B-Concept
is _ _ O
up _ _ O
, _ _ O
how _ _ O
does _ _ O
the _ _ O
OS _ _ B-Concept
get _ _ O
control _ _ O
and _ _ O
perform _ _ O
the _ _ O
context _ _ B-Concept
switch _ _ I-Concept
? _ _ O
• _ _ O
Ah _ _ O
, _ _ O
the _ _ O
hardware _ _ O
has _ _ O
support _ _ O
for _ _ O
“ _ _ O
being _ _ O
rude _ _ O
” _ _ O
which _ _ O
is _ _ O
called _ _ O
an _ _ O
interrupt _ _ B-Concept
. _ _ O
▪ _ _ O
A _ _ O
programmable _ _ O
mechanism _ _ O
for _ _ O
asynchronously _ _ O
calling _ _ O
a _ _ O
function _ _ O
when _ _ O
a _ _ O
particular _ _ O
type _ _ O
of _ _ O
error _ _ O
or _ _ O
signal _ _ O
is _ _ O
noticed _ _ O
. _ _ O
• _ _ O
Let _ _ O
’s _ _ O
take _ _ O
a _ _ O
look _ _ O
. _ _ O
23 _ _ O

Interrupts _ _ B-Concept
It _ _ O
’s _ _ O
rude _ _ O
… _ _ O
but _ _ O
necessary _ _ O
. _ _ O
24 _ _ O

How _ _ O
rude _ _ O
• _ _ O
An _ _ O
interrupt _ _ B-Concept
is _ _ O
an _ _ O
exceptional _ _ O
state _ _ O
that _ _ O
diverts _ _ O
execution _ _ O
from _ _ O
its _ _ O
normal _ _ O
flow _ _ O
. _ _ O
▪ _ _ O
When _ _ O
issued _ _ O
by _ _ O
hardware _ _ O
, _ _ O
sometimes _ _ O
referred _ _ O
to _ _ O
as _ _ O
a _ _ O
hardware _ _ B-Concept
exception _ _ I-Concept
• _ _ O
For _ _ O
instance _ _ O
, _ _ O
a _ _ O
hardware _ _ O
timer _ _ O
or _ _ O
external _ _ O
event _ _ O
caused _ _ O
by _ _ O
a _ _ O
sensor _ _ O
. _ _ O
▪ _ _ O
When _ _ O
caused _ _ O
by _ _ O
a _ _ O
user _ _ O
process _ _ O
, _ _ O
sometimes _ _ O
referred _ _ O
to _ _ O
as _ _ O
a _ _ O
software _ _ O
trap _ _ O
• _ _ O
Divide-by-zero _ _ O
error _ _ O
, _ _ O
some _ _ O
floating-point _ _ O
exceptions _ _ O
, _ _ O
system _ _ O
calls _ _ O
. _ _ O
• _ _ O
We _ _ O
have _ _ O
seen _ _ O
these _ _ O
before _ _ O
! _ _ O
▪ _ _ O
System _ _ O
calls _ _ O
are _ _ O
a _ _ O
type _ _ O
of _ _ O
interrupt _ _ O
( _ _ O
software _ _ O
trap _ _ O
) _ _ O
. _ _ O
▪ _ _ O
This _ _ O
is _ _ O
an _ _ O
intentional _ _ O
interrupt _ _ O
caused _ _ O
by _ _ O
a _ _ O
specific _ _ O
program _ _ O
instruction _ _ O
. _ _ O
• _ _ O
The _ _ O
program _ _ O
is _ _ O
“ _ _ O
interrupted _ _ O
” _ _ O
while _ _ O
the _ _ O
OS _ _ O
performs _ _ O
a _ _ O
task _ _ O
. _ _ O
• _ _ O
We _ _ O
have _ _ O
also _ _ O
encountered _ _ O
them _ _ O
in _ _ O
our _ _ O
failures _ _ O
. _ _ O
▪ _ _ O
Segmentation _ _ O
/ _ _ O
Protection _ _ O
/ _ _ O
Page _ _ O
Faults _ _ O
are _ _ O
also _ _ O
interrupts _ _ O
. _ _ O
( _ _ O
trap _ _ O
? _ _ O
exception _ _ O
? _ _ O
) _ _ O
▪ _ _ O
These _ _ O
are _ _ O
( _ _ O
usually _ _ O
) _ _ O
unintentional _ _ O
interrupts _ _ O
caused _ _ O
by _ _ O
a _ _ O
generic _ _ O
instruction _ _ O
. _ _ O
25 _ _ O

Here _ _ O
are _ _ O
some _ _ O
typical _ _ O
UNIX _ _ O
/ _ _ O
Linux _ _ O
system _ _ B-Concept
calls _ _ I-Concept
: _ _ O
Number _ _ O
Name _ _ O
Description _ _ O
read _ _ O
Reads _ _ O
bytes _ _ O
from _ _ O
an _ _ O
open _ _ O
file _ _ O
. _ _ O
write _ _ O
Writes _ _ O
bytes _ _ O
to _ _ O
an _ _ O
open _ _ O
file _ _ O
. _ _ O
open _ _ O
Opens _ _ O
a _ _ O
file _ _ O
and _ _ O
returns _ _ O
the _ _ O
file _ _ O
handle _ _ O
. _ _ O
close _ _ O
Closes _ _ O
an _ _ O
open _ _ O
file _ _ O
. _ _ O
stat _ _ O
Returns _ _ O
metadata _ _ O
about _ _ O
a _ _ O
file _ _ O
. _ _ O
fork _ _ O
Spawns _ _ O
a _ _ O
copy _ _ O
of _ _ O
the _ _ O
current _ _ O
process _ _ B-Concept
. _ _ O
execve _ _ O
Loads _ _ O
and _ _ O
then _ _ O
executes _ _ O
a _ _ O
program _ _ O
. _ _ O
26 _ _ O

System _ _ B-Concept
calls _ _ I-Concept
• _ _ O
System _ _ B-Concept
calls _ _ I-Concept
: _ _ O
predictable _ _ O
, _ _ O
intentional _ _ O
interrupts _ _ O
at _ _ O
specific _ _ O
instructions _ _ O
. _ _ O
▪ _ _ O
Interrupts _ _ B-Concept
occurring _ _ O
at _ _ O
specific _ _ O
instructions _ _ O
are _ _ O
synchronous _ _ B-Concept
interrupts _ _ I-Concept
. _ _ O
• _ _ O
In _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
, _ _ O
the _ _ O
program _ _ O
pauses _ _ O
at _ _ O
a _ _ O
instruction _ _ O
, _ _ O
then _ _ O
resumes _ _ O
at _ _ O
the _ _ O
following _ _ O
instruction _ _ O
when _ _ O
the _ _ O
OS _ _ O
finishes _ _ O
the _ _ O
task _ _ O
▪ _ _ O
( _ _ O
… _ _ O
and _ _ O
the _ _ O
OS _ _ O
calls _ _ O
the _ _ O
instruction _ _ O
) _ _ O
• _ _ O
Let _ _ O
’s _ _ O
take _ _ O
a _ _ O
deeper _ _ O
look _ _ O
. _ _ O
27 _ _ O

Hello _ _ O
, _ _ O
Hello _ _ O
World _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
- _ _ O
Application _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
- _ _ O
Kernel _ _ B-Concept
( _ _ O
main _ _ O
OS _ _ O
program _ _ O
) _ _ O
Pre-registered _ _ O
to _ _ O
be _ _ O
called _ _ O
on _ _ O
syscall _ _ B-Concept
Saves _ _ O
CPU _ _ O
state _ _ O
A _ _ O
jump _ _ O
to _ _ O
the _ _ O
kernel _ _ B-Concept
Performs _ _ O
action _ _ O
Restores _ _ O
state _ _ O
Returns _ _ O
to _ _ O
process _ _ B-Concept
28 _ _ O

Tick _ _ O
tock _ _ O
tick _ _ O
tock _ _ O
merrily _ _ O
sings _ _ O
the _ _ O
clock _ _ O
• _ _ O
A _ _ O
hardware _ _ B-Concept
timer _ _ I-Concept
can _ _ O
preempt _ _ B-Concept
( _ _ O
forcibly _ _ O
pause _ _ O
) _ _ O
a _ _ O
program _ _ O
at _ _ O
any _ _ O
time _ _ O
. _ _ O
▪ _ _ O
Interrupts _ _ B-Concept
that _ _ O
occur _ _ O
at _ _ O
any _ _ O
instruction _ _ O
are _ _ O
asynchronous _ _ B-Concept
interrupts _ _ I-Concept
. _ _ O
• _ _ O
In _ _ O
a _ _ O
preemptive _ _ B-Concept
operating _ _ I-Concept
system _ _ I-Concept
, _ _ O
a _ _ O
hardware _ _ B-Concept
timer _ _ I-Concept
is _ _ O
used _ _ O
to _ _ O
give _ _ O
a _ _ O
maximum _ _ O
bound _ _ O
to _ _ O
how _ _ O
long _ _ O
a _ _ O
process _ _ B-Concept
runs _ _ O
. _ _ O
▪ _ _ O
Your _ _ O
operating _ _ B-Concept
system _ _ I-Concept
programs _ _ O
the _ _ O
timer _ _ O
such _ _ O
that _ _ O
it _ _ O
sends _ _ O
a _ _ O
signal _ _ O
at _ _ O
a _ _ O
regular _ _ O
interval _ _ O
. _ _ O
▪ _ _ O
Your _ _ O
operating _ _ B-Concept
system _ _ I-Concept
has _ _ O
a _ _ O
function _ _ O
that _ _ O
is _ _ O
called _ _ O
when _ _ O
such _ _ O
a _ _ O
signal _ _ O
is _ _ O
read _ _ O
. _ _ O
▪ _ _ O
That _ _ O
function _ _ O
will _ _ O
respond _ _ O
by _ _ O
invoking _ _ O
the _ _ O
scheduler _ _ B-Concept
and _ _ O
pausing _ _ O
the _ _ O
current _ _ O
task _ _ O
and _ _ O
resuming _ _ O
or _ _ O
starting _ _ O
another _ _ O
. _ _ O
• _ _ O
Let _ _ O
’s _ _ O
look _ _ O
at _ _ O
the _ _ O
basic _ _ O
procedure _ _ O
an _ _ O
OS _ _ B-Concept
uses _ _ O
to _ _ O
program _ _ O
an _ _ O
interrupt _ _ B-Concept
. _ _ O
29 _ _ O

Programming _ _ O
interruption _ _ O
• _ _ O
On _ _ O
most _ _ O
hardware _ _ O
, _ _ O
there _ _ O
is _ _ O
a _ _ O
programmable _ _ O
table _ _ O
somewhere _ _ O
in _ _ O
memory _ _ O
that _ _ O
, _ _ O
when _ _ O
written _ _ O
to _ _ O
, _ _ O
defines _ _ O
where _ _ O
code _ _ O
exist _ _ O
to _ _ O
handle _ _ O
each _ _ O
interrupt _ _ B-Concept
. _ _ O
• _ _ O
Every _ _ O
possible _ _ O
interrupt _ _ B-Concept
is _ _ O
given _ _ O
a _ _ O
number _ _ O
. _ _ O
Segmentation _ _ O
faults _ _ O
might _ _ O
be _ _ O
interrupt _ _ B-Concept
10 _ _ O
. _ _ O
Timers _ _ O
might _ _ O
be _ _ O
interrupt _ _ B-Concept
0 _ _ O
. _ _ O
Et _ _ O
cetera _ _ O
. _ _ O
• _ _ O
When _ _ O
an _ _ O
interrupt _ _ B-Concept
occurs _ _ O
, _ _ O
based _ _ O
on _ _ O
its _ _ O
interrupt _ _ O
number _ _ O
, _ _ O
the _ _ O
corresponding _ _ O
entry _ _ O
in _ _ O
a _ _ O
lookup _ _ O
table _ _ O
called _ _ O
an _ _ O
interrupt _ _ B-Concept
vector _ _ I-Concept
table _ _ I-Concept
or _ _ O
an _ _ O
interrupt _ _ B-Concept
descriptor _ _ I-Concept
table _ _ I-Concept
would _ _ O
be _ _ O
used _ _ O
to _ _ O
determine _ _ O
where _ _ O
in _ _ O
the _ _ O
kernel _ _ O
to _ _ O
jump _ _ O
. _ _ O
30 _ _ O

The _ _ O
Interrupt _ _ B-Concept
Table _ _ O
# _ _ O
Value _ _ O
• _ _ O
The _ _ O
interrupt _ _ B-Concept
table _ _ I-Concept
is _ _ O
a _ _ O
simple _ _ O
table _ _ O
. _ _ O
Description _ _ O
Divide _ _ O
by _ _ O
zero _ _ O
• _ _ O
Fun _ _ O
Fact _ _ O
: _ _ O
It _ _ O
is _ _ O
often _ _ O
located _ _ O
at _ _ O
address _ _ O
0x0 _ _ O
in _ _ O
memory _ _ O
! _ _ O
Overflow _ _ O
Double _ _ O
Fault _ _ O
General _ _ O
Protection _ _ O
Fault _ _ O
Page _ _ O
Fault _ _ O
Stack _ _ O
Fault _ _ O
Alignment _ _ O
Error _ _ O
... _ _ O
Timer _ _ O
Signal _ _ O
Network _ _ O
Device _ _ O
Signal _ _ O
▪ _ _ O
So _ _ O
, _ _ O
operating _ _ O
system _ _ O
kernels _ _ O
ca _ _ O
n’t _ _ O
exactly _ _ O
always _ _ O
treat _ _ O
zero _ _ O
as _ _ O
an _ _ O
invalid _ _ O
address _ _ O
… _ _ O
• _ _ O
When _ _ O
a _ _ O
process _ _ O
triggers _ _ O
a _ _ O
listed _ _ O
interrupt _ _ O
or _ _ O
external _ _ O
hardware _ _ O
sends _ _ O
a _ _ O
signal _ _ O
to _ _ O
the _ _ O
interrupt _ _ O
controller _ _ O
… _ _ O
▪ _ _ O
the _ _ O
CPU _ _ O
jumps _ _ O
to _ _ O
the _ _ O
given _ _ O
address _ _ O
. _ _ O
Audio _ _ O
Device _ _ O
Signal _ _ O
31 _ _ O

Ah _ _ O
! _ _ O
There _ _ O
art _ _ O
thee _ _ O
ol’ _ _ O
interrupt _ _ B-Concept
! _ _ O
• _ _ O
Let _ _ O
’s _ _ O
take _ _ O
a _ _ O
look _ _ O
at _ _ O
interrupt _ _ B-Concept
handling _ _ I-Concept
… _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
– _ _ O
Process _ _ O
B _ _ O
A _ _ O
Context _ _ B-Concept
( _ _ O
A _ _ O
) _ _ O
CPU _ _ O
State _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
– _ _ O
Kernel _ _ O
• _ _ O
An _ _ O
interrupt _ _ B-Concept
is _ _ O
the _ _ O
likely _ _ O
cause _ _ O
of _ _ O
our _ _ O
prior _ _ O
interruption _ _ O
. _ _ O
• _ _ O
The _ _ O
interrupt _ _ B-Concept
handler _ _ I-Concept
is _ _ O
the _ _ O
code _ _ O
that _ _ O
handles _ _ O
context _ _ B-Concept
switching _ _ I-Concept
and _ _ O
scheduling _ _ B-Concept
32 _ _ O

Overview _ _ O
• _ _ O
Interrupts _ _ B-Concept
can _ _ O
be _ _ O
categorized _ _ O
in _ _ O
several _ _ O
ways _ _ O
: _ _ O
▪ _ _ O
They _ _ O
can _ _ O
occur _ _ O
outside _ _ O
of _ _ O
our _ _ O
program _ _ O
: _ _ O
hardware _ _ B-Concept
exceptions _ _ I-Concept
▪ _ _ O
They _ _ O
can _ _ O
occur _ _ O
on _ _ O
an _ _ O
instruction _ _ O
in _ _ O
our _ _ O
program _ _ O
: _ _ O
software _ _ O
trap _ _ O
▪ _ _ O
They _ _ O
can _ _ O
occur _ _ O
at _ _ O
any _ _ O
time _ _ O
: _ _ O
asynchronous _ _ O
interrupts _ _ O
▪ _ _ O
They _ _ O
can _ _ O
occur _ _ O
at _ _ O
specific _ _ O
times _ _ O
: _ _ O
synchronous _ _ O
interrupts _ _ O
• _ _ O
Interrupts _ _ O
are _ _ O
what _ _ O
allow _ _ O
operating _ _ O
systems _ _ O
to _ _ O
function _ _ O
! _ _ O
▪ _ _ O
When _ _ O
you _ _ O
press _ _ O
a _ _ O
key _ _ O
on _ _ O
your _ _ O
keyboard _ _ O
. _ _ O
▪ _ _ O
When _ _ O
you _ _ O
receive _ _ O
a _ _ O
packet _ _ O
on _ _ O
the _ _ O
network _ _ O
. _ _ O
▪ _ _ O
When _ _ O
your _ _ O
sound _ _ O
card _ _ O
wants _ _ O
the _ _ O
next _ _ O
second _ _ O
of _ _ O
audio _ _ O
. _ _ O
▪ _ _ O
When _ _ O
you _ _ O
divide _ _ O
by _ _ O
zero _ _ O
… _ _ O
• _ _ O
To _ _ O
then _ _ O
mercilessly _ _ O
murder _ _ O
your _ _ O
process _ _ O
. _ _ O
33 _ _ O



