['train_set', 'labeled']|cs0007|lec16
-DOCSTART- -X- -X- O

CS _ _ O
0007 _ _ O
: _ _ O
Introduction _ _ O
to _ _ O
Java _ _ O
Lecture _ _ O
16 _ _ O
Nathan _ _ O
Ong _ _ O
University _ _ O
of _ _ O
Pittsburgh _ _ O
November _ _ O
3 _ _ O
, _ _ O
2016 _ _ O

Main _ _ O
Portions _ _ O
of _ _ O
OOP _ _ B-Concept
• _ _ O
Building _ _ O
a _ _ O
class _ _ B-Concept
• _ _ O
Determining _ _ O
inter-class _ _ O
relationships _ _ O
– _ _ O
Subclasses _ _ B-Concept
– _ _ O
Superclasses _ _ B-Concept
– _ _ O
Ownership _ _ B-Concept

Recap _ _ O
A _ _ O
class _ _ O
needs _ _ O
these _ _ O
components _ _ O
: _ _ O
• _ _ O
Class-level _ _ O
/ _ _ O
Instance _ _ O
Variables _ _ O
• _ _ O
Methods _ _ O
• _ _ O
Constructor _ _ O
( _ _ O
s _ _ O
) _ _ O

Car _ _ O
Example _ _ O
public _ _ O
class _ _ O
Car _ _ O
{ _ _ O
private _ _ O
static _ _ O
int _ _ O
nextIDNum _ _ O
= _ _ O
0 _ _ O
; _ _ O
private _ _ O
final _ _ O
int _ _ O
idNum _ _ O
; _ _ O
private _ _ O
Color _ _ O
color _ _ O
; _ _ O
private _ _ O
String _ _ O
licensePlate _ _ O
; _ _ O
public _ _ O
Car _ _ O
( _ _ O
Color _ _ O
color _ _ O
) _ _ O
{ _ _ O
this.color _ _ O
= _ _ O
color _ _ O
; _ _ O
this.idNum _ _ O
= _ _ O
Car.nextIDNum _ _ O
; _ _ O
Car.nextIDNum++ _ _ O
; _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
constructor _ _ O
( _ _ O
Color _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Car _ _ O

Overloading _ _ B-Concept
Constructors _ _ I-Concept
public _ _ O
class _ _ O
Car _ _ O
{ _ _ O
… _ _ O
public _ _ O
Car _ _ O
( _ _ O
Color _ _ O
color _ _ O
) _ _ O
{ _ _ O
this.color _ _ O
= _ _ O
color _ _ O
; _ _ O
this.idNum _ _ O
= _ _ O
Car.nextIDNum _ _ O
; _ _ O
Car.nextIDNum++ _ _ O
; _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
constructor _ _ O
( _ _ O
Color _ _ O
) _ _ O
/ _ _ O
/ _ _ O
default _ _ O
color _ _ O
is _ _ O
Color.RED _ _ O
public _ _ O
Car _ _ O
( _ _ O
) _ _ O
{ _ _ O
this _ _ O
( _ _ O
Color.RED _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
constructor _ _ O
( _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Car _ _ O
Referencing _ _ O
other _ _ O
constructors _ _ O
can _ _ O
be _ _ O
done _ _ O
with _ _ O
the _ _ O

Functional _ _ O
Functions _ _ O
• _ _ O
The _ _ O
most _ _ O
common _ _ O
functions _ _ O
are _ _ O
getters _ _ B-Concept
and _ _ O
setters _ _ B-Concept
– _ _ O
Getters _ _ B-Concept
retrieve _ _ O
the _ _ O
values _ _ O
of _ _ O
instance _ _ O
variables _ _ O
and _ _ O
return _ _ O
them _ _ O
– _ _ O
Setters _ _ B-Concept
alter _ _ O
the _ _ O
values _ _ O
of _ _ O
the _ _ O
instance _ _ O
variables _ _ O
• _ _ O
Why _ _ O
use _ _ O
these _ _ O
functions _ _ O
rather _ _ O
than _ _ O
setting _ _ O
the _ _ O
variable _ _ O
to _ _ O
be _ _ O
public _ _ O
? _ _ O
• _ _ O
Control _ _ O
! _ _ O

Car _ _ O
Example _ _ O
public _ _ O
class _ _ O
Car _ _ O
{ _ _ O
private _ _ O
static _ _ O
int _ _ O
nextIDNum _ _ O
= _ _ O
0 _ _ O
; _ _ O
private _ _ O
final _ _ O
int _ _ O
idNum _ _ O
; _ _ O
private _ _ O
Color _ _ O
color _ _ O
; _ _ O
private _ _ O
String _ _ O
licensePlate _ _ O
; _ _ O
public _ _ O
int _ _ O
getIDNum _ _ O
( _ _ O
) _ _ O
{ _ _ O
return _ _ O
this.idNum _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Car _ _ O

Car _ _ O
Example _ _ O
public _ _ O
class _ _ O
Car _ _ O
{ _ _ O
private _ _ O
static _ _ O
int _ _ O
nextIDNum _ _ O
= _ _ O
0 _ _ O
; _ _ O
private _ _ O
final _ _ O
int _ _ O
idNum _ _ O
; _ _ O
private _ _ O
Color _ _ O
color _ _ O
; _ _ O
private _ _ O
String _ _ O
licensePlate _ _ O
; _ _ O
public _ _ O
void _ _ O
setColor _ _ O
( _ _ O
Color _ _ O
color _ _ O
) _ _ O
{ _ _ O
this.color _ _ O
= _ _ O
color _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
Color _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Car _ _ O

Why _ _ O
Bother _ _ O
? _ _ O
• _ _ O
Having _ _ O
these _ _ O
methods _ _ O
ensure _ _ O
you _ _ O
have _ _ O
full _ _ O
control _ _ B-Concept
over _ _ O
the _ _ O
instance _ _ O
variables _ _ O
• _ _ O
Should _ _ O
you _ _ O
decide _ _ O
to _ _ O
change _ _ O
how _ _ O
the _ _ O
variable _ _ O
is _ _ O
accessed _ _ O
or _ _ O
altered _ _ O
, _ _ O
you _ _ O
only _ _ O
need _ _ O
to _ _ O
change _ _ O
the _ _ O
method _ _ O
. _ _ O
• _ _ O
You _ _ O
only _ _ O
add _ _ O
them _ _ O
when _ _ O
you _ _ O
need _ _ O
them _ _ O
! _ _ O

Inter-class _ _ B-Concept
Relationships _ _ I-Concept
• _ _ O
Building _ _ O
a _ _ O
single _ _ O
class _ _ O
is _ _ O
useless _ _ O
. _ _ O
It _ _ O
needs _ _ O
to _ _ O
be _ _ O
used _ _ O
in _ _ O
context _ _ O
. _ _ O
• _ _ O
There _ _ O
are _ _ O
two _ _ O
main _ _ O
relationships _ _ O
between _ _ O
classes _ _ B-Concept
– _ _ O
Sub _ _ O
/ _ _ O
Super _ _ O
class _ _ O
– _ _ O
Ownership _ _ B-Concept

Subclasses _ _ B-Concept
• _ _ O
A _ _ O
subclass _ _ B-Concept
of _ _ O
a _ _ O
class _ _ O
is _ _ O
a _ _ O
more _ _ O
specific _ _ O
type _ _ O
of _ _ O
a _ _ O
class _ _ O
• _ _ O
Also _ _ O
known _ _ O
as _ _ O
the _ _ O
child _ _ O
of _ _ O
a _ _ O
class _ _ O
• _ _ O
For _ _ O
example _ _ O
, _ _ O
a _ _ O
tree _ _ O
would _ _ O
be _ _ O
a _ _ O
subclass _ _ B-Concept
of _ _ O
plant _ _ O
• _ _ O
Subclasses _ _ B-Concept
are _ _ O
meant _ _ O
to _ _ O
expand _ _ O
upon _ _ O
the _ _ O
behavior _ _ O
of _ _ O
their _ _ O
more _ _ O
general _ _ O
parent _ _ O
class _ _ O
• _ _ O
You _ _ O
can _ _ O
have _ _ O
several _ _ O
subclasses _ _ B-Concept

Superclasses _ _ B-Concept
• _ _ O
On _ _ O
the _ _ O
converse _ _ O
, _ _ O
a _ _ O
superclass _ _ O
is _ _ O
a _ _ O
more _ _ O
abstract _ _ O
and _ _ O
general _ _ O
version _ _ O
of _ _ O
a _ _ O
class _ _ O
• _ _ O
Also _ _ O
known _ _ O
as _ _ O
the _ _ O
parent _ _ O
of _ _ O
a _ _ O
class _ _ O
• _ _ O
Plant _ _ O
is _ _ O
the _ _ O
superclass _ _ O
of _ _ O
Tree _ _ O
• _ _ O
You _ _ O
can _ _ O
only _ _ O
have _ _ O
one _ _ O
superclass _ _ O

Declaring _ _ O
a _ _ O
Class _ _ O
to _ _ O
be _ _ O
a _ _ O
Subtype _ _ O
• _ _ O
In _ _ O
order _ _ O
to _ _ O
declare _ _ O
a _ _ O
class _ _ O
’s _ _ O
parent _ _ O
, _ _ O
use _ _ O
the _ _ O
keyword _ _ O
extends _ _ O
• _ _ O
( _ _ O
Classes _ _ O
that _ _ O
do _ _ O
not _ _ O
have _ _ O
a _ _ O
parent _ _ B-Concept
class _ _ I-Concept
implicitly _ _ O
extend _ _ O
the _ _ O
Object _ _ O
class _ _ O
) _ _ O

Inheritance _ _ B-Concept
• _ _ O
A _ _ O
subclass _ _ B-Concept
inherits _ _ O
all _ _ O
non-private _ _ O
fields _ _ O
and _ _ O
methods _ _ O
• _ _ O
Accessing _ _ O
these _ _ O
fields _ _ O
and _ _ O
methods _ _ O
requires _ _ O
the _ _ O
keyword _ _ O
super _ _ B-Concept
. _ _ O
• _ _ O
( _ _ O
Note _ _ O
: _ _ O
you _ _ O
may _ _ O
also _ _ O
be _ _ O
able _ _ O
to _ _ O
access _ _ O
private _ _ O
fields _ _ O
with _ _ O
the _ _ O
parent _ _ B-Concept
class _ _ I-Concept
’s _ _ O
getters _ _ B-Concept
and _ _ O
setters _ _ B-Concept
, _ _ O
which _ _ O
may _ _ O
be _ _ O
safer _ _ O
) _ _ O

Restricting _ _ O
Access _ _ O
• _ _ O
What _ _ O
if _ _ O
you _ _ O
want _ _ O
a _ _ O
field _ _ O
or _ _ O
method _ _ O
to _ _ O
be _ _ O
inherited _ _ O
, _ _ O
but _ _ O
still _ _ O
do _ _ O
not _ _ O
necessarily _ _ O
want _ _ O
it _ _ O
to _ _ O
be _ _ O
accessed _ _ O
by _ _ O
anyone _ _ O
? _ _ O
• _ _ O
Use _ _ O
the _ _ O
keyword _ _ O
protected _ _ B-Concept
• _ _ O
Remember _ _ O
, _ _ O
releasing _ _ O
your _ _ O
access _ _ O
to _ _ O
these _ _ O
fields _ _ O
and _ _ O
methods _ _ O
should _ _ O
only _ _ O
be _ _ O
done _ _ O
when _ _ O
necessary _ _ O

Example _ _ O
public _ _ O
class _ _ O
Vehicle _ _ O
{ _ _ O
private _ _ O
final _ _ O
int _ _ O
numWheels _ _ O
; _ _ O
… _ _ O
public _ _ O
boolean _ _ O
move _ _ O
( _ _ O
double _ _ O
dist _ _ O
) _ _ O
{ _ _ O
return _ _ O
dist _ _ O
< _ _ O
this.numWheels*10.0 _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
double _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Vehicle _ _ O

Example _ _ O
A _ _ O
public _ _ O
class _ _ O
Car _ _ O
extends _ _ O
Vehicle _ _ O
{ _ _ O
private _ _ O
int _ _ O
numPassengers _ _ O
; _ _ O
private _ _ O
double _ _ O
gasRemaining _ _ O
; _ _ O
… _ _ O
public _ _ O
boolean _ _ O
drive _ _ O
( _ _ O
double _ _ O
dist _ _ O
) _ _ O
{ _ _ O
return _ _ O
( _ _ O
dist _ _ O
< _ _ O
this.numWheels*100.0 _ _ O
) _ _ O
& _ _ O
& _ _ O
( _ _ O
this.gasRemaining _ _ O
> _ _ O
0 _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
double _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Plant _ _ O

Example _ _ O
B _ _ O
public _ _ O
class _ _ O
Car _ _ O
extends _ _ O
Vehicle _ _ O
{ _ _ O
private _ _ O
int _ _ O
numPassengers _ _ O
; _ _ O
private _ _ O
double _ _ O
gasRemaining _ _ O
; _ _ O
… _ _ O
public _ _ O
boolean _ _ O
drive _ _ O
( _ _ O
double _ _ O
dist _ _ O
) _ _ O
{ _ _ O
return _ _ O
super.move _ _ O
( _ _ O
dist*10.0 _ _ O
) _ _ O
& _ _ O
& _ _ O
( _ _ O
this.gasRemaining _ _ O
> _ _ O
0 _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
double _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Plant _ _ O

Which _ _ O
Is _ _ O
Better _ _ O
? _ _ O
• _ _ O
Example _ _ O
A _ _ O
totally _ _ O
ignores _ _ O
the _ _ O
move _ _ O
method _ _ O
( _ _ O
essentially _ _ O
its _ _ O
precursor _ _ O
) _ _ O
, _ _ O
but _ _ O
is _ _ O
clearer _ _ O
• _ _ O
Example _ _ O
B _ _ O
shows _ _ O
the _ _ O
movement _ _ O
lineage _ _ O
• _ _ O
Either _ _ O
is _ _ O
okay _ _ O
, _ _ O
but _ _ O
both _ _ O
need _ _ O
comments _ _ O
! _ _ O
! _ _ O
! _ _ O
! _ _ O

Regarding _ _ O
Constructors _ _ B-Concept
• _ _ O
Constructors _ _ B-Concept
can _ _ O
not _ _ O
be _ _ O
inherited _ _ O
, _ _ O
even _ _ O
though _ _ O
they _ _ O
are _ _ O
public _ _ O
• _ _ O
However _ _ O
, _ _ O
you _ _ O
can _ _ O
, _ _ O
and _ _ O
should _ _ O
, _ _ O
use _ _ O
them _ _ O
from _ _ O
the _ _ O
subclass _ _ B-Concept
’s _ _ I-Concept
constructor _ _ O
, _ _ O
to _ _ O
ensure _ _ O
complete _ _ O
initialization _ _ O
• _ _ O
You _ _ O
can _ _ O
call _ _ O
the _ _ O
parent _ _ O
’s _ _ O
constructor _ _ O
by _ _ O
using _ _ O
the _ _ O
keyword _ _ O
super _ _ B-Concept

Calling _ _ O
Superclass _ _ B-Concept
Constructor _ _ B-Concept
• _ _ O
Unlike _ _ O
calling _ _ O
an _ _ O
overloaded _ _ O
constructor _ _ O
of _ _ O
the _ _ O
same _ _ O
class _ _ O
, _ _ O
calling _ _ O
a _ _ O
superclass _ _ O
constructor _ _ O
does _ _ O
not _ _ O
need _ _ O
to _ _ O
be _ _ O
the _ _ O
only _ _ O
line _ _ O
of _ _ O
code _ _ O
• _ _ O
However _ _ O
, _ _ O
it _ _ O
must _ _ O
still _ _ O
be _ _ O
the _ _ O
first _ _ O
line _ _ O
of _ _ O
code _ _ O
in _ _ O
the _ _ O
constructor _ _ O

Example _ _ O
public _ _ O
class _ _ O
Vehicle _ _ O
{ _ _ O
private _ _ O
final _ _ O
int _ _ O
numWheels _ _ O
; _ _ O
… _ _ O
public _ _ O
Vehicle _ _ O
( _ _ O
int _ _ O
numWheels _ _ O
) _ _ O
{ _ _ O
this.numWheels _ _ O
= _ _ O
numWheels _ _ O
; _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
double _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Vehicle _ _ O

Example _ _ O
public _ _ O
class _ _ O
Car _ _ O
extends _ _ O
Vehicle _ _ O
{ _ _ O
private _ _ O
int _ _ O
numPassengers _ _ O
; _ _ O
private _ _ O
double _ _ O
gasRemaining _ _ O
; _ _ O
… _ _ O
public _ _ O
Car _ _ O
( _ _ O
int _ _ O
numPassengers _ _ O
, _ _ O
double _ _ O
gasRemaining _ _ O
) _ _ O
{ _ _ O
super _ _ O
( _ _ O
4 _ _ O
) _ _ O
; _ _ O
this.numPassengers _ _ O
= _ _ O
numPassengers _ _ O
; _ _ O
this.gasRemaining _ _ O
= _ _ O
gasRemaining _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
constructor _ _ O
( _ _ O
int _ _ O
, _ _ O
double _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Plant _ _ O

What _ _ O
If _ _ O
the _ _ O
Superclass _ _ B-Concept
’s _ _ I-Concept
Method _ _ O
Definition _ _ O
Does _ _ O
Not _ _ O
Fit _ _ O
the _ _ O
Class _ _ O
’s _ _ O
? _ _ O
• _ _ O
We _ _ O
can _ _ O
override _ _ O
the _ _ O
definition _ _ O
by _ _ O
using _ _ O
the _ _ O
exact _ _ O
same _ _ O
function _ _ O
header _ _ O
• _ _ O
The _ _ O
line _ _ O
directly _ _ O
above _ _ O
function _ _ O
header _ _ O
must _ _ O
have _ _ O
“ _ _ O
@Override _ _ O
” _ _ O
only _ _ O
• _ _ O
As _ _ O
an _ _ O
example _ _ O
, _ _ O
our _ _ O
Car _ _ O
class _ _ O
should _ _ O
probably _ _ O
use _ _ O
the _ _ O
original _ _ O
“ _ _ O
move _ _ O
” _ _ O
method _ _ O
, _ _ O
rather _ _ O
than _ _ O
creating _ _ O
an _ _ O
entirely _ _ O
new _ _ O
“ _ _ O
drive _ _ O
” _ _ O
method _ _ O
that _ _ O
does _ _ O
something _ _ O
similar _ _ O

Reminder _ _ O
public _ _ O
class _ _ O
Car _ _ O
extends _ _ O
Vehicle _ _ O
{ _ _ O
private _ _ O
int _ _ O
numPassengers _ _ O
; _ _ O
private _ _ O
double _ _ O
gasRemaining _ _ O
; _ _ O
… _ _ O
public _ _ O
boolean _ _ O
drive _ _ O
( _ _ O
double _ _ O
dist _ _ O
) _ _ O
{ _ _ O
return _ _ O
super.move _ _ O
( _ _ O
dist*10.0 _ _ O
) _ _ O
& _ _ O
& _ _ O
( _ _ O
this.gasRemaining _ _ O
> _ _ O
0 _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
double _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Plant _ _ O

Override _ _ O
public _ _ O
class _ _ O
Car _ _ O
extends _ _ O
Vehicle _ _ O
{ _ _ O
private _ _ O
int _ _ O
numPassengers _ _ O
; _ _ O
private _ _ O
double _ _ O
gasRemaining _ _ O
; _ _ O
… _ _ O
@Override _ _ O
public _ _ O
boolean _ _ O
move _ _ O
( _ _ O
double _ _ O
dist _ _ O
) _ _ O
{ _ _ O
return _ _ O
super.move _ _ O
( _ _ O
dist*10.0 _ _ O
) _ _ O
& _ _ O
& _ _ O
( _ _ O
this.gasRemaining _ _ O
> _ _ O
0 _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
double _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Plant _ _ O

Overriding _ _ O
• _ _ O
I _ _ O
can _ _ O
still _ _ O
reference _ _ O
the _ _ O
original _ _ O
method _ _ O
using _ _ O
the _ _ O
super _ _ B-Concept
keyword _ _ O
• _ _ O
Unless _ _ O
your _ _ O
overridden _ _ O
method _ _ O
totally _ _ O
discards _ _ O
the _ _ O
functionality _ _ O
of _ _ O
the _ _ O
superclass _ _ B-Concept
’s _ _ I-Concept
method _ _ O
, _ _ O
you _ _ O
should _ _ O
call _ _ O
the _ _ O
superclass _ _ B-Concept
’s _ _ O
method _ _ O
at _ _ O
least _ _ O
once _ _ O

Note _ _ O
• _ _ O
You _ _ O
can _ _ O
not _ _ O
override _ _ O
constructors _ _ B-Concept

Ownership _ _ B-Concept
• _ _ O
Ownership _ _ B-Concept
is _ _ O
simply _ _ O
one _ _ O
class _ _ O
using _ _ O
another _ _ O
as _ _ O
a _ _ O
property _ _ O
• _ _ O
A _ _ O
Car _ _ O
may _ _ O
have _ _ O
an _ _ O
Engine _ _ O
, _ _ O
a _ _ O
Radio _ _ O
, _ _ O
and _ _ O
an _ _ O
Owner _ _ O
, _ _ O
depending _ _ O
on _ _ O
what _ _ O
you _ _ O
need _ _ O
• _ _ O
A _ _ O
Car _ _ O
’s _ _ O
superclass _ _ B-Concept
and _ _ O
subclasses _ _ O
certainly _ _ O
are _ _ O
not _ _ O
Engine _ _ O
, _ _ O
Radio _ _ O
, _ _ O
and _ _ O
Owner _ _ O

Using _ _ O
the _ _ O
Classes _ _ O
public _ _ O
class _ _ O
Garage _ _ O
{ _ _ O
private _ _ O
Vehicle _ _ O
[ _ _ O
] _ _ O
vehicles _ _ O
; _ _ O
… _ _ O
public _ _ O
Garage _ _ O
( _ _ O
int _ _ O
capacity _ _ O
) _ _ O
{ _ _ O
this.vehicles _ _ O
= _ _ O
new _ _ O
Vehicle _ _ O
[ _ _ O
capacity _ _ O
] _ _ O
; _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
vehicles.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
vehicles _ _ O
[ _ _ O
i _ _ O
] _ _ O
= _ _ O
null _ _ O
; _ _ O
} _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
constructor _ _ O
( _ _ O
int _ _ O
) _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Garage _ _ O

Using _ _ O
the _ _ O
Classes _ _ O
public _ _ O
class _ _ O
Garage _ _ O
{ _ _ O
… _ _ O
public _ _ O
boolean _ _ O
addVehicle _ _ O
( _ _ O
Vehicle _ _ O
vehicle _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
Note _ _ O
: _ _ O
there _ _ O
is _ _ O
a _ _ O
better _ _ O
way _ _ O
! _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
vehicles.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
if _ _ O
( _ _ O
vehicles _ _ O
[ _ _ O
i _ _ O
] _ _ O
= _ _ O
= _ _ O
null _ _ O
) _ _ O
{ _ _ O
vehicles _ _ O
[ _ _ O
i _ _ O
] _ _ O
= _ _ O
vehicle _ _ O
; _ _ O
return _ _ O
true _ _ O
; _ _ O
} _ _ O
} _ _ O
return _ _ O
false _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
( _ _ O
Vehicle _ _ O
) _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Garage _ _ O

Using _ _ O
the _ _ O
Classes _ _ O
public _ _ O
class _ _ O
JayLeno _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
Garage _ _ O
garage _ _ O
= _ _ O
new _ _ O
Garage _ _ O
( _ _ O
100 _ _ O
) _ _ O
; _ _ O
Car _ _ O
ferrari _ _ O
= _ _ O
new _ _ O
Car _ _ O
( _ _ O
5 _ _ O
, _ _ O
100.0 _ _ O
) _ _ O
; _ _ O
garage.addVehicle _ _ O
( _ _ O
ferrari _ _ O
) _ _ O
; _ _ O
ferrari.move _ _ O
( _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
? _ _ O
? _ _ O
ferrari.drive _ _ O
( _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
? _ _ O
? _ _ O
System.out.println _ _ O
( _ _ O
"I _ _ O
have _ _ O
so _ _ O
many _ _ O
cars _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
JayLeno _ _ O

QUESTIONS _ _ O
? _ _ O



