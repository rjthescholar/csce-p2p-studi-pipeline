['train_set', 'labeled']|cs0441|lec05
-DOCSTART- -X- -X- O

Discrete _ _ O
Structures _ _ O
for _ _ O
Computer _ _ O
Science _ _ O
William _ _ O
Garrison _ _ O
bill@cs.pitt.edu _ _ O
6311 _ _ O
Sennott _ _ O
Square _ _ O
Lecture _ _ O
# _ _ O
5 _ _ O
: _ _ O
Logic _ _ O
Programming _ _ O
and _ _ O
Nested _ _ O
Quantifiers _ _ O
Based _ _ O
on _ _ O
materials _ _ O
developed _ _ O
by _ _ O
Dr. _ _ O
Adam _ _ O
Lee _ _ O

Today _ _ O
’s _ _ O
topics _ _ O
n _ _ O
Applications _ _ O
of _ _ O
predicate _ _ B-Concept
logic _ _ I-Concept
n _ _ O
Nested _ _ B-Concept
quantifiers _ _ I-Concept

Logic _ _ O
programming _ _ O
enables _ _ O
automated _ _ O
reasoning _ _ O
Prolog _ _ O
l _ _ O
Programming _ _ O
in _ _ O
logic _ _ O
l _ _ O
Developed _ _ O
in _ _ O
the _ _ O
1970s _ _ O
for _ _ O
AI _ _ O
purposes _ _ O
Datalog _ _ O
l _ _ O
Logical _ _ O
formalization _ _ O
of _ _ O
databases _ _ O
l _ _ O
Developed _ _ O
in _ _ O
the _ _ O
1980s _ _ O
For _ _ O
our _ _ O
purposes _ _ O
, _ _ O
we _ _ O
can _ _ O
consider _ _ O
Prolog _ _ O
and _ _ O
Datalog _ _ O
to _ _ O
be _ _ O
the _ _ O
same _ _ O
, _ _ O
though _ _ O
in _ _ O
reality _ _ O
they _ _ O
have _ _ O
very _ _ O
important _ _ O
differences _ _ O
. _ _ O
Two _ _ O
main _ _ O
constructs _ _ O
: _ _ O
Lower _ _ O
case _ _ O
= _ _ O
constant _ _ O
l _ _ O
Facts _ _ O
² _ _ O
instructor _ _ O
( _ _ O
bill _ _ O
, _ _ O
cs441 _ _ O
) _ _ O
Upper _ _ O
case _ _ O
= _ _ O
variable _ _ O
² _ _ O
student _ _ O
( _ _ O
smith _ _ O
, _ _ O
cs441 _ _ O
) _ _ O
l _ _ O
Rules _ _ O
² _ _ O
teaches _ _ O
( _ _ O
P _ _ O
, _ _ O
S _ _ O
) _ _ O
: _ _ O
- _ _ O
instructor _ _ O
( _ _ O
P _ _ O
, _ _ O
C _ _ O
) _ _ O
, _ _ O
student _ _ O
( _ _ O
S _ _ O
, _ _ O
C _ _ O
) _ _ O

Rules _ _ O
and _ _ O
facts _ _ O
define _ _ O
predicates _ _ O
Facts _ _ O
define _ _ O
predicates _ _ O
by _ _ O
explicitly _ _ O
listing _ _ O
elements _ _ O
that _ _ O
satisfy _ _ O
those _ _ O
predicates _ _ O
l _ _ O
“ _ _ O
Dr. _ _ O
Garrison _ _ O
is _ _ O
the _ _ O
instructor _ _ O
for _ _ O
CS441 _ _ O
” _ _ O
º _ _ O
instructor _ _ O
( _ _ O
bill _ _ O
, _ _ O
cs441 _ _ O
) _ _ O
Rules _ _ O
define _ _ O
predicates _ _ O
by _ _ O
combining _ _ O
previously _ _ O
specified _ _ O
predicates _ _ O
l _ _ O
“ _ _ O
Professors _ _ O
teach _ _ O
the _ _ O
students _ _ O
enrolled _ _ O
in _ _ O
the _ _ O
courses _ _ O
for _ _ O
which _ _ O
they _ _ O
are _ _ O
the _ _ O
instructor _ _ O
” _ _ O
º _ _ O
teaches _ _ O
( _ _ O
P _ _ O
, _ _ O
S _ _ O
) _ _ O
: _ _ O
- _ _ O
instructor _ _ O
( _ _ O
P _ _ O
, _ _ O
C _ _ O
) _ _ O
, _ _ O
student _ _ O
( _ _ O
S _ _ O
, _ _ O
C _ _ O
) _ _ O
Prolog _ _ O
is _ _ O
an _ _ O
environment _ _ O
that _ _ O
lets _ _ O
us _ _ O
issue _ _ O
queries _ _ O
to _ _ O
determine _ _ O
which _ _ O
predicates _ _ O
are _ _ O
true _ _ O
! _ _ O

A _ _ O
Security _ _ O
Example _ _ O
grant _ _ O
( _ _ O
U _ _ O
, _ _ O
projector _ _ O
) _ _ O
: _ _ O
- _ _ O
located _ _ O
( _ _ O
U _ _ O
, _ _ O
105 _ _ O
) _ _ O
, _ _ O
role _ _ O
( _ _ O
U _ _ O
, _ _ O
presenter _ _ O
) _ _ O
located _ _ O
( _ _ O
U _ _ O
, _ _ O
R _ _ O
) _ _ O
: _ _ O
- _ _ O
owns _ _ O
( _ _ O
U _ _ O
, _ _ O
D _ _ O
) _ _ O
, _ _ O
dev_loc _ _ O
( _ _ O
D _ _ O
, _ _ O
R _ _ O
) _ _ O
role _ _ O
( _ _ O
bob _ _ O
, _ _ O
presenter _ _ O
) _ _ O
owns _ _ O
( _ _ O
alice _ _ O
, _ _ O
laptop12 _ _ O
) _ _ O
role _ _ O
( _ _ O
carol _ _ O
, _ _ O
presenter _ _ O
) _ _ O
owns _ _ O
( _ _ O
bob _ _ O
, _ _ O
tablet23 _ _ O
) _ _ O
owns _ _ O
( _ _ O
carol _ _ O
, _ _ O
cell42 _ _ O
) _ _ O
dev_loc _ _ O
( _ _ O
laptop12 _ _ O
, _ _ O
105 _ _ O
) _ _ O
dev_loc _ _ O
( _ _ O
tablet23 _ _ O
, _ _ O
105 _ _ O
) _ _ O
dev_loc _ _ O
( _ _ O
cell42 _ _ O
, _ _ O
105 _ _ O
) _ _ O
Can _ _ O
Bob _ _ O
run _ _ O
the _ _ O
projector _ _ O
? _ _ O
l _ _ O
Query _ _ O
: _ _ O
? _ _ O
grant _ _ O
( _ _ O
bob _ _ O
, _ _ O
projector _ _ O
) _ _ O
l _ _ O
Solution _ _ O
: _ _ O
true _ _ O
Knowledge _ _ O
base _ _ O
Who _ _ O
is _ _ O
in _ _ O
room _ _ O
105 _ _ O
? _ _ O
l _ _ O
Query _ _ O
: _ _ O
? _ _ O
located _ _ O
( _ _ O
X _ _ O
, _ _ O
105 _ _ O
) _ _ O
l _ _ O
Solution _ _ O
: _ _ O
alice _ _ O
, _ _ O
bob _ _ O
, _ _ O
carol _ _ O

Write _ _ O
and _ _ O
evaluate _ _ O
the _ _ O
following _ _ O
queries _ _ O
grant _ _ O
( _ _ O
U _ _ O
, _ _ O
projector _ _ O
) _ _ O
: _ _ O
- _ _ O
located _ _ O
( _ _ O
U _ _ O
, _ _ O
105 _ _ O
) _ _ O
, _ _ O
role _ _ O
( _ _ O
U _ _ O
, _ _ O
presenter _ _ O
) _ _ O
located _ _ O
( _ _ O
U _ _ O
, _ _ O
R _ _ O
) _ _ O
: _ _ O
- _ _ O
owns _ _ O
( _ _ O
U _ _ O
, _ _ O
D _ _ O
) _ _ O
, _ _ O
dev_loc _ _ O
( _ _ O
D _ _ O
, _ _ O
R _ _ O
) _ _ O
role _ _ O
( _ _ O
bob _ _ O
, _ _ O
presenter _ _ O
) _ _ O
owns _ _ O
( _ _ O
alice _ _ O
, _ _ O
laptop12 _ _ O
) _ _ O
role _ _ O
( _ _ O
carol _ _ O
, _ _ O
presenter _ _ O
) _ _ O
owns _ _ O
( _ _ O
bob _ _ O
, _ _ O
tablet23 _ _ O
) _ _ O
owns _ _ O
( _ _ O
carol _ _ O
, _ _ O
cell42 _ _ O
) _ _ O
n _ _ O
Can _ _ O
Alice _ _ O
use _ _ O
the _ _ O
projector _ _ O
? _ _ O
l _ _ O
? _ _ O
grant _ _ O
( _ _ O
alice _ _ O
, _ _ O
projector _ _ O
) _ _ O
l _ _ O
false _ _ O
n _ _ O
Can _ _ O
Carol _ _ O
use _ _ O
the _ _ O
projector _ _ O
l _ _ O
? _ _ O
grant _ _ O
( _ _ O
carol _ _ O
, _ _ O
projector _ _ O
) _ _ O
l _ _ O
true _ _ O
dev_loc _ _ O
( _ _ O
laptop12 _ _ O
, _ _ O
105 _ _ O
) _ _ O
dev_loc _ _ O
( _ _ O
tablet23 _ _ O
, _ _ O
105 _ _ O
) _ _ O
dev_loc _ _ O
( _ _ O
cell42 _ _ O
, _ _ O
105 _ _ O
) _ _ O
n _ _ O
Which _ _ O
devices _ _ O
does _ _ O
Alice _ _ O
own _ _ O
? _ _ O
l _ _ O
? _ _ O
owns _ _ O
( _ _ O
alice _ _ O
, _ _ O
X _ _ O
) _ _ O
l _ _ O
laptop12 _ _ O

Logic _ _ O
programming _ _ O
is _ _ O
a _ _ O
useful _ _ O
tool _ _ O
! _ _ O
Name _ _ O
Age _ _ O
Phone _ _ O
Alice _ _ O
19 _ _ O
555 _ _ O
- _ _ O
1234 _ _ O
Danielle _ _ O
33 _ _ O
555 _ _ O
- _ _ O
5353 _ _ O
Zach _ _ O
27 _ _ O
555 _ _ O
- _ _ O
3217 _ _ O
Charlie _ _ O
21 _ _ O
555 _ _ O
- _ _ O
2335 _ _ O
Artificial _ _ O
Intelligence _ _ O
Databases _ _ O
Route _ _ O
planning _ _ O
Security _ _ O

Just _ _ O
for _ _ O
grins _ _ O
… _ _ O
If _ _ O
you _ _ O
are _ _ O
interested _ _ O
in _ _ O
playing _ _ O
around _ _ O
with _ _ O
logic _ _ O
programming _ _ O
, _ _ O
download _ _ O
SWI-Prolog _ _ O
l _ _ O
URL _ _ O
: _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.swi-prolog.org _ _ O
/ _ _ O
This _ _ O
( _ _ O
free _ _ O
) _ _ O
package _ _ O
is _ _ O
a _ _ O
runtime _ _ O
environment _ _ O
in _ _ O
which _ _ O
you _ _ O
can _ _ O
write _ _ O
logic _ _ O
programs _ _ O
and _ _ O
evaluate _ _ O
queries _ _ O
. _ _ O
Dave _ _ O
Charlie _ _ O
Alice _ _ O
Elise _ _ O
Bob _ _ O
Becky _ _ O
Frank _ _ O
Sarah _ _ O
Tommy _ _ O

Nested _ _ B-Concept
quantifiers _ _ I-Concept
! _ _ O
? _ _ O
! _ _ O
? _ _ O
Many _ _ O
times _ _ O
, _ _ O
we _ _ O
need _ _ O
the _ _ O
ability _ _ O
to _ _ O
nest _ _ B-Concept
one _ _ O
quantifier _ _ B-Concept
within _ _ O
the _ _ O
scope _ _ O
of _ _ O
another _ _ O
quantifier _ _ B-Concept
Example _ _ O
: _ _ O
All _ _ O
integers _ _ O
have _ _ O
an _ _ O
additive _ _ O
inverse _ _ O
. _ _ O
That _ _ O
is _ _ O
, _ _ O
for _ _ O
any _ _ O
integer _ _ O
x _ _ O
, _ _ O
we _ _ O
can _ _ O
choose _ _ O
an _ _ O
integer _ _ O
y _ _ O
such _ _ O
that _ _ O
the _ _ O
sum _ _ O
of _ _ O
x _ _ O
and _ _ O
y _ _ O
is _ _ O
zero _ _ O
. _ _ O
" _ _ O
x _ _ O
$ _ _ O
y _ _ O
( _ _ O
x _ _ O
+ _ _ O
y _ _ O
= _ _ O
0 _ _ O
) _ _ O
There _ _ O
is _ _ O
no _ _ O
way _ _ O
to _ _ O
express _ _ O
this _ _ O
statement _ _ O
using _ _ O
only _ _ O
a _ _ O
single _ _ O
quantifier _ _ O
! _ _ O

Deciphering _ _ O
nested _ _ B-Concept
quantifiers _ _ I-Concept
is _ _ O
n’t _ _ O
as _ _ O
scary _ _ O
as _ _ O
it _ _ O
looks _ _ O
… _ _ O
… _ _ O
if _ _ O
you _ _ O
remember _ _ O
to _ _ O
read _ _ O
from _ _ O
left _ _ O
to _ _ O
right _ _ O
! _ _ O
" _ _ O
x _ _ O
$ _ _ O
y _ _ O
" _ _ O
z _ _ O
[ _ _ O
( _ _ O
x _ _ O
+ _ _ O
y _ _ O
) _ _ O
×z _ _ O
= _ _ O
0 _ _ O
] _ _ O
For _ _ O
all _ _ O
x _ _ O
… _ _ O
… _ _ O
there _ _ O
exists _ _ O
a _ _ O
y _ _ O
such _ _ O
that _ _ O
… _ _ O
… _ _ O
for _ _ O
all _ _ O
z _ _ O
… _ _ O
And _ _ O
think _ _ O
about _ _ O
scope _ _ O
of _ _ O
variables _ _ O
like _ _ O
with _ _ O
programming _ _ O
! _ _ O
… _ _ O
( _ _ O
x _ _ O
+ _ _ O
y _ _ O
) _ _ O
× _ _ O
z _ _ O
= _ _ O
0 _ _ O

A _ _ O
few _ _ O
more _ _ O
examples _ _ O
… _ _ O
" _ _ O
x _ _ O
" _ _ O
y _ _ O
( _ _ O
x _ _ O
+ _ _ O
y _ _ O
= _ _ O
y _ _ O
+ _ _ O
x _ _ O
) _ _ O
This _ _ O
is _ _ O
the _ _ O
commutative _ _ B-Concept
law _ _ I-Concept
for _ _ O
addition _ _ O
! _ _ O
l _ _ O
For _ _ O
all _ _ O
integers _ _ O
x _ _ O
and _ _ O
for _ _ O
all _ _ O
integers _ _ O
y _ _ O
, _ _ O
x _ _ O
+ _ _ O
y _ _ O
= _ _ O
y _ _ O
+ _ _ O
x _ _ O
" _ _ O
x _ _ O
" _ _ O
y _ _ O
" _ _ O
z _ _ O
[ _ _ O
( _ _ O
x+y _ _ O
) _ _ O
+z _ _ O
= _ _ O
x+ _ _ O
( _ _ O
y+z _ _ O
) _ _ O
] _ _ O
This _ _ O
is _ _ O
the _ _ O
associative _ _ B-Concept
law _ _ I-Concept
for _ _ O
addition _ _ O
! _ _ O
l _ _ O
For _ _ O
all _ _ O
integers _ _ O
x _ _ O
, _ _ O
for _ _ O
all _ _ O
integers _ _ O
y _ _ O
, _ _ O
and _ _ O
for _ _ O
all _ _ O
integers _ _ O
z _ _ O
, _ _ O
( _ _ O
x+y _ _ O
) _ _ O
+z _ _ O
= _ _ O
x+ _ _ O
( _ _ O
y+z _ _ O
) _ _ O
$ _ _ O
x _ _ O
" _ _ O
y _ _ O
( _ _ O
x× _ _ O
y _ _ O
= _ _ O
0 _ _ O
) _ _ O
l _ _ O
There _ _ O
exists _ _ O
an _ _ O
x _ _ O
such _ _ O
that _ _ O
for _ _ O
all _ _ O
y _ _ O
, _ _ O
x× _ _ O
y _ _ O
= _ _ O
0 _ _ O

Since _ _ O
we _ _ O
always _ _ O
read _ _ O
from _ _ O
left _ _ O
to _ _ O
right _ _ O
, _ _ O
the _ _ O
order _ _ O
of _ _ O
quantifiers _ _ O
matters _ _ O
! _ _ O
Consider _ _ O
: _ _ O
" _ _ O
x _ _ O
$ _ _ O
y _ _ O
( _ _ O
x _ _ O
+ _ _ O
y _ _ O
= _ _ O
0 _ _ O
) _ _ O
Clearly _ _ O
true _ _ O
! _ _ O
Just _ _ O
set _ _ O
y _ _ O
= _ _ O
-x _ _ O
➣ _ _ O
Every _ _ O
integer _ _ O
has _ _ O
an _ _ O
additive _ _ O
inverse _ _ O
Not _ _ O
true _ _ O
… _ _ O
Transpose _ _ O
: _ _ O
$ _ _ O
y _ _ O
" _ _ O
x _ _ O
( _ _ O
x _ _ O
+ _ _ O
y _ _ O
= _ _ O
0 _ _ O
) _ _ O
➣ _ _ O
There _ _ O
exists _ _ O
some _ _ O
integer _ _ O
y _ _ O
such _ _ O
that _ _ O
when _ _ O
added _ _ O
to _ _ O
any _ _ O
other _ _ O
integer _ _ O
x _ _ O
, _ _ O
the _ _ O
sum _ _ O
of _ _ O
x _ _ O
and _ _ O
y _ _ O
is _ _ O
0 _ _ O
Remember _ _ O
: _ _ O
As _ _ O
long _ _ O
as _ _ O
you _ _ O
read _ _ O
from _ _ O
left _ _ O
to _ _ O
right _ _ O
, _ _ O
you _ _ O
wo _ _ O
n’t _ _ O
have _ _ O
any _ _ O
problems _ _ O
! _ _ O

Many _ _ O
mathematical _ _ O
statements _ _ O
can _ _ O
be _ _ O
translated _ _ O
into _ _ O
logical _ _ O
statements _ _ O
with _ _ O
nested _ _ B-Concept
quantifiers _ _ I-Concept
Translating _ _ O
mathematical _ _ O
expressions _ _ O
is _ _ O
often _ _ O
easier _ _ O
than _ _ O
translating _ _ O
English _ _ O
statements _ _ O
! _ _ O
Steps _ _ O
: _ _ O
1 _ _ O
. _ _ O
Rewrite _ _ O
statement _ _ O
to _ _ O
make _ _ O
quantification _ _ O
and _ _ O
logical _ _ O
operators _ _ O
more _ _ O
explicit _ _ O
2 _ _ O
. _ _ O
Determine _ _ O
the _ _ O
order _ _ O
in _ _ O
which _ _ O
quantifiers _ _ O
should _ _ O
appear _ _ O
3 _ _ O
. _ _ O
Generate _ _ O
logical _ _ O
expression _ _ O

Let _ _ O
’s _ _ O
try _ _ O
a _ _ O
translation _ _ O
… _ _ O
Universal _ _ O
quantifier _ _ O
Statement _ _ O
: _ _ O
Every _ _ O
real _ _ O
number _ _ O
except _ _ O
zero _ _ O
has _ _ O
a _ _ O
multiplicative _ _ O
inverse _ _ O
x×y=1 _ _ O
Singular—suggestive _ _ O
of _ _ O
an _ _ O
existential _ _ O
quantifier _ _ O
" _ _ O
x _ _ O
Rewrite _ _ O
: _ _ O
For _ _ O
every _ _ O
real _ _ O
number _ _ O
x _ _ O
, _ _ O
if _ _ O
x _ _ O
≠ _ _ O
0 _ _ O
, _ _ O
then _ _ O
there _ _ O
exists _ _ O
a _ _ O
real _ _ O
number _ _ O
y _ _ O
such _ _ O
that _ _ O
x×y _ _ O
= _ _ O
1 _ _ O
. _ _ O
… _ _ O
$ _ _ O
y _ _ O
( _ _ O
x _ _ O
× _ _ O
y _ _ O
= _ _ O
1 _ _ O
) _ _ O
( _ _ O
x _ _ O
≠ _ _ O
0 _ _ O
) _ _ O
→ _ _ O
… _ _ O
Translation _ _ O
: _ _ O
" _ _ O
x _ _ O
[ _ _ O
( _ _ O
x _ _ O
≠ _ _ O
0 _ _ O
) _ _ O
→ _ _ O
$ _ _ O
y _ _ O
( _ _ O
x _ _ O
× _ _ O
y _ _ O
= _ _ O
1 _ _ O
) _ _ O
] _ _ O
OR _ _ O
" _ _ O
x _ _ O
$ _ _ O
y _ _ O
[ _ _ O
( _ _ O
x _ _ O
≠ _ _ O
0 _ _ O
) _ _ O
→ _ _ O
( _ _ O
x _ _ O
× _ _ O
y _ _ O
= _ _ O
1 _ _ O
) _ _ O
] _ _ O

More _ _ O
examples _ _ O
… _ _ O
Statement _ _ O
: _ _ O
The _ _ O
product _ _ O
of _ _ O
any _ _ O
two _ _ O
negative _ _ O
integers _ _ O
is _ _ O
always _ _ O
positive _ _ O
l _ _ O
For _ _ O
any _ _ O
integer _ _ O
x _ _ O
and _ _ O
any _ _ O
integer _ _ O
y _ _ O
, _ _ O
if _ _ O
x _ _ O
< _ _ O
0 _ _ O
and _ _ O
y _ _ O
< _ _ O
0 _ _ O
, _ _ O
then _ _ O
x× _ _ O
y _ _ O
> _ _ O
0 _ _ O
l _ _ O
" _ _ O
x _ _ O
" _ _ O
y _ _ O
[ _ _ O
( _ _ O
x _ _ O
< _ _ O
0 _ _ O
∧ _ _ O
y _ _ O
< _ _ O
0 _ _ O
) _ _ O
→ _ _ O
( _ _ O
x× _ _ O
y _ _ O
> _ _ O
0 _ _ O
) _ _ O
] _ _ O
Statement _ _ O
: _ _ O
For _ _ O
any _ _ O
real _ _ O
number _ _ O
a _ _ O
, _ _ O
it _ _ O
is _ _ O
possible _ _ O
to _ _ O
choose _ _ O
real _ _ O
numbers _ _ O
b _ _ O
and _ _ O
c _ _ O
such _ _ O
that _ _ O
a2 _ _ O
+ _ _ O
b2 _ _ O
= _ _ O
c2 _ _ O
l _ _ O
For _ _ O
any _ _ O
real _ _ O
number _ _ O
a _ _ O
, _ _ O
there _ _ O
exist _ _ O
real _ _ O
numbers _ _ O
b _ _ O
and _ _ O
c _ _ O
such _ _ O
that _ _ O
a2 _ _ O
+ _ _ O
b2 _ _ O
= _ _ O
c2 _ _ O
l _ _ O
" _ _ O
a _ _ O
$ _ _ O
b _ _ O
$ _ _ O
c _ _ O
( _ _ O
a2 _ _ O
+ _ _ O
b2 _ _ O
= _ _ O
c2 _ _ O
) _ _ O

Translating _ _ O
quantified _ _ O
statements _ _ O
to _ _ O
English _ _ O
is _ _ O
as _ _ O
easy _ _ O
as _ _ O
reading _ _ O
a _ _ O
sentence _ _ O
! _ _ O
Let _ _ O
: _ _ O
l _ _ O
C _ _ O
( _ _ O
x _ _ O
) _ _ O
≡ _ _ O
x _ _ O
is _ _ O
enrolled _ _ O
in _ _ O
CS441 _ _ O
l _ _ O
M _ _ O
( _ _ O
x _ _ O
) _ _ O
≡ _ _ O
x _ _ O
has _ _ O
an _ _ O
MP3 _ _ O
player _ _ O
l _ _ O
F _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
≡ _ _ O
x _ _ O
and _ _ O
y _ _ O
are _ _ O
friends _ _ O
l _ _ O
Domain _ _ O
of _ _ O
x _ _ O
and _ _ O
y _ _ O
is _ _ O
“ _ _ O
all _ _ O
students _ _ O
” _ _ O
Statement _ _ O
: _ _ O
∀x _ _ O
[ _ _ O
C _ _ O
( _ _ O
x _ _ O
) _ _ O
→ _ _ O
M _ _ O
( _ _ O
x _ _ O
) _ _ O
∨ _ _ O
( _ _ O
∃y _ _ O
( _ _ O
F _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
∧ _ _ O
M _ _ O
( _ _ O
y _ _ O
) _ _ O
) _ _ O
] _ _ O
For _ _ O
every _ _ O
student _ _ O
x _ _ O
… _ _ O
… _ _ O
if _ _ O
x _ _ O
is _ _ O
enrolled _ _ O
in _ _ O
CS441 _ _ O
, _ _ O
then _ _ O
… _ _ O
… _ _ O
x _ _ O
has _ _ O
an _ _ O
MP3 _ _ O
player _ _ O
… _ _ O
… _ _ O
or _ _ O
there _ _ O
exists _ _ O
another _ _ O
student _ _ O
y _ _ O
such _ _ O
that _ _ O
… _ _ O
… _ _ O
x _ _ O
and _ _ O
y _ _ O
are _ _ O
friends _ _ O
… _ _ O
… _ _ O
and _ _ O
y _ _ O
has _ _ O
an _ _ O
MP3 _ _ O
player _ _ O
. _ _ O

Translate _ _ O
the _ _ O
following _ _ O
expressions _ _ O
into _ _ O
English _ _ O
Let _ _ O
: _ _ O
l _ _ O
O _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
≡ _ _ O
x _ _ O
is _ _ O
older _ _ O
than _ _ O
y _ _ O
l _ _ O
F _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
≡ _ _ O
x _ _ O
and _ _ O
y _ _ O
are _ _ O
friends _ _ O
l _ _ O
The _ _ O
domain _ _ O
for _ _ O
variables _ _ O
x _ _ O
and _ _ O
y _ _ O
is _ _ O
“ _ _ O
all _ _ O
students _ _ O
” _ _ O
Statement _ _ O
: _ _ O
∃x _ _ O
∀y _ _ O
O _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
l _ _ O
There _ _ O
exists _ _ O
a _ _ O
student _ _ O
x _ _ O
, _ _ O
such _ _ O
that _ _ O
for _ _ O
all _ _ O
students _ _ O
y _ _ O
, _ _ O
x _ _ O
is _ _ O
older _ _ O
than _ _ O
y. _ _ O
l _ _ O
Alternatively _ _ O
: _ _ O
There _ _ O
exists _ _ O
an _ _ O
oldest _ _ O
student _ _ O
. _ _ O
Statement _ _ O
: _ _ O
∃x _ _ O
∃y _ _ O
[ _ _ O
F _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
∧ _ _ O
∀z _ _ O
[ _ _ O
( _ _ O
y≠z _ _ O
) _ _ O
→ _ _ O
¬F _ _ O
( _ _ O
x _ _ O
, _ _ O
z _ _ O
) _ _ O
] _ _ O
] _ _ O
l _ _ O
There _ _ O
exists _ _ O
two _ _ O
students _ _ O
x _ _ O
and _ _ O
y _ _ O
such _ _ O
that _ _ O
x _ _ O
and _ _ O
y _ _ O
are _ _ O
friends _ _ O
and _ _ O
for _ _ O
all _ _ O
students _ _ O
z _ _ O
, _ _ O
if _ _ O
z _ _ O
≠ _ _ O
y _ _ O
, _ _ O
then _ _ O
x _ _ O
and _ _ O
z _ _ O
are _ _ O
not _ _ O
friends _ _ O
. _ _ O
l _ _ O
Alternatively _ _ O
: _ _ O
There _ _ O
exists _ _ O
a _ _ O
student _ _ O
with _ _ O
only _ _ O
one _ _ O
friend _ _ O
L _ _ O

In-class _ _ O
exercises _ _ O
Problem _ _ O
1 _ _ O
: _ _ O
Translate _ _ O
the _ _ O
following _ _ O
mathematical _ _ O
statement _ _ O
into _ _ O
predicate _ _ O
logic _ _ O
: _ _ O
Every _ _ O
even _ _ O
number _ _ O
is _ _ O
a _ _ O
multiple _ _ O
of _ _ O
2 _ _ O
. _ _ O
Assume _ _ O
that _ _ O
the _ _ O
predicate _ _ O
E _ _ O
( _ _ O
x _ _ O
) _ _ O
means _ _ O
“ _ _ O
x _ _ O
is _ _ O
even _ _ O
. _ _ O
” _ _ O
l _ _ O
Hint _ _ O
: _ _ O
What _ _ O
does _ _ O
“ _ _ O
x _ _ O
is _ _ O
a _ _ O
multiple _ _ O
of _ _ O
2 _ _ O
” _ _ O
mean _ _ O
algebraically _ _ O
? _ _ O
Try _ _ O
not _ _ O
to _ _ O
use _ _ O
“ _ _ O
mod _ _ O
. _ _ O
” _ _ O
Problem _ _ O
2 _ _ O
: _ _ O
Translate _ _ O
the _ _ O
following _ _ O
expressions _ _ O
into _ _ O
English _ _ O
. _ _ O
Assume _ _ O
that _ _ O
C _ _ O
( _ _ O
x _ _ O
) _ _ O
means _ _ O
“ _ _ O
x _ _ O
has _ _ O
a _ _ O
car _ _ O
” _ _ O
, _ _ O
F _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
means _ _ O
“ _ _ O
x _ _ O
and _ _ O
y _ _ O
are _ _ O
friends _ _ O
” _ _ O
, _ _ O
and _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
means _ _ O
“ _ _ O
x _ _ O
is _ _ O
a _ _ O
student _ _ O
. _ _ O
” _ _ O
l _ _ O
l _ _ O
∀x _ _ O
( _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
→ _ _ O
C _ _ O
( _ _ O
x _ _ O
) _ _ O
∨ _ _ O
∃y _ _ O
[ _ _ O
F _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
∧ _ _ O
C _ _ O
( _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
∀x _ _ O
∃y _ _ O
∃z _ _ O
[ _ _ O
C _ _ O
( _ _ O
x _ _ O
) _ _ O
∨ _ _ O
( _ _ O
F _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
∧ _ _ O
C _ _ O
( _ _ O
y _ _ O
) _ _ O
) _ _ O
∨ _ _ O
( _ _ O
F _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
∧ _ _ O
F _ _ O
( _ _ O
y _ _ O
, _ _ O
z _ _ O
) _ _ O
∧ _ _ O
C _ _ O
( _ _ O
z _ _ O
) _ _ O
) _ _ O
] _ _ O

Translating _ _ O
from _ _ O
English _ _ O
to _ _ O
a _ _ O
logical _ _ O
expression _ _ O
with _ _ O
nested _ _ O
quantifiers _ _ O
is _ _ O
a _ _ O
little _ _ O
bit _ _ O
more _ _ O
work _ _ O
… _ _ O
Steps _ _ O
: _ _ O
1 _ _ O
. _ _ O
If _ _ O
necessary _ _ O
, _ _ O
rewrite _ _ O
the _ _ O
sentence _ _ O
to _ _ O
make _ _ O
quantifiers _ _ O
and _ _ O
logical _ _ O
operations _ _ O
more _ _ O
explicit _ _ O
2 _ _ O
. _ _ O
Create _ _ O
propositional _ _ O
functions _ _ O
to _ _ O
express _ _ O
the _ _ O
concepts _ _ O
in _ _ O
the _ _ O
sentence _ _ O
3 _ _ O
. _ _ O
State _ _ O
the _ _ O
domains _ _ O
of _ _ O
the _ _ O
variables _ _ O
in _ _ O
each _ _ O
propositional _ _ O
function _ _ O
4 _ _ O
. _ _ O
Determine _ _ O
the _ _ O
order _ _ O
of _ _ O
quantifiers _ _ O
5 _ _ O
. _ _ O
Generate _ _ O
logical _ _ O
expression _ _ O

Let _ _ O
’s _ _ O
try _ _ O
an _ _ O
example _ _ O
… _ _ O
Universal _ _ B-Concept
quantifier _ _ I-Concept
Statement _ _ O
: _ _ O
Every _ _ O
student _ _ O
has _ _ O
asked _ _ O
at _ _ O
least _ _ O
one _ _ O
professor _ _ O
a _ _ O
question _ _ O
. _ _ O
Existential _ _ B-Concept
quantifier _ _ I-Concept
Rewrite _ _ O
: _ _ O
For _ _ O
every _ _ O
person _ _ O
x _ _ O
, _ _ O
if _ _ O
x _ _ O
is _ _ O
a _ _ O
student _ _ O
, _ _ O
then _ _ O
there _ _ O
exists _ _ O
a _ _ O
professor _ _ O
whom _ _ O
x _ _ O
has _ _ O
asked _ _ O
a _ _ O
question _ _ O
. _ _ O
Let _ _ O
: _ _ O
l _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
≡ _ _ O
x _ _ O
is _ _ O
a _ _ O
student _ _ O
l _ _ O
P _ _ O
( _ _ O
x _ _ O
) _ _ O
≡ _ _ O
x _ _ O
is _ _ O
a _ _ O
professor _ _ O
l _ _ O
Q _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
≡ _ _ O
x _ _ O
has _ _ O
asked _ _ O
y _ _ O
a _ _ O
question _ _ O
Domains _ _ O
for _ _ O
x _ _ O
and _ _ O
y _ _ O
are _ _ O
“ _ _ O
all _ _ O
people _ _ O
” _ _ O
Translation _ _ O
: _ _ O
∀x _ _ O
( _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
→ _ _ O
∃y _ _ O
[ _ _ O
P _ _ O
( _ _ O
y _ _ O
) _ _ O
∧ _ _ O
Q _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O

Translate _ _ O
the _ _ O
following _ _ O
from _ _ O
English _ _ O
Statement _ _ O
: _ _ O
There _ _ O
is _ _ O
a _ _ O
man _ _ O
who _ _ O
has _ _ O
tasted _ _ O
every _ _ O
type _ _ O
of _ _ O
beer _ _ O
. _ _ O
Rewrite _ _ O
: _ _ O
There _ _ O
exists _ _ O
a _ _ O
person _ _ O
x _ _ O
such _ _ O
that _ _ O
x _ _ O
is _ _ O
man _ _ O
and _ _ O
for _ _ O
all _ _ O
types _ _ O
of _ _ O
drink _ _ O
y _ _ O
, _ _ O
if _ _ O
y _ _ O
is _ _ O
a _ _ O
beer _ _ O
then _ _ O
x _ _ O
has _ _ O
tasted _ _ O
y. _ _ O
Domain _ _ O
: _ _ O
all _ _ O
people _ _ O
Let _ _ O
: _ _ O
l _ _ O
M _ _ O
( _ _ O
x _ _ O
) _ _ O
≡ _ _ O
x _ _ O
is _ _ O
a _ _ O
man _ _ O
l _ _ O
B _ _ O
( _ _ O
x _ _ O
) _ _ O
≡ _ _ O
x _ _ O
is _ _ O
a _ _ O
beer _ _ O
l _ _ O
T _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
≡ _ _ O
x _ _ O
has _ _ O
tasted _ _ O
y _ _ O
Domain _ _ O
: _ _ O
all _ _ O
drinks _ _ O
Domains _ _ O
: _ _ O
x _ _ O
= _ _ O
all _ _ O
people _ _ O
, _ _ O
y _ _ O
= _ _ O
all _ _ O
drinks _ _ O
Translation _ _ O
: _ _ O
∃x _ _ O
( _ _ O
M _ _ O
( _ _ O
x _ _ O
) _ _ O
∧ _ _ O
∀y _ _ O
[ _ _ O
B _ _ O
( _ _ O
y _ _ O
) _ _ O
→ _ _ O
T _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O

Negating _ _ O
expression _ _ O
with _ _ O
nested _ _ O
quantifiers _ _ O
is _ _ O
actually _ _ O
pretty _ _ O
straightforward _ _ O
… _ _ O
… _ _ O
you _ _ O
just _ _ O
repeatedly _ _ O
apply _ _ O
DeMorgan _ _ B-Concept
’s _ _ I-Concept
laws _ _ I-Concept
! _ _ O
¬ _ _ O
[ _ _ O
∃x _ _ O
( _ _ O
M _ _ O
( _ _ O
x _ _ O
) _ _ O
∧ _ _ O
∀y _ _ O
[ _ _ O
B _ _ O
( _ _ O
y _ _ O
) _ _ O
→ _ _ O
T _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
] _ _ O
≡ _ _ O
∀x _ _ O
¬ _ _ O
( _ _ O
M _ _ O
( _ _ O
x _ _ O
) _ _ O
∧ _ _ O
∀y _ _ O
[ _ _ O
B _ _ O
( _ _ O
y _ _ O
) _ _ O
→ _ _ O
T _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
≡ _ _ O
∀x _ _ O
( _ _ O
¬M _ _ O
( _ _ O
x _ _ O
) _ _ O
∨ _ _ O
¬∀y _ _ O
[ _ _ O
B _ _ O
( _ _ O
y _ _ O
) _ _ O
→ _ _ O
T _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
≡ _ _ O
∀x _ _ O
( _ _ O
¬M _ _ O
( _ _ O
x _ _ O
) _ _ O
∨ _ _ O
∃y _ _ O
¬ _ _ O
[ _ _ O
B _ _ O
( _ _ O
y _ _ O
) _ _ O
→ _ _ O
T _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
≡ _ _ O
∀x _ _ O
( _ _ O
¬M _ _ O
( _ _ O
x _ _ O
) _ _ O
∨ _ _ O
∃y _ _ O
¬ _ _ O
[ _ _ O
¬B _ _ O
( _ _ O
y _ _ O
) _ _ O
∨ _ _ O
T _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
≡ _ _ O
∀x _ _ O
( _ _ O
¬M _ _ O
( _ _ O
x _ _ O
) _ _ O
∨ _ _ O
∃y _ _ O
[ _ _ O
B _ _ O
( _ _ O
y _ _ O
) _ _ O
∧ _ _ O
¬T _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
≡ _ _ O
∀x _ _ O
( _ _ O
M _ _ O
( _ _ O
x _ _ O
) _ _ O
→ _ _ O
∃y _ _ O
[ _ _ O
B _ _ O
( _ _ O
y _ _ O
) _ _ O
∧ _ _ O
¬T _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
a _ _ O
→ _ _ O
b _ _ O
≡ _ _ O
¬a _ _ O
∨ _ _ O
b _ _ O
In _ _ O
English _ _ O
: _ _ O
For _ _ O
all _ _ O
people _ _ O
x _ _ O
, _ _ O
if _ _ O
x _ _ O
is _ _ O
a _ _ O
man _ _ O
, _ _ O
then _ _ O
there _ _ O
exists _ _ O
some _ _ O
type _ _ O
beer _ _ O
that _ _ O
x _ _ O
has _ _ O
not _ _ O
tasted _ _ O
. _ _ O
Alternatively _ _ O
: _ _ O
No _ _ O
man _ _ O
has _ _ O
tasted _ _ O
every _ _ O
type _ _ O
of _ _ O
beer _ _ O
. _ _ O

A _ _ O
few _ _ O
stumbling _ _ O
blocks _ _ O
… _ _ O
Whether _ _ O
the _ _ O
negation _ _ O
sign _ _ O
is _ _ O
on _ _ O
the _ _ O
inside _ _ O
or _ _ O
the _ _ O
outside _ _ O
of _ _ O
a _ _ O
quantified _ _ O
statement _ _ O
makes _ _ O
a _ _ O
big _ _ O
difference _ _ O
! _ _ O
Example _ _ O
: _ _ O
Let _ _ O
T _ _ O
( _ _ O
x _ _ O
) _ _ O
≡ _ _ O
“ _ _ O
x _ _ O
is _ _ O
tall _ _ O
” _ _ O
. _ _ O
Consider _ _ O
the _ _ O
following _ _ O
: _ _ O
l _ _ O
¬∀x _ _ O
T _ _ O
( _ _ O
x _ _ O
) _ _ O
➣ _ _ O
“ _ _ O
It _ _ O
is _ _ O
not _ _ O
the _ _ O
case _ _ O
that _ _ O
all _ _ O
people _ _ O
are _ _ O
tall _ _ O
. _ _ O
” _ _ O
l _ _ O
∀x _ _ O
¬T _ _ O
( _ _ O
x _ _ O
) _ _ O
➣ _ _ O
“ _ _ O
For _ _ O
all _ _ O
people _ _ O
x _ _ O
, _ _ O
it _ _ O
is _ _ O
not _ _ O
the _ _ O
case _ _ O
that _ _ O
x _ _ O
is _ _ O
tall _ _ O
. _ _ O
” _ _ O
Note _ _ O
: _ _ O
¬∀x _ _ O
T _ _ O
( _ _ O
x _ _ O
) _ _ O
= _ _ O
∃x _ _ O
¬T _ _ O
( _ _ O
x _ _ O
) _ _ O
≠ _ _ O
∀x _ _ O
¬T _ _ O
( _ _ O
x _ _ O
) _ _ O
Recall _ _ O
: _ _ O
When _ _ O
we _ _ O
push _ _ O
negation _ _ O
into _ _ O
a _ _ O
quantifier _ _ O
, _ _ O
DeMorgan _ _ O
’s _ _ O
law _ _ O
says _ _ O
that _ _ O
we _ _ O
need _ _ O
to _ _ O
switch _ _ O
the _ _ O
quantifier _ _ O
! _ _ O

A _ _ O
few _ _ O
stumbling _ _ O
blocks _ _ O
… _ _ O
Let _ _ O
: _ _ O
C _ _ O
( _ _ O
x _ _ O
) _ _ O
≡ _ _ O
“ _ _ O
x _ _ O
is _ _ O
enrolled _ _ O
in _ _ O
CS441 _ _ O
” _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
≡ _ _ O
“ _ _ O
x _ _ O
is _ _ O
smart _ _ O
. _ _ O
” _ _ O
Question _ _ O
: _ _ O
The _ _ O
following _ _ O
two _ _ O
statements _ _ O
look _ _ O
the _ _ O
same _ _ O
, _ _ O
what _ _ O
’s _ _ O
the _ _ O
difference _ _ O
? _ _ O
l _ _ O
∃x _ _ O
[ _ _ O
C _ _ O
( _ _ O
x _ _ O
) _ _ O
∧ _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
] _ _ O
l _ _ O
∃x _ _ O
[ _ _ O
C _ _ O
( _ _ O
x _ _ O
) _ _ O
→ _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
] _ _ O
There _ _ O
is _ _ O
a _ _ O
smart _ _ O
student _ _ O
in _ _ O
CS441 _ _ O
. _ _ O
There _ _ O
exists _ _ O
a _ _ O
student _ _ O
x _ _ O
such _ _ O
that _ _ O
if _ _ O
x _ _ O
is _ _ O
in _ _ O
CS441 _ _ O
, _ _ O
then _ _ O
x _ _ O
is _ _ O
smart _ _ O
. _ _ O
Subtle _ _ O
note _ _ O
: _ _ O
The _ _ O
second _ _ O
statement _ _ O
is _ _ O
true _ _ O
if _ _ O
there _ _ O
exists _ _ O
one _ _ O
person _ _ O
not _ _ O
in _ _ O
CS441 _ _ O
, _ _ O
because _ _ O
F→F _ _ O
or _ _ O
F→T. _ _ O

Negate _ _ O
∀x _ _ O
( _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
→ _ _ O
∃y _ _ O
[ _ _ O
P _ _ O
( _ _ O
y _ _ O
) _ _ O
∧ _ _ O
Q _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
¬∀x _ _ O
( _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
→ _ _ O
∃y _ _ O
[ _ _ O
P _ _ O
( _ _ O
y _ _ O
) _ _ O
∧ _ _ O
Q _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
≡ _ _ O
∃x _ _ O
¬ _ _ O
( _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
→ _ _ O
∃y _ _ O
[ _ _ O
P _ _ O
( _ _ O
y _ _ O
) _ _ O
∧ _ _ O
Q _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
≡ _ _ O
∃x _ _ O
¬ _ _ O
( _ _ O
¬S _ _ O
( _ _ O
x _ _ O
) _ _ O
∨ _ _ O
∃y _ _ O
[ _ _ O
P _ _ O
( _ _ O
y _ _ O
) _ _ O
∧ _ _ O
Q _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
≡ _ _ O
∃x _ _ O
( _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
∧ _ _ O
¬∃y _ _ O
[ _ _ O
P _ _ O
( _ _ O
y _ _ O
) _ _ O
∧ _ _ O
Q _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
≡ _ _ O
∃x _ _ O
( _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
∧ _ _ O
∀y _ _ O
¬ _ _ O
[ _ _ O
P _ _ O
( _ _ O
y _ _ O
) _ _ O
∧ _ _ O
Q _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
≡ _ _ O
∃x _ _ O
( _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
∧ _ _ O
∀y _ _ O
[ _ _ O
¬P _ _ O
( _ _ O
y _ _ O
) _ _ O
∨ _ _ O
¬Q _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
≡ _ _ O
∃x _ _ O
( _ _ O
S _ _ O
( _ _ O
x _ _ O
) _ _ O
∧ _ _ O
∀y _ _ O
[ _ _ O
P _ _ O
( _ _ O
y _ _ O
) _ _ O
→ _ _ O
¬Q _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
] _ _ O
) _ _ O
In _ _ O
English _ _ O
: _ _ O
There _ _ O
exists _ _ O
a _ _ O
student _ _ O
x _ _ O
such _ _ O
that _ _ O
for _ _ O
all _ _ O
people _ _ O
y _ _ O
, _ _ O
if _ _ O
y _ _ O
is _ _ O
a _ _ O
professor _ _ O
then _ _ O
x _ _ O
has _ _ O
not _ _ O
asked _ _ O
y _ _ O
a _ _ O
question _ _ O
. _ _ O
Alternatively _ _ O
: _ _ O
There _ _ O
exists _ _ O
a _ _ O
student _ _ O
that _ _ O
has _ _ O
never _ _ O
asked _ _ O
any _ _ O
professor _ _ O
a _ _ O
question _ _ O
. _ _ O

In-class _ _ O
exercises _ _ O
Problem _ _ O
3 _ _ O
: _ _ O
Translate _ _ O
the _ _ O
following _ _ O
English _ _ O
sentences _ _ O
into _ _ O
predicate _ _ O
logic _ _ O
. _ _ O
a _ _ O
) _ _ O
Every _ _ O
student _ _ O
has _ _ O
at _ _ O
least _ _ O
one _ _ O
friend _ _ O
that _ _ O
is _ _ O
dating _ _ O
a _ _ O
Steelers _ _ O
fan _ _ O
. _ _ O
b _ _ O
) _ _ O
If _ _ O
a _ _ O
person _ _ O
is _ _ O
a _ _ O
parent _ _ O
and _ _ O
a _ _ O
man _ _ O
, _ _ O
then _ _ O
they _ _ O
are _ _ O
the _ _ O
father _ _ O
of _ _ O
some _ _ O
child _ _ O
. _ _ O
Problem _ _ O
4 _ _ O
: _ _ O
Negate _ _ O
the _ _ O
results _ _ O
from _ _ O
Problem _ _ O
3 _ _ O
and _ _ O
translate _ _ O
the _ _ O
negated _ _ O
expressions _ _ O
back _ _ O
into _ _ O
English _ _ O
. _ _ O

Final _ _ O
Thoughts _ _ O
n _ _ O
Logic _ _ B-Concept
programming _ _ I-Concept
is _ _ O
an _ _ O
interesting _ _ O
application _ _ O
of _ _ O
predicate _ _ O
logic _ _ O
that _ _ O
is _ _ O
used _ _ O
throughout _ _ O
computer _ _ O
science _ _ O
n _ _ O
Quantifiers _ _ B-Concept
can _ _ O
be _ _ O
nested _ _ B-Concept
l _ _ O
Nested _ _ B-Concept
quantifiers _ _ I-Concept
are _ _ O
read _ _ O
left _ _ O
to _ _ O
right _ _ O
l _ _ O
Order _ _ O
is _ _ O
important _ _ O
! _ _ O
l _ _ O
Translation _ _ B-Concept
and _ _ O
negation _ _ B-Concept
work _ _ O
the _ _ O
same _ _ O
as _ _ O
they _ _ O
did _ _ O
before _ _ O
! _ _ O
n _ _ O
Next _ _ O
lecture _ _ O
: _ _ O
l _ _ O
Rules _ _ O
of _ _ O
inference _ _ O
l _ _ O
Please _ _ O
read _ _ O
sections _ _ O
1.6–1.7 _ _ O



