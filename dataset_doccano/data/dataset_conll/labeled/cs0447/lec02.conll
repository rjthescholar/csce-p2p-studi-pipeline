['train_set', 'labeled']|cs0447|lec02
-DOCSTART- -X- -X- O

# _ _ O
1 _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Binary _ _ B-Concept
, _ _ O
Hex _ _ B-Concept
, _ _ O
Octal _ _ B-Concept
Original _ _ O
slides _ _ O
by _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
Modified _ _ O
with _ _ O
bits _ _ O
from _ _ O
: _ _ O
Bruce _ _ O
Childers _ _ O
, _ _ O
David _ _ O
Wilkinson _ _ O
Luís _ _ O
Oliveira _ _ O
Fall _ _ O
2020 _ _ O

What _ _ O
do _ _ O
I _ _ O
need _ _ O
to _ _ O
know _ _ O
now _ _ O
! _ _ O
The _ _ O
classes _ _ O
will _ _ O
be _ _ O
recorded _ _ O
! _ _ O
● _ _ O
You _ _ O
will _ _ O
be _ _ O
able _ _ O
to _ _ O
access _ _ O
the _ _ O
videos _ _ O
online _ _ O
o _ _ O
They _ _ O
are _ _ O
for _ _ O
your _ _ O
personal _ _ O
use _ _ O
only _ _ O
! _ _ O
o _ _ O
Do _ _ O
not _ _ O
distribute _ _ O
them _ _ O
! _ _ O
● _ _ O
You _ _ O
do _ _ O
n’t _ _ O
need _ _ O
to _ _ O
turn _ _ O
on _ _ O
your _ _ O
camera _ _ O
o _ _ O
If _ _ O
you _ _ O
do _ _ O
, _ _ O
you _ _ O
may _ _ O
be _ _ O
recorded _ _ O
● _ _ O
You _ _ O
can _ _ O
ask _ _ O
questions _ _ O
via _ _ O
text _ _ O
! _ _ O
o _ _ O
Chat _ _ O
is _ _ O
great _ _ O
for _ _ O
that _ _ O
. _ _ O
If _ _ O
I _ _ O
do _ _ O
n’t _ _ O
stop _ _ O
and _ _ O
read _ _ O
your _ _ O
questions _ _ O
, _ _ O
ask _ _ O
them _ _ O
again _ _ O
o _ _ O
But _ _ O
feel _ _ O
free _ _ O
to _ _ O
interrupt _ _ O
me _ _ O
at _ _ O
any _ _ O
point _ _ O
. _ _ O
2 _ _ O

Class _ _ O
Announcements _ _ O
Recitation _ _ O
are _ _ O
happening _ _ O
! _ _ O
! _ _ O
3 _ _ O

Summary _ _ O
● _ _ O
Numbers _ _ B-Concept
and _ _ I-Concept
bases _ _ I-Concept
o _ _ O
Why _ _ O
is _ _ O
2020 _ _ O
worth _ _ O
2020 _ _ O
? _ _ O
? _ _ O
o _ _ O
Or _ _ O
is _ _ O
it _ _ O
? _ _ O
▪ _ _ O
Maybe _ _ O
it _ _ O
’s _ _ O
worth _ _ O
8224 _ _ O
? _ _ O
● _ _ O
Number _ _ O
representation _ _ O
o _ _ O
Binary _ _ B-Concept
– _ _ O
what _ _ O
do _ _ O
0s _ _ O
and _ _ O
1s _ _ O
mean _ _ O
? _ _ O
● _ _ O
Other _ _ O
representations _ _ O
o _ _ O
Hexadecimal _ _ B-Concept
and _ _ O
octal _ _ B-Concept
● _ _ O
How _ _ O
does _ _ O
a _ _ O
computer _ _ O
interpret _ _ O
them _ _ O
? _ _ O
o _ _ O
( _ _ O
bait _ _ O
) _ _ O
The _ _ O
answer _ _ O
will _ _ O
surprise _ _ O
you _ _ O
! _ _ O
! _ _ O
4 _ _ O

Numbers _ _ O
and _ _ O
bases _ _ O
5 _ _ O

Positional _ _ B-Concept
number _ _ I-Concept
systems _ _ I-Concept
● _ _ O
The _ _ O
numbers _ _ O
we _ _ O
use _ _ O
are _ _ O
written _ _ O
positionally _ _ O
: _ _ O
the _ _ O
position _ _ O
of _ _ O
a _ _ O
digit _ _ O
within _ _ O
the _ _ O
number _ _ O
has _ _ O
a _ _ O
meaning _ _ O
. _ _ O
3 _ _ O
2 _ _ O
x _ _ O
10 _ _ O
2000 _ _ O
2 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
x _ _ O
10 _ _ O
= _ _ O
2021= _ _ O
1 _ _ O
2 _ _ O
0 _ _ O
2 _ _ O
x _ _ O
10 _ _ O
0 _ _ O
+ _ _ O
1 _ _ O
1 _ _ O
x _ _ O
10 _ _ O
6 _ _ O

Positional _ _ B-Concept
number _ _ I-Concept
systems _ _ I-Concept
● _ _ O
The _ _ O
numbers _ _ O
we _ _ O
use _ _ O
are _ _ O
written _ _ O
positionally _ _ O
: _ _ O
the _ _ O
position _ _ O
of _ _ O
a _ _ O
digit _ _ O
within _ _ O
the _ _ O
number _ _ O
has _ _ O
a _ _ O
meaning _ _ O
. _ _ O
2021 _ _ O
Most _ _ O
Significant _ _ O
Least _ _ O
Significant _ _ O
1000s _ _ O
100s _ _ O
10s _ _ O
1s _ _ O
103 _ _ O
102 _ _ O
101 _ _ O
100 _ _ O
● _ _ O
How _ _ O
many _ _ O
( _ _ O
digits _ _ O
) _ _ O
symbols _ _ O
do _ _ O
we _ _ O
have _ _ O
in _ _ O
our _ _ O
number _ _ O
system _ _ O
? _ _ O
○ _ _ O
10 _ _ O
: _ _ O
0 _ _ O
, _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
4 _ _ O
, _ _ O
5 _ _ O
, _ _ O
6 _ _ O
, _ _ O
7 _ _ O
, _ _ O
8 _ _ O
, _ _ O
9 _ _ O
7 _ _ O

Range _ _ B-Concept
of _ _ I-Concept
numbers _ _ I-Concept
Suppose _ _ O
we _ _ O
have _ _ O
a _ _ O
4-digit _ _ O
numeric _ _ O
display _ _ O
. _ _ O
● _ _ O
What _ _ O
is _ _ O
the _ _ O
smallest _ _ O
number _ _ O
it _ _ O
can _ _ O
show _ _ O
? _ _ O
● _ _ O
What _ _ O
is _ _ O
the _ _ O
biggest _ _ O
number _ _ O
it _ _ O
can _ _ O
show _ _ O
? _ _ O
● _ _ O
How _ _ O
many _ _ O
different _ _ O
numbers _ _ O
can _ _ O
it _ _ O
show _ _ O
? _ _ O
o _ _ O
9999 _ _ O
- _ _ O
0 _ _ O
+ _ _ O
1 _ _ O
= _ _ O
10 _ _ O
, _ _ O
000 _ _ O
o _ _ O
What _ _ O
power _ _ O
of _ _ O
10 _ _ O
is _ _ O
10 _ _ O
, _ _ O
000 _ _ O
? _ _ O
▪ _ _ O
104 _ _ O
8 _ _ O

So _ _ O
… _ _ O
with _ _ O
the _ _ O
numbers _ _ O
we _ _ O
use _ _ O
every _ _ O
day _ _ O
… _ _ O
● _ _ O
A _ _ O
number _ _ O
represented _ _ O
by _ _ O
the _ _ O
digits _ _ O
𝑑𝑛 _ _ O
𝑑𝑛−1 _ _ O
… _ _ O
𝑑1 _ _ O
𝑑0 _ _ O
● _ _ O
Has _ _ O
the _ _ O
value _ _ O
𝑑𝑛 _ _ O
× _ _ O
10𝑛 _ _ O
+ _ _ O
𝑑𝑛−1 _ _ O
× _ _ O
10𝑛−1 _ _ O
+ _ _ O
⋯ _ _ O
+ _ _ O
𝑑1 _ _ O
× _ _ O
101 _ _ O
+ _ _ O
𝑑0 _ _ O
× _ _ O
100 _ _ O
● _ _ O
Using _ _ O
𝑛 _ _ O
digits _ _ O
we _ _ O
can _ _ O
represent _ _ O
10𝑛 _ _ O
different _ _ O
numbers _ _ O
● _ _ O
The _ _ O
smallest _ _ O
non-negative _ _ O
number _ _ O
representable _ _ O
with _ _ O
𝑛 _ _ O
digits _ _ O
is _ _ O
0 _ _ O
● _ _ O
The _ _ O
largest _ _ O
number _ _ O
representable _ _ O
with _ _ O
𝑛 _ _ O
digits _ _ O
is _ _ O
10𝑛 _ _ O
− _ _ O
1 _ _ O
● _ _ O
Using _ _ O
10 _ _ O
symbols _ _ O
: _ _ O
0 _ _ O
, _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
4 _ _ O
, _ _ O
5 _ _ O
, _ _ O
6 _ _ O
, _ _ O
7 _ _ O
, _ _ O
8 _ _ O
, _ _ O
9 _ _ O
9 _ _ O

Numeric _ _ B-Concept
Bases _ _ I-Concept
● _ _ O
These _ _ O
10s _ _ O
keep _ _ O
popping _ _ O
up _ _ O
… _ _ O
and _ _ O
for _ _ O
good _ _ O
reason _ _ O
● _ _ O
We _ _ O
use _ _ O
a _ _ O
base-10 _ _ O
( _ _ O
decimal _ _ O
) _ _ O
numbering _ _ O
system _ _ O
o _ _ O
10 _ _ O
different _ _ O
symbols _ _ O
, _ _ O
and _ _ O
each _ _ O
place _ _ O
is _ _ O
a _ _ O
power _ _ O
of _ _ O
10 _ _ O
● _ _ O
But _ _ O
we _ _ O
can _ _ O
use _ _ O
( _ _ O
almost _ _ O
) _ _ O
any _ _ O
number _ _ O
as _ _ O
a _ _ O
base _ _ O
! _ _ O
● _ _ O
The _ _ O
most _ _ O
common _ _ O
bases _ _ O
when _ _ O
dealing _ _ O
with _ _ O
computers _ _ O
are _ _ O
base-2 _ _ O
( _ _ O
binary _ _ B-Concept
) _ _ O
, _ _ O
base-16 _ _ O
( _ _ O
hexadecimal _ _ B-Concept
) _ _ O
, _ _ O
and _ _ O
( _ _ O
rarely _ _ O
) _ _ O
base-8 _ _ O
( _ _ O
octal _ _ B-Concept
) _ _ O
● _ _ O
When _ _ O
dealing _ _ O
with _ _ O
multiple _ _ O
bases _ _ O
, _ _ O
you _ _ O
can _ _ O
write _ _ O
the _ _ O
base _ _ O
as _ _ O
a _ _ O
subscript _ _ O
to _ _ O
be _ _ O
explicit _ _ O
about _ _ O
it _ _ O
: _ _ O
510 _ _ O
= _ _ O
1012 _ _ O
10 _ _ O

Making _ _ O
a _ _ O
number _ _ O
system _ _ O
Using _ _ O
base _ _ O
B _ _ O
● _ _ O
A _ _ O
number _ _ O
represented _ _ O
by _ _ O
the _ _ O
digits _ _ O
𝑑𝑛 _ _ O
𝑑𝑛−1 _ _ O
… _ _ O
𝑑1 _ _ O
𝑑0 _ _ O
● _ _ O
Has _ _ O
the _ _ O
value _ _ O
𝑑𝑛 _ _ O
× _ _ O
B𝑛 _ _ O
+ _ _ O
𝑑𝑛−1 _ _ O
× _ _ O
B𝑛−1 _ _ O
+ _ _ O
⋯ _ _ O
+ _ _ O
𝑑1 _ _ O
× _ _ O
B1 _ _ O
+ _ _ O
𝑑0 _ _ O
× _ _ O
B0 _ _ O
● _ _ O
Using _ _ O
𝑛 _ _ O
digits _ _ O
we _ _ O
can _ _ O
represent _ _ O
B𝑛 _ _ O
different _ _ O
numbers _ _ O
● _ _ O
The _ _ O
smallest _ _ O
non-negative _ _ O
number _ _ O
representable _ _ O
with _ _ O
𝑛 _ _ O
digits _ _ O
is _ _ O
0 _ _ O
● _ _ O
The _ _ O
largest _ _ O
number _ _ O
representable _ _ O
with _ _ O
𝑛 _ _ O
digits _ _ O
is _ _ O
B𝑛 _ _ O
− _ _ O
1 _ _ O
● _ _ O
Using _ _ O
B _ _ O
symbols _ _ O
If _ _ O
you _ _ O
use _ _ O
base _ _ O
0 _ _ O
you _ _ O
do _ _ O
n’t _ _ O
need _ _ O
to _ _ O
remember _ _ O
any _ _ O
symbols _ _ O
11 _ _ O

Binary _ _ O
– _ _ O
Base _ _ O
2 _ _ O
12 _ _ O

How _ _ O
many _ _ O
symbols _ _ O
in _ _ O
binary _ _ O
? _ _ O
? _ _ O
? _ _ O
? _ _ O
13 _ _ O

Let _ _ O
's _ _ O
make _ _ O
a _ _ O
base-2 _ _ O
number _ _ O
system _ _ O
Using _ _ O
base _ _ O
2 _ _ O
● _ _ O
A _ _ O
number _ _ O
represented _ _ O
by _ _ O
the _ _ O
digits _ _ O
𝑑𝑛 _ _ O
𝑑𝑛−1 _ _ O
… _ _ O
𝑑1 _ _ O
𝑑0 _ _ O
● _ _ O
Has _ _ O
the _ _ O
value _ _ O
𝑑𝑛 _ _ O
× _ _ O
2𝑛 _ _ O
+ _ _ O
𝑑𝑛−1 _ _ O
× _ _ O
2𝑛−1 _ _ O
+ _ _ O
⋯ _ _ O
+ _ _ O
𝑑1 _ _ O
× _ _ O
21 _ _ O
+ _ _ O
𝑑0 _ _ O
× _ _ O
20 _ _ O
● _ _ O
Using _ _ O
𝑛 _ _ O
digits _ _ O
we _ _ O
can _ _ O
represent _ _ O
2𝑛 _ _ O
different _ _ O
numbers _ _ O
● _ _ O
The _ _ O
smallest _ _ O
non-negative _ _ O
number _ _ O
representable _ _ O
with _ _ O
𝑛 _ _ O
digits _ _ O
is _ _ O
0 _ _ O
● _ _ O
The _ _ O
largest _ _ O
number _ _ O
representable _ _ O
with _ _ O
𝑛 _ _ O
digits _ _ O
is _ _ O
2𝑛 _ _ O
− _ _ O
1 _ _ O
● _ _ O
Using _ _ O
2 _ _ O
symbols _ _ O
: _ _ O
0 _ _ O
, _ _ O
1 _ _ O
14 _ _ O

Binary _ _ O
( _ _ O
base-2 _ _ O
) _ _ O
• _ _ O
We _ _ O
call _ _ O
a _ _ O
Binary _ _ O
digIT _ _ O
a _ _ O
bit _ _ O
– _ _ O
a _ _ O
single _ _ O
1 _ _ O
or _ _ O
0 _ _ O
• _ _ O
When _ _ O
we _ _ O
say _ _ O
an _ _ O
n-bit _ _ O
number _ _ O
, _ _ O
we _ _ O
mean _ _ O
one _ _ O
with _ _ O
n _ _ O
binary _ _ O
digits _ _ O
1001 _ _ O
0110 _ _ O
= _ _ O
MSB _ _ O
27 _ _ O
26 _ _ O
25 _ _ O
24 _ _ O
128s _ _ O
64s _ _ O
32s _ _ O
16s _ _ O
LSB _ _ O
23 _ _ O
8s _ _ O
22 _ _ O
4s _ _ O
21 _ _ O
20 _ _ O
2s _ _ O
1s _ _ O
To _ _ O
convert _ _ O
binary _ _ O
to _ _ O
decimal _ _ O
: _ _ O
ignore _ _ O
0s _ _ O
, _ _ O
It _ _ O
’s _ _ O
the _ _ O
only _ _ O
add _ _ O
up _ _ O
place _ _ O
values _ _ O
wherever _ _ O
you _ _ O
see _ _ O
a _ _ O
1 _ _ O
. _ _ O
odd _ _ O
number _ _ O
! _ _ O
1 _ _ O
× _ _ O
128 _ _ O
+ _ _ O
0 _ _ O
× _ _ O
64 _ _ O
+ _ _ O
0 _ _ O
× _ _ O
32 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
16 _ _ O
+ _ _ O
0×8 _ _ O
+ _ _ O
1×4 _ _ O
+ _ _ O
1×2 _ _ O
+ _ _ O
0×1 _ _ O
= _ _ O
15010 _ _ O
15 _ _ O

Making _ _ O
change _ _ O
● _ _ O
You _ _ O
want _ _ O
to _ _ O
give _ _ O
someone _ _ O
$ _ _ O
9.63 _ _ O
in _ _ O
change _ _ O
, _ _ O
using _ _ O
the _ _ O
fewest _ _ O
bills _ _ O
and _ _ O
coins _ _ O
possible _ _ O
. _ _ O
How _ _ O
do _ _ O
you _ _ O
count _ _ O
it _ _ O
out _ _ O
? _ _ O
$ _ _ O
5×1 _ _ O
$ _ _ O
1× _ _ O
4 _ _ O
25¢× _ _ O
2 _ _ O
10¢× _ _ O
1 _ _ O
5¢× _ _ O
0 _ _ O
1¢× _ _ O
_ _ _ O
_ _ _ O
3 _ _ O
Left _ _ O
: _ _ O
$ _ _ O
9.63 _ _ O
-$5= _ _ O
$ _ _ O
4.63 _ _ O
-$4= _ _ O
$ _ _ O
0.63 _ _ O
-50¢= _ _ O
$ _ _ O
0.13 _ _ O
- _ _ O
10¢=$0.03 _ _ O
-0¢=$0.03 _ _ O
-3¢=$0.00 _ _ O
• _ _ O
Biggest _ _ O
to _ _ O
smallest _ _ O
• _ _ O
Most _ _ O
significant _ _ O
to _ _ O
least _ _ O
significant _ _ O
• _ _ O
WHERE _ _ O
COULD _ _ O
THIS _ _ O
BE _ _ O
GOING _ _ O
... _ _ O
16 _ _ O

Converting _ _ O
decimal _ _ O
to _ _ O
binary _ _ O
• _ _ O
You _ _ O
want _ _ O
to _ _ O
convert _ _ O
the _ _ O
number _ _ O
8310 _ _ O
to _ _ O
binary _ _ O
. _ _ O
128s _ _ O
64s _ _ O
32s _ _ O
16s _ _ O
8s _ _ O
4s _ _ O
2s _ _ O
1s _ _ O
Left _ _ O
: _ _ O
83- _ _ O
0 _ _ O
= _ _ O
83- _ _ O
64 _ _ O
= _ _ O
19 _ _ O
- _ _ O
0 _ _ O
= _ _ O
19- _ _ O
16 _ _ O
= _ _ O
3 _ _ O
- _ _ O
0 _ _ O
= _ _ O
3 _ _ O
- _ _ O
0 _ _ O
= _ _ O
3 _ _ O
- _ _ O
2 _ _ O
= _ _ O
1 _ _ O
- _ _ O
1 _ _ O
= _ _ O
0 _ _ O
01010011 _ _ O
• _ _ O
For _ _ O
each _ _ O
place _ _ O
from _ _ O
MSB _ _ O
: _ _ O
• _ _ O
If _ _ O
place _ _ O
value _ _ O
< _ _ O
remainder _ _ O
: _ _ O
o _ _ O
digit _ _ O
= _ _ O
1 _ _ O
o _ _ O
remainder _ _ O
= _ _ O
remainder _ _ O
- _ _ O
place _ _ O
• _ _ O
Else _ _ O
, _ _ O
digit _ _ O
= _ _ O
0 _ _ O
. _ _ O
17 _ _ O

Bits _ _ O
, _ _ O
bytes _ _ O
, _ _ O
nibbles _ _ O
, _ _ O
and _ _ O
words _ _ O
● _ _ O
A _ _ O
bit _ _ B-Concept
is _ _ O
one _ _ O
binary _ _ O
digit _ _ O
, _ _ O
and _ _ O
its _ _ O
unit _ _ O
is _ _ O
lowercase _ _ O
b. _ _ O
● _ _ O
A _ _ O
byte _ _ B-Concept
is _ _ O
an _ _ O
8-bit _ _ O
value _ _ O
, _ _ O
and _ _ O
its _ _ O
unit _ _ O
is _ _ O
UPPERCASE _ _ O
B. _ _ O
o _ _ O
This _ _ O
is _ _ O
( _ _ O
partially _ _ O
) _ _ O
why _ _ O
your _ _ O
30 _ _ O
megabit _ _ O
( _ _ O
Mbps _ _ O
) _ _ O
internet _ _ O
connection _ _ O
can _ _ O
only _ _ O
give _ _ O
you _ _ O
at _ _ O
most _ _ O
3.57 _ _ O
megabytes _ _ O
( _ _ O
MB _ _ O
) _ _ O
per _ _ O
second _ _ O
! _ _ O
● _ _ O
A _ _ O
nibble _ _ B-Concept
( _ _ O
also _ _ O
nybble _ _ O
) _ _ O
is _ _ O
4 _ _ O
bits _ _ O
– _ _ O
half _ _ O
of _ _ O
a _ _ O
byte _ _ O
o _ _ O
Corresponds _ _ O
nicely _ _ O
to _ _ O
a _ _ O
single _ _ O
hex _ _ B-Concept
digit _ _ O
. _ _ O
● _ _ O
A _ _ O
word _ _ B-Concept
is _ _ O
the _ _ O
" _ _ O
most _ _ O
comfortable _ _ O
size _ _ O
" _ _ O
of _ _ O
number _ _ O
for _ _ O
a _ _ O
CPU _ _ O
. _ _ O
● _ _ O
When _ _ O
we _ _ O
say _ _ O
" _ _ O
32-bit _ _ O
CPU _ _ O
, _ _ O
" _ _ O
we _ _ O
mean _ _ O
its _ _ O
word _ _ O
size _ _ O
is _ _ O
32 _ _ O
bits _ _ O
. _ _ O
o _ _ O
This _ _ O
means _ _ O
it _ _ O
can _ _ O
, _ _ O
for _ _ O
example _ _ O
, _ _ O
add _ _ O
two _ _ O
32-bit _ _ O
numbers _ _ O
at _ _ O
once _ _ O
. _ _ O
● _ _ O
BUT _ _ O
WATCH _ _ O
OUT _ _ O
: _ _ O
o _ _ O
Some _ _ O
things _ _ O
( _ _ O
Windows _ _ O
, _ _ O
x86 _ _ O
) _ _ O
use _ _ O
word _ _ O
to _ _ O
mean _ _ O
16 _ _ O
bits _ _ O
and _ _ O
double _ _ O
word _ _ O
( _ _ O
or _ _ O
dword _ _ O
) _ _ O
to _ _ O
mean _ _ O
32 _ _ O
bits _ _ O
. _ _ O
18 _ _ O

Kilo _ _ B-Concept
, _ _ O
mega _ _ B-Concept
, _ _ O
tera _ _ B-Concept
Potatoes _ _ O
Bytes _ _ O
Bytes _ _ O
1 _ _ O
g _ _ O
( _ _ O
gram _ _ O
) _ _ O
1B _ _ O
( _ _ O
Byte _ _ O
) _ _ O
1B _ _ O
( _ _ O
Byte _ _ O
) _ _ O
1 _ _ O
kg _ _ O
( _ _ O
Kilogram _ _ O
) _ _ O
= _ _ O
1000 _ _ O
g _ _ O
1kB _ _ O
( _ _ O
Kilobyte _ _ O
) _ _ O
= _ _ O
1000B _ _ O
1kiB _ _ O
( _ _ O
Kibibyte _ _ O
) _ _ O
= _ _ O
1024B _ _ O
( _ _ O
power _ _ O
of _ _ O
2 _ _ O
nearest _ _ O
to _ _ O
1000 _ _ O
) _ _ O
1Mg _ _ O
( _ _ O
Megagram _ _ O
) _ _ O
= _ _ O
1000Kg _ _ O
1 _ _ O
MB _ _ O
( _ _ O
Megabyte _ _ O
) _ _ O
= _ _ O
1000kB _ _ O
1MiB _ _ O
( _ _ O
Mebibyte _ _ O
) _ _ O
= _ _ O
1024kiB _ _ O
1Gg _ _ O
( _ _ O
Gigagram _ _ O
) _ _ O
= _ _ O
1000Mg _ _ O
1 _ _ O
GB _ _ O
( _ _ O
Gigabyte _ _ O
) _ _ O
= _ _ O
1000 _ _ O
MB _ _ O
1GiB _ _ O
( _ _ O
Gibibyte _ _ O
) _ _ O
= _ _ O
1024MiB _ _ O
1Tg _ _ O
( _ _ O
Teragram _ _ O
) _ _ O
= _ _ O
1000Gg _ _ O
1 _ _ O
TB _ _ O
( _ _ O
Terabyte _ _ O
) _ _ O
= _ _ O
1000 _ _ O
GB _ _ O
1TiB _ _ O
( _ _ O
Tebibyte _ _ O
) _ _ O
= _ _ O
1024GiB _ _ O
1Eg _ _ O
( _ _ O
Exagram _ _ O
) _ _ O
= _ _ O
1000Tg _ _ O
1EB _ _ O
( _ _ O
Exabyte _ _ O
) _ _ O
= _ _ O
1000 _ _ O
TB _ _ O
1EiB _ _ O
( _ _ O
Exbibyte _ _ O
) _ _ O
= _ _ O
1024TiB _ _ O
Used _ _ O
for _ _ O
hard _ _ O
drive _ _ O
capacity _ _ O
and _ _ O
network _ _ O
speeds _ _ O
Used _ _ O
for _ _ O
most _ _ O
other _ _ O
things _ _ O
! _ _ O
Because _ _ O
binary _ _ O
! _ _ O
A _ _ O
1 _ _ O
TB _ _ O
drive _ _ O
only _ _ O
has _ _ O
931GiB _ _ O
! _ _ O
19 _ _ O

The _ _ O
real _ _ O
world _ _ O
IS _ _ O
CONFUSING _ _ O
! _ _ O
! _ _ O
! _ _ O
! _ _ O
931 _ _ O
GB _ _ O
931GiB _ _ O
Sometimes _ _ O
this _ _ O
is _ _ O
used _ _ O
to _ _ O
mean _ _ O
931GiB _ _ O
 _ _ O
This _ _ O
always _ _ O
means _ _ O
931GiB _ _ O
! _ _ O
☺ _ _ O
20 _ _ O

Why _ _ O
binary _ _ O
? _ _ O
Whynary _ _ O
? _ _ O
• _ _ O
Why _ _ O
indeed _ _ O
? _ _ O
o _ _ O
log _ _ O
2 _ _ O
10 _ _ O
= _ _ O
3.322 _ _ O
o _ _ O
The _ _ O
number _ _ O
of _ _ O
bits _ _ O
required _ _ O
to _ _ O
represent _ _ O
10 _ _ O
digits _ _ O
o _ _ O
The _ _ O
increase _ _ O
on _ _ O
number _ _ O
of _ _ O
components _ _ O
in _ _ O
a _ _ O
computer _ _ O
! _ _ O
• _ _ O
Because _ _ O
it _ _ O
’s _ _ O
soooooo _ _ O
much _ _ O
easier _ _ O
to _ _ O
implement _ _ O
the _ _ O
hardware _ _ O
! _ _ O
o _ _ O
And _ _ O
robust _ _ O
! _ _ O
• _ _ O
Arithmetic _ _ O
becomes _ _ O
really _ _ O
easy _ _ O
( _ _ O
as _ _ O
we _ _ O
'll _ _ O
see _ _ O
in _ _ O
several _ _ O
weeks _ _ O
) _ _ O
21 _ _ O

Why _ _ O
binary _ _ B-Concept
? _ _ O
Whynary _ _ O
? _ _ O
● _ _ O
Why _ _ O
indeed _ _ O
? _ _ O
0 _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
7 _ _ O
8 _ _ O
9 _ _ O
● _ _ O
What _ _ O
color _ _ O
is _ _ O
this _ _ O
? _ _ O
22 _ _ O

Why _ _ O
binary _ _ B-Concept
? _ _ O
Whynary _ _ O
? _ _ O
● _ _ O
Why _ _ O
indeed _ _ O
? _ _ O
0 _ _ O
1 _ _ O
● _ _ O
What _ _ O
color _ _ O
is _ _ O
this _ _ O
? _ _ O
23 _ _ O

Why _ _ O
binary _ _ B-Concept
? _ _ O
Whynary _ _ O
? _ _ O
• _ _ O
Why _ _ O
indeed _ _ O
? _ _ O
o _ _ O
log _ _ O
2 _ _ O
10 _ _ O
= _ _ O
3.322 _ _ O
o _ _ O
The _ _ O
number _ _ O
of _ _ O
bits _ _ O
required _ _ O
to _ _ O
represent _ _ O
10 _ _ O
digits _ _ O
o _ _ O
The _ _ O
increase _ _ O
on _ _ O
number _ _ O
of _ _ O
components _ _ O
in _ _ O
a _ _ O
computer _ _ O
! _ _ O
• _ _ O
Because _ _ O
it _ _ O
’s _ _ O
soooooo _ _ O
much _ _ O
easier _ _ O
to _ _ O
implement _ _ O
the _ _ O
hardware _ _ O
! _ _ O
o _ _ O
And _ _ O
robust _ _ O
! _ _ O
• _ _ O
Arithmetic _ _ O
becomes _ _ O
really _ _ O
easy _ _ O
( _ _ O
as _ _ O
we _ _ O
'll _ _ O
see _ _ O
in _ _ O
several _ _ O
weeks _ _ O
) _ _ O
24 _ _ O

Everything _ _ O
in _ _ O
a _ _ O
computer _ _ O
is _ _ O
a _ _ O
number _ _ O
● _ _ O
So _ _ O
, _ _ O
everything _ _ O
on _ _ O
a _ _ O
computer _ _ O
is _ _ O
represented _ _ O
in _ _ O
binary _ _ O
. _ _ O
o _ _ O
everything _ _ O
. _ _ O
01100101 _ _ O
01110110 _ _ O
01100101 _ _ O
01110010 _ _ O
01111001 _ _ O
01110100 _ _ O
01101000 _ _ O
01101001 _ _ O
01101110 _ _ O
01100111 _ _ O
00001010 _ _ O
00000000 _ _ O
● _ _ O
Java _ _ O
strings _ _ O
are _ _ O
encoded _ _ O
using _ _ O
UTF-16 _ _ O
o _ _ O
Most _ _ O
letters _ _ O
and _ _ O
numbers _ _ O
in _ _ O
the _ _ O
English _ _ O
alphabet _ _ O
are _ _ O
< _ _ O
128 _ _ O
. _ _ O
o _ _ O
“ _ _ O
Strings _ _ O
are _ _ O
numbers _ _ O
” _ _ O
▪ _ _ O
83 _ _ O
116 _ _ O
114 _ _ O
105 _ _ O
110 _ _ O
103 _ _ O
115 _ _ O
32 _ _ O
97 _ _ O
114 _ _ O
101 _ _ O
32 _ _ O
110 _ _ O
117 _ _ O
109 _ _ O
98 _ _ O
101 _ _ O
114 _ _ O
115 _ _ O
0 _ _ O
● _ _ O
ASCII _ _ O
is _ _ O
also _ _ O
pretty _ _ O
common _ _ O
( _ _ O
the _ _ O
best _ _ O
kind _ _ O
of _ _ O
common _ _ O
) _ _ O
o _ _ O
That _ _ O
’s _ _ O
what _ _ O
we _ _ O
will _ _ O
be _ _ O
using _ _ O
→ _ _ O
8 _ _ O
bit _ _ O
numbers _ _ O
represent _ _ O
characters _ _ O
o _ _ O
Letters _ _ O
and _ _ O
numbers _ _ O
( _ _ O
and _ _ O
most _ _ O
/ _ _ O
all _ _ O
ascii _ _ O
characters _ _ O
) _ _ O
have _ _ O
the _ _ O
same _ _ O
value _ _ O
as _ _ O
UTF-16 _ _ O
CS _ _ O
0007 _ _ O
– _ _ O
Summer _ _ O
2020 _ _ O
Do _ _ O
try _ _ O
this _ _ O
at _ _ O
home _ _ O
: _ _ O
what _ _ O
does _ _ O
this _ _ O
mean _ _ O
? _ _ O
• _ _ O
71 _ _ O
111 _ _ O
111 _ _ O
100 _ _ O
32 _ _ O
74 _ _ O
111 _ _ O
98 _ _ O
0 _ _ O
25 _ _ O

EVERYTHING _ _ O
• _ _ O
Images _ _ O
and _ _ O
colors _ _ O
? _ _ O
Numbers _ _ O
! _ _ O
• _ _ O
Videos _ _ O
? _ _ O
Numbers _ _ O
! _ _ O
CS _ _ O
0007 _ _ O
– _ _ O
Summer _ _ O
2020 _ _ O
122 _ _ O
185 _ _ O
32 _ _ O
239 _ _ O
97 _ _ O
181 _ _ O
181 _ _ O
40 _ _ O
41 _ _ O
26 _ _ O

One _ _ O
number _ _ O
, _ _ O
many _ _ O
possible _ _ O
meanings _ _ O
● _ _ O
All _ _ O
information _ _ O
on _ _ O
computers _ _ O
is _ _ O
stored _ _ O
as _ _ O
patterns _ _ O
of _ _ O
bits _ _ O
, _ _ O
but _ _ O
… _ _ O
● _ _ O
How _ _ O
these _ _ O
bits _ _ O
are _ _ O
interpreted _ _ O
, _ _ O
transformed _ _ O
, _ _ O
and _ _ O
displayed _ _ O
is _ _ O
up _ _ O
to _ _ O
the _ _ O
programmer _ _ O
and _ _ O
the _ _ O
user _ _ O
. _ _ O
-59 _ _ O
Signed _ _ O
integer _ _ O
R3G3B2 _ _ O
color _ _ O
11000100 _ _ O
Unsigned _ _ O
integer _ _ O
196 _ _ O
z80 _ _ O
instruction _ _ O
Hexadecimal _ _ O
0xC4 _ _ O
Unicode _ _ O
Ä _ _ O
call _ _ O
nz _ _ O
27 _ _ O

What _ _ O
it _ _ O
means _ _ O
to _ _ O
be _ _ O
" _ _ O
arbitrary _ _ O
" _ _ O
• _ _ O
It _ _ O
means _ _ O
there _ _ O
's _ _ O
no _ _ O
reason _ _ O
for _ _ O
it _ _ O
to _ _ O
be _ _ O
that _ _ O
way _ _ O
. _ _ O
• _ _ O
we _ _ O
just _ _ O
know _ _ O
/ _ _ O
agree _ _ O
that _ _ O
it _ _ O
's _ _ O
how _ _ O
things _ _ O
are _ _ O
. _ _ O
• _ _ O
One _ _ O
of _ _ O
the _ _ O
biggest _ _ O
things _ _ O
I _ _ O
want _ _ O
you _ _ O
to _ _ O
know _ _ O
is _ _ O
: _ _ O
What _ _ O
a _ _ O
pattern _ _ O
of _ _ O
bits _ _ O
means _ _ O
is _ _ O
arbitrary _ _ O
. _ _ O
• _ _ O
As _ _ O
a _ _ O
corollary _ _ O
: _ _ O
The _ _ O
same _ _ O
pattern _ _ O
of _ _ O
bits _ _ O
can _ _ O
be _ _ O
interpreted _ _ O
many _ _ O
different _ _ O
ways _ _ O
. _ _ O
28 _ _ O

The _ _ O
calculat--hum--computer _ _ O
does _ _ O
n't _ _ O
know _ _ O
or _ _ O
care _ _ O
. _ _ O
● _ _ O
when _ _ O
writing _ _ O
assembly _ _ O
( _ _ O
and _ _ O
C _ _ O
! _ _ O
) _ _ O
programs _ _ O
, _ _ O
the _ _ O
computer _ _ O
has _ _ O
no _ _ O
idea _ _ O
what _ _ O
you _ _ O
mean _ _ O
, _ _ O
cause _ _ O
nothing _ _ O
means _ _ O
anything _ _ O
to _ _ O
it _ _ O
● _ _ O
" _ _ O
my _ _ O
program _ _ O
assembles _ _ O
/ _ _ O
compiles _ _ O
, _ _ O
why _ _ O
is _ _ O
it _ _ O
crashing _ _ O
? _ _ O
" _ _ O
o _ _ O
cause _ _ O
the _ _ O
computer _ _ O
is _ _ O
stupid _ _ O
▪ _ _ O
it _ _ O
's _ _ O
a _ _ O
big _ _ O
fast _ _ O
calculator _ _ O
● _ _ O
there _ _ O
's _ _ O
no _ _ O
difference _ _ O
between _ _ O
nonsense _ _ O
code _ _ O
and _ _ O
useful _ _ O
code _ _ O
● _ _ O
it _ _ O
's _ _ O
good _ _ O
at _ _ O
doing _ _ O
fun _ _ O
things _ _ O
with _ _ O
bit _ _ O
patterns _ _ O
● _ _ O
but _ _ O
do _ _ O
n't _ _ O
confuse _ _ O
what _ _ O
it _ _ O
does _ _ O
with _ _ O
intelligence _ _ O
● _ _ O
every _ _ O
" _ _ O
smart _ _ O
" _ _ O
thing _ _ O
a _ _ O
computer _ _ O
does _ _ O
, _ _ O
it _ _ O
does _ _ O
because _ _ O
a _ _ O
human _ _ O
programmed _ _ O
it _ _ O
to _ _ O
act _ _ O
like _ _ O
that _ _ O
29 _ _ O

Hexadecimal _ _ O
– _ _ O
Base _ _ O
16 _ _ O
30 _ _ O

How _ _ O
many _ _ O
symbols _ _ O
in _ _ O
hexadecimal _ _ O
? _ _ O
? _ _ O
? _ _ O
? _ _ O
31 _ _ O

Shortcomings _ _ O
of _ _ O
binary _ _ O
and _ _ O
decimal _ _ O
● _ _ O
Binary _ _ O
numbers _ _ O
can _ _ O
get _ _ O
really _ _ O
long _ _ O
, _ _ O
really _ _ O
quickly _ _ O
. _ _ O
o _ _ O
3 _ _ O
, _ _ O
927 _ _ O
, _ _ O
66410 _ _ O
= _ _ O
11 _ _ O
1011 _ _ O
1110 _ _ O
1110 _ _ O
0111 _ _ O
00002 _ _ O
● _ _ O
But _ _ O
nice _ _ O
" _ _ O
round _ _ O
" _ _ O
numbers _ _ O
in _ _ O
binary _ _ O
look _ _ O
arbitrary _ _ O
in _ _ O
decimal _ _ O
. _ _ O
o _ _ O
10000000000000002 _ _ O
= _ _ O
32 _ _ O
, _ _ O
76810 _ _ O
● _ _ O
This _ _ O
is _ _ O
because _ _ O
10 _ _ O
is _ _ O
not _ _ O
a _ _ O
power _ _ O
of _ _ O
2 _ _ O
! _ _ O
● _ _ O
We _ _ O
could _ _ O
use _ _ O
base-4 _ _ O
, _ _ O
base-8 _ _ O
, _ _ O
base-16 _ _ O
, _ _ O
base-32 _ _ O
, _ _ O
etc _ _ O
. _ _ O
o _ _ O
Base-4 _ _ O
is _ _ O
not _ _ O
much _ _ O
concise _ _ O
than _ _ O
binary _ _ O
▪ _ _ O
e.g. _ _ O
3 _ _ O
, _ _ O
927 _ _ O
, _ _ O
66410 _ _ O
= _ _ O
120 _ _ O
3331 _ _ O
2323 _ _ O
00004 _ _ O
o _ _ O
Base-32 _ _ O
and _ _ O
up _ _ O
? _ _ O
would _ _ O
require _ _ O
32 _ _ O
+ _ _ O
symbols _ _ O
. _ _ O
Nope _ _ O
. _ _ O
▪ _ _ O
Well _ _ O
at _ _ O
least _ _ O
for _ _ O
humans _ _ O
… _ _ O
They _ _ O
are _ _ O
actually _ _ O
used _ _ O
! _ _ O
o _ _ O
Base-8 _ _ O
and _ _ O
base-16 _ _ O
look _ _ O
promising _ _ O
! _ _ O
32 _ _ O

Let _ _ O
's _ _ O
make _ _ O
a _ _ O
base-2 _ _ O
16 _ _ O
number _ _ O
system _ _ O
Using _ _ O
base _ _ O
16 _ _ O
● _ _ O
A _ _ O
number _ _ O
represented _ _ O
by _ _ O
the _ _ O
digits _ _ O
𝑑𝑛 _ _ O
𝑑𝑛−1 _ _ O
… _ _ O
𝑑1 _ _ O
𝑑0 _ _ O
● _ _ O
Has _ _ O
the _ _ O
value _ _ O
𝑑𝑛 _ _ O
× _ _ O
16 _ _ O
𝑛 _ _ O
+ _ _ O
𝑑𝑛−1 _ _ O
× _ _ O
16 _ _ O
𝑛−1 _ _ O
+ _ _ O
⋯ _ _ O
+ _ _ O
𝑑1 _ _ O
× _ _ O
161 _ _ O
+ _ _ O
𝑑0 _ _ O
× _ _ O
16 _ _ O
0 _ _ O
● _ _ O
Using _ _ O
𝑛 _ _ O
digits _ _ O
we _ _ O
can _ _ O
represent _ _ O
𝟏𝟔𝑛 _ _ O
different _ _ O
numbers _ _ O
● _ _ O
The _ _ O
smallest _ _ O
non-negative _ _ O
number _ _ O
representable _ _ O
with _ _ O
𝑛 _ _ O
digits _ _ O
is _ _ O
0 _ _ O
● _ _ O
The _ _ O
largest _ _ O
number _ _ O
representable _ _ O
with _ _ O
𝑛 _ _ O
digits _ _ O
is _ _ O
16 _ _ O
𝑛 _ _ O
− _ _ O
1 _ _ O
● _ _ O
Using _ _ O
16 _ _ O
symbols _ _ O
: _ _ O
0 _ _ O
, _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
4 _ _ O
, _ _ O
5 _ _ O
, _ _ O
6 _ _ O
, _ _ O
7 _ _ O
, _ _ O
8 _ _ O
, _ _ O
9 _ _ O
, _ _ O
A _ _ O
, _ _ O
B _ _ O
, _ _ O
C _ _ O
, _ _ O
D _ _ O
, _ _ O
E _ _ O
, _ _ O
F _ _ O
33 _ _ O

Hexadecimal _ _ B-Concept
, _ _ O
or _ _ O
" _ _ O
hex _ _ B-Concept
" _ _ O
( _ _ O
base-16 _ _ O
) _ _ O
● _ _ O
Digit _ _ O
symbols _ _ O
after _ _ O
9 _ _ O
are _ _ O
A-F _ _ O
, _ _ O
meaning _ _ O
10 _ _ O
- _ _ O
15 _ _ O
respectively _ _ O
. _ _ O
● _ _ O
Usually _ _ O
we _ _ O
call _ _ O
one _ _ O
hexadecimal _ _ O
digit _ _ O
a _ _ O
hex _ _ O
digit _ _ O
. _ _ O
No _ _ O
fancy _ _ O
name _ _ O
:( _ _ O
003B _ _ O
EE70 _ _ O
= _ _ O
167 _ _ O
166 _ _ O
165 _ _ O
164 _ _ O
163 _ _ O
162 _ _ O
161 _ _ O
160 _ _ O
To _ _ O
convert _ _ O
decimal _ _ O
to _ _ O
hex _ _ O
: _ _ O
use _ _ O
a _ _ O
calculator _ _ O
! _ _ O
0 _ _ O
× _ _ O
167 _ _ O
+ _ _ O
0 _ _ O
× _ _ O
166 _ _ O
+ _ _ O
3 _ _ O
× _ _ O
165 _ _ O
+ _ _ O
11 _ _ O
× _ _ O
164 _ _ O
+ _ _ O
14 _ _ O
× _ _ O
163 _ _ O
+ _ _ O
14 _ _ O
× _ _ O
162 _ _ O
+ _ _ O
7 _ _ O
× _ _ O
161 _ _ O
+ _ _ O
0 _ _ O
× _ _ O
160 _ _ O
= _ _ O
3 _ _ O
, _ _ O
927 _ _ O
, _ _ O
66410 _ _ O
34 _ _ O

BUT _ _ O
WE _ _ O
REALLY _ _ O
WANT _ _ O
TO _ _ O
KNOW _ _ O
! _ _ O
! _ _ O
• _ _ O
Ok _ _ O
! _ _ O
then _ _ O
. _ _ O
Let _ _ O
’s _ _ O
go _ _ O
back _ _ O
to _ _ O
decimal _ _ O
for _ _ O
a _ _ O
bit _ _ O
2021 _ _ O
2 _ _ O
Just _ _ O
divide _ _ O
by _ _ O
10 _ _ O
! _ _ O
How _ _ O
would _ _ O
you _ _ O
extract _ _ O
this _ _ O
number _ _ O
? _ _ O
? _ _ O
? _ _ O
R0 _ _ O
10 _ _ O
2 _ _ O
0 _ _ O
R _ _ O
2 _ _ O
10 _ _ O
2 _ _ O
0 _ _ O
2 _ _ O
R _ _ O
1 _ _ O
10 _ _ O
2 _ _ O
0 _ _ O
21 _ _ O
35 _ _ O

BUT _ _ O
WE _ _ O
REALLY _ _ O
WANT _ _ O
TO _ _ O
KNOW _ _ O
! _ _ O
! _ _ O
• _ _ O
Turns _ _ O
out _ _ O
that _ _ O
dividing _ _ O
by _ _ O
10 _ _ O
in _ _ O
any _ _ O
base _ _ O
has _ _ O
the _ _ O
same _ _ O
outcome _ _ O
0x10 _ _ O
1610 _ _ O
003B _ _ O
EE7016 _ _ O
3 _ _ O
1610 _ _ O
59 _ _ O
R _ _ O
11 _ _ O
R _ _ O
14 _ _ O
R _ _ O
14 _ _ O
1610 _ _ O
958 _ _ O
1610 _ _ O
15 _ _ O
342 _ _ O
R _ _ O
7 _ _ O
1610 _ _ O
245 _ _ O
479 _ _ O
R _ _ O
0 _ _ O
1610 _ _ O
3 _ _ O
927 _ _ O
664 _ _ O
36 _ _ O

BUT _ _ O
WE _ _ O
REALLY _ _ O
WANT _ _ O
TO _ _ O
KNOW _ _ O
! _ _ O
! _ _ O
• _ _ O
Turns _ _ O
out _ _ O
that _ _ O
dividing _ _ O
by _ _ O
10 _ _ O
in _ _ O
any _ _ O
base _ _ O
has _ _ O
the _ _ O
same _ _ O
outcome _ _ O
0b10 _ _ O
210 _ _ O
110012 _ _ O
210 _ _ O
210 _ _ O
1 _ _ O
R1 _ _ O
3 _ _ O
R0 _ _ O
6 _ _ O
R0 _ _ O
R1 _ _ O
210 _ _ O
12 _ _ O
210 _ _ O
25 _ _ O
37 _ _ O

The _ _ O
relationship _ _ O
between _ _ O
binary _ _ B-Concept
and _ _ O
hex _ _ B-Concept
● _ _ O
Four _ _ O
bits _ _ O
are _ _ O
equivalent _ _ O
to _ _ O
one _ _ O
hex _ _ O
digit _ _ O
. _ _ O
● _ _ O
Converting _ _ O
between _ _ O
them _ _ O
is _ _ O
easy _ _ O
! _ _ O
● _ _ O
Say _ _ O
we _ _ O
had _ _ O
this _ _ O
binary _ _ O
number _ _ O
: _ _ O
11101111101110011100002 _ _ O
● _ _ O
Starting _ _ O
from _ _ O
the _ _ O
LSB _ _ O
, _ _ O
divide _ _ O
into _ _ O
groups _ _ O
of _ _ O
4 _ _ O
bits _ _ O
( _ _ O
put _ _ O
0s _ _ O
before _ _ O
the _ _ O
first _ _ O
digits _ _ O
if _ _ O
there _ _ O
are _ _ O
leftovers _ _ O
) _ _ O
. _ _ O
Then _ _ O
use _ _ O
the _ _ O
table _ _ O
. _ _ O
0011 _ _ O
1011 _ _ O
1110 _ _ O
1110 _ _ O
0111 _ _ O
0000 _ _ O
0x _ _ O
3 _ _ O
B _ _ O
E _ _ O
E _ _ O
7 _ _ O
0 _ _ O
( _ _ O
this _ _ O
is _ _ O
common _ _ O
notation _ _ O
for _ _ O
hex _ _ O
, _ _ O
derived _ _ O
from _ _ O
the _ _ O
C _ _ O
language _ _ O
. _ _ O
) _ _ O
Bin _ _ O
Hex _ _ O
Bin _ _ O
Hex _ _ O
0000 _ _ O
0 _ _ O
1000 _ _ O
8 _ _ O
0001 _ _ O
1 _ _ O
1001 _ _ O
9 _ _ O
0010 _ _ O
2 _ _ O
1010 _ _ O
A _ _ O
0011 _ _ O
3 _ _ O
1011 _ _ O
B _ _ O
0100 _ _ O
4 _ _ O
1100 _ _ O
C _ _ O
0101 _ _ O
5 _ _ O
1101 _ _ O
D _ _ O
0110 _ _ O
6 _ _ O
1110 _ _ O
E _ _ O
0111 _ _ O
7 _ _ O
1111 _ _ O
F _ _ O
know _ _ O
how _ _ O
to _ _ O
make _ _ O
this _ _ O
table _ _ O
. _ _ O
38 _ _ O

Let _ _ O
’s _ _ O
do _ _ O
it _ _ O
! _ _ O
100100011001111000011010010101 _ _ O
39 _ _ O

Let _ _ O
’s _ _ O
do _ _ O
it _ _ O
! _ _ O
00 _ _ O
10 _ _ O
0100 _ _ O
0110 _ _ O
0111 _ _ O
1000 _ _ O
0110 _ _ O
1001 _ _ O
0101 _ _ O
2 _ _ O
4 _ _ O
6 _ _ O
7 _ _ O
8 _ _ O
6 _ _ O
9 _ _ O
5 _ _ O
2467869516 _ _ O
0x24678695 _ _ O
40 _ _ O

Why _ _ O
? _ _ O
1111 _ _ O
1111 _ _ O
1 _ _ O
× _ _ O
27 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
26 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
25 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
24 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
23 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
22 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
21 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
20 _ _ O
1 _ _ O
× _ _ O
23 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
22 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
21 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
20 _ _ O
= _ _ O
8+4+2+1= _ _ O
15 _ _ O
1 _ _ O
× _ _ O
23 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
22 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
21 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
20 _ _ O
× _ _ O
24 _ _ O
+ _ _ O
15 _ _ O
15 _ _ O
× _ _ O
161 _ _ O
+ _ _ O
15 _ _ O
× _ _ O
160 _ _ O
F _ _ O
F _ _ O
Factoring _ _ O
24 _ _ O
= _ _ O
16 _ _ O
41 _ _ O

Powers _ _ B-Concept
of _ _ I-Concept
Two _ _ I-Concept
● _ _ O
Memorize _ _ O
at _ _ O
least _ _ O
the _ _ O
powers _ _ O
up _ _ O
to _ _ O
~28 _ _ O
or _ _ O
210 _ _ O
. _ _ O
o _ _ O
If _ _ O
you _ _ O
ca _ _ O
n't _ _ O
remember _ _ O
one _ _ O
, _ _ O
double _ _ O
the _ _ O
previous _ _ O
one _ _ O
. _ _ O
Dec _ _ O
Hex _ _ O
20 _ _ O
1 _ _ O
0x1 _ _ O
21 _ _ O
2 _ _ O
0x2 _ _ O
22 _ _ O
4 _ _ O
0x4 _ _ O
23 _ _ O
8 _ _ O
0x8 _ _ O
24 _ _ O
16 _ _ O
0x10 _ _ O
● _ _ O
How _ _ O
about _ _ O
a _ _ O
16-bit _ _ O
value _ _ O
? _ _ O
o _ _ O
65535 _ _ O
: _ _ O
0xFFFF _ _ O
25 _ _ O
32 _ _ O
0x20 _ _ O
26 _ _ O
64 _ _ O
0x40 _ _ O
● _ _ O
" _ _ O
0xFFFF _ _ O
" _ _ O
is _ _ O
kinda _ _ O
like _ _ O
" _ _ O
9999 _ _ O
" _ _ O
in _ _ O
decimal _ _ O
. _ _ O
27 _ _ O
128 _ _ O
0x80 _ _ O
28 _ _ O
256 _ _ O
0x100 _ _ O
● _ _ O
These _ _ O
are _ _ O
the _ _ O
place _ _ O
values _ _ O
for _ _ O
binary _ _ O
, _ _ O
and _ _ O
they _ _ O
are _ _ O
also _ _ O
nice _ _ O
" _ _ O
round _ _ O
" _ _ O
numbers _ _ O
in _ _ O
binary _ _ O
and _ _ O
hex _ _ O
. _ _ O
● _ _ O
What _ _ O
is _ _ O
the _ _ O
largest _ _ O
number _ _ O
that _ _ O
an _ _ O
8-bit _ _ O
value _ _ O
can _ _ O
hold _ _ O
? _ _ O
What _ _ O
is _ _ O
that _ _ O
in _ _ O
hexadecimal _ _ O
? _ _ O
o _ _ O
255 _ _ O
: _ _ O
0xFF _ _ O
42 _ _ O

Octal _ _ B-Concept
– _ _ O
Base _ _ O
8 _ _ O
43 _ _ O

How _ _ O
many _ _ O
symbols _ _ O
in _ _ O
octal _ _ B-Concept
? _ _ O
? _ _ O
? _ _ O
? _ _ O
44 _ _ O

Base-8 _ _ O
? _ _ O
● _ _ O
base-8 _ _ O
, _ _ O
octal _ _ B-Concept
, _ _ O
used _ _ O
to _ _ O
be _ _ O
commonplace _ _ O
but _ _ O
is _ _ O
n't _ _ O
anymore _ _ O
● _ _ O
each _ _ O
octal _ _ O
digit _ _ O
( _ _ O
0 _ _ O
- _ _ O
7 _ _ O
) _ _ O
corresponds _ _ O
to _ _ O
three _ _ O
bits _ _ O
o _ _ O
this _ _ O
made _ _ O
it _ _ O
a _ _ O
nice _ _ O
fit _ _ O
for _ _ O
9- _ _ O
, _ _ O
12- _ _ O
, _ _ O
18- _ _ O
, _ _ O
and _ _ O
36-bit _ _ O
machines _ _ O
● _ _ O
buuuut _ _ O
no _ _ O
one _ _ O
cares _ _ O
about _ _ O
octal _ _ O
anymore _ _ O
 _ _ O
● _ _ O
SORRY _ _ O
OCTAL _ _ O
o _ _ O
it _ _ O
's _ _ O
okay _ _ O
, _ _ O
it _ _ O
has _ _ O
its _ _ O
revenge _ _ O
from _ _ O
time _ _ O
to _ _ O
time _ _ O
o _ _ O
try _ _ O
this _ _ O
out _ _ O
in _ _ O
Java _ _ O
sometime _ _ O
: _ _ O
System.out.println _ _ O
( _ _ O
"012345 _ _ O
= _ _ O
" _ _ O
+ _ _ O
012345 _ _ O
) _ _ O
; _ _ O
45 _ _ O

Let _ _ O
’s _ _ O
do _ _ O
it _ _ O
! _ _ O
100100011001111000011010010101 _ _ O
46 _ _ O

Let _ _ O
’s _ _ O
do _ _ O
it _ _ O
! _ _ O
100 _ _ O
100 _ _ O
011 _ _ O
001 _ _ O
111 _ _ O
000 _ _ O
011 _ _ O
010 _ _ O
010 _ _ O
101 _ _ O
4 _ _ O
4 _ _ O
3 _ _ O
1 _ _ O
7 _ _ O
0 _ _ O
3 _ _ O
44317032258 _ _ O
04431703225 _ _ O
0o4431703225 _ _ O
2 _ _ O
2 _ _ O
5 _ _ O
47 _ _ O

Next _ _ O
class _ _ O
! _ _ O
• _ _ O
Assembly _ _ O
! _ _ O
! _ _ O
! _ _ O
! _ _ O
! _ _ O
o _ _ O
How _ _ O
can _ _ O
we _ _ O
program _ _ O
the _ _ O
computer _ _ O
? _ _ O
o _ _ O
New _ _ O
language _ _ O
- _ _ O
> _ _ O
new _ _ O
bugs _ _ O
! _ _ O
• _ _ O
Specifically _ _ O
o _ _ O
Storing _ _ O
and _ _ O
retrieving _ _ O
data _ _ O
from _ _ O
memory _ _ O
o _ _ O
Manipulating _ _ O
the _ _ O
data _ _ O
48 _ _ O



