['train_set', 'labeled']|cs1622|lec14_more_codegen
-DOCSTART- -X- -X- O

More _ _ O
Codegen _ _ B-Concept
and _ _ O
Arrays _ _ B-Concept
CS _ _ O
1622 _ _ O
Jarrett _ _ O
Billingsley _ _ O

Class _ _ O
Announcements _ _ O
● _ _ O
? _ _ O
2 _ _ O

Quick _ _ O
Recap _ _ O
Our _ _ O
Calling _ _ B-Concept
Convention _ _ I-Concept
3 _ _ O

Caller _ _ B-Concept
● _ _ O
remember _ _ O
that _ _ O
the _ _ O
caller _ _ B-Concept
passes _ _ O
all _ _ O
arguments _ _ B-Concept
on _ _ O
the _ _ O
stack _ _ B-Concept
. _ _ O
glob _ _ O
= _ _ O
f _ _ O
( _ _ O
1 _ _ O
, _ _ O
2 _ _ O
) _ _ O
; _ _ O
addi _ _ O
sp _ _ B-Concept
, _ _ O
sp _ _ B-Concept
, _ _ O
-8 _ _ O
li _ _ O
t0 _ _ O
, _ _ O
1 _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
sp _ _ B-Concept
) _ _ O
li _ _ O
t0 _ _ O
, _ _ O
2 _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
4 _ _ O
( _ _ O
sp _ _ B-Concept
) _ _ O
jal _ _ O
f _ _ O
sw _ _ O
v0 _ _ O
, _ _ O
glob _ _ O
push _ _ B-Concept
the _ _ O
two _ _ O
arguments _ _ B-Concept
… _ _ O
call _ _ B-Concept
the _ _ O
function _ _ O
… _ _ O
v0 _ _ O
is _ _ O
the _ _ O
return _ _ B-Concept
value _ _ I-Concept
( _ _ O
if _ _ O
any _ _ O
) _ _ O
. _ _ O
and _ _ O
remember _ _ O
the _ _ O
ATV _ _ B-Concept
rule _ _ I-Concept
: _ _ O
after _ _ O
a _ _ O
jal _ _ O
, _ _ O
a _ _ O
, _ _ O
t _ _ O
, _ _ O
v _ _ O
registers _ _ O
' _ _ O
values _ _ O
may _ _ O
differ _ _ O
, _ _ O
but _ _ O
s _ _ O
registers _ _ O
' _ _ O
values _ _ O
will _ _ O
be _ _ O
the _ _ O
same _ _ O
. _ _ O
4 _ _ O

Callee _ _ B-Concept
● _ _ O
every _ _ O
function _ _ O
has _ _ O
a _ _ O
stack _ _ B-Concept
frame _ _ I-Concept
to _ _ O
hold _ _ O
the _ _ O
arguments _ _ B-Concept
, _ _ O
locals _ _ B-Concept
, _ _ O
and _ _ O
saved _ _ B-Concept
registers _ _ I-Concept
for _ _ O
that _ _ O
call _ _ O
. _ _ O
fn _ _ O
f _ _ O
( _ _ O
x _ _ O
: _ _ O
int _ _ O
, _ _ O
y _ _ O
: _ _ O
int _ _ O
) _ _ O
{ _ _ O
let _ _ O
z _ _ O
= _ _ O
x _ _ O
+ _ _ O
y _ _ O
; _ _ O
for _ _ O
i _ _ O
in _ _ O
0 _ _ O
, _ _ O
z _ _ O
{ _ _ O
println_i _ _ O
( _ _ O
i _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
y _ _ O
4 _ _ O
( _ _ O
fp _ _ B-Concept
) _ _ O
x _ _ O
0 _ _ O
( _ _ O
fp _ _ B-Concept
) _ _ O
arguments _ _ B-Concept
are _ _ O
accessed _ _ O
with _ _ O
positive _ _ O
offsets _ _ O
from _ _ O
fp _ _ B-Concept
; _ _ O
fp _ _ B-Concept
ra _ _ O
i _ _ O
z _ _ O
these _ _ O
are _ _ O
the _ _ O
saved _ _ O
copies _ _ O
of _ _ O
the _ _ O
caller _ _ B-Concept
's _ _ I-Concept
fp _ _ B-Concept
/ _ _ O
ra _ _ O
registers _ _ O
. _ _ O
-12 _ _ O
( _ _ O
fp _ _ B-Concept
) _ _ O
and _ _ O
locals _ _ B-Concept
are _ _ O
accessed _ _ O
with _ _ O
-16 _ _ O
( _ _ O
fp _ _ B-Concept
) _ _ O
negative _ _ O
offsets _ _ O
from _ _ O
fp _ _ B-Concept
. _ _ O
sp _ _ B-Concept
always _ _ O
points _ _ O
at _ _ O
the _ _ O
top _ _ O
of _ _ O
the _ _ O
stack _ _ B-Concept
. _ _ O
5 _ _ O

Prologue _ _ B-Concept
and _ _ O
Epilogue _ _ B-Concept
● _ _ O
the _ _ O
stack _ _ B-Concept
frame _ _ I-Concept
is _ _ O
set _ _ O
up _ _ O
by _ _ O
the _ _ O
prologue _ _ B-Concept
and _ _ O
torn _ _ O
down _ _ O
by _ _ O
the _ _ O
epilogue _ _ B-Concept
; _ _ I-Concept
these _ _ O
will _ _ O
surround _ _ O
every _ _ O
function _ _ O
. _ _ O
f _ _ O
: _ _ O
sw _ _ O
fp _ _ O
, _ _ O
-4 _ _ O
( _ _ O
sp _ _ B-Concept
) _ _ O
sw _ _ O
ra _ _ O
, _ _ O
-8 _ _ O
( _ _ O
sp _ _ B-Concept
) _ _ O
move _ _ O
fp _ _ B-Concept
, _ _ O
sp _ _ B-Concept
addi _ _ O
sp _ _ B-Concept
, _ _ O
sp _ _ B-Concept
, _ _ O
-n _ _ O
code _ _ O
goes _ _ O
here _ _ O
! _ _ O
lw _ _ O
ra _ _ O
, _ _ O
-8 _ _ O
( _ _ O
fp _ _ B-Concept
) _ _ O
lw _ _ O
fp _ _ O
, _ _ O
-4 _ _ O
( _ _ O
fp _ _ B-Concept
) _ _ O
addi _ _ O
sp _ _ B-Concept
, _ _ O
sp _ _ B-Concept
, _ _ O
x _ _ O
jr _ _ O
ra _ _ O
here _ _ O
, _ _ O
n _ _ O
represents _ _ O
the _ _ O
size _ _ O
( _ _ O
in _ _ O
bytes _ _ O
) _ _ O
of _ _ O
all _ _ O
locals _ _ B-Concept
and _ _ O
saved _ _ O
registers _ _ O
. _ _ O
and _ _ O
here _ _ O
, _ _ O
x _ _ O
represents _ _ O
the _ _ O
size _ _ O
( _ _ O
in _ _ O
bytes _ _ O
) _ _ O
of _ _ O
all _ _ O
locals _ _ O
, _ _ O
saved _ _ O
registers _ _ O
, _ _ O
and _ _ O
arguments _ _ O
. _ _ O
this _ _ O
leaves _ _ O
the _ _ O
stack _ _ O
completely _ _ O
clean _ _ O
. _ _ O
6 _ _ O

The _ _ O
Code _ _ O
Inside _ _ O
Functions _ _ O
7 _ _ O

Not _ _ O
a _ _ O
tutorial _ _ O
● _ _ O
this _ _ O
is _ _ O
n't _ _ O
going _ _ O
to _ _ O
be _ _ O
a _ _ O
point-by-point _ _ O
explanation _ _ O
of _ _ O
how _ _ O
to _ _ O
generate _ _ B-Concept
code _ _ I-Concept
for _ _ O
every _ _ O
statement _ _ O
and _ _ O
expression _ _ O
. _ _ O
● _ _ O
rather _ _ O
, _ _ O
I _ _ O
want _ _ O
to _ _ O
give _ _ O
you _ _ O
an _ _ O
idea _ _ O
of _ _ O
what _ _ O
generating _ _ B-Concept
code _ _ I-Concept
is _ _ O
like _ _ O
… _ _ O
o _ _ O
and _ _ O
to _ _ O
go _ _ O
over _ _ O
some _ _ O
of _ _ O
the _ _ O
trouble _ _ O
spots _ _ O
that _ _ O
come _ _ O
up _ _ O
. _ _ O
● _ _ O
so _ _ O
, _ _ O
this _ _ O
section _ _ O
might _ _ O
be _ _ O
a _ _ O
bit _ _ O
rambly _ _ O
and _ _ O
unfocused _ _ O
, _ _ O
and _ _ O
that _ _ O
's _ _ O
why _ _ O
: _ _ O
it _ _ O
's _ _ O
just _ _ O
a _ _ O
bunch _ _ O
of _ _ O
codegen-related _ _ B-Concept
ideas _ _ O
. _ _ O
● _ _ O
after _ _ O
all _ _ O
, _ _ O
project _ _ O
4 _ _ O
is _ _ O
where _ _ O
you _ _ O
'll _ _ O
be _ _ O
generating _ _ B-Concept
code _ _ I-Concept
, _ _ O
and _ _ O
I _ _ O
do _ _ O
n't _ _ O
wanna _ _ O
give _ _ O
too _ _ O
much _ _ O
away _ _ O
;) _ _ O
8 _ _ O

Block _ _ B-Concept
statements _ _ I-Concept
● _ _ O
the _ _ O
body _ _ B-Concept
of _ _ O
a _ _ O
function _ _ O
is _ _ O
a _ _ O
{ _ _ O
block _ _ B-Concept
} _ _ O
, _ _ O
which _ _ O
is _ _ O
just _ _ O
several _ _ O
statements _ _ O
. _ _ O
● _ _ O
this _ _ O
is _ _ O
easy _ _ O
to _ _ O
generate _ _ B-Concept
code _ _ I-Concept
for _ _ O
: _ _ O
you _ _ O
just _ _ O
concatenate _ _ O
the _ _ O
code _ _ O
. _ _ O
{ _ _ O
stmt1 _ _ O
; _ _ O
stmt2 _ _ O
; _ _ O
stmt3 _ _ O
; _ _ O
code _ _ O
for _ _ O
stmt1 _ _ O
code _ _ O
for _ _ O
stmt2 _ _ O
code _ _ O
for _ _ O
stmt3 _ _ O
} _ _ O
this _ _ O
works _ _ O
because _ _ O
the _ _ O
runtime _ _ B-Concept
semantics _ _ I-Concept
of _ _ O
block _ _ B-Concept
statements _ _ I-Concept
are _ _ O
a _ _ O
very _ _ O
good _ _ O
match _ _ O
for _ _ O
how _ _ O
code _ _ O
is _ _ O
naturally _ _ O
executed _ _ O
by _ _ O
the _ _ O
CPU _ _ O
. _ _ O
but _ _ O
that _ _ O
's _ _ O
not _ _ O
the _ _ O
case _ _ O
for _ _ O
all _ _ O
statements _ _ O
… _ _ O
9 _ _ O

Accessing _ _ B-Concept
variables _ _ I-Concept
● _ _ O
HLLs _ _ B-Concept
hide _ _ O
how _ _ O
variables _ _ O
are _ _ O
accessed _ _ O
at _ _ O
the _ _ O
point _ _ O
of _ _ O
use _ _ O
. _ _ O
let _ _ O
g _ _ O
= _ _ O
10 _ _ O
; _ _ O
fn _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
let _ _ O
x _ _ O
= _ _ O
1 _ _ O
; _ _ O
} _ _ O
here _ _ O
we _ _ O
store _ _ O
to _ _ O
a _ _ O
local _ _ O
variable _ _ O
: _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
-12 _ _ O
( _ _ O
fp _ _ O
) _ _ O
g _ _ O
= _ _ O
2 _ _ O
; _ _ O
here _ _ O
we _ _ O
store _ _ O
to _ _ O
a _ _ O
global _ _ O
variable _ _ O
: _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
g _ _ O
print_i _ _ O
( _ _ O
x _ _ O
) _ _ O
; _ _ O
here _ _ O
we _ _ O
load _ _ O
from _ _ O
a _ _ O
local _ _ O
variable _ _ O
: _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
-12 _ _ O
( _ _ O
fp _ _ O
) _ _ O
print_i _ _ O
( _ _ O
g _ _ O
) _ _ O
; _ _ O
here _ _ O
we _ _ O
load _ _ O
from _ _ O
a _ _ O
global _ _ O
variable _ _ O
: _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
g _ _ O
10 _ _ O

Evaluating _ _ B-Concept
expressions _ _ I-Concept
● _ _ O
things _ _ O
start _ _ O
to _ _ O
get _ _ O
really _ _ O
tricky _ _ O
here _ _ O
. _ _ O
g _ _ O
= _ _ O
x _ _ O
+ _ _ O
y _ _ O
; _ _ O
lw _ _ O
lw _ _ O
add _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
fp _ _ O
) _ _ O
now _ _ O
we _ _ O
have _ _ O
to _ _ O
come _ _ O
up _ _ O
t1 _ _ O
, _ _ O
4 _ _ O
( _ _ O
fp _ _ O
) _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
with _ _ O
registers _ _ B-Concept
to _ _ O
use _ _ O
for _ _ O
each _ _ O
part _ _ O
of _ _ O
the _ _ O
expression _ _ O
. _ _ O
t0 _ _ O
, _ _ O
g _ _ O
the _ _ O
order _ _ O
we _ _ O
do _ _ O
things _ _ O
in _ _ O
can _ _ O
affect _ _ O
how _ _ O
many _ _ O
registers _ _ B-Concept
we _ _ O
need _ _ O
. _ _ O
g _ _ O
= _ _ O
x _ _ O
+ _ _ O
y _ _ O
+ _ _ O
z _ _ O
; _ _ O
lw _ _ O
lw _ _ O
add _ _ O
lw _ _ O
add _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
fp _ _ O
) _ _ O
t1 _ _ O
, _ _ O
4 _ _ O
( _ _ O
fp _ _ O
) _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
t1 _ _ O
, _ _ O
8 _ _ O
( _ _ O
fp _ _ O
) _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
t0 _ _ O
, _ _ O
g _ _ O
lw _ _ O
lw _ _ O
or _ _ O
? _ _ O
lw _ _ O
add _ _ O
add _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
fp _ _ O
) _ _ O
t1 _ _ O
, _ _ O
4 _ _ O
( _ _ O
fp _ _ O
) _ _ O
t2 _ _ O
, _ _ O
8 _ _ O
( _ _ O
fp _ _ O
) _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
t2 _ _ O
t0 _ _ O
, _ _ O
g _ _ O
11 _ _ O

The _ _ O
need _ _ O
for _ _ O
saved _ _ B-Concept
registers _ _ I-Concept
● _ _ O
once _ _ O
you _ _ O
mix _ _ O
function _ _ O
calls _ _ O
in _ _ O
, _ _ O
it _ _ O
gets _ _ O
all _ _ O
kinds _ _ O
of _ _ O
complicated _ _ O
. _ _ O
g _ _ O
= _ _ O
x _ _ O
+ _ _ O
f _ _ O
( _ _ O
) _ _ O
; _ _ O
lw _ _ O
jal _ _ O
add _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
fp _ _ O
) _ _ O
f _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
v0 _ _ O
t0 _ _ O
, _ _ O
g _ _ O
this _ _ O
is _ _ O
bad _ _ O
code _ _ O
! _ _ O
we _ _ O
are _ _ O
violating _ _ O
the _ _ O
ATV _ _ B-Concept
rule _ _ I-Concept
. _ _ O
this _ _ O
is _ _ O
because _ _ O
the _ _ O
value _ _ O
of _ _ O
t0 _ _ O
from _ _ O
before _ _ O
the _ _ O
call _ _ O
may _ _ O
not _ _ O
survive _ _ O
until _ _ O
its _ _ O
use _ _ O
after _ _ O
the _ _ O
call _ _ O
. _ _ O
f _ _ O
is _ _ O
allowed _ _ O
to _ _ O
change _ _ O
t0 _ _ O
. _ _ O
so _ _ O
we _ _ O
have _ _ O
to _ _ O
use _ _ O
the _ _ O
saved _ _ B-Concept
( _ _ I-Concept
s _ _ I-Concept
) _ _ I-Concept
registers _ _ I-Concept
for _ _ O
some _ _ O
temporaries _ _ B-Concept
, _ _ O
so _ _ O
their _ _ O
values _ _ O
will _ _ O
persist _ _ O
across _ _ O
calls _ _ O
. _ _ O
to _ _ O
make _ _ O
things _ _ O
simpler _ _ O
, _ _ O
we _ _ O
could _ _ O
use _ _ O
only _ _ O
the _ _ O
saved _ _ B-Concept
registers _ _ I-Concept
, _ _ O
and _ _ O
ignore _ _ O
the _ _ O
t _ _ O
registers _ _ O
altogether _ _ O
. _ _ O
12 _ _ O

A _ _ O
little _ _ O
detour _ _ O
● _ _ O
expressions _ _ B-Concept
are _ _ O
represented _ _ O
as _ _ O
trees _ _ B-Concept
, _ _ O
and _ _ O
trees _ _ B-Concept
❤ _ _ O
️ _ _ O
stacks _ _ B-Concept
, _ _ O
so _ _ O
… _ _ O
● _ _ O
let _ _ O
's _ _ O
first _ _ O
imagine _ _ O
evaluating _ _ O
an _ _ O
AST _ _ B-Concept
by _ _ O
pushing _ _ B-Concept
and _ _ O
popping _ _ B-Concept
things _ _ O
on _ _ O
a _ _ O
stack _ _ B-Concept
, _ _ O
instead _ _ O
of _ _ O
dealing _ _ O
with _ _ O
registers _ _ O
. _ _ O
g _ _ O
= _ _ O
a _ _ O
+ _ _ O
b _ _ O
; _ _ O
1 _ _ O
. _ _ O
push _ _ B-Concept
a _ _ O
2 _ _ O
. _ _ O
push _ _ B-Concept
b _ _ O
= _ _ O
g _ _ O
+ _ _ O
a _ _ O
3 _ _ O
. _ _ O
pop _ _ B-Concept
them _ _ O
, _ _ O
push _ _ B-Concept
sum _ _ O
b _ _ O
b _ _ O
let _ _ O
's _ _ O
evaluate _ _ O
the _ _ O
assignment _ _ O
's _ _ O
rhs _ _ O
. _ _ O
a _ _ O
a _ _ O
a _ _ O
+ _ _ O
b _ _ O
you _ _ O
can _ _ O
use _ _ O
this _ _ O
strategy _ _ O
to _ _ O
evaluate _ _ O
any _ _ O
expression _ _ O
of _ _ O
any _ _ O
complexity _ _ O
. _ _ O
( _ _ O
let _ _ O
's _ _ O
do _ _ O
a _ _ O
few _ _ O
examples _ _ O
. _ _ O
) _ _ O
13 _ _ O

Ok _ _ O
? _ _ O
And _ _ O
? _ _ O
How _ _ O
does _ _ O
that _ _ O
help _ _ O
? _ _ O
● _ _ O
well _ _ O
… _ _ O
we _ _ O
can _ _ O
map _ _ O
that _ _ O
imaginary _ _ O
stack _ _ B-Concept
onto _ _ O
the _ _ O
registers _ _ O
. _ _ O
g _ _ O
= _ _ O
a _ _ O
+ _ _ O
b _ _ O
; _ _ O
s1 _ _ O
= _ _ O
s0 _ _ O
g _ _ O
a _ _ O
s0 _ _ O
b _ _ O
a _ _ O
s0 _ _ O
a _ _ O
+ _ _ O
b _ _ O
+ _ _ O
a _ _ O
b _ _ O
this _ _ O
tells _ _ O
us _ _ O
what _ _ O
register _ _ O
to _ _ O
put _ _ O
each _ _ O
value _ _ O
into _ _ O
! _ _ O
lw _ _ O
lw _ _ O
add _ _ O
sw _ _ O
s0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
fp _ _ O
) _ _ O
# _ _ O
a _ _ O
s1 _ _ O
, _ _ O
4 _ _ O
( _ _ O
fp _ _ O
) _ _ O
# _ _ O
b _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
s1 _ _ O
s0 _ _ O
, _ _ O
g _ _ O
but _ _ O
now _ _ O
we _ _ O
come _ _ O
to _ _ O
an _ _ O
important _ _ O
issue _ _ O
: _ _ O
to _ _ O
be _ _ O
allowed _ _ O
to _ _ O
use _ _ O
the _ _ O
saved _ _ B-Concept
registers _ _ I-Concept
, _ _ O
we _ _ O
must _ _ O
save _ _ O
the _ _ O
caller _ _ B-Concept
's _ _ I-Concept
versions _ _ O
of _ _ O
them _ _ O
. _ _ O
14 _ _ O

The _ _ O
last _ _ O
piece _ _ O
of _ _ O
the _ _ O
calling _ _ B-Concept
convention _ _ I-Concept
● _ _ O
only _ _ O
after _ _ O
we _ _ O
have _ _ O
generated _ _ O
the _ _ O
code _ _ O
for _ _ O
a _ _ O
function _ _ O
, _ _ O
do _ _ O
we _ _ O
know _ _ O
how _ _ O
many _ _ O
saved _ _ B-Concept
registers _ _ I-Concept
it _ _ O
needs _ _ O
. _ _ O
● _ _ O
so _ _ O
there _ _ O
is _ _ O
one _ _ O
more _ _ O
part _ _ O
of _ _ O
the _ _ O
stack _ _ B-Concept
frame _ _ I-Concept
: _ _ O
y _ _ O
x _ _ O
fp _ _ B-Concept
fp _ _ B-Concept
ra _ _ O
in _ _ O
the _ _ O
prologue _ _ B-Concept
, _ _ O
we _ _ O
will _ _ O
have _ _ O
to _ _ O
store _ _ O
each _ _ O
of _ _ O
these _ _ O
saved _ _ B-Concept
registers _ _ I-Concept
to _ _ O
the _ _ O
stack _ _ B-Concept
… _ _ O
… _ _ O
and _ _ O
in _ _ O
the _ _ O
epilogue _ _ B-Concept
, _ _ I-Concept
we _ _ O
will _ _ O
load _ _ O
them _ _ O
back _ _ O
. _ _ O
i _ _ O
z _ _ O
s1 _ _ O
s0 _ _ O
we _ _ O
have _ _ O
to _ _ O
save _ _ O
the _ _ O
caller _ _ B-Concept
's _ _ I-Concept
values _ _ O
of _ _ O
any _ _ O
saved _ _ B-Concept
registers _ _ I-Concept
this _ _ O
function _ _ O
uses _ _ O
. _ _ O
sp _ _ B-Concept
this _ _ O
is _ _ O
how _ _ O
the _ _ O
saved _ _ B-Concept
register _ _ I-Concept
contract _ _ O
works _ _ O
. _ _ O
I _ _ O
taught _ _ O
it _ _ O
in _ _ O
447 _ _ O
and _ _ O
it _ _ O
's _ _ O
just _ _ O
as _ _ O
relevant _ _ O
now _ _ O
. _ _ O
15 _ _ O

Some _ _ O
last _ _ O
register _ _ B-Concept
allocation _ _ I-Concept
thoughts _ _ O
● _ _ O
can _ _ O
we _ _ O
use _ _ O
t _ _ O
registers _ _ O
at _ _ O
all _ _ O
? _ _ O
o _ _ O
sure _ _ O
, _ _ O
as _ _ O
long _ _ O
as _ _ O
we _ _ O
can _ _ O
prove _ _ O
that _ _ O
there _ _ O
are _ _ O
no _ _ O
function _ _ O
calls _ _ O
from _ _ O
the _ _ O
time _ _ O
we _ _ O
put _ _ O
a _ _ O
value _ _ O
in _ _ O
it _ _ O
to _ _ O
the _ _ O
time _ _ O
we _ _ O
use _ _ O
that _ _ O
value _ _ O
. _ _ O
o _ _ O
that _ _ O
might _ _ O
be _ _ O
pretty _ _ O
simple _ _ O
: _ _ O
look _ _ O
at _ _ O
the _ _ O
AST _ _ O
" _ _ O
to _ _ O
the _ _ O
right _ _ O
" _ _ O
and _ _ O
if _ _ O
there _ _ O
are _ _ O
no _ _ O
“ _ _ O
function _ _ O
call _ _ O
” _ _ O
nodes _ _ O
, _ _ O
we _ _ O
can _ _ O
use _ _ O
a _ _ O
t _ _ O
register _ _ O
instead _ _ O
. _ _ O
o _ _ O
this _ _ O
is _ _ O
more _ _ O
complicated _ _ O
, _ _ O
but _ _ O
it _ _ O
will _ _ O
use _ _ O
fewer _ _ O
( _ _ O
or _ _ O
no _ _ O
) _ _ O
s _ _ B-Concept
registers _ _ I-Concept
, _ _ O
meaning _ _ O
less _ _ O
time _ _ O
/ _ _ O
space _ _ O
spent _ _ O
saving _ _ O
/ _ _ O
restoring _ _ O
them _ _ O
. _ _ O
● _ _ O
there _ _ O
are _ _ O
only _ _ O
8 _ _ O
saved _ _ B-Concept
registers _ _ I-Concept
( _ _ O
s0 _ _ O
.. _ _ O
s7 _ _ O
) _ _ O
. _ _ O
what _ _ O
if _ _ O
we _ _ O
need _ _ O
more _ _ O
? _ _ O
o _ _ O
uhh _ _ O
💦 _ _ O
o _ _ O
well _ _ O
, _ _ O
this _ _ O
register _ _ B-Concept
allocation _ _ I-Concept
scheme _ _ O
will _ _ O
work _ _ O
for _ _ O
simple _ _ O
code _ _ O
. _ _ O
o _ _ O
we _ _ O
'll _ _ O
talk _ _ O
about _ _ O
a _ _ O
much _ _ O
more _ _ O
sophisticated _ _ O
algorithm _ _ O
at _ _ O
the _ _ O
end _ _ O
of _ _ O
the _ _ O
course _ _ O
, _ _ O
which _ _ O
will _ _ O
solve _ _ O
this _ _ O
problem _ _ O
( _ _ O
and _ _ O
others _ _ O
, _ _ O
like _ _ O
using _ _ O
a _ _ O
registers _ _ O
for _ _ O
arguments _ _ O
instead _ _ O
of _ _ O
the _ _ O
stack _ _ O
) _ _ O
. _ _ O
16 _ _ O

Control _ _ O
flow _ _ O
statements _ _ O
● _ _ O
assuming _ _ O
we _ _ O
've _ _ O
got _ _ O
expressions _ _ O
worked _ _ O
out _ _ O
, _ _ O
another _ _ O
surprisingly _ _ O
tricky _ _ O
bit _ _ O
is _ _ O
control _ _ B-Concept
flow _ _ I-Concept
statements _ _ I-Concept
: _ _ O
conditionals _ _ O
and _ _ O
loops _ _ O
. _ _ O
o _ _ O
specifically _ _ O
, _ _ O
the _ _ O
conditions _ _ O
for _ _ O
these _ _ O
statements _ _ O
can _ _ O
be _ _ O
hard _ _ O
to _ _ O
generate _ _ O
good _ _ O
code _ _ O
for _ _ O
. _ _ O
( _ _ O
but _ _ O
that _ _ O
's _ _ O
not _ _ O
a _ _ O
primary _ _ O
goal _ _ O
here _ _ O
. _ _ O
) _ _ O
if _ _ O
i _ _ O
< _ _ O
10 _ _ O
{ _ _ O
... _ _ O
} _ _ O
lw _ _ O
bge _ _ O
... _ _ O
_ _ _ O
end _ _ O
: _ _ O
s0 _ _ O
, _ _ O
-16 _ _ O
( _ _ O
fp _ _ O
) _ _ O
s0 _ _ O
, _ _ O
10 _ _ O
, _ _ O
_ _ _ O
end _ _ O
getting _ _ O
the _ _ O
condition _ _ O
that _ _ O
simple _ _ O
is _ _ O
hard _ _ O
to _ _ O
do _ _ O
; _ _ O
we _ _ O
might _ _ O
do _ _ O
something _ _ O
like _ _ O
this _ _ O
instead _ _ O
: _ _ O
lw _ _ O
li _ _ O
slt _ _ O
beq _ _ O
... _ _ O
_ _ _ O
end _ _ O
: _ _ O
s0 _ _ O
, _ _ O
-16 _ _ O
( _ _ O
fp _ _ O
) _ _ O
s1 _ _ O
, _ _ O
10 _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
s1 _ _ O
s0 _ _ O
, _ _ O
zero _ _ O
, _ _ O
_ _ _ O
end _ _ O
17 _ _ O

Lazy _ _ O
operators _ _ O
( _ _ O
" _ _ O
short-circuiting _ _ B-Concept
" _ _ O
) _ _ O
● _ _ O
recall _ _ O
that _ _ O
like _ _ O
in _ _ O
most _ _ O
languages _ _ O
, _ _ O
logical _ _ O
and _ _ O
and _ _ O
or _ _ O
will _ _ O
only _ _ O
evaluate _ _ O
their _ _ O
rhs _ _ O
if _ _ O
they _ _ O
have _ _ O
to _ _ O
– _ _ O
making _ _ O
their _ _ O
codegen _ _ B-Concept
very _ _ O
different _ _ O
from _ _ O
the _ _ O
other _ _ O
operators _ _ O
. _ _ O
if _ _ O
i _ _ O
< _ _ O
10 _ _ O
or _ _ O
i _ _ O
> _ _ O
20 _ _ O
{ _ _ O
... _ _ O
} _ _ O
see _ _ O
how _ _ O
it _ _ O
skips _ _ O
right _ _ O
to _ _ O
the _ _ O
code _ _ O
when _ _ O
the _ _ O
first _ _ O
condition _ _ O
is _ _ O
true _ _ O
? _ _ O
lw _ _ O
s0 _ _ O
, _ _ O
-16 _ _ O
( _ _ O
fp _ _ O
) _ _ O
li _ _ O
s1 _ _ O
, _ _ O
10 _ _ O
slt _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
s1 _ _ O
bne _ _ O
s0 _ _ O
, _ _ O
zero _ _ O
, _ _ O
_ _ _ O
true _ _ O
lw _ _ O
s0 _ _ O
, _ _ O
-16 _ _ O
( _ _ O
fp _ _ O
) _ _ O
li _ _ O
s1 _ _ O
, _ _ O
20 _ _ O
sgt _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
s1 _ _ O
beq _ _ O
s0 _ _ O
, _ _ O
zero _ _ O
, _ _ O
_ _ _ O
end _ _ O
_ _ _ O
true _ _ O
: _ _ O
... _ _ O
_ _ _ O
end _ _ O
: _ _ O
18 _ _ O

You _ _ O
can _ _ O
assign _ _ O
comparison _ _ O
operators _ _ O
into _ _ O
variables _ _ O
● _ _ O
it _ _ O
seems _ _ O
like _ _ O
no _ _ O
one _ _ O
teaches _ _ O
you _ _ O
this _ _ O
but _ _ O
this _ _ O
is _ _ O
totally _ _ O
valid _ _ O
code _ _ O
in _ _ O
Java _ _ O
( _ _ O
and _ _ O
in _ _ O
lots _ _ O
of _ _ O
other _ _ O
languages _ _ O
too _ _ O
) _ _ O
: _ _ O
boolean _ _ O
b _ _ O
= _ _ O
x _ _ O
< _ _ O
10 _ _ O
; _ _ O
boolean _ _ O
d _ _ O
= _ _ O
i _ _ O
< _ _ O
10 _ _ O
|| _ _ O
i _ _ O
> _ _ O
20 _ _ O
; _ _ O
● _ _ O
because _ _ O
of _ _ O
this _ _ O
, _ _ O
you _ _ O
may _ _ O
not _ _ O
be _ _ O
able _ _ O
to _ _ O
use _ _ O
the _ _ O
same _ _ O
codegen _ _ B-Concept
algorithm _ _ O
for _ _ O
e.g. _ _ O
logical _ _ O
OR _ _ O
in _ _ O
all _ _ O
cases _ _ O
! _ _ O
o _ _ O
you _ _ O
still _ _ O
have _ _ O
to _ _ O
do _ _ O
the _ _ O
short-circuiting _ _ B-Concept
… _ _ O
o _ _ O
but _ _ O
now _ _ O
you _ _ O
're _ _ O
producing _ _ O
a _ _ O
value _ _ O
to _ _ O
be _ _ O
put _ _ O
into _ _ O
a _ _ O
variable _ _ O
o _ _ O
which _ _ O
, _ _ O
depending _ _ O
on _ _ O
how _ _ O
your _ _ O
codegen _ _ B-Concept
works _ _ O
, _ _ O
could _ _ O
be _ _ O
a _ _ O
very _ _ O
different _ _ O
thing _ _ O
from _ _ O
" _ _ O
writing _ _ O
a _ _ O
condition _ _ O
for _ _ O
a _ _ O
loop _ _ O
" _ _ O
19 _ _ O

Arrays _ _ O
20 _ _ O

Adding _ _ O
features _ _ O
is _ _ O
Fun _ _ O
™ _ _ O
● _ _ O
okay _ _ O
. _ _ O
now _ _ O
let _ _ O
's _ _ O
assume _ _ O
we _ _ O
've _ _ O
implemented _ _ O
lexing _ _ B-Concept
, _ _ O
parsing _ _ B-Concept
, _ _ O
semantic _ _ B-Concept
analysis _ _ I-Concept
, _ _ O
and _ _ O
codegen _ _ B-Concept
for _ _ O
all _ _ O
the _ _ O
basic _ _ O
features _ _ O
of _ _ O
our _ _ O
language _ _ O
: _ _ O
o _ _ O
variables _ _ O
, _ _ O
functions _ _ O
, _ _ O
ints _ _ O
, _ _ O
bools _ _ O
, _ _ O
strings _ _ O
. _ _ O
just _ _ O
the _ _ O
simple _ _ O
stuff _ _ O
. _ _ O
● _ _ O
let _ _ O
's _ _ O
now _ _ O
think _ _ O
about _ _ O
how _ _ O
we _ _ O
'd _ _ O
go _ _ O
about _ _ O
adding _ _ O
a _ _ O
new _ _ O
feature _ _ O
to _ _ O
the _ _ O
language _ _ O
, _ _ O
from _ _ O
design _ _ O
all _ _ O
the _ _ O
way _ _ O
through _ _ O
to _ _ O
codegen _ _ B-Concept
. _ _ O
o _ _ O
and _ _ O
along _ _ O
the _ _ O
way _ _ O
, _ _ O
this _ _ O
might _ _ O
give _ _ O
you _ _ O
an _ _ O
appreciation _ _ O
for _ _ O
how _ _ O
parts _ _ O
of _ _ O
the _ _ O
language _ _ O
interact _ _ O
with _ _ O
one _ _ O
another _ _ O
. _ _ O
● _ _ O
we _ _ O
'll _ _ O
be _ _ O
adding _ _ O
arrays _ _ B-Concept
, _ _ O
which _ _ O
will _ _ O
work _ _ O
very _ _ O
similarly _ _ O
to _ _ O
how _ _ O
they _ _ O
do _ _ O
in _ _ O
Java _ _ O
, _ _ O
but _ _ O
with _ _ O
some _ _ O
slightly _ _ O
different _ _ O
syntax _ _ O
. _ _ O
21 _ _ O

Minimum _ _ O
Viable _ _ O
Product _ _ O
● _ _ O
a _ _ O
good _ _ O
place _ _ O
to _ _ O
start _ _ O
is _ _ O
by _ _ O
writing _ _ O
some _ _ O
code _ _ O
to _ _ O
get _ _ O
a _ _ O
feel _ _ O
for _ _ O
how _ _ O
we _ _ O
want _ _ O
this _ _ O
feature _ _ O
to _ _ O
look _ _ O
and _ _ O
work _ _ O
. _ _ O
● _ _ O
let _ _ O
's _ _ O
focus _ _ O
on _ _ O
the _ _ O
absolute _ _ O
core _ _ O
features _ _ O
of _ _ O
arrays _ _ B-Concept
: _ _ O
allocating _ _ O
them _ _ O
, _ _ O
accessing _ _ O
their _ _ O
items _ _ O
, _ _ O
and _ _ O
getting _ _ O
their _ _ O
length _ _ O
. _ _ O
let _ _ O
a _ _ O
= _ _ O
new _ _ O
[ _ _ O
int _ _ O
; _ _ O
10 _ _ O
] _ _ O
; _ _ O
this _ _ O
syntax _ _ O
might _ _ O
look _ _ O
a _ _ O
bit _ _ O
odd _ _ O
, _ _ O
but _ _ O
it _ _ O
's _ _ O
meant _ _ O
to _ _ O
echo _ _ O
a _ _ O
similar _ _ O
syntax _ _ O
used _ _ O
in _ _ O
Rust _ _ O
. _ _ O
it _ _ O
's _ _ O
also _ _ O
easier _ _ O
to _ _ O
parse _ _ O
than _ _ O
new _ _ O
int _ _ O
[ _ _ O
10 _ _ O
] _ _ O
. _ _ O
a _ _ O
[ _ _ O
0 _ _ O
] _ _ O
= _ _ O
5 _ _ O
; _ _ O
I _ _ O
think _ _ O
it _ _ O
's _ _ O
clear _ _ O
what _ _ O
's _ _ O
happening _ _ O
here _ _ O
. _ _ O
for _ _ O
i _ _ O
in _ _ O
0 _ _ O
, _ _ O
a.length _ _ O
{ _ _ O
println_i _ _ O
( _ _ O
a _ _ O
[ _ _ O
i _ _ O
] _ _ O
) _ _ O
; _ _ O
} _ _ O
and _ _ O
this _ _ O
is _ _ O
familiar _ _ O
too _ _ O
! _ _ O
22 _ _ O

Lexing _ _ O
and _ _ O
Parsing _ _ B-Concept
● _ _ O
for _ _ O
lexing _ _ B-Concept
, _ _ O
we _ _ O
only _ _ O
need _ _ O
to _ _ O
add _ _ O
two _ _ O
tokens _ _ B-Concept
to _ _ O
our _ _ O
lexer _ _ B-Concept
: _ _ O
[ _ _ O
and _ _ O
] _ _ O
. _ _ O
● _ _ O
for _ _ O
parsing _ _ B-Concept
, _ _ O
we _ _ O
've _ _ O
got _ _ O
a _ _ O
few _ _ O
new _ _ O
rules _ _ O
to _ _ O
add _ _ O
. _ _ O
new _ _ O
[ _ _ O
int _ _ O
; _ _ O
10 _ _ O
] _ _ O
New _ _ O
: _ _ O
' _ _ O
new _ _ O
' _ _ O
( _ _ O
StructNew _ _ O
| _ _ O
ArrayNew _ _ O
) _ _ O
StructNew _ _ O
: _ _ O
I _ _ O
d _ _ O
' _ _ O
( _ _ O
' _ _ O
' _ _ O
) _ _ O
' _ _ O
ArrayCtor _ _ O
: _ _ O
' _ _ O
[ _ _ O
' _ _ O
Type _ _ O
' _ _ O
; _ _ O
' _ _ O
Exp _ _ O
' _ _ O
] _ _ O
' _ _ O
a _ _ O
[ _ _ O
0 _ _ O
] _ _ O
= _ _ O
5 _ _ O
; _ _ O
PostfixOp _ _ O
: _ _ O
FuncCall _ _ O
| _ _ O
Field _ _ O
| _ _ O
Index _ _ O
Index _ _ O
: _ _ O
' _ _ O
[ _ _ O
' _ _ O
Exp _ _ O
' _ _ O
] _ _ O
' _ _ O
one _ _ O
more _ _ O
important _ _ O
rule _ _ O
: _ _ O
we _ _ O
have _ _ O
to _ _ O
be _ _ O
able _ _ O
to _ _ O
write _ _ O
array _ _ B-Concept
types _ _ I-Concept
, _ _ O
for _ _ O
things _ _ O
like _ _ O
function _ _ O
arguments _ _ O
and _ _ O
struct _ _ O
fields _ _ O
. _ _ O
Type _ _ O
: _ _ O
fn _ _ O
f _ _ O
( _ _ O
a _ _ O
: _ _ O
[ _ _ O
int _ _ O
] _ _ O
) _ _ O
ArrayType _ _ O
: _ _ O
VoidType _ _ O
| _ _ O
' _ _ O
bool _ _ O
' _ _ O
| _ _ O
' _ _ O
int _ _ O
' _ _ O
| _ _ O
' _ _ O
string _ _ O
' _ _ O
| _ _ O
FuncType _ _ O
| _ _ O
StructType _ _ O
| _ _ O
ArrayType _ _ O
' _ _ O
[ _ _ O
' _ _ O
Type _ _ O
' _ _ O
] _ _ O
' _ _ O
23 _ _ O

Semantic _ _ O
analysis _ _ O
: _ _ O
typing _ _ B-Concept
rules _ _ I-Concept
● _ _ O
arrays _ _ B-Concept
do _ _ O
n't _ _ O
interact _ _ O
with _ _ O
the _ _ O
naming _ _ O
rules _ _ O
at _ _ O
all _ _ O
, _ _ O
so _ _ O
let _ _ O
’s _ _ O
skip _ _ O
to _ _ O
types _ _ B-Concept
. _ _ O
new _ _ O
[ _ _ O
T _ _ O
; _ _ O
n _ _ O
] _ _ O
a _ _ O
[ _ _ O
i _ _ O
] _ _ O
a.length _ _ O
▪ _ _ O
n _ _ O
must _ _ O
be _ _ O
int _ _ O
▪ _ _ O
the _ _ O
type _ _ B-Concept
of _ _ O
the _ _ O
whole _ _ O
expression _ _ O
is _ _ O
[ _ _ O
T _ _ O
] _ _ O
▪ _ _ O
a _ _ O
must _ _ O
be _ _ O
[ _ _ O
T _ _ O
] _ _ O
▪ _ _ O
i _ _ O
must _ _ O
be _ _ O
int _ _ O
▪ _ _ O
the _ _ O
type _ _ B-Concept
of _ _ O
the _ _ O
whole _ _ O
expression _ _ O
is _ _ O
T _ _ O
▪ _ _ O
if _ _ O
a _ _ O
is _ _ O
[ _ _ O
T _ _ O
] _ _ O
: _ _ O
▪ _ _ O
the _ _ O
only _ _ O
allowed _ _ O
field _ _ B-Concept
is _ _ O
length _ _ B-Concept
▪ _ _ O
the _ _ O
type _ _ B-Concept
of _ _ O
the _ _ O
whole _ _ O
expression _ _ O
is _ _ O
int _ _ O
▪ _ _ O
and _ _ O
this _ _ O
can _ _ O
not _ _ O
be _ _ O
the _ _ O
lhs _ _ O
of _ _ O
= _ _ O
24 _ _ O

More _ _ O
semantics _ _ B-Concept
: _ _ O
evaluation _ _ B-Concept
rules _ _ I-Concept
● _ _ O
these _ _ O
explain _ _ O
what _ _ O
the _ _ O
code _ _ O
does _ _ O
, _ _ O
which _ _ O
can _ _ O
also _ _ O
require _ _ O
runtime _ _ B-Concept
error _ _ I-Concept
checking _ _ I-Concept
. _ _ O
new _ _ O
[ _ _ O
T _ _ O
; _ _ O
n _ _ O
] _ _ O
a _ _ O
[ _ _ O
i _ _ O
] _ _ O
a.length _ _ O
▪ _ _ O
dynamically _ _ B-Concept
allocates _ _ I-Concept
an _ _ O
array _ _ B-Concept
on _ _ O
the _ _ O
heap _ _ B-Concept
. _ _ O
▪ _ _ O
n _ _ O
must _ _ O
be _ _ O
> _ _ O
= _ _ O
0 _ _ O
. _ _ O
▪ _ _ O
if _ _ O
not _ _ O
, _ _ O
the _ _ O
program _ _ O
halts _ _ O
with _ _ O
an _ _ O
error _ _ O
. _ _ O
▪ _ _ O
gets _ _ O
the _ _ O
ith _ _ O
item _ _ O
in _ _ O
a _ _ O
, _ _ O
zero-based _ _ O
. _ _ O
▪ _ _ O
a _ _ O
is _ _ O
evaluated _ _ O
before _ _ O
i. _ _ O
▪ _ _ O
i _ _ O
must _ _ O
be _ _ O
> _ _ O
= _ _ O
0 _ _ O
and _ _ O
< _ _ O
a.length _ _ B-Concept
. _ _ O
▪ _ _ O
if _ _ O
not _ _ O
, _ _ O
the _ _ O
program _ _ O
halts _ _ O
with _ _ O
an _ _ O
error _ _ O
. _ _ O
▪ _ _ O
gets _ _ O
the _ _ O
length _ _ B-Concept
of _ _ O
a. _ _ O
25 _ _ O

Runtime _ _ O
representation _ _ O
: _ _ O
data _ _ B-Concept
● _ _ O
as _ _ O
you _ _ O
hopefully _ _ O
learned _ _ O
in _ _ O
447 _ _ O
, _ _ O
an _ _ O
array _ _ O
is _ _ O
represented _ _ O
in _ _ O
memory _ _ O
by _ _ O
placing _ _ O
its _ _ O
items _ _ O
next _ _ O
to _ _ O
each _ _ O
other _ _ O
, _ _ O
equidistantly _ _ O
spaced _ _ O
. _ _ O
● _ _ O
consider _ _ O
an _ _ O
array _ _ O
of _ _ O
3 _ _ O
ints _ _ O
which _ _ O
are _ _ O
32 _ _ O
bits _ _ O
( _ _ O
4 _ _ O
Bytes _ _ O
) _ _ O
each _ _ O
: _ _ O
A _ _ O
[ _ _ O
0 _ _ O
] _ _ O
byte _ _ O
offset _ _ O
: _ _ O
0 _ _ O
A _ _ O
[ _ _ O
1 _ _ O
] _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
A _ _ O
[ _ _ O
2 _ _ O
] _ _ O
5 _ _ O
6 _ _ O
7 _ _ O
8 _ _ O
9 _ _ O
10 _ _ O
11 _ _ O
given _ _ O
a _ _ O
pointer _ _ O
A _ _ O
that _ _ O
points _ _ O
to _ _ O
the _ _ O
beginning _ _ O
of _ _ O
the _ _ O
array _ _ B-Concept
, _ _ O
we _ _ O
can _ _ O
get _ _ O
the _ _ O
ith _ _ O
item _ _ O
with _ _ O
the _ _ O
formula _ _ O
A _ _ O
+ _ _ O
S·i _ _ O
, _ _ O
where _ _ O
S _ _ O
is _ _ O
the _ _ O
size _ _ O
of _ _ O
one _ _ O
item _ _ O
. _ _ O
here _ _ O
, _ _ O
S _ _ O
= _ _ O
4 _ _ O
, _ _ O
so _ _ O
A _ _ O
+ _ _ O
4·i _ _ O
gives _ _ O
us _ _ O
the _ _ O
byte _ _ O
offset _ _ O
of _ _ O
item _ _ O
i. _ _ O
26 _ _ O

Runtime _ _ O
representation _ _ O
: _ _ O
length _ _ B-Concept
● _ _ O
each _ _ O
array _ _ B-Concept
also _ _ O
has _ _ O
to _ _ O
remember _ _ O
its _ _ O
length _ _ B-Concept
, _ _ O
because _ _ O
there _ _ O
's _ _ O
nothing _ _ O
to _ _ O
tell _ _ O
you _ _ O
where _ _ O
" _ _ O
the _ _ O
end _ _ O
of _ _ O
the _ _ O
array _ _ O
" _ _ O
is _ _ O
. _ _ O
let _ _ O
a _ _ O
= _ _ O
new _ _ O
[ _ _ O
int _ _ O
; _ _ O
3 _ _ O
] _ _ O
; _ _ O
3 _ _ O
the _ _ O
length _ _ B-Concept
comes _ _ O
first _ _ O
and _ _ O
takes _ _ O
up _ _ O
4 _ _ O
bytes _ _ O
. _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
so _ _ O
now _ _ O
our _ _ O
item _ _ O
access _ _ O
formula _ _ O
must _ _ O
be _ _ O
offset _ _ O
by _ _ O
4 _ _ O
to _ _ O
skip _ _ O
the _ _ O
length _ _ B-Concept
: _ _ O
A _ _ O
+ _ _ O
S·i _ _ O
+ _ _ O
4 _ _ O
( _ _ O
different _ _ O
types _ _ O
use _ _ O
different _ _ O
values _ _ O
of _ _ O
S _ _ O
, _ _ O
so _ _ O
we _ _ O
ca _ _ O
n't _ _ O
do _ _ O
A _ _ O
+ _ _ O
S _ _ O
( _ _ O
i _ _ O
+ _ _ O
1 _ _ O
) _ _ O
in _ _ O
general _ _ O
. _ _ O
) _ _ O
now _ _ O
we _ _ O
have _ _ O
all _ _ O
we _ _ O
need _ _ O
to _ _ O
be _ _ O
able _ _ O
to _ _ O
implement _ _ O
a _ _ O
[ _ _ O
i _ _ O
] _ _ O
and _ _ O
a.length _ _ B-Concept
! _ _ O
but _ _ O
what _ _ O
about _ _ O
new _ _ O
[ _ _ O
int _ _ O
; _ _ O
3 _ _ O
] _ _ O
? _ _ O
27 _ _ O

Runtime _ _ O
library _ _ O
: _ _ O
allocating _ _ B-Concept
arrays _ _ I-Concept
● _ _ O
dynamic _ _ B-Concept
memory _ _ I-Concept
allocation _ _ I-Concept
is _ _ O
something _ _ O
the _ _ O
runtime _ _ B-Concept
library _ _ I-Concept
is _ _ O
responsible _ _ O
for _ _ O
. _ _ O
so _ _ O
, _ _ O
we _ _ O
'll _ _ O
need _ _ O
a _ _ O
function _ _ O
to _ _ O
allocate _ _ B-Concept
arrays _ _ I-Concept
. _ _ O
● _ _ O
fn _ _ O
rt$new_array _ _ O
( _ _ O
item_size _ _ O
: _ _ O
int _ _ O
, _ _ O
len _ _ O
: _ _ O
int _ _ O
) _ _ O
o _ _ O
this _ _ O
will _ _ O
allocate _ _ O
an _ _ O
array _ _ O
of _ _ O
len _ _ O
items _ _ O
, _ _ O
where _ _ O
each _ _ O
item _ _ O
is _ _ O
item_size _ _ O
bytes _ _ O
; _ _ O
zero _ _ O
out _ _ O
the _ _ O
data _ _ O
; _ _ O
set _ _ O
its _ _ O
length _ _ B-Concept
field _ _ O
to _ _ O
len _ _ O
; _ _ O
and _ _ O
return _ _ O
a _ _ O
pointer _ _ O
to _ _ O
it _ _ O
. _ _ O
o _ _ O
it _ _ O
will _ _ O
also _ _ O
crash _ _ O
the _ _ O
program _ _ O
if _ _ O
len _ _ O
is _ _ O
negative _ _ O
, _ _ O
as _ _ O
per _ _ O
the _ _ O
evaluation _ _ O
semantics _ _ O
. _ _ O
● _ _ O
the _ _ O
code _ _ B-Concept
generation _ _ I-Concept
will _ _ O
turn _ _ O
array _ _ B-Concept
allocations _ _ I-Concept
into _ _ O
calls _ _ O
to _ _ O
this _ _ O
function _ _ O
, _ _ O
using _ _ O
a _ _ O
constant _ _ O
for _ _ O
item_size _ _ O
based _ _ O
on _ _ O
the _ _ O
type _ _ O
. _ _ O
o _ _ O
e.g. _ _ O
for _ _ O
an _ _ O
array _ _ O
of _ _ O
bool _ _ O
, _ _ O
item_size _ _ O
is _ _ O
1 _ _ O
; _ _ O
for _ _ O
int _ _ O
it _ _ O
's _ _ O
4 _ _ O
; _ _ O
etc _ _ O
. _ _ O
28 _ _ O

Codegen _ _ O
● _ _ O
finally _ _ O
, _ _ O
code _ _ B-Concept
generation _ _ I-Concept
is _ _ O
fairly _ _ O
straightforward _ _ O
. _ _ O
new _ _ O
[ _ _ O
T _ _ O
; _ _ O
n _ _ O
] _ _ O
a.length _ _ O
a _ _ O
[ _ _ O
i _ _ O
] _ _ O
generated _ _ O
as _ _ O
a _ _ O
call _ _ O
to _ _ O
rt$new_array _ _ O
( _ _ O
S _ _ O
, _ _ O
n _ _ O
) _ _ O
load _ _ O
an _ _ O
int _ _ O
from _ _ O
the _ _ O
memory _ _ O
a _ _ O
points _ _ O
to _ _ O
first _ _ O
, _ _ O
crash _ _ O
if _ _ O
i _ _ O
is _ _ O
negative _ _ O
or _ _ O
> _ _ O
= _ _ O
a.length _ _ O
. _ _ O
if _ _ O
not _ _ O
, _ _ O
calculate _ _ O
address _ _ O
as _ _ O
a _ _ O
+ _ _ O
Si _ _ O
+ _ _ O
4 _ _ O
; _ _ O
then _ _ O
load _ _ O
/ _ _ O
store _ _ O
and _ _ O
we _ _ O
're _ _ O
done _ _ O
! _ _ O
yay _ _ O
, _ _ O
our _ _ O
language _ _ O
has _ _ O
arrays _ _ B-Concept
now _ _ O
! _ _ O
29 _ _ O

Or _ _ O
does _ _ O
it _ _ O
? _ _ O
● _ _ O
this _ _ O
is _ _ O
just _ _ O
the _ _ O
minimum _ _ O
viable _ _ O
version _ _ O
of _ _ O
this _ _ O
feature _ _ O
. _ _ O
● _ _ O
what _ _ O
about _ _ O
things _ _ O
like _ _ O
: _ _ O
o _ _ O
array _ _ B-Concept
initializers _ _ O
/ _ _ O
literals _ _ O
, _ _ O
for _ _ O
allocating _ _ O
and _ _ O
filling _ _ O
in _ _ O
arrays _ _ B-Concept
at _ _ O
the _ _ O
same _ _ O
time _ _ O
like _ _ O
in _ _ O
Java _ _ O
: _ _ O
int _ _ O
[ _ _ O
] _ _ O
a _ _ O
= _ _ O
new _ _ O
int _ _ O
[ _ _ O
] _ _ O
{ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
} _ _ O
; _ _ O
o _ _ O
better _ _ O
multi-dimensional _ _ O
array _ _ O
initialization _ _ O
, _ _ O
again _ _ O
like _ _ O
Java _ _ O
: _ _ O
int _ _ O
[ _ _ O
] _ _ O
[ _ _ O
] _ _ O
a _ _ O
= _ _ O
new _ _ O
int _ _ O
[ _ _ O
10 _ _ O
] _ _ O
[ _ _ O
20 _ _ O
] _ _ O
; _ _ O
▪ _ _ O
remember _ _ O
, _ _ O
this _ _ O
is _ _ O
an _ _ O
array _ _ B-Concept
of _ _ O
arrays _ _ B-Concept
: _ _ O
each _ _ O
item _ _ O
in _ _ O
the _ _ O
outer _ _ O
array _ _ B-Concept
( _ _ O
the _ _ O
10 _ _ O
dimension _ _ O
) _ _ O
is _ _ O
a _ _ O
reference _ _ O
to _ _ O
an _ _ O
array _ _ O
of _ _ O
20 _ _ O
ints _ _ O
o _ _ O
standard _ _ B-Concept
library _ _ I-Concept
functions _ _ O
for _ _ O
sorting _ _ O
, _ _ O
searching _ _ O
, _ _ O
filling _ _ O
, _ _ O
modifying _ _ O
arrays _ _ B-Concept
? _ _ O
● _ _ O
such _ _ O
a _ _ O
simple-seeming _ _ O
feature _ _ O
, _ _ O
and _ _ O
yet _ _ O
so _ _ O
many _ _ O
things _ _ O
to _ _ O
consider _ _ O
… _ _ O
o _ _ O
but _ _ O
think _ _ O
about _ _ O
how _ _ O
each _ _ O
of _ _ O
these _ _ O
might _ _ O
be _ _ O
implemented _ _ O
on _ _ O
top _ _ O
of _ _ O
the _ _ O
basic _ _ O
features _ _ O
we _ _ O
talked _ _ O
about _ _ O
here _ _ O
. _ _ O
30 _ _ O



