self_training_1|cs0447|lec03
-DOCSTART- -X- -X- O

# _ _ O
3 _ _ O
Programs _ _ O
, _ _ O
Instructions _ _ O
, _ _ O
and _ _ O
Registers _ _ O
Original _ _ O
slides _ _ O
by _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
Modified _ _ O
with _ _ O
bits _ _ O
from _ _ O
: _ _ O
Bruce _ _ O
Childers _ _ O
, _ _ O
David _ _ O
Wilkinson _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Luís _ _ O
Oliveira _ _ O
Fall _ _ O
2020 _ _ O

What _ _ O
do _ _ O
I _ _ O
need _ _ O
to _ _ O
know _ _ O
now _ _ O
! _ _ O
The _ _ O
classes _ _ O
will _ _ O
be _ _ O
recorded _ _ O
! _ _ O
● _ _ O
You _ _ O
will _ _ O
be _ _ O
able _ _ O
to _ _ O
access _ _ O
the _ _ O
videos _ _ O
online _ _ O
o _ _ O
They _ _ O
are _ _ O
for _ _ O
your _ _ O
personal _ _ O
use _ _ O
only _ _ O
! _ _ O
o _ _ O
Do _ _ O
not _ _ O
distribute _ _ O
them _ _ O
! _ _ O
● _ _ O
You _ _ O
do _ _ O
n’t _ _ O
need _ _ O
to _ _ O
turn _ _ O
on _ _ O
your _ _ O
camera _ _ O
o _ _ O
If _ _ O
you _ _ O
do _ _ O
, _ _ O
you _ _ O
may _ _ O
be _ _ O
recorded _ _ O
● _ _ O
You _ _ O
can _ _ O
ask _ _ O
questions _ _ O
via _ _ O
text _ _ O
! _ _ O
o _ _ O
Chat _ _ O
is _ _ O
great _ _ O
for _ _ O
that _ _ O
. _ _ O
If _ _ O
I _ _ O
do _ _ O
n’t _ _ O
stop _ _ O
and _ _ O
read _ _ O
your _ _ O
questions _ _ O
, _ _ O
ask _ _ O
them _ _ O
again _ _ O
o _ _ O
But _ _ O
feel _ _ O
free _ _ O
to _ _ O
interrupt _ _ O
me _ _ O
at _ _ O
any _ _ O
point _ _ O
. _ _ O
2 _ _ O

Class _ _ O
announcements _ _ O
● _ _ O
Do _ _ O
n’t _ _ O
forget _ _ O
! _ _ O
o _ _ O
Use _ _ O
the _ _ O
MARS _ _ O
I _ _ O
have _ _ O
on _ _ O
the _ _ O
course _ _ O
website _ _ O
: _ _ O
● _ _ O
It _ _ O
has _ _ O
been _ _ O
modified _ _ O
! _ _ O
! _ _ O
3 _ _ O

Programs _ _ O
and _ _ O
Instructions _ _ O
4 _ _ O

What _ _ O
are _ _ O
they _ _ O
? _ _ O
● _ _ O
An _ _ O
instruction _ _ O
is _ _ O
a _ _ O
single _ _ O
, _ _ O
simple _ _ O
operation _ _ O
for _ _ O
the _ _ O
computer _ _ O
to _ _ O
carry _ _ O
out _ _ O
, _ _ O
such _ _ O
as _ _ O
: _ _ O
o _ _ O
" _ _ O
add _ _ O
two _ _ O
numbers _ _ O
together _ _ O
" _ _ O
o _ _ O
“ _ _ O
copy _ _ O
a _ _ O
number _ _ O
from _ _ O
one _ _ O
location _ _ O
to _ _ O
another _ _ O
" _ _ O
o _ _ O
" _ _ O
go _ _ O
to _ _ O
a _ _ O
different _ _ O
place _ _ O
in _ _ O
the _ _ O
program _ _ O
" _ _ O
o _ _ O
" _ _ O
search _ _ O
a _ _ O
string _ _ O
for _ _ O
a _ _ O
character _ _ O
“ _ _ O
● _ _ O
A _ _ O
program _ _ O
is _ _ O
a _ _ O
series _ _ O
of _ _ O
these _ _ O
tiny _ _ O
instructions _ _ O
o _ _ O
How _ _ O
do _ _ O
we _ _ O
create _ _ O
these _ _ O
instructions _ _ O
? _ _ O
o _ _ O
And _ _ O
how _ _ O
does _ _ O
the _ _ O
computer _ _ O
" _ _ O
understand _ _ O
" _ _ O
them _ _ O
? _ _ O
▪ _ _ O
does _ _ O
the _ _ O
computer _ _ O
understand _ _ O
anything _ _ O
? _ _ O
5 _ _ O

Machine _ _ O
language _ _ O
and _ _ O
Assembly _ _ O
language _ _ O
● _ _ O
Machine _ _ O
language _ _ O
instructions _ _ O
are _ _ O
the _ _ O
patterns _ _ O
of _ _ O
bits _ _ O
that _ _ O
a _ _ O
processor _ _ O
reads _ _ O
to _ _ O
know _ _ O
what _ _ O
to _ _ O
do _ _ O
● _ _ O
Assembly _ _ O
language _ _ O
( _ _ O
or _ _ O
" _ _ O
asm _ _ O
" _ _ O
) _ _ O
is _ _ O
a _ _ O
human-readable _ _ O
, _ _ O
textual _ _ O
representation _ _ O
of _ _ O
machine _ _ O
language _ _ O
MIPS _ _ O
asm _ _ O
MIPS _ _ O
machine _ _ O
language _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
1200 _ _ O
( _ _ O
t1 _ _ O
) _ _ O
100011 _ _ O
01001 _ _ O
01000 _ _ O
0000010010110000 _ _ O
lw _ _ O
t1 _ _ O
t0 _ _ O
1200 _ _ O
add _ _ O
t2 _ _ O
, _ _ O
s2 _ _ O
, _ _ O
t0 _ _ O
000000 _ _ O
10010 _ _ O
01000 _ _ O
01010 _ _ O
00000 _ _ O
100000 _ _ O
< _ _ O
math _ _ O
> _ _ O
s2 _ _ O
t0 _ _ O
t2 _ _ O
n _ _ O
/ _ _ O
a _ _ O
add _ _ O
sw _ _ O
t2 _ _ O
, _ _ O
1200 _ _ O
( _ _ O
t1 _ _ O
) _ _ O
101011 _ _ O
01001 _ _ O
01010 _ _ O
0000010010110000 _ _ O
sw _ _ O
t1 _ _ O
t2 _ _ O
1200 _ _ O
6 _ _ O

What _ _ O
can _ _ O
a _ _ O
CPU _ _ O
do _ _ O
? _ _ O
Maths _ _ O
Load _ _ O
/ _ _ O
Store _ _ O
things _ _ O
from _ _ O
/ _ _ O
to _ _ O
memory _ _ O
Go _ _ O
execute _ _ O
somewhere _ _ O
else _ _ O
Example _ _ O
: _ _ O
Count _ _ O
up _ _ O
to _ _ O
10 _ _ O
1 _ _ O
. _ _ O
Load _ _ O
variable _ _ O
from _ _ O
memory _ _ O
( _ _ O
memory _ _ O
) _ _ O
2 _ _ O
. _ _ O
If _ _ O
value _ _ O
equals _ _ O
10 _ _ O
stop _ _ O
( _ _ O
cond _ _ O
. _ _ O
Go _ _ O
execute _ _ O
) _ _ O
3 _ _ O
. _ _ O
Add _ _ O
1 _ _ O
to _ _ O
variable _ _ O
value _ _ O
( _ _ O
maths _ _ O
) _ _ O
4 _ _ O
. _ _ O
Place _ _ O
new _ _ O
value _ _ O
in _ _ O
the _ _ O
variable _ _ O
( _ _ O
memory _ _ O
) _ _ O
5 _ _ O
. _ _ O
Go _ _ O
back _ _ O
to _ _ O
the _ _ O
top _ _ O
( _ _ O
incond _ _ O
. _ _ O
Go _ _ O
execute _ _ O
) _ _ O
6 _ _ O
. _ _ O
stop _ _ O
7 _ _ O

IS _ _ O
THAT _ _ O
ENOUGH _ _ O
? _ _ O
8 _ _ O

CPUs _ _ O
are _ _ O
WAY _ _ O
more _ _ O
complex _ _ O
Remember _ _ O
the _ _ O
Turing _ _ O
machine _ _ O
? _ _ O
● _ _ O
Has _ _ O
infinite _ _ O
memory _ _ O
represented _ _ O
by _ _ O
a _ _ O
single _ _ O
tape _ _ O
. _ _ O
o _ _ O
A _ _ O
head _ _ O
moves _ _ O
along _ _ O
the _ _ O
tape _ _ O
and _ _ O
can _ _ O
read _ _ O
and _ _ O
write _ _ O
values _ _ O
. _ _ O
▪ _ _ O
The _ _ O
movement _ _ O
( _ _ O
left _ _ O
or _ _ O
right _ _ O
) _ _ O
is _ _ O
based _ _ O
upon _ _ O
the _ _ O
value _ _ O
read _ _ O
and _ _ O
the _ _ O
state _ _ O
of _ _ O
the _ _ O
machine _ _ O
. _ _ O
● _ _ O
The _ _ O
machine _ _ O
: _ _ O
1 _ _ O
. _ _ O
Reads _ _ O
/ _ _ O
writes _ _ O
the _ _ O
memory _ _ O
( _ _ O
tape _ _ O
) _ _ O
2 _ _ O
. _ _ O
Compares _ _ O
that _ _ O
data _ _ O
and _ _ O
decides _ _ O
where _ _ O
to _ _ O
move _ _ O
( _ _ O
execute _ _ O
) _ _ O
next _ _ O
● _ _ O
Everything _ _ O
that _ _ O
can _ _ O
be _ _ O
computed _ _ O
, _ _ O
is _ _ O
computed _ _ O
by _ _ O
a _ _ O
Turing _ _ O
machine _ _ O
Rulebook _ _ O
1 _ _ O
➔ _ _ O
Rulebook _ _ O
20 _ _ O
Read _ _ O
Write _ _ O
Move _ _ O
Next _ _ O
Read _ _ O
Write _ _ O
Move _ _ O
Next _ _ O
0 _ _ O
1 _ _ O
 _ _ O
20 _ _ O
0 _ _ O
0 _ _ O
→ _ _ O
15 _ _ O
1 _ _ O
0 _ _ O
→ _ _ O
12 _ _ O
1 _ _ O
1 _ _ O
→ _ _ O
15 _ _ O
9 _ _ O

How _ _ O
a _ _ O
CPU _ _ O
runs _ _ O
a _ _ O
program _ _ O
1 _ _ O
. _ _ O
read _ _ O
an _ _ O
instruction _ _ O
2 _ _ O
. _ _ O
do _ _ O
what _ _ O
it _ _ O
says _ _ O
3 _ _ O
. _ _ O
go _ _ O
to _ _ O
step _ _ O
1 _ _ O
o _ _ O
... _ _ O
okay _ _ O
there _ _ O
's _ _ O
a _ _ O
little _ _ O
more _ _ O
to _ _ O
it _ _ O
than _ _ O
that _ _ O
10 _ _ O

How _ _ O
a _ _ O
CPU _ _ O
runs _ _ O
a _ _ O
program _ _ O
Program _ _ O
3 _ _ O
5 _ _ O
8 _ _ O
instruction _ _ O
Control _ _ O
" _ _ O
C _ _ O
= _ _ O
A _ _ O
+ _ _ O
B _ _ O
" _ _ O
A _ _ O
B _ _ O
C _ _ O
Registers _ _ O
+ _ _ O
Datapath _ _ O
Program _ _ O
Persistent _ _ O
Storage _ _ O
Memory _ _ O
… _ _ O
and _ _ O
repeat _ _ O
! _ _ O
Processor _ _ O
11 _ _ O

ISAs _ _ O
12 _ _ O

Instruction _ _ O
Set _ _ O
Architecture _ _ O
( _ _ O
ISA _ _ O
) _ _ O
● _ _ O
An _ _ O
ISA _ _ O
is _ _ O
the _ _ O
interface _ _ O
that _ _ O
a _ _ O
CPU _ _ O
presents _ _ O
to _ _ O
the _ _ O
programmer _ _ O
o _ _ O
When _ _ O
we _ _ O
say _ _ O
“ _ _ O
architecture _ _ O
” _ _ O
, _ _ O
this _ _ O
is _ _ O
what _ _ O
we _ _ O
mean _ _ O
● _ _ O
ISAs _ _ O
define _ _ O
: _ _ O
o _ _ O
WHAT _ _ O
the _ _ O
CPU _ _ O
can _ _ O
do _ _ O
( _ _ O
add _ _ O
, _ _ O
subtract _ _ O
, _ _ O
call _ _ O
functions _ _ O
, _ _ O
etc _ _ O
. _ _ O
) _ _ O
o _ _ O
WHAT _ _ O
registers _ _ O
it _ _ O
has _ _ O
( _ _ O
we _ _ O
'll _ _ O
get _ _ O
to _ _ O
those _ _ O
) _ _ O
o _ _ O
WHAT _ _ O
the _ _ O
machine _ _ O
language _ _ O
is _ _ O
▪ _ _ O
Machine _ _ O
language _ _ O
: _ _ O
the _ _ O
bit _ _ O
patterns _ _ O
used _ _ O
to _ _ O
encode _ _ O
instructions _ _ O
● _ _ O
ISAs _ _ O
do _ _ O
not _ _ O
define _ _ O
: _ _ O
o _ _ O
HOW _ _ O
the _ _ O
CPU _ _ O
does _ _ O
it _ _ O
o _ _ O
HOW _ _ O
to _ _ O
design _ _ O
the _ _ O
hardware _ _ O
! _ _ O
▪ _ _ O
… _ _ O
if _ _ O
there _ _ O
's _ _ O
any _ _ O
hardware _ _ O
at _ _ O
all _ _ O
– _ _ O
Java _ _ O
WHY _ _ O
? _ _ O
O.o _ _ O
13 _ _ O

ISAs _ _ O
example _ _ O
: _ _ O
x86 _ _ O
● _ _ O
Descended _ _ O
from _ _ O
16-bit _ _ O
8086 _ _ O
CPU _ _ O
from _ _ O
1978 _ _ O
o _ _ O
Implemented _ _ O
in _ _ O
a _ _ O
rush _ _ O
by _ _ O
intel _ _ O
● _ _ O
Extended _ _ O
to _ _ O
32 _ _ O
bits _ _ O
, _ _ O
then _ _ O
64 _ _ O
● _ _ O
Each _ _ O
version _ _ O
can _ _ O
run _ _ O
all _ _ O
programs _ _ O
from _ _ O
the _ _ O
previous _ _ O
version _ _ O
o _ _ O
you _ _ O
can _ _ O
run _ _ O
programs _ _ O
written _ _ O
in _ _ O
1978 _ _ O
on _ _ O
a _ _ O
brand _ _ O
new _ _ O
CPU _ _ O
! _ _ O
● _ _ O
So _ _ O
why _ _ O
do _ _ O
n't _ _ O
we _ _ O
learn _ _ O
x86 _ _ O
in _ _ O
this _ _ O
course _ _ O
? _ _ O
o _ _ O
It _ _ O
can _ _ O
do _ _ O
a _ _ O
lot _ _ O
of _ _ O
things _ _ O
o _ _ O
Its _ _ O
machine _ _ O
language _ _ O
is _ _ O
very _ _ O
complex _ _ O
o _ _ O
Making _ _ O
an _ _ O
x86 _ _ O
CPU _ _ O
is _ _ O
… _ _ O
difficult _ _ O
o _ _ O
Ultimately _ _ O
, _ _ O
we _ _ O
would _ _ O
waste _ _ O
a _ _ O
ton _ _ O
of _ _ O
time _ _ O
14 _ _ O

All _ _ O
three _ _ O
processors _ _ O
run _ _ O
the _ _ O
exact _ _ O
same _ _ O
programs _ _ O
… _ _ O
● _ _ O
but _ _ O
they _ _ O
're _ _ O
TOTALLY _ _ O
different _ _ O
on _ _ O
the _ _ O
inside _ _ O
I _ _ O
’m _ _ O
an _ _ O
x86 _ _ O
CPU _ _ O
! _ _ O
Intel _ _ O
Core _ _ O
i7 _ _ O
VIA _ _ O
Nano _ _ O
I _ _ O
’m _ _ O
an _ _ O
x86 _ _ O
CPU _ _ O
! _ _ O
AMD _ _ O
Zen _ _ O
I _ _ O
’m _ _ O
an _ _ O
x86 _ _ O
CPU _ _ O
! _ _ O
15 _ _ O

Kinds _ _ O
of _ _ O
ISAs _ _ O
: _ _ O
CISC _ _ O
● _ _ O
CISC _ _ O
: _ _ O
" _ _ O
Complex _ _ O
Instruction _ _ O
Set _ _ O
Computer _ _ O
" _ _ O
● _ _ O
ISA _ _ O
designed _ _ O
for _ _ O
humans _ _ O
to _ _ O
write _ _ O
asm _ _ O
o _ _ O
from _ _ O
the _ _ O
days _ _ O
before _ _ O
compilers _ _ O
! _ _ O
● _ _ O
lots _ _ O
of _ _ O
instructions _ _ O
and _ _ O
ways _ _ O
to _ _ O
use _ _ O
them _ _ O
● _ _ O
complex _ _ O
( _ _ O
multi-step _ _ O
) _ _ O
instructions _ _ O
to _ _ O
shorten _ _ O
and _ _ O
simplify _ _ O
programs _ _ O
o _ _ O
" _ _ O
search _ _ O
a _ _ O
string _ _ O
for _ _ O
a _ _ O
character _ _ O
" _ _ O
o _ _ O
" _ _ O
copy _ _ O
memory _ _ O
blocks _ _ O
" _ _ O
o _ _ O
" _ _ O
check _ _ O
the _ _ O
bounds _ _ O
of _ _ O
an _ _ O
array _ _ O
access _ _ O
" _ _ O
● _ _ O
x86 _ _ O
is _ _ O
very _ _ O
CISCy _ _ O
prguitarman.com _ _ O
16 _ _ O

Kinds _ _ O
of _ _ O
ISAs _ _ O
: _ _ O
RISC _ _ O
● _ _ O
RISC _ _ O
: _ _ O
" _ _ O
Reduced _ _ O
Instruction _ _ O
Set _ _ O
Computer _ _ O
" _ _ O
● _ _ O
ISA _ _ O
designed _ _ O
to _ _ O
make _ _ O
it _ _ O
easy _ _ O
to _ _ O
: _ _ O
o _ _ O
build _ _ O
the _ _ O
CPU _ _ O
hardware _ _ O
o _ _ O
make _ _ O
that _ _ O
hardware _ _ O
run _ _ O
fast _ _ O
o _ _ O
write _ _ O
compilers _ _ O
that _ _ O
make _ _ O
machine _ _ O
code _ _ O
● _ _ O
a _ _ O
small _ _ O
number _ _ O
of _ _ O
instructions _ _ O
● _ _ O
instructions _ _ O
are _ _ O
very _ _ O
simple _ _ O
● _ _ O
MIPS _ _ O
is _ _ O
very _ _ O
RISCy _ _ O
● _ _ O
MIPS _ _ O
and _ _ O
RISC _ _ O
were _ _ O
the _ _ O
original _ _ O
RISC _ _ O
architectures _ _ O
developed _ _ O
at _ _ O
two _ _ O
universities _ _ O
in _ _ O
California _ _ O
o _ _ O
the _ _ O
research _ _ O
leads _ _ O
were _ _ O
… _ _ O
Patterson _ _ O
and _ _ O
Hennessy _ _ O
… _ _ O
17 _ _ O

Popular _ _ O
ISAs _ _ O
today _ _ O
● _ _ O
x86 _ _ O
( _ _ O
these _ _ O
days _ _ O
, _ _ O
it _ _ O
’s _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
or _ _ O
“ _ _ O
amd64 _ _ O
” _ _ O
) _ _ O
o _ _ O
most _ _ O
laptops _ _ O
/ _ _ O
desktops _ _ O
/ _ _ O
servers _ _ O
have _ _ O
one _ _ O
o _ _ O
( _ _ O
modern _ _ O
x86 _ _ O
CPUs _ _ O
are _ _ O
just _ _ O
RISC _ _ O
CPUs _ _ O
that _ _ O
can _ _ O
read _ _ O
the _ _ O
weird _ _ O
x86 _ _ O
instructions _ _ O
) _ _ O
▪ _ _ O
( _ _ O
unless _ _ O
you _ _ O
ask _ _ O
Intel _ _ O
, _ _ O
they _ _ O
will _ _ O
say _ _ O
otherwise _ _ O
☺ _ _ O
) _ _ O
● _ _ O
ARM _ _ O
o _ _ O
almost _ _ O
everything _ _ O
else _ _ O
has _ _ O
one _ _ O
o _ _ O
ARMv8 _ _ O
( _ _ O
AArch64 _ _ O
) _ _ O
is _ _ O
pretty _ _ O
similar _ _ O
to _ _ O
MIPS _ _ O
! _ _ O
▪ _ _ O
More _ _ O
than _ _ O
to _ _ O
ARMv7 _ _ O
: _ _ O
“ _ _ O
the _ _ O
main _ _ O
similarity _ _ O
between _ _ O
ARMv7 _ _ O
and _ _ O
ARMv8 _ _ O
is _ _ O
the _ _ O
name _ _ O
” _ _ O
– _ _ O
Comp _ _ O
. _ _ O
Org _ _ O
. _ _ O
& _ _ O
Design _ _ O
page _ _ O
159 _ _ O
● _ _ O
Everything _ _ O
else _ _ O
: _ _ O
Alpha _ _ O
, _ _ O
Sparc _ _ O
, _ _ O
POWER _ _ O
/ _ _ O
PPC _ _ O
, _ _ O
z _ _ O
, _ _ O
z80 _ _ O
, _ _ O
29 _ _ O
K _ _ O
, _ _ O
68 _ _ O
K _ _ O
, _ _ O
8051 _ _ O
, _ _ O
PIC _ _ O
, _ _ O
AVR _ _ O
, _ _ O
Xtensa _ _ O
, _ _ O
SH2 _ _ O
/ _ _ O
3 _ _ O
/ _ _ O
4 _ _ O
, _ _ O
68C05 _ _ O
, _ _ O
6502 _ _ O
, _ _ O
SHARC _ _ O
, _ _ O
MIPS _ _ O
... _ _ O
o _ _ O
microcontrollers _ _ O
, _ _ O
mainframes _ _ O
, _ _ O
some _ _ O
video _ _ O
game _ _ O
consoles _ _ O
, _ _ O
and _ _ O
historical _ _ O
/ _ _ O
legacy _ _ O
applications _ _ O
● _ _ O
despite _ _ O
its _ _ O
limited _ _ O
use _ _ O
today _ _ O
, _ _ O
MIPS _ _ O
has _ _ O
been _ _ O
incredibly _ _ O
influential _ _ O
! _ _ O
18 _ _ O

The _ _ O
MIPS _ _ O
ISA _ _ O
: _ _ O
Registers _ _ O
19 _ _ O

The _ _ O
registers _ _ O
General _ _ O
Purpose _ _ O
# _ _ O
Name _ _ O
Erm _ _ O
… _ _ O
0 _ _ O
zero _ _ O
Avoid _ _ O
Totally _ _ O
1 _ _ O
at _ _ O
2 _ _ O
, _ _ O
3 _ _ O
v0 _ _ O
, _ _ O
v1 _ _ O
4..7 _ _ O
a0..a3 _ _ O
8..15 _ _ O
t0..t7 _ _ O
16..23 _ _ O
s0..s7 _ _ O
24 _ _ O
, _ _ O
25 _ _ O
t8 _ _ O
, _ _ O
t9 _ _ O
Do _ _ O
n’t _ _ O
need _ _ O
these _ _ O
26 _ _ O
, _ _ O
27 _ _ O
k0 _ _ O
, _ _ O
k1 _ _ O
28 _ _ O
gp _ _ O
HI _ _ O
For _ _ O
later _ _ O
;) _ _ O
29 _ _ O
sp _ _ O
LO _ _ O
Do _ _ O
n’t _ _ O
matter _ _ O
30 _ _ O
fp _ _ O
PC _ _ O
Also _ _ O
for _ _ O
later _ _ O
;) _ _ O
31 _ _ O
ra _ _ O
● _ _ O
Registers _ _ O
are _ _ O
a _ _ O
small _ _ O
and _ _ O
fast _ _ O
temporary _ _ O
memory _ _ O
inside _ _ O
the _ _ O
CPU _ _ O
● _ _ O
The _ _ O
CPU _ _ O
can _ _ O
only _ _ O
operate _ _ O
( _ _ O
add _ _ O
, _ _ O
etc _ _ O
. _ _ O
) _ _ O
on _ _ O
data _ _ O
in _ _ O
registers _ _ O
● _ _ O
MIPS _ _ O
has _ _ O
32 _ _ O
registers _ _ O
, _ _ O
and _ _ O
each _ _ O
is _ _ O
32 _ _ O
bits _ _ O
( _ _ O
one _ _ O
word _ _ O
) _ _ O
● _ _ O
The _ _ O
registers _ _ O
are _ _ O
numbered _ _ O
0 _ _ O
to _ _ O
31 _ _ O
… _ _ O
o _ _ O
… _ _ O
but _ _ O
they _ _ O
also _ _ O
have _ _ O
nice _ _ O
names _ _ O
▪ _ _ O
The _ _ O
MARS _ _ O
version _ _ O
on _ _ O
the _ _ O
course _ _ O
website _ _ O
is _ _ O
modified _ _ O
– _ _ O
so _ _ O
you _ _ O
do _ _ O
n't _ _ O
have _ _ O
to _ _ O
use _ _ O
them _ _ O
$ _ _ O
signs _ _ O
in _ _ O
the _ _ O
registers _ _ O
– _ _ O
$ _ _ O
s0 _ _ O
, _ _ O
$ _ _ O
t1 _ _ O
vs. _ _ O
s0 _ _ O
, _ _ O
t1 _ _ O
Used _ _ O
for _ _ O
multiplication _ _ O
( _ _ O
more _ _ O
on _ _ O
that _ _ O
later _ _ O
) _ _ O
Keeps _ _ O
track _ _ O
of _ _ O
the _ _ O
next _ _ O
instruction _ _ O
to _ _ O
be _ _ O
executed _ _ O
Special _ _ O
purpose _ _ O
Used _ _ O
for _ _ O
functions _ _ O
Used _ _ O
for _ _ O
almost _ _ O
everything _ _ O
else _ _ O
20 _ _ O

The _ _ O
juggler _ _ O
● _ _ O
Registers _ _ O
are _ _ O
… _ _ O
like _ _ O
… _ _ O
.. _ _ O
hands _ _ O
● _ _ O
You _ _ O
have _ _ O
a _ _ O
limited _ _ O
number _ _ O
and _ _ O
they _ _ O
can _ _ O
only _ _ O
hold _ _ O
small _ _ O
things _ _ O
● _ _ O
Your _ _ O
program _ _ O
's _ _ O
variables _ _ O
primarily _ _ O
live _ _ O
in _ _ O
memory _ _ O
● _ _ O
The _ _ O
registers _ _ O
are _ _ O
just _ _ O
a _ _ O
temporary _ _ O
stopping _ _ O
point _ _ O
for _ _ O
those _ _ O
values _ _ O
IMPORTANT _ _ O
! _ _ O
less _ _ O
important _ _ O
3 _ _ O
5 _ _ O
8 _ _ O
Registers _ _ O
A _ _ O
B _ _ O
C _ _ O
Memory _ _ O
21 _ _ O

Really _ _ O
, _ _ O
you _ _ O
do _ _ O
n't _ _ O
have _ _ O
that _ _ O
many _ _ O
● _ _ O
You _ _ O
can _ _ O
not _ _ O
write _ _ O
every _ _ O
program _ _ O
using _ _ O
only _ _ O
registers _ _ O
o _ _ O
Do _ _ O
n't _ _ O
try _ _ O
to _ _ O
▪ _ _ O
please _ _ O
. _ _ O
● _ _ O
Every _ _ O
piece _ _ O
of _ _ O
your _ _ O
program _ _ O
has _ _ O
to _ _ O
SHARE _ _ O
the _ _ O
registers _ _ O
. _ _ O
o _ _ O
Unlike _ _ O
high-level _ _ O
languages _ _ O
o _ _ O
Where _ _ O
everyone _ _ O
gets _ _ O
their _ _ O
own _ _ O
locals _ _ O
o _ _ O
Not _ _ O
in _ _ O
assembly _ _ O
! _ _ O
22 _ _ O

The _ _ O
s _ _ O
( _ _ O
saved _ _ O
) _ _ O
and _ _ O
the _ _ O
t _ _ O
( _ _ O
temporary _ _ O
) _ _ O
registers _ _ O
● _ _ O
There _ _ O
are _ _ O
ten _ _ O
temporary _ _ O
registers _ _ O
, _ _ O
t0 _ _ O
through _ _ O
t9 _ _ O
o _ _ O
These _ _ O
are _ _ O
used _ _ O
for _ _ O
temporary _ _ O
values _ _ O
– _ _ O
values _ _ O
that _ _ O
are _ _ O
used _ _ O
briefly _ _ O
Name _ _ O
t0..t9 _ _ O
● _ _ O
There _ _ O
are _ _ O
8 _ _ O
saved _ _ O
registers _ _ O
, _ _ O
s0 _ _ O
through _ _ O
s7 _ _ O
o _ _ O
These _ _ O
are _ _ O
kinda _ _ O
like _ _ O
… _ _ O
local _ _ O
variables _ _ O
inside _ _ O
a _ _ O
function _ _ O
Name _ _ O
s0..s7 _ _ O
23 _ _ O

When _ _ O
to _ _ O
use _ _ O
each _ _ O
● _ _ O
We _ _ O
'll _ _ O
learn _ _ O
more _ _ O
about _ _ O
this _ _ O
in _ _ O
the _ _ O
coming _ _ O
weeks _ _ O
● _ _ O
Rule _ _ O
of _ _ O
thumb _ _ O
: _ _ O
o _ _ O
Use _ _ O
t _ _ O
register _ _ O
o _ _ O
Unless _ _ O
you _ _ O
need _ _ O
the _ _ O
value _ _ O
to _ _ O
persist _ _ O
when _ _ O
calling _ _ O
functions _ _ O
▪ _ _ O
ok _ _ O
that _ _ O
's _ _ O
not _ _ O
too _ _ O
clear _ _ O
yet _ _ O
● _ _ O
90 _ _ O
% _ _ O
( _ _ O
made _ _ O
up _ _ O
percentage _ _ O
) _ _ O
of _ _ O
your _ _ O
code _ _ O
will _ _ O
use _ _ O
s _ _ O
and _ _ O
t _ _ O
registers _ _ O
24 _ _ O

The _ _ O
MIPS _ _ O
ISA _ _ O
: _ _ O
WHAT _ _ O
can _ _ O
it _ _ O
do _ _ O
? _ _ O
25 _ _ O

We _ _ O
have _ _ O
a _ _ O
semester _ _ O
to _ _ O
learn _ _ O
;) _ _ O
For _ _ O
now _ _ O
: _ _ O
li _ _ O
→ _ _ O
Loads _ _ O
a _ _ O
number _ _ O
( _ _ O
Immediate _ _ O
) _ _ O
add _ _ O
→ _ _ O
It _ _ O
adds _ _ O
2 _ _ O
numbers _ _ O
sub _ _ O
→ _ _ O
It _ _ O
subtracts _ _ O
2 _ _ O
numbers _ _ O
mul _ _ O
→ _ _ O
It _ _ O
multiplies _ _ O
2 _ _ O
numbers _ _ O
div _ _ O
→ _ _ O
It _ _ O
multiplies _ _ O
2 _ _ O
numbers _ _ O
move _ _ O
→ _ _ O
It _ _ O
… _ _ O
ermmm _ _ O
… _ _ O
COPIES _ _ O
a _ _ O
number _ _ O
26 _ _ O

Example _ _ O
: _ _ O
Loading _ _ O
immediates _ _ O
and _ _ O
adding _ _ O
them _ _ O
s0 _ _ O
= _ _ O
3 _ _ O
; _ _ O
li _ _ O
s0 _ _ O
, _ _ O
3 _ _ O
s1 _ _ O
= _ _ O
5 _ _ O
; _ _ O
li _ _ O
s1 _ _ O
, _ _ O
5 _ _ O
s2 _ _ O
= _ _ O
s0 _ _ O
+ _ _ O
s1 _ _ O
; _ _ O
add _ _ O
s2 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
s1 _ _ O
● _ _ O
li _ _ O
stands _ _ O
for _ _ O
" _ _ O
load _ _ O
immediate _ _ O
. _ _ O
" _ _ O
what _ _ O
does _ _ O
it _ _ O
look _ _ O
like _ _ O
it _ _ O
does _ _ O
? _ _ O
o _ _ O
" _ _ O
immediate _ _ O
" _ _ O
means _ _ O
" _ _ O
number _ _ O
inside _ _ O
the _ _ O
instruction _ _ O
" _ _ O
● _ _ O
add _ _ O
, _ _ O
uh _ _ O
, _ _ O
makes _ _ O
coffee _ _ O
. _ _ O
¬_¬ _ _ O
● _ _ O
Just _ _ O
like _ _ O
in _ _ O
Java _ _ O
, _ _ O
C _ _ O
, _ _ O
whatever _ _ O
: _ _ O
the _ _ O
destination _ _ O
is _ _ O
on _ _ O
the _ _ O
left _ _ O
27 _ _ O

Example _ _ O
: _ _ O
Complex _ _ O
expression _ _ O
● _ _ O
We _ _ O
can _ _ O
re-use _ _ O
registers _ _ O
( _ _ O
t0 _ _ O
in _ _ O
the _ _ O
example _ _ O
) _ _ O
as _ _ O
a _ _ O
temporary _ _ O
o _ _ O
For _ _ O
example _ _ O
, _ _ O
say _ _ O
we _ _ O
had _ _ O
a _ _ O
longer _ _ O
expression _ _ O
: _ _ O
s4 _ _ O
= _ _ O
( _ _ O
s0 _ _ O
+ _ _ O
s1 _ _ O
– _ _ O
s2 _ _ O
) _ _ O
* _ _ O
s3 _ _ O
● _ _ O
What _ _ O
does _ _ O
algebra _ _ O
say _ _ O
about _ _ O
what _ _ O
order _ _ O
we _ _ O
should _ _ O
do _ _ O
this _ _ O
in _ _ O
? _ _ O
add _ _ O
t0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
s1 _ _ O
sub _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
s2 _ _ O
mul _ _ O
s4 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
s3 _ _ O
28 _ _ O

You _ _ O
will _ _ O
be _ _ O
thinking _ _ O
like _ _ O
a _ _ O
compiler _ _ O
● _ _ O
Writing _ _ O
ASM _ _ O
is _ _ O
a _ _ O
different _ _ O
way _ _ O
of _ _ O
programming _ _ O
than _ _ O
you _ _ O
're _ _ O
used _ _ O
to _ _ O
● _ _ O
To _ _ O
make _ _ O
the _ _ O
transition _ _ O
easier _ _ O
, _ _ O
try _ _ O
to _ _ O
reduce _ _ O
your _ _ O
cognitive _ _ O
load _ _ O
o _ _ O
cognitive _ _ O
load _ _ O
is _ _ O
" _ _ O
the _ _ O
set _ _ O
of _ _ O
ideas _ _ O
you _ _ O
have _ _ O
to _ _ O
keep _ _ O
in _ _ O
your _ _ O
mind _ _ O
to _ _ O
perform _ _ O
some _ _ O
task _ _ O
. _ _ O
" _ _ O
o _ _ O
high-level _ _ O
languages _ _ O
( _ _ O
HLLs _ _ O
) _ _ O
reduce _ _ O
cognitive _ _ O
load _ _ O
by _ _ O
hiding _ _ O
the _ _ O
machine _ _ O
code _ _ O
, _ _ O
using _ _ O
a _ _ O
compiler _ _ O
to _ _ O
write _ _ O
it _ _ O
for _ _ O
you _ _ O
● _ _ O
you _ _ O
can _ _ O
do _ _ O
the _ _ O
same _ _ O
thing _ _ O
: _ _ O
think _ _ O
about _ _ O
how _ _ O
to _ _ O
write _ _ O
a _ _ O
program _ _ O
in _ _ O
e.g. _ _ O
C _ _ O
, _ _ O
and _ _ O
then _ _ O
turn _ _ O
that _ _ O
into _ _ O
asm _ _ O
add _ _ O
c _ _ O
, _ _ O
a _ _ O
, _ _ O
b _ _ O
c=a+b _ _ O
add _ _ O
s2 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
s1 _ _ O
29 _ _ O

The _ _ O
other _ _ O
way _ _ O
around _ _ O
● _ _ O
going _ _ O
the _ _ O
other _ _ O
way _ _ O
is _ _ O
also _ _ O
useful _ _ O
mul _ _ O
t0 _ _ O
, _ _ O
s2 _ _ O
, _ _ O
33 _ _ O
div _ _ O
t1 _ _ O
, _ _ O
s3 _ _ O
, _ _ O
s4 _ _ O
sub _ _ O
s1 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
how _ _ O
would _ _ O
we _ _ O
write _ _ O
this _ _ O
in _ _ O
C _ _ O
/ _ _ O
Java _ _ O
? _ _ O
t0 _ _ O
= _ _ O
s2 _ _ O
* _ _ O
33 _ _ O
t1 _ _ O
= _ _ O
s3 _ _ O
/ _ _ O
s4 _ _ O
s1 _ _ O
= _ _ O
t0 _ _ O
– _ _ O
t1 _ _ O
or _ _ O
, _ _ O
if _ _ O
we _ _ O
rolled _ _ O
it _ _ O
all _ _ O
together _ _ O
, _ _ O
s1 _ _ O
= _ _ O
( _ _ O
s2 _ _ O
* _ _ O
33 _ _ O
) _ _ O
– _ _ O
( _ _ O
s3 _ _ O
/ _ _ O
s4 _ _ O
) _ _ O
that _ _ O
's _ _ O
what _ _ O
this _ _ O
asm _ _ O
does _ _ O
30 _ _ O

Why _ _ O
do _ _ O
you _ _ O
need _ _ O
to _ _ O
know _ _ O
this _ _ O
? _ _ O
● _ _ O
CS0447 _ _ O
is _ _ O
about _ _ O
building _ _ O
a _ _ O
mental _ _ O
model _ _ O
of _ _ O
how _ _ O
a _ _ O
computer _ _ O
works _ _ O
● _ _ O
Understanding _ _ O
what _ _ O
is _ _ O
happening _ _ O
when _ _ O
you _ _ O
write _ _ O
code _ _ O
or _ _ O
run _ _ O
programs _ _ O
gives _ _ O
you _ _ O
a _ _ O
much _ _ O
deeper _ _ O
understanding _ _ O
o _ _ O
" _ _ O
why _ _ O
should _ _ O
I _ _ O
avoid _ _ O
using _ _ O
this _ _ O
programming _ _ O
language _ _ O
feature _ _ O
in _ _ O
this _ _ O
speed-critical _ _ O
part _ _ O
of _ _ O
my _ _ O
code _ _ O
? _ _ O
" _ _ O
o _ _ O
" _ _ O
why _ _ O
would _ _ O
n't _ _ O
this _ _ O
crazy _ _ O
idea _ _ O
be _ _ O
very _ _ O
fast _ _ O
on _ _ O
current _ _ O
architectures _ _ O
? _ _ O
" _ _ O
o _ _ O
" _ _ O
this _ _ O
program _ _ O
is _ _ O
breaking _ _ O
in _ _ O
a _ _ O
really _ _ O
confusing _ _ O
way _ _ O
, _ _ O
I _ _ O
have _ _ O
to _ _ O
look _ _ O
at _ _ O
the _ _ O
asm _ _ O
to _ _ O
debug _ _ O
it _ _ O
" _ _ O
● _ _ O
This _ _ O
stuff _ _ O
is _ _ O
specialized _ _ O
but _ _ O
hey _ _ O
you _ _ O
're _ _ O
majoring _ _ O
/ _ _ O
minoring _ _ O
in _ _ O
it _ _ O
right _ _ O
31 _ _ O



