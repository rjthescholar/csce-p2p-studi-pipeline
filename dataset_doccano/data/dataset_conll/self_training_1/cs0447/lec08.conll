self_training_1|cs0447|lec08
-DOCSTART- -X- -X- O

# _ _ O
8 _ _ O
Bitwise _ _ O
Operations _ _ O
and _ _ O
Bitfields _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Luís _ _ O
Oliveira _ _ O
Original _ _ O
slides _ _ O
by _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
Modified _ _ O
with _ _ O
bits _ _ O
from _ _ O
: _ _ O
Bruce _ _ O
Childers _ _ O
, _ _ O
David _ _ O
Wilkinson _ _ O
Fall _ _ O
2020 _ _ O

Announcements _ _ O
2 _ _ O

Logical _ _ O
, _ _ O
right _ _ O
? _ _ O
class _ _ O
Main _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
boolean _ _ O
a _ _ O
= _ _ O
true _ _ O
; _ _ O
boolean _ _ O
b _ _ O
= _ _ O
true _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
a||b _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
class _ _ O
Main _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
int _ _ O
a _ _ O
= _ _ O
4 _ _ O
; _ _ O
int _ _ O
b _ _ O
= _ _ O
1 _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
a|b _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
● _ _ O
What _ _ O
is _ _ O
the _ _ O
output _ _ O
? _ _ O
true _ _ O
● _ _ O
What _ _ O
is _ _ O
the _ _ O
output _ _ O
? _ _ O
5 _ _ O
3 _ _ O

What _ _ O
are _ _ O
" _ _ O
bitwise _ _ O
" _ _ O
operations _ _ O
? _ _ O
● _ _ O
The _ _ O
" _ _ O
numbers _ _ O
" _ _ O
we _ _ O
use _ _ O
on _ _ O
computers _ _ O
are _ _ O
n't _ _ O
really _ _ O
numbers _ _ O
right _ _ O
? _ _ O
● _ _ O
It _ _ O
's _ _ O
often _ _ O
useful _ _ O
to _ _ O
treat _ _ O
them _ _ O
instead _ _ O
as _ _ O
a _ _ O
pattern _ _ O
of _ _ O
bits _ _ O
● _ _ O
Bitwise _ _ O
operations _ _ O
treat _ _ O
a _ _ O
value _ _ O
as _ _ O
a _ _ O
pattern _ _ O
of _ _ O
bits _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
4 _ _ O

The _ _ O
simplest _ _ O
operation _ _ O
: _ _ O
NOT _ _ O
( _ _ O
logical _ _ O
negation _ _ O
) _ _ O
● _ _ O
If _ _ O
the _ _ O
light _ _ O
is _ _ O
off _ _ O
, _ _ O
turn _ _ O
it _ _ O
on _ _ O
● _ _ O
If _ _ O
the _ _ O
light _ _ O
is _ _ O
on _ _ O
, _ _ O
turn _ _ O
it _ _ O
off _ _ O
A _ _ O
Q _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
● _ _ O
We _ _ O
can _ _ O
summarize _ _ O
this _ _ O
in _ _ O
a _ _ O
truth _ _ O
table _ _ O
ഥ _ _ O
● _ _ O
We _ _ O
write _ _ O
NOT _ _ O
as _ _ O
~A _ _ O
, _ _ O
or _ _ O
¬A _ _ O
, _ _ O
or _ _ O
A _ _ O
5 _ _ O

Applying _ _ O
NOT _ _ O
to _ _ O
a _ _ O
whole _ _ O
bunch _ _ O
of _ _ O
bits _ _ O
● _ _ O
if _ _ O
we _ _ O
use _ _ O
the _ _ O
not _ _ O
instruction _ _ O
( _ _ O
or _ _ O
~ _ _ O
in _ _ O
C _ _ O
/ _ _ O
Java _ _ O
) _ _ O
, _ _ O
this _ _ O
is _ _ O
what _ _ O
happens _ _ O
: _ _ O
~ _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
= _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
we _ _ O
did _ _ O
8 _ _ O
independent _ _ O
NOT _ _ O
operations _ _ O
that _ _ O
's _ _ O
it _ _ O
it _ _ O
's _ _ O
super _ _ O
simple _ _ O
only _ _ O
8 _ _ O
bits _ _ O
shown _ _ O
cause _ _ O
32 _ _ O
bits _ _ O
on _ _ O
a _ _ O
slide _ _ O
is _ _ O
too _ _ O
much _ _ O
6 _ _ O

Let _ _ O
's _ _ O
add _ _ O
some _ _ O
switches _ _ O
● _ _ O
There _ _ O
are _ _ O
two _ _ O
switches _ _ O
in _ _ O
a _ _ O
row _ _ O
connecting _ _ O
the _ _ O
light _ _ O
to _ _ O
the _ _ O
battery _ _ O
● _ _ O
How _ _ O
do _ _ O
we _ _ O
make _ _ O
it _ _ O
light _ _ O
up _ _ O
? _ _ O
7 _ _ O

AND _ _ O
( _ _ O
Logical _ _ O
product _ _ O
) _ _ O
● _ _ O
AND _ _ O
is _ _ O
a _ _ O
binary _ _ O
( _ _ O
two-operand _ _ O
) _ _ O
operation _ _ O
● _ _ O
it _ _ O
can _ _ O
be _ _ O
written _ _ O
a _ _ O
number _ _ O
of _ _ O
ways _ _ O
: _ _ O
o _ _ O
A _ _ O
& _ _ O
B _ _ O
A∧B _ _ O
A⋅B _ _ O
AB _ _ O
● _ _ O
if _ _ O
we _ _ O
use _ _ O
the _ _ O
and _ _ O
instruction _ _ O
( _ _ O
or _ _ O
& _ _ O
in _ _ O
C _ _ O
/ _ _ O
Java _ _ O
) _ _ O
: _ _ O
A _ _ O
B _ _ O
Q _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
& _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
= _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
we _ _ O
did _ _ O
8 _ _ O
independent _ _ O
AND _ _ O
operations _ _ O
8 _ _ O

" _ _ O
Switching _ _ O
" _ _ O
things _ _ O
up _ _ O
● _ _ O
NOW _ _ O
how _ _ O
can _ _ O
we _ _ O
make _ _ O
it _ _ O
light _ _ O
up _ _ O
? _ _ O
9 _ _ O

OR _ _ O
( _ _ O
Logical _ _ O
sum _ _ O
… _ _ O
? _ _ O
) _ _ O
● _ _ O
we _ _ O
might _ _ O
say _ _ O
" _ _ O
and/or _ _ O
" _ _ O
in _ _ O
English _ _ O
● _ _ O
it _ _ O
can _ _ O
be _ _ O
written _ _ O
a _ _ O
number _ _ O
of _ _ O
ways _ _ O
: _ _ O
o _ _ O
A|B _ _ O
A∨B _ _ O
A+B _ _ O
● _ _ O
if _ _ O
we _ _ O
use _ _ O
the _ _ O
or _ _ O
instruction _ _ O
( _ _ O
or _ _ O
| _ _ O
in _ _ O
C _ _ O
/ _ _ O
Java _ _ O
) _ _ O
: _ _ O
A _ _ O
B _ _ O
Q _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
| _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
= _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
We _ _ O
did _ _ O
8 _ _ O
independent _ _ O
OR _ _ O
operations _ _ O
. _ _ O
10 _ _ O

lui _ _ O
, _ _ O
ori _ _ O
… _ _ O
● _ _ O
If _ _ O
I _ _ O
write _ _ O
li _ _ O
t0 _ _ O
, _ _ O
0xDEADBEEF _ _ O
in _ _ O
MIPS _ _ O
, _ _ O
the _ _ O
assembler _ _ O
turns _ _ O
it _ _ O
into _ _ O
: _ _ O
lui _ _ O
at _ _ O
, _ _ O
0xDEAD _ _ O
ori _ _ O
t0 _ _ O
, _ _ O
at _ _ O
, _ _ O
0xBEEF _ _ O
Never _ _ O
use _ _ O
at _ _ O
! _ _ O
! _ _ O
NEVER _ _ O
! _ _ O
! _ _ O
● _ _ O
at _ _ O
is _ _ O
used _ _ O
by _ _ O
the _ _ O
assembler _ _ O
, _ _ O
sooooo _ _ O
… _ _ O
● _ _ O
The _ _ O
reason _ _ O
it _ _ O
splits _ _ O
it _ _ O
up _ _ O
is _ _ O
that _ _ O
there _ _ O
's _ _ O
only _ _ O
enough _ _ O
space _ _ O
in _ _ O
each _ _ O
instruction _ _ O
to _ _ O
fit _ _ O
half _ _ O
of _ _ O
0xDEADBEEF _ _ O
o _ _ O
As _ _ O
we _ _ O
’ve _ _ O
seen _ _ O
in _ _ O
the _ _ O
lab _ _ O
, _ _ O
each _ _ O
immediate _ _ O
is _ _ O
16 _ _ O
bits _ _ O
long _ _ O
o _ _ O
We _ _ O
'll _ _ O
learn _ _ O
about _ _ O
instruction _ _ O
encoding _ _ O
later _ _ O
● _ _ O
What _ _ O
the _ _ O
heck _ _ O
are _ _ O
these _ _ O
instructions _ _ O
doing _ _ O
tho _ _ O
11 _ _ O

By _ _ O
your _ _ O
powers _ _ O
combined _ _ O
… _ _ O
● _ _ O
lui _ _ O
means _ _ O
load _ _ O
upper _ _ O
immediate _ _ O
. _ _ O
it _ _ O
puts _ _ O
the _ _ O
immediate _ _ O
value _ _ O
into _ _ O
the _ _ O
upper _ _ O
16 _ _ O
bits _ _ O
of _ _ O
the _ _ O
register _ _ O
, _ _ O
and _ _ O
zeroes _ _ O
out _ _ O
the _ _ O
rest _ _ O
lui _ _ O
at _ _ O
, _ _ O
0xDEAD _ _ O
● _ _ O
then _ _ O
, _ _ O
ori _ _ O
does _ _ O
logical _ _ O
OR _ _ O
of _ _ O
at _ _ O
and _ _ O
its _ _ O
zero-extended _ _ O
immediate _ _ O
ori _ _ O
t0 _ _ O
, _ _ O
at _ _ O
, _ _ O
0xBEEF _ _ O
11011110101011010000000000000000 _ _ O
| _ _ O
00000000000000001011111011101111 _ _ O
11011110101011001011111011101111 _ _ O
D _ _ O
E _ _ O
A _ _ O
D _ _ O
B _ _ O
E _ _ O
E _ _ O
F _ _ O
12 _ _ O

Bit _ _ O
shifting _ _ O
13 _ _ O

Bit _ _ O
shifting _ _ O
● _ _ O
besides _ _ O
AND _ _ O
, _ _ O
OR _ _ O
, _ _ O
and _ _ O
NOT _ _ O
, _ _ O
we _ _ O
can _ _ O
move _ _ O
bits _ _ O
around _ _ O
, _ _ O
too _ _ O
. _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
if _ _ O
we _ _ O
shift _ _ O
these _ _ O
bits _ _ O
left _ _ O
by _ _ O
1 _ _ O
… _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
we _ _ O
stick _ _ O
a _ _ O
0 _ _ O
at _ _ O
the _ _ O
bottom _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
again _ _ O
! _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
AGAIN _ _ O
! _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
AGAIN _ _ O
! _ _ O
! _ _ O
! _ _ O
! _ _ O
14 _ _ O

Left-shifting _ _ O
in _ _ O
C _ _ O
/ _ _ O
Java _ _ O
and _ _ O
MIPS _ _ O
( _ _ O
animated _ _ O
) _ _ O
● _ _ O
C _ _ O
and _ _ O
Java _ _ O
use _ _ O
the _ _ O
< _ _ O
< _ _ O
operator _ _ O
for _ _ O
left _ _ O
shift _ _ O
B _ _ O
= _ _ O
A _ _ O
< _ _ O
< _ _ O
4 _ _ O
; _ _ O
/ _ _ O
/ _ _ O
B _ _ O
= _ _ O
A _ _ O
shifted _ _ O
left _ _ O
4 _ _ O
bits _ _ O
● _ _ O
MIPS _ _ O
has _ _ O
the _ _ O
sll _ _ O
( _ _ O
Shift _ _ O
Left _ _ O
Logical _ _ O
) _ _ O
instruction _ _ O
sll _ _ O
t2 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
4 _ _ O
# _ _ O
t2 _ _ O
= _ _ O
t0 _ _ O
< _ _ O
< _ _ O
4 _ _ O
● _ _ O
MIPS _ _ O
has _ _ O
the _ _ O
sllv _ _ O
( _ _ O
Shift _ _ O
Left _ _ O
Logical _ _ O
Variable _ _ O
) _ _ O
instruction _ _ O
o _ _ O
No _ _ O
, _ _ O
registers _ _ O
are _ _ O
not _ _ O
variables _ _ O
! _ _ O
sllv _ _ O
t2 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
# _ _ O
t2 _ _ O
= _ _ O
t0 _ _ O
< _ _ O
< _ _ O
t1 _ _ O
● _ _ O
if _ _ O
the _ _ O
bottom _ _ O
4 _ _ O
bits _ _ O
of _ _ O
the _ _ O
result _ _ O
are _ _ O
now _ _ O
0s _ _ O
… _ _ O
o _ _ O
… _ _ O
what _ _ O
happened _ _ O
to _ _ O
the _ _ O
top _ _ O
4 _ _ O
bits _ _ O
? _ _ O
0011 _ _ O
0000 _ _ O
0000 _ _ O
1111 _ _ O
1100 _ _ O
1101 _ _ O
1100 _ _ O
1111 _ _ O
Bit _ _ O
Bucket _ _ O
the _ _ O
bit _ _ O
bucket _ _ O
is _ _ O
not _ _ O
a _ _ O
real _ _ O
place _ _ O
it _ _ O
's _ _ O
a _ _ O
programmer _ _ O
joke _ _ O
ok _ _ O
15 _ _ O

< _ _ O
_ _ _ O
< _ _ O
> _ _ O
_ _ _ O
> _ _ O
< _ _ O
_ _ _ O
< _ _ O
● _ _ O
we _ _ O
can _ _ O
shift _ _ O
right _ _ O
, _ _ O
too _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
● _ _ O
C _ _ O
/ _ _ O
Java _ _ O
use _ _ O
> _ _ O
> _ _ O
, _ _ O
MIPS _ _ O
uses _ _ O
srl _ _ O
( _ _ O
Shift _ _ O
Right _ _ O
Logical _ _ O
) _ _ O
16 _ _ O

Numbers _ _ O
they _ _ O
are _ _ O
a-changing _ _ O
● _ _ O
let _ _ O
's _ _ O
start _ _ O
with _ _ O
a _ _ O
value _ _ O
like _ _ O
5 _ _ O
and _ _ O
shift _ _ O
left _ _ O
and _ _ O
see _ _ O
what _ _ O
happens _ _ O
Binary _ _ O
101 _ _ O
1010 _ _ O
10100 _ _ O
101000 _ _ O
1010000 _ _ O
Decimal _ _ O
5 _ _ O
10 _ _ O
20 _ _ O
40 _ _ O
80 _ _ O
why _ _ O
is _ _ O
this _ _ O
happening _ _ O
well _ _ O
uh _ _ O
... _ _ O
what _ _ O
if _ _ O
I _ _ O
gave _ _ O
you _ _ O
49018853 _ _ O
how _ _ O
do _ _ O
you _ _ O
multiply _ _ O
that _ _ O
by _ _ O
10 _ _ O
? _ _ O
by _ _ O
100 _ _ O
? _ _ O
by _ _ O
100000 _ _ O
? _ _ O
something _ _ O
very _ _ O
similar _ _ O
is _ _ O
happening _ _ O
here _ _ O
17 _ _ O

a _ _ O
< _ _ O
< _ _ O
n _ _ O
= _ _ O
= _ _ O
a _ _ O
* _ _ O
2n _ _ O
● _ _ O
shifting _ _ O
left _ _ O
by _ _ O
n _ _ O
is _ _ O
the _ _ O
same _ _ O
as _ _ O
multiplying _ _ O
by _ _ O
2n _ _ O
o _ _ O
you _ _ O
probably _ _ O
learned _ _ O
this _ _ O
as _ _ O
" _ _ O
moving _ _ O
the _ _ O
decimal _ _ O
point _ _ O
" _ _ O
▪ _ _ O
and _ _ O
moving _ _ O
the _ _ O
decimal _ _ O
point _ _ O
right _ _ O
is _ _ O
like _ _ O
shifting _ _ O
the _ _ O
digits _ _ O
left _ _ O
● _ _ O
shifting _ _ O
is _ _ O
fast _ _ O
and _ _ O
easy _ _ O
on _ _ O
most _ _ O
CPUs _ _ O
o _ _ O
way _ _ O
faster _ _ O
than _ _ O
multiplication _ _ O
in _ _ O
any _ _ O
case _ _ O
● _ _ O
hey _ _ O
… _ _ O
if _ _ O
shifting _ _ O
left _ _ O
is _ _ O
the _ _ O
same _ _ O
as _ _ O
multiplying _ _ O
… _ _ O
18 _ _ O

a _ _ O
> _ _ O
> _ _ O
n _ _ O
= _ _ O
= _ _ O
a _ _ O
/ _ _ O
2n _ _ O
, _ _ O
ish _ _ O
● _ _ O
You _ _ O
got _ _ O
it _ _ O
● _ _ O
Shifting _ _ O
right _ _ O
by _ _ O
n _ _ O
is _ _ O
like _ _ O
dividing _ _ O
by _ _ O
2n _ _ O
o _ _ O
sort _ _ O
of _ _ O
. _ _ O
● _ _ O
What _ _ O
’s _ _ O
510 _ _ O
( _ _ O
01012 _ _ O
) _ _ O
shifted _ _ O
right _ _ O
by _ _ O
1 _ _ O
? _ _ O
o _ _ O
102 _ _ O
, _ _ O
which _ _ O
is _ _ O
2 _ _ O
… _ _ O
▪ _ _ O
It _ _ O
's _ _ O
like _ _ O
doing _ _ O
integer _ _ O
( _ _ O
or _ _ O
flooring _ _ O
) _ _ O
division _ _ O
▪ _ _ O
Which _ _ O
is _ _ O
a _ _ O
fancy _ _ O
way _ _ O
of _ _ O
saying _ _ O
we _ _ O
round _ _ O
to _ _ O
the _ _ O
smallest _ _ O
number _ _ O
● _ _ O
What _ _ O
if _ _ O
the _ _ O
number _ _ O
is _ _ O
signed _ _ O
? _ _ O
● _ _ O
What _ _ O
’s _ _ O
-310 _ _ O
( _ _ O
next _ _ O
class _ _ O
: _ _ O
11012 _ _ O
) _ _ O
shifted _ _ O
right _ _ O
by _ _ O
1 _ _ O
? _ _ O
o _ _ O
01102 _ _ O
, _ _ O
which _ _ O
is _ _ O
610 _ _ O
? _ _ O
? _ _ O
? _ _ O
▪ _ _ O
Ohhhhh _ _ O
19 _ _ O

< _ _ O
_ _ _ O
< _ _ O
> _ _ O
_ _ _ O
> _ _ O
< _ _ O
_ _ _ O
< _ _ O
● _ _ O
We _ _ O
can _ _ O
do _ _ O
sign-extension _ _ O
on _ _ O
shifts _ _ O
, _ _ O
too _ _ O
! _ _ O
! _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
● _ _ O
MIPS _ _ O
uses _ _ O
sra _ _ O
( _ _ O
Shift _ _ O
Right _ _ O
Arithmetic _ _ O
) _ _ O
● _ _ O
What _ _ O
’s _ _ O
-310 _ _ O
( _ _ O
11012 _ _ O
) _ _ O
shifted _ _ O
right _ _ O
by _ _ O
1 _ _ O
? _ _ O
o _ _ O
11102 _ _ O
, _ _ O
which _ _ O
is _ _ O
-210 _ _ O
▪ _ _ O
Why _ _ O
is _ _ O
this _ _ O
-2 _ _ O
? _ _ O
? _ _ O
? _ _ O
? _ _ O
? _ _ O
next _ _ O
class _ _ O
20 _ _ O

MIPS _ _ O
ISA _ _ O
: _ _ O
Bitwise _ _ O
operations _ _ O
● _ _ O
Bitwise _ _ O
logical _ _ O
operators _ _ O
Instruction _ _ O
Meaning _ _ O
not _ _ O
a _ _ O
, _ _ O
b _ _ O
a _ _ O
= _ _ O
~b _ _ O
or _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
c _ _ O
a _ _ O
= _ _ O
b|c _ _ O
ori _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
imm _ _ O
a _ _ O
= _ _ O
b|imm _ _ O
and _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
c _ _ O
a _ _ O
= _ _ O
b _ _ O
& _ _ O
c _ _ O
andi _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
imm _ _ O
a _ _ O
= _ _ O
b _ _ O
& _ _ O
imm _ _ O
21 _ _ O

MIPS _ _ O
ISA _ _ O
: _ _ O
Bitwise _ _ O
shifts _ _ O
● _ _ O
Bitwise _ _ O
logical _ _ O
operators _ _ O
Instruction _ _ O
Meaning _ _ O
sll _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
imm _ _ O
a _ _ O
= _ _ O
b _ _ O
< _ _ O
< _ _ O
imm _ _ O
sllv _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
c _ _ O
a _ _ O
= _ _ O
b _ _ O
< _ _ O
< _ _ O
c _ _ O
srl _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
imm _ _ O
a _ _ O
= _ _ O
b _ _ O
> _ _ O
> _ _ O
imm _ _ O
( _ _ O
zero _ _ O
extension _ _ O
) _ _ O
srlv _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
c _ _ O
a _ _ O
= _ _ O
b _ _ O
> _ _ O
> _ _ O
c _ _ O
sra _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
imm _ _ O
a _ _ O
= _ _ O
b _ _ O
> _ _ O
> _ _ O
imm _ _ O
( _ _ O
sign _ _ O
extension _ _ O
) _ _ O
srav _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
c _ _ O
a _ _ O
= _ _ O
b _ _ O
> _ _ O
> _ _ O
c _ _ O
( _ _ O
zero _ _ O
extension _ _ O
) _ _ O
( _ _ O
sign _ _ O
extension _ _ O
) _ _ O
22 _ _ O

Bitfields _ _ O
23 _ _ O

clicky _ _ O
clicky _ _ O
● _ _ O
In _ _ O
the _ _ O
LED _ _ O
Keypad _ _ O
plugin _ _ O
in _ _ O
MARS _ _ O
, _ _ O
input _ _ O
works _ _ O
like _ _ O
this _ _ O
: _ _ O
input_get_keys _ _ O
returns _ _ O
a _ _ O
value _ _ O
in _ _ O
v0 _ _ O
… _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
B _ _ O
R _ _ O
L _ _ O
D _ _ O
U _ _ O
24 _ _ O

Why _ _ O
do _ _ O
we _ _ O
do _ _ O
this _ _ O
? _ _ O
? _ _ O
● _ _ O
It _ _ O
lets _ _ O
us _ _ O
cram _ _ O
several _ _ O
booleans _ _ O
into _ _ O
a _ _ O
single _ _ O
value _ _ O
! _ _ O
● _ _ O
This _ _ O
technique _ _ O
is _ _ O
known _ _ O
as _ _ O
bit _ _ O
flags _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
B _ _ O
R _ _ O
L _ _ O
D _ _ O
U _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
B _ _ O
R _ _ O
L _ _ O
D _ _ O
U _ _ O
25 _ _ O

The _ _ O
masters _ _ O
of _ _ O
meaning _ _ O
● _ _ O
well _ _ O
what _ _ O
if _ _ O
we _ _ O
wanted _ _ O
to _ _ O
store _ _ O
multiple _ _ O
integers _ _ O
in _ _ O
one _ _ O
value _ _ O
? _ _ O
15 _ _ O
14 _ _ O
13 _ _ O
12 _ _ O
11 _ _ O
10 _ _ O
9 _ _ O
8 _ _ O
7 _ _ O
6 _ _ O
5 _ _ O
4 _ _ O
3 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
decimal _ _ O
? _ _ O
red _ _ O
green _ _ O
blue _ _ O
23 _ _ O
32 _ _ O
19 _ _ O
That _ _ O
's _ _ O
this _ _ O
color _ _ O
, _ _ O
in _ _ O
RGB565 _ _ O
. _ _ O
26 _ _ O

The _ _ O
masters _ _ O
of _ _ O
meaning _ _ O
● _ _ O
This _ _ O
bitfield _ _ O
has _ _ O
3 _ _ O
fields _ _ O
: _ _ O
red _ _ O
, _ _ O
green _ _ O
, _ _ O
and _ _ O
blue _ _ O
15 _ _ O
14 _ _ O
13 _ _ O
12 _ _ O
11 _ _ O
10 _ _ O
9 _ _ O
8 _ _ O
7 _ _ O
6 _ _ O
5 _ _ O
4 _ _ O
3 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
red _ _ O
green _ _ O
blue _ _ O
Position _ _ O
11 _ _ O
Position _ _ O
5 _ _ O
Position _ _ O
0 _ _ O
27 _ _ O

Whyyyyy _ _ O
? _ _ O
? _ _ O
? _ _ O
● _ _ O
It _ _ O
's _ _ O
smaller _ _ O
o _ _ O
really _ _ O
, _ _ O
that _ _ O
's _ _ O
it _ _ O
o _ _ O
but _ _ O
that _ _ O
's _ _ O
super _ _ O
important _ _ O
in _ _ O
a _ _ O
lot _ _ O
of _ _ O
cases _ _ O
● _ _ O
Smaller _ _ O
data _ _ O
… _ _ O
o _ _ O
Takes _ _ O
up _ _ O
less _ _ O
space _ _ O
in _ _ O
memory _ _ O
o _ _ O
Takes _ _ O
up _ _ O
less _ _ O
space _ _ O
in _ _ O
cache _ _ O
▪ _ _ O
extremely _ _ O
important _ _ O
thing _ _ O
in _ _ O
modern _ _ O
CPUs _ _ O
that _ _ O
we _ _ O
talk _ _ O
about _ _ O
in _ _ O
1541 _ _ O
o _ _ O
Is _ _ O
faster _ _ O
to _ _ O
move _ _ O
between _ _ O
memory _ _ O
and _ _ O
the _ _ O
CPU _ _ O
o _ _ O
Is _ _ O
faster _ _ O
to _ _ O
transfer _ _ O
across _ _ O
the _ _ O
internet _ _ O
and _ _ O
other _ _ O
networks _ _ O
o _ _ O
It _ _ O
allows _ _ O
a _ _ O
MIPS _ _ O
instruction _ _ O
to _ _ O
contain _ _ O
references _ _ O
to _ _ O
multiple _ _ O
registers _ _ O
28 _ _ O

I _ _ O
wanna _ _ O
turn _ _ O
the _ _ O
light _ _ O
on _ _ O
! _ _ O
! _ _ O
● _ _ O
I _ _ O
have _ _ O
a _ _ O
sequence _ _ O
of _ _ O
0s _ _ O
. _ _ O
I _ _ O
wanna _ _ O
turn _ _ O
one _ _ O
of _ _ O
them _ _ O
into _ _ O
a _ _ O
1 _ _ O
. _ _ O
● _ _ O
what _ _ O
bitwise _ _ O
operation _ _ O
can _ _ O
I _ _ O
use _ _ O
to _ _ O
do _ _ O
that _ _ O
? _ _ O
0 _ _ O
? _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
29 _ _ O

I _ _ O
wanna _ _ O
turn _ _ O
the _ _ O
light _ _ O
off _ _ O
! _ _ O
! _ _ O
● _ _ O
I _ _ O
wanna _ _ O
turn _ _ O
one _ _ O
of _ _ O
the _ _ O
1s _ _ O
into _ _ O
a _ _ O
0 _ _ O
. _ _ O
● _ _ O
what _ _ O
bitwise _ _ O
operation _ _ O
can _ _ O
I _ _ O
use _ _ O
to _ _ O
do _ _ O
that _ _ O
? _ _ O
1 _ _ O
? _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
30 _ _ O

Turning _ _ O
off _ _ O
the _ _ O
first _ _ O
three _ _ O
, _ _ O
leaving _ _ O
the _ _ O
others _ _ O
alone _ _ O
● _ _ O
more _ _ O
bits _ _ O
, _ _ O
but _ _ O
one _ _ O
of _ _ O
the _ _ O
same _ _ O
operations _ _ O
… _ _ O
1 _ _ O
? _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
31 _ _ O

Remember _ _ O
this _ _ O
? _ _ O
lui _ _ O
at _ _ O
, _ _ O
0xDEAD _ _ O
ori _ _ O
t0 _ _ O
, _ _ O
at _ _ O
, _ _ O
0xBEEF _ _ O
11011110101011010000000000000000 _ _ O
| _ _ O
00000000000000001011111011101111 _ _ O
11011110101011011011111011101111 _ _ O
D _ _ O
E _ _ O
A _ _ O
D _ _ O
B _ _ O
E _ _ O
E _ _ O
F _ _ O
32 _ _ O

How _ _ O
can _ _ O
we _ _ O
assemble _ _ O
on _ _ O
of _ _ O
these _ _ O
bitfields _ _ O
? _ _ O
15 _ _ O
14 _ _ O
13 _ _ O
12 _ _ O
11 _ _ O
10 _ _ O
red _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
9 _ _ O
8 _ _ O
7 _ _ O
green _ _ O
6 _ _ O
5 _ _ O
4 _ _ O
3 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
blue _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
33 _ _ O

… _ _ O
● _ _ O
hmm _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
34 _ _ O

Left-shifting _ _ O
and _ _ O
ORing _ _ O
● _ _ O
if _ _ O
you _ _ O
have _ _ O
the _ _ O
values _ _ O
of _ _ O
the _ _ O
fields _ _ O
● _ _ O
and _ _ O
you _ _ O
want _ _ O
to _ _ O
put _ _ O
them _ _ O
together _ _ O
into _ _ O
a _ _ O
bitfield _ _ O
o _ _ O
shift _ _ O
each _ _ O
value _ _ O
left _ _ O
to _ _ O
the _ _ O
correct _ _ O
bit _ _ O
position _ _ O
o _ _ O
OR _ _ O
the _ _ O
shifted _ _ O
values _ _ O
together _ _ O
● _ _ O
for _ _ O
RGB565 _ _ O
, _ _ O
o _ _ O
red _ _ O
is _ _ O
shifted _ _ O
left _ _ O
11 _ _ O
o _ _ O
green _ _ O
is _ _ O
shifted _ _ O
left _ _ O
5 _ _ O
o _ _ O
blue _ _ O
is _ _ O
n't _ _ O
shifted _ _ O
( _ _ O
shifted _ _ O
left _ _ O
0 _ _ O
… _ _ O
) _ _ O
color _ _ O
= _ _ O
( _ _ O
red _ _ O
< _ _ O
< _ _ O
11 _ _ O
) _ _ O
| _ _ O
( _ _ O
green _ _ O
< _ _ O
< _ _ O
5 _ _ O
) _ _ O
| _ _ O
blue _ _ O
; _ _ O
35 _ _ O

Going _ _ O
the _ _ O
other _ _ O
way _ _ O
● _ _ O
let _ _ O
's _ _ O
go _ _ O
from _ _ O
the _ _ O
bitfield _ _ O
to _ _ O
three _ _ O
separate _ _ O
values _ _ O
. _ _ O
15 _ _ O
14 _ _ O
13 _ _ O
12 _ _ O
11 _ _ O
10 _ _ O
9 _ _ O
8 _ _ O
7 _ _ O
6 _ _ O
5 _ _ O
4 _ _ O
3 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
let _ _ O
's _ _ O
say _ _ O
we _ _ O
somehow _ _ O
set _ _ O
all _ _ O
the _ _ O
non-red _ _ O
bits _ _ O
to _ _ O
0 _ _ O
. _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
what _ _ O
value _ _ O
is _ _ O
this _ _ O
? _ _ O
it _ _ O
's _ _ O
not _ _ O
23 _ _ O
, _ _ O
that _ _ O
's _ _ O
for _ _ O
sure _ _ O
. _ _ O
so _ _ O
how _ _ O
do _ _ O
we _ _ O
fix _ _ O
that _ _ O
? _ _ O
36 _ _ O

It _ _ O
's _ _ O
the _ _ O
exact _ _ O
opposite _ _ O
● _ _ O
we _ _ O
have _ _ O
to _ _ O
shift _ _ O
right _ _ O
to _ _ O
put _ _ O
the _ _ O
field _ _ O
at _ _ O
position _ _ O
0 _ _ O
15 _ _ O
14 _ _ O
13 _ _ O
12 _ _ O
11 _ _ O
10 _ _ O
9 _ _ O
8 _ _ O
7 _ _ O
6 _ _ O
5 _ _ O
4 _ _ O
3 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
shift _ _ O
right _ _ O
by _ _ O
11 _ _ O
and _ _ O
… _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
cool _ _ O
. _ _ O
what _ _ O
about _ _ O
green _ _ O
? _ _ O
shift _ _ O
right _ _ O
by _ _ O
… _ _ O
? _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
uh _ _ O
oh _ _ O
. _ _ O
37 _ _ O

Masquerade _ _ O
● _ _ O
we _ _ O
need _ _ O
to _ _ O
get _ _ O
rid _ _ O
of _ _ O
( _ _ O
zero _ _ O
out _ _ O
) _ _ O
the _ _ O
bits _ _ O
that _ _ O
we _ _ O
do _ _ O
n't _ _ O
care _ _ O
about _ _ O
● _ _ O
a _ _ O
mask _ _ O
is _ _ O
a _ _ O
specially-constructed _ _ O
value _ _ O
that _ _ O
has _ _ O
: _ _ O
o _ _ O
1s _ _ O
in _ _ O
the _ _ O
bits _ _ O
that _ _ O
we _ _ O
want _ _ O
to _ _ O
keep _ _ O
o _ _ O
0s _ _ O
in _ _ O
the _ _ O
bits _ _ O
that _ _ O
we _ _ O
want _ _ O
to _ _ O
discard _ _ O
● _ _ O
which _ _ O
bits _ _ O
do _ _ O
we _ _ O
want _ _ O
to _ _ O
keep _ _ O
? _ _ O
which _ _ O
do _ _ O
we _ _ O
want _ _ O
to _ _ O
discard _ _ O
? _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
& _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
this _ _ O
is _ _ O
the _ _ O
mask _ _ O
38 _ _ O

Coming _ _ O
up _ _ O
with _ _ O
the _ _ O
mask _ _ O
value _ _ O
● _ _ O
if _ _ O
you _ _ O
want _ _ O
to _ _ O
mask _ _ O
a _ _ O
3 _ _ O
bit _ _ O
value _ _ O
, _ _ O
the _ _ O
mask _ _ O
is _ _ O
1112 _ _ O
● _ _ O
if _ _ O
you _ _ O
want _ _ O
to _ _ O
mask _ _ O
a _ _ O
4 _ _ O
bit _ _ O
value _ _ O
, _ _ O
the _ _ O
mask _ _ O
is _ _ O
11112 _ _ O
● _ _ O
if _ _ O
you _ _ O
want _ _ O
to _ _ O
mask _ _ O
a _ _ O
5 _ _ O
bit _ _ O
value _ _ O
, _ _ O
it _ _ O
's _ _ O
… _ _ O
? _ _ O
Size _ _ O
( _ _ O
n _ _ O
) _ _ O
Mask _ _ O
1112 _ _ O
3 _ _ O
11112 _ _ O
4 _ _ O
111112 _ _ O
5 _ _ O
2n _ _ O
8 _ _ O
16 _ _ O
32 _ _ O
Mask _ _ O
in _ _ O
decimal _ _ O
7 _ _ O
15 _ _ O
31 _ _ O
2n-1 _ _ O
39 _ _ O

Right-shifting _ _ O
and _ _ O
ANDing _ _ O
● _ _ O
to _ _ O
extract _ _ O
one _ _ O
or _ _ O
more _ _ O
fields _ _ O
from _ _ O
a _ _ O
bitfield _ _ O
: _ _ O
o _ _ O
shift _ _ O
the _ _ O
bitfield _ _ O
right _ _ O
to _ _ O
put _ _ O
the _ _ O
desired _ _ O
field _ _ O
at _ _ O
bit _ _ O
position _ _ O
0 _ _ O
o _ _ O
AND _ _ O
that _ _ O
with _ _ O
2n-1 _ _ O
, _ _ O
where _ _ O
n _ _ O
is _ _ O
the _ _ O
number _ _ O
of _ _ O
bits _ _ O
in _ _ O
the _ _ O
field _ _ O
● _ _ O
so _ _ O
for _ _ O
RGB565 _ _ O
… _ _ O
o _ _ O
the _ _ O
red _ _ O
and _ _ O
blue _ _ O
masks _ _ O
are _ _ O
25 _ _ O
- _ _ O
1 _ _ O
= _ _ O
31 _ _ O
( _ _ O
or _ _ O
0x1F _ _ O
) _ _ O
o _ _ O
the _ _ O
green _ _ O
mask _ _ O
is _ _ O
26 _ _ O
- _ _ O
1 _ _ O
= _ _ O
63 _ _ O
( _ _ O
or _ _ O
0x3F _ _ O
) _ _ O
red _ _ O
= _ _ O
( _ _ O
color _ _ O
> _ _ O
> _ _ O
11 _ _ O
) _ _ O
& _ _ O
0x1F _ _ O
; _ _ O
green _ _ O
= _ _ O
( _ _ O
color _ _ O
> _ _ O
> _ _ O
5 _ _ O
) _ _ O
& _ _ O
0x3F _ _ O
; _ _ O
blue _ _ O
= _ _ O
color _ _ O
& _ _ O
0x1F _ _ O
; _ _ O
40 _ _ O

NOW _ _ O
it _ _ O
works _ _ O
● _ _ O
let _ _ O
's _ _ O
extract _ _ O
green _ _ O
15 _ _ O
14 _ _ O
13 _ _ O
12 _ _ O
11 _ _ O
10 _ _ O
9 _ _ O
8 _ _ O
7 _ _ O
6 _ _ O
5 _ _ O
4 _ _ O
3 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
shift _ _ O
right _ _ O
by _ _ O
5 _ _ O
and _ _ O
… _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
and _ _ O
then _ _ O
AND _ _ O
with _ _ O
0x3F _ _ O
… _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
41 _ _ O

Ca _ _ O
n't _ _ O
you _ _ O
AND _ _ O
then _ _ O
shift _ _ O
? _ _ O
● _ _ O
sure _ _ O
, _ _ O
but _ _ O
… _ _ O
15 _ _ O
14 _ _ O
13 _ _ O
12 _ _ O
11 _ _ O
10 _ _ O
9 _ _ O
8 _ _ O
7 _ _ O
6 _ _ O
5 _ _ O
4 _ _ O
3 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
AND _ _ O
with _ _ O
0x7E0 _ _ O
( _ _ O
! _ _ O
) _ _ O
… _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
shift _ _ O
right _ _ O
by _ _ O
5 _ _ O
… _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
where _ _ O
did _ _ O
I _ _ O
get _ _ O
0x7E0 _ _ O
? _ _ O
? _ _ O
it _ _ O
's _ _ O
0x3F _ _ O
< _ _ O
< _ _ O
5 _ _ O
. _ _ O
I _ _ O
feel _ _ O
like _ _ O
that _ _ O
's _ _ O
uglier _ _ O
. _ _ O
Experience _ _ O
shows _ _ O
me _ _ O
it _ _ O
leads _ _ O
to _ _ O
more _ _ O
mistakes _ _ O
So _ _ O
do _ _ O
n’t _ _ O
do _ _ O
this _ _ O
: _ _ O
Keep _ _ O
the _ _ O
mask _ _ O
aligned _ _ O
to _ _ O
the _ _ O
right _ _ O
! _ _ O
! _ _ O
! _ _ O
42 _ _ O

Exercise _ _ O
! _ _ O
● _ _ O
This _ _ O
bitfield _ _ O
represents _ _ O
the _ _ O
following _ _ O
MIPS _ _ O
instruction _ _ O
: _ _ O
addi _ _ O
s0 _ _ O
, _ _ O
zero _ _ O
, _ _ O
0x1234 _ _ O
3 _ _ O
30 _ _ O
29 _ _ O
28 _ _ O
27 _ _ O
2 _ _ O
2 _ _ O
24 _ _ O
23 _ _ O
22 _ _ O
2 _ _ O
2 _ _ O
19 _ _ O
18 _ _ O
17 _ _ O
1 _ _ O
1 _ _ O
14 _ _ O
13 _ _ O
12 _ _ O
11 _ _ O
10 _ _ O
9 _ _ O
8 _ _ O
7 _ _ O
6 _ _ O
5 _ _ O
4 _ _ O
3 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
65 _ _ O
10 _ _ O
65 _ _ O
00100000000100000001001000110100 _ _ O
opcode _ _ O
rs _ _ O
It _ _ O
’s _ _ O
addi _ _ O
! _ _ O
rt _ _ O
zero _ _ O
imm _ _ O
Load _ _ O
into _ _ O
this _ _ O
register _ _ O
This _ _ O
number _ _ O
● _ _ O
Using _ _ O
these _ _ O
operations _ _ O
: _ _ O
< _ _ O
< _ _ O
, _ _ O
> _ _ O
> _ _ O
, _ _ O
& _ _ O
, _ _ O
| _ _ O
, _ _ O
~ _ _ O
write _ _ O
expressions _ _ O
to _ _ O
extract _ _ O
the _ _ O
value _ _ O
of _ _ O
each _ _ O
field _ _ O
o _ _ O
E.g. _ _ O
: _ _ O
( _ _ O
field _ _ O
< _ _ O
< _ _ O
3 _ _ O
) _ _ O
| _ _ O
( _ _ O
~0xFFFF _ _ O
) _ _ O
43 _ _ O



