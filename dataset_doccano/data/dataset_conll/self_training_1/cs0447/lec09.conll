self_training_1|cs0447|lec09
-DOCSTART- -X- -X- O

# _ _ O
9 _ _ O
Binary _ _ O
arithmetic _ _ O
: _ _ O
Addition _ _ O
Original _ _ O
slides _ _ O
by _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
Modified _ _ O
with _ _ O
bits _ _ O
from _ _ O
: _ _ O
Bruce _ _ O
Childers _ _ O
, _ _ O
David _ _ O
Wilkinson _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Luís _ _ O
Oliveira _ _ O
Fall _ _ O
2020 _ _ O

Class _ _ O
announcements _ _ O
• _ _ O
nope _ _ O
2 _ _ O

Binary _ _ O
addition _ _ O
3 _ _ O

Adding _ _ O
in _ _ O
binary _ _ O
● _ _ O
It _ _ O
works _ _ O
the _ _ O
same _ _ O
way _ _ O
as _ _ O
you _ _ O
learned _ _ O
in _ _ O
school _ _ O
o _ _ O
Except _ _ O
instead _ _ O
of _ _ O
carrying _ _ O
at _ _ O
1010 _ _ O
, _ _ O
you _ _ O
carry _ _ O
at _ _ O
… _ _ O
102 _ _ O
! _ _ O
▪ _ _ O
1 _ _ O
+ _ _ O
1 _ _ O
= _ _ O
102 _ _ O
( _ _ O
210 _ _ O
) _ _ O
▪ _ _ O
1 _ _ O
+ _ _ O
1 _ _ O
+ _ _ O
1 _ _ O
= _ _ O
112 _ _ O
( _ _ O
310 _ _ O
) _ _ O
● _ _ O
Let _ _ O
's _ _ O
try _ _ O
it _ _ O
. _ _ O
( _ _ O
what _ _ O
are _ _ O
these _ _ O
in _ _ O
decimal _ _ O
? _ _ O
) _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1011 _ _ O
0010 _ _ O
+0010 _ _ O
1111 _ _ O
1110 _ _ O
0001 _ _ O
4 _ _ O

Formalizing _ _ O
the _ _ O
algorithm _ _ O
● _ _ O
for _ _ O
each _ _ O
pair _ _ O
of _ _ O
bits _ _ O
starting _ _ O
at _ _ O
the _ _ O
LSB _ _ O
, _ _ O
o _ _ O
add _ _ O
the _ _ O
two _ _ O
bits _ _ O
and _ _ O
the _ _ O
carry _ _ O
o _ _ O
the _ _ O
low _ _ O
bit _ _ O
of _ _ O
the _ _ O
sum _ _ O
goes _ _ O
into _ _ O
the _ _ O
sum _ _ O
row _ _ O
o _ _ O
the _ _ O
high _ _ O
bit _ _ O
of _ _ O
the _ _ O
sum _ _ O
is _ _ O
the _ _ O
carry _ _ O
for _ _ O
the _ _ O
next _ _ O
higher _ _ O
bit _ _ O
● _ _ O
this _ _ O
is _ _ O
the _ _ O
grade _ _ O
school _ _ O
algorithm _ _ O
o _ _ O
cause _ _ O
it _ _ O
's _ _ O
how _ _ O
you _ _ O
learned _ _ O
to _ _ O
add _ _ O
in _ _ O
grade _ _ O
school _ _ O
Bit _ _ O
Bucket _ _ O
.. _ _ O
? _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
+0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
5 _ _ O

Signed _ _ O
Numbers _ _ O
6 _ _ O

Remember _ _ O
this _ _ O
? _ _ O
● _ _ O
if _ _ O
you _ _ O
load _ _ O
a _ _ O
byte _ _ O
… _ _ O
31 _ _ O
0 _ _ O
00000000 _ _ O
00000000 _ _ O
00000000 _ _ O
00000000 _ _ O
10010000 _ _ O
If _ _ O
the _ _ O
byte _ _ O
is _ _ O
signed _ _ O
… _ _ O
what _ _ O
should _ _ O
it _ _ O
become _ _ O
? _ _ O
31 _ _ O
0 _ _ O
11111111 _ _ O
11111111 _ _ O
11111111 _ _ O
10010000 _ _ O
If _ _ O
the _ _ O
byte _ _ O
is _ _ O
unsigned _ _ O
… _ _ O
what _ _ O
should _ _ O
it _ _ O
become _ _ O
? _ _ O
31 _ _ O
0 _ _ O
00000000 _ _ O
00000000 _ _ O
00000000 _ _ O
10010000 _ _ O
lb _ _ O
does _ _ O
sign _ _ O
extension _ _ O
. _ _ O
lbu _ _ O
does _ _ O
zero _ _ O
extension _ _ O
. _ _ O
7 _ _ O

Arbitrariness _ _ O
… _ _ O
Again _ _ O
● _ _ O
What _ _ O
does _ _ O
this _ _ O
mean _ _ O
? _ _ O
10001010 _ _ O
Is _ _ O
it _ _ O
signed _ _ O
? _ _ O
¯\_ _ _ O
( _ _ O
ツ _ _ O
) _ _ O
_ _ _ O
/ _ _ O
¯ _ _ O
Is _ _ O
it _ _ O
unsigned _ _ O
? _ _ O
What _ _ O
’s _ _ O
the _ _ O
difference _ _ O
? _ _ O
8 _ _ O

Unsigned _ _ O
integers _ _ O
– _ _ O
they _ _ O
are _ _ O
all _ _ O
positive _ _ O
! _ _ O
● _ _ O
We _ _ O
have _ _ O
numbers _ _ O
, _ _ O
they _ _ O
are _ _ O
all _ _ O
positive _ _ O
! _ _ O
o _ _ O
On _ _ O
a _ _ O
number _ _ O
line _ _ O
: _ _ O
000 _ _ O
010 _ _ O
100 _ _ O
110 _ _ O
001 _ _ O
011 _ _ O
101 _ _ O
111 _ _ O
0 _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
7 _ _ O
● _ _ O
What _ _ O
if _ _ O
we _ _ O
want _ _ O
to _ _ O
have _ _ O
negative _ _ O
numbers _ _ O
? _ _ O
9 _ _ O

If _ _ O
you _ _ O
wanted _ _ O
to _ _ O
implement _ _ O
signed _ _ O
integers _ _ O
… _ _ O
● _ _ O
What _ _ O
would _ _ O
be _ _ O
the _ _ O
most _ _ O
intuitive _ _ O
way _ _ O
of _ _ O
doing _ _ O
it _ _ O
? _ _ O
o _ _ O
You _ _ O
could _ _ O
have _ _ O
a _ _ O
" _ _ O
sign _ _ O
bit _ _ O
" _ _ O
where _ _ O
0 _ _ O
means _ _ O
+ _ _ O
, _ _ O
and _ _ O
1 _ _ O
means _ _ O
● _ _ O
This _ _ O
is _ _ O
sign-magnitude _ _ O
representation _ _ O
. _ _ O
on _ _ O
a _ _ O
number _ _ O
line _ _ O
: _ _ O
111 _ _ O
110 _ _ O
000 _ _ O
010 _ _ O
101 _ _ O
001 _ _ O
011 _ _ O
-3 _ _ O
-2 _ _ O
-1 _ _ O
0 _ _ O
+1 _ _ O
+2 _ _ O
+3 _ _ O
100 _ _ O
● _ _ O
What _ _ O
about _ _ O
the _ _ O
pattern _ _ O
100 _ _ O
? _ _ O
o _ _ O
negative _ _ O
sign _ _ O
, _ _ O
0 _ _ O
magnitude _ _ O
o _ _ O
NEGATIVE _ _ O
ZERO _ _ O
? _ _ O
? _ _ O
● _ _ O
Arithmetic _ _ O
is _ _ O
a _ _ O
bit _ _ O
awkward _ _ O
10 _ _ O

Sign-magnitude _ _ O
arithmetic _ _ O
● _ _ O
Negation _ _ O
- _ _ O
( _ _ O
3 _ _ O
) _ _ O
0011 _ _ O
- _ _ O
( _ _ O
-3 _ _ O
) _ _ O
1011 _ _ O
bit _ _ O
pattern _ _ O
for _ _ O
positive _ _ O
3 _ _ O
? _ _ O
bit _ _ O
pattern _ _ O
for _ _ O
negative _ _ O
3 _ _ O
? _ _ O
1011 _ _ O
Flip _ _ O
MSB _ _ O
! _ _ O
0011 _ _ O
Flip _ _ O
MSB _ _ O
! _ _ O
11 _ _ O

Sign-magnitude _ _ O
arithmetic _ _ O
● _ _ O
Negation _ _ O
- _ _ O
( _ _ O
3 _ _ O
) _ _ O
0011 _ _ O
1011 _ _ O
- _ _ O
( _ _ O
-3 _ _ O
) _ _ O
1011 _ _ O
0011 _ _ O
● _ _ O
( _ _ O
wrong _ _ O
) _ _ O
Addition _ _ O
11 _ _ O
0011 _ _ O
+0011 _ _ O
0110 _ _ O
to _ _ O
binary _ _ O
? _ _ O
3 _ _ O
+ _ _ O
3 _ _ O
6 _ _ O
bit _ _ O
pattern _ _ O
for _ _ O
-3 _ _ O
… _ _ O
positive _ _ O
3 _ _ O
? _ _ O
3 _ _ O
+ _ _ O
-3 _ _ O
0 _ _ O
11 _ _ O
0011 _ _ O
+1011 _ _ O
1011 _ _ O
1110 _ _ O
-6 _ _ O
to _ _ O
decimal _ _ O
? _ _ O
● _ _ O
It _ _ O
’s _ _ O
not _ _ O
impossible _ _ O
o _ _ O
But _ _ O
it _ _ O
is _ _ O
awkward _ _ O
12 _ _ O

Well _ _ O
, _ _ O
what _ _ O
if _ _ O
… _ _ O
● _ _ O
We _ _ O
use _ _ O
a _ _ O
technique _ _ O
borrowed _ _ O
from _ _ O
old _ _ O
accounting _ _ O
practices _ _ O
and _ _ O
mechanical _ _ O
calculators _ _ O
, _ _ O
we _ _ O
can _ _ O
flip _ _ O
all _ _ O
the _ _ O
bits _ _ O
to _ _ O
negate _ _ O
a _ _ O
number _ _ O
● _ _ O
This _ _ O
is _ _ O
ones _ _ O
' _ _ O
complement _ _ O
. _ _ O
on _ _ O
a _ _ O
number _ _ O
line _ _ O
: _ _ O
● _ _ O
We _ _ O
have _ _ O
the _ _ O
same _ _ O
problem _ _ O
with _ _ O
111 _ _ O
as _ _ O
sign-magnitude _ _ O
had _ _ O
with _ _ O
100 _ _ O
100 _ _ O
101 _ _ O
000 _ _ O
010 _ _ O
110 _ _ O
001 _ _ O
011 _ _ O
-3 _ _ O
-2 _ _ O
-1 _ _ O
0 _ _ O
+1 _ _ O
+2 _ _ O
+3 _ _ O
● _ _ O
This _ _ O
does _ _ O
make _ _ O
arithmetic _ _ O
easier _ _ O
● _ _ O
But _ _ O
it _ _ O
is _ _ O
not _ _ O
used _ _ O
in _ _ O
modern _ _ O
computers _ _ O
. _ _ O
111 _ _ O
13 _ _ O

Sign-magnitude _ _ O
arithmetic _ _ O
● _ _ O
Negation _ _ O
- _ _ O
( _ _ O
3 _ _ O
) _ _ O
0011 _ _ O
- _ _ O
( _ _ O
-3 _ _ O
) _ _ O
1100 _ _ O
bit _ _ O
pattern _ _ O
for _ _ O
positive _ _ O
3 _ _ O
? _ _ O
bit _ _ O
pattern _ _ O
for _ _ O
negative _ _ O
3 _ _ O
? _ _ O
flip _ _ O
! _ _ O
flip _ _ O
! _ _ O
1100 _ _ O
0011 _ _ O
14 _ _ O

Sign-magnitude _ _ O
arithmetic _ _ O
● _ _ O
Negation _ _ O
● _ _ O
Addition _ _ O
to _ _ O
binary _ _ O
? _ _ O
3 _ _ O
+ _ _ O
2 _ _ O
5 _ _ O
- _ _ O
( _ _ O
3 _ _ O
) _ _ O
0011 _ _ O
1100 _ _ O
- _ _ O
( _ _ O
-3 _ _ O
) _ _ O
1100 _ _ O
0011 _ _ O
0010 _ _ O
0011 _ _ O
+0010 _ _ O
0101 _ _ O
Add _ _ O
the _ _ O
carry _ _ O
back _ _ O
in _ _ O
bit _ _ O
pattern _ _ O
for _ _ O
-2 _ _ O
… _ _ O
positive _ _ O
2 _ _ O
? _ _ O
3 _ _ O
+ _ _ O
-2 _ _ O
1 _ _ O
1111 _ _ O
0011 _ _ O
0010 _ _ O
flip _ _ O
! _ _ O
+1101 _ _ O
1101 _ _ O
0000 _ _ O
? _ _ O
? _ _ O
? _ _ O
+0001 _ _ O
1 _ _ O
0001 _ _ O
this _ _ O
is _ _ O
positive _ _ O
, _ _ O
so _ _ O
do _ _ O
n’t _ _ O
flip _ _ O
to _ _ O
decimal _ _ O
? _ _ O
15 _ _ O

One _ _ O
’s _ _ O
complement _ _ O
arithmetic _ _ O
● _ _ O
Do _ _ O
you _ _ O
really _ _ O
want _ _ O
to _ _ O
write _ _ O
code _ _ O
like _ _ O
if _ _ O
( _ _ O
( _ _ O
my_var _ _ O
= _ _ O
= _ _ O
0 _ _ O
) _ _ O
OR _ _ O
( _ _ O
my_var _ _ O
= _ _ O
= _ _ O
-0 _ _ O
) _ _ O
) _ _ O
{ _ _ O
… _ _ O
} _ _ O
● _ _ O
Just _ _ O
kidding _ _ O
… _ _ O
Compilers _ _ O
would _ _ O
handle _ _ O
that _ _ O
for _ _ O
you _ _ O
! _ _ O
16 _ _ O

Finally _ _ O
, _ _ O
two _ _ O
's _ _ O
complement _ _ O
● _ _ O
First _ _ O
, _ _ O
we _ _ O
flip _ _ O
all _ _ O
the _ _ O
bits _ _ O
o _ _ O
Just _ _ O
like _ _ O
with _ _ O
1 _ _ O
’s _ _ O
complement _ _ O
● _ _ O
Then _ _ O
add _ _ O
1 _ _ O
. _ _ O
● _ _ O
The _ _ O
number _ _ O
line _ _ O
looks _ _ O
a _ _ O
little _ _ O
bit _ _ O
stranger _ _ O
o _ _ O
But _ _ O
there _ _ O
is _ _ O
only _ _ O
one _ _ O
0 _ _ O
, _ _ O
and _ _ O
it _ _ O
is _ _ O
0 _ _ O
! _ _ O
100 _ _ O
101 _ _ O
110 _ _ O
000 _ _ O
010 _ _ O
111 _ _ O
001 _ _ O
011 _ _ O
-4 _ _ O
-3 _ _ O
-2 _ _ O
-1 _ _ O
0 _ _ O
+1 _ _ O
+2 _ _ O
+3 _ _ O
17 _ _ O

Finally _ _ O
, _ _ O
two _ _ O
's _ _ O
complement _ _ O
● _ _ O
First _ _ O
, _ _ O
we _ _ O
flip _ _ O
all _ _ O
the _ _ O
bits _ _ O
o _ _ O
Just _ _ O
like _ _ O
with _ _ O
1 _ _ O
’s _ _ O
complement _ _ O
● _ _ O
Then _ _ O
add _ _ O
1 _ _ O
. _ _ O
● _ _ O
The _ _ O
number _ _ O
line _ _ O
looks _ _ O
a _ _ O
little _ _ O
bit _ _ O
stranger _ _ O
o _ _ O
But _ _ O
there _ _ O
is _ _ O
only _ _ O
one _ _ O
0 _ _ O
, _ _ O
and _ _ O
it _ _ O
is _ _ O
0 _ _ O
! _ _ O
100 _ _ O
101 _ _ O
110 _ _ O
000 _ _ O
010 _ _ O
111 _ _ O
001 _ _ O
011 _ _ O
-4 _ _ O
-3 _ _ O
-2 _ _ O
-1 _ _ O
0 _ _ O
+1 _ _ O
+2 _ _ O
● _ _ O
It _ _ O
's _ _ O
lopsided _ _ O
: _ _ O
There _ _ O
is _ _ O
no _ _ O
+4 _ _ O
! _ _ O
o _ _ O
But _ _ O
arithmetic _ _ O
is _ _ O
easy _ _ O
! _ _ O
o _ _ O
when _ _ O
someone _ _ O
says _ _ O
" _ _ O
signed _ _ O
, _ _ O
" _ _ O
99 _ _ O
% _ _ O
of _ _ O
the _ _ O
time _ _ O
they _ _ O
mean _ _ O
this _ _ O
o _ _ O
When _ _ O
I _ _ O
say _ _ O
“ _ _ O
signed _ _ O
” _ _ O
, _ _ O
I _ _ O
100 _ _ O
% _ _ O
of _ _ O
the _ _ O
time _ _ O
mean _ _ O
this _ _ O
+3 _ _ O
18 _ _ O

Sign-magnitude _ _ O
arithmetic _ _ O
● _ _ O
Negation _ _ O
- _ _ O
( _ _ O
3 _ _ O
) _ _ O
0011 _ _ O
- _ _ O
( _ _ O
-3 _ _ O
) _ _ O
1101 _ _ O
bit _ _ O
pattern _ _ O
for _ _ O
positive _ _ O
3 _ _ O
? _ _ O
bit _ _ O
pattern _ _ O
for _ _ O
negative _ _ O
3 _ _ O
? _ _ O
flip _ _ O
! _ _ O
flip _ _ O
! _ _ O
1100 _ _ O
0010 _ _ O
1101 _ _ O
Add _ _ O
1 _ _ O
! _ _ O
0011 _ _ O
Add _ _ O
1 _ _ O
! _ _ O
● _ _ O
You _ _ O
do _ _ O
n’t _ _ O
need _ _ O
to _ _ O
subtract _ _ O
! _ _ O
! _ _ O
o _ _ O
flip _ _ O
( _ _ O
k _ _ O
) _ _ O
+1 _ _ O
= _ _ O
= _ _ O
flip _ _ O
( _ _ O
k-1 _ _ O
) _ _ O
▪ _ _ O
If _ _ O
you _ _ O
ignore _ _ O
the _ _ O
carry _ _ O
! _ _ O
☺ _ _ O
19 _ _ O

Two _ _ O
's _ _ O
complement _ _ O
addition _ _ O
● _ _ O
the _ _ O
great _ _ O
thing _ _ O
is _ _ O
: _ _ O
you _ _ O
can _ _ O
add _ _ O
numbers _ _ O
of _ _ O
either _ _ O
sign _ _ O
without _ _ O
having _ _ O
to _ _ O
do _ _ O
Ignore _ _ O
the _ _ O
carry _ _ O
anything _ _ O
special _ _ O
! _ _ O
to _ _ O
binary _ _ O
? _ _ O
0111 _ _ O
3 _ _ O
+ _ _ O
7 _ _ O
10 _ _ O
bit _ _ O
pattern _ _ O
for _ _ O
-7 _ _ O
… _ _ O
positive _ _ O
7 _ _ O
? _ _ O
0011 _ _ O
3 _ _ O
+0111 _ _ O
+ _ _ O
-7 _ _ O
1010 _ _ O
-4 _ _ O
0011 _ _ O
0011 _ _ O
0111 _ _ O
4 _ _ O
flip _ _ O
! _ _ O
+1 _ _ O
+1001 _ _ O
to _ _ O
decimal _ _ O
? _ _ O
1000 _ _ O
1100 _ _ O
0100 _ _ O
this _ _ O
is _ _ O
negative _ _ O
, _ _ O
so _ _ O
what _ _ O
is _ _ O
it _ _ O
? _ _ O
flip _ _ O
! _ _ O
the _ _ O
actual _ _ O
patterns _ _ O
of _ _ O
bits _ _ O
are _ _ O
the _ _ O
same _ _ O
. _ _ O
so _ _ O
how _ _ O
does _ _ O
the _ _ O
computer _ _ O
" _ _ O
know _ _ O
" _ _ O
whether _ _ O
it _ _ O
's _ _ O
doing _ _ O
signed _ _ O
or _ _ O
unsigned _ _ O
addition _ _ O
? _ _ O
+1 _ _ O
0011 _ _ O
20 _ _ O

IT _ _ O
DOESN _ _ O
' _ _ O
T _ _ O
21 _ _ O

This _ _ O
is _ _ O
how _ _ O
it _ _ O
looks _ _ O
● _ _ O
Interpreting _ _ O
bit _ _ O
patterns _ _ O
as _ _ O
( _ _ O
left _ _ O
) _ _ O
unsigned _ _ O
and _ _ O
( _ _ O
right _ _ O
) _ _ O
signed _ _ O
15 _ _ O
0 _ _ O
1 _ _ O
-1 _ _ O
0 _ _ O
14 _ _ O
1111 _ _ O
0000 _ _ O
0001 _ _ O
2 _ _ O
1110 _ _ O
0010 _ _ O
13 _ _ O
1101 _ _ O
0011 _ _ O
3 _ _ O
-2 _ _ O
1111 _ _ O
1110 _ _ O
-3 _ _ O
1101 _ _ O
12 _ _ O
1100 _ _ O
1011 _ _ O
11 _ _ O
1010 _ _ O
-4 _ _ O
1100 _ _ O
1011 _ _ O
-5 _ _ O
1010 _ _ O
10 _ _ O
1001 _ _ O
9 _ _ O
0100 _ _ O
0101 _ _ O
0110 _ _ O
1000 _ _ O
8 _ _ O
0111 _ _ O
7 _ _ O
6 _ _ O
4 _ _ O
5 _ _ O
-6 _ _ O
1001 _ _ O
0000 _ _ O
1 _ _ O
0001 _ _ O
0010 _ _ O
2 _ _ O
0011 _ _ O
0100 _ _ O
0101 _ _ O
0110 _ _ O
1000 _ _ O
0111 _ _ O
-7 _ _ O
-8 _ _ O
7 _ _ O
6 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O

Two _ _ O
's _ _ O
complement _ _ O
negation _ _ O
● _ _ O
( _ _ O
assuming _ _ O
4 _ _ O
bits _ _ O
) _ _ O
What _ _ O
about _ _ O
? _ _ O
? _ _ O
? _ _ O
-8 _ _ O
? _ _ O
o _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
negate _ _ O
-8 _ _ O
? _ _ O
▪ _ _ O
i.e. _ _ O
- _ _ O
( _ _ O
-8 _ _ O
) _ _ O
? _ _ O
- _ _ O
( _ _ O
-8 _ _ O
) _ _ O
1000 _ _ O
bit _ _ O
pattern _ _ O
for _ _ O
negative _ _ O
8 _ _ O
? _ _ O
flip _ _ O
! _ _ O
0111 _ _ O
WHAT _ _ O
DID _ _ O
YOU _ _ O
DO _ _ O
WRONG _ _ O
? _ _ O
? _ _ O
? _ _ O
? _ _ O
? _ _ O
? _ _ O
1000 _ _ O
Add _ _ O
1 _ _ O
! _ _ O
-8 _ _ O
? _ _ O
? _ _ O
? _ _ O
-1 _ _ O
0 _ _ O
-2 _ _ O
1111 _ _ O
1110 _ _ O
-3 _ _ O
1101 _ _ O
0000 _ _ O
-6 _ _ O
0001 _ _ O
0010 _ _ O
2 _ _ O
0011 _ _ O
-4 _ _ O
1100 _ _ O
1011 _ _ O
-5 _ _ O
1010 _ _ O
1001 _ _ O
1 _ _ O
0100 _ _ O
0101 _ _ O
0110 _ _ O
1000 _ _ O
0111 _ _ O
-7 _ _ O
-8 _ _ O
7 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
23 _ _ O

Absolutely _ _ O
Bonkers _ _ O
– _ _ O
Slide _ _ O
borrowed _ _ O
from _ _ O
wilkie _ _ O
( _ _ O
449 _ _ O
) _ _ O
public _ _ O
class _ _ O
AbsTest _ _ O
{ _ _ O
public _ _ O
static _ _ O
int _ _ O
abs _ _ O
( _ _ O
int _ _ O
x _ _ O
) _ _ O
{ _ _ O
if _ _ O
( _ _ O
x _ _ O
< _ _ O
0 _ _ O
) _ _ O
{ _ _ O
x _ _ O
= _ _ O
-x _ _ O
; _ _ O
} _ _ O
return _ _ O
x _ _ O
; _ _ O
} _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
String.format _ _ O
( _ _ O
"|%d| _ _ O
= _ _ O
% _ _ O
d _ _ O
" _ _ O
, _ _ O
Integer.MIN_VALUE _ _ O
, _ _ O
AbsTest.abs _ _ O
( _ _ O
Integer.MIN_VALUE _ _ O
) _ _ O
) _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
/ _ _ O
/ _ _ O
Outputs _ _ O
: _ _ O
|-2147483648| _ _ O
= _ _ O
-2147483648 _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
– _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
Q _ _ O
: _ _ O
How _ _ O
many _ _ O
bits _ _ O
is _ _ O
a _ _ O
Java _ _ O
int _ _ O
? _ _ O
What _ _ O
happened _ _ O
here _ _ O
? _ _ O
24 _ _ O

Neat _ _ O
properties _ _ O
● _ _ O
If _ _ O
we _ _ O
take _ _ O
a _ _ O
positive _ _ O
number _ _ O
and _ _ O
add _ _ O
zeros _ _ O
: _ _ O
o _ _ O
12010 _ _ O
= _ _ O
0111 _ _ O
10002 _ _ O
o _ _ O
0000 _ _ O
0000 _ _ O
0111 _ _ O
10002 _ _ O
= _ _ O
12010 _ _ O
● _ _ O
If _ _ O
we _ _ O
take _ _ O
a _ _ O
negative _ _ O
number _ _ O
and _ _ O
add _ _ O
ones _ _ O
: _ _ O
o _ _ O
1000 _ _ O
01112 _ _ O
= _ _ O
- _ _ O
0111 _ _ O
10002 _ _ O
+ _ _ O
12 _ _ O
= _ _ O
- _ _ O
0111 _ _ O
10012 _ _ O
= _ _ O
-12110 _ _ O
o _ _ O
1111 _ _ O
1111 _ _ O
1000 _ _ O
01112 _ _ O
= _ _ O
- _ _ O
0000 _ _ O
0000 _ _ O
0111 _ _ O
10002+12 _ _ O
= _ _ O
- _ _ O
0000 _ _ O
0000 _ _ O
0111 _ _ O
10012 _ _ O
= _ _ O
- _ _ O
12110 _ _ O
25 _ _ O

A _ _ O
return _ _ O
to _ _ O
E _ _ O
X _ _ O
P _ _ O
A _ _ O
N _ _ O
D _ _ O
V _ _ O
A _ _ O
L _ _ O
U _ _ O
E _ _ O
● _ _ O
if _ _ O
you _ _ O
load _ _ O
a _ _ O
byte _ _ O
… _ _ O
31 _ _ O
0 _ _ O
00000000 _ _ O
00000000 _ _ O
00000000 _ _ O
00000000 _ _ O
10010000 _ _ O
If _ _ O
the _ _ O
byte _ _ O
is _ _ O
signed _ _ O
… _ _ O
what _ _ O
should _ _ O
it _ _ O
become _ _ O
? _ _ O
31 _ _ O
0 _ _ O
11111111 _ _ O
11111111 _ _ O
11111111 _ _ O
10010000 _ _ O
If _ _ O
the _ _ O
byte _ _ O
is _ _ O
unsigned _ _ O
… _ _ O
what _ _ O
should _ _ O
it _ _ O
become _ _ O
? _ _ O
31 _ _ O
0 _ _ O
00000000 _ _ O
00000000 _ _ O
00000000 _ _ O
10010000 _ _ O
lb _ _ O
does _ _ O
sign _ _ O
extension _ _ O
. _ _ O
lbu _ _ O
does _ _ O
zero _ _ O
extension _ _ O
. _ _ O
26 _ _ O

Overflow _ _ O
27 _ _ O

Overflow _ _ O
● _ _ O
In _ _ O
computers _ _ O
, _ _ O
numbers _ _ O
are _ _ O
finite _ _ O
. _ _ O
● _ _ O
Let _ _ O
's _ _ O
say _ _ O
our _ _ O
4-digit _ _ O
display _ _ O
was _ _ O
counting _ _ O
up _ _ O
: _ _ O
9997 _ _ O
, _ _ O
9998 _ _ O
, _ _ O
9999 _ _ O
… _ _ O
● _ _ O
What _ _ O
comes _ _ O
" _ _ O
next _ _ O
" _ _ O
? _ _ O
o _ _ O
What _ _ O
does _ _ O
this _ _ O
" _ _ O
0000 _ _ O
" _ _ O
really _ _ O
mean _ _ O
? _ _ O
o _ _ O
It _ _ O
wrapped _ _ O
around _ _ O
. _ _ O
● _ _ O
This _ _ O
is _ _ O
overflow _ _ O
: _ _ O
the _ _ O
number _ _ O
you _ _ O
are _ _ O
trying _ _ O
to _ _ O
represent _ _ O
is _ _ O
too _ _ O
big _ _ O
to _ _ O
be _ _ O
represented _ _ O
. _ _ O
● _ _ O
Essentially _ _ O
, _ _ O
all _ _ O
arithmetic _ _ O
on _ _ O
the _ _ O
computer _ _ O
is _ _ O
modular _ _ O
arithmetic _ _ O
! _ _ O
o _ _ O
This _ _ O
causes _ _ O
a _ _ O
lot _ _ O
of _ _ O
software _ _ O
bugs _ _ O
. _ _ O
o _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
en.wikipedia.org _ _ O
/ _ _ O
wiki _ _ O
/ _ _ O
Pac-Man#Level_256 _ _ O
28 _ _ O

Number _ _ O
carrousel _ _ O
● _ _ O
Computers _ _ O
perform _ _ O
modulus _ _ O
arithmetic _ _ O
o _ _ O
Meaning _ _ O
: _ _ O
it _ _ O
goes _ _ O
around _ _ O
! _ _ O
o _ _ O
E.g. _ _ O
in _ _ O
a _ _ O
4-bit _ _ O
computer _ _ O
15 _ _ O
0 _ _ O
14 _ _ O
1111 _ _ O
1110 _ _ O
13 _ _ O
1101 _ _ O
0000 _ _ O
1001 _ _ O
0001 _ _ O
0010 _ _ O
2 _ _ O
0011 _ _ O
12 _ _ O
1100 _ _ O
1011 _ _ O
11 _ _ O
1010 _ _ O
10 _ _ O
1 _ _ O
0100 _ _ O
0101 _ _ O
0110 _ _ O
0111 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
0110 _ _ O
8 _ _ O
7 _ _ O
+0111 _ _ O
what _ _ O
is _ _ O
6 _ _ O
+ _ _ O
7 _ _ O
? _ _ O
1101 _ _ O
9 _ _ O
1000 _ _ O
29 _ _ O

Unsigned _ _ O
overflowing _ _ O
15 _ _ O
0 _ _ O
14 _ _ O
1111 _ _ O
1110 _ _ O
13 _ _ O
1101 _ _ O
0000 _ _ O
1001 _ _ O
9 _ _ O
2 _ _ O
0010 _ _ O
0100 _ _ O
0101 _ _ O
0110 _ _ O
1000 _ _ O
8 _ _ O
Uhhhhh _ _ O
0001 _ _ O
0011 _ _ O
12 _ _ O
1100 _ _ O
1011 _ _ O
11 _ _ O
1010 _ _ O
10 _ _ O
1 _ _ O
0111 _ _ O
6 _ _ O
7 _ _ O
what _ _ O
is _ _ O
14 _ _ O
+ _ _ O
7 _ _ O
? _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
1110 _ _ O
+0111 _ _ O
10101 _ _ O
If _ _ O
the _ _ O
result _ _ O
is _ _ O
smaller _ _ O
than _ _ O
either _ _ O
addend _ _ O
, _ _ O
there _ _ O
is _ _ O
an _ _ O
overflow _ _ O
30 _ _ O

Signed _ _ O
overflowing _ _ O
● _ _ O
It _ _ O
may _ _ O
also _ _ O
happen _ _ O
with _ _ O
signed _ _ O
numbers _ _ O
what _ _ O
is _ _ O
-6 _ _ O
- _ _ O
7 _ _ O
? _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
This _ _ O
is _ _ O
OK _ _ O
! _ _ O
-1 _ _ O
0 _ _ O
-2 _ _ O
1111 _ _ O
1110 _ _ O
-3 _ _ O
1101 _ _ O
0000 _ _ O
The _ _ O
sign _ _ O
of _ _ O
overflow _ _ O
is _ _ O
the _ _ O
opposite _ _ O
sign _ _ O
-6 _ _ O
1001 _ _ O
0001 _ _ O
0010 _ _ O
0100 _ _ O
0101 _ _ O
0110 _ _ O
1000 _ _ O
4 _ _ O
5 _ _ O
what _ _ O
is _ _ O
6 _ _ O
+ _ _ O
7 _ _ O
? _ _ O
2 _ _ O
0011 _ _ O
-4 _ _ O
1100 _ _ O
1011 _ _ O
-5 _ _ O
1010 _ _ O
1010 _ _ O
+1001 _ _ O
0011 _ _ O
1 _ _ O
0111 _ _ O
-7 _ _ O
-8 _ _ O
7 _ _ O
3 _ _ O
6 _ _ O
If _ _ O
the _ _ O
result _ _ O
of _ _ O
adding _ _ O
two _ _ O
numbers _ _ O
with _ _ O
the _ _ O
same _ _ O
sign _ _ O
results _ _ O
in _ _ O
the _ _ O
opposite _ _ O
sign _ _ O
, _ _ O
there _ _ O
is _ _ O
overflow _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0110 _ _ O
+0111 _ _ O
1101 _ _ O
31 _ _ O

Signed _ _ O
overflowing _ _ O
What _ _ O
about _ _ O
this _ _ O
? _ _ O
How _ _ O
can _ _ O
we _ _ O
detect _ _ O
if _ _ O
operations _ _ O
with _ _ O
different _ _ O
signs _ _ O
overflow _ _ O
? _ _ O
-1 _ _ O
0 _ _ O
-2 _ _ O
1111 _ _ O
1110 _ _ O
-3 _ _ O
1101 _ _ O
1001 _ _ O
1 _ _ O
0001 _ _ O
0010 _ _ O
2 _ _ O
0011 _ _ O
-4 _ _ O
1100 _ _ O
1011 _ _ O
-5 _ _ O
1010 _ _ O
-6 _ _ O
This _ _ O
is _ _ O
impossible _ _ O
: _ _ O
Max _ _ O
positive _ _ O
= _ _ O
7 _ _ O
-1+7=6 _ _ O
! _ _ O
0000 _ _ O
0100 _ _ O
0101 _ _ O
0110 _ _ O
1000 _ _ O
0111 _ _ O
-7 _ _ O
-8 _ _ O
7 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
32 _ _ O

How _ _ O
many _ _ O
bits _ _ O
? _ _ O
● _ _ O
if _ _ O
you _ _ O
add _ _ O
two _ _ O
2-digit _ _ O
decimal _ _ O
numbers _ _ O
, _ _ O
what _ _ O
's _ _ O
the _ _ O
largest _ _ O
number _ _ O
you _ _ O
can _ _ O
get _ _ O
? _ _ O
● _ _ O
what _ _ O
about _ _ O
two _ _ O
4-digit _ _ O
decimal _ _ O
numbers _ _ O
? _ _ O
● _ _ O
what _ _ O
about _ _ O
two _ _ O
4-bit _ _ O
numbers _ _ O
? _ _ O
● _ _ O
what _ _ O
's _ _ O
the _ _ O
pattern _ _ O
of _ _ O
the _ _ O
number _ _ O
of _ _ O
digits _ _ O
? _ _ O
o _ _ O
if _ _ O
you _ _ O
add _ _ O
two _ _ O
n-digit _ _ O
numbers _ _ O
in _ _ O
any _ _ O
base _ _ O
… _ _ O
o _ _ O
the _ _ O
result _ _ O
will _ _ O
have _ _ O
at _ _ O
most _ _ O
n _ _ O
+ _ _ O
1 _ _ O
digits _ _ O
● _ _ O
that _ _ O
means _ _ O
if _ _ O
we _ _ O
add _ _ O
two _ _ O
32-bit _ _ O
numbers _ _ O
… _ _ O
o _ _ O
… _ _ O
we _ _ O
might _ _ O
get _ _ O
a _ _ O
33-bit _ _ O
result _ _ O
! _ _ O
o _ _ O
if _ _ O
we _ _ O
have _ _ O
more _ _ O
bits _ _ O
than _ _ O
we _ _ O
can _ _ O
store _ _ O
in _ _ O
our _ _ O
number _ _ O
, _ _ O
that _ _ O
's _ _ O
overflow _ _ O
. _ _ O
99 _ _ O
9999 _ _ O
+99 _ _ O
+9999 _ _ O
198 _ _ O
19998 _ _ O
1111 _ _ O
+1111 _ _ O
11110 _ _ O
Q _ _ O
: _ _ O
How _ _ O
many _ _ O
bits _ _ O
do _ _ O
you _ _ O
need _ _ O
to _ _ O
represent _ _ O
-16 _ _ O
in _ _ O
1s _ _ O
’ _ _ O
complement _ _ O
? _ _ O
Q _ _ O
: _ _ O
How _ _ O
many _ _ O
bits _ _ O
do _ _ O
you _ _ O
need _ _ O
to _ _ O
represent _ _ O
-16 _ _ O
in _ _ O
2 _ _ O
’s _ _ O
complement _ _ O
? _ _ O
33 _ _ O

Handling _ _ O
overflow _ _ O
● _ _ O
we _ _ O
could _ _ O
ignore _ _ O
it _ _ O
o _ _ O
in _ _ O
MIPS _ _ O
: _ _ O
addu _ _ O
, _ _ O
subu _ _ O
o _ _ O
this _ _ O
is _ _ O
usually _ _ O
a _ _ O
bad _ _ O
idea _ _ O
▪ _ _ O
your _ _ O
program _ _ O
is _ _ O
broken _ _ O
o _ _ O
it _ _ O
's _ _ O
also _ _ O
the _ _ O
default _ _ O
in _ _ O
most _ _ O
languages _ _ O
, _ _ O
thanks _ _ O
C _ _ O
● _ _ O
we _ _ O
could _ _ O
fall _ _ O
on _ _ O
the _ _ O
floor _ _ O
- _ _ O
i.e. _ _ O
crash _ _ O
o _ _ O
in _ _ O
MIPS _ _ O
add _ _ O
, _ _ O
sub _ _ O
o _ _ O
can _ _ O
be _ _ O
handled _ _ O
and _ _ O
recovered _ _ O
from _ _ O
o _ _ O
but _ _ O
more _ _ O
complex _ _ O
● _ _ O
we _ _ O
could _ _ O
store _ _ O
that _ _ O
33rd _ _ O
bit _ _ O
somewhere _ _ O
else _ _ O
34 _ _ O

Maybe _ _ O
the _ _ O
bit _ _ O
bucket _ _ O
is _ _ O
a _ _ O
real _ _ O
place _ _ O
… _ _ O
● _ _ O
many _ _ O
other _ _ O
architectures _ _ O
do _ _ O
this _ _ O
o _ _ O
MIPS _ _ O
does _ _ O
not _ _ O
. _ _ O
● _ _ O
they _ _ O
have _ _ O
a _ _ O
" _ _ O
carry _ _ O
bit _ _ O
" _ _ O
register _ _ O
o _ _ O
this _ _ O
can _ _ O
be _ _ O
checked _ _ O
by _ _ O
the _ _ O
program _ _ O
after _ _ O
an _ _ O
add _ _ O
/ _ _ O
sub _ _ O
● _ _ O
this _ _ O
is _ _ O
very _ _ O
useful _ _ O
for _ _ O
arbitrary _ _ O
precision _ _ O
arithmetic _ _ O
o _ _ O
if _ _ O
you _ _ O
want _ _ O
to _ _ O
add _ _ O
2048-bit _ _ O
numbers _ _ O
, _ _ O
chain _ _ O
many _ _ O
32-bit _ _ O
additions _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0010 _ _ O
1001 _ _ O
+0001 _ _ O
1100 _ _ O
0100 _ _ O
0101 _ _ O
0010 _ _ O
+0001 _ _ O
0100 _ _ O
1001 _ _ O
+1100 _ _ O
0101 _ _ O
add8bit _ _ O
add4bit _ _ O
add4bit _ _ O
35 _ _ O

More _ _ O
Bonkers _ _ O
public _ _ O
class _ _ O
Main _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
int _ _ O
w _ _ O
= _ _ O
Integer.MAX_VALUE _ _ O
; _ _ O
if _ _ O
( _ _ O
w _ _ O
+ _ _ O
1 _ _ O
> _ _ O
w _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"This _ _ O
does _ _ O
not _ _ O
happen.\n _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
int _ _ O
z _ _ O
= _ _ O
w _ _ O
+ _ _ O
1 _ _ O
; _ _ O
if _ _ O
( _ _ O
z _ _ O
> _ _ O
w _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"This _ _ O
does _ _ O
not _ _ O
happen.\n _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
System.out.println _ _ O
( _ _ O
"The _ _ O
end.\n _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
– _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
36 _ _ O

I _ _ O
have _ _ O
a _ _ O
book _ _ O
37 _ _ O

What _ _ O
’s _ _ O
the _ _ O
first _ _ O
page _ _ O
? _ _ O
Hilarious _ _ O
, _ _ O
right _ _ O
? _ _ O
38 _ _ O

Then _ _ O
… _ _ O
What _ _ O
follows _ _ O
, _ _ O
chapter _ _ O
1 _ _ O
? _ _ O
( _ _ O
it _ _ O
’s _ _ O
not _ _ O
! _ _ O
) _ _ O
What _ _ O
number _ _ O
page _ _ O
number _ _ O
does _ _ O
it _ _ O
start _ _ O
at _ _ O
? _ _ O
( _ _ O
it _ _ O
’s _ _ O
not _ _ O
“ _ _ O
2 _ _ O
” _ _ O
! _ _ O
) _ _ O
39 _ _ O

Is _ _ O
it _ _ O
zero _ _ O
? _ _ O
Where _ _ O
does _ _ O
it _ _ O
end _ _ O
? _ _ O
( _ _ O
nope _ _ O
! _ _ O
) _ _ O
40 _ _ O

Yikes _ _ O
… _ _ O
. _ _ O
What _ _ O
can _ _ O
possible _ _ O
come _ _ O
after _ _ O
zero _ _ O
? _ _ O
( _ _ O
How _ _ O
much _ _ O
is _ _ O
0 _ _ O
- _ _ O
1 _ _ O
? _ _ O
) _ _ O
41 _ _ O



