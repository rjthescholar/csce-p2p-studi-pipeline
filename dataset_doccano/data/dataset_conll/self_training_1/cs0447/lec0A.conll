self_training_1|cs0447|lec0A
-DOCSTART- -X- -X- O

# _ _ O
A _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Fractions _ _ O
and _ _ O
Floating _ _ O
Point _ _ O
Original _ _ O
slides _ _ O
by _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
Modified _ _ O
with _ _ O
bits _ _ O
from _ _ O
: _ _ O
Bruce _ _ O
Childers _ _ O
, _ _ O
David _ _ O
Wilkinson _ _ O
Luís _ _ O
Oliveira _ _ O
Fall _ _ O
2020 _ _ O

Announcements _ _ O
● _ _ O
Do _ _ O
n’t _ _ O
forget _ _ O
the _ _ O
points _ _ O
for _ _ O
discussing _ _ O
your _ _ O
project _ _ O
solution _ _ O
with _ _ O
your _ _ O
TA _ _ O
are _ _ O
expiring _ _ O
2 _ _ O

Fractional _ _ O
Binary _ _ O
3 _ _ O

Fractional _ _ O
numbers _ _ O
● _ _ O
Up _ _ O
to _ _ O
this _ _ O
point _ _ O
we _ _ O
have _ _ O
been _ _ O
working _ _ O
with _ _ O
integer _ _ O
numbers _ _ O
. _ _ O
o _ _ O
Unsigned _ _ O
and _ _ O
signed _ _ O
! _ _ O
2019 _ _ O
2 _ _ O
0 _ _ O
1 _ _ O
9.320 _ _ O
● _ _ O
However _ _ O
, _ _ O
Real _ _ O
world _ _ O
numbers _ _ O
are _ _ O
… _ _ O
Real _ _ O
numbers _ _ O
. _ _ O
Like _ _ O
so _ _ O
: _ _ O
● _ _ O
That _ _ O
create _ _ O
new _ _ O
challenges _ _ O
! _ _ O
o _ _ O
Let _ _ O
’s _ _ O
start _ _ O
by _ _ O
taking _ _ O
a _ _ O
look _ _ O
at _ _ O
them _ _ O
. _ _ O
4 _ _ O

Just _ _ O
a _ _ O
fraction _ _ O
of _ _ O
a _ _ O
number _ _ O
● _ _ O
The _ _ O
numbers _ _ O
we _ _ O
use _ _ O
are _ _ O
written _ _ O
positionally _ _ O
: _ _ O
the _ _ O
position _ _ O
of _ _ O
a _ _ O
digit _ _ O
within _ _ O
the _ _ O
number _ _ O
has _ _ O
a _ _ O
meaning _ _ O
. _ _ O
● _ _ O
What _ _ O
about _ _ O
when _ _ O
the _ _ O
numbers _ _ O
go _ _ O
over _ _ O
the _ _ O
decimal _ _ O
point _ _ O
? _ _ O
? _ _ O
2 _ _ O
0 _ _ O
1 _ _ O
9 _ _ O
. _ _ O
3 _ _ O
2 _ _ O
0 _ _ O
1000s _ _ O
100s _ _ O
10s _ _ O
1s _ _ O
10ths _ _ O
100ths _ _ O
1000ths _ _ O
103 _ _ O
102 _ _ O
101 _ _ O
100 _ _ O
10 _ _ O
- _ _ O
1 _ _ O
10 _ _ O
- _ _ O
2 _ _ O
10 _ _ O
- _ _ O
3 _ _ O
5 _ _ O

A _ _ O
fraction _ _ O
of _ _ O
a _ _ O
bit _ _ O
? _ _ O
● _ _ O
Binary _ _ O
is _ _ O
the _ _ O
same _ _ O
! _ _ O
● _ _ O
Just _ _ O
replace _ _ O
10s _ _ O
with _ _ O
2s _ _ O
. _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
.1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
23 _ _ O
8s _ _ O
22 _ _ O
4s _ _ O
21 _ _ O
2s _ _ O
20 _ _ O
1s _ _ O
2 _ _ O
- _ _ O
1 _ _ O
2ths _ _ O
? _ _ O
2 _ _ O
- _ _ O
2 _ _ O
4ths _ _ O
2 _ _ O
- _ _ O
3 _ _ O
8ths _ _ O
2 _ _ O
- _ _ O
4 _ _ O
16ths _ _ O
6 _ _ O

To _ _ O
convert _ _ O
into _ _ O
decimal _ _ O
, _ _ O
just _ _ O
add _ _ O
stuff _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
.1 _ _ O
1 _ _ O
0 _ _ O
1= _ _ O
23 _ _ O
22 _ _ O
21 _ _ O
20 _ _ O
0×8 _ _ O
+ _ _ O
1×4 _ _ O
+ _ _ O
1×2 _ _ O
+ _ _ O
0×1 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
.5 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
.25 _ _ O
+ _ _ O
0 _ _ O
× _ _ O
.125 _ _ O
+ _ _ O
1 _ _ O
× _ _ O
.0625 _ _ O
2 _ _ O
- _ _ O
1 _ _ O
2 _ _ O
- _ _ O
2 _ _ O
2 _ _ O
- _ _ O
3 _ _ O
2 _ _ O
- _ _ O
4 _ _ O
= _ _ O
6.812510 _ _ O
7 _ _ O

From _ _ O
decimal _ _ O
to _ _ O
binary _ _ O
? _ _ O
Tricky _ _ O
? _ _ O
6÷210 _ _ O
= _ _ O
3R0 _ _ O
6.8125 _ _ O
10 _ _ O
3÷210 _ _ O
= _ _ O
1R1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
. _ _ O
1101 _ _ O
0.812510 _ _ O
x _ _ O
2 _ _ O
1.6250 _ _ O
MSB _ _ O
0.625010 _ _ O
x _ _ O
2 _ _ O
1.2500 _ _ O
0.250010 _ _ O
x _ _ O
2 _ _ O
0.5000 _ _ O
0.500010 _ _ O
x _ _ O
2 _ _ O
1.0000 _ _ O
LSB _ _ O
8 _ _ O

So _ _ O
, _ _ O
it _ _ O
’s _ _ O
easy _ _ O
right _ _ O
? _ _ O
Well _ _ O
… _ _ O
What _ _ O
about _ _ O
: _ _ O
0.1 _ _ O
10 _ _ O
0.110 _ _ O
x _ _ O
2 _ _ O
0.2 _ _ O
0.210 _ _ O
x2 _ _ O
0.4 _ _ O
0 _ _ O
. _ _ O
0001 _ _ O
0.410 _ _ O
x _ _ O
2 _ _ O
0.8 _ _ O
0.810 _ _ O
x _ _ O
2 _ _ O
1.6 _ _ O
9 _ _ O

So _ _ O
, _ _ O
it _ _ O
’s _ _ O
easy _ _ O
right _ _ O
? _ _ O
Well _ _ O
…… _ _ O
What _ _ O
about _ _ O
: _ _ O
0.1 _ _ O
10 _ _ O
0 _ _ O
. _ _ O
0001 _ _ O
1001 _ _ O
0.610 _ _ O
x _ _ O
2 _ _ O
1.2 _ _ O
0.110 _ _ O
x _ _ O
2 _ _ O
0.2 _ _ O
0.210 _ _ O
x2 _ _ O
0.4 _ _ O
0.210 _ _ O
x2 _ _ O
0.4 _ _ O
0.410 _ _ O
x _ _ O
2 _ _ O
0.8 _ _ O
0.410 _ _ O
x _ _ O
2 _ _ O
0.8 _ _ O
0.810 _ _ O
x _ _ O
2 _ _ O
1.6 _ _ O
0.810 _ _ O
x _ _ O
2 _ _ O
1.6 _ _ O
10 _ _ O

So _ _ O
, _ _ O
it _ _ O
’s _ _ O
easy _ _ O
right _ _ O
? _ _ O
Well _ _ O
… _ _ O
…… _ _ O
What _ _ O
about _ _ O
: _ _ O
0.1 _ _ O
10 _ _ O
0 _ _ O
. _ _ O
0001 _ _ O
1001 _ _ O
10 _ _ O
0 _ _ O
1 _ _ O
... _ _ O
0.610 _ _ O
x _ _ O
2 _ _ O
1.2 _ _ O
0.610 _ _ O
x _ _ O
2 _ _ O
1.2 _ _ O
0.110 _ _ O
x _ _ O
2 _ _ O
0.2 _ _ O
0.210 _ _ O
x2 _ _ O
0.4 _ _ O
0.210 _ _ O
x2 _ _ O
0.4 _ _ O
0.210 _ _ O
x2 _ _ O
0.4 _ _ O
0.410 _ _ O
x _ _ O
2 _ _ O
0.8 _ _ O
0.410 _ _ O
x _ _ O
2 _ _ O
0.8 _ _ O
0.410 _ _ O
x _ _ O
2 _ _ O
0.8 _ _ O
0.810 _ _ O
x _ _ O
2 _ _ O
1.6 _ _ O
0.810 _ _ O
x _ _ O
2 _ _ O
1.6 _ _ O
0.810 _ _ O
x _ _ O
2 _ _ O
1.6 _ _ O
11 _ _ O

How _ _ O
much _ _ O
is _ _ O
it _ _ O
worth _ _ O
? _ _ O
•Well _ _ O
, _ _ O
it _ _ O
depends _ _ O
on _ _ O
where _ _ O
you _ _ O
stop _ _ O
! _ _ O
0.0001 _ _ O
2 _ _ O
= _ _ O
0.0625 _ _ O
0.00011001 _ _ O
2 _ _ O
= _ _ O
0.0976 _ _ O
… _ _ O
0.000110011001 _ _ O
2 _ _ O
= _ _ O
0.0998 _ _ O
… _ _ O
12 _ _ O

Limited _ _ O
space _ _ O
! _ _ O
● _ _ O
How _ _ O
much _ _ O
should _ _ O
we _ _ O
store _ _ O
? _ _ O
o _ _ O
We _ _ O
have _ _ O
32-bit _ _ O
registers _ _ O
, _ _ O
so _ _ O
32-bits _ _ O
? _ _ O
▪ _ _ O
Let _ _ O
’s _ _ O
say _ _ O
we _ _ O
do _ _ O
! _ _ O
● _ _ O
How _ _ O
many _ _ O
bits _ _ O
are _ _ O
used _ _ O
to _ _ O
store _ _ O
the _ _ O
integer _ _ O
part _ _ O
? _ _ O
● _ _ O
How _ _ O
many _ _ O
bits _ _ O
are _ _ O
used _ _ O
to _ _ O
store _ _ O
the _ _ O
fractional _ _ O
part _ _ O
? _ _ O
● _ _ O
What _ _ O
are _ _ O
the _ _ O
tradeoffs _ _ O
? _ _ O
13 _ _ O

A _ _ O
rising _ _ O
tide _ _ O
● _ _ O
Maybe _ _ O
half-and-half _ _ O
? _ _ O
16.16 _ _ O
number _ _ O
looks _ _ O
like _ _ O
this _ _ O
: _ _ O
0011 _ _ O
0000 _ _ O
0101 _ _ O
1010.1000 _ _ O
0000 _ _ O
1111 _ _ O
1111 _ _ O
binary _ _ O
point _ _ O
the _ _ O
largest _ _ O
( _ _ O
signed _ _ O
) _ _ O
value _ _ O
we _ _ O
the _ _ O
smallest _ _ O
fraction _ _ O
we _ _ O
can _ _ O
can _ _ O
represent _ _ O
is _ _ O
+32767.999 _ _ O
represent _ _ O
is _ _ O
1 _ _ O
/ _ _ O
65536 _ _ O
What _ _ O
if _ _ O
we _ _ O
place _ _ O
the _ _ O
binary _ _ O
point _ _ O
to _ _ O
the _ _ O
left _ _ O
… _ _ O
0011.0000 _ _ O
0101 _ _ O
1010 _ _ O
1000 _ _ O
0000 _ _ O
1111 _ _ O
1111 _ _ O
… _ _ O
we _ _ O
can _ _ O
get _ _ O
much _ _ O
higher _ _ O
accuracy _ _ O
near _ _ O
0 _ _ O
… _ _ O
… _ _ O
but _ _ O
if _ _ O
we _ _ O
place _ _ O
the _ _ O
binary _ _ O
point _ _ O
to _ _ O
the _ _ O
right _ _ O
… _ _ O
0011 _ _ O
0000 _ _ O
0101 _ _ O
1010 _ _ O
1000 _ _ O
0000.1111 _ _ O
1111 _ _ O
… _ _ O
then _ _ O
we _ _ O
trade _ _ O
off _ _ O
accuracy _ _ O
for _ _ O
range _ _ O
further _ _ O
away _ _ O
from _ _ O
0 _ _ O
. _ _ O
14 _ _ O

Mind _ _ O
the _ _ O
point _ _ O
● _ _ O
In _ _ O
this _ _ O
representation _ _ O
we _ _ O
assume _ _ O
that _ _ O
the _ _ O
lowest _ _ O
n _ _ O
digits _ _ O
are _ _ O
the _ _ O
decimal _ _ O
places _ _ O
. _ _ O
$ _ _ O
12.34 _ _ O
+ _ _ O
$ _ _ O
10.81 _ _ O
$ _ _ O
23.15 _ _ O
1234 _ _ O
+1081 _ _ O
2315 _ _ O
this _ _ O
is _ _ O
called _ _ O
fixed-point _ _ O
representation _ _ O
And _ _ O
it _ _ O
’s _ _ O
a _ _ O
bitfield _ _ O
:D _ _ O
15 _ _ O

Move _ _ O
the _ _ O
point _ _ O
● _ _ O
What _ _ O
if _ _ O
we _ _ O
could _ _ O
float _ _ O
the _ _ O
point _ _ O
around _ _ O
? _ _ O
o _ _ O
Enter _ _ O
scientific _ _ O
notation _ _ O
: _ _ O
The _ _ O
number _ _ O
-0.0039 _ _ O
can _ _ O
be _ _ O
represented _ _ O
: _ _ O
-0.39 _ _ O
-3.9 _ _ O
× _ _ O
10 _ _ O
- _ _ O
2 _ _ O
× _ _ O
10 _ _ O
- _ _ O
3 _ _ O
● _ _ O
These _ _ O
are _ _ O
both _ _ O
representing _ _ O
the _ _ O
same _ _ O
number _ _ O
, _ _ O
but _ _ O
we _ _ O
need _ _ O
to _ _ O
move _ _ O
the _ _ O
decimal _ _ O
point _ _ O
according _ _ O
to _ _ O
the _ _ O
power _ _ O
of _ _ O
ten _ _ O
represented _ _ O
. _ _ O
● _ _ O
The _ _ O
bottom _ _ O
example _ _ O
is _ _ O
in _ _ O
normalized _ _ O
scientific _ _ O
notation _ _ O
. _ _ O
o _ _ O
There _ _ O
is _ _ O
only _ _ O
one _ _ O
non-zero _ _ O
digit _ _ O
to _ _ O
the _ _ O
left _ _ O
of _ _ O
the _ _ O
point _ _ O
● _ _ O
Because _ _ O
the _ _ O
decimal _ _ O
point _ _ O
can _ _ O
be _ _ O
moved _ _ O
, _ _ O
we _ _ O
call _ _ O
this _ _ O
representation _ _ O
Floating _ _ O
point _ _ O
16 _ _ O

Floating-point _ _ O
number _ _ O
representation _ _ O
17 _ _ O

This _ _ O
could _ _ O
be _ _ O
a _ _ O
whole _ _ O
unit _ _ O
itself _ _ O
... _ _ O
● _ _ O
floating-point _ _ O
arithmetic _ _ O
is _ _ O
COMPLEX _ _ O
STUFF _ _ O
● _ _ O
However _ _ O
... _ _ O
o _ _ O
it _ _ O
's _ _ O
good _ _ O
to _ _ O
have _ _ O
an _ _ O
understanding _ _ O
of _ _ O
why _ _ O
limitations _ _ O
exist _ _ O
o _ _ O
it _ _ O
's _ _ O
good _ _ O
to _ _ O
have _ _ O
an _ _ O
appreciation _ _ O
of _ _ O
how _ _ O
complex _ _ O
this _ _ O
is _ _ O
... _ _ O
and _ _ O
how _ _ O
much _ _ O
better _ _ O
things _ _ O
are _ _ O
now _ _ O
than _ _ O
they _ _ O
were _ _ O
in _ _ O
the _ _ O
1970s _ _ O
and _ _ O
1980s _ _ O
o _ _ O
It _ _ O
’s _ _ O
good _ _ O
to _ _ O
know _ _ O
things _ _ O
do _ _ O
not _ _ O
behave _ _ O
as _ _ O
expected _ _ O
when _ _ O
using _ _ O
float _ _ O
and _ _ O
double _ _ O
! _ _ O
18 _ _ O

Binary _ _ O
numbers _ _ O
using _ _ O
IEEE _ _ O
754 _ _ O
● _ _ O
est _ _ O
' _ _ O
d _ _ O
1985 _ _ O
, _ _ O
updated _ _ O
as _ _ O
recently _ _ O
as _ _ O
2008 _ _ O
● _ _ O
standard _ _ O
for _ _ O
floating-point _ _ O
representation _ _ O
and _ _ O
arithmetic _ _ O
that _ _ O
virtually _ _ O
every _ _ O
CPU _ _ O
now _ _ O
uses _ _ O
● _ _ O
floating-point _ _ O
representation _ _ O
is _ _ O
based _ _ O
around _ _ O
scientific _ _ O
notation _ _ O
1348 _ _ O
= _ _ O
+1.348 _ _ O
× _ _ O
10+3 _ _ O
-0.0039 _ _ O
= _ _ O
-3.9 _ _ O
× _ _ O
10 _ _ O
- _ _ O
3 _ _ O
-1440000 _ _ O
= _ _ O
-1.44 _ _ O
× _ _ O
10+6 _ _ O
sign _ _ O
significand _ _ O
exponent _ _ O
19 _ _ O

Binary _ _ O
Scientific _ _ O
Notation _ _ O
● _ _ O
scientific _ _ O
notation _ _ O
works _ _ O
equally _ _ O
well _ _ O
in _ _ O
any _ _ O
other _ _ O
base _ _ O
! _ _ O
o _ _ O
( _ _ O
below _ _ O
uses _ _ O
base-10 _ _ O
exponents _ _ O
for _ _ O
clarity _ _ O
) _ _ O
+1001 _ _ O
0101 _ _ O
= _ _ O
+1.001 _ _ O
0101 _ _ O
× _ _ O
2+7 _ _ O
-0.001 _ _ O
010 _ _ O
= _ _ O
-1.010 _ _ O
× _ _ O
2 _ _ O
- _ _ O
3 _ _ O
-1001 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
= _ _ O
-1.001 _ _ O
× _ _ O
2+15 _ _ O
what _ _ O
do _ _ O
you _ _ O
notice _ _ O
about _ _ O
the _ _ O
digit _ _ O
before _ _ O
the _ _ O
binary _ _ O
point _ _ O
using _ _ O
normalized _ _ O
representation _ _ O
? _ _ O
( _ _ O
-1 _ _ O
) _ _ O
s _ _ O
x _ _ O
1.f _ _ O
× _ _ O
2exp _ _ O
s _ _ O
– _ _ O
sign _ _ O
f _ _ O
– _ _ O
fraction _ _ O
1.f _ _ O
– _ _ O
significand _ _ O
exp _ _ O
– _ _ O
exponent _ _ O
20 _ _ O

IEEE _ _ O
754 _ _ O
Single-precision _ _ O
● _ _ O
Known _ _ O
as _ _ O
float _ _ O
in _ _ O
C _ _ O
/ _ _ O
C++ _ _ O
/ _ _ O
Java _ _ O
etc _ _ O
. _ _ O
, _ _ O
32-bit _ _ O
float _ _ O
format _ _ O
● _ _ O
1 _ _ O
bit _ _ O
for _ _ O
sign _ _ O
, _ _ O
8 _ _ O
bits _ _ O
for _ _ O
the _ _ O
exponent _ _ O
, _ _ O
23 _ _ O
bits _ _ O
for _ _ O
the _ _ O
fraction _ _ O
● _ _ O
Tradeoff _ _ O
: _ _ O
o _ _ O
More _ _ O
accuracy _ _ O
➔ _ _ O
More _ _ O
fraction _ _ O
bits _ _ O
o _ _ O
More _ _ O
range _ _ O
➔ _ _ O
More _ _ O
exponent _ _ O
bits _ _ O
● _ _ O
Every _ _ O
design _ _ O
has _ _ O
tradeoffs _ _ O
¯\_ _ _ O
( _ _ O
ツ _ _ O
) _ _ O
_ _ _ O
/ _ _ O
¯ _ _ O
illustration _ _ O
from _ _ O
user _ _ O
Stannered _ _ O
on _ _ O
Wikimedia _ _ O
Commons _ _ O
21 _ _ O

IEEE _ _ O
754 _ _ O
Single-precision _ _ O
● _ _ O
Known _ _ O
as _ _ O
float _ _ O
in _ _ O
C _ _ O
/ _ _ O
C++ _ _ O
/ _ _ O
Java _ _ O
etc _ _ O
. _ _ O
, _ _ O
32-bit _ _ O
float _ _ O
format _ _ O
● _ _ O
1 _ _ O
bit _ _ O
for _ _ O
sign _ _ O
, _ _ O
8 _ _ O
bits _ _ O
for _ _ O
the _ _ O
exponent _ _ O
, _ _ O
23 _ _ O
bits _ _ O
for _ _ O
the _ _ O
fraction _ _ O
● _ _ O
The _ _ O
fraction _ _ O
field _ _ O
only _ _ O
stores _ _ O
the _ _ O
digits _ _ O
after _ _ O
the _ _ O
binary _ _ O
point _ _ O
● _ _ O
The _ _ O
1 _ _ O
before _ _ O
the _ _ O
binary _ _ O
point _ _ O
is _ _ O
implicit _ _ O
! _ _ O
o _ _ O
This _ _ O
is _ _ O
called _ _ O
normalized _ _ O
representation _ _ O
o _ _ O
In _ _ O
effect _ _ O
this _ _ O
gives _ _ O
us _ _ O
a _ _ O
24-bit _ _ O
significand _ _ O
● _ _ O
The _ _ O
significand _ _ O
of _ _ O
floating-point _ _ O
numbers _ _ O
is _ _ O
in _ _ O
sign-magnitude _ _ O
! _ _ O
o _ _ O
Do _ _ O
you _ _ O
remember _ _ O
the _ _ O
downside _ _ O
( _ _ O
s _ _ O
) _ _ O
? _ _ O
illustration _ _ O
from _ _ O
user _ _ O
Stannered _ _ O
on _ _ O
Wikimedia _ _ O
Commons _ _ O
22 _ _ O

The _ _ O
exponent _ _ O
field _ _ O
● _ _ O
the _ _ O
exponent _ _ O
field _ _ O
is _ _ O
8 _ _ O
bits _ _ O
, _ _ O
and _ _ O
can _ _ O
hold _ _ O
positive _ _ O
or _ _ O
negative _ _ O
exponents _ _ O
, _ _ O
but _ _ O
... _ _ O
it _ _ O
does _ _ O
n't _ _ O
use _ _ O
S-M _ _ O
, _ _ O
1 _ _ O
's _ _ O
, _ _ O
or _ _ O
2 _ _ O
's _ _ O
complement _ _ O
. _ _ O
● _ _ O
it _ _ O
uses _ _ O
something _ _ O
called _ _ O
biased _ _ O
notation _ _ O
. _ _ O
o _ _ O
biased _ _ O
representation _ _ O
= _ _ O
exponent _ _ O
+ _ _ O
bias _ _ O
constant _ _ O
o _ _ O
single-precision _ _ O
floats _ _ O
use _ _ O
a _ _ O
bias _ _ O
constant _ _ O
of _ _ O
127 _ _ O
exp _ _ O
+ _ _ O
127 _ _ O
= _ _ O
> _ _ O
Biased _ _ O
-127 _ _ O
+ _ _ O
127 _ _ O
= _ _ O
> _ _ O
0 _ _ O
-10 _ _ O
+ _ _ O
127 _ _ O
= _ _ O
> _ _ O
117 _ _ O
34 _ _ O
+ _ _ O
127 _ _ O
= _ _ O
> _ _ O
161 _ _ O
● _ _ O
the _ _ O
exponent _ _ O
can _ _ O
range _ _ O
from _ _ O
-126 _ _ O
to _ _ O
+127 _ _ O
( _ _ O
1 _ _ O
to _ _ O
254 _ _ O
biased _ _ O
) _ _ O
o _ _ O
0 _ _ O
and _ _ O
255 _ _ O
are _ _ O
reserved _ _ O
! _ _ O
● _ _ O
why _ _ O
'd _ _ O
they _ _ O
do _ _ O
this _ _ O
? _ _ O
o _ _ O
You _ _ O
can _ _ O
sort _ _ O
floats _ _ O
with _ _ O
integer _ _ O
comparisons _ _ O
! _ _ O
23 _ _ O

Binary _ _ O
Scientific _ _ O
Notation _ _ O
( _ _ O
revisited _ _ O
) _ _ O
● _ _ O
Our _ _ O
previous _ _ O
numbers _ _ O
are _ _ O
actually _ _ O
bias _ _ O
= _ _ O
127 _ _ O
+1.001 _ _ O
0101 _ _ O
× _ _ O
2+7 _ _ O
sign _ _ O
= _ _ O
0 _ _ O
( _ _ O
positive _ _ O
number _ _ O
! _ _ O
) _ _ O
Biased _ _ O
exponent _ _ O
= _ _ O
exp _ _ O
+ _ _ O
127 _ _ O
= _ _ O
7 _ _ O
+ _ _ O
127 _ _ O
= _ _ O
134 _ _ O
= _ _ O
10000110 _ _ O
fraction _ _ O
= _ _ O
0010101 _ _ O
( _ _ O
ignore _ _ O
the _ _ O
“ _ _ O
1 _ _ O
. _ _ O
” _ _ O
) _ _ O
s _ _ O
E _ _ O
f _ _ O
0 _ _ O
10000110 _ _ O
00101010000000000…000 _ _ O
( _ _ O
-1 _ _ O
) _ _ O
0 _ _ O
x _ _ O
1.001 _ _ O
0101 _ _ O
× _ _ O
2134 _ _ O
- _ _ O
127 _ _ O
24 _ _ O

Binary _ _ O
Scientific _ _ O
Notation _ _ O
( _ _ O
revisited _ _ O
) _ _ O
● _ _ O
Our _ _ O
previous _ _ O
numbers _ _ O
are _ _ O
actually _ _ O
bias _ _ O
= _ _ O
127 _ _ O
-1.010 _ _ O
× _ _ O
2 _ _ O
- _ _ O
3 _ _ O
= _ _ O
sign _ _ O
= _ _ O
1 _ _ O
( _ _ O
negative _ _ O
number _ _ O
! _ _ O
) _ _ O
Biased _ _ O
exponent _ _ O
= _ _ O
exp _ _ O
+ _ _ O
127 _ _ O
= _ _ O
-3 _ _ O
+ _ _ O
127 _ _ O
= _ _ O
124 _ _ O
= _ _ O
01111100 _ _ O
fraction _ _ O
= _ _ O
010 _ _ O
( _ _ O
ignore _ _ O
the _ _ O
“ _ _ O
1 _ _ O
. _ _ O
” _ _ O
) _ _ O
s _ _ O
E _ _ O
f _ _ O
1 _ _ O
01111100 _ _ O
01000000000000000…000 _ _ O
( _ _ O
-1 _ _ O
) _ _ O
1 _ _ O
x _ _ O
1.010 _ _ O
× _ _ O
2124 _ _ O
- _ _ O
127 _ _ O
25 _ _ O

Binary _ _ O
Scientific _ _ O
Notation _ _ O
( _ _ O
revisited _ _ O
) _ _ O
● _ _ O
Our _ _ O
previous _ _ O
numbers _ _ O
are _ _ O
actually _ _ O
bias _ _ O
= _ _ O
127 _ _ O
-1.001 _ _ O
× _ _ O
2+15= _ _ O
sign _ _ O
= _ _ O
? _ _ O
Biased _ _ O
exponent _ _ O
= _ _ O
? _ _ O
fraction _ _ O
= _ _ O
? _ _ O
s _ _ O
E _ _ O
f _ _ O
? _ _ O
? _ _ O
? _ _ O
26 _ _ O

Check _ _ O
it _ _ O
on _ _ O
C++ _ _ O
( _ _ O
there _ _ O
are _ _ O
online _ _ O
tools _ _ O
for _ _ O
this _ _ O
! _ _ O
) _ _ O
# _ _ O
include _ _ O
< _ _ O
iostream _ _ O
> _ _ O
# _ _ O
include _ _ O
< _ _ O
bitset _ _ O
> _ _ O
int _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
This _ _ O
is _ _ O
the _ _ O
number _ _ O
from _ _ O
the _ _ O
previous _ _ O
slide _ _ O
float _ _ O
x _ _ O
{ _ _ O
-0b1001000000000000 _ _ O
} _ _ O
; _ _ O
/ _ _ O
/ _ _ O
C++ _ _ O
does _ _ O
not _ _ O
shift _ _ O
floats _ _ O
:( _ _ O
/ _ _ O
/ _ _ O
This _ _ O
is _ _ O
C++-whispering _ _ O
: _ _ O
it _ _ O
allows _ _ O
me _ _ O
to _ _ O
shift _ _ O
the _ _ O
bits _ _ O
:) _ _ O
int _ _ O
num _ _ O
{ _ _ O
* _ _ O
( _ _ O
int* _ _ O
) _ _ O
& _ _ O
x _ _ O
} _ _ O
; _ _ O
/ _ _ O
/ _ _ O
Extract _ _ O
the _ _ O
fields _ _ O
! _ _ O
std _ _ O
: _ _ O
: _ _ O
bitset _ _ O
< _ _ O
1 _ _ O
> _ _ O
sign _ _ O
= _ _ O
( _ _ O
num _ _ O
> _ _ O
> _ _ O
31 _ _ O
) _ _ O
& _ _ O
0x1 _ _ O
; _ _ O
std _ _ O
: _ _ O
: _ _ O
bitset _ _ O
< _ _ O
8 _ _ O
> _ _ O
biased_exp _ _ O
= _ _ O
( _ _ O
num _ _ O
> _ _ O
> _ _ O
23 _ _ O
) _ _ O
& _ _ O
0xFF _ _ O
; _ _ O
std _ _ O
: _ _ O
: _ _ O
bitset _ _ O
< _ _ O
23 _ _ O
> _ _ O
frac _ _ O
= _ _ O
( _ _ O
num _ _ O
> _ _ O
> _ _ O
0 _ _ O
) _ _ O
& _ _ O
0x7FFFFF _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
Now _ _ O
let _ _ O
’s _ _ O
print _ _ O
std _ _ O
: _ _ O
: _ _ O
cout _ _ O
< _ _ O
< _ _ O
" _ _ O
sign _ _ O
: _ _ O
" _ _ O
< _ _ O
< _ _ O
sign _ _ O
< _ _ O
< _ _ O
std _ _ O
: _ _ O
: _ _ O
endl _ _ O
; _ _ O
std _ _ O
: _ _ O
: _ _ O
cout _ _ O
< _ _ O
< _ _ O
" _ _ O
biased _ _ O
exponent _ _ O
: _ _ O
" _ _ O
< _ _ O
< _ _ O
biased_exp _ _ O
< _ _ O
< _ _ O
std _ _ O
: _ _ O
: _ _ O
endl _ _ O
; _ _ O
std _ _ O
: _ _ O
: _ _ O
cout _ _ O
< _ _ O
< _ _ O
" _ _ O
frac _ _ O
: _ _ O
" _ _ O
< _ _ O
< _ _ O
frac _ _ O
< _ _ O
< _ _ O
std _ _ O
: _ _ O
: _ _ O
endl _ _ O
; _ _ O
return _ _ O
0 _ _ O
; _ _ O
Try _ _ O
it _ _ O
in _ _ O
: _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
repl.it _ _ O
/ _ _ O
languages _ _ O
/ _ _ O
cpp _ _ O
27 _ _ O

Encoding _ _ O
a _ _ O
number _ _ O
as _ _ O
a _ _ O
float _ _ O
You _ _ O
have _ _ O
an _ _ O
number _ _ O
, _ _ O
like _ _ O
-12.5937510 _ _ O
1 _ _ O
. _ _ O
Convert _ _ O
it _ _ O
to _ _ O
binary _ _ O
. _ _ O
Integer _ _ O
part _ _ O
: _ _ O
11002 _ _ O
Fractional _ _ O
part _ _ O
: _ _ O
0.100112 _ _ O
2 _ _ O
. _ _ O
Write _ _ O
it _ _ O
in _ _ O
scientific _ _ O
notation _ _ O
: _ _ O
1100.100112 _ _ O
x _ _ O
20 _ _ O
3 _ _ O
. _ _ O
Normalize _ _ O
it _ _ O
: _ _ O
1.100100112 _ _ O
x _ _ O
23 _ _ O
0.5937510 _ _ O
x _ _ O
2 _ _ O
1.18750 _ _ O
MSB _ _ O
0.1875010 _ _ O
x _ _ O
2 _ _ O
0.37500 _ _ O
0.3750010 _ _ O
x _ _ O
2 _ _ O
0.75000 _ _ O
0.7500010 _ _ O
x _ _ O
2 _ _ O
1.50000 _ _ O
0.5000010 _ _ O
x _ _ O
2 _ _ O
1.00000 _ _ O
LSB _ _ O
28 _ _ O

Encoding _ _ O
a _ _ O
number _ _ O
as _ _ O
a _ _ O
float _ _ O
You _ _ O
have _ _ O
an _ _ O
number _ _ O
, _ _ O
like _ _ O
-12.5937510 _ _ O
1 _ _ O
. _ _ O
Convert _ _ O
it _ _ O
to _ _ O
binary _ _ O
. _ _ O
Integer _ _ O
part _ _ O
: _ _ O
11002 _ _ O
Fractional _ _ O
part _ _ O
: _ _ O
0.100112 _ _ O
2 _ _ O
. _ _ O
Write _ _ O
it _ _ O
in _ _ O
scientific _ _ O
notation _ _ O
: _ _ O
1100.100112 _ _ O
x _ _ O
20 _ _ O
3 _ _ O
. _ _ O
Normalize _ _ O
it _ _ O
: _ _ O
1.100100112 _ _ O
x _ _ O
23 _ _ O
4 _ _ O
. _ _ O
Calculate _ _ O
biased _ _ O
exponent _ _ O
+3 _ _ O
+ _ _ O
127 _ _ O
= _ _ O
13010 _ _ O
= _ _ O
100000102 _ _ O
0xC1498000 _ _ O
s _ _ O
exponent _ _ O
fraction _ _ O
1 _ _ O
10000010 _ _ O
10010011000000000…000 _ _ O
29 _ _ O

Adding _ _ O
floating _ _ O
point _ _ O
numbers _ _ O
1.11 _ _ O
× _ _ O
20 _ _ O
+ _ _ O
1.00 _ _ O
× _ _ O
2 _ _ O
- _ _ O
2 _ _ O
● _ _ O
Step _ _ O
1 _ _ O
– _ _ O
Make _ _ O
both _ _ O
exponents _ _ O
the _ _ O
same _ _ O
1.11 _ _ O
× _ _ O
20 _ _ O
+ _ _ O
0.01 _ _ O
× _ _ O
20 _ _ O
● _ _ O
Step _ _ O
2 _ _ O
– _ _ O
Add _ _ O
the _ _ O
significands _ _ O
1.11 _ _ O
× _ _ O
20 _ _ O
+ _ _ O
0.01 _ _ O
× _ _ O
20 _ _ O
= _ _ O
10.00 _ _ O
× _ _ O
20 _ _ O
● _ _ O
Step _ _ O
3 _ _ O
– _ _ O
Normalize _ _ O
the _ _ O
result _ _ O
10.00 _ _ O
× _ _ O
20 _ _ O
= _ _ O
1.000 _ _ O
× _ _ O
21 _ _ O
30 _ _ O

Multiply _ _ O
floating _ _ O
point _ _ O
numbers _ _ O
1.11 _ _ O
× _ _ O
20 _ _ O
x _ _ O
1.01 _ _ O
× _ _ O
2 _ _ O
- _ _ O
2 _ _ O
● _ _ O
Step _ _ O
1 _ _ O
– _ _ O
Add _ _ O
the _ _ O
exponents _ _ O
0 _ _ O
+ _ _ O
( _ _ O
-2 _ _ O
) _ _ O
= _ _ O
[ _ _ O
0+127 _ _ O
] _ _ O
+ _ _ O
[ _ _ O
-2+127 _ _ O
] _ _ O
= _ _ O
[ _ _ O
127 _ _ O
] _ _ O
+ _ _ O
[ _ _ O
125 _ _ O
] _ _ O
– _ _ O
127 _ _ O
= _ _ O
[ _ _ O
125 _ _ O
] _ _ O
= _ _ O
-2 _ _ O
● _ _ O
Step _ _ O
2 _ _ O
– _ _ O
Multiply _ _ O
the _ _ O
significands _ _ O
1.11 _ _ O
x _ _ O
1.01 _ _ O
= _ _ O
10.0011 _ _ O
● _ _ O
Step _ _ O
3 _ _ O
– _ _ O
Normalize _ _ O
the _ _ O
result _ _ O
10.0011 _ _ O
× _ _ O
2 _ _ O
- _ _ O
2 _ _ O
= _ _ O
1.00011 _ _ O
× _ _ O
2 _ _ O
- _ _ O
1 _ _ O
31 _ _ O

Divide _ _ O
floating _ _ O
point _ _ O
numbers _ _ O
1.001 _ _ O
× _ _ O
20 _ _ O
/ _ _ O
1.1 _ _ O
× _ _ O
2 _ _ O
- _ _ O
2 _ _ O
● _ _ O
Step _ _ O
1 _ _ O
– _ _ O
Subtract _ _ O
the _ _ O
exponents _ _ O
0 _ _ O
- _ _ O
( _ _ O
-2 _ _ O
) _ _ O
= _ _ O
[ _ _ O
0+127 _ _ O
] _ _ O
- _ _ O
[ _ _ O
-2+127 _ _ O
] _ _ O
= _ _ O
[ _ _ O
127 _ _ O
] _ _ O
- _ _ O
[ _ _ O
125 _ _ O
] _ _ O
+ _ _ O
127 _ _ O
= _ _ O
[ _ _ O
129 _ _ O
] _ _ O
= _ _ O
2 _ _ O
● _ _ O
Step _ _ O
2 _ _ O
– _ _ O
Divide _ _ O
the _ _ O
significands _ _ O
1.001 _ _ O
/ _ _ O
1.1 _ _ O
= _ _ O
0.11 _ _ O
● _ _ O
Step _ _ O
3 _ _ O
– _ _ O
Normalize _ _ O
the _ _ O
result _ _ O
0.11 _ _ O
× _ _ O
22 _ _ O
= _ _ O
1.1 _ _ O
× _ _ O
21 _ _ O
32 _ _ O

Other _ _ O
formats _ _ O
● _ _ O
the _ _ O
most _ _ O
common _ _ O
other _ _ O
format _ _ O
is _ _ O
double-precision _ _ O
( _ _ O
C _ _ O
/ _ _ O
C++ _ _ O
/ _ _ O
Java _ _ O
double _ _ O
) _ _ O
, _ _ O
which _ _ O
uses _ _ O
an _ _ O
11-bit _ _ O
exponent _ _ O
and _ _ O
52-bit _ _ O
fraction _ _ O
● _ _ O
GPUs _ _ O
have _ _ O
driven _ _ O
the _ _ O
creation _ _ O
of _ _ O
a _ _ O
half-precision _ _ O
16-bit _ _ O
floatingpoint _ _ O
format _ _ O
. _ _ O
it _ _ O
's _ _ O
adorable _ _ O
1023 _ _ O
bias _ _ O
15 _ _ O
bias _ _ O
both _ _ O
illustrations _ _ O
from _ _ O
user _ _ O
Codekaizen _ _ O
on _ _ O
Wikimedia _ _ O
Commons _ _ O
33 _ _ O

Special _ _ O
cases _ _ O
● _ _ O
IEEE _ _ O
754 _ _ O
can _ _ O
represent _ _ O
data _ _ O
outside _ _ O
of _ _ O
the _ _ O
norm _ _ O
. _ _ O
o _ _ O
Zero _ _ O
! _ _ O
How _ _ O
do _ _ O
you _ _ O
do _ _ O
that _ _ O
with _ _ O
normalized _ _ O
numbers _ _ O
? _ _ O
o _ _ O
+ _ _ O
/- _ _ O
Infinity _ _ O
o _ _ O
NaN _ _ O
( _ _ O
Not _ _ O
a _ _ O
number _ _ O
) _ _ O
. _ _ O
E.g. _ _ O
when _ _ O
you _ _ O
divide _ _ O
zero _ _ O
by _ _ O
zero _ _ O
. _ _ O
o _ _ O
Other _ _ O
denormalized _ _ O
number _ _ O
: _ _ O
Squeeze _ _ O
the _ _ O
most _ _ O
out _ _ O
of _ _ O
our _ _ O
bits _ _ O
! _ _ O
▪ _ _ O
E.g. _ _ O
: _ _ O
0.00000000000000000000001 _ _ O
x _ _ O
2 _ _ O
- _ _ O
127 _ _ O
Single _ _ O
precision _ _ O
Double _ _ O
precision _ _ O
Meaning _ _ O
Exponent _ _ O
Fraction _ _ O
Exponent _ _ O
Fraction _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
! _ _ O
= _ _ O
0 _ _ O
0 _ _ O
! _ _ O
= _ _ O
0 _ _ O
Number _ _ O
is _ _ O
denormalized _ _ O
255 _ _ O
0 _ _ O
2047 _ _ O
0 _ _ O
Infinity _ _ O
( _ _ O
sign-bit _ _ O
defines _ _ O
+ _ _ O
or _ _ O
- _ _ O
) _ _ O
255 _ _ O
! _ _ O
= _ _ O
0 _ _ O
2047 _ _ O
! _ _ O
= _ _ O
0 _ _ O
NaN _ _ O
( _ _ O
Not _ _ O
a _ _ O
Number _ _ O
) _ _ O
34 _ _ O

Check _ _ O
out _ _ O
this _ _ O
cool _ _ O
thing _ _ O
in _ _ O
MARS _ _ O
● _ _ O
go _ _ O
to _ _ O
Tools _ _ O
> _ _ O
Floating _ _ O
Point _ _ O
Representation _ _ O
● _ _ O
Try _ _ O
it _ _ O
out _ _ O
! _ _ O
35 _ _ O



