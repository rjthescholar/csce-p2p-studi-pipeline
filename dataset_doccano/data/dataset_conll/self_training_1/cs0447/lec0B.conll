self_training_1|cs0447|lec0B
-DOCSTART- -X- -X- O

# _ _ O
B _ _ O
Multiplication _ _ O
and _ _ O
Division _ _ O
Original _ _ O
slides _ _ O
by _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
Modified _ _ O
with _ _ O
bits _ _ O
from _ _ O
: _ _ O
Bruce _ _ O
Childers _ _ O
, _ _ O
David _ _ O
Wilkinson _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Luís _ _ O
Oliveira _ _ O
Fall _ _ O
2020 _ _ O

Class _ _ O
announcements _ _ O
2 _ _ O

Multiplication _ _ O
by _ _ O
repeated _ _ O
addition _ _ O
● _ _ O
in _ _ O
A _ _ O
× _ _ O
B _ _ O
, _ _ O
the _ _ O
product _ _ O
( _ _ O
answer _ _ O
) _ _ O
is _ _ O
“ _ _ O
B _ _ O
copies _ _ O
of _ _ O
A _ _ O
, _ _ O
added _ _ O
together _ _ O
" _ _ O
3 _ _ O
× _ _ O
6 _ _ O
= _ _ O
18 _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
7 _ _ O
8 _ _ O
9 _ _ O
10 _ _ O
11 _ _ O
12 _ _ O
13 _ _ O
14 _ _ O
15 _ _ O
16 _ _ O
17 _ _ O
18 _ _ O
how _ _ O
many _ _ O
additions _ _ O
would _ _ O
it _ _ O
take _ _ O
to _ _ O
calculate _ _ O
2 _ _ O
x _ _ O
500 _ _ O
, _ _ O
000 _ _ O
, _ _ O
000 _ _ O
? _ _ O
3 _ _ O

Back _ _ O
to _ _ O
grade _ _ O
school _ _ O
● _ _ O
remember _ _ O
your _ _ O
multiplication _ _ O
tables _ _ O
? _ _ O
● _ _ O
binary _ _ O
is _ _ O
so _ _ O
much _ _ O
easier _ _ O
● _ _ O
if _ _ O
we _ _ O
list _ _ O
0 _ _ O
too _ _ O
, _ _ O
the _ _ O
product _ _ O
logic _ _ O
looks _ _ O
awfully _ _ O
familiar _ _ O
… _ _ O
✕ _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
7 _ _ O
8 _ _ O
9 _ _ O
1 _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
7 _ _ O
8 _ _ O
9 _ _ O
2 _ _ O
2 _ _ O
4 _ _ O
6 _ _ O
8 _ _ O
10 _ _ O
12 _ _ O
14 _ _ O
16 _ _ O
18 _ _ O
3 _ _ O
3 _ _ O
6 _ _ O
9 _ _ O
12 _ _ O
15 _ _ O
18 _ _ O
21 _ _ O
24 _ _ O
27 _ _ O
4 _ _ O
4 _ _ O
8 _ _ O
12 _ _ O
16 _ _ O
20 _ _ O
24 _ _ O
28 _ _ O
32 _ _ O
36 _ _ O
5 _ _ O
5 _ _ O
10 _ _ O
15 _ _ O
20 _ _ O
25 _ _ O
30 _ _ O
35 _ _ O
40 _ _ O
45 _ _ O
6 _ _ O
6 _ _ O
12 _ _ O
18 _ _ O
24 _ _ O
30 _ _ O
36 _ _ O
42 _ _ O
48 _ _ O
54 _ _ O
7 _ _ O
7 _ _ O
14 _ _ O
21 _ _ O
28 _ _ O
35 _ _ O
42 _ _ O
49 _ _ O
56 _ _ O
63 _ _ O
8 _ _ O
8 _ _ O
16 _ _ O
24 _ _ O
32 _ _ O
40 _ _ O
48 _ _ O
56 _ _ O
64 _ _ O
72 _ _ O
9 _ _ O
9 _ _ O
18 _ _ O
27 _ _ O
36 _ _ O
45 _ _ O
54 _ _ O
63 _ _ O
72 _ _ O
81 _ _ O
✕ _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
A _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
B _ _ O
P _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
4 _ _ O

Just _ _ O
like _ _ O
you _ _ O
remember _ _ O
● _ _ O
you _ _ O
know _ _ O
how _ _ O
to _ _ O
multiply _ _ O
, _ _ O
riiiight _ _ O
? _ _ O
these _ _ O
are _ _ O
partial _ _ O
products _ _ O
. _ _ O
how _ _ O
many _ _ O
additions _ _ O
are _ _ O
we _ _ O
doing _ _ O
? _ _ O
0101 _ _ O
= _ _ O
× _ _ O
0110 _ _ O
= _ _ O
0000 _ _ O
01010 _ _ O
010100 _ _ O
000 _ _ O
0000 _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
0011110 _ _ O
5 _ _ O
Multiplicand _ _ O
× _ _ O
6 _ _ O
Multiplier _ _ O
30 _ _ O
wait _ _ O
, _ _ O
what _ _ O
operation _ _ O
are _ _ O
we _ _ O
doing _ _ O
here _ _ O
... _ _ O
? _ _ O
5 _ _ O

Wait _ _ O
, _ _ O
why _ _ O
does _ _ O
this _ _ O
work _ _ O
? _ _ O
● _ _ O
what _ _ O
are _ _ O
we _ _ O
actually _ _ O
doing _ _ O
with _ _ O
this _ _ O
technique _ _ O
? _ _ O
● _ _ O
remember _ _ O
how _ _ O
positional _ _ O
numbers _ _ O
are _ _ O
really _ _ O
polynomials _ _ O
? _ _ O
FOIL _ _ O
… _ _ O
78×54 _ _ O
= _ _ O
70×50 _ _ O
+ _ _ O
70×4 _ _ O
+ _ _ O
8×50 _ _ O
+ _ _ O
8×4 _ _ O
we _ _ O
're _ _ O
eliminating _ _ O
many _ _ O
addition _ _ O
steps _ _ O
by _ _ O
grouping _ _ O
them _ _ O
together _ _ O
. _ _ O
= _ _ O
78×50 _ _ O
+ _ _ O
78×4 _ _ O
we _ _ O
group _ _ O
them _ _ O
together _ _ O
by _ _ O
powers _ _ O
of _ _ O
the _ _ O
base _ _ O
. _ _ O
6 _ _ O

How _ _ O
many _ _ O
bits _ _ O
? _ _ O
● _ _ O
when _ _ O
we _ _ O
added _ _ O
two _ _ O
n-digit _ _ O
/ _ _ O
bit _ _ O
numbers _ _ O
, _ _ O
how _ _ O
many _ _ O
digits _ _ O
/ _ _ O
bits _ _ O
was _ _ O
the _ _ O
sum _ _ O
? _ _ O
● _ _ O
how _ _ O
about _ _ O
for _ _ O
multiplication _ _ O
? _ _ O
● _ _ O
when _ _ O
you _ _ O
multiply _ _ O
two _ _ O
n-digit _ _ O
/ _ _ O
bit _ _ O
numbers _ _ O
, _ _ O
the _ _ O
product _ _ O
will _ _ O
be _ _ O
at _ _ O
most _ _ O
2n _ _ O
digits _ _ O
/ _ _ O
bits _ _ O
● _ _ O
so _ _ O
if _ _ O
we _ _ O
multiply _ _ O
two _ _ O
32-bit _ _ O
numbers _ _ O
… _ _ O
o _ _ O
we _ _ O
could _ _ O
get _ _ O
a _ _ O
64-bit _ _ O
result _ _ O
! _ _ O
AAAA _ _ O
! _ _ O
o _ _ O
if _ _ O
we _ _ O
just _ _ O
ignored _ _ O
those _ _ O
extra _ _ O
32 _ _ O
bits _ _ O
, _ _ O
or _ _ O
crashed _ _ O
, _ _ O
we _ _ O
'd _ _ O
be _ _ O
losing _ _ O
a _ _ O
lot _ _ O
of _ _ O
info _ _ O
. _ _ O
o _ _ O
so _ _ O
we _ _ O
have _ _ O
to _ _ O
store _ _ O
it _ _ O
. _ _ O
99 _ _ O
× _ _ O
99 _ _ O
9801 _ _ O
9999 _ _ O
× _ _ O
9999 _ _ O
99980001 _ _ O
1111 _ _ O
× _ _ O
1111 _ _ O
11100001 _ _ O
7 _ _ O

How _ _ O
( _ _ O
and _ _ O
why _ _ O
) _ _ O
MIPS _ _ O
does _ _ O
it _ _ O
● _ _ O
MIPS _ _ O
has _ _ O
two _ _ O
more _ _ O
32-bit _ _ O
registers _ _ O
, _ _ O
HI _ _ O
and _ _ O
LO _ _ O
. _ _ O
if _ _ O
you _ _ O
do _ _ O
this _ _ O
: _ _ O
mult _ _ O
t0 _ _ O
, _ _ O
a0 _ _ O
● _ _ O
then _ _ O
HI _ _ O
= _ _ O
upper _ _ O
32 _ _ O
bits _ _ O
of _ _ O
the _ _ O
product _ _ O
and _ _ O
LO _ _ O
= _ _ O
lower _ _ O
32 _ _ O
bits _ _ O
● _ _ O
to _ _ O
actually _ _ O
get _ _ O
the _ _ O
product _ _ O
, _ _ O
we _ _ O
use _ _ O
these _ _ O
: _ _ O
mfhi _ _ O
t0 _ _ O
# _ _ O
move _ _ O
From _ _ O
HI _ _ O
( _ _ O
t0 _ _ O
= _ _ O
HI _ _ O
) _ _ O
mflo _ _ O
t1 _ _ O
# _ _ O
move _ _ O
From _ _ O
LO _ _ O
( _ _ O
t1 _ _ O
= _ _ O
LO _ _ O
) _ _ O
● _ _ O
the _ _ O
mul _ _ O
pseudo-op _ _ O
does _ _ O
a _ _ O
mult _ _ O
followed _ _ O
by _ _ O
an _ _ O
mflo _ _ O
● _ _ O
MIPS _ _ O
does _ _ O
this _ _ O
for _ _ O
2 _ _ O
reasons _ _ O
: _ _ O
o _ _ O
multiplication _ _ O
can _ _ O
take _ _ O
longer _ _ O
than _ _ O
addition _ _ O
o _ _ O
we _ _ O
'd _ _ O
otherwise _ _ O
have _ _ O
to _ _ O
change _ _ O
two _ _ O
different _ _ O
registers _ _ O
at _ _ O
once _ _ O
● _ _ O
if _ _ O
you _ _ O
wanted _ _ O
to _ _ O
check _ _ O
for _ _ O
32-bit _ _ O
multiplication _ _ O
overflow _ _ O
, _ _ O
how _ _ O
could _ _ O
you _ _ O
do _ _ O
it _ _ O
? _ _ O
8 _ _ O

Signed _ _ O
multiplication _ _ O
9 _ _ O

Grade _ _ O
school _ _ O
( _ _ O
but _ _ O
like _ _ O
, _ _ O
6th _ _ O
, _ _ O
instead _ _ O
of _ _ O
3rd _ _ O
) _ _ O
● _ _ O
if _ _ O
you _ _ O
multiply _ _ O
two _ _ O
signed _ _ O
numbers _ _ O
, _ _ O
what _ _ O
's _ _ O
the _ _ O
rule _ _ O
? _ _ O
Product _ _ O
A _ _ O
B _ _ O
P _ _ O
3 _ _ O
5 _ _ O
15 _ _ O
3 _ _ O
-5 _ _ O
-15 _ _ O
-3 _ _ O
5 _ _ O
-15 _ _ O
-3 _ _ O
-5 _ _ O
15 _ _ O
Sign _ _ O
A _ _ O
+ _ _ O
+ _ _ O
- _ _ O
B _ _ O
+ _ _ O
+ _ _ O
- _ _ O
S _ _ O
+ _ _ O
+ _ _ O
if _ _ O
the _ _ O
signs _ _ O
of _ _ O
the _ _ O
operands _ _ O
differ _ _ O
, _ _ O
the _ _ O
output _ _ O
is _ _ O
negative _ _ O
. _ _ O
10 _ _ O

Do _ _ O
n't _ _ O
repeat _ _ O
yourself _ _ O
● _ _ O
we _ _ O
already _ _ O
have _ _ O
an _ _ O
algorithm _ _ O
to _ _ O
multiply _ _ O
unsigned _ _ O
numbers _ _ O
● _ _ O
multiplying _ _ O
signed _ _ O
numbers _ _ O
is _ _ O
exactly _ _ O
the _ _ O
same _ _ O
( _ _ O
except _ _ O
for _ _ O
the _ _ O
signs _ _ O
) _ _ O
● _ _ O
so _ _ O
why _ _ O
not _ _ O
use _ _ O
what _ _ O
we _ _ O
already _ _ O
made _ _ O
? _ _ O
long _ _ O
prod _ _ O
= _ _ O
unsigned_mult _ _ O
( _ _ O
abs _ _ O
( _ _ O
A _ _ O
) _ _ O
, _ _ O
abs _ _ O
( _ _ O
B _ _ O
) _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
sgn _ _ O
( _ _ O
A _ _ O
) _ _ O
= _ _ O
= _ _ O
sgn _ _ O
( _ _ O
B _ _ O
) _ _ O
) _ _ O
return _ _ O
prod _ _ O
; _ _ O
else _ _ O
return _ _ O
– _ _ O
prod _ _ O
; _ _ O
11 _ _ O

Division _ _ O
Like _ _ O
multiplication _ _ O
, _ _ O
except _ _ O
… _ _ O
not _ _ O
really _ _ O
12 _ _ O

If _ _ O
multiplication _ _ O
is _ _ O
repeated _ _ O
addition _ _ O
… _ _ O
● _ _ O
… _ _ O
is _ _ O
division _ _ O
repeated _ _ O
subtraction _ _ O
? _ _ O
o _ _ O
yes _ _ O
. _ _ O
it _ _ O
is _ _ O
. _ _ O
● _ _ O
in _ _ O
A _ _ O
÷ _ _ O
B _ _ O
, _ _ O
the _ _ O
quotient _ _ O
( _ _ O
answer _ _ O
) _ _ O
is _ _ O
" _ _ O
how _ _ O
many _ _ O
times _ _ O
can _ _ O
you _ _ O
subtract _ _ O
B _ _ O
from _ _ O
A _ _ O
until _ _ O
you _ _ O
ca _ _ O
n't _ _ O
anymore _ _ O
? _ _ O
" _ _ O
20 _ _ O
÷ _ _ O
3 _ _ O
= _ _ O
6 _ _ O
R _ _ O
2 _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
what _ _ O
about _ _ O
these _ _ O
lil _ _ O
guys _ _ O
? _ _ O
how _ _ O
many _ _ O
subtractions _ _ O
would _ _ O
it _ _ O
take _ _ O
to _ _ O
calculate _ _ O
1 _ _ O
, _ _ O
000 _ _ O
, _ _ O
000 _ _ O
, _ _ O
000 _ _ O
÷ _ _ O
2 _ _ O
? _ _ O
13 _ _ O

That _ _ O
's _ _ O
not _ _ O
what _ _ O
you _ _ O
learned _ _ O
in _ _ O
school _ _ O
, _ _ O
was _ _ O
it _ _ O
● _ _ O
You _ _ O
learned _ _ O
something _ _ O
a _ _ O
tiiiiiny _ _ O
bit _ _ O
more _ _ O
complicated _ _ O
005 _ _ O
4 _ _ O
R51 _ _ O
77 _ _ O
4209 _ _ O
- _ _ O
3 _ _ O
8 _ _ O
5 _ _ O
= _ _ O
77×5 _ _ O
359 _ _ O
- _ _ O
3 _ _ O
0 _ _ O
8=77×4 _ _ O
51 _ _ O
Finally _ _ O
! _ _ O
! _ _ O
14 _ _ O

What _ _ O
's _ _ O
going _ _ O
on _ _ O
? _ _ O
● _ _ O
division _ _ O
is _ _ O
multiplication _ _ O
backwards _ _ O
. _ _ O
it _ _ O
's _ _ O
like _ _ O
ctrl+z _ _ O
. _ _ O
finding _ _ O
the _ _ O
partial _ _ O
products _ _ O
77 _ _ O
we _ _ O
're _ _ O
that _ _ O
add _ _ O
up _ _ O
to _ _ O
a _ _ O
total _ _ O
product _ _ O
×54 _ _ O
division _ _ O
goes _ _ O
left-to-right _ _ O
because _ _ O
we _ _ O
find _ _ O
the _ _ O
partial _ _ O
products _ _ O
from _ _ O
biggest _ _ O
to _ _ O
smallest _ _ O
308 _ _ O
and _ _ O
to _ _ O
make _ _ O
it _ _ O
even _ _ O
more _ _ O
interesting _ _ O
, _ _ O
3850 _ _ O
there _ _ O
might _ _ O
be _ _ O
a _ _ O
remainder _ _ O
and _ _ O
then _ _ O
there _ _ O
's _ _ O
division _ _ O
by _ _ O
0 _ _ O
. _ _ O
4158 _ _ O
+ _ _ O
R51 _ _ O
multiplication _ _ O
is _ _ O
multiplying _ _ O
polynomials _ _ O
. _ _ O
division _ _ O
is _ _ O
factoring _ _ O
polynomials _ _ O
. _ _ O
4209 _ _ O
15 _ _ O

Another _ _ O
way _ _ O
of _ _ O
looking _ _ O
at _ _ O
it _ _ O
( _ _ O
animated _ _ O
) _ _ O
● _ _ O
let _ _ O
's _ _ O
say _ _ O
we _ _ O
want _ _ O
to _ _ O
do _ _ O
… _ _ O
( _ _ O
calculating _ _ O
random _ _ O
number _ _ O
) _ _ O
… _ _ O
696÷4 _ _ O
first _ _ O
we _ _ O
ask _ _ O
how _ _ O
many _ _ O
400s _ _ O
fit _ _ O
then _ _ O
how _ _ O
many _ _ O
40s _ _ O
then _ _ O
how _ _ O
many _ _ O
4s _ _ O
so _ _ O
we _ _ O
're _ _ O
saving _ _ O
time _ _ O
by _ _ O
doing _ _ O
groups _ _ O
of _ _ O
subtractions _ _ O
from _ _ O
biggest _ _ O
to _ _ O
smallest _ _ O
1 _ _ O
40 _ _ O
40 _ _ O
40 _ _ O
7 _ _ O
4 _ _ O
40 _ _ O
400 _ _ O
40 _ _ O
4 _ _ O
4 _ _ O
4 _ _ O
4 _ _ O
40 _ _ O
40 _ _ O
16 _ _ O

Thanks _ _ O
, _ _ O
tiny _ _ O
multiplication _ _ O
table _ _ O
. _ _ O
Thable _ _ O
. _ _ O
● _ _ O
at _ _ O
least _ _ O
multiplication _ _ O
in _ _ O
binary _ _ O
is _ _ O
easy _ _ O
, _ _ O
which _ _ O
simplifies _ _ O
division _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0R _ _ O
1 _ _ O
1100 _ _ O
1001001 _ _ O
-1100 _ _ O
1100 _ _ O
in _ _ O
binary _ _ O
, _ _ O
each _ _ O
step _ _ O
becomes _ _ O
a _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
yes-no _ _ O
choice _ _ O
: _ _ O
does _ _ O
the _ _ O
divisor _ _ O
fit _ _ O
01 _ _ O
into _ _ O
the _ _ O
remainder _ _ O
? _ _ O
17 _ _ O

Divisor _ _ O
? _ _ O
Dividend _ _ O
? _ _ O
Remainder _ _ O
? _ _ O
the _ _ O
divisor _ _ O
divides _ _ O
the _ _ O
dividend _ _ O
the _ _ O
dividend _ _ O
is _ _ O
the _ _ O
number _ _ O
that _ _ O
is _ _ O
being _ _ O
divided _ _ O
1100 _ _ O
1001001 _ _ O
-1100 _ _ O
the _ _ O
remainder _ _ O
is _ _ O
the _ _ O
number _ _ O
we _ _ O
're _ _ O
trying _ _ O
to _ _ O
this _ _ O
is _ _ O
the _ _ O
new _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
fit _ _ O
the _ _ O
divisor _ _ O
into _ _ O
remainder _ _ O
. _ _ O
it _ _ O
starts _ _ O
off _ _ O
as _ _ O
the _ _ O
dividend _ _ O
… _ _ O
but _ _ O
really _ _ O
, _ _ O
when _ _ O
we _ _ O
subtract _ _ O
something _ _ O
, _ _ O
we _ _ O
are _ _ O
making _ _ O
the _ _ O
remainder _ _ O
smaller _ _ O
. _ _ O
18 _ _ O

Finding _ _ O
partial _ _ O
products _ _ O
, _ _ O
biggest _ _ O
to _ _ O
smallest _ _ O
( _ _ O
animated _ _ O
) _ _ O
essentially _ _ O
we _ _ O
're _ _ O
starting _ _ O
with _ _ O
the _ _ O
divisor _ _ O
shifted _ _ O
all _ _ O
the _ _ O
way _ _ O
left _ _ O
, _ _ O
and _ _ O
sliding _ _ O
it _ _ O
right _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0R _ _ O
1 _ _ O
1100 _ _ O
100 _ _ O
11001 _ _ O
1100000000 _ _ O
so _ _ O
let _ _ O
's _ _ O
ALGORITHM-IZE _ _ O
IT _ _ O
19 _ _ O

A _ _ O
few _ _ O
more _ _ O
odds _ _ O
and _ _ O
ends _ _ O
20 _ _ O

Divide-and-conquer _ _ O
… _ _ O
in _ _ O
parallel _ _ O
● _ _ O
an _ _ O
n×n _ _ O
digit _ _ O
multiplication _ _ O
can _ _ O
be _ _ O
broken _ _ O
into _ _ O
n _ _ O
, _ _ O
n×1 _ _ O
digit _ _ O
ones _ _ O
● _ _ O
the _ _ O
partial _ _ O
products _ _ O
can _ _ O
be _ _ O
summed _ _ O
in _ _ O
any _ _ O
order _ _ O
( _ _ O
thanks _ _ O
, _ _ O
commutativity _ _ O
) _ _ O
1011×0101 _ _ O
= _ _ O
1011×1 _ _ O
+ _ _ O
1011×0 _ _ O
+1011×100 _ _ O
+ _ _ O
1011×0 _ _ O
all _ _ O
operations _ _ O
in _ _ O
the _ _ O
same _ _ O
column _ _ O
can _ _ O
be _ _ O
done _ _ O
in _ _ O
parallel _ _ O
. _ _ O
+ _ _ O
+ _ _ O
+ _ _ O
now _ _ O
our _ _ O
multiplication _ _ O
takes _ _ O
only _ _ O
3 _ _ O
steps _ _ O
instead _ _ O
of _ _ O
4 _ _ O
. _ _ O
but _ _ O
this _ _ O
is _ _ O
a _ _ O
O _ _ O
( _ _ O
log _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
algorithm _ _ O
! _ _ O
so _ _ O
for _ _ O
32 _ _ O
bits _ _ O
… _ _ O
it _ _ O
takes _ _ O
6 _ _ O
steps _ _ O
instead _ _ O
of _ _ O
32 _ _ O
! _ _ O
21 _ _ O

But _ _ O
division _ _ O
… _ _ O
● _ _ O
if _ _ O
we _ _ O
try _ _ O
to _ _ O
do _ _ O
something _ _ O
similar _ _ O
, _ _ O
well _ _ O
… _ _ O
what _ _ O
's _ _ O
the _ _ O
difference _ _ O
between _ _ O
addition _ _ O
and _ _ O
subtraction _ _ O
? _ _ O
subtraction _ _ O
is _ _ O
not _ _ O
commutative _ _ O
. _ _ O
1011÷101 _ _ O
= _ _ O
1011÷101000 _ _ O
= _ _ O
0 _ _ O
you _ _ O
can _ _ O
do _ _ O
the _ _ O
steps _ _ O
in _ _ O
any _ _ O
order _ _ O
… _ _ O
but _ _ O
you _ _ O
ca _ _ O
n't _ _ O
do _ _ O
1011÷10100 _ _ O
= _ _ O
0 _ _ O
them _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
. _ _ O
1011÷1010 _ _ O
= _ _ O
1 _ _ O
R _ _ O
1 _ _ O
1011÷101 _ _ O
= _ _ O
1 _ _ O
R _ _ O
110 _ _ O
? _ _ O
? _ _ O
we _ _ O
can _ _ O
not _ _ O
know _ _ O
the _ _ O
answer _ _ O
to _ _ O
this _ _ O
step _ _ O
… _ _ O
… _ _ O
until _ _ O
we _ _ O
know _ _ O
the _ _ O
answer _ _ O
to _ _ O
the _ _ O
previous _ _ O
one _ _ O
. _ _ O
22 _ _ O

Division _ _ O
is _ _ O
fundamentally _ _ O
slower _ _ O
● _ _ O
each _ _ O
step _ _ O
depends _ _ O
on _ _ O
the _ _ O
previous _ _ O
one _ _ O
. _ _ O
● _ _ O
we _ _ O
can _ _ O
not _ _ O
split _ _ O
it _ _ O
up _ _ O
into _ _ O
subproblems _ _ O
like _ _ O
with _ _ O
multiplication _ _ O
. _ _ O
● _ _ O
the _ _ O
only _ _ O
way _ _ O
to _ _ O
make _ _ O
division _ _ O
faster _ _ O
is _ _ O
to _ _ O
guess _ _ O
. _ _ O
o _ _ O
SRT _ _ O
Division _ _ O
is _ _ O
a _ _ O
way _ _ O
of _ _ O
predicting _ _ O
quotient _ _ O
bits _ _ O
based _ _ O
on _ _ O
the _ _ O
next _ _ O
few _ _ O
bits _ _ O
of _ _ O
the _ _ O
dividend _ _ O
and _ _ O
divisor _ _ O
o _ _ O
but _ _ O
it _ _ O
can _ _ O
make _ _ O
mistakes _ _ O
and _ _ O
they _ _ O
have _ _ O
to _ _ O
be _ _ O
corrected _ _ O
o _ _ O
the _ _ O
original _ _ O
Pentium _ _ O
CPU _ _ O
in _ _ O
1994 _ _ O
messed _ _ O
this _ _ O
up _ _ O
▪ _ _ O
and _ _ O
Intel _ _ O
pretended _ _ O
everything _ _ O
was _ _ O
OK _ _ O
▪ _ _ O
and _ _ O
people _ _ O
got _ _ O
mad _ _ O
▪ _ _ O
and _ _ O
they _ _ O
had _ _ O
to _ _ O
recall _ _ O
millions _ _ O
of _ _ O
them _ _ O
▪ _ _ O
and _ _ O
Intel _ _ O
lost _ _ O
half _ _ O
a _ _ O
billion _ _ O
dollars _ _ O
– _ _ O
lol _ _ O
23 _ _ O

Doing _ _ O
modulo _ _ O
with _ _ O
AND _ _ O
● _ _ O
in _ _ O
decimal _ _ O
, _ _ O
dividing _ _ O
by _ _ O
powers _ _ O
of _ _ O
10 _ _ O
is _ _ O
trivial _ _ O
. _ _ O
53884 _ _ O
÷ _ _ O
1000 _ _ O
= _ _ O
53 _ _ O
R _ _ O
884 _ _ O
● _ _ O
in _ _ O
binary _ _ O
, _ _ O
we _ _ O
can _ _ O
divide _ _ O
by _ _ O
powers _ _ O
of _ _ O
2 _ _ O
easily _ _ O
with _ _ O
shifting _ _ O
● _ _ O
and _ _ O
we _ _ O
can _ _ O
get _ _ O
the _ _ O
remainder _ _ O
by _ _ O
masking _ _ O
! _ _ O
10010110 _ _ O
÷ _ _ O
1000 _ _ O
= _ _ O
10010 _ _ O
R _ _ O
110 _ _ O
10010110 _ _ O
> _ _ O
> _ _ O
11 _ _ O
= _ _ O
10010 _ _ O
10010110 _ _ O
& _ _ O
0111 _ _ O
= _ _ O
110 _ _ O
more _ _ O
generally _ _ O
: _ _ O
a _ _ O
AND _ _ O
( _ _ O
2n-1 _ _ O
) _ _ O
= _ _ O
a _ _ O
% _ _ O
2n _ _ O
more _ _ O
generally _ _ O
: _ _ O
a _ _ O
AND _ _ O
( _ _ O
( _ _ O
1 _ _ O
< _ _ O
< _ _ O
n _ _ O
) _ _ O
-1 _ _ O
) _ _ O
= _ _ O
a _ _ O
% _ _ O
2n _ _ O
24 _ _ O

Signed _ _ O
division _ _ O
25 _ _ O

All _ _ O
roads _ _ O
lead _ _ O
to _ _ O
Rome _ _ O
… _ _ O
er _ _ O
, _ _ O
the _ _ O
Dividend _ _ O
● _ _ O
how _ _ O
did _ _ O
we _ _ O
extend _ _ O
our _ _ O
multiplication _ _ O
algorithm _ _ O
to _ _ O
signed _ _ O
numbers _ _ O
? _ _ O
● _ _ O
but _ _ O
how _ _ O
exactly _ _ O
do _ _ O
the _ _ O
rules _ _ O
work _ _ O
when _ _ O
you _ _ O
have _ _ O
two _ _ O
results _ _ O
? _ _ O
the _ _ O
four _ _ O
values _ _ O
are _ _ O
related _ _ O
as _ _ O
: _ _ O
Dividend _ _ O
= _ _ O
( _ _ O
Divisor _ _ O
× _ _ O
Quotient _ _ O
) _ _ O
+ _ _ O
Remainder _ _ O
If _ _ O
you _ _ O
do _ _ O
… _ _ O
Java _ _ O
says _ _ O
… _ _ O
Python _ _ O
says _ _ O
… _ _ O
7 _ _ O
/ _ _ O
2 _ _ O
7 _ _ O
/ _ _ O
-2 _ _ O
3 _ _ O
R _ _ O
-3 _ _ O
R _ _ O
1 _ _ O
1 _ _ O
3 _ _ O
R _ _ O
1 _ _ O
-4 _ _ O
R _ _ O
-1 _ _ O
-7 _ _ O
/ _ _ O
2 _ _ O
-7 _ _ O
/ _ _ O
-2 _ _ O
-3 _ _ O
R _ _ O
-1 _ _ O
3 _ _ O
R _ _ O
-1 _ _ O
-4 _ _ O
R _ _ O
1 _ _ O
3 _ _ O
R _ _ O
-1 _ _ O
mathematicians _ _ O
would _ _ O
expect _ _ O
the _ _ O
remainder _ _ O
to _ _ O
always _ _ O
be _ _ O
positive _ _ O
, _ _ O
so _ _ O
the _ _ O
last _ _ O
row _ _ O
would _ _ O
be _ _ O
4 _ _ O
R _ _ O
1 _ _ O
! _ _ O
check _ _ O
out _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
en.wikipedia.org _ _ O
/ _ _ O
wiki _ _ O
/ _ _ O
Modulo_operation _ _ O
for _ _ O
this _ _ O
travesty _ _ O
In _ _ O
Java _ _ O
-7 _ _ O
/ _ _ O
2 _ _ O
= _ _ O
- _ _ O
( _ _ O
7 _ _ O
/ _ _ O
2 _ _ O
) _ _ O
In _ _ O
Python _ _ O
-7 _ _ O
/ _ _ O
2 _ _ O
≠ _ _ O
- _ _ O
( _ _ O
7 _ _ O
/ _ _ O
2 _ _ O
) _ _ O
26 _ _ O

Whaaaaaaaaaaaaaaaat _ _ O
● _ _ O
no _ _ O
, _ _ O
really _ _ O
, _ _ O
it _ _ O
's _ _ O
not _ _ O
well-defined _ _ O
. _ _ O
there _ _ O
's _ _ O
no _ _ O
" _ _ O
right _ _ O
" _ _ O
answer _ _ O
. _ _ O
● _ _ O
watch _ _ O
out _ _ O
for _ _ O
this _ _ O
. _ _ O
o _ _ O
I _ _ O
think _ _ O
I _ _ O
ran _ _ O
into _ _ O
it _ _ O
once _ _ O
because _ _ O
I _ _ O
was _ _ O
doing _ _ O
maths _ _ O
with _ _ O
angles _ _ O
in _ _ O
the _ _ O
range _ _ O
[ _ _ O
-pi _ _ O
, _ _ O
pi _ _ O
) _ _ O
o _ _ O
most _ _ O
of _ _ O
the _ _ O
time _ _ O
, _ _ O
when _ _ O
you _ _ O
're _ _ O
dealing _ _ O
with _ _ O
modulo _ _ O
, _ _ O
you _ _ O
're _ _ O
dealing _ _ O
with _ _ O
positive _ _ O
values _ _ O
o _ _ O
Most _ _ O
languages _ _ O
I _ _ O
had _ _ O
used _ _ O
did _ _ O
( _ _ O
-7 _ _ O
/ _ _ O
2 _ _ O
) _ _ O
as _ _ O
- _ _ O
( _ _ O
7 _ _ O
/ _ _ O
2 _ _ O
) _ _ O
▪ _ _ O
this _ _ O
is _ _ O
" _ _ O
truncated _ _ O
division _ _ O
" _ _ O
( _ _ O
rounds _ _ O
towards _ _ O
0 _ _ O
) _ _ O
o _ _ O
but _ _ O
Python _ _ O
is _ _ O
gaining _ _ O
popularity _ _ O
and _ _ O
can _ _ O
sometimes _ _ O
be _ _ O
confusing _ _ O
▪ _ _ O
it _ _ O
uses _ _ O
" _ _ O
flooring _ _ O
division _ _ O
" _ _ O
( _ _ O
rounds _ _ O
towards _ _ O
-∞ _ _ O
) _ _ O
● _ _ O
so _ _ O
which _ _ O
does _ _ O
arithmetic _ _ O
right _ _ O
shift _ _ O
do _ _ O
? _ _ O
o _ _ O
it _ _ O
does _ _ O
flooring _ _ O
division _ _ O
. _ _ O
27 _ _ O



