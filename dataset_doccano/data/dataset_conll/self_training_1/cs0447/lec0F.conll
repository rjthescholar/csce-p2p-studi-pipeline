self_training_1|cs0447|lec0F
-DOCSTART- -X- -X- O

# _ _ O
F _ _ O
Latches _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Luís _ _ O
Oliveira _ _ O
Luis _ _ O
Oliveira _ _ O
Original _ _ O
slides _ _ O
- _ _ O
wilkie _ _ O
( _ _ O
with _ _ O
content _ _ O
borrowed _ _ O
from _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
and _ _ O
Bruce _ _ O
Childers _ _ O
) _ _ O
Fall _ _ O
2020 _ _ O
1 _ _ O

Announcements _ _ O
2 _ _ O

The _ _ O
Latch _ _ O
3 _ _ O

What _ _ O
the _ _ O
heck _ _ O
● _ _ O
Time _ _ O
to _ _ O
blow _ _ O
your _ _ O
mind _ _ O
. _ _ O
● _ _ O
Let _ _ O
’s _ _ O
look _ _ O
at _ _ O
this _ _ O
circuit _ _ O
. _ _ O
o _ _ O
Yes _ _ O
, _ _ O
you _ _ O
can _ _ O
do _ _ O
this _ _ O
. _ _ O
R _ _ O
S _ _ O
Q _ _ O
Q _ _ O
4 _ _ O

What _ _ O
the _ _ O
actual _ _ O
heck _ _ O
● _ _ O
What _ _ O
is _ _ O
this _ _ O
in _ _ O
combinational _ _ O
logic _ _ O
? _ _ O
? _ _ O
o _ _ O
Q _ _ O
= _ _ O
R _ _ O
+ _ _ O
( _ _ O
S _ _ O
+ _ _ O
( _ _ O
R _ _ O
+ _ _ O
( _ _ O
S _ _ O
+ _ _ O
( _ _ O
R _ _ O
+ _ _ O
( _ _ O
… _ _ O
oh _ _ O
gosh _ _ O
. _ _ O
Hmm _ _ O
● _ _ O
This _ _ O
makes _ _ O
no _ _ O
sense _ _ O
( _ _ O
from _ _ O
a _ _ O
combinational _ _ O
point _ _ O
of _ _ O
view _ _ O
) _ _ O
R _ _ O
S _ _ O
Q _ _ O
Q _ _ O
5 _ _ O

S _ _ O
/ _ _ O
R _ _ O
Latch _ _ O
● _ _ O
The _ _ O
feedback _ _ O
behavior _ _ O
allows _ _ O
it _ _ O
to _ _ O
“ _ _ O
store _ _ O
” _ _ O
a _ _ O
value _ _ O
. _ _ O
o _ _ O
“ _ _ O
1 _ _ O
” _ _ O
on _ _ O
S _ _ O
will _ _ O
set _ _ O
Q _ _ O
to _ _ O
“ _ _ O
1 _ _ O
” _ _ O
, _ _ O
and _ _ O
“ _ _ O
1 _ _ O
” _ _ O
or _ _ O
R _ _ O
will _ _ O
reset _ _ O
Q _ _ O
to _ _ O
“ _ _ O
0 _ _ O
” _ _ O
o _ _ O
It _ _ O
becomes _ _ O
stable _ _ O
at _ _ O
that _ _ O
value _ _ O
, _ _ O
hence _ _ O
, _ _ O
it _ _ O
is _ _ O
an _ _ O
S _ _ O
/ _ _ O
R _ _ O
Latch _ _ O
. _ _ O
o _ _ O
It _ _ O
’s _ _ O
really _ _ O
heckin _ _ O
’ _ _ O
neat _ _ O
. _ _ O
R _ _ O
( _ _ O
reset _ _ O
) _ _ O
Q _ _ O
( _ _ O
set _ _ O
) _ _ O
S _ _ O
Q _ _ O
6 _ _ O

S _ _ O
/ _ _ O
R _ _ O
Latch _ _ O
( _ _ O
animated _ _ O
) _ _ O
● _ _ O
Currently _ _ O
, _ _ O
the _ _ O
value _ _ O
is _ _ O
“ _ _ O
0 _ _ O
” _ _ O
, _ _ O
and _ _ O
we _ _ O
can _ _ O
change _ _ O
it _ _ O
to _ _ O
“ _ _ O
1 _ _ O
” _ _ O
by _ _ O
sending _ _ O
a _ _ O
“ _ _ O
1 _ _ O
” _ _ O
on _ _ O
S _ _ O
R _ _ O
( _ _ O
reset _ _ O
) _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
Q _ _ O
NOR _ _ O
Stable _ _ O
Feedback _ _ O
( _ _ O
set _ _ O
) _ _ O
S _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
Q _ _ O
7 _ _ O

S _ _ O
/ _ _ O
R _ _ O
Latch _ _ O
( _ _ O
animated _ _ O
) _ _ O
● _ _ O
Currently _ _ O
, _ _ O
the _ _ O
value _ _ O
is _ _ O
“ _ _ O
1 _ _ O
” _ _ O
, _ _ O
and _ _ O
we _ _ O
can _ _ O
maintain _ _ O
it _ _ O
by _ _ O
having _ _ O
R _ _ O
and _ _ O
S _ _ O
be _ _ O
“ _ _ O
0 _ _ O
” _ _ O
● _ _ O
If _ _ O
the _ _ O
value _ _ O
was _ _ O
“ _ _ O
0 _ _ O
” _ _ O
, _ _ O
this _ _ O
would _ _ O
also _ _ O
maintain _ _ O
that _ _ O
value _ _ O
. _ _ O
● _ _ O
This _ _ O
is _ _ O
the _ _ O
“ _ _ O
latch _ _ O
” _ _ O
operation _ _ O
. _ _ O
This _ _ O
is _ _ O
how _ _ O
an _ _ O
S _ _ O
/ _ _ O
R _ _ O
Latch _ _ O
can _ _ O
“ _ _ O
store _ _ O
” _ _ O
a _ _ O
value _ _ O
. _ _ O
R _ _ O
( _ _ O
reset _ _ O
) _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
Q _ _ O
NOR _ _ O
Stable _ _ O
Feedback _ _ O
( _ _ O
set _ _ O
) _ _ O
S _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
Q _ _ O
8 _ _ O

S _ _ O
/ _ _ O
R _ _ O
Latch _ _ O
( _ _ O
animated _ _ O
) _ _ O
● _ _ O
Currently _ _ O
, _ _ O
the _ _ O
value _ _ O
is _ _ O
“ _ _ O
1 _ _ O
” _ _ O
, _ _ O
and _ _ O
we _ _ O
can _ _ O
change _ _ O
it _ _ O
to _ _ O
“ _ _ O
0 _ _ O
” _ _ O
by _ _ O
sending _ _ O
a _ _ O
“ _ _ O
1 _ _ O
” _ _ O
on _ _ O
R _ _ O
o _ _ O
And _ _ O
having _ _ O
S _ _ O
be _ _ O
“ _ _ O
0 _ _ O
” _ _ O
R _ _ O
1 _ _ O
( _ _ O
reset _ _ O
) _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
Q _ _ O
NOR _ _ O
Stable _ _ O
Feedback _ _ O
( _ _ O
set _ _ O
) _ _ O
S _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
Q _ _ O
9 _ _ O

S _ _ O
/ _ _ O
R _ _ O
Latch _ _ O
( _ _ O
animated _ _ O
) _ _ O
● _ _ O
Hmm _ _ O
, _ _ O
let _ _ O
’s _ _ O
set _ _ O
R _ _ O
and _ _ O
S _ _ O
to _ _ O
“ _ _ O
1 _ _ O
” _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
. _ _ O
● _ _ O
And _ _ O
then _ _ O
let _ _ O
’s _ _ O
set _ _ O
them _ _ O
both _ _ O
to _ _ O
“ _ _ O
0 _ _ O
” _ _ O
afterward _ _ O
. _ _ O
( _ _ O
That _ _ O
should _ _ O
be _ _ O
stable _ _ O
… _ _ O
right _ _ O
? _ _ O
) _ _ O
● _ _ O
Oh _ _ O
no _ _ O
. _ _ O
Oscillation _ _ O
. _ _ O
Q _ _ O
is _ _ O
… _ _ O
both _ _ O
… _ _ O
0 _ _ O
and _ _ O
1 _ _ O
… _ _ O
? _ _ O
? _ _ O
? _ _ O
Kinda _ _ O
? _ _ O
? _ _ O
? _ _ O
R _ _ O
0 _ _ O
1 _ _ O
( _ _ O
reset _ _ O
) _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
Q _ _ O
NOR _ _ O
Stable _ _ O
Feedback _ _ O
( _ _ O
but _ _ O
illogical _ _ O
) _ _ O
( _ _ O
set _ _ O
) _ _ O
S _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
Q _ _ O
10 _ _ O

S _ _ O
/ _ _ O
R _ _ O
Latch _ _ O
: _ _ O
The _ _ O
Whole _ _ O
Truth _ _ O
table _ _ O
● _ _ O
The _ _ O
state _ _ O
of _ _ O
this _ _ O
logic _ _ O
depends _ _ O
on _ _ O
the _ _ O
prior _ _ O
state _ _ O
. _ _ O
o _ _ O
Q _ _ O
here _ _ O
is _ _ O
the _ _ O
current _ _ O
value _ _ O
of _ _ O
Q _ _ O
o _ _ O
Qnext _ _ O
will _ _ O
be _ _ O
the _ _ O
new _ _ O
value _ _ O
. _ _ O
● _ _ O
This _ _ O
is _ _ O
an _ _ O
example _ _ O
of _ _ O
sequential _ _ O
logic _ _ O
. _ _ O
o _ _ O
On _ _ O
your _ _ O
own _ _ O
: _ _ O
You _ _ O
can _ _ O
build _ _ O
it _ _ O
out _ _ O
of _ _ O
NANDs _ _ O
as _ _ O
well _ _ O
. _ _ O
Try _ _ O
to _ _ O
come _ _ O
up _ _ O
with _ _ O
that _ _ O
. _ _ O
R _ _ O
( _ _ O
reset _ _ O
) _ _ O
Q _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
oh _ _ O
no _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
( _ _ O
set _ _ O
) _ _ O
S _ _ O
Q _ _ O
aaaa _ _ O
11 _ _ O

Let _ _ O
’s _ _ O
look _ _ O
at _ _ O
some _ _ O
circuits _ _ O
● _ _ O
sr_latch.circ _ _ O
● _ _ O
Factorio _ _ O
latch _ _ O
0eNrtV8GOmzAQ _ _ O
/ _ _ O
ZVqzlCB2ZANUvsFPbXHqkIOTJKRjEHGREUR _ _ O
/ _ _ O
14bWjYb1iyhP _ _ O
WylPYTI2J558948AxfYiwYrRVJDcgHKSllD8v0CNR0lF _ _ O
/ _ _ O
aebiuEBEhjAR5IXthRjhnlqP _ _ O
ysLPYkuS4VdB6QzPEnJGH3wwOUmjThEK0ftKlsij0qs2CMY _ _ O
/ _ _ O
NpLvV1IA+qsjZ7S2n _ _ O
Tm3h+5EFr _ _ O
/ _ _ O
kKTwmzQqhTpHk _ _ O
/ _ _ O
8TGa1WXIgoVE5cJ9J6cbcGVMOK3yFOfTxGlt6eA _ _ O
1+SCMxsxhqGyu0l6NClNflUA4JM2tJZQ3pfmh3d503qZjNMTctOPi4eSo5JzVAGb _ _ O
K9QMDvmKmZy2kEfSBV63QxIUN5Q+29JpAEdlBUXPUwE _ _ O
/ _ _ O
hkNpWNrpp1Yas27el _ _ O
OD6osUpImDiQHLmrsHJRbkW4Ij24J955Nx8+nmW3FF4W73RhNhfSALQPB5kG _ _ O
4miJa2RTsTTXF5xVNMZrvn7TE1IPeYrO6NWbzGm8coj481VpwIXzBi2oqZjh _ _ O
/ _ _ O
ov1J _ _ O
PGq3QjouW30ieXxNPTPd1GhSidKeoVo1uJx6FwubEU2BOTWFj8JEU5T5VSnQyQ _ _ O
dbfQ7cyvPgABav81z4brl7zLFb6sjdXzjy9gTfzoNgjo7Y3tmqbGyIhVzF81yFgQPY4 _ _ O
6q3JPYGX5J2y56Hu3XeZO _ _ O
/ _ _ O
vSPMd57ZfPO+ox1k7xsv8FQZ3PBHZ _ _ O
/ _ _ O
/ _ _ O
5A3PYsGL777 _ _ O
6Xk6vPKA8H3aIDCV _ _ O
/ _ _ O
/ _ _ O
bhy9cZydz72w82ZezjYJwE8X213W _ _ O
/ _ _ O
ABNorVw= _ _ O
12 _ _ O

Let _ _ O
’s _ _ O
look _ _ O
at _ _ O
some _ _ O
circuits _ _ O
● _ _ O
Factorio _ _ O
power _ _ O
latch _ _ O
0eNrtWM2OmzAQfpVqzlBh8o+0K _ _ O
/ _ _ O
XeQ+9VhRyYbCwZGxmTNop4gL5Hn6xPUh _ _ O
u6bBrCbyMlhz2EyMb+5ht _ _ O
/ _ _ O
M2ObE2x5jqliQkNwAhZJkUHw9QQZexGU2z59TBEC _ _ O
YBoTcEDQxLZijFiMyo1ksmWCaqmgcICJGH9AQIpvDqDQTDOs0MrGMRR5skVlBt _ _ O
Q41p6mQp8DOZDKzMyVwpo3eO7MgaP9MybMBK0kD7e4pwdmRpshO8Y1qh _ _ O
beB6Z0bnpqk9UI9xOUaLl1nHjeOfnKjMDIcsgsFrEPhfG5M8y0DLGIqShnumzauU _ _ O
XhNPz1u9at6S75uKgcJoZJzFRFpIS55v5fzNC8i1lNecdUpsOxy1GpAcFmY1tJSlXJ _ _ O
MYBnM0PmOs1HYL4oRFHhpsewXOtwp2QSMmFwINhRnmHxH6vt _ _ O
/ _ _ O
PN61RTDAd _ _ O
9iVUS60fwLtPkwaWcTpfUfR9rfP39NENfqcztp _ _ O
/ _ _ O
W5p+7T0L7W8LtZ8lFjeHdLwLGVe _ _ O
9fIu5Hp6gExcdMu1bsjhDNTN6TZTR0E _ _ O
/ _ _ O
p0usZTfHtvxeTAsZ _ _ O
/ _ _ O
6FC5vnu+d2spi0RM _ _ O
R8j+XxY2i9r3xKMWZ64yA1lxSI3lRybKvpvaT _ _ O
/ _ _ O
NvcvY27QQW03bPO53LCDeTfaOW _ _ O
5ejvt3DG3cyWI+Dawu79aTSQd4rx5jUImRoZVmNBhpeeUgPWFuIbN7WLqGcu5 _ _ O
wmaVs98lpuP6926lCYEAlUHPWeiZe+YDCv8wyNKS7tfUurHIcruWxZBJtPU8qg _ _ O
/ _ _ O
z _ _ O
hl8P5pMvLysxoWn4RMqmH++4G5b0tpq1LrMVVofU1Fg1x+qwnOPu04wOkWje _ _ O
PwRX5H9eEz1dHe9B5QZaVEq5lHFrOl _ _ O
/ _ _ O
RXFHz5GPCg= _ _ O
13 _ _ O

Keeping _ _ O
Everything _ _ O
In _ _ O
Order _ _ O
The _ _ O
Clock _ _ O
14 _ _ O

Propagation _ _ O
Delay _ _ O
( _ _ O
Basics _ _ O
) _ _ O
● _ _ O
Ok _ _ O
. _ _ O
Q _ _ O
at _ _ O
t=0 _ _ O
is _ _ O
different _ _ O
than _ _ O
at _ _ O
t=1 _ _ O
. _ _ O
● _ _ O
How _ _ O
long _ _ O
does _ _ O
it _ _ O
take _ _ O
for _ _ O
a _ _ O
change _ _ O
to _ _ O
occur _ _ O
? _ _ O
o _ _ O
( _ _ O
How _ _ O
much _ _ O
time _ _ O
is _ _ O
really _ _ O
between _ _ O
t=0 _ _ O
and _ _ O
t=1 _ _ O
) _ _ O
● _ _ O
This _ _ O
is _ _ O
bounded _ _ O
by _ _ O
propagation _ _ O
delay _ _ O
. _ _ O
R _ _ O
( _ _ O
reset _ _ O
) _ _ O
Q _ _ O
( _ _ O
set _ _ O
) _ _ O
S _ _ O
Q _ _ O
15 _ _ O

Propagation _ _ O
Delay _ _ O
● _ _ O
Propagation _ _ O
delay _ _ O
is _ _ O
the _ _ O
time _ _ O
it _ _ O
takes _ _ O
for _ _ O
a _ _ O
signal _ _ O
to _ _ O
pass _ _ O
from _ _ O
the _ _ O
inputs _ _ O
to _ _ O
the _ _ O
outputs _ _ O
● _ _ O
During _ _ O
that _ _ O
delay _ _ O
, _ _ O
the _ _ O
outputs _ _ O
are _ _ O
invalid _ _ O
( _ _ O
they _ _ O
can _ _ O
fluctuate _ _ O
) _ _ O
● _ _ O
After _ _ O
that _ _ O
delay _ _ O
, _ _ O
the _ _ O
outputs _ _ O
are _ _ O
valid _ _ O
● _ _ O
If _ _ O
you _ _ O
try _ _ O
to _ _ O
use _ _ O
the _ _ O
output _ _ O
while _ _ O
it _ _ O
's _ _ O
invalid _ _ O
, _ _ O
things _ _ O
break _ _ O
o _ _ O
stuff _ _ O
like _ _ O
2 _ _ O
+ _ _ O
2 _ _ O
= _ _ O
17 _ _ O
? _ _ O
? _ _ O
16 _ _ O

The _ _ O
Critical _ _ O
Path _ _ O
● _ _ O
The _ _ O
critical _ _ O
path _ _ O
is _ _ O
the _ _ O
path _ _ O
through _ _ O
a _ _ O
circuit _ _ O
that _ _ O
has _ _ O
the _ _ O
longest _ _ O
series _ _ O
of _ _ O
sequential _ _ O
operations _ _ O
● _ _ O
The _ _ O
longest _ _ O
propagation _ _ O
delay _ _ O
o _ _ O
they _ _ O
depend _ _ O
on _ _ O
each _ _ O
other _ _ O
and _ _ O
ca _ _ O
n't _ _ O
be _ _ O
done _ _ O
in _ _ O
parallel _ _ O
! _ _ O
17 _ _ O

S _ _ O
/ _ _ O
R _ _ O
Latch _ _ O
( _ _ O
animated _ _ O
) _ _ O
R _ _ O
S1 _ _ O
S _ _ O
0 _ _ O
Q _ _ O
1 _ _ O
Q _ _ O
0 _ _ O
time _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
Q _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
Q _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
18 _ _ O

Propagation _ _ O
Delay _ _ O
( _ _ O
Basics _ _ O
) _ _ O
● _ _ O
If _ _ O
we _ _ O
have _ _ O
a _ _ O
component _ _ O
after _ _ O
this _ _ O
S _ _ O
/ _ _ O
R _ _ O
latch _ _ O
that _ _ O
reacts _ _ O
to _ _ O
the _ _ O
data _ _ O
on _ _ O
Q _ _ O
… _ _ O
we _ _ O
need _ _ O
it _ _ O
to _ _ O
synchronize _ _ O
. _ _ O
o _ _ O
We _ _ O
need _ _ O
it _ _ O
to _ _ O
wait _ _ O
until _ _ O
the _ _ O
Q _ _ O
value _ _ O
is _ _ O
updated _ _ O
. _ _ O
● _ _ O
One _ _ O
method _ _ O
: _ _ O
something _ _ O
that _ _ O
periodically _ _ O
and _ _ O
predictably _ _ O
updates _ _ O
in _ _ O
an _ _ O
interval _ _ O
that _ _ O
’s _ _ O
a _ _ O
little _ _ O
longer _ _ O
than _ _ O
the _ _ O
propagation _ _ O
delay _ _ O
. _ _ O
R _ _ O
( _ _ O
reset _ _ O
) _ _ O
Q _ _ O
( _ _ O
set _ _ O
) _ _ O
S _ _ O
Q _ _ O
19 _ _ O

Tick _ _ O
Tock _ _ O
● _ _ O
Sequential _ _ O
logic _ _ O
is _ _ O
based _ _ O
on _ _ O
time _ _ O
, _ _ O
and _ _ O
time _ _ O
is _ _ O
continuous _ _ O
● _ _ O
Trying _ _ O
to _ _ O
build _ _ O
sequential _ _ O
circuits _ _ O
without _ _ O
anything _ _ O
to _ _ O
keep _ _ O
circuit _ _ O
track _ _ O
of _ _ O
time _ _ O
is _ _ O
… _ _ O
possible _ _ O
, _ _ O
but _ _ O
very _ _ O
very _ _ O
difficult _ _ O
symbol _ _ O
● _ _ O
This _ _ O
is _ _ O
why _ _ O
we _ _ O
use _ _ O
a _ _ O
clock _ _ O
signal _ _ O
: _ _ O
it _ _ O
goes _ _ O
0 _ _ O
, _ _ O
1 _ _ O
, _ _ O
0 _ _ O
, _ _ O
1 _ _ O
, _ _ O
0 _ _ O
, _ _ O
1 _ _ O
… _ _ O
o _ _ O
Oscillation _ _ O
… _ _ O
on _ _ O
purpose _ _ O
this _ _ O
time _ _ O
. _ _ O
Each _ _ O
period _ _ O
is _ _ O
called _ _ O
a _ _ O
clock _ _ O
cycle _ _ O
. _ _ O
o _ _ O
We _ _ O
typically _ _ O
electrocute _ _ O
rocks _ _ O
to _ _ O
do _ _ O
this _ _ O
, _ _ O
as _ _ O
usual _ _ O
. _ _ O
( _ _ O
poor _ _ O
rocks _ _ O
 _ _ O
) _ _ O
1 _ _ O
High _ _ O
0 _ _ O
time _ _ O
Low _ _ O
we _ _ O
can _ _ O
synchronize _ _ O
our _ _ O
circuits _ _ O
to _ _ O
a _ _ O
clock _ _ O
state _ _ O
: _ _ O
when _ _ O
it _ _ O
is _ _ O
high _ _ O
( _ _ O
1 _ _ O
) _ _ O
or _ _ O
low _ _ O
( _ _ O
0 _ _ O
) _ _ O
20 _ _ O

Adding _ _ O
a _ _ O
Clock _ _ O
● _ _ O
We _ _ O
need _ _ O
to _ _ O
augment _ _ O
our _ _ O
latch _ _ O
to _ _ O
wait _ _ O
for _ _ O
the _ _ O
clock _ _ O
before _ _ O
updating _ _ O
the _ _ O
value _ _ O
. _ _ O
● _ _ O
We _ _ O
need _ _ O
to _ _ O
account _ _ O
for _ _ O
the _ _ O
clock _ _ O
signal _ _ O
and _ _ O
only _ _ O
transmit _ _ O
a _ _ O
“ _ _ O
1 _ _ O
” _ _ O
on _ _ O
R _ _ O
or _ _ O
S _ _ O
if _ _ O
and _ _ O
only _ _ O
if _ _ O
the _ _ O
clock _ _ O
is _ _ O
high _ _ O
( _ _ O
or _ _ O
low _ _ O
) _ _ O
. _ _ O
● _ _ O
Which _ _ O
leads _ _ O
us _ _ O
to _ _ O
something _ _ O
like _ _ O
this _ _ O
maybe _ _ O
… _ _ O
o _ _ O
But _ _ O
let _ _ O
’s _ _ O
refine _ _ O
it _ _ O
a _ _ O
bit _ _ O
… _ _ O
( _ _ O
btw _ _ O
, _ _ O
how _ _ O
complex _ _ O
is _ _ O
this _ _ O
? _ _ O
How _ _ O
many _ _ O
transistors _ _ O
? _ _ O
) _ _ O
R _ _ O
R _ _ O
Q _ _ O
C _ _ O
S _ _ O
S _ _ O
Q _ _ O
21 _ _ O

D _ _ O
( _ _ O
ata _ _ O
) _ _ O
Latch _ _ O
● _ _ O
If _ _ O
we _ _ O
do _ _ O
something _ _ O
like _ _ O
this _ _ O
, _ _ O
we _ _ O
simplify _ _ O
our _ _ O
S _ _ O
/ _ _ O
R _ _ O
Latch _ _ O
into _ _ O
a _ _ O
nicer _ _ O
synchronized _ _ O
latch _ _ O
called _ _ O
a _ _ O
D-Latch _ _ O
. _ _ O
● _ _ O
“ _ _ O
C _ _ O
” _ _ O
is _ _ O
the _ _ O
clock _ _ O
. _ _ O
“ _ _ O
D _ _ O
” _ _ O
is _ _ O
the _ _ O
data _ _ O
to _ _ O
latch _ _ O
when _ _ O
the _ _ O
clock _ _ O
is _ _ O
high _ _ O
. _ _ O
● _ _ O
Circuit _ _ O
only _ _ O
changes _ _ O
the _ _ O
value _ _ O
when _ _ O
the _ _ O
clock _ _ O
signal _ _ O
is _ _ O
1 _ _ O
… _ _ O
o _ _ O
Latches _ _ O
when _ _ O
clock _ _ O
is _ _ O
0 _ _ O
! _ _ O
C _ _ O
D _ _ O
R _ _ O
S _ _ O
Q _ _ O
Q _ _ O
22 _ _ O

D _ _ O
Latch _ _ O
● _ _ O
When _ _ O
clock _ _ O
is _ _ O
low _ _ O
and _ _ O
D _ _ O
is _ _ O
… _ _ O
do _ _ O
n’t _ _ O
care _ _ O
! _ _ O
o _ _ O
Nothing _ _ O
changes _ _ O
C _ _ O
D _ _ O
R _ _ O
S _ _ O
Q _ _ O
Q _ _ O
23 _ _ O

D _ _ O
Latch _ _ O
● _ _ O
When _ _ O
clock _ _ O
is _ _ O
high _ _ O
and _ _ O
D _ _ O
is _ _ O
high _ _ O
o _ _ O
It _ _ O
’s _ _ O
a _ _ O
set _ _ O
operation _ _ O
C _ _ O
D _ _ O
R _ _ O
S _ _ O
Q _ _ O
Q _ _ O
24 _ _ O

D _ _ O
Latch _ _ O
● _ _ O
When _ _ O
clock _ _ O
is _ _ O
high _ _ O
and _ _ O
D _ _ O
is _ _ O
low _ _ O
o _ _ O
It _ _ O
’s _ _ O
a _ _ O
reset _ _ O
operation _ _ O
C _ _ O
D _ _ O
R _ _ O
S _ _ O
Q _ _ O
Q _ _ O
25 _ _ O

D _ _ O
Latch _ _ O
● _ _ O
We _ _ O
can _ _ O
abstract _ _ O
this _ _ O
away _ _ O
and _ _ O
start _ _ O
using _ _ O
this _ _ O
symbol _ _ O
: _ _ O
D _ _ O
Q _ _ O
C _ _ O
Q _ _ O
26 _ _ O

D _ _ O
Latch _ _ O
● _ _ O
We _ _ O
often _ _ O
omit _ _ O
the _ _ O
“ _ _ O
C _ _ O
” _ _ O
for _ _ O
the _ _ O
clock _ _ O
and _ _ O
use _ _ O
a _ _ O
triangle _ _ O
instead _ _ O
: _ _ O
o _ _ O
Sometimes _ _ O
you _ _ O
’ll _ _ O
see _ _ O
a _ _ O
square _ _ O
instead _ _ O
. _ _ O
Logisim _ _ O
uses _ _ O
triangles _ _ O
. _ _ O
D _ _ O
Q _ _ O
D _ _ O
Latch _ _ O
Q _ _ O
27 _ _ O

Tick _ _ O
Tock _ _ O
: _ _ O
D _ _ O
Latch _ _ O
● _ _ O
This _ _ O
diagram _ _ O
shows _ _ O
the _ _ O
behavior _ _ O
of _ _ O
the _ _ O
system _ _ O
over _ _ O
time _ _ O
. _ _ O
o _ _ O
This _ _ O
is _ _ O
“ _ _ O
high _ _ O
” _ _ O
triggered _ _ O
. _ _ O
o _ _ O
Note _ _ O
the _ _ O
propagation _ _ O
delay _ _ O
. _ _ O
And _ _ O
how _ _ O
Q _ _ O
depends _ _ O
on _ _ O
D _ _ O
AND _ _ O
clock _ _ O
. _ _ O
D _ _ O
1 _ _ O
0 _ _ O
C _ _ O
1 _ _ O
0 _ _ O
Q _ _ O
1 _ _ O
0 _ _ O
time _ _ O
28 _ _ O

Problems _ _ O
: _ _ O
Owner _ _ O
of _ _ O
a _ _ O
lonely _ _ O
( _ _ O
D _ _ O
) _ _ O
Latch _ _ O
● _ _ O
What _ _ O
if _ _ O
we _ _ O
do _ _ O
n’t _ _ O
want _ _ O
to _ _ O
change _ _ O
the _ _ O
value _ _ O
of _ _ O
Q. _ _ O
o _ _ O
This _ _ O
means _ _ O
we _ _ O
have _ _ O
to _ _ O
constantly _ _ O
recharge _ _ O
the _ _ O
value _ _ O
, _ _ O
that _ _ O
is _ _ O
“ _ _ O
D _ _ O
” _ _ O
has _ _ O
to _ _ O
be _ _ O
what _ _ O
we _ _ O
want _ _ O
Q _ _ O
to _ _ O
be _ _ O
every _ _ O
tick _ _ O
, _ _ O
limiting _ _ O
the _ _ O
usefulness _ _ O
. _ _ O
● _ _ O
We _ _ O
need _ _ O
a _ _ O
way _ _ O
to _ _ O
enable _ _ O
or _ _ O
disable _ _ O
the _ _ O
update _ _ O
. _ _ O
C _ _ O
D _ _ O
Q _ _ O
Q _ _ O
29 _ _ O

Problems _ _ O
: _ _ O
Owner _ _ O
of _ _ O
a _ _ O
lonely _ _ O
( _ _ O
D _ _ O
) _ _ O
Latch _ _ O
● _ _ O
We _ _ O
could _ _ O
simply _ _ O
add _ _ O
a _ _ O
signal _ _ O
that _ _ O
we _ _ O
usually _ _ O
keep _ _ O
“ _ _ O
0 _ _ O
” _ _ O
and _ _ O
only _ _ O
allow _ _ O
the _ _ O
latch _ _ O
when _ _ O
that _ _ O
‘ _ _ O
write _ _ O
enable _ _ O
’ _ _ O
( _ _ O
W _ _ O
) _ _ O
signal _ _ O
is _ _ O
“ _ _ O
1 _ _ O
” _ _ O
W _ _ O
C _ _ O
Q _ _ O
D _ _ O
Q _ _ O
30 _ _ O

Let _ _ O
’s _ _ O
look _ _ O
at _ _ O
some _ _ O
circuits _ _ O
● _ _ O
Weird _ _ O
behaviour _ _ O
when _ _ O
clock _ _ O
is _ _ O
used _ _ O
in _ _ O
logic _ _ O
! _ _ O
! _ _ O
o _ _ O
Note _ _ O
: _ _ O
N-e-v-e-r _ _ O
, _ _ O
never _ _ O
ever _ _ O
, _ _ O
connect _ _ O
logic _ _ O
to _ _ O
a _ _ O
clock _ _ O
port _ _ O
. _ _ O
▪ _ _ O
It _ _ O
’s _ _ O
hard _ _ O
to _ _ O
predict _ _ O
the _ _ O
behavior _ _ O
of _ _ O
circuits _ _ O
! _ _ O
● _ _ O
d_latch.circ _ _ O
● _ _ O
broken_latch.circ _ _ O
31 _ _ O

And _ _ O
The _ _ O
Flip-Flop _ _ O
32 _ _ O

The _ _ O
New _ _ O
Problem _ _ O
● _ _ O
Remember _ _ O
propagation _ _ O
delay _ _ O
? _ _ O
Pesky _ _ O
thing _ _ O
, _ _ O
that _ _ O
. _ _ O
● _ _ O
Clocks _ _ O
do _ _ O
n’t _ _ O
always _ _ O
help _ _ O
. _ _ O
o _ _ O
We _ _ O
sometimes _ _ O
need _ _ O
a _ _ O
clock _ _ O
cycle _ _ O
to _ _ O
compute _ _ O
a _ _ O
value _ _ O
o _ _ O
… _ _ O
and _ _ O
then _ _ O
another _ _ O
clock _ _ O
cycle _ _ O
to _ _ O
compute _ _ O
the _ _ O
next _ _ O
thing _ _ O
. _ _ O
o _ _ O
… _ _ O
but _ _ O
the _ _ O
next _ _ O
thing _ _ O
needs _ _ O
to _ _ O
be _ _ O
computing _ _ O
the _ _ O
CURRENT _ _ O
thing _ _ O
. _ _ O
o _ _ O
… _ _ O
but _ _ O
we _ _ O
would _ _ O
overwrite _ _ O
that _ _ O
input _ _ O
… _ _ O
so _ _ O
it _ _ O
would _ _ O
compute _ _ O
something _ _ O
else _ _ O
o _ _ O
… _ _ O
before _ _ O
it _ _ O
was _ _ O
done _ _ O
computing _ _ O
the _ _ O
first _ _ O
thing _ _ O
… _ _ O
● _ _ O
AHHHHH _ _ O
! _ _ O
! _ _ O
! _ _ O
! _ _ O
! _ _ O
33 _ _ O

Waiting _ _ O
for _ _ O
Godata _ _ O
● _ _ O
We _ _ O
want _ _ O
to _ _ O
record _ _ O
an _ _ O
intent _ _ O
to _ _ O
store _ _ O
( _ _ O
latch _ _ O
) _ _ O
a _ _ O
value _ _ O
. _ _ O
o _ _ O
That _ _ O
is _ _ O
, _ _ O
to _ _ O
delay _ _ O
the _ _ O
latch _ _ O
by _ _ O
around _ _ O
a _ _ O
cycle _ _ O
. _ _ O
● _ _ O
( _ _ O
But _ _ O
only _ _ O
actually _ _ O
do _ _ O
it _ _ O
at _ _ O
an _ _ O
idle _ _ O
moment _ _ O
) _ _ O
o _ _ O
When _ _ O
do _ _ O
we _ _ O
have _ _ O
an _ _ O
idle _ _ O
moment _ _ O
in _ _ O
the _ _ O
latch _ _ O
? _ _ O
? _ _ O
? _ _ O
▪ _ _ O
When _ _ O
the _ _ O
clock _ _ O
is _ _ O
low _ _ O
! _ _ O
! _ _ O
● _ _ O
If _ _ O
we _ _ O
cascade _ _ O
two _ _ O
D-Latches _ _ O
, _ _ O
and _ _ O
cleverly _ _ O
handle _ _ O
the _ _ O
clock _ _ O
… _ _ O
o _ _ O
We _ _ O
can _ _ O
create _ _ O
a _ _ O
register _ _ O
! _ _ O
( _ _ O
Specifically _ _ O
, _ _ O
a _ _ O
D _ _ O
Flip-Flop _ _ O
) _ _ O
▪ _ _ O
Yes _ _ O
, _ _ O
that _ _ O
’s _ _ O
actually _ _ O
what _ _ O
it _ _ O
is _ _ O
called _ _ O
. _ _ O
☺ _ _ O
● _ _ O
We _ _ O
will _ _ O
create _ _ O
a _ _ O
component _ _ O
that _ _ O
latches _ _ O
a _ _ O
value _ _ O
on _ _ O
the _ _ O
clock _ _ O
’s _ _ O
falling _ _ O
edge _ _ O
. _ _ O
o _ _ O
You _ _ O
can _ _ O
also _ _ O
make _ _ O
a _ _ O
rising _ _ O
edge _ _ O
D _ _ O
Flip-Flop _ _ O
by _ _ O
inverting _ _ O
the _ _ O
clock _ _ O
signal _ _ O
. _ _ O
34 _ _ O

The _ _ O
D _ _ O
Flip-Flop _ _ O
● _ _ O
While _ _ O
the _ _ O
clock _ _ O
is _ _ O
“ _ _ O
1 _ _ O
” _ _ O
( _ _ O
high _ _ O
) _ _ O
, _ _ O
D _ _ O
’ _ _ O
can _ _ O
be _ _ O
computed _ _ O
while _ _ O
Q _ _ O
remains _ _ O
unaffected _ _ O
. _ _ O
o _ _ O
Q _ _ O
is _ _ O
being _ _ O
used _ _ O
, _ _ O
after _ _ O
all _ _ O
, _ _ O
by _ _ O
whatever _ _ O
component _ _ O
is _ _ O
after _ _ O
the _ _ O
flip-flop _ _ O
o _ _ O
While _ _ O
D _ _ O
is _ _ O
not _ _ O
immediately _ _ O
known _ _ O
and _ _ O
is _ _ O
being _ _ O
computed _ _ O
by _ _ O
the _ _ O
component _ _ O
before _ _ O
the _ _ O
flip-flop _ _ O
● _ _ O
Falling _ _ O
clock _ _ O
edge _ _ O
: _ _ O
value _ _ O
is _ _ O
copied _ _ O
from _ _ O
the _ _ O
first _ _ O
latch _ _ O
to _ _ O
the _ _ O
second _ _ O
. _ _ O
o _ _ O
This _ _ O
handles _ _ O
data _ _ O
propagation _ _ O
within _ _ O
a _ _ O
sequential _ _ O
circuit _ _ O
. _ _ O
D _ _ O
C _ _ O
D _ _ O
Q _ _ O
D _ _ O
Latch _ _ O
Q _ _ O
D _ _ O
’ _ _ O
D _ _ O
D _ _ O
Latch _ _ O
Q _ _ O
Q _ _ O
Q _ _ O
Q _ _ O
35 _ _ O

Tick _ _ O
Tock _ _ O
● _ _ O
In _ _ O
this _ _ O
example _ _ O
, _ _ O
we _ _ O
are _ _ O
using _ _ O
the _ _ O
clock _ _ O
edges _ _ O
o _ _ O
The _ _ O
circuit _ _ O
only _ _ O
updates _ _ O
its _ _ O
output _ _ O
in _ _ O
the _ _ O
instant _ _ O
the _ _ O
clock _ _ O
changes _ _ O
! _ _ O
● _ _ O
During _ _ O
the _ _ O
remaining _ _ O
time _ _ O
, _ _ O
other _ _ O
circuits _ _ O
can _ _ O
compute _ _ O
the _ _ O
values _ _ O
rising _ _ O
edge _ _ O
1 _ _ O
0 _ _ O
time _ _ O
falling _ _ O
edge _ _ O
we _ _ O
can _ _ O
synchronize _ _ O
our _ _ O
circuits _ _ O
to _ _ O
a _ _ O
clock _ _ O
edge _ _ O
: _ _ O
when _ _ O
it _ _ O
changes _ _ O
between _ _ O
0 _ _ O
and _ _ O
1 _ _ O
36 _ _ O

Tick _ _ O
Tock _ _ O
: _ _ O
Falling _ _ O
Edge _ _ O
D _ _ O
Flip-Flop _ _ O
● _ _ O
This _ _ O
diagram _ _ O
shows _ _ O
the _ _ O
behavior _ _ O
of _ _ O
the _ _ O
system _ _ O
over _ _ O
time _ _ O
. _ _ O
o _ _ O
This _ _ O
is _ _ O
“ _ _ O
falling _ _ O
edge _ _ O
” _ _ O
triggered _ _ O
. _ _ O
o _ _ O
Note _ _ O
the _ _ O
propagation _ _ O
delay _ _ O
. _ _ O
And _ _ O
how _ _ O
Q _ _ O
depends _ _ O
on _ _ O
D _ _ O
& _ _ O
& _ _ O
clock _ _ O
. _ _ O
D _ _ O
1 _ _ O
A _ _ O
Flip-Flop _ _ O
does _ _ O
n’t _ _ O
race _ _ O
“ _ _ O
D _ _ O
” _ _ O
0 _ _ O
C _ _ O
1 _ _ O
0 _ _ O
Q _ _ O
1 _ _ O
0 _ _ O
Q _ _ O
remains _ _ O
stable _ _ O
while _ _ O
clock _ _ O
remains _ _ O
high _ _ O
and _ _ O
low _ _ O
time _ _ O
37 _ _ O

The _ _ O
D _ _ O
Flip-Flop _ _ O
… _ _ O
Abstracted _ _ O
● _ _ O
We _ _ O
can _ _ O
of _ _ O
course _ _ O
reduce _ _ O
the _ _ O
flip-flop _ _ O
… _ _ O
it _ _ O
looks _ _ O
the _ _ O
same _ _ O
as _ _ O
the _ _ O
D _ _ O
Latch _ _ O
. _ _ O
o _ _ O
This _ _ O
is _ _ O
effectively _ _ O
a _ _ O
1-bit _ _ O
Register _ _ O
! _ _ O
o _ _ O
That _ _ O
is _ _ O
, _ _ O
it _ _ O
is _ _ O
a _ _ O
simple _ _ O
1-bit _ _ O
volatile _ _ O
memory _ _ O
cell _ _ O
. _ _ O
D _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
Q _ _ O
38 _ _ O

Let _ _ O
’s _ _ O
look _ _ O
at _ _ O
some _ _ O
circuits _ _ O
● _ _ O
D_flip_flop.circ _ _ O
● _ _ O
broken_latch.circ _ _ O
… _ _ O
again _ _ O
39 _ _ O

Real-world _ _ O
clocking _ _ O
issues _ _ O
40 _ _ O

Determining _ _ O
clock _ _ O
speed _ _ O
D _ _ O
0ns _ _ O
Q _ _ O
R _ _ O
2ns _ _ O
A _ _ O
1 _ _ O
B _ _ O
S _ _ O
5ns _ _ O
time _ _ O
R _ _ O
is _ _ O
clocked _ _ O
R _ _ O
’s _ _ O
Q _ _ O
becomes _ _ O
valid _ _ O
the _ _ O
adder _ _ O
has _ _ O
finished _ _ O
; _ _ O
clock _ _ O
R _ _ O
to _ _ O
store _ _ O
41 _ _ O

Determining _ _ O
clock _ _ O
speed _ _ O
● _ _ O
It _ _ O
takes _ _ O
5ns _ _ O
for _ _ O
a _ _ O
signal _ _ O
to _ _ O
propagate _ _ O
through _ _ O
our _ _ O
circuit _ _ O
● _ _ O
How _ _ O
fast _ _ O
can _ _ O
we _ _ O
clock _ _ O
it _ _ O
? _ _ O
o _ _ O
if _ _ O
the _ _ O
time _ _ O
between _ _ O
clocks _ _ O
is _ _ O
less _ _ O
than _ _ O
5ns _ _ O
, _ _ O
we _ _ O
'll _ _ O
clock _ _ O
the _ _ O
register _ _ O
too _ _ O
early _ _ O
( _ _ O
while _ _ O
the _ _ O
adder _ _ O
's _ _ O
outputs _ _ O
are _ _ O
invalid _ _ O
) _ _ O
o _ _ O
if _ _ O
the _ _ O
time _ _ O
between _ _ O
clocks _ _ O
is _ _ O
more _ _ O
than _ _ O
5ns _ _ O
, _ _ O
no _ _ O
big _ _ O
deal _ _ O
𝟏 _ _ O
𝟗 _ _ O
= _ _ O
𝟎. _ _ O
𝟐 _ _ O
× _ _ O
𝟏𝟎 _ _ O
𝐇𝐳 _ _ O
−𝟗 _ _ O
𝟓 _ _ O
× _ _ O
𝟏𝟎 _ _ O
𝒔 _ _ O
= _ _ O
𝟐𝟎𝟎𝐌𝐇𝐳 _ _ O
● _ _ O
The _ _ O
fastest _ _ O
we _ _ O
can _ _ O
clock _ _ O
a _ _ O
sequential _ _ O
circuit _ _ O
is _ _ O
the _ _ O
reciprocal _ _ O
of _ _ O
the _ _ O
critical _ _ O
path _ _ O
's _ _ O
propagation _ _ O
delay _ _ O
42 _ _ O

Clock _ _ O
Skew _ _ O
● _ _ O
The _ _ O
clock _ _ O
signal _ _ O
itself _ _ O
is _ _ O
n't _ _ O
immune _ _ O
to _ _ O
propagation _ _ O
delay _ _ O
! _ _ O
CLK _ _ O
watch _ _ O
the _ _ O
input _ _ O
as _ _ O
the _ _ O
IN _ _ O
clock _ _ O
pulse _ _ O
travels _ _ O
down _ _ O
12 _ _ O
? _ _ O
? _ _ O
? _ _ O
the _ _ O
wire _ _ O
to _ _ O
B. _ _ O
D _ _ O
Q _ _ O
D _ _ O
Q _ _ O
? _ _ O
? _ _ O
? _ _ O
12 _ _ O
EN _ _ O
EN _ _ O
B _ _ O
A _ _ O
● _ _ O
This _ _ O
is _ _ O
a _ _ O
race _ _ O
condition _ _ O
: _ _ O
the _ _ O
data _ _ O
and _ _ O
clock _ _ O
are _ _ O
having _ _ O
a _ _ O
race _ _ O
, _ _ O
and _ _ O
the _ _ O
outcome _ _ O
depends _ _ O
on _ _ O
who _ _ O
wins _ _ O
o _ _ O
the _ _ O
winner _ _ O
could _ _ O
change _ _ O
based _ _ O
on _ _ O
temperature _ _ O
, _ _ O
power _ _ O
, _ _ O
etc _ _ O
! _ _ O
43 _ _ O

Summary _ _ O
44 _ _ O

The _ _ O
S _ _ O
/ _ _ O
R _ _ O
Latch _ _ O
… _ _ O
Abstracted _ _ O
● _ _ O
We _ _ O
now _ _ O
know _ _ O
the _ _ O
S _ _ O
/ _ _ O
R _ _ O
Latch _ _ O
! _ _ O
o _ _ O
Allows _ _ O
you _ _ O
to _ _ O
store _ _ O
a _ _ O
value _ _ O
( _ _ O
1 _ _ O
/ _ _ O
0 _ _ O
) _ _ O
but _ _ O
with _ _ O
a _ _ O
pit _ _ O
fall _ _ O
! _ _ O
o _ _ O
It _ _ O
could _ _ O
turn _ _ O
into _ _ O
an _ _ O
oscillator _ _ O
if _ _ O
input _ _ O
an _ _ O
invalid _ _ O
combination _ _ O
▪ _ _ O
R=S=1 _ _ O
➔ _ _ O
R=S=0 _ _ O
R _ _ O
S _ _ O
S _ _ O
/ _ _ O
R _ _ O
latch _ _ O
Q _ _ O
Q _ _ O
45 _ _ O

The _ _ O
D _ _ O
Latch _ _ O
… _ _ O
Abstracted _ _ O
● _ _ O
We _ _ O
improved _ _ O
it _ _ O
by _ _ O
adding _ _ O
some _ _ O
input _ _ O
logic _ _ O
o _ _ O
Creating _ _ O
the _ _ O
D _ _ O
Latch _ _ O
o _ _ O
But _ _ O
it _ _ O
was _ _ O
transparent _ _ O
( _ _ O
active _ _ O
) _ _ O
during _ _ O
the _ _ O
high _ _ O
clock _ _ O
state _ _ O
D _ _ O
Q _ _ O
D _ _ O
Latch _ _ O
Q _ _ O
46 _ _ O

The _ _ O
D _ _ O
Flip-Flop _ _ O
… _ _ O
Abstracted _ _ O
● _ _ O
Lastly _ _ O
, _ _ O
we _ _ O
saw _ _ O
the _ _ O
heroic _ _ O
D _ _ O
Flip-Flop _ _ O
! _ _ O
o _ _ O
This _ _ O
is _ _ O
effectively _ _ O
a _ _ O
1-bit _ _ O
Register _ _ O
! _ _ O
o _ _ O
That _ _ O
is _ _ O
, _ _ O
it _ _ O
is _ _ O
a _ _ O
simple _ _ O
1-bit _ _ O
volatile _ _ O
memory _ _ O
cell _ _ O
. _ _ O
D _ _ O
Q _ _ O
Q _ _ O
D _ _ O
D _ _ O
Latch _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
D _ _ O
Q _ _ O
D _ _ O
Latch _ _ O
Q _ _ O
Q _ _ O
47 _ _ O

Circuits _ _ O
using _ _ O
Flip-Flops _ _ O
48 _ _ O

Creating _ _ O
an _ _ O
Adder _ _ O
Circuit _ _ O
● _ _ O
Suppose _ _ O
we _ _ O
want _ _ O
to _ _ O
( _ _ O
for _ _ O
1 _ _ O
bit _ _ O
) _ _ O
: _ _ O
o _ _ O
Have _ _ O
three _ _ O
1-bit _ _ O
registers _ _ O
: _ _ O
A _ _ O
, _ _ O
B _ _ O
, _ _ O
C _ _ O
o _ _ O
Compute _ _ O
: _ _ O
C _ _ O
= _ _ O
A _ _ O
+ _ _ O
B _ _ O
● _ _ O
We _ _ O
would _ _ O
need _ _ O
: _ _ O
o _ _ O
Three _ _ O
D _ _ O
Flip-flops _ _ O
( _ _ O
for _ _ O
A _ _ O
, _ _ O
B _ _ O
, _ _ O
and _ _ O
C _ _ O
) _ _ O
o _ _ O
A _ _ O
1-bit _ _ O
adder _ _ O
o _ _ O
What _ _ O
is _ _ O
the _ _ O
circuit _ _ O
? _ _ O
49 _ _ O

Register-backed _ _ O
1-bit _ _ O
Adder _ _ O
A _ _ O
Register _ _ O
D _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
Q _ _ O
B _ _ O
Register _ _ O
D _ _ O
( _ _ O
assume _ _ O
clock _ _ O
is _ _ O
connected _ _ O
) _ _ O
Q _ _ O
A _ _ O
S _ _ O
Half-Adder _ _ O
B _ _ O
C _ _ O
C _ _ O
Register _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
Q _ _ O
50 _ _ O

Register-backed _ _ O
1-bit _ _ O
Adder _ _ O
( _ _ O
assume _ _ O
clock _ _ O
is _ _ O
connected _ _ O
) _ _ O
D _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
Q _ _ O
A _ _ O
Register _ _ O
B _ _ O
Register _ _ O
D _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
Q _ _ O
A _ _ O
S _ _ O
Half-Adder _ _ O
B _ _ O
Co _ _ O
● _ _ O
What _ _ O
is _ _ O
the _ _ O
difference _ _ O
here _ _ O
? _ _ O
● _ _ O
A=A+B _ _ O
● _ _ O
This _ _ O
is _ _ O
fairly _ _ O
conventional _ _ O
sequential _ _ O
logic _ _ O
, _ _ O
actually _ _ O
. _ _ O
51 _ _ O

4-bit _ _ O
Counter _ _ O
● _ _ O
Another _ _ O
simple _ _ O
component _ _ O
we _ _ O
can _ _ O
now _ _ O
build _ _ O
is _ _ O
a _ _ O
counter _ _ O
. _ _ O
● _ _ O
This _ _ O
is _ _ O
a _ _ O
register _ _ O
that _ _ O
increments _ _ O
every _ _ O
clock _ _ O
tick _ _ O
. _ _ O
o _ _ O
On _ _ O
the _ _ O
falling-edge _ _ O
, _ _ O
in _ _ O
this _ _ O
case _ _ O
. _ _ O
( _ _ O
assume _ _ O
clock _ _ O
is _ _ O
connected _ _ O
) _ _ O
0 _ _ O
A _ _ O
Co _ _ O
Adder _ _ O
S _ _ O
B _ _ O
0 _ _ O
A _ _ O
Ci _ _ O
Co _ _ O
Q _ _ O
D _ _ O
D _ _ O
D _ _ O
Flip-Flop _ _ O
3rd _ _ O
bit _ _ O
Adder _ _ O
S _ _ O
B _ _ O
0 _ _ O
A _ _ O
Ci _ _ O
Co _ _ O
Q _ _ O
D _ _ O
D _ _ O
Flip-Flop _ _ O
2nd _ _ O
bit _ _ O
Adder _ _ O
S _ _ O
B _ _ O
0 _ _ O
A _ _ O
Ci _ _ O
Co _ _ O
Q _ _ O
D _ _ O
D _ _ O
Flip-Flop _ _ O
1st _ _ O
bit _ _ O
Adder _ _ O
S _ _ O
B _ _ O
Ci _ _ O
1 _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
0th _ _ O
bit _ _ O
52 _ _ O

4-bit _ _ O
Counter _ _ O
: _ _ O
Thoughts _ _ O
● _ _ O
Hmm _ _ O
, _ _ O
adding _ _ O
takes _ _ O
some _ _ O
time _ _ O
because _ _ O
it _ _ O
ripples _ _ O
● _ _ O
Hmm _ _ O
, _ _ O
how _ _ O
long _ _ O
does _ _ O
our _ _ O
clock _ _ O
cycle _ _ O
have _ _ O
to _ _ O
be _ _ O
? _ _ O
o _ _ O
No _ _ O
shorter _ _ O
than _ _ O
the _ _ O
propagation _ _ O
delay _ _ O
. _ _ O
o _ _ O
If _ _ O
you _ _ O
assume _ _ O
latches _ _ O
take _ _ O
2ns _ _ O
and _ _ O
adders _ _ O
take _ _ O
4ns _ _ O
… _ _ O
0 _ _ O
A _ _ O
Co _ _ O
D _ _ O
Adder _ _ O
S _ _ O
B _ _ O
0 _ _ O
A _ _ O
Ci _ _ O
Co _ _ O
Q _ _ O
D _ _ O
D _ _ O
Flip-Flop _ _ O
Adder _ _ O
S _ _ O
B _ _ O
0 _ _ O
A _ _ O
Ci _ _ O
Co _ _ O
Q _ _ O
D _ _ O
D _ _ O
Flip-Flop _ _ O
Adder _ _ O
S _ _ O
B _ _ O
0 _ _ O
A _ _ O
Ci _ _ O
Co _ _ O
Q _ _ O
D _ _ O
D _ _ O
Flip-Flop _ _ O
Adder _ _ O
S _ _ O
B _ _ O
Ci _ _ O
1 _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
53 _ _ O

4-bit _ _ O
Counter _ _ O
: _ _ O
Clocking _ _ O
0ns _ _ O
2ns _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
A _ _ O
Co _ _ O
D _ _ O
D _ _ O
B _ _ O
Adder _ _ O
S _ _ O
0 _ _ O
Ci _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
0 _ _ O
D _ _ O
A _ _ O
Co _ _ O
D _ _ O
Latch _ _ O
Q _ _ O
Adder _ _ O
S _ _ O
Q _ _ O
B _ _ O
0 _ _ O
D _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
A _ _ O
Co _ _ O
Ci _ _ O
D _ _ O
Flip-Flop _ _ O
D _ _ O
0 _ _ O
Q _ _ O
D _ _ O
Latch _ _ O
D _ _ O
Q _ _ O
0 _ _ O
Q _ _ O
B _ _ O
S _ _ O
Ci _ _ O
Co _ _ O
Q _ _ O
Q _ _ O
D _ _ O
Adder _ _ O
1 _ _ O
D _ _ O
Flip-Flop _ _ O
A _ _ O
Adder _ _ O
S _ _ O
0 _ _ O
B _ _ O
Ci _ _ O
1 _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
54 _ _ O

4-bit _ _ O
Counter _ _ O
: _ _ O
Clocking _ _ O
1 _ _ O
12ns _ _ O
10ns _ _ O
14ns _ _ O
18ns _ _ O
16ns _ _ O
20ns _ _ O
2ns _ _ O
8ns _ _ O
6ns _ _ O
0 _ _ O
0 _ _ O
A _ _ O
0 _ _ O
Co _ _ O
D _ _ O
Adder _ _ O
S _ _ O
0 _ _ O
0 _ _ O
B _ _ O
Ci _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
0 _ _ O
0 _ _ O
A _ _ O
Co _ _ O
D _ _ O
Adder _ _ O
S _ _ O
0 _ _ O
0 _ _ O
B _ _ O
Ci _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
0 _ _ O
0 _ _ O
A _ _ O
Co _ _ O
D _ _ O
Adder _ _ O
S _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
B _ _ O
Ci _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
0 _ _ O
1 _ _ O
A _ _ O
Co _ _ O
D _ _ O
Adder _ _ O
S _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
B _ _ O
Ci _ _ O
1 _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
55 _ _ O

4-bit _ _ O
Counter _ _ O
: _ _ O
Circuit _ _ O
Delay _ _ O
Serialized _ _ O
0 _ _ O
A _ _ O
Co _ _ O
D _ _ O
Adder _ _ O
S _ _ O
4ns _ _ O
+ _ _ O
4ns _ _ O
+ _ _ O
4ns _ _ O
+ _ _ O
4ns _ _ O
B _ _ O
0 _ _ O
A _ _ O
Ci _ _ O
Co _ _ O
Q _ _ O
D _ _ O
D _ _ O
Flip-Flop _ _ O
Parallelized _ _ O
Adder _ _ O
S _ _ O
B _ _ O
0 _ _ O
A _ _ O
Ci _ _ O
Co _ _ O
Q _ _ O
D _ _ O
D _ _ O
Flip-Flop _ _ O
2ns _ _ O
+ _ _ O
2ns _ _ O
Adder _ _ O
S _ _ O
B _ _ O
0 _ _ O
A _ _ O
Ci _ _ O
Co _ _ O
Q _ _ O
D _ _ O
D _ _ O
Flip-Flop _ _ O
Adder _ _ O
S _ _ O
B _ _ O
Ci _ _ O
1 _ _ O
Q _ _ O
D _ _ O
Flip-Flop _ _ O
20ns _ _ O
56 _ _ O

4-bit _ _ O
Counter _ _ O
: _ _ O
Delay _ _ O
Explanation _ _ O
● _ _ O
Values _ _ O
of _ _ O
output _ _ O
bits _ _ O
must _ _ O
all _ _ O
be _ _ O
stable _ _ O
. _ _ O
o _ _ O
That _ _ O
is _ _ O
, _ _ O
ca _ _ O
n’t _ _ O
pulse _ _ O
clock _ _ O
until _ _ O
all _ _ O
4 _ _ O
bits _ _ O
are _ _ O
computed _ _ O
● _ _ O
However _ _ O
, _ _ O
the _ _ O
adder _ _ O
is _ _ O
a _ _ O
ripple-carry _ _ O
: _ _ O
Each _ _ O
bit _ _ O
waits _ _ O
for _ _ O
previous _ _ O
. _ _ O
o _ _ O
4ns _ _ O
per _ _ O
adder _ _ O
o _ _ O
4-bit _ _ O
adder _ _ O
o _ _ O
Thus _ _ O
: _ _ O
4 _ _ O
* _ _ O
4ns _ _ O
= _ _ O
16ns _ _ O
for _ _ O
the _ _ O
4-bit _ _ O
adder _ _ O
● _ _ O
Flip-Flops _ _ O
o _ _ O
Must _ _ O
wait _ _ O
for _ _ O
1st _ _ O
latch _ _ O
to _ _ O
stabilize _ _ O
Q _ _ O
( _ _ O
2ns _ _ O
in _ _ O
parallel _ _ O
) _ _ O
o _ _ O
Must _ _ O
wait _ _ O
for _ _ O
2nd _ _ O
latch _ _ O
to _ _ O
stabilize _ _ O
Q _ _ O
( _ _ O
2ns _ _ O
also _ _ O
in _ _ O
parallel _ _ O
) _ _ O
o _ _ O
Thus _ _ O
: _ _ O
2ns _ _ O
+ _ _ O
2ns _ _ O
= _ _ O
4ns _ _ O
● _ _ O
Overall _ _ O
delay _ _ O
: _ _ O
16ns _ _ O
+ _ _ O
4ns _ _ O
= _ _ O
20ns _ _ O
. _ _ O
Clock _ _ O
pulse _ _ O
is _ _ O
20ns _ _ O
. _ _ O
57 _ _ O

Determine _ _ O
Maximum _ _ O
Clock _ _ O
Speed _ _ O
● _ _ O
If _ _ O
this _ _ O
operation _ _ O
takes _ _ O
20ns _ _ O
, _ _ O
this _ _ O
bounds _ _ O
our _ _ O
clock _ _ O
speed _ _ O
. _ _ O
● _ _ O
Our _ _ O
clock _ _ O
period _ _ O
must _ _ O
be _ _ O
20ns _ _ O
. _ _ O
o _ _ O
Which _ _ O
means _ _ O
our _ _ O
frequency _ _ O
is _ _ O
once _ _ O
every _ _ O
20ns _ _ O
: _ _ O
1s _ _ O
÷ _ _ O
20ns _ _ O
o _ _ O
What _ _ O
is _ _ O
that _ _ O
frequency _ _ O
in _ _ O
Hz _ _ O
? _ _ O
( _ _ O
Hertz _ _ O
is _ _ O
“ _ _ O
cycles _ _ O
per _ _ O
second _ _ O
” _ _ O
) _ _ O
o _ _ O
This _ _ O
would _ _ O
be _ _ O
the _ _ O
maximum _ _ O
clock _ _ O
speed _ _ O
for _ _ O
our _ _ O
circuit _ _ O
to _ _ O
work _ _ O
. _ _ O
1𝑠 _ _ O
= _ _ O
50 _ _ O
, _ _ O
000 _ _ O
, _ _ O
000 _ _ O
𝐻𝑧 _ _ O
= _ _ O
50 _ _ O
𝑀𝐻𝑧 _ _ O
20𝑛𝑠 _ _ O
58 _ _ O



