self_training_2|cs1502|lec28_time_complexity_03
-DOCSTART- -X- -X- O

Time _ _ O
Complexity _ _ O
03 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Hamiltonian _ _ O
Path _ _ O
A _ _ O
Hamiltonian _ _ O
path _ _ O
in _ _ O
a _ _ O
directed _ _ O
graph _ _ O
G _ _ O
is _ _ O
a _ _ O
directed _ _ O
path _ _ O
that _ _ O
goes _ _ O
through _ _ O
each _ _ O
node _ _ O
exactly _ _ O
once _ _ O
Formally _ _ O
, _ _ O
HAMPATH _ _ O
= _ _ O
{ _ _ O
hG _ _ O
, _ _ O
s _ _ O
, _ _ O
ti _ _ O
| _ _ O
G _ _ O
is _ _ O
a _ _ O
directed _ _ O
graph _ _ O
with _ _ O
a _ _ O
Hamiltonian _ _ O
path _ _ O
from _ _ O
s _ _ O
to _ _ O
t _ _ O
} _ _ O
s _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
t _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Verifier _ _ O
Suppose _ _ O
a _ _ O
path _ _ O
is _ _ O
represented _ _ O
by _ _ O
a _ _ O
sequence _ _ O
of _ _ O
pairs _ _ O
of _ _ O
nodes _ _ O
For _ _ O
example _ _ O
: _ _ O
( _ _ O
( _ _ O
s _ _ O
, _ _ O
a _ _ O
) _ _ O
, _ _ O
( _ _ O
a _ _ O
, _ _ O
c _ _ O
) _ _ O
, _ _ O
( _ _ O
c _ _ O
, _ _ O
d _ _ O
) _ _ O
, _ _ O
( _ _ O
d _ _ O
, _ _ O
r _ _ O
) _ _ O
, _ _ O
( _ _ O
r _ _ O
, _ _ O
t _ _ O
) _ _ O
) _ _ O
Given _ _ O
a _ _ O
path _ _ O
c _ _ O
, _ _ O
we _ _ O
can _ _ O
verify _ _ O
whether _ _ O
it _ _ O
is _ _ O
a _ _ O
Hamiltonian _ _ O
path _ _ O
of _ _ O
graph _ _ O
G _ _ O
from _ _ O
s _ _ O
to _ _ O
t _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
Given _ _ O
an _ _ O
input _ _ O
hhG _ _ O
, _ _ O
s _ _ O
, _ _ O
ti _ _ O
, _ _ O
ci _ _ O
, _ _ O
where _ _ O
G _ _ O
is _ _ O
a _ _ O
directed _ _ O
graph _ _ O
, _ _ O
s _ _ O
and _ _ O
t _ _ O
are _ _ O
nodes _ _ O
, _ _ O
and _ _ O
c _ _ O
is _ _ O
a _ _ O
path _ _ O
, _ _ O
a _ _ O
TM _ _ O
can _ _ O
verify _ _ O
whether _ _ O
c _ _ O
is _ _ O
a _ _ O
Hamiltonian _ _ O
path _ _ O
of _ _ O
graph _ _ O
G _ _ O
from _ _ O
s _ _ O
to _ _ O
t _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
Similarly _ _ O
, _ _ O
given _ _ O
a _ _ O
natural _ _ O
number _ _ O
c _ _ O
, _ _ O
we _ _ O
can _ _ O
verify _ _ O
whether _ _ O
c _ _ O
is _ _ O
a _ _ O
factor _ _ O
of _ _ O
a _ _ O
composite _ _ O
number _ _ O
x _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
Given _ _ O
an _ _ O
input _ _ O
hx _ _ O
, _ _ O
ci _ _ O
where _ _ O
x _ _ O
and _ _ O
c _ _ O
are _ _ O
natural _ _ O
numbers _ _ O
, _ _ O
a _ _ O
TM _ _ O
can _ _ O
verify _ _ O
whether _ _ O
c _ _ O
is _ _ O
a _ _ O
factor _ _ O
of _ _ O
x _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
This _ _ O
feature _ _ O
is _ _ O
called _ _ O
polynomial _ _ O
verifiability _ _ O
Recall _ _ O
that _ _ O
both _ _ O
problems _ _ O
need _ _ O
exponential _ _ O
time _ _ O
to _ _ O
solve _ _ O
Verifying _ _ O
is _ _ O
easier _ _ O
than _ _ O
finding _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Verifier _ _ O
Recall _ _ O
the _ _ O
language _ _ O
COMPOSITES _ _ O
: _ _ O
COMPOSITES _ _ O
= _ _ O
{ _ _ O
hxi _ _ O
| _ _ O
x _ _ O
= _ _ O
pq _ _ O
for _ _ O
natural _ _ O
numbers _ _ O
p _ _ O
, _ _ O
q _ _ O
> _ _ O
1 _ _ O
} _ _ O
We _ _ O
can _ _ O
define _ _ O
the _ _ O
identical _ _ O
set _ _ O
using _ _ O
a _ _ O
different _ _ O
predicate _ _ O
COMPOSITES _ _ O
= _ _ O
{ _ _ O
hxi _ _ O
| _ _ O
x _ _ O
is _ _ O
divisible _ _ O
by _ _ O
c _ _ O
a _ _ O
natural _ _ O
number _ _ O
c _ _ O
> _ _ O
1 _ _ O
} _ _ O
Check _ _ O
whether _ _ O
x _ _ O
is _ _ O
divisible _ _ O
by _ _ O
c _ _ O
can _ _ O
be _ _ O
easily _ _ O
done _ _ O
by _ _ O
this _ _ O
TM _ _ O
V _ _ O
: _ _ O
V _ _ O
= _ _ O
“ _ _ O
On _ _ O
input _ _ O
hx _ _ O
, _ _ O
ci _ _ O
where _ _ O
x _ _ O
and _ _ O
c _ _ O
are _ _ O
natural _ _ O
numbers _ _ O
greater _ _ O
than _ _ O
1 _ _ O
: _ _ O
1 _ _ O
2 _ _ O
Calculate _ _ O
y _ _ O
= _ _ O
x _ _ O
mod _ _ O
c _ _ O
If _ _ O
y _ _ O
= _ _ O
0 _ _ O
, _ _ O
accept _ _ O
. _ _ O
If _ _ O
y _ _ O
6= _ _ O
0 _ _ O
, _ _ O
reject _ _ O
. _ _ O
” _ _ O
With _ _ O
the _ _ O
TM _ _ O
V _ _ O
above _ _ O
, _ _ O
now _ _ O
we _ _ O
have _ _ O
COMPOSITES _ _ O
= _ _ O
{ _ _ O
hxi _ _ O
| _ _ O
V _ _ O
accepts _ _ O
hx _ _ O
, _ _ O
ci _ _ O
for _ _ O
some _ _ O
c _ _ O
} _ _ O
This _ _ O
TM _ _ O
V _ _ O
is _ _ O
called _ _ O
a _ _ O
verifier _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Verifier _ _ O
A _ _ O
verifier _ _ O
for _ _ O
a _ _ O
language _ _ O
A _ _ O
is _ _ O
an _ _ O
algorithm _ _ O
V _ _ O
, _ _ O
where _ _ O
A _ _ O
= _ _ O
{ _ _ O
w _ _ O
| _ _ O
V _ _ O
accepts _ _ O
hw _ _ O
, _ _ O
ci _ _ O
for _ _ O
some _ _ O
string _ _ O
c _ _ O
} _ _ O
In _ _ O
our _ _ O
discussion _ _ O
, _ _ O
an _ _ O
algorithm _ _ O
V _ _ O
is _ _ O
a _ _ O
TM _ _ O
If _ _ O
TM _ _ O
V _ _ O
runs _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
, _ _ O
it _ _ O
is _ _ O
called _ _ O
a _ _ O
polynomial _ _ O
time _ _ O
verifier _ _ O
A _ _ O
language _ _ O
A _ _ O
is _ _ O
polynomially _ _ O
verifiable _ _ O
if _ _ O
it _ _ O
has _ _ O
a _ _ O
polynomial _ _ O
time _ _ O
verifier _ _ O
c _ _ O
is _ _ O
called _ _ O
a _ _ O
certificate _ _ O
or _ _ O
proof _ _ O
of _ _ O
membership _ _ O
in _ _ O
A _ _ O
Examples _ _ O
: _ _ O
A _ _ O
certificate _ _ O
of _ _ O
HAMPATH _ _ O
problem _ _ O
for _ _ O
hG _ _ O
, _ _ O
s _ _ O
, _ _ O
ti _ _ O
is _ _ O
simply _ _ O
a _ _ O
Hamiltonian _ _ O
path _ _ O
from _ _ O
s _ _ O
to _ _ O
t _ _ O
A _ _ O
certificate _ _ O
of _ _ O
COMPOSITES _ _ O
problem _ _ O
for _ _ O
a _ _ O
number _ _ O
x _ _ O
is _ _ O
one _ _ O
of _ _ O
its _ _ O
divisors _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Class _ _ O
NP _ _ O
Definition _ _ O
7.19 _ _ O
NP _ _ O
is _ _ O
the _ _ O
class _ _ O
of _ _ O
languages _ _ O
that _ _ O
have _ _ O
polynomial _ _ O
time _ _ O
verifiers _ _ O
. _ _ O
NP _ _ O
comes _ _ O
from _ _ O
Nondeterministic _ _ O
Polynomial _ _ O
time _ _ O
NP _ _ O
-Problems _ _ O
are _ _ O
set _ _ O
of _ _ O
problems _ _ O
in _ _ O
NP _ _ O
Every _ _ O
problems _ _ O
in _ _ O
P _ _ O
also _ _ O
have _ _ O
polynomial _ _ O
time _ _ O
verifier _ _ O
Therefore _ _ O
, _ _ O
P _ _ O
⊆ _ _ O
NP _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Nondeterministic _ _ O
Recall _ _ O
that _ _ O
NP _ _ O
stands _ _ O
for _ _ O
Nondeterministic _ _ O
Polynomial _ _ O
The _ _ O
word _ _ O
nondeterministic _ _ O
has _ _ O
been _ _ O
discussed _ _ O
int _ _ O
Nondeterministic _ _ O
Finite _ _ O
Automaton _ _ O
( _ _ O
NFA _ _ O
) _ _ O
Nondeterministic _ _ O
Turing _ _ O
Machine _ _ O
( _ _ O
NTM _ _ O
) _ _ O
We _ _ O
have _ _ O
not _ _ O
yet _ _ O
seen _ _ O
a _ _ O
nondeterministic _ _ O
Turing _ _ O
machine _ _ O
yet _ _ O
Example _ _ O
: _ _ O
t _ _ O
→ _ _ O
0 _ _ O
, _ _ O
R _ _ O
q0 _ _ O
t _ _ O
→ _ _ O
0 _ _ O
, _ _ O
R _ _ O
q1 _ _ O
t _ _ O
→ _ _ O
1 _ _ O
, _ _ O
R _ _ O
t _ _ O
→ _ _ O
0 _ _ O
, _ _ O
R _ _ O
q2 _ _ O
t _ _ O
→ _ _ O
1 _ _ O
, _ _ O
R _ _ O
q3 _ _ O
t _ _ O
→ _ _ O
1 _ _ O
, _ _ O
R _ _ O
When _ _ O
it _ _ O
read _ _ O
the _ _ O
blank _ _ O
symbol _ _ O
, _ _ O
it _ _ O
splits _ _ O
to _ _ O
two _ _ O
copies _ _ O
, _ _ O
same _ _ O
current _ _ O
state _ _ O
, _ _ O
but _ _ O
different _ _ O
tape _ _ O
contents _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Nondeterministic _ _ O
t _ _ O
→ _ _ O
0 _ _ O
, _ _ O
R _ _ O
q0 _ _ O
t _ _ O
→ _ _ O
0 _ _ O
, _ _ O
R _ _ O
q1 _ _ O
t _ _ O
→ _ _ O
1 _ _ O
, _ _ O
R _ _ O
t _ _ O
→ _ _ O
0 _ _ O
, _ _ O
R _ _ O
q2 _ _ O
t _ _ O
→ _ _ O
1 _ _ O
, _ _ O
R _ _ O
q3 _ _ O
t _ _ O
→ _ _ O
1 _ _ O
, _ _ O
R _ _ O
What _ _ O
would _ _ O
happen _ _ O
if _ _ O
we _ _ O
run _ _ O
the _ _ O
above _ _ O
machine _ _ O
on _ _ O
input _ _ O
ε _ _ O
for _ _ O
three _ _ O
steps _ _ O
? _ _ O
Consists _ _ O
of _ _ O
8 _ _ O
copies _ _ O
They _ _ O
are _ _ O
all _ _ O
in _ _ O
state _ _ O
q3 _ _ O
Tape _ _ O
contents _ _ O
are _ _ O
unique _ _ O
: _ _ O
000 _ _ O
, _ _ O
001 _ _ O
, _ _ O
010 _ _ O
, _ _ O
011 _ _ O
, _ _ O
100 _ _ O
, _ _ O
101 _ _ O
, _ _ O
110 _ _ O
, _ _ O
and _ _ O
111 _ _ O
This _ _ O
is _ _ O
how _ _ O
we _ _ O
generate _ _ O
all _ _ O
possible _ _ O
strings _ _ O
over _ _ O
Σ _ _ O
= _ _ O
{ _ _ O
0 _ _ O
, _ _ O
1 _ _ O
} _ _ O
of _ _ O
length _ _ O
exactly _ _ O
3 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Nondeterministic _ _ O
t _ _ O
→ _ _ O
0 _ _ O
, _ _ O
R _ _ O
q0 _ _ O
t _ _ O
→ _ _ O
0 _ _ O
, _ _ O
R _ _ O
q1 _ _ O
t _ _ O
→ _ _ O
1 _ _ O
, _ _ O
R _ _ O
t _ _ O
→ _ _ O
0 _ _ O
, _ _ O
R _ _ O
q2 _ _ O
t _ _ O
→ _ _ O
1 _ _ O
, _ _ O
R _ _ O
q3 _ _ O
t _ _ O
→ _ _ O
1 _ _ O
, _ _ O
R _ _ O
But _ _ O
how _ _ O
to _ _ O
express _ _ O
the _ _ O
above _ _ O
TM _ _ O
in _ _ O
a _ _ O
high-level _ _ O
description _ _ O
? _ _ O
M _ _ O
= _ _ O
“ _ _ O
On _ _ O
input _ _ O
w _ _ O
: _ _ O
1 _ _ O
2 _ _ O
Write _ _ O
a _ _ O
string _ _ O
of _ _ O
length _ _ O
3 _ _ O
where _ _ O
each _ _ O
symbol _ _ O
on _ _ O
the _ _ O
string _ _ O
is _ _ O
nondeterministically _ _ O
selected _ _ O
to _ _ O
be _ _ O
either _ _ O
0 _ _ O
or _ _ O
1 _ _ O
... _ _ O
This _ _ O
type _ _ O
of _ _ O
NTM _ _ O
is _ _ O
suitable _ _ O
for _ _ O
describing _ _ O
brute-force _ _ O
algorithm _ _ O
A _ _ O
brute-force _ _ O
algorithm _ _ O
generally _ _ O
generates _ _ O
all _ _ O
possible _ _ O
of _ _ O
something _ _ O
Then _ _ O
search _ _ O
for _ _ O
an _ _ O
element _ _ O
in _ _ O
the _ _ O
set _ _ O
of _ _ O
possibilities _ _ O
If _ _ O
it _ _ O
finds _ _ O
an _ _ O
element _ _ O
that _ _ O
satisfies _ _ O
the _ _ O
criteria _ _ O
, _ _ O
done _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Nondeterministic _ _ O
TM _ _ O
for _ _ O
HAMPATH _ _ O
A _ _ O
nondeterministic _ _ O
TM _ _ O
N1 _ _ O
that _ _ O
decides _ _ O
HAMPATH _ _ O
: _ _ O
N1 _ _ O
= _ _ O
“ _ _ O
On _ _ O
input _ _ O
hG _ _ O
, _ _ O
s _ _ O
, _ _ O
ti _ _ O
, _ _ O
where _ _ O
G _ _ O
is _ _ O
a _ _ O
directed _ _ O
graph _ _ O
with _ _ O
nodes _ _ O
s _ _ O
and _ _ O
t _ _ O
: _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
Write _ _ O
a _ _ O
list _ _ O
of _ _ O
m _ _ O
numbers _ _ O
p1 _ _ O
, _ _ O
. _ _ O
. _ _ O
. _ _ O
pm _ _ O
, _ _ O
where _ _ O
m _ _ O
is _ _ O
the _ _ O
number _ _ O
of _ _ O
nodes _ _ O
in _ _ O
G. _ _ O
Each _ _ O
number _ _ O
in _ _ O
the _ _ O
list _ _ O
is _ _ O
nondeterministically _ _ O
selected _ _ O
to _ _ O
be _ _ O
between _ _ O
1 _ _ O
and _ _ O
m. _ _ O
Check _ _ O
for _ _ O
repetitions _ _ O
in _ _ O
the _ _ O
list _ _ O
. _ _ O
If _ _ O
any _ _ O
are _ _ O
found _ _ O
reject _ _ O
. _ _ O
Check _ _ O
whether _ _ O
s _ _ O
= _ _ O
p1 _ _ O
and _ _ O
t _ _ O
= _ _ O
pm _ _ O
. _ _ O
If _ _ O
either _ _ O
fail _ _ O
, _ _ O
reject _ _ O
. _ _ O
For _ _ O
each _ _ O
i _ _ O
between _ _ O
1 _ _ O
and _ _ O
m _ _ O
− _ _ O
1 _ _ O
, _ _ O
check _ _ O
whether _ _ O
( _ _ O
pi _ _ O
, _ _ O
pi+1 _ _ O
) _ _ O
is _ _ O
an _ _ O
edge _ _ O
of _ _ O
G. _ _ O
If _ _ O
any _ _ O
are _ _ O
not _ _ O
, _ _ O
reject _ _ O
. _ _ O
Otherwise _ _ O
, _ _ O
all _ _ O
tests _ _ O
have _ _ O
been _ _ O
passed _ _ O
. _ _ O
so _ _ O
accept _ _ O
. _ _ O
The _ _ O
nondeterministic _ _ O
part _ _ O
of _ _ O
N1 _ _ O
is _ _ O
in _ _ O
step _ _ O
1 _ _ O
It _ _ O
generates _ _ O
all _ _ O
permutations _ _ O
of _ _ O
m _ _ O
nodes _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Nondeterministic _ _ O
TM _ _ O
for _ _ O
HAMPATH _ _ O
What _ _ O
is _ _ O
the _ _ O
run-time _ _ O
of _ _ O
NTM _ _ O
N1 _ _ O
? _ _ O
Step _ _ O
1 _ _ O
takes _ _ O
only _ _ O
m _ _ O
steps _ _ O
to _ _ O
write _ _ O
m _ _ O
numbers _ _ O
Check _ _ O
for _ _ O
repetition _ _ O
take _ _ O
O _ _ O
( _ _ O
m2 _ _ O
) _ _ O
Get _ _ O
the _ _ O
first _ _ O
number _ _ O
and _ _ O
compare _ _ O
with _ _ O
the _ _ O
rest _ _ O
is _ _ O
O _ _ O
( _ _ O
m _ _ O
) _ _ O
Get _ _ O
the _ _ O
second _ _ O
number _ _ O
and _ _ O
compare _ _ O
with _ _ O
the _ _ O
rest _ _ O
is _ _ O
O _ _ O
( _ _ O
m _ _ O
) _ _ O
and _ _ O
so _ _ O
on _ _ O
( _ _ O
m _ _ O
times _ _ O
) _ _ O
Check _ _ O
whether _ _ O
the _ _ O
first _ _ O
number _ _ O
is _ _ O
s _ _ O
and _ _ O
the _ _ O
last _ _ O
number _ _ O
is _ _ O
t _ _ O
is _ _ O
O _ _ O
( _ _ O
m _ _ O
) _ _ O
Step _ _ O
4 _ _ O
takes _ _ O
O _ _ O
( _ _ O
m2 _ _ O
) _ _ O
Get _ _ O
the _ _ O
first _ _ O
pair _ _ O
and _ _ O
scan _ _ O
for _ _ O
the _ _ O
edge _ _ O
is _ _ O
O _ _ O
( _ _ O
m _ _ O
) _ _ O
Get _ _ O
the _ _ O
second _ _ O
pair _ _ O
and _ _ O
scan _ _ O
for _ _ O
the _ _ O
edge _ _ O
is _ _ O
O _ _ O
( _ _ O
m _ _ O
) _ _ O
and _ _ O
so _ _ O
on _ _ O
( _ _ O
m _ _ O
− _ _ O
1 _ _ O
times _ _ O
) _ _ O
Note _ _ O
that _ _ O
all _ _ O
copies _ _ O
run _ _ O
steps _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
and _ _ O
4 _ _ O
simultaneously _ _ O
The _ _ O
above _ _ O
TM _ _ O
runs _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
From _ _ O
Theorem _ _ O
7.11 _ _ O
, _ _ O
this _ _ O
algorithm _ _ O
will _ _ O
run _ _ O
in _ _ O
exponential _ _ O
time _ _ O
on _ _ O
a _ _ O
single-tape _ _ O
Turing _ _ O
machine _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Language _ _ O
in _ _ O
NP _ _ O
Is _ _ O
there _ _ O
a _ _ O
relation _ _ O
between _ _ O
problem _ _ O
in _ _ O
NP _ _ O
and _ _ O
NTM _ _ O
? _ _ O
Yes _ _ O
: _ _ O
Theorem _ _ O
7.20 _ _ O
: _ _ O
A _ _ O
language _ _ O
is _ _ O
in _ _ O
NP _ _ O
iff _ _ O
it _ _ O
is _ _ O
decided _ _ O
by _ _ O
some _ _ O
nondeterministic _ _ O
polynomial _ _ O
time _ _ O
Turing _ _ O
machine _ _ O
. _ _ O
But _ _ O
the _ _ O
NP _ _ O
is _ _ O
the _ _ O
class _ _ O
of _ _ O
languages _ _ O
that _ _ O
have _ _ O
polynomial _ _ O
time _ _ O
verifiers _ _ O
Proof _ _ O
Idea _ _ O
: _ _ O
Show _ _ O
how _ _ O
to _ _ O
convert _ _ O
a _ _ O
polynomial _ _ O
time _ _ O
verifier _ _ O
to _ _ O
an _ _ O
equivalent _ _ O
polynomial _ _ O
time _ _ O
nondeterministic _ _ O
Turing _ _ O
machine _ _ O
( _ _ O
decider _ _ O
) _ _ O
Show _ _ O
how _ _ O
to _ _ O
convert _ _ O
polynomial _ _ O
time _ _ O
nondeterministic _ _ O
Turing _ _ O
machine _ _ O
( _ _ O
decider _ _ O
) _ _ O
to _ _ O
an _ _ O
equivalent _ _ O
polynomial _ _ O
time _ _ O
verifier _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Verifier _ _ O
to _ _ O
NTM _ _ O
Assume _ _ O
that _ _ O
A _ _ O
∈ _ _ O
NP _ _ O
By _ _ O
definition _ _ O
, _ _ O
there _ _ O
exists _ _ O
a _ _ O
TM _ _ O
V _ _ O
( _ _ O
a _ _ O
polynomial _ _ O
time _ _ O
verifier _ _ O
) _ _ O
for _ _ O
the _ _ O
language _ _ O
A _ _ O
that _ _ O
can _ _ O
verify _ _ O
an _ _ O
input _ _ O
of _ _ O
length _ _ O
n _ _ O
in _ _ O
nk _ _ O
steps _ _ O
for _ _ O
some _ _ O
k _ _ O
Recall _ _ O
that _ _ O
a _ _ O
verifier _ _ O
for _ _ O
a _ _ O
language _ _ O
A _ _ O
is _ _ O
an _ _ O
algorithm _ _ O
V _ _ O
, _ _ O
where _ _ O
A _ _ O
= _ _ O
{ _ _ O
w _ _ O
| _ _ O
V _ _ O
accepts _ _ O
hw _ _ O
, _ _ O
ci _ _ O
for _ _ O
some _ _ O
string _ _ O
c _ _ O
} _ _ O
Construct _ _ O
a _ _ O
NTM _ _ O
N _ _ O
as _ _ O
follows _ _ O
: _ _ O
N _ _ O
= _ _ O
“ _ _ O
On _ _ O
input _ _ O
w _ _ O
of _ _ O
length _ _ O
n _ _ O
: _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
Nondeterministically _ _ O
select _ _ O
string _ _ O
c _ _ O
of _ _ O
length _ _ O
at _ _ O
most _ _ O
nk _ _ O
. _ _ O
Run _ _ O
V _ _ O
on _ _ O
input _ _ O
hw _ _ O
, _ _ O
ci _ _ O
. _ _ O
If _ _ O
V _ _ O
accepts _ _ O
, _ _ O
accept _ _ O
; _ _ O
otherwise _ _ O
, _ _ O
reject _ _ O
. _ _ O
” _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

NTM _ _ O
to _ _ O
Verifier _ _ O
Assume _ _ O
that _ _ O
A _ _ O
can _ _ O
be _ _ O
decided _ _ O
by _ _ O
NTM _ _ O
N _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
Construct _ _ O
a _ _ O
polynomial _ _ O
time _ _ O
verifier _ _ O
V _ _ O
as _ _ O
follows _ _ O
: _ _ O
V _ _ O
= _ _ O
“ _ _ O
On _ _ O
input _ _ O
hw _ _ O
, _ _ O
ci _ _ O
, _ _ O
where _ _ O
w _ _ O
and _ _ O
c _ _ O
are _ _ O
strings _ _ O
: _ _ O
1 _ _ O
2 _ _ O
Simulate _ _ O
N _ _ O
on _ _ O
input _ _ O
w _ _ O
, _ _ O
treating _ _ O
each _ _ O
symbol _ _ O
of _ _ O
c _ _ O
as _ _ O
a _ _ O
description _ _ O
of _ _ O
the _ _ O
nondeterministic _ _ O
choice _ _ O
to _ _ O
make _ _ O
at _ _ O
each _ _ O
step _ _ O
If _ _ O
this _ _ O
branch _ _ O
of _ _ O
N _ _ O
’s _ _ O
computation _ _ O
accepts _ _ O
, _ _ O
accept _ _ O
; _ _ O
otherwise _ _ O
, _ _ O
reject _ _ O
. _ _ O
” _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

Language _ _ O
in _ _ O
NP _ _ O
Definition _ _ O
7.21 _ _ O
NTIME _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
= _ _ O
{ _ _ O
L _ _ O
| _ _ O
L _ _ O
is _ _ O
a _ _ O
language _ _ O
decided _ _ O
by _ _ O
an _ _ O
O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
time _ _ O
nondeterministic _ _ O
Turing _ _ O
machine _ _ O
} _ _ O
. _ _ O
Corollary _ _ O
7.22 _ _ O
NP _ _ O
= _ _ O
[ _ _ O
NTIME _ _ O
( _ _ O
nk _ _ O
) _ _ O
k _ _ O
To _ _ O
show _ _ O
that _ _ O
a _ _ O
language _ _ O
A _ _ O
is _ _ O
in _ _ O
NP _ _ O
: _ _ O
Construct _ _ O
a _ _ O
nondeterministic _ _ O
TM _ _ O
M _ _ O
that _ _ O
decides _ _ O
A _ _ O
Verify _ _ O
that _ _ O
M _ _ O
runs _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

CLIQUE _ _ O
A _ _ O
clique _ _ O
in _ _ O
an _ _ O
undirected _ _ O
graph _ _ O
is _ _ O
a _ _ O
subgraph _ _ O
where _ _ O
every _ _ O
two _ _ O
nodes _ _ O
in _ _ O
the _ _ O
subgraph _ _ O
are _ _ O
connected _ _ O
by _ _ O
an _ _ O
edge _ _ O
A _ _ O
k-clique _ _ O
is _ _ O
a _ _ O
clique _ _ O
that _ _ O
contains _ _ O
k _ _ O
nodes _ _ O
A _ _ O
graph _ _ O
with _ _ O
5-clique _ _ O
is _ _ O
shown _ _ O
below _ _ O
: _ _ O
Formally _ _ O
, _ _ O
CLIQUE _ _ O
= _ _ O
{ _ _ O
hG _ _ O
, _ _ O
ki _ _ O
| _ _ O
G _ _ O
is _ _ O
an _ _ O
undirected _ _ O
graph _ _ O
with _ _ O
a _ _ O
k-clique _ _ O
} _ _ O
Is _ _ O
CLIQUE _ _ O
in _ _ O
NP _ _ O
? _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

CLIQUE _ _ O
∈ _ _ O
NP _ _ O
To _ _ O
show _ _ O
that _ _ O
CLIQUE _ _ O
∈ _ _ O
NP _ _ O
, _ _ O
we _ _ O
can _ _ O
perform _ _ O
one _ _ O
of _ _ O
the _ _ O
following _ _ O
: _ _ O
Show _ _ O
a _ _ O
polynomial _ _ O
time _ _ O
verifier _ _ O
V _ _ O
for _ _ O
CLIQUE _ _ O
or _ _ O
Show _ _ O
an _ _ O
NTM _ _ O
N _ _ O
that _ _ O
decides _ _ O
CLIQUE _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
The _ _ O
following _ _ O
TM _ _ O
V _ _ O
verifies _ _ O
CLIQUE _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
: _ _ O
V _ _ O
= _ _ O
“ _ _ O
On _ _ O
input _ _ O
hhG _ _ O
, _ _ O
ki _ _ O
, _ _ O
ci _ _ O
: _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
Test _ _ O
whether _ _ O
c _ _ O
is _ _ O
a _ _ O
subgraph _ _ O
with _ _ O
k _ _ O
nodes _ _ O
in _ _ O
G. _ _ O
Test _ _ O
whether _ _ O
G _ _ O
contains _ _ O
all _ _ O
edges _ _ O
connecting _ _ O
nodes _ _ O
in _ _ O
c. _ _ O
If _ _ O
both _ _ O
pass _ _ O
, _ _ O
accept _ _ O
; _ _ O
otherwise _ _ O
, _ _ O
reject _ _ O
. _ _ O
” _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

CLIQUE _ _ O
∈ _ _ O
NP _ _ O
Analysis _ _ O
of _ _ O
TM _ _ O
V _ _ O
: _ _ O
Each _ _ O
step _ _ O
will _ _ O
be _ _ O
executed _ _ O
only _ _ O
once _ _ O
Step _ _ O
1 _ _ O
: _ _ O
Need _ _ O
to _ _ O
go _ _ O
back _ _ O
and _ _ O
forth _ _ O
k _ _ O
times _ _ O
Each _ _ O
time _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
step _ _ O
Thus _ _ O
step _ _ O
1 _ _ O
is _ _ O
k _ _ O
× _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
Step _ _ O
2 _ _ O
: _ _ O
for _ _ O
each _ _ O
node _ _ O
a _ _ O
∈ _ _ O
c _ _ O
, _ _ O
it _ _ O
needs _ _ O
to _ _ O
find _ _ O
either _ _ O
( _ _ O
a _ _ O
, _ _ O
b _ _ O
) _ _ O
or _ _ O
( _ _ O
b _ _ O
, _ _ O
a _ _ O
) _ _ O
for _ _ O
every _ _ O
b _ _ O
∈ _ _ O
c _ _ O
and _ _ O
b _ _ O
6= _ _ O
a _ _ O
For _ _ O
each _ _ O
node _ _ O
, _ _ O
it _ _ O
needs _ _ O
to _ _ O
scan _ _ O
back _ _ O
and _ _ O
forth _ _ O
k _ _ O
− _ _ O
1 _ _ O
times _ _ O
and _ _ O
each _ _ O
time _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
There _ _ O
are _ _ O
k _ _ O
nodes _ _ O
in _ _ O
c. _ _ O
Thus _ _ O
, _ _ O
step _ _ O
2 _ _ O
is _ _ O
k _ _ O
× _ _ O
( _ _ O
k _ _ O
− _ _ O
1 _ _ O
) _ _ O
× _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
Thus _ _ O
, _ _ O
V _ _ O
runs _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

CLIQUE _ _ O
∈ _ _ O
NP _ _ O
The _ _ O
following _ _ O
NTM _ _ O
N _ _ O
can _ _ O
decide _ _ O
CLIQUE _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
: _ _ O
N _ _ O
= _ _ O
“ _ _ O
On _ _ O
input _ _ O
hG _ _ O
, _ _ O
ki _ _ O
, _ _ O
where _ _ O
G _ _ O
is _ _ O
a _ _ O
graph _ _ O
: _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
Nondeterministically _ _ O
select _ _ O
a _ _ O
subset _ _ O
c _ _ O
of _ _ O
k _ _ O
nodes _ _ O
of _ _ O
G. _ _ O
Test _ _ O
whether _ _ O
G _ _ O
contains _ _ O
all _ _ O
edges _ _ O
connecting _ _ O
nodes _ _ O
in _ _ O
c. _ _ O
If _ _ O
yes _ _ O
, _ _ O
accept _ _ O
; _ _ O
otherwise _ _ O
, _ _ O
reject _ _ O
. _ _ O
” _ _ O
Analysis _ _ O
of _ _ O
NTM _ _ O
N _ _ O
: _ _ O
Each _ _ O
step _ _ O
will _ _ O
be _ _ O
execute _ _ O
only _ _ O
once _ _ O
Step _ _ O
1 _ _ O
: _ _ O
To _ _ O
generate _ _ O
a _ _ O
subset _ _ O
c _ _ O
of _ _ O
k _ _ O
nodes _ _ O
of _ _ O
G _ _ O
requires _ _ O
k _ _ O
steps _ _ O
Step _ _ O
2 _ _ O
: _ _ O
This _ _ O
step _ _ O
is _ _ O
the _ _ O
same _ _ O
as _ _ O
Step _ _ O
2 _ _ O
of _ _ O
V _ _ O
which _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
Step _ _ O
3 _ _ O
: _ _ O
Simply _ _ O
O _ _ O
( _ _ O
1 _ _ O
) _ _ O
or _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
depending _ _ O
on _ _ O
implementations _ _ O
Thus _ _ O
N _ _ O
can _ _ O
decides _ _ O
CLIQUE _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

SUBSET _ _ O
−SUM _ _ O
Consider _ _ O
a _ _ O
set _ _ O
of _ _ O
numbers _ _ O
S _ _ O
= _ _ O
{ _ _ O
x1 _ _ O
, _ _ O
x2 _ _ O
, _ _ O
. _ _ O
. _ _ O
. _ _ O
, _ _ O
xk _ _ O
} _ _ O
and _ _ O
a _ _ O
target _ _ O
number _ _ O
t _ _ O
Is _ _ O
Pthere _ _ O
exists _ _ O
a _ _ O
set _ _ O
Y _ _ O
= _ _ O
{ _ _ O
y1 _ _ O
, _ _ O
y2 _ _ O
, _ _ O
. _ _ O
. _ _ O
. _ _ O
, _ _ O
yi _ _ O
} _ _ O
⊆ _ _ O
S _ _ O
such _ _ O
that _ _ O
i _ _ O
yi _ _ O
= _ _ O
t _ _ O
? _ _ O
Formally _ _ O
: _ _ O
SUBSET _ _ O
−SUM _ _ O
= _ _ O
{ _ _ O
hS _ _ O
, _ _ O
ti _ _ O
| _ _ O
S _ _ O
= _ _ O
{ _ _ O
x1 _ _ O
, _ _ O
x2 _ _ O
, _ _ O
. _ _ O
. _ _ O
. _ _ O
, _ _ O
xk _ _ O
} _ _ O
, _ _ O
and _ _ O
for _ _ O
some _ _ O
{ _ _ O
y1 _ _ O
, _ _ O
y2 _ _ O
, _ _ O
. _ _ O
. _ _ O
. _ _ O
, _ _ O
yi _ _ O
} _ _ O
⊆ _ _ O
{ _ _ O
x1 _ _ O
, _ _ O
x2 _ _ O
, _ _ O
. _ _ O
. _ _ O
. _ _ O
, _ _ O
xk _ _ O
} _ _ O
, _ _ O
X _ _ O
we _ _ O
have _ _ O
yi _ _ O
= _ _ O
t _ _ O
} _ _ O
i _ _ O
For _ _ O
example _ _ O
h{4 _ _ O
, _ _ O
11 _ _ O
, _ _ O
16 _ _ O
, _ _ O
21 _ _ O
, _ _ O
27 _ _ O
} _ _ O
, _ _ O
25i _ _ O
∈ _ _ O
SUBSET _ _ O
−SUM _ _ O
because _ _ O
4 _ _ O
+ _ _ O
11 _ _ O
= _ _ O
25 _ _ O
Note _ _ O
that _ _ O
for _ _ O
SUBSET _ _ O
−SUM _ _ O
, _ _ O
S _ _ O
and _ _ O
Y _ _ O
are _ _ O
multisets _ _ O
which _ _ O
allow _ _ O
duplicate _ _ O
elements _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O

SUBSET _ _ O
−SUM _ _ O
∈ _ _ O
N _ _ O
P _ _ O
To _ _ O
show _ _ O
that _ _ O
SUBSET _ _ O
−SUM _ _ O
∈ _ _ O
NP _ _ O
, _ _ O
we _ _ O
can _ _ O
perform _ _ O
one _ _ O
of _ _ O
the _ _ O
following _ _ O
: _ _ O
1 _ _ O
2 _ _ O
Show _ _ O
a _ _ O
polynomial _ _ O
time _ _ O
verifier _ _ O
V _ _ O
for _ _ O
SUBSET _ _ O
−SUM _ _ O
Show _ _ O
an _ _ O
NTM _ _ O
N _ _ O
that _ _ O
decide _ _ O
SUBSET _ _ O
−SUM _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
The _ _ O
following _ _ O
TM _ _ O
V _ _ O
verifies _ _ O
SUBSET _ _ O
−SUM _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
: _ _ O
V _ _ O
= _ _ O
“ _ _ O
On _ _ O
input _ _ O
hhS _ _ O
, _ _ O
ti _ _ O
, _ _ O
ci _ _ O
: _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
Test _ _ O
whether _ _ O
c _ _ O
is _ _ O
a _ _ O
collection _ _ O
of _ _ O
numbers _ _ O
that _ _ O
sum _ _ O
to _ _ O
t. _ _ O
Test _ _ O
whether _ _ O
S _ _ O
contains _ _ O
all _ _ O
the _ _ O
numbers _ _ O
in _ _ O
c. _ _ O
If _ _ O
both _ _ O
pass _ _ O
, _ _ O
accept _ _ O
; _ _ O
otherwise _ _ O
, _ _ O
reject _ _ O
. _ _ O
” _ _ O
The _ _ O
following _ _ O
NTM _ _ O
N _ _ O
decides _ _ O
SUBSET _ _ O
−SUM _ _ O
in _ _ O
polynomial _ _ O
time _ _ O
: _ _ O
N _ _ O
= _ _ O
“ _ _ O
On _ _ O
input _ _ O
hS _ _ O
, _ _ O
ti _ _ O
: _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
Nondeterministically _ _ O
select _ _ O
a _ _ O
subset _ _ O
c _ _ O
of _ _ O
the _ _ O
number _ _ O
in _ _ O
S. _ _ O
Test _ _ O
whether _ _ O
c _ _ O
is _ _ O
a _ _ O
collection _ _ O
of _ _ O
numbers _ _ O
that _ _ O
sum _ _ O
to _ _ O
t. _ _ O
If _ _ O
the _ _ O
test _ _ O
passes _ _ O
, _ _ O
accept _ _ O
; _ _ O
otherwise _ _ O
, _ _ O
reject _ _ O
. _ _ O
” _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
03 _ _ O



