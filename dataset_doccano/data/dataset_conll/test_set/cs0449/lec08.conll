['test_set', 'labeled']|cs0449|lec08
-DOCSTART- -X- -X- O

8 _ _ O
Investigating _ _ O
the _ _ O
Code _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
Introduction _ _ O
to _ _ O
Systems _ _ O
Software _ _ O
Luis _ _ O
Oliveira _ _ O
( _ _ O
with _ _ O
content _ _ O
borrowed _ _ O
from _ _ O
wilkie _ _ O
and _ _ O
Vinicius _ _ O
Petrucci _ _ O
) _ _ O

Going _ _ O
with _ _ O
the _ _ O
Flow _ _ O
Tracing _ _ O
the _ _ O
footsteps _ _ O
2 _ _ O

Bringing _ _ O
back _ _ O
our _ _ O
alphabet _ _ O
soup _ _ O
: _ _ O
The _ _ O
C _ _ O
ABI _ _ O
• _ _ O
The _ _ O
C _ _ B-Concept
Application _ _ I-Concept
Binary _ _ I-Concept
Interface _ _ I-Concept
( _ _ O
ABI _ _ O
) _ _ O
are _ _ O
assembly _ _ O
conventions _ _ O
• _ _ O
Like _ _ O
MIPS _ _ O
, _ _ O
certain _ _ O
registers _ _ O
are _ _ O
typically _ _ O
used _ _ O
for _ _ O
returns _ _ O
values _ _ O
, _ _ O
args _ _ O
, _ _ O
etc _ _ O
• _ _ O
It _ _ O
is _ _ O
not _ _ O
defined _ _ O
by _ _ O
the _ _ O
language _ _ O
, _ _ O
but _ _ O
rather _ _ O
the _ _ O
OS _ _ O
. _ _ O
• _ _ O
Windows _ _ O
and _ _ O
Linux _ _ O
( _ _ O
UNIX _ _ O
/ _ _ O
System _ _ O
V _ _ O
) _ _ O
have _ _ O
a _ _ O
different _ _ O
C _ _ O
ABI _ _ O
 _ _ O
• _ _ O
In _ _ O
our _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
Linux _ _ O
C _ _ O
ABI _ _ O
, _ _ O
registers _ _ O
are _ _ O
used _ _ O
to _ _ O
pass _ _ O
arguments _ _ O
: _ _ O
• _ _ O
, _ _ O
, _ _ O
, _ _ O
, _ _ O
, _ _ O
( _ _ O
First _ _ O
, _ _ O
second _ _ O
, _ _ O
etc _ _ O
) _ _ O
( _ _ O
Like _ _ O
MIPS _ _ O
– _ _ O
) _ _ O
• _ _ O
Remaining _ _ O
arguments _ _ O
go _ _ O
on _ _ O
the _ _ O
stack _ _ O
. _ _ O
• _ _ O
Callee _ _ O
must _ _ O
preserve _ _ O
, _ _ O
, _ _ O
, _ _ O
, _ _ O
, _ _ O
( _ _ O
Like _ _ O
MIPS _ _ O
– _ _ O
• _ _ O
Return _ _ O
value _ _ O
: _ _ O
( _ _ O
overflows _ _ O
into _ _ O
for _ _ O
128-bits _ _ O
) _ _ O
( _ _ O
MIPS _ _ O
– _ _ O
) _ _ O
• _ _ O
Lots _ _ O
of _ _ O
other _ _ O
small _ _ O
things _ _ O
not _ _ O
worth _ _ O
going _ _ O
over _ _ O
. _ _ O
) _ _ O
• _ _ O
For _ _ O
reference _ _ O
: _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
github.com _ _ O
/ _ _ O
hjl-tools _ _ O
/ _ _ O
x86-psABI _ _ O
/ _ _ O
wiki _ _ O
/ _ _ O
x86 _ _ O
- _ _ O
64-psABI-1.0.pdf _ _ O
3 _ _ O

Function _ _ O
, _ _ O
function _ _ O
… _ _ O
what _ _ O
’s _ _ O
your _ _ O
… _ _ O
function _ _ O
• _ _ O
The _ _ O
activation _ _ B-Concept
frame _ _ I-Concept
contains _ _ O
temporary _ _ O
data _ _ O
needed _ _ O
by _ _ O
the _ _ O
function _ _ O
. _ _ O
• _ _ O
• _ _ O
• _ _ O
C _ _ O
is _ _ O
the _ _ O
return _ _ O
value _ _ O
is _ _ O
the _ _ O
current _ _ O
stack _ _ O
address _ _ O
is _ _ O
the _ _ O
address _ _ O
of _ _ O
this _ _ O
frame _ _ O
What _ _ O
goes _ _ O
here _ _ O
? _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
, _ _ O
) _ _ O
4 _ _ O

Oh _ _ O
, _ _ O
that _ _ O
’s _ _ O
your _ _ O
function _ _ O
• _ _ O
First _ _ O
: _ _ O
it _ _ O
fills _ _ O
the _ _ O
activation _ _ B-Concept
frame _ _ I-Concept
with _ _ O
initial _ _ O
variable _ _ O
values _ _ O
. _ _ O
• _ _ O
It _ _ O
may _ _ O
not _ _ O
allocate _ _ O
them _ _ O
in _ _ O
any _ _ O
strict _ _ O
order _ _ O
. _ _ O
Here _ _ O
, _ _ O
it _ _ O
allocates _ _ O
x _ _ O
first _ _ O
and _ _ O
further _ _ O
away _ _ O
. _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
, _ _ O
– _ _ O
) _ _ O
– _ _ O
Preserves _ _ O
( _ _ O
caller _ _ O
activation _ _ B-Concept
frame _ _ I-Concept
) _ _ O
Allocates _ _ O
“ _ _ O
” _ _ O
on _ _ O
stack _ _ O
( _ _ O
from _ _ O
top _ _ O
) _ _ O
Allocates _ _ O
“ _ _ O
” _ _ O
on _ _ O
stack _ _ O
( _ _ O
from _ _ O
top _ _ O
) _ _ O
( _ _ O
it _ _ O
does _ _ O
not _ _ O
have _ _ O
to _ _ O
be _ _ O
in _ _ O
order _ _ O
) _ _ O
Resets _ _ O
caller _ _ O
activation _ _ B-Concept
frame _ _ I-Concept
Returns _ _ O
( _ _ O
return _ _ O
value _ _ O
is _ _ O
in _ _ O
) _ _ O
5 _ _ O

These _ _ O
are _ _ O
actual _ _ O
sandwiches _ _ O
( _ _ O
no _ _ O
hot _ _ O
dogs _ _ O
or _ _ O
w _ _ O
/ _ _ O
e _ _ O
) _ _ O
• _ _ O
When _ _ O
identifying _ _ O
functions _ _ O
, _ _ O
you _ _ O
are _ _ O
looking _ _ O
for _ _ O
that _ _ O
tell-tale _ _ O
sandwich _ _ O
pattern _ _ O
. _ _ O
•A _ _ O
is _ _ O
a _ _ O
good _ _ O
sign _ _ O
of _ _ O
the _ _ O
beginning _ _ O
of _ _ O
a _ _ O
function _ _ O
• _ _ O
And _ _ O
the _ _ O
will _ _ O
happen _ _ O
before _ _ O
the _ _ O
at _ _ O
the _ _ O
end _ _ O
. _ _ O
• _ _ O
Everything _ _ O
between _ _ O
is _ _ O
the _ _ O
sweet _ _ O
, _ _ O
sweet _ _ O
jam _ _ O
that _ _ O
makes _ _ O
it _ _ O
unique _ _ O
. _ _ O
6 _ _ O

Who _ _ O
controls _ _ O
the _ _ O
• _ _ O
Control _ _ O
flow _ _ O
is _ _ O
a _ _ O
• _ _ O
• _ _ O
will _ _ O
set _ _ O
will _ _ O
set _ _ O
• _ _ O
group _ _ O
set _ _ O
or _ _ O
controls _ _ O
the _ _ O
flow _ _ O
followed _ _ O
by _ _ O
based _ _ O
on _ _ O
the _ _ O
difference _ _ O
( _ _ O
subtraction _ _ O
) _ _ O
between _ _ O
values _ _ O
based _ _ O
on _ _ O
bitwise _ _ O
AND _ _ O
of _ _ O
both _ _ O
values _ _ O
( _ _ O
faster _ _ O
, _ _ O
but _ _ O
less _ _ O
useful _ _ O
) _ _ O
( _ _ O
program _ _ O
counter _ _ O
) _ _ O
to _ _ O
an _ _ O
address _ _ O
based _ _ O
on _ _ O
• _ _ O
Often _ _ O
it _ _ O
is _ _ O
much _ _ O
more _ _ O
useful _ _ O
to _ _ O
just _ _ O
interpret _ _ O
the _ _ O
C _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
, _ _ O
( _ _ O
is _ _ O
) _ _ O
) _ _ O
7 _ _ O

Who _ _ O
controls _ _ O
the _ _ O
• _ _ O
controls _ _ O
the _ _ O
flow _ _ O
has _ _ O
bits _ _ O
that _ _ O
are _ _ O
set _ _ O
based _ _ O
on _ _ O
the _ _ O
ALU _ _ O
( _ _ O
CPU _ _ O
math _ _ O
logic _ _ O
) _ _ O
result _ _ O
– _ _ O
most _ _ O
significant _ _ O
bit _ _ O
of _ _ O
result _ _ O
– _ _ O
set _ _ O
if _ _ O
overflow _ _ O
occurred _ _ O
• _ _ O
Each _ _ O
jump _ _ O
looks _ _ O
at _ _ O
different _ _ O
– _ _ O
Jumps _ _ O
when _ _ O
C _ _ O
Works _ _ O
because _ _ O
of _ _ O
2 _ _ O
’s _ _ O
complement _ _ O
math _ _ O
. _ _ O
( _ _ O
thus _ _ O
, _ _ O
instead _ _ O
of _ _ O
its _ _ O
strict _ _ O
definition _ _ O
, _ _ O
better _ _ O
to _ _ O
think _ _ O
about _ _ O
it _ _ O
abstractly _ _ O
) _ _ O
– _ _ O
set _ _ O
if _ _ O
result _ _ O
is _ _ O
zero _ _ O
– _ _ O
set _ _ O
if _ _ O
last _ _ O
bit _ _ O
operation _ _ O
has _ _ O
carry _ _ O
patterns _ _ O
. _ _ O
( _ _ O
Look _ _ O
‘ _ _ O
em _ _ O
up _ _ O
! _ _ O
) _ _ O
– _ _ O
set _ _ O
if _ _ O
or _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
, _ _ O
) _ _ O
Perform _ _ O
x _ _ O
- _ _ O
0 _ _ O
( _ _ O
does _ _ O
nothing _ _ O
! _ _ O
) _ _ O
Jump _ _ O
if _ _ O
the _ _ O
result _ _ O
( _ _ O
that _ _ O
is _ _ O
, _ _ O
x _ _ O
) _ _ O
does _ _ O
not _ _ O
have _ _ O
a _ _ O
set _ _ O
sign _ _ O
bit _ _ O
. _ _ O
( _ _ O
x _ _ O
is _ _ O
positive _ _ O
in _ _ O
that _ _ O
case _ _ O
) _ _ O
Perform _ _ O
x _ _ O
- _ _ O
y _ _ O
Jump _ _ O
if _ _ O
the _ _ O
result _ _ O
is _ _ O
0 _ _ O
or _ _ O
if _ _ O
result _ _ O
is _ _ O
negative _ _ O
after _ _ O
overflow _ _ O
or _ _ O
positive _ _ O
and _ _ O
did _ _ O
n’t _ _ O
overflow _ _ O
. _ _ O
( _ _ O
x _ _ O
is _ _ O
> _ _ O
= _ _ O
y _ _ O
in _ _ O
these _ _ O
cases _ _ O
) _ _ O
8 _ _ O

cmp _ _ O
, _ _ O
simplifying _ _ O
… _ _ O
the _ _ O
confusion _ _ O
• _ _ O
Just _ _ O
remember _ _ O
that _ _ O
the _ _ O
order _ _ O
of _ _ O
operands _ _ O
is _ _ O
not _ _ O
the _ _ O
… _ _ O
best _ _ O
order _ _ O
… _ _ O
• _ _ O
It _ _ O
’s _ _ O
kinda _ _ O
swapped _ _ O
around _ _ O
in _ _ O
the _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
we _ _ O
have _ _ O
been _ _ O
looking _ _ O
at _ _ O
: _ _ O
Jump _ _ O
if _ _ O
x _ _ O
> _ _ O
0 _ _ O
Jump _ _ O
if _ _ O
x _ _ O
> _ _ O
= _ _ O
y _ _ O
We _ _ O
negate _ _ O
the _ _ O
condition _ _ O
Because _ _ O
we _ _ O
are _ _ O
deciding _ _ O
when _ _ O
to _ _ O
skip _ _ O
the _ _ O
code _ _ O
! _ _ O
Jump _ _ O
if _ _ O
x _ _ O
< _ _ O
y _ _ O
Jump _ _ O
if _ _ O
x _ _ O
! _ _ O
= _ _ O
y _ _ O
9 _ _ O

test _ _ O
… _ _ O
adding _ _ O
some _ _ O
new _ _ O
confusion _ _ O
• _ _ O
is _ _ O
somewhat _ _ O
stranger _ _ O
… _ _ O
and _ _ O
requires _ _ O
some _ _ O
more _ _ O
thought _ _ O
. _ _ O
• _ _ O
performs _ _ O
an _ _ O
AND _ _ O
of _ _ O
the _ _ O
arguments _ _ O
and _ _ O
sets _ _ O
flags _ _ O
on _ _ O
result _ _ O
• _ _ O
Thankfully _ _ O
, _ _ O
generally _ _ O
only _ _ O
commonly _ _ O
used _ _ O
in _ _ O
a _ _ O
couple _ _ O
of _ _ O
cases _ _ O
. _ _ O
• _ _ O
Generally _ _ O
to _ _ O
test _ _ O
a _ _ O
value _ _ O
against _ _ O
“ _ _ O
true _ _ O
” _ _ O
or _ _ O
“ _ _ O
false _ _ O
” _ _ O
. _ _ O
• _ _ O
Recall _ _ O
that _ _ O
and _ _ O
will _ _ O
look _ _ O
at _ _ O
the _ _ O
zero _ _ O
flag _ _ O
( _ _ O
) _ _ O
• _ _ O
Keep _ _ O
in _ _ O
mind _ _ O
that _ _ O
jumps _ _ O
are _ _ O
built _ _ O
around _ _ O
( _ _ O
which _ _ O
performs _ _ O
: _ _ O
We _ _ O
negate _ _ O
the _ _ O
condition _ _ O
) _ _ O
… _ _ O
Jump _ _ O
if _ _ O
x _ _ O
! _ _ O
= _ _ O
0 _ _ O
( _ _ O
? _ _ O
) _ _ O
Jump _ _ O
if _ _ O
x _ _ O
= _ _ O
= _ _ O
0 _ _ O
( _ _ O
? _ _ O
) _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
– _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
10 _ _ O

Patterns _ _ O
• _ _ O
Control _ _ O
flow _ _ O
is _ _ O
a _ _ O
C _ _ O
/ _ _ O
before _ _ O
a _ _ O
– _ _ O
– _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
, _ _ O
) _ _ O
11 _ _ O

Altogether _ _ O
now _ _ O
… _ _ O
Working _ _ O
backward _ _ O
Negate _ _ O
logic _ _ O
to _ _ O
form _ _ O
“ _ _ O
if _ _ O
” _ _ O
logic _ _ O
Negate _ _ O
logic _ _ O
to _ _ O
form _ _ O
“ _ _ O
if _ _ O
” _ _ O
logic _ _ O
12 _ _ O

Deduction _ _ O
, _ _ O
dear _ _ O
watson _ _ O
No _ _ O
use _ _ O
of _ _ O
… _ _ O
likely _ _ O
no _ _ O
arguments _ _ O
Two _ _ O
stack _ _ O
allocations _ _ O
… _ _ O
Two _ _ O
local _ _ O
variables _ _ O
. _ _ O
( _ _ O
initialized _ _ O
to _ _ O
5 _ _ O
and _ _ O
, _ _ O
likely _ _ O
, _ _ O
-2 _ _ O
) _ _ O
Looking _ _ O
at _ _ O
… _ _ O
This _ _ O
simply _ _ O
returns _ _ O
zero _ _ O
. _ _ O
13 _ _ O

Conventional _ _ O
wisdom _ _ O
: _ _ O
counting _ _ O
arguments _ _ O
Readies _ _ O
… _ _ O
second _ _ O
argument _ _ O
! _ _ O
Readies _ _ O
… _ _ O
first _ _ O
argument _ _ O
! _ _ O
Since _ _ O
they _ _ O
are _ _ O
… _ _ O
yep _ _ O
! _ _ O
Both _ _ O
32-bit _ _ O
! _ _ O
Like _ _ O
a _ _ O
in _ _ O
MIPS _ _ O
. _ _ O
A _ _ O
function _ _ O
call _ _ O
. _ _ O
Still _ _ O
have _ _ O
to _ _ O
follow _ _ O
the _ _ O
to _ _ O
the _ _ O
assembly _ _ O
of _ _ O
the _ _ O
function _ _ O
. _ _ O
14 _ _ O

Conventional _ _ O
wisdom _ _ O
: _ _ O
counting _ _ O
arguments _ _ O
Copies _ _ O
… _ _ O
function _ _ O
argument _ _ O
! _ _ O
Copies _ _ O
… _ _ O
second _ _ O
argument _ _ O
! _ _ O
Since _ _ O
they _ _ O
are _ _ O
… _ _ O
They _ _ O
are _ _ O
both _ _ O
32-bit _ _ O
! _ _ O
is _ _ O
the _ _ O
return _ _ O
address _ _ O
… _ _ O
means _ _ O
it _ _ O
is _ _ O
a _ _ O
32-bit _ _ O
return _ _ O
15 _ _ O



