['test_set', 'labeled']|cs1502|lec26_time_complexity_01
-DOCSTART- -X- -X- O

Time _ _ O
Complexity _ _ O
01 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ B-Concept
Complexity _ _ I-Concept
01 _ _ O

Measuring _ _ O
Complexity _ _ B-Concept
A _ _ O
solvable _ _ B-Concept
problem _ _ O
takes _ _ O
time _ _ O
to _ _ O
solve _ _ O
Some _ _ O
problems _ _ O
may _ _ O
take _ _ O
too _ _ O
long _ _ O
to _ _ O
solve _ _ O
We _ _ O
are _ _ O
going _ _ O
to _ _ O
measure _ _ O
the _ _ O
time _ _ O
to _ _ O
solve _ _ O
a _ _ O
problem _ _ O
by _ _ O
an _ _ O
algorithm _ _ O
An _ _ O
algorithm _ _ O
will _ _ O
be _ _ O
represented _ _ O
by _ _ O
a _ _ O
TM _ _ O
Count _ _ O
the _ _ O
maximum _ _ O
number _ _ O
of _ _ O
steps _ _ O
to _ _ O
process _ _ O
an _ _ O
input _ _ O
of _ _ O
length _ _ O
n _ _ O
until _ _ O
it _ _ O
halts _ _ O
Let _ _ O
M _ _ O
be _ _ O
a _ _ O
deterministic _ _ O
Turing _ _ O
machine _ _ O
that _ _ O
halts _ _ O
on _ _ O
all _ _ O
inputs _ _ O
The _ _ O
running _ _ B-Concept
time _ _ I-Concept
or _ _ O
time _ _ B-Concept
complexity _ _ I-Concept
of _ _ O
M _ _ O
is _ _ O
the _ _ O
function _ _ O
f _ _ O
: _ _ O
N _ _ O
→ _ _ O
N _ _ O
, _ _ O
where _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
is _ _ O
the _ _ O
maximum _ _ O
number _ _ O
of _ _ O
steps _ _ O
that _ _ O
M _ _ O
uses _ _ O
on _ _ O
any _ _ O
input _ _ O
of _ _ O
length _ _ O
n _ _ O
If _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
is _ _ O
the _ _ O
running _ _ O
time _ _ O
of _ _ O
M _ _ O
, _ _ O
M _ _ O
runs _ _ O
in _ _ O
time _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
M _ _ O
is _ _ O
an _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
time _ _ O
Turing _ _ O
machine _ _ O
Customarily _ _ O
we _ _ O
use _ _ O
n _ _ O
to _ _ O
represent _ _ O
the _ _ O
length _ _ O
of _ _ O
the _ _ O
input _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Big-O _ _ B-Concept
and _ _ O
Small-o _ _ B-Concept
Notations _ _ O
Given _ _ O
a _ _ O
TM _ _ O
M _ _ O
, _ _ O
its _ _ O
running _ _ B-Concept
time _ _ I-Concept
f _ _ O
( _ _ O
n _ _ O
) _ _ O
may _ _ O
look _ _ O
like _ _ O
the _ _ O
following _ _ O
: _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
3n3 _ _ O
+ _ _ O
20n2 _ _ O
+ _ _ O
15n _ _ O
+ _ _ O
12 _ _ O
To _ _ O
eliminate _ _ O
the _ _ O
complexity _ _ B-Concept
of _ _ O
a _ _ O
running _ _ O
time _ _ O
of _ _ O
a _ _ O
Turing _ _ O
machine _ _ O
, _ _ O
we _ _ O
estimate _ _ O
it _ _ O
This _ _ O
is _ _ O
called _ _ O
asymptotic _ _ B-Concept
analysis _ _ I-Concept
Consider _ _ O
only _ _ O
when _ _ O
the _ _ O
Turing _ _ O
machine _ _ O
runs _ _ O
on _ _ O
large _ _ O
input _ _ O
Consider _ _ O
only _ _ O
the _ _ O
highest _ _ O
order _ _ O
term _ _ O
Discard _ _ O
the _ _ O
coefficient _ _ O
We _ _ O
generally _ _ O
use _ _ O
Big-O _ _ O
and _ _ O
Small-o _ _ O
notations _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Big-O _ _ O
Definition _ _ O
Let _ _ O
f _ _ O
and _ _ O
g _ _ O
be _ _ O
functions _ _ O
f _ _ O
, _ _ O
g _ _ O
: _ _ O
N _ _ O
→ _ _ O
R+ _ _ O
We _ _ O
say _ _ O
that _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
O _ _ O
( _ _ O
g _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
or _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
is _ _ O
O _ _ O
( _ _ O
g _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
if _ _ O
positive _ _ O
integers _ _ O
c _ _ O
and _ _ O
n0 _ _ O
exist _ _ O
such _ _ O
that _ _ O
for _ _ O
every _ _ O
integer _ _ O
n _ _ O
≥ _ _ O
n0 _ _ O
, _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
≤ _ _ O
cg _ _ O
( _ _ O
n _ _ O
) _ _ O
When _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
O _ _ O
( _ _ O
g _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
: _ _ O
g _ _ O
( _ _ O
n _ _ O
) _ _ O
is _ _ O
an _ _ O
upper _ _ B-Concept
bound _ _ I-Concept
for _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
, _ _ O
or _ _ O
More _ _ O
precisely _ _ O
, _ _ O
g _ _ O
( _ _ O
n _ _ O
) _ _ O
is _ _ O
an _ _ O
asymptotic _ _ B-Concept
upper _ _ I-Concept
bound _ _ I-Concept
for _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Big-O _ _ O
Examples _ _ O
Show _ _ O
that _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
6n3 _ _ O
+ _ _ O
2n2 _ _ O
+ _ _ O
20n _ _ O
+ _ _ O
45 _ _ O
is _ _ O
O _ _ O
( _ _ O
n3 _ _ O
) _ _ O
Need _ _ O
to _ _ O
find _ _ O
c _ _ O
and _ _ O
n0 _ _ O
such _ _ O
that _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
≤ _ _ O
cn3 _ _ O
for _ _ O
n _ _ O
≥ _ _ O
n0 _ _ O
We _ _ O
know _ _ O
the _ _ O
following _ _ O
: _ _ O
2n2 _ _ O
≤ _ _ O
2n3 _ _ O
for _ _ O
n _ _ O
≥ _ _ O
1 _ _ O
20n _ _ O
≤ _ _ O
20n3 _ _ O
for _ _ O
n _ _ O
≥ _ _ O
1 _ _ O
45 _ _ O
≤ _ _ O
45n3 _ _ O
for _ _ O
n _ _ O
≥ _ _ O
1 _ _ O
Thus _ _ O
, _ _ O
we _ _ O
have _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
6n3 _ _ O
+ _ _ O
2n2 _ _ O
+ _ _ O
20n _ _ O
+ _ _ O
45 _ _ O
≤ _ _ O
6n3 _ _ O
+ _ _ O
2n3 _ _ O
+ _ _ O
20n3 _ _ O
+ _ _ O
45n3 _ _ O
= _ _ O
( _ _ O
6 _ _ O
+ _ _ O
2 _ _ O
+ _ _ O
20 _ _ O
+ _ _ O
45 _ _ O
) _ _ O
n3 _ _ O
= _ _ O
73n3 _ _ O
for _ _ O
n _ _ O
≥ _ _ O
1 _ _ O
In _ _ O
other _ _ O
words _ _ O
, _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
≤ _ _ O
73n3 _ _ O
for _ _ O
n _ _ O
≥ _ _ O
1 _ _ O
From _ _ O
the _ _ O
above _ _ O
equation _ _ O
, _ _ O
what _ _ O
are _ _ O
c _ _ O
and _ _ O
n0 _ _ O
? _ _ O
c _ _ O
= _ _ O
73 _ _ O
n0 _ _ O
= _ _ O
1 _ _ O
Thus _ _ O
, _ _ O
6n3 _ _ O
+ _ _ O
2n2 _ _ O
+ _ _ O
20 _ _ O
+ _ _ O
45 _ _ O
is _ _ O
O _ _ O
( _ _ O
n3 _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Big-O _ _ O
Examples _ _ O
Show _ _ O
that _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
2n _ _ O
log2 _ _ O
n _ _ O
+ _ _ O
20n _ _ O
+ _ _ O
10 _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
log2 _ _ O
n _ _ O
) _ _ O
Need _ _ O
to _ _ O
find _ _ O
c _ _ O
and _ _ O
n0 _ _ O
such _ _ O
that _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
≤ _ _ O
c _ _ O
( _ _ O
n _ _ O
log2 _ _ O
n _ _ O
) _ _ O
for _ _ O
n _ _ O
≥ _ _ O
n0 _ _ O
We _ _ O
know _ _ O
the _ _ O
following _ _ O
: _ _ O
20n _ _ O
≤ _ _ O
20n _ _ O
log2 _ _ O
n _ _ O
for _ _ O
n _ _ O
≥ _ _ O
1 _ _ O
10 _ _ O
≤ _ _ O
10n _ _ O
log2 _ _ O
n _ _ O
for _ _ O
n _ _ O
≥ _ _ O
1 _ _ O
Thus _ _ O
, _ _ O
we _ _ O
have _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
2n _ _ O
log2 _ _ O
n _ _ O
+ _ _ O
20n _ _ O
+ _ _ O
10 _ _ O
≤ _ _ O
2n _ _ O
log2 _ _ O
n _ _ O
+ _ _ O
20n _ _ O
log2 _ _ O
n _ _ O
+ _ _ O
10n _ _ O
log2 _ _ O
n _ _ O
= _ _ O
( _ _ O
2 _ _ O
+ _ _ O
20 _ _ O
+ _ _ O
10 _ _ O
) _ _ O
n _ _ O
log2 _ _ O
n _ _ O
= _ _ O
32n _ _ O
log2 _ _ O
n _ _ O
for _ _ O
n _ _ O
≥ _ _ O
1 _ _ O
In _ _ O
other _ _ O
words _ _ O
, _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
≤ _ _ O
32n _ _ O
log2 _ _ O
n _ _ O
for _ _ O
n _ _ O
≥ _ _ O
1 _ _ O
From _ _ O
the _ _ O
above _ _ O
equation _ _ O
, _ _ O
what _ _ O
are _ _ O
c _ _ O
and _ _ O
n0 _ _ O
? _ _ O
c _ _ O
= _ _ O
32 _ _ O
n0 _ _ O
= _ _ O
1 _ _ O
Thus _ _ O
, _ _ O
2n _ _ O
log2 _ _ O
n _ _ O
+ _ _ O
20n _ _ O
+ _ _ O
10 _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
log2 _ _ O
n _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Big-O _ _ O
Examples _ _ O
Upper _ _ O
bounds _ _ O
of _ _ O
the _ _ O
form _ _ O
nc _ _ O
where _ _ O
c _ _ O
> _ _ O
0 _ _ O
is _ _ O
called _ _ O
polynomial _ _ B-Concept
bounds _ _ I-Concept
O _ _ O
( _ _ O
n2 _ _ O
) _ _ O
O _ _ O
( _ _ O
n10 _ _ O
) _ _ O
O _ _ O
( _ _ O
n _ _ O
log2 _ _ O
n _ _ O
) _ _ O
( _ _ O
bounded _ _ O
by _ _ O
O _ _ O
( _ _ O
n2 _ _ O
) _ _ O
) _ _ O
δ _ _ O
Upper _ _ O
bounds _ _ O
of _ _ O
the _ _ O
form _ _ O
2 _ _ O
( _ _ O
n _ _ O
) _ _ O
is _ _ O
called _ _ O
exponential _ _ B-Concept
bounds _ _ I-Concept
O _ _ O
( _ _ O
2n _ _ O
) _ _ O
O _ _ O
( _ _ O
3n _ _ O
) _ _ O
3n _ _ O
= _ _ O
( _ _ O
2log2 _ _ O
3 _ _ O
) _ _ O
n _ _ O
= _ _ O
2log2 _ _ O
3×n _ _ O
and _ _ O
log2 _ _ O
3 _ _ O
is _ _ O
a _ _ O
constant _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Small-o _ _ O
Notation _ _ O
Definition _ _ O
7.5 _ _ O
Let _ _ O
f _ _ O
and _ _ O
g _ _ O
be _ _ O
functions _ _ O
f _ _ O
, _ _ O
g _ _ O
: _ _ O
N _ _ O
→ _ _ O
R+ _ _ O
. _ _ O
Say _ _ O
that _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
o _ _ O
( _ _ O
g _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
if _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
0 _ _ O
. _ _ O
n→∞ _ _ O
g _ _ O
( _ _ O
n _ _ O
) _ _ O
lim _ _ O
In _ _ O
other _ _ O
words _ _ O
, _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
o _ _ O
( _ _ O
g _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
means _ _ O
that _ _ O
for _ _ O
any _ _ O
real _ _ O
number _ _ O
c _ _ O
> _ _ O
0 _ _ O
, _ _ O
a _ _ O
number _ _ O
n0 _ _ O
exists _ _ O
, _ _ O
where _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
< _ _ O
cg _ _ O
( _ _ O
n _ _ O
) _ _ O
for _ _ O
all _ _ O
n _ _ O
≥ _ _ O
n0 _ _ O
. _ _ O
Simply _ _ O
strictly _ _ O
less _ _ O
than _ _ O
√ _ _ O
n _ _ O
= _ _ O
o _ _ O
( _ _ O
n _ _ O
) _ _ O
n _ _ O
= _ _ O
o _ _ O
( _ _ O
n _ _ O
log _ _ O
( _ _ O
log _ _ O
n _ _ O
) _ _ O
) _ _ O
n _ _ O
log _ _ O
( _ _ O
log _ _ O
n _ _ O
) _ _ O
= _ _ O
o _ _ O
( _ _ O
n _ _ O
log _ _ O
n _ _ O
) _ _ O
n _ _ O
log _ _ O
n _ _ O
= _ _ O
o _ _ O
( _ _ O
n2 _ _ O
) _ _ O
n2 _ _ O
= _ _ O
o _ _ O
( _ _ O
n3 _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Analyzing _ _ O
Algorithms _ _ O
Consider _ _ O
a _ _ O
Turing _ _ O
machine _ _ O
M1 _ _ O
that _ _ O
decides _ _ O
A _ _ O
= _ _ O
{ _ _ O
0k _ _ O
1k _ _ O
| _ _ O
k _ _ O
≥ _ _ O
0 _ _ O
} _ _ O
M1 _ _ O
= _ _ O
“ _ _ O
On _ _ O
input _ _ O
string _ _ O
w _ _ O
: _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
Scan _ _ O
across _ _ O
the _ _ O
tape _ _ O
and _ _ O
reject _ _ O
if _ _ O
a _ _ O
0 _ _ O
is _ _ O
found _ _ O
to _ _ O
the _ _ O
right _ _ O
of _ _ O
a _ _ O
1 _ _ O
. _ _ O
Repeat _ _ O
if _ _ O
both _ _ O
0s _ _ O
and _ _ O
1s _ _ O
remain _ _ O
on _ _ O
the _ _ O
tape _ _ O
: _ _ O
Scan _ _ O
across _ _ O
the _ _ O
tape _ _ O
, _ _ O
crossing _ _ O
off _ _ O
a _ _ O
single _ _ O
0 _ _ O
and _ _ O
a _ _ O
single _ _ O
1 _ _ O
. _ _ O
If _ _ O
0s _ _ O
still _ _ O
remain _ _ O
after _ _ O
all _ _ O
the _ _ O
1s _ _ O
have _ _ O
been _ _ O
crossed _ _ O
off _ _ O
, _ _ O
or _ _ O
if _ _ O
1s _ _ O
still _ _ O
remain _ _ O
after _ _ O
all _ _ O
the _ _ O
0s _ _ O
have _ _ O
been _ _ O
crossed _ _ O
off _ _ O
, _ _ O
reject _ _ O
. _ _ O
Otherwise _ _ O
, _ _ O
if _ _ O
neither _ _ O
0s _ _ O
nor _ _ O
1s _ _ O
remain _ _ O
on _ _ O
the _ _ O
tape _ _ O
, _ _ O
accept _ _ O
. _ _ O
” _ _ O
Find _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
, _ _ O
the _ _ O
maximum _ _ O
number _ _ O
of _ _ O
steps _ _ O
for _ _ O
M1 _ _ O
to _ _ O
process _ _ O
a _ _ O
string _ _ O
w _ _ O
of _ _ O
length _ _ O
n _ _ O
There _ _ O
are _ _ O
multiple _ _ O
input _ _ O
strings _ _ O
of _ _ O
length _ _ O
n _ _ O
The _ _ O
number _ _ O
of _ _ O
steps _ _ O
of _ _ O
an _ _ O
input _ _ O
of _ _ O
length _ _ O
n _ _ O
depends _ _ O
on _ _ O
the _ _ O
input _ _ O
pattern _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Analyzing _ _ O
Algorithm _ _ O
Consider _ _ O
all _ _ O
possible _ _ O
inputs _ _ O
of _ _ O
length _ _ O
4 _ _ O
: _ _ O
Input _ _ O
0000 _ _ O
0001 _ _ O
0010 _ _ O
0011 _ _ O
0100 _ _ O
0101 _ _ O
0110 _ _ O
0111 _ _ O
1000 _ _ O
1001 _ _ O
1010 _ _ O
1011 _ _ O
1100 _ _ O
1101 _ _ O
1110 _ _ O
1111 _ _ O
Step _ _ O
that _ _ O
M1 _ _ O
halts _ _ O
4 _ _ O
( _ _ O
0 _ _ O
iterations _ _ O
) _ _ O
4 _ _ O
( _ _ O
1 _ _ O
iterations _ _ O
) _ _ O
1 _ _ O
4 _ _ O
( _ _ O
2 _ _ O
iterations _ _ O
) _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
4 _ _ O
( _ _ O
1 _ _ O
iterations _ _ O
) _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
4 _ _ O
( _ _ O
0 _ _ O
iterations _ _ O
) _ _ O
The _ _ O
maximum _ _ O
number _ _ O
of _ _ O
steps _ _ O
on _ _ O
an _ _ O
input _ _ O
of _ _ O
length _ _ O
n _ _ O
occurs _ _ O
when _ _ O
w _ _ O
= _ _ O
0k _ _ O
1k _ _ O
where _ _ O
k _ _ O
= _ _ O
n2 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Analyzing _ _ O
Algorithms _ _ O
1 _ _ O
Scan _ _ O
across _ _ O
the _ _ O
tape _ _ O
and _ _ O
reject _ _ O
if _ _ O
a _ _ O
0 _ _ O
is _ _ O
found _ _ O
to _ _ O
the _ _ O
right _ _ O
of _ _ O
a1 _ _ O
This _ _ O
step _ _ O
requires _ _ O
TM _ _ O
M1 _ _ O
to _ _ O
move _ _ O
its _ _ O
tape _ _ O
head _ _ O
all _ _ O
the _ _ O
way _ _ O
to _ _ O
the _ _ O
right _ _ O
until _ _ O
it _ _ O
encounters _ _ O
a _ _ O
blank _ _ O
symbol _ _ O
and _ _ O
move _ _ O
its _ _ O
tape _ _ O
head _ _ O
all _ _ O
the _ _ O
way _ _ O
to _ _ O
the _ _ O
left-most _ _ O
square _ _ O
This _ _ O
step _ _ O
requires _ _ O
either _ _ O
n _ _ O
or _ _ O
2n _ _ O
steps _ _ O
In _ _ O
other _ _ O
words _ _ O
, _ _ O
this _ _ O
step _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
2 _ _ O
3 _ _ O
Repeat _ _ O
if _ _ O
both _ _ O
0s _ _ O
and _ _ O
1s _ _ O
remain _ _ O
on _ _ O
the _ _ O
tape _ _ O
: _ _ O
Scan _ _ O
across _ _ O
the _ _ O
tape _ _ O
, _ _ O
crossing _ _ O
off _ _ O
a _ _ O
single _ _ O
0 _ _ O
and _ _ O
a _ _ O
single _ _ O
1 _ _ O
. _ _ O
Step _ _ O
3 _ _ O
requires _ _ O
n _ _ O
steps _ _ O
or _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
Cross _ _ O
the _ _ O
first _ _ O
0 _ _ O
, _ _ O
move _ _ O
the _ _ O
tape _ _ O
head _ _ O
n _ _ O
/ _ _ O
2 _ _ O
step _ _ O
to _ _ O
the _ _ O
first _ _ O
1 _ _ O
, _ _ O
cross _ _ O
it _ _ O
off _ _ O
and _ _ O
move _ _ O
the _ _ O
tape _ _ O
head _ _ O
n _ _ O
/ _ _ O
2 _ _ O
step _ _ O
to _ _ O
position _ _ O
on _ _ O
top _ _ O
of _ _ O
the _ _ O
first _ _ O
of _ _ O
the _ _ O
remaining _ _ O
0s _ _ O
There _ _ O
will _ _ O
be _ _ O
n _ _ O
/ _ _ O
2 _ _ O
0s _ _ O
and _ _ O
n _ _ O
/ _ _ O
2 _ _ O
1s _ _ O
The _ _ O
step _ _ O
3 _ _ O
is _ _ O
repeated _ _ O
n _ _ O
/ _ _ O
2 _ _ O
times _ _ O
Steps _ _ O
2 _ _ O
and _ _ O
3 _ _ O
together _ _ O
is _ _ O
n _ _ O
/ _ _ O
2 _ _ O
× _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
or _ _ O
O _ _ O
( _ _ O
n2 _ _ O
) _ _ O
. _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Analyzing _ _ O
Algorithms _ _ O
4 _ _ O
If _ _ O
0s _ _ O
still _ _ O
remain _ _ O
after _ _ O
all _ _ O
the _ _ O
1s _ _ O
have _ _ O
been _ _ O
crossed _ _ O
off _ _ O
, _ _ O
or _ _ O
if _ _ O
1s _ _ O
still _ _ O
remain _ _ O
after _ _ O
all _ _ O
the _ _ O
0s _ _ O
have _ _ O
been _ _ O
crossed _ _ O
off _ _ O
, _ _ O
reject _ _ O
. _ _ O
Otherwise _ _ O
, _ _ O
if _ _ O
neither _ _ O
0s _ _ O
nor _ _ O
1s _ _ O
remain _ _ O
on _ _ O
the _ _ O
tape _ _ O
, _ _ O
accept _ _ O
. _ _ O
Simply _ _ O
scan _ _ O
the _ _ O
whole _ _ O
tape _ _ O
looking _ _ O
for _ _ O
a _ _ O
0 _ _ O
or _ _ O
a _ _ O
1 _ _ O
This _ _ O
step _ _ O
can _ _ O
be _ _ O
done _ _ O
in _ _ O
n _ _ O
step _ _ O
This _ _ O
step _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
The _ _ O
running _ _ O
time _ _ O
of _ _ O
M1 _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
+ _ _ O
O _ _ O
( _ _ O
n2 _ _ O
) _ _ O
+ _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
O _ _ O
( _ _ O
n2 _ _ O
+ _ _ O
2n _ _ O
) _ _ O
= _ _ O
O _ _ O
( _ _ O
n2 _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Time _ _ O
Complexity _ _ O
Class _ _ O
Definition _ _ O
7.7 _ _ O
Let _ _ O
t _ _ O
: _ _ O
N _ _ O
→ _ _ O
R+ _ _ O
be _ _ O
a _ _ O
function _ _ O
. _ _ O
Define _ _ O
the _ _ O
time _ _ O
complexity _ _ O
class _ _ O
, _ _ O
TIME _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
, _ _ O
to _ _ O
be _ _ O
the _ _ O
collection _ _ O
of _ _ O
all _ _ O
languages _ _ O
that _ _ O
are _ _ O
decidable _ _ O
by _ _ O
an _ _ O
O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
time _ _ O
Turing _ _ O
machine _ _ O
. _ _ O
From _ _ O
the _ _ O
previous _ _ O
language _ _ O
A _ _ O
= _ _ O
{ _ _ O
0k _ _ O
1k _ _ O
| _ _ O
k _ _ O
≥ _ _ O
0 _ _ O
} _ _ O
with _ _ O
TM _ _ O
M1 _ _ O
A _ _ O
∈ _ _ O
TIME _ _ O
( _ _ O
n2 _ _ O
) _ _ O
Can _ _ O
we _ _ O
construct _ _ O
a _ _ O
TM _ _ O
M2 _ _ O
such _ _ O
that _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
o _ _ O
( _ _ O
n2 _ _ O
) _ _ O
? _ _ O
Asymptotically _ _ O
better _ _ O
than _ _ O
O _ _ O
( _ _ O
n2 _ _ O
) _ _ O
What _ _ O
if _ _ O
we _ _ O
cross _ _ O
off _ _ O
two _ _ O
0s _ _ O
and _ _ O
two _ _ O
1s _ _ O
in _ _ O
step _ _ O
3 _ _ O
? _ _ O
Practically _ _ O
faster _ _ O
but _ _ O
not _ _ O
asymptotically _ _ O
better _ _ O
Step _ _ O
3 _ _ O
will _ _ O
be _ _ O
repeated _ _ O
n _ _ O
/ _ _ O
4 _ _ O
times _ _ O
but _ _ O
n _ _ O
/ _ _ O
4 _ _ O
× _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
O _ _ O
( _ _ O
n2 _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Asymptotically _ _ O
Faster _ _ O
for _ _ O
Deciding _ _ O
A _ _ O
Consider _ _ O
TM _ _ O
M2 _ _ O
that _ _ O
decides _ _ O
A _ _ O
= _ _ O
{ _ _ O
0k _ _ O
1k _ _ O
| _ _ O
k _ _ O
≥ _ _ O
0 _ _ O
} _ _ O
: _ _ O
M2 _ _ O
= _ _ O
“ _ _ O
On _ _ O
input _ _ O
string _ _ O
w _ _ O
: _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
Scan _ _ O
across _ _ O
the _ _ O
tape _ _ O
and _ _ O
reject _ _ O
if _ _ O
a _ _ O
0 _ _ O
is _ _ O
found _ _ O
to _ _ O
the _ _ O
right _ _ O
of _ _ O
a _ _ O
1 _ _ O
. _ _ O
Repeat _ _ O
as _ _ O
long _ _ O
as _ _ O
some _ _ O
0s _ _ O
and _ _ O
some _ _ O
1s _ _ O
remain _ _ O
on _ _ O
the _ _ O
tape _ _ O
. _ _ O
Scan _ _ O
across _ _ O
the _ _ O
tape _ _ O
, _ _ O
checking _ _ O
whether _ _ O
the _ _ O
total _ _ O
number _ _ O
of _ _ O
0s _ _ O
and _ _ O
1s _ _ O
remaining _ _ O
is _ _ O
even _ _ O
or _ _ O
odd _ _ O
. _ _ O
If _ _ O
it _ _ O
is _ _ O
odd _ _ O
, _ _ O
reject _ _ O
. _ _ O
Scan _ _ O
again _ _ O
across _ _ O
the _ _ O
tape _ _ O
, _ _ O
crossing _ _ O
off _ _ O
every _ _ O
other _ _ O
0 _ _ O
starting _ _ O
with _ _ O
the _ _ O
first _ _ O
0 _ _ O
, _ _ O
and _ _ O
then _ _ O
crossing _ _ O
off _ _ O
every _ _ O
other _ _ O
1 _ _ O
starting _ _ O
with _ _ O
the _ _ O
first _ _ O
1 _ _ O
. _ _ O
If _ _ O
no _ _ O
0s _ _ O
and _ _ O
no _ _ O
1s _ _ O
remain _ _ O
on _ _ O
the _ _ O
tape _ _ O
, _ _ O
accept _ _ O
. _ _ O
Otherwise _ _ O
, _ _ O
reject _ _ O
. _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Asymptotically _ _ O
Faster _ _ O
for _ _ O
Deciding _ _ O
A _ _ O
Step _ _ O
1 _ _ O
and _ _ O
5 _ _ O
are _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
as _ _ O
in _ _ O
M1 _ _ O
Step _ _ O
3 _ _ O
, _ _ O
to _ _ O
scan _ _ O
and _ _ O
check _ _ O
whether _ _ O
the _ _ O
number _ _ O
of _ _ O
0s _ _ O
and _ _ O
1s _ _ O
are _ _ O
even _ _ O
or _ _ O
odd _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
In _ _ O
step _ _ O
4 _ _ O
, _ _ O
to _ _ O
cross _ _ O
off _ _ O
every _ _ O
other _ _ O
0s _ _ O
and _ _ O
1s _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
Every _ _ O
time _ _ O
this _ _ O
step _ _ O
is _ _ O
executed _ _ O
, _ _ O
the _ _ O
number _ _ O
of _ _ O
0s _ _ O
and _ _ O
1s _ _ O
are _ _ O
cut _ _ O
in _ _ O
half _ _ O
If _ _ O
there _ _ O
are _ _ O
n _ _ O
/ _ _ O
2 _ _ O
0s _ _ O
and _ _ O
n _ _ O
/ _ _ O
2 _ _ O
1s _ _ O
, _ _ O
step _ _ O
4 _ _ O
needs _ _ O
to _ _ O
be _ _ O
repeated _ _ O
1 _ _ O
+ _ _ O
log2 _ _ O
( _ _ O
n _ _ O
/ _ _ O
2 _ _ O
) _ _ O
times _ _ O
For _ _ O
example _ _ O
( _ _ O
n _ _ O
= _ _ O
16 _ _ O
) _ _ O
, _ _ O
8 _ _ O
→ _ _ O
4 _ _ O
→ _ _ O
2 _ _ O
→ _ _ O
1 _ _ O
→ _ _ O
0 _ _ O
( _ _ O
cut _ _ O
in _ _ O
half _ _ O
4 _ _ O
times _ _ O
) _ _ O
for _ _ O
input _ _ O
08 _ _ O
18 _ _ O
Steps _ _ O
2 _ _ O
, _ _ O
3 _ _ O
and _ _ O
4 _ _ O
all _ _ O
together _ _ O
is _ _ O
( _ _ O
1 _ _ O
+ _ _ O
log2 _ _ O
( _ _ O
n _ _ O
/ _ _ O
2 _ _ O
) _ _ O
) _ _ O
× _ _ O
( _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
+ _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
= _ _ O
O _ _ O
( _ _ O
n _ _ O
log _ _ O
n _ _ O
) _ _ O
Thus _ _ O
, _ _ O
TM _ _ O
M2 _ _ O
run-time _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
+ _ _ O
O _ _ O
( _ _ O
n _ _ O
log _ _ O
n _ _ O
) _ _ O
+ _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
O _ _ O
( _ _ O
n _ _ O
log _ _ O
n _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Deciding _ _ O
A _ _ O
in _ _ O
Linear _ _ O
Time _ _ O
The _ _ O
language _ _ O
A _ _ O
can _ _ O
be _ _ O
decided _ _ O
in _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
But _ _ O
we _ _ O
need _ _ O
the _ _ O
second _ _ O
tape _ _ O
Two-tape _ _ O
TM _ _ O
M3 _ _ O
decides _ _ O
A _ _ O
in _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
M3 _ _ O
= _ _ O
“ _ _ O
On _ _ O
input _ _ O
string _ _ O
w _ _ O
: _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
Scan _ _ O
across _ _ O
tape _ _ O
1 _ _ O
and _ _ O
reject _ _ O
if _ _ O
a _ _ O
0 _ _ O
is _ _ O
found _ _ O
to _ _ O
the _ _ O
right _ _ O
of _ _ O
a _ _ O
1 _ _ O
. _ _ O
Scan _ _ O
across _ _ O
the _ _ O
0s _ _ O
on _ _ O
tape _ _ O
1 _ _ O
until _ _ O
the _ _ O
first _ _ O
1 _ _ O
. _ _ O
At _ _ O
the _ _ O
same _ _ O
time _ _ O
, _ _ O
copy _ _ O
the _ _ O
0s _ _ O
onto _ _ O
tape _ _ O
2 _ _ O
. _ _ O
Scan _ _ O
across _ _ O
the _ _ O
1s _ _ O
on _ _ O
tape _ _ O
1 _ _ O
until _ _ O
the _ _ O
end _ _ O
of _ _ O
the _ _ O
input _ _ O
. _ _ O
For _ _ O
each _ _ O
1 _ _ O
read _ _ O
on _ _ O
tape _ _ O
1 _ _ O
, _ _ O
cross _ _ O
off _ _ O
a _ _ O
0 _ _ O
on _ _ O
tape _ _ O
2 _ _ O
. _ _ O
If _ _ O
all _ _ O
0s _ _ O
are _ _ O
crossed _ _ O
off _ _ O
before _ _ O
all _ _ O
the _ _ O
1s _ _ O
are _ _ O
read _ _ O
, _ _ O
reject _ _ O
. _ _ O
If _ _ O
all _ _ O
the _ _ O
0s _ _ O
have _ _ O
now _ _ O
been _ _ O
crossed _ _ O
off _ _ O
, _ _ O
accept _ _ O
. _ _ O
If _ _ O
any _ _ O
0s _ _ O
remain _ _ O
, _ _ O
reject _ _ O
. _ _ O
” _ _ O
Run-time _ _ O
of _ _ O
each _ _ O
step _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
TM _ _ O
M3 _ _ O
runs _ _ O
in _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
The _ _ O
run-time _ _ O
complexity _ _ O
of _ _ O
the _ _ O
language _ _ O
A _ _ O
depends _ _ O
on _ _ O
the _ _ O
model _ _ O
of _ _ O
computation _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Complexity _ _ O
Relationships _ _ O
Among _ _ O
Models _ _ O
Theorem _ _ O
7.8 _ _ O
Let _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
be _ _ O
a _ _ O
function _ _ O
where _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
≥ _ _ O
n. _ _ O
Then _ _ O
every _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
time _ _ O
multitape _ _ O
Turing _ _ O
machine _ _ O
has _ _ O
an _ _ O
equivalent _ _ O
O _ _ O
( _ _ O
t2 _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
time _ _ O
single-tape _ _ O
Turing _ _ O
machine _ _ O
. _ _ O
Suppose _ _ O
we _ _ O
have _ _ O
a _ _ O
language _ _ O
A _ _ O
that _ _ O
can _ _ O
be _ _ O
decided _ _ O
by _ _ O
a _ _ O
multitape _ _ O
Turing _ _ O
machine _ _ O
M _ _ O
in _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
where _ _ O
n _ _ O
is _ _ O
the _ _ O
length _ _ O
of _ _ O
an _ _ O
input _ _ O
string _ _ O
The _ _ O
above _ _ O
theorem _ _ O
says _ _ O
that _ _ O
there _ _ O
exists _ _ O
a _ _ O
single-tape _ _ O
TM _ _ O
that _ _ O
can _ _ O
decide _ _ O
A _ _ O
in _ _ O
O _ _ O
( _ _ O
t2 _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
t2 _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
× _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
To _ _ O
prove _ _ O
the _ _ O
above _ _ O
theorem _ _ O
, _ _ O
we _ _ O
simply _ _ O
need _ _ O
to _ _ O
construct _ _ O
a _ _ O
single _ _ O
tape _ _ O
TM _ _ O
that _ _ O
decides _ _ O
A _ _ O
in _ _ O
O _ _ O
( _ _ O
t2 _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
But _ _ O
what _ _ O
is _ _ O
the _ _ O
language _ _ O
A _ _ O
? _ _ O
Since _ _ O
we _ _ O
do _ _ O
not _ _ O
know _ _ O
what _ _ O
the _ _ O
language _ _ O
, _ _ O
let _ _ O
’s _ _ O
try _ _ O
to _ _ O
simply _ _ O
simulate _ _ O
multitape _ _ O
TM _ _ O
using _ _ O
single-tape _ _ O
TM _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Complexity _ _ O
Relationships _ _ O
Among _ _ O
Models _ _ O
Recall _ _ O
that _ _ O
a _ _ O
multitape _ _ B-Concept
TM _ _ O
is _ _ O
a _ _ O
k-tape _ _ O
TM _ _ O
where _ _ O
its _ _ O
input _ _ O
appears _ _ O
on _ _ O
tape _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
a _ _ O
a _ _ O
a _ _ O
b _ _ O
a _ _ O
1 _ _ O
0 _ _ O
M _ _ O
We _ _ O
can _ _ O
simulate _ _ O
multitape _ _ O
TM _ _ O
using _ _ O
a _ _ O
single-tape _ _ O
TM _ _ O
as _ _ O
shown _ _ O
below _ _ O
: _ _ O
S _ _ O
# _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
# _ _ O
a _ _ O
a _ _ O
a _ _ O
# _ _ O
b _ _ O
a _ _ O
# _ _ O
If _ _ O
TM _ _ O
M _ _ O
halts _ _ O
in _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
, _ _ O
how _ _ O
many _ _ O
step _ _ O
does _ _ O
TM _ _ O
S _ _ O
needs _ _ O
in _ _ O
terms _ _ O
of _ _ O
O _ _ O
? _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Proof _ _ O
of _ _ O
Theorem _ _ O
7.8 _ _ O
Let _ _ O
M _ _ O
be _ _ O
a _ _ O
k-tape _ _ O
TM _ _ O
for _ _ O
some _ _ O
k _ _ O
≥ _ _ O
2 _ _ O
that _ _ O
runs _ _ O
in _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
on _ _ O
input _ _ O
string _ _ O
of _ _ O
length _ _ O
n _ _ O
We _ _ O
are _ _ O
going _ _ O
to _ _ O
construct _ _ O
a _ _ O
single-tape _ _ O
TM _ _ O
S _ _ O
that _ _ O
simulate _ _ O
multitape _ _ O
TM _ _ O
M _ _ O
The _ _ O
first _ _ O
step _ _ O
is _ _ O
for _ _ O
S _ _ O
to _ _ O
copy _ _ O
contents _ _ O
of _ _ O
all _ _ O
M _ _ O
’s _ _ O
k _ _ O
tapes _ _ O
into _ _ O
its _ _ O
tape _ _ O
Note _ _ O
that _ _ O
contents _ _ O
of _ _ O
all _ _ O
M _ _ O
’s _ _ O
k _ _ O
tapes _ _ O
are _ _ O
fixed _ _ O
except _ _ O
the _ _ O
first _ _ O
one _ _ O
( _ _ O
input _ _ O
tape _ _ O
) _ _ O
Suppose _ _ O
the _ _ O
length _ _ O
of _ _ O
strings _ _ O
on _ _ O
tape _ _ O
2 _ _ O
to _ _ O
tape _ _ O
k _ _ O
be _ _ O
a _ _ O
constant _ _ O
c _ _ O
and _ _ O
the _ _ O
length _ _ O
of _ _ O
input _ _ O
string _ _ O
is _ _ O
n _ _ O
It _ _ O
requires _ _ O
S _ _ O
to _ _ O
perform _ _ O
c _ _ O
+ _ _ O
n _ _ O
+ _ _ O
( _ _ O
k _ _ O
+ _ _ O
1 _ _ O
) _ _ O
steps _ _ O
to _ _ O
copy _ _ O
The _ _ O
k _ _ O
+ _ _ O
1 _ _ O
steps _ _ O
are _ _ O
from _ _ O
writing _ _ O
# _ _ O
symbols _ _ O
Since _ _ O
c _ _ O
and _ _ O
k _ _ O
are _ _ O
constant _ _ O
, _ _ O
this _ _ O
step _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
The _ _ O
next _ _ O
step _ _ O
is _ _ O
to _ _ O
simulate _ _ O
M _ _ O
’s _ _ O
steps _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Proof _ _ O
of _ _ O
Theorem _ _ O
7.8 _ _ O
For _ _ O
each _ _ O
step _ _ O
of _ _ O
M _ _ O
, _ _ O
first _ _ O
S _ _ O
needs _ _ O
to _ _ O
know _ _ O
symbols _ _ O
under _ _ O
M _ _ O
’s _ _ O
tape _ _ O
heads _ _ O
S _ _ O
needs _ _ O
to _ _ O
scan _ _ O
and _ _ O
remember _ _ O
all _ _ O
k-dot _ _ O
symbols _ _ O
Since _ _ O
M _ _ O
performs _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
, _ _ O
the _ _ O
maximum _ _ O
length _ _ O
of _ _ O
an _ _ O
active _ _ O
portion _ _ O
of _ _ O
each _ _ O
tape _ _ O
is _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
If _ _ O
the _ _ O
length _ _ O
of _ _ O
the _ _ O
content _ _ O
of _ _ O
a _ _ O
tape _ _ O
is _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
+ _ _ O
1 _ _ O
, _ _ O
it _ _ O
requires _ _ O
TM _ _ O
M _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
step _ _ O
to _ _ O
reach _ _ O
the _ _ O
last _ _ O
symbol _ _ O
By _ _ O
the _ _ O
time _ _ O
it _ _ O
gets _ _ O
to _ _ O
the _ _ O
last _ _ O
symbol _ _ O
, _ _ O
TM _ _ O
M _ _ O
halts _ _ O
S _ _ O
needs _ _ O
k _ _ O
× _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
to _ _ O
scan _ _ O
for _ _ O
all _ _ O
k-dot _ _ O
symbols _ _ O
Scanning _ _ O
for _ _ O
all _ _ O
dot _ _ O
symbols _ _ O
is _ _ O
O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Proof _ _ O
of _ _ O
Theorem _ _ O
7.8 _ _ O
Next _ _ O
S _ _ O
needs _ _ O
to _ _ O
update _ _ O
all _ _ O
k-dot _ _ O
symbol _ _ O
Sometime _ _ O
, _ _ O
M _ _ O
may _ _ O
move _ _ O
a _ _ O
tape _ _ O
head _ _ O
to _ _ O
the _ _ O
right _ _ O
over _ _ O
a _ _ O
blank _ _ O
symbol _ _ O
But _ _ O
for _ _ O
TM _ _ O
S _ _ O
, _ _ O
it _ _ O
will _ _ O
be _ _ O
on _ _ O
the _ _ O
# _ _ O
symbol _ _ O
In _ _ O
this _ _ O
case _ _ O
, _ _ O
S _ _ O
needs _ _ O
to _ _ O
shift _ _ O
a _ _ O
portion _ _ O
of _ _ O
its _ _ O
own _ _ O
tape _ _ O
one _ _ O
cell _ _ O
to _ _ O
the _ _ O
right _ _ O
If _ _ O
it _ _ O
is _ _ O
M _ _ O
’s _ _ O
first _ _ O
tape _ _ O
head _ _ O
, _ _ O
it _ _ O
requires _ _ O
to _ _ O
shift _ _ O
the _ _ O
content _ _ O
of _ _ O
k _ _ O
− _ _ O
1 _ _ O
tapes _ _ O
Require _ _ O
( _ _ O
k _ _ O
− _ _ O
1 _ _ O
) _ _ O
× _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
for _ _ O
S _ _ O
to _ _ O
shift _ _ O
where _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
is _ _ O
the _ _ O
maximum _ _ O
length _ _ O
of _ _ O
an _ _ O
active _ _ O
portion _ _ O
of _ _ O
each _ _ O
tape _ _ O
If _ _ O
it _ _ O
is _ _ O
M _ _ O
’s _ _ O
second _ _ O
tape _ _ O
head _ _ O
, _ _ O
it _ _ O
requires _ _ O
to _ _ O
shift _ _ O
the _ _ O
content _ _ O
of _ _ O
k _ _ O
− _ _ O
2 _ _ O
tapes _ _ O
Require _ _ O
( _ _ O
k _ _ O
− _ _ O
2 _ _ O
) _ _ O
× _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
for _ _ O
S _ _ O
to _ _ O
shift _ _ O
If _ _ O
all _ _ O
need _ _ O
to _ _ O
be _ _ O
shifted _ _ O
, _ _ O
it _ _ O
requires _ _ O
k _ _ O
( _ _ O
k−1 _ _ O
) _ _ O
× _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
2 _ _ O
This _ _ O
step _ _ O
is _ _ O
O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
since _ _ O
k _ _ O
( _ _ O
k−1 _ _ O
) _ _ O
is _ _ O
a _ _ O
constant _ _ O
2 _ _ O
To _ _ O
simulate _ _ O
one _ _ O
step _ _ O
of _ _ O
M _ _ O
, _ _ O
it _ _ O
is _ _ O
scan _ _ O
for _ _ O
dots _ _ O
+ _ _ O
update _ _ O
dots _ _ O
= _ _ O
O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
+ _ _ O
O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
= _ _ O
O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Proof _ _ O
of _ _ O
Theorem _ _ O
7.8 _ _ O
Note _ _ O
that _ _ O
M _ _ O
performs _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
Thus _ _ O
, _ _ O
for _ _ O
S _ _ O
to _ _ O
simulate _ _ O
M _ _ O
for _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
, _ _ O
it _ _ O
needs _ _ O
to _ _ O
perform _ _ O
at _ _ O
most _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
× _ _ O
O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
= _ _ O
O _ _ O
( _ _ O
t2 _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
Therefore _ _ O
, _ _ O
the _ _ O
total _ _ O
run-time _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
+ _ _ O
O _ _ O
( _ _ O
t2 _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
= _ _ O
O _ _ O
( _ _ O
t2 _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
where _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
to _ _ O
copying _ _ O
M _ _ O
’s _ _ O
tape _ _ O
contents _ _ O
, _ _ O
and _ _ O
O _ _ O
( _ _ O
t2 _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
steps _ _ O
to _ _ O
simulate _ _ O
M _ _ O
’s _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
If _ _ O
a _ _ O
multitape _ _ O
TM _ _ O
M _ _ O
decides _ _ O
a _ _ O
language _ _ O
A _ _ O
in _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
, _ _ O
we _ _ O
can _ _ O
simulate _ _ O
TM _ _ O
M _ _ O
using _ _ O
a _ _ O
single _ _ O
tape _ _ O
TM _ _ O
S _ _ O
which _ _ O
can _ _ O
decide _ _ O
A _ _ O
in _ _ O
O _ _ O
( _ _ O
t2 _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Nondeterministic _ _ O
Turing _ _ O
Machine _ _ O
Definition _ _ O
7.9 _ _ O
Let _ _ O
N _ _ O
be _ _ O
a _ _ O
nondeterministic _ _ O
Turing _ _ O
machine _ _ O
that _ _ O
is _ _ O
a _ _ O
decider _ _ O
. _ _ O
The _ _ O
running _ _ B-Concept
time _ _ I-Concept
of _ _ O
N _ _ O
is _ _ O
the _ _ O
function _ _ O
f _ _ O
: _ _ O
N _ _ O
→ _ _ O
N _ _ O
, _ _ O
where _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
is _ _ O
the _ _ O
maximum _ _ O
number _ _ O
of _ _ O
steps _ _ O
that _ _ O
N _ _ O
uses _ _ O
on _ _ O
any _ _ O
branch _ _ O
of _ _ O
its _ _ O
computation _ _ O
on _ _ O
any _ _ O
input _ _ O
of _ _ O
length _ _ O
n. _ _ O
Deterministic _ _ O
Nondeterministic _ _ O
reject _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
f _ _ O
( _ _ O
n _ _ O
) _ _ O
accept _ _ O
accept _ _ O
/ _ _ O
reject _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
reject _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Nondeterministic _ _ O
Turing _ _ O
Machine _ _ O
Theorem _ _ O
7.11 _ _ O
Let _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
be _ _ O
a _ _ O
function _ _ O
, _ _ O
where _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
≥ _ _ O
n. _ _ O
Then _ _ O
every _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
time _ _ O
nondeterministic _ _ O
single-tape _ _ O
Turing _ _ O
machine _ _ O
has _ _ O
an _ _ O
equivalent _ _ O
2O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
time _ _ O
deterministic _ _ O
single-tape _ _ O
Turing _ _ O
machine _ _ O
. _ _ O
Recall _ _ O
the _ _ O
nondeterministic _ _ O
Turing _ _ O
machine _ _ O
The _ _ O
computation _ _ O
is _ _ O
a _ _ O
tree _ _ O
The _ _ O
machine _ _ O
accepts _ _ O
as _ _ O
soon _ _ O
as _ _ O
one _ _ O
of _ _ O
its _ _ O
branch _ _ O
enter _ _ O
the _ _ O
accept _ _ O
state _ _ O
The _ _ O
machine _ _ O
rejects _ _ O
if _ _ O
all _ _ O
of _ _ O
its _ _ O
branch _ _ O
are _ _ O
in _ _ O
the _ _ O
reject _ _ O
state _ _ O
Since _ _ O
we _ _ O
have _ _ O
to _ _ O
consider _ _ O
the _ _ O
maximum _ _ O
number _ _ O
of _ _ O
steps _ _ O
on _ _ O
any _ _ O
branch _ _ O
, _ _ O
we _ _ O
have _ _ O
to _ _ O
consider _ _ O
the _ _ O
longest _ _ O
number _ _ O
of _ _ O
steps _ _ O
for _ _ O
the _ _ O
machine _ _ O
to _ _ O
accept _ _ O
or _ _ O
reject _ _ O
an _ _ O
input _ _ O
string _ _ O
of _ _ O
length _ _ O
n _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Computation _ _ O
Tree _ _ O
The _ _ O
following _ _ O
is _ _ O
an _ _ O
example _ _ O
of _ _ O
a _ _ O
computation _ _ O
tree _ _ O
of _ _ O
a _ _ O
nondeterministic _ _ O
Turing _ _ O
machine _ _ O
where _ _ O
at _ _ O
each _ _ O
state _ _ O
, _ _ O
it _ _ O
can _ _ O
split _ _ O
to _ _ O
at _ _ O
most _ _ O
two _ _ O
machines _ _ O
. _ _ O
This _ _ O
can _ _ O
be _ _ O
applied _ _ O
to _ _ O
NTM _ _ O
that _ _ O
splits _ _ O
to _ _ O
at _ _ O
most _ _ O
k _ _ O
copies _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Computation _ _ O
Tree _ _ O
We _ _ O
can _ _ O
not _ _ O
simulate _ _ O
one _ _ O
branch _ _ O
at _ _ O
a _ _ O
time _ _ O
The _ _ O
computation _ _ O
of _ _ O
each _ _ O
branch _ _ O
may _ _ O
not _ _ O
end _ _ O
( _ _ O
enter _ _ O
infinite _ _ O
loop _ _ O
) _ _ O
No _ _ O
chance _ _ O
to _ _ O
simulate _ _ O
the _ _ O
next _ _ O
branch _ _ O
But _ _ O
NTM _ _ O
may _ _ O
accept _ _ O
the _ _ O
input _ _ O
string _ _ O
because _ _ O
another _ _ O
branch _ _ O
enters _ _ O
the _ _ O
accept _ _ O
state _ _ O
We _ _ O
need _ _ O
to _ _ O
simulate _ _ O
like _ _ O
breadth _ _ O
first _ _ O
search _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
7 _ _ O
15 _ _ O
8 _ _ O
16 _ _ O
17 _ _ O
5 _ _ O
9 _ _ O
18 _ _ O
19 _ _ O
10 _ _ O
20 _ _ O
21 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
6 _ _ O
11 _ _ O
22 _ _ O
23 _ _ O
12 _ _ O
24 _ _ O
25 _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O
13 _ _ O
26 _ _ O
27 _ _ O
14 _ _ O
28 _ _ O
29 _ _ O
30 _ _ O

Computation _ _ O
Tree _ _ O
Recall _ _ O
that _ _ O
this _ _ O
NTM _ _ O
runs _ _ O
in _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
steps _ _ O
The _ _ O
height _ _ O
of _ _ O
its _ _ O
computational _ _ O
tree _ _ O
will _ _ O
be _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
The _ _ O
number _ _ O
of _ _ O
steps _ _ O
to _ _ O
reach _ _ O
is _ _ O
node _ _ O
is _ _ O
at _ _ O
most _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
The _ _ O
number _ _ O
of _ _ O
nodes _ _ O
in _ _ O
a _ _ O
full _ _ O
binary _ _ O
tree _ _ O
of _ _ O
height _ _ O
h _ _ O
is _ _ O
2h _ _ O
− _ _ O
1 _ _ O
Since _ _ O
the _ _ O
height _ _ O
of _ _ O
its _ _ O
computational _ _ O
tree _ _ O
is _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
, _ _ O
the _ _ O
number _ _ O
of _ _ O
nodes _ _ O
is _ _ O
2t _ _ O
( _ _ O
n _ _ O
) _ _ O
− _ _ O
1 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O

Computational _ _ O
Tree _ _ O
Thus _ _ O
, _ _ O
the _ _ O
total _ _ O
run-time _ _ O
is _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
× _ _ O
2t _ _ O
( _ _ O
n _ _ O
) _ _ O
= _ _ O
2O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
This _ _ O
is _ _ O
the _ _ O
run-time _ _ O
of _ _ O
multitape _ _ O
Turing _ _ O
machine _ _ O
For _ _ O
a _ _ O
single _ _ O
tape _ _ O
TM _ _ O
, _ _ O
the _ _ O
run-time _ _ O
is _ _ O
the _ _ O
square _ _ O
of _ _ O
multitape _ _ O
TM _ _ O
Thus _ _ O
, _ _ O
the _ _ O
run-time _ _ O
is _ _ O
( _ _ O
2O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
) _ _ O
2 _ _ O
= _ _ O
22O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
= _ _ O
2O _ _ O
( _ _ O
2t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
= _ _ O
2O _ _ O
( _ _ O
t _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Time _ _ O
Complexity _ _ O
01 _ _ O



