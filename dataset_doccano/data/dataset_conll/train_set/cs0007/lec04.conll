['train_set', 'labeled']|cs0007|lec04
-DOCSTART- -X- -X- O

CS _ _ O
0007 _ _ O
: _ _ O
Introduction _ _ O
to _ _ O
Java _ _ O
Lecture _ _ O
4 _ _ O
Nathan _ _ O
Ong _ _ O
University _ _ O
of _ _ O
Pittsburgh _ _ O
September _ _ O
12 _ _ O
, _ _ O
2016 _ _ O

boolean _ _ B-Concept
• _ _ O
Two _ _ O
values _ _ O
only _ _ O
: _ _ O
– _ _ O
true _ _ O
– _ _ O
false _ _ O
• _ _ O
We _ _ O
can _ _ O
also _ _ O
assign _ _ O
the _ _ O
variable _ _ O
an _ _ O
expression _ _ O
to _ _ O
be _ _ O
evaluated _ _ O
. _ _ O

boolean _ _ O
Operators _ _ O
& _ _ O
& _ _ O
|| _ _ O
! _ _ O
– _ _ O
Logical _ _ B-Concept
AND _ _ I-Concept
– _ _ O
Logical _ _ B-Concept
OR _ _ I-Concept
– _ _ O
Logical _ _ B-Concept
NOT _ _ I-Concept
boolean _ _ B-Concept
needUmb _ _ O
= _ _ O
rain _ _ O
|| _ _ O
cloud _ _ O
; _ _ O
Parentheses _ _ O
can _ _ O
be _ _ O
used _ _ O
as _ _ O
a _ _ O
way _ _ O
to _ _ O
group _ _ O

Truth _ _ B-Concept
Tables _ _ I-Concept
A _ _ O
B _ _ O
A _ _ O
& _ _ O
& _ _ O
B _ _ O
T _ _ O
T _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O
F _ _ O

Truth _ _ B-Concept
Tables _ _ I-Concept
A _ _ O
B _ _ O
A||B _ _ O
T _ _ O
T _ _ O
T _ _ O
T _ _ O
F _ _ O
T _ _ O
F _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O

Truth _ _ B-Concept
Tables _ _ I-Concept
A _ _ O
! _ _ O
A _ _ O
T _ _ O
F _ _ O
F _ _ O
T _ _ O

Order _ _ O
of _ _ O
Operators _ _ O
1 _ _ O
. _ _ O
2 _ _ O
. _ _ O
3 _ _ O
. _ _ O
! _ _ O
& _ _ O
& _ _ O
|| _ _ O
– _ _ O
Logical _ _ B-Concept
NOT _ _ I-Concept
– _ _ O
Logical _ _ B-Concept
AND _ _ I-Concept
– _ _ O
Logical _ _ B-Concept
OR _ _ I-Concept
boolean _ _ O
needUmb _ _ O
= _ _ O
rain _ _ O
|| _ _ O
! _ _ O
sun _ _ O
; _ _ O

Conditional _ _ B-Concept
Logic _ _ I-Concept
• _ _ O
“ _ _ O
If _ _ O
… _ _ O
then _ _ O
… _ _ O
” _ _ O
• _ _ O
Does _ _ O
not _ _ O
have _ _ O
an _ _ O
operator _ _ O
in _ _ O
Java _ _ O
A _ _ O
B _ _ O
AB _ _ O
T _ _ O
T _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
T _ _ O

Conditional _ _ B-Concept
Logic _ _ I-Concept
• _ _ O
We _ _ O
can _ _ O
use _ _ O
an _ _ O
equivalent _ _ O
statement _ _ O
to _ _ O
get _ _ O
the _ _ O
result _ _ O
we _ _ O
want _ _ O
. _ _ O
A _ _ O
B _ _ O
AB _ _ O
T _ _ O
T _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
T _ _ O

Conditional _ _ B-Concept
Logic _ _ I-Concept
• _ _ O
We _ _ O
can _ _ O
use _ _ O
an _ _ O
equivalent _ _ O
statement _ _ O
to _ _ O
get _ _ O
the _ _ O
result _ _ O
we _ _ O
want _ _ O
. _ _ O
A _ _ O
B _ _ O
AB _ _ O
T _ _ O
T _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
T _ _ O

Conditional _ _ B-Concept
Logic _ _ I-Concept
• _ _ O
We _ _ O
can _ _ O
use _ _ O
an _ _ O
equivalent _ _ O
statement _ _ O
to _ _ O
get _ _ O
the _ _ O
result _ _ O
we _ _ O
want _ _ O
. _ _ O
A _ _ O
B _ _ O
! _ _ O
A||B _ _ O
T _ _ O
T _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
T _ _ O

Order _ _ O
of _ _ O
Operators _ _ O
1 _ _ O
. _ _ O
2 _ _ O
. _ _ O
3 _ _ O
. _ _ O
4 _ _ O
. _ _ O
equality _ _ O
= _ _ O
= _ _ O
/ _ _ O
! _ _ O
= _ _ O
– _ _ O
Equality _ _ O
/ _ _ O
Non- _ _ O
! _ _ O
& _ _ O
& _ _ O
|| _ _ O
– _ _ O
Logical _ _ B-Concept
NOT _ _ I-Concept
– _ _ O
Logical _ _ B-Concept
AND _ _ I-Concept
– _ _ O
Logical _ _ B-Concept
OR _ _ I-Concept
boolean _ _ B-Concept
same _ _ O
= _ _ O
bool1 _ _ O
= _ _ O
= _ _ O
bool2 _ _ O
; _ _ O

Bad _ _ O
Coding _ _ O
Practice _ _ O
boolean _ _ B-Concept
isTrue _ _ O
= _ _ O
bool1 _ _ O
= _ _ O
= _ _ O
true _ _ O
; _ _ O

int _ _ B-Concept
• _ _ O
Integers _ _ O
• _ _ O
We _ _ O
can _ _ O
also _ _ O
assign _ _ O
the _ _ O
variable _ _ O
an _ _ O
expression _ _ O
to _ _ O
be _ _ O
evaluated _ _ O
. _ _ O

int _ _ B-Concept
Operators _ _ O
+ _ _ O
– _ _ O
Addition _ _ B-Concept
– _ _ O
– _ _ O
Subtraction _ _ B-Concept
* _ _ O
– _ _ O
Multiplication _ _ B-Concept
/ _ _ O
– _ _ O
( _ _ B-Concept
Integer _ _ I-Concept
) _ _ I-Concept
Division _ _ I-Concept
% _ _ O
– _ _ O
Modular _ _ B-Concept
Operation _ _ I-Concept
Follows _ _ O
normal _ _ O
rules _ _ O
of _ _ O
order _ _ O
of _ _ O
operation _ _ O
( _ _ O
PEMDAS _ _ O
) _ _ O

Integer _ _ B-Concept
Division _ _ I-Concept
Removes _ _ O
( _ _ O
truncates _ _ O
) _ _ O
the _ _ O
Mantissa _ _ O
( _ _ O
numbers _ _ O
after _ _ O
the _ _ O
decimal _ _ O
point _ _ O
) _ _ O
5 _ _ O
/ _ _ O
22 _ _ O
20 _ _ O
/ _ _ O
3 _ _ O
 _ _ O
6 _ _ O

Modular _ _ B-Concept
Arithmetic _ _ I-Concept
Remember _ _ O
back _ _ O
to _ _ O
grade _ _ O
school _ _ O
division _ _ O
: _ _ O
5 _ _ O
divided _ _ O
by _ _ O
2 _ _ O
equals _ _ O
2 _ _ O
remainder _ _ O
1 _ _ O
5%21 _ _ O
20 _ _ O
divided _ _ O
by _ _ O
3 _ _ O
equals _ _ O
6 _ _ O
remainder _ _ O
2 _ _ O
20 _ _ O
% _ _ O
3 _ _ O
 _ _ O
2 _ _ O

Integer _ _ B-Concept
Division _ _ I-Concept
+ _ _ O
Modular _ _ O
Arithmetic _ _ O
They _ _ O
fit _ _ O
nicely _ _ O
together _ _ O
: _ _ O
5 _ _ O
divided _ _ O
by _ _ O
2 _ _ O
equals _ _ O
2 _ _ O
remainder _ _ O
1 _ _ O
5 _ _ O
/ _ _ O
22 _ _ O
5%21 _ _ O
20 _ _ O
divided _ _ O
by _ _ O
3 _ _ O
equals _ _ O
6 _ _ O
remainder _ _ O
2 _ _ O
20 _ _ O
/ _ _ O
3 _ _ O
 _ _ O
6 _ _ O
20 _ _ O
% _ _ O
3 _ _ O
 _ _ O
2 _ _ O

More _ _ O
int _ _ B-Concept
Operators _ _ O
Special _ _ O
operators _ _ O
convert _ _ O
two _ _ O
ints _ _ B-Concept
into _ _ O
a _ _ O
boolean _ _ B-Concept
by _ _ O
comparing _ _ O
them _ _ O
= _ _ O
= _ _ O
– _ _ O
Equality _ _ B-Concept
! _ _ O
= _ _ O
– _ _ O
Non-Equality _ _ B-Concept
> _ _ O
– _ _ O
Greater _ _ B-Concept
than _ _ I-Concept
> _ _ O
= _ _ O
– _ _ O
Greater _ _ B-Concept
than _ _ I-Concept
or _ _ I-Concept
equal _ _ I-Concept
to _ _ I-Concept
< _ _ O
– _ _ O
Less _ _ B-Concept
than _ _ I-Concept
< _ _ O
= _ _ O
– _ _ O
Less _ _ B-Concept
than _ _ I-Concept
or _ _ I-Concept
equal _ _ I-Concept
to _ _ I-Concept
Evaluated _ _ O
AFTER _ _ O
PEMDAS _ _ O

More _ _ O
int _ _ B-Concept
Operators _ _ O
5 _ _ O
= _ _ O
= _ _ O
0 _ _ O
? _ _ O
6 _ _ O
> _ _ O
7 _ _ O
? _ _ O
4 _ _ O
< _ _ O
= _ _ O
4 _ _ O
? _ _ O
! _ _ O
( _ _ O
8 _ _ O
< _ _ O
3 _ _ O
) _ _ O
? _ _ O
( _ _ O
3 _ _ O
/ _ _ O
2 _ _ O
> _ _ O
9 _ _ O
% _ _ O
3 _ _ O
) _ _ O
& _ _ O
& _ _ O
( _ _ O
10 _ _ O
< _ _ O
= _ _ O
5*3 _ _ O
) _ _ O
? _ _ O

double _ _ B-Concept
• _ _ O
Decimal _ _ O
numbers _ _ O
• _ _ O
Can _ _ O
not _ _ O
trust _ _ O
this _ _ O
for _ _ O
calculations _ _ O
that _ _ O
require _ _ O
precision _ _ O
due _ _ O
to _ _ O
representation _ _ O
limits _ _ O
• _ _ O
All _ _ O
int _ _ B-Concept
operations _ _ O
can _ _ O
be _ _ O
applied _ _ O
to _ _ O
doubles _ _ B-Concept
, _ _ O
except _ _ O
modular _ _ B-Concept
arithmetic _ _ I-Concept
( _ _ O
% _ _ O
) _ _ O
• _ _ O
Division _ _ O
is _ _ O
regular _ _ O

Mixing _ _ O
Types _ _ O
with _ _ O
Division _ _ B-Concept
5 _ _ O
/ _ _ O
22 _ _ O
5.0 _ _ O
/ _ _ O
2.0 _ _ O
 _ _ O
2.5 _ _ O
5.0 _ _ O
/ _ _ O
2 _ _ O
 _ _ O
? _ _ O
5 _ _ O
/ _ _ O
2.0 _ _ O
 _ _ O
? _ _ O

char _ _ B-Concept
• _ _ O
Single _ _ O
characters _ _ O
• _ _ O
CANNOT _ _ O
use _ _ O
+ _ _ O
to _ _ O
combine _ _ O
two _ _ O
characters _ _ O
together _ _ O
. _ _ O
• _ _ O
Internally _ _ O
represented _ _ O
as _ _ O
a _ _ O
very _ _ O
small _ _ O
number _ _ O
in _ _ O
American _ _ O
Standard _ _ O
Code _ _ O
for _ _ O
Information _ _ O
Interchange _ _ O
( _ _ O
ASCII _ _ O
) _ _ O
representation _ _ O
. _ _ O

ASCII _ _ B-Concept
Table _ _ I-Concept

char _ _ B-Concept
Operators _ _ I-Concept
Special _ _ O
operators _ _ O
convert _ _ O
two _ _ O
chars _ _ O
into _ _ O
a _ _ O
boolean _ _ O
by _ _ O
comparing _ _ O
them _ _ O
= _ _ O
= _ _ O
– _ _ O
Equality _ _ B-Concept
> _ _ O
– _ _ O
Greater _ _ B-Concept
than _ _ I-Concept
* _ _ O
> _ _ O
= _ _ O
– _ _ O
Greater _ _ B-Concept
than _ _ I-Concept
or _ _ I-Concept
equal _ _ I-Concept
to _ _ I-Concept
* _ _ O
< _ _ O
– _ _ O
Less _ _ B-Concept
than _ _ I-Concept
* _ _ O
< _ _ O
= _ _ O
– _ _ O
Less _ _ B-Concept
than _ _ I-Concept
or _ _ I-Concept
equal _ _ I-Concept
to _ _ I-Concept
* _ _ O
* _ _ O
( _ _ O
based _ _ O
on _ _ O
ASCII _ _ O
value _ _ O
) _ _ O

Expression _ _ O
? _ _ O
• _ _ O
How _ _ O
do _ _ O
you _ _ O
express _ _ O
the _ _ O
sum _ _ O
of _ _ O
2 _ _ O
and _ _ O
3 _ _ O
? _ _ O
• _ _ O
No _ _ O
, _ _ O
not _ _ O
the _ _ O
answer _ _ O
, _ _ O
the _ _ O
expression _ _ O
• _ _ O
2+3 _ _ O
• _ _ O
Hmm _ _ O
, _ _ O
will _ _ O
int _ _ O
x _ _ O
= _ _ O
2 _ _ O
+ _ _ O
3 _ _ O
; _ _ O
work _ _ O
? _ _ O
• _ _ O
Let _ _ O
's _ _ O
test _ _ O
it _ _ O

How _ _ O
do _ _ O
you _ _ O
test _ _ O
that _ _ O
? _ _ O
• _ _ O
Write _ _ O
a _ _ O
valid _ _ O
program _ _ O
• _ _ O
You _ _ O
can _ _ O
do _ _ O
one _ _ O
of _ _ O
two _ _ O
things _ _ O
: _ _ O
– _ _ O
Print _ _ O
the _ _ O
expected _ _ O
value _ _ O
and _ _ O
the _ _ O
value _ _ O
you _ _ O
actually _ _ O
retrieved _ _ O
– _ _ O
Compare _ _ O
the _ _ O
two _ _ O
values _ _ O
and _ _ O
print _ _ O
the _ _ O
boolean _ _ B-Concept
value _ _ O
• _ _ O
Why _ _ O
would _ _ O
you _ _ O
choose _ _ O
one _ _ O
over _ _ O
the _ _ O
other _ _ O
? _ _ O
• _ _ O
Depends _ _ O
on _ _ O
what _ _ O
you _ _ O
want _ _ O
/ _ _ O
need _ _ O

Test _ _ O
1 _ _ O
public _ _ O
class _ _ O
Test _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
{ _ _ O
int _ _ B-Concept
x _ _ O
= _ _ O
2 _ _ O
+ _ _ O
3 _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
"Value _ _ O
expected _ _ O
: _ _ O
5 _ _ O
, _ _ O
Actual _ _ O
value _ _ O
: _ _ O
" _ _ O
+ _ _ O
x _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Test _ _ O
What _ _ O
is _ _ O
the _ _ O
expected _ _ O
output _ _ O
? _ _ O
args _ _ O
) _ _ O

They _ _ O
're _ _ O
the _ _ O
same _ _ O
, _ _ O
YAAAAAYYYYYY _ _ O
! _ _ O
! _ _ O
! _ _ O

Test _ _ O
2 _ _ O
public _ _ O
class _ _ O
Test _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
{ _ _ O
int _ _ O
x _ _ O
= _ _ O
2 _ _ O
+ _ _ O
3 _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
"x _ _ O
= _ _ O
= _ _ O
5 _ _ O
is _ _ O
" _ _ O
5 _ _ O
) _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Test _ _ O
What _ _ O
is _ _ O
the _ _ O
expected _ _ O
output _ _ O
? _ _ O
args _ _ O
) _ _ O
+ _ _ O
( _ _ O
x _ _ O
= _ _ O
= _ _ O

It _ _ O
's _ _ O
true _ _ O
, _ _ O
YAAAAAYYYYYY _ _ O
! _ _ O
! _ _ O
! _ _ O

Expressions _ _ O
• _ _ O
All _ _ O
primitives _ _ O
allow _ _ O
you _ _ O
to _ _ O
declare _ _ O
/ _ _ O
replace _ _ O
• _ _ O
boolean _ _ O
b _ _ O
= _ _ O
( _ _ O
x _ _ O
= _ _ O
= _ _ O
5 _ _ O
) _ _ O
; _ _ O
• _ _ O
b _ _ O
= _ _ O
( _ _ O
x _ _ O
= _ _ O
= _ _ O
6 _ _ O
) _ _ O
; _ _ O
• _ _ O
double _ _ O
d _ _ O
= _ _ O
2.0 _ _ O
/ _ _ O
3.5 _ _ O
; _ _ O

WARNING _ _ O
• _ _ O
The _ _ O
caret _ _ O
( _ _ O
^ _ _ O
) _ _ O
does _ _ O
NOT _ _ O
indicate _ _ O
exponentiation _ _ O
. _ _ O
• _ _ O
In _ _ O
other _ _ O
words _ _ O
, _ _ O
in _ _ O
Java _ _ O
, _ _ O
2^3 _ _ O
does _ _ O
not _ _ O
equal _ _ O
8 _ _ O
• _ _ O
There _ _ O
is _ _ O
another _ _ O
way _ _ O
to _ _ O
do _ _ O
exponentiation _ _ O
, _ _ O
but _ _ O
we _ _ O
'll _ _ O
come _ _ O
back _ _ O
to _ _ O
this _ _ O
. _ _ O

Questions _ _ O
? _ _ O



