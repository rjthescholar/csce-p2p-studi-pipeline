['train_set', 'labeled']|cs0447|lec05
-DOCSTART- -X- -X- O

# _ _ O
5 _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Arrays _ _ B-Concept
Original _ _ O
slides _ _ O
by _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
Modified _ _ O
with _ _ O
bits _ _ O
from _ _ O
: _ _ O
Bruce _ _ O
Childers _ _ O
, _ _ O
David _ _ O
Wilkinson _ _ O
Luís _ _ O
Oliveira _ _ O
Fall _ _ O
2020 _ _ O

Arrays _ _ B-Concept
and _ _ O
Addresses _ _ B-Concept
2 _ _ O

Strings _ _ O
, _ _ O
arrays _ _ O
, _ _ O
objects _ _ O
… _ _ O
● _ _ O
When _ _ O
we _ _ O
wanted _ _ O
to _ _ O
store _ _ O
4-byte _ _ O
values _ _ O
… _ _ O
o _ _ O
We _ _ O
split _ _ O
them _ _ O
up _ _ O
across _ _ O
consecutive _ _ O
bytes _ _ O
● _ _ O
What _ _ O
about _ _ O
a _ _ O
string _ _ O
? _ _ O
o _ _ O
How _ _ O
is _ _ O
a _ _ O
string _ _ O
represented _ _ O
? _ _ O
o _ _ O
How _ _ O
many _ _ O
bytes _ _ O
is _ _ O
a _ _ O
string _ _ O
? _ _ O
▪ _ _ O
Might _ _ O
be _ _ O
thousands _ _ O
or _ _ O
millions _ _ O
of _ _ O
characters _ _ O
● _ _ O
Any _ _ O
array _ _ O
might _ _ O
be _ _ O
that _ _ O
big _ _ O
too _ _ O
● _ _ O
The _ _ O
solution _ _ O
to _ _ O
storing _ _ O
it _ _ O
in _ _ O
memory _ _ O
is _ _ O
the _ _ O
same _ _ O
o _ _ O
but _ _ O
how _ _ O
do _ _ O
you _ _ O
access _ _ O
these _ _ O
big _ _ O
things _ _ O
▪ _ _ O
they _ _ O
do _ _ O
n't _ _ O
fit _ _ O
in _ _ O
registers _ _ O
! _ _ O
– _ _ O
ssssssssooooooooooooooooooooooooooo _ _ O
… _ _ O
Addr _ _ O
Val _ _ O
0 _ _ O
00 _ _ O
1 _ _ O
30 _ _ O
2 _ _ O
04 _ _ O
3 _ _ O
00 _ _ O
4 _ _ O
DE _ _ O
5 _ _ O
C0 _ _ O
6 _ _ O
EF _ _ O
7 _ _ O
BE _ _ O
8 _ _ O
6C _ _ O
9 _ _ O
34 _ _ O
A _ _ O
00 _ _ O
B _ _ O
01 _ _ O
C _ _ O
02 _ _ O
3 _ _ O

What _ _ O
's _ _ O
an _ _ O
array _ _ B-Concept
? _ _ O
● _ _ O
If _ _ O
we _ _ O
did _ _ O
this _ _ O
in _ _ O
C _ _ O
or _ _ O
Java _ _ O
: _ _ O
byte _ _ O
[ _ _ O
] _ _ O
arr _ _ O
= _ _ O
{ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
4 _ _ O
, _ _ O
5 _ _ O
, _ _ O
... _ _ O
} _ _ O
; _ _ O
● _ _ O
In _ _ O
memory _ _ O
it _ _ O
might _ _ O
look _ _ O
like _ _ O
this _ _ O
● _ _ O
What _ _ O
memory _ _ B-Concept
address _ _ I-Concept
is _ _ O
arr _ _ O
[ _ _ O
0 _ _ O
] _ _ O
at _ _ O
? _ _ O
o _ _ O
What _ _ O
about _ _ O
arr _ _ O
[ _ _ O
1 _ _ O
] _ _ O
? _ _ O
o _ _ O
What _ _ O
about _ _ O
arr _ _ O
[ _ _ O
2 _ _ O
] _ _ O
? _ _ O
o _ _ O
What _ _ O
about _ _ O
arr _ _ O
[ _ _ O
3 _ _ O
] _ _ O
? _ _ O
● _ _ O
If _ _ O
an _ _ O
array _ _ O
starts _ _ O
at _ _ O
memory _ _ O
address _ _ O
A _ _ O
… _ _ O
o _ _ O
… _ _ O
then _ _ O
item _ _ O
n _ _ O
is _ _ O
at _ _ O
address _ _ O
? _ _ O
oA+n _ _ O
▪ _ _ O
Not _ _ O
really _ _ O
▪ _ _ O
Remember _ _ O
what _ _ O
we _ _ O
talked _ _ O
about _ _ O
last _ _ O
class _ _ O
? _ _ O
Addr _ _ O
Val _ _ O
... _ _ O
... _ _ O
F405 _ _ O
06 _ _ O
F404 _ _ O
05 _ _ O
F403 _ _ O
04 _ _ O
F402 _ _ O
03 _ _ O
F401 _ _ O
02 _ _ O
F400 _ _ O
01 _ _ O
4 _ _ O

What _ _ O
if _ _ O
the _ _ O
array _ _ B-Concept
contains _ _ O
ints _ _ O
? _ _ O
● _ _ O
If _ _ O
we _ _ O
did _ _ O
this _ _ O
: _ _ O
int _ _ O
[ _ _ O
] _ _ O
arr _ _ O
= _ _ O
{ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
} _ _ O
; _ _ O
● _ _ O
In _ _ O
memory _ _ O
it _ _ O
'd _ _ O
look _ _ O
like _ _ O
this _ _ O
o _ _ O
Why _ _ O
are _ _ O
there _ _ O
all _ _ O
these _ _ O
0s _ _ O
? _ _ O
o _ _ O
What _ _ O
endianness _ _ O
is _ _ O
being _ _ O
used _ _ O
here _ _ O
? _ _ O
▪ _ _ O
Is _ _ O
the _ _ O
End-byte _ _ O
( _ _ O
LSB _ _ O
) _ _ O
in _ _ O
the _ _ O
Little _ _ O
or _ _ O
in _ _ O
the _ _ O
Big _ _ O
memory _ _ O
address _ _ O
? _ _ O
● _ _ O
What _ _ O
memory _ _ O
address _ _ O
is _ _ O
arr _ _ O
[ _ _ O
1 _ _ O
] _ _ O
at _ _ O
? _ _ O
arr _ _ O
[ _ _ O
2 _ _ O
] _ _ O
? _ _ O
● _ _ O
If _ _ O
an _ _ O
array _ _ O
starts _ _ O
at _ _ O
memory _ _ O
address _ _ O
A _ _ O
… _ _ O
o _ _ O
… _ _ O
and _ _ O
each _ _ O
item _ _ O
is _ _ O
b _ _ O
bytes _ _ O
long _ _ O
… _ _ O
o _ _ O
… _ _ O
then _ _ O
item _ _ O
n _ _ O
is _ _ O
at _ _ O
address _ _ O
A _ _ O
+ _ _ O
( _ _ O
n _ _ O
× _ _ O
b _ _ O
) _ _ O
▪ _ _ O
On _ _ O
the _ _ O
last _ _ O
slide _ _ O
, _ _ O
b _ _ O
happened _ _ O
to _ _ O
be _ _ O
1 _ _ O
– _ _ O
Tricky _ _ O
tricky _ _ O
Addr _ _ O
Val _ _ O
F40B _ _ O
00 _ _ O
F40A _ _ O
00 _ _ O
F409 _ _ O
00 _ _ O
F408 _ _ O
03 _ _ O
F407 _ _ O
00 _ _ O
F406 _ _ O
00 _ _ O
F405 _ _ O
00 _ _ O
F404 _ _ O
02 _ _ O
F403 _ _ O
00 _ _ O
F402 _ _ O
00 _ _ O
F401 _ _ O
00 _ _ O
F400 _ _ O
01 _ _ O
5 _ _ O

Accessing _ _ O
arrays _ _ B-Concept
● _ _ O
If _ _ O
you _ _ O
wanna _ _ O
print _ _ O
all _ _ O
the _ _ O
values _ _ O
in _ _ O
an _ _ O
array _ _ B-Concept
, _ _ O
how _ _ O
do _ _ O
? _ _ O
? _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
print _ _ O
( _ _ O
data _ _ O
[ _ _ O
i _ _ O
] _ _ O
) _ _ O
; _ _ O
● _ _ O
Let _ _ O
's _ _ O
focus _ _ O
on _ _ O
^this _ _ O
bit^ _ _ O
for _ _ O
now _ _ O
● _ _ O
Data _ _ O
is _ _ O
an _ _ O
array _ _ O
of _ _ O
words _ _ O
, _ _ O
so _ _ O
how _ _ O
big _ _ O
is _ _ O
each _ _ O
item _ _ O
? _ _ O
● _ _ O
In _ _ O
this _ _ O
calculation _ _ O
, _ _ O
what _ _ O
is _ _ O
A _ _ O
? _ _ O
b _ _ O
? _ _ O
n _ _ O
? _ _ O
● _ _ O
So _ _ O
what _ _ O
's _ _ O
the _ _ O
address _ _ B-Concept
calculation _ _ I-Concept
? _ _ O
o _ _ O
Address _ _ O
of _ _ O
item _ _ O
i _ _ O
= _ _ O
data _ _ O
+ _ _ O
( _ _ O
i _ _ O
* _ _ O
4 _ _ O
) _ _ O
▪ _ _ O
Do _ _ O
you _ _ O
think _ _ O
you _ _ O
could _ _ O
convert _ _ O
that _ _ O
into _ _ O
assembly _ _ O
? _ _ O
– _ _ O
Well _ _ O
we _ _ O
have _ _ O
n't _ _ O
done _ _ O
the _ _ O
loop _ _ O
yet _ _ O
… _ _ O
» _ _ O
But _ _ O
we _ _ O
'll _ _ O
get _ _ O
to _ _ O
that _ _ O
6 _ _ O

Accessing _ _ O
arrays _ _ B-Concept
in _ _ O
MIPS _ _ O
7 _ _ O

Making _ _ O
arrays _ _ B-Concept
in _ _ O
MIPS _ _ O
● _ _ O
First _ _ O
you _ _ O
need _ _ O
to _ _ O
make _ _ O
space _ _ O
for _ _ O
it _ _ O
just _ _ O
like _ _ O
a _ _ O
variable _ _ O
o _ _ O
How _ _ O
did _ _ O
we _ _ O
write _ _ O
that _ _ O
variable _ _ O
? _ _ O
x _ _ O
: _ _ O
.word _ _ O
4 _ _ O
# _ _ O
static _ _ O
int _ _ O
x=4 _ _ O
; _ _ O
● _ _ O
For _ _ O
a _ _ O
small _ _ O
array _ _ O
you _ _ O
can _ _ O
list _ _ O
all _ _ O
the _ _ O
values _ _ O
: _ _ O
little_array _ _ O
: _ _ O
.word _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
4 _ _ O
● _ _ O
But _ _ O
for _ _ O
a _ _ O
big _ _ O
array _ _ B-Concept
, _ _ O
that _ _ O
would _ _ O
be _ _ O
annoying _ _ O
● _ _ O
So _ _ O
you _ _ O
can _ _ O
write _ _ O
: _ _ O
big_array _ _ O
: _ _ O
.word _ _ O
0xBEEFC0DE _ _ O
: _ _ O
100 _ _ O
● _ _ O
This _ _ O
fills _ _ O
the _ _ O
array _ _ O
with _ _ O
100 _ _ O
copies _ _ O
of _ _ O
0xBEEFC0DE _ _ O
● _ _ O
Notice _ _ O
how _ _ O
similar _ _ O
these _ _ O
look _ _ O
to _ _ O
variables _ _ O
o _ _ O
( _ _ O
that _ _ O
's _ _ O
cause _ _ O
there _ _ O
's _ _ O
not _ _ O
really _ _ O
any _ _ O
difference _ _ O
) _ _ O
8 _ _ O

MIPS _ _ O
ISA _ _ O
: _ _ O
putting _ _ O
a _ _ O
variable _ _ O
's _ _ O
address _ _ O
in _ _ O
a _ _ O
register _ _ O
● _ _ O
If _ _ O
the _ _ O
address _ _ O
calculation _ _ O
needs _ _ O
the _ _ O
address _ _ O
of _ _ O
the _ _ O
array _ _ O
… _ _ O
o _ _ O
We _ _ O
've _ _ O
got _ _ O
ta _ _ O
get _ _ O
that _ _ O
address _ _ O
into _ _ O
a _ _ O
register _ _ O
right _ _ O
? _ _ O
▪ _ _ O
Ca _ _ O
n't _ _ O
add _ _ O
something _ _ O
unless _ _ O
it _ _ O
's _ _ O
in _ _ O
registers _ _ O
● _ _ O
Remember _ _ O
what _ _ O
the _ _ O
la _ _ O
instruction _ _ O
does _ _ O
? _ _ O
la _ _ B-Concept
t0 _ _ O
, _ _ O
little_array _ _ O
● _ _ O
la _ _ B-Concept
means _ _ O
load _ _ O
address _ _ O
o _ _ O
it _ _ O
does _ _ O
n't _ _ O
load _ _ O
anything _ _ O
from _ _ O
memory _ _ O
. _ _ O
o _ _ O
Only _ _ O
lw _ _ O
/ _ _ O
lh _ _ O
/ _ _ O
lhu _ _ O
/ _ _ O
lb _ _ O
/ _ _ O
lbu _ _ O
load _ _ O
from _ _ O
memory _ _ O
o _ _ O
All _ _ O
the _ _ O
other _ _ O
" _ _ O
loads _ _ O
" _ _ O
( _ _ O
li _ _ O
, _ _ O
la _ _ O
) _ _ O
just _ _ O
" _ _ O
put _ _ O
a _ _ O
value _ _ O
in _ _ O
a _ _ O
register _ _ O
" _ _ O
● _ _ O
What _ _ O
it _ _ O
does _ _ O
: _ _ O
t0 _ _ O
now _ _ O
contains _ _ O
little_array _ _ O
's _ _ O
address _ _ O
9 _ _ O

Accessing _ _ O
arrays _ _ B-Concept
in _ _ O
MIPS _ _ O
( _ _ O
let _ _ O
's _ _ O
do _ _ O
it _ _ O
together _ _ O
) _ _ O
● _ _ O
We _ _ O
want _ _ O
to _ _ O
print _ _ O
out _ _ O
the _ _ O
value _ _ O
in _ _ O
my_array _ _ O
[ _ _ O
3 _ _ O
] _ _ O
. _ _ O
my_array _ _ O
: _ _ O
.word _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
4 _ _ O
● _ _ O
What _ _ O
's _ _ O
the _ _ O
address _ _ B-Concept
calculation _ _ I-Concept
? _ _ O
● _ _ O
Now _ _ O
turn _ _ O
that _ _ O
into _ _ O
MIPS _ _ O
o _ _ O
Let _ _ O
's _ _ O
come _ _ O
up _ _ O
with _ _ O
the _ _ O
instructions _ _ O
first _ _ O
▪ _ _ O
And _ _ O
then _ _ O
decide _ _ O
which _ _ O
registers _ _ O
to _ _ O
use _ _ O
o _ _ O
How _ _ O
do _ _ O
we _ _ O
put _ _ O
the _ _ O
address _ _ O
of _ _ O
my_array _ _ O
in _ _ O
a _ _ O
register _ _ O
? _ _ O
o _ _ O
Now _ _ O
to _ _ O
translate _ _ O
the _ _ O
math _ _ O
o _ _ O
Now _ _ O
we _ _ O
have _ _ O
the _ _ O
address _ _ O
; _ _ O
how _ _ O
do _ _ O
we _ _ O
get _ _ O
the _ _ O
value _ _ O
? _ _ O
o _ _ O
How _ _ O
do _ _ O
we _ _ O
print _ _ O
it _ _ O
out _ _ O
? _ _ O
● _ _ O
If _ _ O
we _ _ O
want _ _ O
to _ _ O
store _ _ O
a _ _ O
value _ _ O
into _ _ O
the _ _ O
array _ _ O
… _ _ O
o _ _ O
We _ _ O
just _ _ O
use _ _ O
a _ _ O
store _ _ O
instruction _ _ O
instead _ _ O
of _ _ O
a _ _ O
load _ _ O
Check _ _ O
code _ _ O
example _ _ O
array_ex1.asm _ _ O
10 _ _ O

How _ _ O
does _ _ O
the _ _ O
CPU _ _ O
know _ _ O
that _ _ O
t0 _ _ O
holds _ _ O
an _ _ O
address _ _ O
? _ _ O
● _ _ O
WHAT _ _ O
DO _ _ O
YOU _ _ O
THINK _ _ O
o _ _ O
IT _ _ O
DOESN’T _ _ O
● _ _ O
Addresses _ _ O
are _ _ O
just _ _ O
numbers _ _ O
too _ _ O
! _ _ O
! _ _ O
o _ _ O
Which _ _ O
is _ _ O
good _ _ O
! _ _ O
It _ _ O
means _ _ O
we _ _ O
can _ _ O
do _ _ O
math _ _ O
on _ _ O
addresses _ _ O
▪ _ _ O
As _ _ O
we _ _ O
just _ _ O
did _ _ O
▪ _ _ O
That _ _ O
's _ _ O
how _ _ O
arrays _ _ O
and _ _ O
strings _ _ O
and _ _ O
stuff _ _ O
work _ _ O
● _ _ O
You _ _ O
can _ _ O
also _ _ O
have _ _ O
a _ _ O
variable _ _ O
whose _ _ O
value _ _ O
is _ _ O
an _ _ O
address _ _ O
o _ _ O
Hey _ _ O
▪ _ _ O
449 _ _ O
students _ _ O
– _ _ O
What _ _ O
are _ _ O
these _ _ O
called _ _ O
? _ _ O
» _ _ O
Pointers _ _ B-Concept
( _ _ O
& _ _ O
is _ _ O
like _ _ O
la _ _ O
, _ _ O
* _ _ O
is _ _ O
like _ _ O
lw _ _ O
/ _ _ O
sw _ _ O
) _ _ O
11 _ _ O

Watch _ _ O
out _ _ O
● _ _ O
Let _ _ O
's _ _ O
remove _ _ O
the _ _ O
mul _ _ O
instruction _ _ O
o _ _ O
" _ _ O
fetch _ _ O
address _ _ O
not _ _ O
aligned _ _ O
on _ _ O
word _ _ O
boundary _ _ O
" _ _ O
? _ _ O
● _ _ O
In _ _ O
MIPS _ _ O
, _ _ O
all _ _ O
memory _ _ O
accesses _ _ O
must _ _ O
be _ _ O
aligned _ _ O
● _ _ O
Alignment _ _ O
is _ _ O
just _ _ O
: _ _ O
o _ _ O
the _ _ O
address _ _ O
of _ _ O
a _ _ O
n-byte _ _ O
value _ _ O
must _ _ O
be _ _ O
a _ _ O
multiple _ _ O
of _ _ O
n _ _ O
o _ _ O
so _ _ O
for _ _ O
4-byte _ _ O
words _ _ O
… _ _ O
● _ _ O
that _ _ O
's _ _ O
it _ _ O
, _ _ O
that _ _ O
's _ _ O
all _ _ O
, _ _ O
there _ _ O
's _ _ O
nothing _ _ O
more _ _ O
to _ _ O
it _ _ O
o _ _ O
it _ _ O
's _ _ O
not _ _ O
scary _ _ O
Addr _ _ O
Val _ _ O
F40B _ _ O
00 _ _ O
F40A _ _ O
00 _ _ O
F409 _ _ O
00 _ _ O
F408 _ _ O
03 _ _ O
F407 _ _ O
00 _ _ O
F406 _ _ O
00 _ _ O
F405 _ _ O
00 _ _ O
F404 _ _ O
02 _ _ O
F403 _ _ O
00 _ _ O
F402 _ _ O
00 _ _ O
F401 _ _ O
00 _ _ O
F400 _ _ O
01 _ _ O
12 _ _ O

What _ _ O
about _ _ O
strings _ _ O
? _ _ O
● _ _ O
Strings _ _ O
are _ _ O
also _ _ O
arrays _ _ O
: _ _ O
string _ _ O
: _ _ O
.asciiz _ _ O
“ _ _ O
Test _ _ O
” _ _ O
o _ _ O
The _ _ O
z _ _ O
means _ _ O
it _ _ O
has _ _ O
a _ _ O
zero _ _ O
terminator _ _ O
o _ _ O
The _ _ O
same _ _ O
as _ _ O
: _ _ O
string _ _ O
: _ _ O
.byte _ _ O
84 _ _ O
, _ _ O
101 _ _ O
, _ _ O
115 _ _ O
, _ _ O
116 _ _ O
, _ _ O
0 _ _ O
● _ _ O
Be _ _ O
careful _ _ O
with _ _ O
: _ _ O
string _ _ O
: _ _ O
.ascii _ _ O
“ _ _ O
Test _ _ O
” _ _ O
o _ _ O
If _ _ O
you _ _ O
print _ _ O
an _ _ O
unterminated _ _ O
string _ _ O
, _ _ O
strange _ _ O
things _ _ O
happen _ _ O
! _ _ O
o _ _ O
The _ _ O
same _ _ O
as _ _ O
: _ _ O
string _ _ O
: _ _ O
.byte _ _ O
84 _ _ O
, _ _ O
101 _ _ O
, _ _ O
115 _ _ O
, _ _ O
116 _ _ O
Check _ _ O
code _ _ O
example _ _ O
arrays_ex3.asm _ _ O
13 _ _ O

Questions _ _ O
? _ _ O
● _ _ O
Is _ _ O
this _ _ O
a _ _ O
valid _ _ O
address _ _ O
for _ _ O
a _ _ O
word _ _ O
? _ _ O
0x0800 _ _ O
0001 _ _ O
● _ _ O
How _ _ O
about _ _ O
for _ _ O
a _ _ O
half-word _ _ O
? _ _ O
● _ _ O
How _ _ O
about _ _ O
for _ _ O
a _ _ O
byte _ _ O
? _ _ O
● _ _ O
How _ _ O
can _ _ O
I _ _ O
make _ _ O
an _ _ O
array _ _ O
of _ _ O
halfwords _ _ O
with _ _ O
25 _ _ O
elements _ _ O
set _ _ O
to _ _ O
0 _ _ O
? _ _ O
o _ _ O
The _ _ O
first _ _ O
halfword _ _ O
is _ _ O
in _ _ O
address _ _ O
0x0800 _ _ O
00F0 _ _ O
, _ _ O
where _ _ O
is _ _ O
the _ _ O
second _ _ O
? _ _ O
● _ _ O
How _ _ O
is _ _ O
a _ _ O
string _ _ O
terminated _ _ O
? _ _ O
14 _ _ O



