['train_set', 'labeled']|cs1567|lec09-10_blob_detection
-DOCSTART- -X- -X- O

Blob _ _ B-Concept
Detection _ _ I-Concept
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Blob _ _ B-Concept
A _ _ O
blob _ _ B-Concept
in _ _ O
computer _ _ O
vision _ _ O
is _ _ O
a _ _ O
region _ _ O
of _ _ O
image _ _ O
that _ _ O
some _ _ O
properties _ _ O
is _ _ O
constant _ _ O
or _ _ O
approximately _ _ O
constant _ _ O
Example _ _ O
of _ _ O
properties _ _ O
: _ _ O
Color _ _ O
Brightness _ _ O
A _ _ O
robot _ _ O
can _ _ O
detect _ _ O
an _ _ O
object _ _ O
with _ _ O
a _ _ O
solid _ _ O
color _ _ O
by _ _ O
simply _ _ O
find _ _ O
blobs _ _ B-Concept
of _ _ O
that _ _ O
color _ _ O
A _ _ O
blob _ _ B-Concept
usually _ _ O
defined _ _ O
as _ _ O
a _ _ O
rectangular _ _ O
region _ _ O
with _ _ O
information _ _ O
: _ _ O
Width _ _ O
and _ _ O
Height _ _ O
Number _ _ O
of _ _ O
pixels _ _ O
Coordinate _ _ O
of _ _ O
the _ _ O
center _ _ O
of _ _ O
the _ _ O
region _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

How _ _ O
to _ _ O
Detect _ _ O
a _ _ O
Blob _ _ B-Concept
? _ _ O
Consider _ _ O
the _ _ O
following _ _ O
image _ _ O
: _ _ O
How _ _ O
to _ _ O
detect _ _ O
a _ _ O
red _ _ O
ball _ _ O
in _ _ O
the _ _ O
above _ _ O
image _ _ O
? _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Filter _ _ O
Selected _ _ O
Color _ _ O
Image _ _ O
generally _ _ O
comes _ _ O
in _ _ O
RGB _ _ B-Concept
format _ _ O
Each _ _ O
pixel _ _ O
is _ _ O
represented _ _ O
by _ _ O
three _ _ O
values _ _ O
, _ _ O
red _ _ O
, _ _ O
green _ _ O
, _ _ O
and _ _ O
blue _ _ O
To _ _ O
filter _ _ O
out _ _ O
a _ _ O
specific _ _ O
color _ _ O
, _ _ O
we _ _ O
simply _ _ O
define _ _ O
ranges _ _ O
for _ _ O
each _ _ O
value _ _ O
Red _ _ O
between _ _ O
120 _ _ O
to _ _ O
130 _ _ O
, _ _ O
Green _ _ O
between _ _ O
78 _ _ O
to _ _ O
90 _ _ O
, _ _ O
and _ _ O
Blue _ _ O
between _ _ O
100 _ _ O
to _ _ O
110 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

How _ _ O
to _ _ O
Detect _ _ O
a _ _ O
Blob _ _ B-Concept
Filter _ _ O
out _ _ O
every _ _ O
color _ _ O
but _ _ O
red _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

How _ _ O
to _ _ O
Detect _ _ O
a _ _ O
Blob _ _ B-Concept
Detect _ _ O
connected _ _ O
regions _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Filter _ _ O
Selected _ _ O
Color _ _ O
Note _ _ O
that _ _ O
an _ _ O
object _ _ O
generally _ _ O
stays _ _ O
in _ _ O
a _ _ O
foreground _ _ O
where _ _ O
environment _ _ O
is _ _ O
in _ _ O
the _ _ O
background _ _ O
Foreground _ _ O
objects _ _ O
generally _ _ O
have _ _ O
more _ _ O
brightness _ _ O
In _ _ O
computer _ _ O
vision _ _ O
, _ _ O
we _ _ O
prefer _ _ O
YUV _ _ B-Concept
format _ _ O
: _ _ O
Y _ _ B-Concept
stands _ _ O
for _ _ O
the _ _ O
luminance _ _ B-Concept
component _ _ O
( _ _ O
the _ _ O
brightness _ _ O
) _ _ O
U _ _ B-Concept
and _ _ O
V _ _ B-Concept
are _ _ O
the _ _ O
chrominance _ _ B-Concept
( _ _ O
color _ _ O
) _ _ O
components _ _ O
Conversion _ _ O
between _ _ O
RGB _ _ B-Concept
and _ _ O
YUV _ _ B-Concept
is _ _ O
straightforward _ _ O
: _ _ O
ùëå _ _ O
= _ _ O
( _ _ O
0.299 _ _ O
√ó _ _ O
ùëÖ _ _ B-Concept
) _ _ O
+ _ _ O
( _ _ O
0.587 _ _ O
√ó _ _ O
ùê∫ _ _ B-Concept
) _ _ O
+ _ _ O
( _ _ O
0.114 _ _ O
√ó _ _ O
ùêµ _ _ B-Concept
) _ _ O
ùëà _ _ O
= _ _ O
( _ _ O
‚àí0.168736 _ _ O
√ó _ _ O
ùëÖ _ _ B-Concept
) _ _ O
+ _ _ O
( _ _ O
‚àí0.331264 _ _ O
√ó _ _ O
ùê∫ _ _ B-Concept
) _ _ O
+ _ _ O
( _ _ O
0.5 _ _ O
√ó _ _ O
ùêµ _ _ B-Concept
) _ _ O
ùëâ _ _ O
= _ _ O
( _ _ O
0.5 _ _ O
√ó _ _ O
ùëÖ _ _ B-Concept
) _ _ O
+ _ _ O
( _ _ O
‚àí0.418688 _ _ O
√ó _ _ O
ùê∫ _ _ B-Concept
) _ _ O
+ _ _ O
( _ _ O
‚àí0.081312 _ _ O
√ó _ _ O
ùêµ _ _ B-Concept
) _ _ O
where _ _ O
ùëÖ _ _ B-Concept
, _ _ O
ùê∫ _ _ B-Concept
, _ _ O
and _ _ O
ùêµ _ _ B-Concept
have _ _ O
values _ _ O
between _ _ O
0.0 _ _ O
and _ _ O
1.0 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ O
Detection _ _ O

Problems _ _ O
with _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept
If _ _ O
we _ _ O
have _ _ O
two _ _ O
objects _ _ O
with _ _ O
the _ _ O
same _ _ O
color _ _ O
, _ _ O
at _ _ O
least _ _ O
two _ _ O
blobs _ _ B-Concept
will _ _ O
be _ _ O
detected _ _ O
If _ _ O
we _ _ O
have _ _ O
only _ _ O
one _ _ O
object _ _ O
, _ _ O
more _ _ O
than _ _ O
one _ _ O
blobs _ _ B-Concept
may _ _ O
be _ _ O
detected _ _ O
Lighting _ _ O
effects _ _ O
color _ _ O
Filtered _ _ O
regions _ _ O
may _ _ O
not _ _ O
connect _ _ O
with _ _ O
each _ _ O
other _ _ O
Two _ _ O
or _ _ O
more _ _ O
blobs _ _ O
but _ _ O
on _ _ O
the _ _ O
same _ _ O
object _ _ O
If _ _ O
all _ _ O
blobs _ _ O
come _ _ O
from _ _ O
the _ _ O
same _ _ O
object _ _ O
, _ _ O
they _ _ O
will _ _ O
be _ _ O
close _ _ O
to _ _ O
each _ _ O
other _ _ O
Surrounding _ _ O
environment _ _ O
may _ _ O
have _ _ O
the _ _ O
same _ _ O
color _ _ O
Same _ _ O
object _ _ O
may _ _ O
not _ _ O
be _ _ O
detected _ _ O
if _ _ O
lighting _ _ O
change _ _ O
Increase _ _ O
the _ _ O
range _ _ O
of _ _ O
color _ _ O
may _ _ O
result _ _ O
in _ _ O
detecting _ _ O
environment _ _ O
instead _ _ O
of _ _ O
desire _ _ O
object _ _ O
Only _ _ O
works _ _ O
in _ _ O
restricted _ _ O
lighting _ _ O
and _ _ O
surrounding _ _ O
environment _ _ O
has _ _ O
small _ _ O
number _ _ O
of _ _ O
colors _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Applications _ _ O
Object _ _ O
Recognition _ _ O
and _ _ O
Tracking _ _ O
: _ _ O
Soccer _ _ O
: _ _ O
Ball _ _ O
and _ _ O
goal _ _ O
posts _ _ O
Navigation _ _ O
: _ _ O
Follows _ _ O
a _ _ O
line _ _ O
Object _ _ O
avoidance _ _ O
Robot _ _ O
Location _ _ O
/ _ _ O
Orientation _ _ O
: _ _ O
Two _ _ O
colors _ _ O
on _ _ O
top _ _ O
of _ _ O
robot _ _ O
Signs _ _ O
( _ _ O
multi-colors _ _ O
) _ _ O
represent _ _ O
locations _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Integrated _ _ O
Web _ _ O
Camera _ _ O
To _ _ O
detect _ _ O
blobs _ _ B-Concept
, _ _ O
we _ _ O
need _ _ O
an _ _ O
image _ _ O
or _ _ O
a _ _ O
series _ _ O
of _ _ O
images _ _ O
We _ _ O
will _ _ O
use _ _ O
integrated _ _ O
Web _ _ O
camera _ _ O
of _ _ O
your _ _ O
given _ _ O
laptop _ _ O
To _ _ O
access _ _ O
the _ _ O
web _ _ O
cam _ _ O
, _ _ O
we _ _ O
need _ _ O
another _ _ O
node _ _ O
called _ _ O
gscam _ _ B-Concept
gscam _ _ B-Concept
node _ _ O
communicate _ _ O
with _ _ O
integrated _ _ O
Web _ _ O
cam _ _ O
Capture _ _ O
video _ _ O
and _ _ O
turn _ _ O
them _ _ O
into _ _ O
series _ _ O
of _ _ O
images _ _ O
Each _ _ O
image _ _ O
will _ _ O
be _ _ O
published _ _ O
on _ _ O
the _ _ O
topic _ _ O
/v4l _ _ O
/ _ _ O
camera _ _ O
/ _ _ O
image_raw _ _ O
To _ _ O
start _ _ O
gscam _ _ B-Concept
node _ _ I-Concept
, _ _ O
use _ _ O
the _ _ O
following _ _ O
command _ _ O
: _ _ O
roslaunch _ _ O
gscam _ _ O
v4l.launch _ _ O
A _ _ O
series _ _ O
of _ _ O
images _ _ O
can _ _ O
be _ _ O
viewed _ _ O
using _ _ O
image_view _ _ B-Concept
node _ _ I-Concept
as _ _ O
follows _ _ O
: _ _ O
rosrun _ _ O
image_view _ _ O
image_view _ _ O
image _ _ O
: _ _ O
= _ _ O
/ _ _ O
v4l _ _ O
/ _ _ O
camera _ _ O
/ _ _ O
image_raw _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Image _ _ B-Concept
Message _ _ I-Concept
Images _ _ O
published _ _ O
by _ _ O
gscam _ _ B-Concept
node _ _ I-Concept
has _ _ O
type _ _ O
sensor_msg _ _ O
/ _ _ O
Image.msgs _ _ O
If _ _ O
you _ _ O
want _ _ O
to _ _ O
access _ _ O
images _ _ O
, _ _ O
add _ _ O
the _ _ O
following _ _ O
: _ _ O
from _ _ O
sensor_msg.msgs _ _ O
import _ _ O
Image _ _ O
The _ _ O
Image _ _ B-Concept
message _ _ I-Concept
consists _ _ O
of _ _ O
the _ _ O
following _ _ O
components _ _ O
: _ _ O
header _ _ B-Concept
: _ _ O
Information _ _ O
about _ _ O
message _ _ O
height _ _ B-Concept
: _ _ O
Image _ _ O
height _ _ O
( _ _ O
number _ _ O
of _ _ O
rows _ _ O
) _ _ O
width _ _ B-Concept
: _ _ O
Image _ _ O
width _ _ O
( _ _ O
number _ _ O
of _ _ O
columns _ _ O
) _ _ O
encoding _ _ B-Concept
: _ _ O
Type _ _ O
of _ _ O
encoding _ _ O
is_bigendian _ _ B-Concept
: _ _ O
Is _ _ O
this _ _ O
data _ _ O
bigendian _ _ O
step _ _ B-Concept
: _ _ O
How _ _ O
many _ _ O
bytes _ _ O
in _ _ O
a _ _ O
row _ _ O
data _ _ B-Concept
: _ _ O
A _ _ O
one-dimensional _ _ O
array _ _ O
of _ _ O
data _ _ O
. _ _ O
The _ _ O
number _ _ O
of _ _ O
elements _ _ O
is _ _ O
step _ _ O
* _ _ O
rows _ _ O
( _ _ O
[ _ _ O
B _ _ B-Concept
, _ _ O
G _ _ B-Concept
, _ _ O
R _ _ B-Concept
, _ _ O
B _ _ B-Concept
, _ _ O
G _ _ B-Concept
, _ _ O
R _ _ B-Concept
, _ _ O
... _ _ O
] _ _ O
) _ _ O
Lucky _ _ O
us _ _ O
, _ _ O
we _ _ O
do _ _ O
not _ _ O
have _ _ O
to _ _ O
process _ _ O
images _ _ O
directly _ _ O
. _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

View _ _ O
Image _ _ O
from _ _ O
Camera _ _ O
using _ _ O
OpenCV _ _ B-Concept
We _ _ O
can _ _ O
create _ _ O
our _ _ O
own _ _ O
image _ _ O
viewer _ _ O
from _ _ O
camera _ _ O
using _ _ O
OpenCV _ _ B-Concept
First _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
convert _ _ O
a _ _ O
color _ _ O
image _ _ O
message _ _ O
into _ _ O
OpenCV _ _ B-Concept
format _ _ I-Concept
Then _ _ O
, _ _ O
simply _ _ O
display _ _ O
the _ _ O
image _ _ O
Code _ _ O
Example _ _ O
: _ _ O
# _ _ O
! _ _ O
/usr _ _ O
/ _ _ O
bin _ _ O
/ _ _ O
env _ _ O
python _ _ O
import _ _ O
rospy _ _ O
import _ _ O
cv2 _ _ O
from _ _ O
sensor_msgs.msg _ _ O
import _ _ O
Image _ _ O
from _ _ O
cv_bridge _ _ O
import _ _ O
CvBridge _ _ O
, _ _ O
CvBridgeError _ _ O
colorImage _ _ O
= _ _ O
None _ _ O
isColorImageReady _ _ O
= _ _ O
False _ _ O
def _ _ O
updateColorImage _ _ O
( _ _ O
data _ _ O
) _ _ O
: _ _ O
global _ _ O
colorImage _ _ O
, _ _ O
isColorImageReady _ _ O
colorImage _ _ O
= _ _ O
data _ _ O
isColorImageReady _ _ O
= _ _ O
True _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ O
Detection _ _ O

View _ _ O
Image _ _ O
from _ _ O
Camera _ _ O
using _ _ O
OpenCV _ _ B-Concept
Code _ _ O
Example _ _ O
( _ _ O
continue _ _ O
) _ _ O
: _ _ O
def _ _ O
main _ _ O
( _ _ O
) _ _ O
: _ _ O
global _ _ O
colorImage _ _ O
, _ _ O
isColorImageReady _ _ O
rospy.init_node _ _ O
( _ _ O
' _ _ O
myimageview _ _ O
' _ _ O
, _ _ O
anonymous=True _ _ O
) _ _ O
rospy.Subscriber _ _ O
( _ _ O
' _ _ O
/ _ _ O
v4l _ _ O
/ _ _ O
camera _ _ O
/ _ _ O
image_raw _ _ O
' _ _ O
, _ _ O
Image _ _ O
, _ _ O
updateColorImage _ _ O
) _ _ O
bridge _ _ O
= _ _ O
CvBridge _ _ O
( _ _ O
) _ _ O
cv2.namedWindow _ _ O
( _ _ O
' _ _ O
Image _ _ O
from _ _ O
Camera _ _ O
' _ _ O
) _ _ O
while _ _ O
not _ _ O
rospy.is_shutdown _ _ O
( _ _ O
) _ _ O
and _ _ O
not _ _ O
isColorImageReady _ _ O
: _ _ O
pass _ _ O
while _ _ O
not _ _ O
rospy.is_shutdown _ _ O
( _ _ O
) _ _ O
: _ _ O
try _ _ O
: _ _ O
color_image _ _ O
= _ _ O
bridge.imgmsg_to_cv2 _ _ O
( _ _ O
colorImage _ _ O
, _ _ O
" _ _ O
bgr8 _ _ O
" _ _ O
) _ _ O
except _ _ O
CvBridgeError _ _ O
, _ _ O
e _ _ O
: _ _ O
print _ _ O
e _ _ O
cv2.imshow _ _ O
( _ _ O
' _ _ O
Image _ _ O
from _ _ O
Camera _ _ O
' _ _ O
, _ _ O
color_image _ _ O
) _ _ O
key _ _ O
= _ _ O
cv2.waitKey _ _ O
( _ _ O
1 _ _ O
) _ _ O
if _ _ O
key _ _ O
= _ _ O
= _ _ O
ord _ _ O
( _ _ O
' _ _ O
q _ _ O
' _ _ O
) _ _ O
: _ _ O
break _ _ O
cv2.destroyAllWindows _ _ O
( _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
main _ _ O
( _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

cmvision _ _ B-Concept
Node _ _ I-Concept
cmvision _ _ B-Concept
node _ _ I-Concept
detects _ _ O
blobs _ _ O
of _ _ O
colors _ _ O
from _ _ O
Image _ _ O
message _ _ O
Subscribes _ _ O
to _ _ O
a _ _ O
topic _ _ O
( _ _ O
of _ _ O
type _ _ O
Image _ _ O
) _ _ O
of _ _ O
your _ _ O
choice _ _ O
In _ _ O
our _ _ O
case _ _ O
, _ _ O
the _ _ O
topic _ _ O
will _ _ O
be _ _ O
: _ _ O
/v4l _ _ O
/ _ _ O
camera _ _ O
/ _ _ O
image_raw _ _ O
Obtains _ _ O
user _ _ O
defined _ _ O
color _ _ O
information _ _ O
about _ _ O
blobs _ _ O
to _ _ O
be _ _ O
detected _ _ O
Publishes _ _ O
information _ _ O
about _ _ O
detect _ _ O
blobs _ _ O
on _ _ O
the _ _ O
topic _ _ O
/blobs _ _ O
cmvision _ _ O
package _ _ O
also _ _ O
supplies _ _ O
a _ _ O
tool _ _ O
named _ _ O
colorgui _ _ O
Allows _ _ O
user _ _ O
to _ _ O
pick _ _ O
a _ _ O
range _ _ O
of _ _ O
colors _ _ O
of _ _ O
an _ _ O
object _ _ O
of _ _ O
interest _ _ O
Shows _ _ O
visual _ _ O
image _ _ O
of _ _ O
detect _ _ O
blobs _ _ O
associated _ _ O
with _ _ O
picked _ _ O
color _ _ O
Supplies _ _ O
color _ _ O
information _ _ O
and _ _ O
threshold _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ O
Detection _ _ O

colorgui _ _ B-Concept
Before _ _ O
running _ _ O
colorgui _ _ B-Concept
node _ _ I-Concept
, _ _ O
make _ _ O
sure _ _ O
your _ _ O
roscore _ _ B-Concept
and _ _ O
gscam _ _ O
is _ _ O
running _ _ O
To _ _ O
run _ _ O
colorgui _ _ O
, _ _ O
use _ _ O
the _ _ O
following _ _ O
command _ _ O
: _ _ O
rosrun _ _ O
cmvision _ _ O
colorgui _ _ O
image _ _ O
: _ _ O
= _ _ O
/ _ _ O
v4l _ _ O
/ _ _ O
camera _ _ O
/ _ _ O
image_raw _ _ O
Note _ _ O
that _ _ O
the _ _ O
data _ _ O
in _ _ O
topic _ _ O
/v4l _ _ O
/ _ _ O
camera _ _ O
/ _ _ O
image_raw _ _ O
is _ _ O
published _ _ O
by _ _ O
gscam _ _ O
node _ _ O
A _ _ O
windows _ _ O
will _ _ O
pop-up _ _ O
and _ _ O
shows _ _ O
the _ _ O
image _ _ O
from _ _ O
your _ _ O
camera _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ O
Detection _ _ O

colorgui _ _ B-Concept
After _ _ O
clicking _ _ O
on _ _ O
the _ _ O
object _ _ O
in _ _ O
the _ _ O
image _ _ O
couple _ _ O
times _ _ O
, _ _ O
you _ _ O
may _ _ O
see _ _ O
a _ _ O
set _ _ O
of _ _ O
rectangles _ _ O
Each _ _ O
rectangle _ _ O
represents _ _ O
a _ _ O
detected _ _ O
blob _ _ B-Concept
Move _ _ O
object _ _ O
around _ _ O
to _ _ O
see _ _ O
whether _ _ O
it _ _ O
can _ _ O
detect _ _ O
the _ _ O
object _ _ O
If _ _ O
it _ _ O
can _ _ O
not _ _ O
detect _ _ O
, _ _ O
click _ _ O
on _ _ O
the _ _ O
object _ _ O
couple _ _ O
more _ _ O
times _ _ O
to _ _ O
increase _ _ O
the _ _ O
range _ _ O
of _ _ O
detecting _ _ O
color _ _ O
Information _ _ O
at _ _ O
the _ _ O
bottom _ _ O
( _ _ O
YUV _ _ B-Concept
) _ _ O
will _ _ O
be _ _ O
use _ _ O
to _ _ O
set _ _ O
the _ _ O
color _ _ O
to _ _ O
be _ _ O
detected _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

colorgui _ _ B-Concept
Example _ _ O
First _ _ O
couple _ _ O
clicks _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

colorgui _ _ B-Concept
Example _ _ O
Couple _ _ O
more _ _ O
clicks _ _ O
around _ _ O
the _ _ O
desired _ _ O
object _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

colorgui _ _ B-Concept
Example _ _ O
Couple _ _ O
more _ _ O
and _ _ O
take _ _ O
note _ _ O
about _ _ O
RGB _ _ B-Concept
and _ _ O
YUV _ _ B-Concept
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

colors.txt _ _ B-Concept
For _ _ O
cmvision _ _ B-Concept
node _ _ I-Concept
, _ _ I-Concept
color _ _ O
information _ _ O
should _ _ O
be _ _ O
stored _ _ O
in _ _ O
a _ _ O
text _ _ O
file _ _ O
By _ _ O
default _ _ O
, _ _ O
the _ _ O
name _ _ O
of _ _ O
the _ _ O
text _ _ O
file _ _ O
is _ _ O
colors.txt _ _ B-Concept
A _ _ O
color _ _ O
file _ _ O
consists _ _ O
of _ _ O
two _ _ O
parts _ _ O
[ _ _ O
colors _ _ B-Concept
] _ _ O
and _ _ O
[ _ _ O
thresholds _ _ B-Concept
] _ _ O
as _ _ O
shown _ _ O
below _ _ O
: _ _ O
[ _ _ O
colors _ _ O
] _ _ O
( _ _ O
150 _ _ O
, _ _ O
166 _ _ O
, _ _ O
83 _ _ O
) _ _ O
0.000000 _ _ O
1 _ _ O
BrightGreen _ _ O
[ _ _ O
thresholds _ _ O
] _ _ O
( _ _ O
151 _ _ O
: _ _ O
163 _ _ O
, _ _ O
85 _ _ O
: _ _ O
91 _ _ O
, _ _ O
121 _ _ O
: _ _ O
126 _ _ O
) _ _ O
cmvision _ _ B-Concept
node _ _ I-Concept
can _ _ O
be _ _ O
used _ _ O
to _ _ O
detect _ _ O
more _ _ O
than _ _ O
one _ _ O
color _ _ O
by _ _ O
adding _ _ O
more _ _ O
lines _ _ O
for _ _ O
[ _ _ O
colors _ _ O
] _ _ O
and _ _ O
[ _ _ O
thresholds _ _ O
] _ _ O
[ _ _ O
colors _ _ O
] _ _ O
( _ _ O
150 _ _ O
, _ _ O
166 _ _ O
, _ _ O
83 _ _ O
) _ _ O
0.000000 _ _ O
1 _ _ O
BrightGreen _ _ O
( _ _ O
0 _ _ O
, _ _ O
255 _ _ O
, _ _ O
0 _ _ O
) _ _ O
0.000000 _ _ O
2 _ _ O
Green _ _ O
[ _ _ O
thresholds _ _ O
] _ _ O
( _ _ O
151 _ _ O
: _ _ O
163 _ _ O
, _ _ O
85 _ _ O
: _ _ O
91 _ _ O
, _ _ O
121 _ _ O
: _ _ O
126 _ _ O
) _ _ O
( _ _ O
47 _ _ O
: _ _ O
87 _ _ O
, _ _ O
148 _ _ O
: _ _ O
162 _ _ O
, _ _ O
93 _ _ O
: _ _ O
113 _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ O
Detection _ _ O

colors.txt _ _ O
Consider _ _ O
the _ _ O
following _ _ O
color _ _ O
file _ _ O
: _ _ O
[ _ _ O
colors _ _ O
] _ _ O
( _ _ O
150 _ _ O
, _ _ O
166 _ _ O
, _ _ O
83 _ _ O
) _ _ O
0.000000 _ _ O
1 _ _ O
BrightGreen _ _ O
( _ _ O
0 _ _ O
, _ _ O
255 _ _ O
, _ _ O
0 _ _ O
) _ _ O
0.000000 _ _ O
2 _ _ O
Green _ _ O
[ _ _ O
thresholds _ _ O
] _ _ O
( _ _ O
151 _ _ O
: _ _ O
163 _ _ O
, _ _ O
85 _ _ O
: _ _ O
91 _ _ O
, _ _ O
121 _ _ O
: _ _ O
126 _ _ O
) _ _ O
( _ _ O
47 _ _ O
: _ _ O
87 _ _ O
, _ _ O
148 _ _ O
: _ _ O
162 _ _ O
, _ _ O
93 _ _ O
: _ _ O
113 _ _ O
) _ _ O
Each _ _ O
line _ _ O
under _ _ O
[ _ _ O
colors _ _ B-Concept
] _ _ O
consists _ _ O
of _ _ O
the _ _ O
following _ _ O
: _ _ O
( _ _ B-Concept
R _ _ I-Concept
, _ _ I-Concept
G _ _ I-Concept
, _ _ I-Concept
B _ _ I-Concept
) _ _ I-Concept
: _ _ O
The _ _ O
red _ _ O
, _ _ O
green _ _ O
, _ _ O
and _ _ O
blue _ _ O
values _ _ O
of _ _ O
rectangles _ _ O
that _ _ O
are _ _ O
used _ _ O
to _ _ O
blob _ _ B-Concept
region _ _ O
0.000000 _ _ B-Concept
: _ _ O
Not _ _ O
being _ _ O
used _ _ O
any _ _ O
more _ _ O
( _ _ O
I _ _ O
guess _ _ O
) _ _ O
1 _ _ B-Concept
: _ _ O
Not _ _ O
being _ _ O
used _ _ O
any _ _ O
more _ _ O
( _ _ O
I _ _ O
guess _ _ O
) _ _ O
BrightGreen _ _ B-Concept
: _ _ O
The _ _ O
name _ _ O
of _ _ O
the _ _ O
blob _ _ O
which _ _ O
can _ _ O
be _ _ O
used _ _ O
to _ _ O
distinguish _ _ O
among _ _ O
multiple _ _ O
detected _ _ O
blobs _ _ B-Concept
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

colors.txt _ _ B-Concept
Consider _ _ O
the _ _ O
following _ _ O
color _ _ O
file _ _ O
: _ _ O
[ _ _ O
colors _ _ O
] _ _ O
( _ _ O
150 _ _ O
, _ _ O
166 _ _ O
, _ _ O
83 _ _ O
) _ _ O
0.000000 _ _ O
1 _ _ O
BrightGreen _ _ O
( _ _ O
0 _ _ O
, _ _ O
255 _ _ O
, _ _ O
0 _ _ O
) _ _ O
0.000000 _ _ O
2 _ _ O
Green _ _ O
[ _ _ O
thresholds _ _ O
] _ _ O
( _ _ O
151 _ _ O
: _ _ O
163 _ _ O
, _ _ O
85 _ _ O
: _ _ O
91 _ _ O
, _ _ O
121 _ _ O
: _ _ O
126 _ _ O
) _ _ O
( _ _ O
47 _ _ O
: _ _ O
87 _ _ O
, _ _ O
148 _ _ O
: _ _ O
162 _ _ O
, _ _ O
93 _ _ O
: _ _ O
113 _ _ O
) _ _ O
Each _ _ O
line _ _ O
under _ _ O
[ _ _ O
thresholds _ _ B-Concept
] _ _ O
consists _ _ O
of _ _ O
the _ _ O
following _ _ O
: _ _ O
( _ _ B-Concept
minY _ _ I-Concept
: _ _ I-Concept
maxY _ _ I-Concept
, _ _ I-Concept
minU _ _ I-Concept
: _ _ I-Concept
maxU _ _ I-Concept
, _ _ I-Concept
minV _ _ I-Concept
: _ _ I-Concept
maxV _ _ I-Concept
) _ _ I-Concept
: _ _ O
The _ _ O
YUV _ _ B-Concept
threshold _ _ O
from _ _ O
colorgui _ _ B-Concept
Note _ _ O
that _ _ O
the _ _ O
first _ _ O
line _ _ O
of _ _ O
colors _ _ B-Concept
is _ _ O
associated _ _ O
with _ _ O
the _ _ O
first _ _ O
line _ _ O
of _ _ O
thresholds _ _ B-Concept
, _ _ O
and _ _ O
so _ _ O
on _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

cmvision.launch _ _ B-Concept
Parameters _ _ O
of _ _ O
cmvision _ _ B-Concept
are _ _ O
needed _ _ O
to _ _ O
be _ _ O
set _ _ O
First _ _ O
, _ _ O
copy _ _ O
the _ _ O
default _ _ O
launch _ _ O
file _ _ O
: _ _ O
/home _ _ O
/ _ _ O
student _ _ O
/ _ _ O
cs1567 _ _ O
/ _ _ O
src _ _ O
/ _ _ O
cmvision _ _ O
/ _ _ O
cmvision.launch _ _ O
to _ _ O
your _ _ O
.. _ _ B-Concept
/mypackage _ _ I-Concept
directory _ _ I-Concept
In _ _ O
the _ _ O
copied _ _ O
file _ _ O
, _ _ O
change _ _ O
the _ _ O
followings _ _ O
: _ _ O
Under _ _ O
param _ _ B-Concept
name="cmvision _ _ I-Concept
/ _ _ I-Concept
color_file _ _ I-Concept
" _ _ O
, _ _ O
change _ _ O
its _ _ O
value _ _ O
to _ _ O
value=" _ _ O
/ _ _ O
home _ _ O
/ _ _ O
student _ _ O
/ _ _ O
cs1567 _ _ O
/ _ _ O
src _ _ O
/ _ _ O
mypackage _ _ O
/ _ _ O
colors.txt _ _ O
" _ _ O
If _ _ O
you _ _ O
put _ _ O
colors.txt _ _ B-Concept
in _ _ O
different _ _ O
directory _ _ O
, _ _ O
adjust _ _ O
it _ _ O
accordingly _ _ O
Under _ _ O
param _ _ B-Concept
name="cmvision _ _ I-Concept
/ _ _ I-Concept
debug_on _ _ I-Concept
" _ _ I-Concept
, _ _ O
change _ _ O
the _ _ O
value _ _ O
to _ _ O
value="true _ _ O
" _ _ O
if _ _ O
you _ _ O
want _ _ O
to _ _ O
see _ _ O
image _ _ O
and _ _ O
detect _ _ O
blobs _ _ B-Concept
while _ _ O
cmvision _ _ B-Concept
is _ _ O
running _ _ O
value="false _ _ O
" _ _ O
otherwise _ _ O
Under _ _ O
node _ _ B-Concept
name="cmvision _ _ I-Concept
" _ _ I-Concept
change _ _ O
the _ _ O
args _ _ O
to _ _ O
args="image _ _ O
: _ _ O
= _ _ O
/ _ _ O
v4l _ _ O
/ _ _ O
camera _ _ O
/ _ _ O
image_raw _ _ O
" _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ O
Detection _ _ O

cmvision.launch _ _ B-Concept
Your _ _ O
cmvision.launch _ _ B-Concept
should _ _ O
look _ _ O
like _ _ O
the _ _ O
following _ _ O
: _ _ O
< _ _ O
launch _ _ O
> _ _ O
< _ _ O
! _ _ O
-- _ _ O
Location _ _ O
of _ _ O
the _ _ O
cmvision _ _ O
color _ _ O
file _ _ O
-- _ _ O
> _ _ O
< _ _ O
param _ _ O
name="cmvision _ _ O
/ _ _ O
color_file _ _ O
" _ _ O
type="string _ _ O
" _ _ O
value=" _ _ O
/ _ _ O
home _ _ O
/ _ _ O
student _ _ O
/ _ _ O
cs1567 _ _ O
/ _ _ O
src _ _ O
/ _ _ O
mypackage _ _ O
/ _ _ O
colors.txt _ _ O
" _ _ O
/ _ _ O
> _ _ O
< _ _ O
! _ _ O
-- _ _ O
Turn _ _ O
debug _ _ O
output _ _ O
on _ _ O
or _ _ O
off _ _ O
-- _ _ O
> _ _ O
< _ _ O
param _ _ O
name="cmvision _ _ O
/ _ _ O
debug_on _ _ O
" _ _ O
type="bool _ _ O
" _ _ O
value="true" _ _ O
/ _ _ O
> _ _ O
< _ _ O
! _ _ O
-- _ _ O
Turn _ _ O
color _ _ O
calibration _ _ O
on _ _ O
or _ _ O
off _ _ O
-- _ _ O
> _ _ O
< _ _ O
param _ _ O
name="cmvision _ _ O
/ _ _ O
color_cal_on _ _ O
" _ _ O
type="bool _ _ O
" _ _ O
value="false" _ _ O
/ _ _ O
> _ _ O
< _ _ O
! _ _ O
-- _ _ O
Enable _ _ O
Mean _ _ O
shift _ _ O
filtering _ _ O
-- _ _ O
> _ _ O
< _ _ O
param _ _ O
name="cmvision _ _ O
/ _ _ O
mean_shift_on _ _ O
" _ _ O
type="bool _ _ O
" _ _ O
value="false" _ _ O
/ _ _ O
> _ _ O
< _ _ O
! _ _ O
-- _ _ O
Spatial _ _ O
bandwidth _ _ O
: _ _ O
Bigger _ _ O
= _ _ O
smoother _ _ O
image _ _ O
-- _ _ O
> _ _ O
< _ _ O
param _ _ O
name="cmvision _ _ O
/ _ _ O
spatial_radius_pix _ _ O
" _ _ O
type="double _ _ O
" _ _ O
value="2.0" _ _ O
/ _ _ O
> _ _ O
< _ _ O
! _ _ O
-- _ _ O
Color _ _ O
bandwidth _ _ O
: _ _ O
Bigger _ _ O
= _ _ O
smoother _ _ O
image-- _ _ O
> _ _ O
< _ _ O
param _ _ O
name="cmvision _ _ O
/ _ _ O
color_radius_pix _ _ O
" _ _ O
type="double _ _ O
" _ _ O
value="40.0" _ _ O
/ _ _ O
> _ _ O
< _ _ O
node _ _ O
name="cmvision _ _ O
" _ _ O
pkg="cmvision _ _ O
" _ _ O
type="cmvision _ _ O
" _ _ O
args="image _ _ O
: _ _ O
= _ _ O
/ _ _ O
v4l _ _ O
/ _ _ O
camera _ _ O
/ _ _ O
image_raw _ _ O
" _ _ O
output="screen _ _ O
" _ _ O
/ _ _ O
> _ _ O
< _ _ O
/launch _ _ O
> _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Blobs.msgs _ _ B-Concept
cmvision _ _ B-Concept
node _ _ I-Concept
publishes _ _ O
a _ _ O
message _ _ O
of _ _ O
type _ _ O
Blobs _ _ O
Again _ _ O
, _ _ O
import _ _ O
it _ _ O
first _ _ O
: _ _ O
from _ _ O
cmvision.msg _ _ O
import _ _ O
Blobs _ _ O
A _ _ O
message _ _ O
of _ _ O
type _ _ O
Blobs _ _ O
consists _ _ O
of _ _ O
various _ _ O
components _ _ O
: _ _ O
header _ _ O
: _ _ O
Message _ _ O
header _ _ O
image_width _ _ O
: _ _ O
The _ _ O
width _ _ O
of _ _ O
the _ _ O
image _ _ O
in _ _ O
pixels _ _ O
image_height _ _ O
: _ _ O
The _ _ O
height _ _ O
of _ _ O
the _ _ O
image _ _ O
in _ _ O
pixels _ _ O
blob_count _ _ O
: _ _ O
The _ _ O
number _ _ O
of _ _ O
detected _ _ O
blobs _ _ O
blobs _ _ O
: _ _ O
An _ _ O
array _ _ O
of _ _ O
data _ _ O
of _ _ O
type _ _ O
Blob _ _ O
Note _ _ O
: _ _ O
Blob _ _ O
( _ _ O
with _ _ O
out _ _ O
s _ _ O
) _ _ O
is _ _ O
another _ _ O
type _ _ O
of _ _ O
message _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ O
Detection _ _ O

Blob.msgs _ _ B-Concept
Blob.msgs _ _ B-Concept
stores _ _ O
information _ _ O
about _ _ O
each _ _ O
blob _ _ O
detected _ _ O
by _ _ O
cmvision _ _ B-Concept
node _ _ I-Concept
Must _ _ O
be _ _ O
explicitly _ _ O
imported _ _ O
: _ _ O
from _ _ O
cmvision.msg _ _ O
import _ _ O
Blobs _ _ O
, _ _ O
Blob _ _ O
A _ _ O
message _ _ O
of _ _ O
type _ _ O
Blob _ _ O
consists _ _ O
of _ _ O
various _ _ O
components _ _ O
: _ _ O
name _ _ O
: _ _ O
The _ _ O
name _ _ O
of _ _ O
color _ _ O
/ _ _ O
object _ _ O
specified _ _ O
in _ _ O
colors.txt _ _ O
( _ _ O
String _ _ O
) _ _ O
red _ _ O
: _ _ O
The _ _ O
value _ _ O
of _ _ O
red _ _ O
green _ _ O
: _ _ O
The _ _ O
value _ _ O
of _ _ O
green _ _ O
blue _ _ O
: _ _ O
The _ _ O
value _ _ O
of _ _ O
blue _ _ O
area _ _ O
: _ _ O
The _ _ O
area _ _ O
of _ _ O
the _ _ O
blob _ _ O
( _ _ O
number _ _ O
of _ _ O
pixels _ _ O
) _ _ O
x _ _ O
: _ _ O
The _ _ O
x _ _ O
coordinate _ _ O
of _ _ O
the _ _ O
center _ _ O
of _ _ O
the _ _ O
blob _ _ O
y _ _ O
: _ _ O
The _ _ O
y _ _ O
coordinate _ _ O
of _ _ O
the _ _ O
center _ _ O
of _ _ O
the _ _ O
blob _ _ O
left _ _ O
: _ _ O
The _ _ O
x _ _ O
coordinate _ _ O
of _ _ O
the _ _ O
left _ _ O
side _ _ O
of _ _ O
the _ _ O
region _ _ O
right _ _ O
: _ _ O
The _ _ O
x _ _ O
coordinate _ _ O
of _ _ O
the _ _ O
right _ _ O
side _ _ O
of _ _ O
the _ _ O
region _ _ O
top _ _ O
: _ _ O
The _ _ O
y _ _ O
coordinate _ _ O
of _ _ O
the _ _ O
top _ _ O
side _ _ O
of _ _ O
the _ _ O
region _ _ O
bottom _ _ O
: _ _ O
The _ _ O
y _ _ O
coordinate _ _ O
of _ _ O
the _ _ O
bottom _ _ O
side _ _ O
of _ _ O
the _ _ O
region _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ O
Detection _ _ O

Blob.msgs _ _ B-Concept
( _ _ O
0 _ _ O
, _ _ O
0 _ _ O
) _ _ O
left _ _ O
right _ _ O
top _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
bottom _ _ O
blob _ _ O
image _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Problem _ _ O
Solving _ _ O
Ideas _ _ O
How _ _ O
to _ _ O
filter _ _ O
out _ _ O
environment _ _ O
? _ _ O
How _ _ O
do _ _ O
we _ _ O
know _ _ O
that _ _ O
two _ _ O
or _ _ O
more _ _ O
blobs _ _ B-Concept
are _ _ O
on _ _ O
the _ _ O
same _ _ O
object _ _ O
? _ _ O
Fixed _ _ O
size _ _ O
objects _ _ O
Variable _ _ O
size _ _ O
objects _ _ O
If _ _ O
we _ _ O
know _ _ O
that _ _ O
these _ _ O
10 _ _ O
blobs _ _ B-Concept
are _ _ O
on _ _ O
the _ _ O
same _ _ O
object _ _ O
, _ _ O
how _ _ O
to _ _ O
find _ _ O
the _ _ O
center _ _ O
of _ _ O
the _ _ O
object _ _ O
? _ _ O
How _ _ O
do _ _ O
we _ _ O
know _ _ O
that _ _ O
there _ _ O
are _ _ O
two _ _ O
or _ _ O
more _ _ O
objects _ _ O
of _ _ O
the _ _ O
same _ _ O
color _ _ O
? _ _ O
How _ _ O
to _ _ O
filter _ _ O
out _ _ O
noise _ _ O
from _ _ O
camera _ _ O
? _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Visualize _ _ O
Blobs _ _ B-Concept
using _ _ O
OpenCV _ _ B-Concept
Sometimes _ _ O
we _ _ O
need _ _ O
to _ _ O
process _ _ O
blobs _ _ B-Concept
: _ _ O
Filter _ _ O
out _ _ O
blobs _ _ B-Concept
that _ _ O
are _ _ O
too _ _ O
smalls _ _ O
Filter _ _ O
out _ _ O
blobs _ _ B-Concept
that _ _ O
are _ _ O
outside _ _ O
of _ _ O
region _ _ O
of _ _ O
interest _ _ O
Merge _ _ O
multiple _ _ O
blobs _ _ B-Concept
in _ _ O
to _ _ O
one _ _ O
We _ _ O
may _ _ O
need _ _ O
to _ _ O
see _ _ O
a _ _ O
result _ _ O
in _ _ O
an _ _ O
image _ _ O
OpenCV _ _ B-Concept
provides _ _ O
libraries _ _ O
for _ _ O
Computer _ _ O
Vision _ _ O
: _ _ O
Show _ _ O
image _ _ O
/ _ _ O
video _ _ O
on _ _ O
screen _ _ O
Mouse _ _ O
and _ _ O
keyboard _ _ O
events _ _ O
Draw _ _ O
lines _ _ O
, _ _ O
rectangles _ _ O
, _ _ O
string _ _ O
on _ _ O
image _ _ O
Foreground _ _ O
/ _ _ O
background _ _ O
filtering _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Visualize _ _ O
Blobs _ _ B-Concept
using _ _ O
OpenCV _ _ B-Concept
# _ _ O
! _ _ O
/usr _ _ O
/ _ _ O
bin _ _ O
/ _ _ O
env _ _ O
python _ _ O
import _ _ O
roslib _ _ O
import _ _ O
rospy _ _ O
import _ _ O
cv2 _ _ O
import _ _ O
copy _ _ O
from _ _ O
sensor_msgs.msg _ _ O
import _ _ O
Image _ _ O
from _ _ O
cv_bridge _ _ O
import _ _ O
CvBridge _ _ O
, _ _ O
CvBridgeError _ _ O
from _ _ O
cmvision.msg _ _ O
import _ _ O
Blobs _ _ O
, _ _ O
Blob _ _ O
colorImage _ _ O
= _ _ O
Image _ _ O
( _ _ O
) _ _ O
isColorImageReady _ _ O
= _ _ O
False _ _ O
blobsInfo _ _ O
= _ _ O
Blobs _ _ O
( _ _ O
) _ _ O
isBlobsInfoReady _ _ O
= _ _ O
False _ _ O
def _ _ O
updateColorImage _ _ O
( _ _ O
data _ _ O
) _ _ O
: _ _ O
global _ _ O
colorImage _ _ O
, _ _ O
isColorImageReady _ _ O
colorImage _ _ O
= _ _ O
data _ _ O
isColorImageReady _ _ O
= _ _ O
True _ _ O
def _ _ O
updateBlobsInfo _ _ O
( _ _ O
data _ _ O
) _ _ O
: _ _ O
global _ _ O
blobsInfo _ _ O
, _ _ O
isBlobsInfoReady _ _ O
blobsInfo _ _ O
= _ _ O
data _ _ O
isBlobsInfoReady _ _ O
= _ _ O
True _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Visualize _ _ O
Blobs _ _ B-Concept
using _ _ O
OpenCV _ _ B-Concept
def _ _ O
main _ _ O
( _ _ O
) _ _ O
: _ _ O
global _ _ O
colorImage _ _ O
, _ _ O
isColorImageReady _ _ O
, _ _ O
blobsInfo _ _ O
, _ _ O
isBlobsInfoReady _ _ O
rospy.init_node _ _ O
( _ _ O
' _ _ O
showBlobs _ _ O
' _ _ O
, _ _ O
anonymous=True _ _ O
) _ _ O
rospy.Subscriber _ _ O
( _ _ O
" _ _ O
/ _ _ O
blobs _ _ O
" _ _ O
, _ _ O
Blobs _ _ O
, _ _ O
updateBlobsInfo _ _ O
) _ _ O
rospy.Subscriber _ _ O
( _ _ O
" _ _ O
/ _ _ O
v4l _ _ O
/ _ _ O
camera _ _ O
/ _ _ O
image_raw _ _ O
" _ _ O
, _ _ O
Image _ _ O
, _ _ O
updateColorImage _ _ O
) _ _ O
bridge _ _ O
= _ _ O
CvBridge _ _ O
( _ _ O
) _ _ O
cv2.namedWindow _ _ O
( _ _ O
"Blob _ _ O
Location _ _ O
" _ _ O
) _ _ O
while _ _ O
not _ _ O
rospy.is_shutdown _ _ O
( _ _ O
) _ _ O
and _ _ O
( _ _ O
not _ _ O
isBlobsInfoReady _ _ O
or _ _ O
not _ _ O
isColorImageReady _ _ O
) _ _ O
: _ _ O
pass _ _ O
while _ _ O
not _ _ O
rospy.is_shutdown _ _ O
( _ _ O
) _ _ O
: _ _ O
: _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Visualize _ _ O
Blobs _ _ B-Concept
using _ _ O
OpenCV _ _ B-Concept
def _ _ O
main _ _ O
( _ _ O
) _ _ O
: _ _ O
: _ _ O
while _ _ O
not _ _ O
rospy.is_shutdown _ _ O
( _ _ O
) _ _ O
: _ _ O
try _ _ O
: _ _ O
color_image _ _ O
= _ _ O
bridge.imgmsg_to_cv2 _ _ O
( _ _ O
colorImage _ _ O
, _ _ O
" _ _ O
bgr8 _ _ O
" _ _ O
) _ _ O
except _ _ O
CvBridgeError _ _ O
, _ _ O
e _ _ O
: _ _ O
print _ _ O
e _ _ O
print _ _ O
" _ _ O
colorImage _ _ O
" _ _ O
blobsCopy _ _ O
= _ _ O
copy.deepcopy _ _ O
( _ _ O
blobsInfo _ _ O
) _ _ O
for _ _ O
b _ _ O
in _ _ O
blobsCopy.blobs _ _ O
: _ _ O
cv2.rectangle _ _ O
( _ _ O
color_image _ _ O
, _ _ O
( _ _ O
b.left _ _ O
, _ _ O
b.top _ _ O
) _ _ O
, _ _ O
( _ _ O
b.right _ _ O
, _ _ O
b.bottom _ _ O
) _ _ O
, _ _ O
( _ _ O
0 _ _ O
, _ _ O
255 _ _ O
, _ _ O
0 _ _ O
) _ _ O
, _ _ O
2 _ _ O
) _ _ O
cv2.imshow _ _ O
( _ _ O
"Color _ _ O
Image _ _ O
" _ _ O
, _ _ O
color_image _ _ O
) _ _ O
key _ _ O
= _ _ O
cv2.waitKey _ _ O
( _ _ O
1 _ _ O
) _ _ O
if _ _ O
key _ _ O
= _ _ O
= _ _ O
ord _ _ O
( _ _ O
' _ _ O
q _ _ O
' _ _ O
) _ _ O
: _ _ O
break _ _ O
cv2.destroyAllWindows _ _ O
( _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
main _ _ O
( _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Blob _ _ B-Concept
Detection _ _ I-Concept
Algorithm _ _ O
Given _ _ O
an _ _ O
image _ _ O
, _ _ O
the _ _ O
following _ _ O
steps _ _ O
are _ _ O
generally _ _ O
used _ _ O
: _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
Blur _ _ O
the _ _ O
image _ _ O
to _ _ O
reduce _ _ O
noise _ _ O
Filter _ _ O
out _ _ O
all _ _ O
pixels _ _ O
that _ _ O
are _ _ O
out-of-range _ _ O
Find _ _ O
groups _ _ O
of _ _ O
pixels _ _ O
that _ _ O
are _ _ O
connected _ _ O
to _ _ O
each _ _ O
other _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Gaussian _ _ B-Concept
Blur _ _ I-Concept
One _ _ O
of _ _ O
the _ _ O
most _ _ O
popular _ _ O
blur _ _ O
algorithm _ _ O
is _ _ O
called _ _ O
Gaussian _ _ B-Concept
blur _ _ I-Concept
3x3 _ _ O
5x5 _ _ O
7x7 _ _ O
The _ _ O
new _ _ O
RGB _ _ B-Concept
values _ _ O
of _ _ O
the _ _ O
pixel _ _ O
at _ _ O
center _ _ O
is _ _ O
an _ _ O
weight _ _ O
average _ _ O
of _ _ O
RGB _ _ B-Concept
of _ _ O
pixels _ _ O
around _ _ O
it _ _ O
The _ _ O
weight _ _ O
of _ _ O
each _ _ O
pixel _ _ O
is _ _ O
based _ _ O
on _ _ O
the _ _ O
Gaussian _ _ O
normal _ _ O
distribution _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Filter _ _ O
Filter _ _ O
can _ _ O
be _ _ O
done _ _ O
based _ _ O
on _ _ O
RGB _ _ B-Concept
or _ _ O
YUV _ _ B-Concept
Recall _ _ O
that _ _ O
cmvision _ _ B-Concept
uses _ _ O
YUV _ _ B-Concept
Once _ _ O
a _ _ O
filter _ _ O
is _ _ O
applied _ _ O
, _ _ O
we _ _ O
should _ _ O
get _ _ O
a _ _ O
one _ _ O
bit _ _ O
image _ _ O
( _ _ O
black _ _ O
and _ _ O
white _ _ O
) _ _ O
We _ _ O
do _ _ O
not _ _ O
need _ _ O
information _ _ O
about _ _ O
color _ _ O
of _ _ O
each _ _ O
pixel _ _ O
anymore _ _ O
Only _ _ O
need _ _ O
to _ _ O
know _ _ O
which _ _ O
pixels _ _ O
are _ _ O
in _ _ O
a _ _ O
given _ _ O
range _ _ O
Example _ _ O
: _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
For _ _ O
simplicity _ _ O
, _ _ O
assume _ _ O
that _ _ O
a _ _ O
blob _ _ O
is _ _ O
a _ _ O
4-tuple _ _ O
( _ _ B-Concept
left _ _ I-Concept
, _ _ I-Concept
right _ _ I-Concept
, _ _ I-Concept
top _ _ I-Concept
, _ _ I-Concept
bottom _ _ I-Concept
) _ _ I-Concept
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

A _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept
Algorithm _ _ O
First _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
search _ _ O
for _ _ O
the _ _ O
first _ _ O
pixel _ _ O
that _ _ O
are _ _ O
non-zero _ _ O
Scan _ _ O
left _ _ O
to _ _ O
right _ _ O
and _ _ O
top _ _ O
to _ _ O
bottom _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
Once _ _ O
the _ _ O
first _ _ O
pixel _ _ O
is _ _ O
found _ _ O
: _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
Record _ _ O
this _ _ O
coordinate _ _ O
so _ _ O
that _ _ O
we _ _ O
can _ _ O
restart _ _ O
searching _ _ O
for _ _ O
the _ _ O
next _ _ O
blob _ _ B-Concept
Construct _ _ O
a _ _ O
new _ _ O
blob _ _ B-Concept
( _ _ O
data _ _ O
) _ _ O
Left _ _ O
and _ _ O
right _ _ O
are _ _ O
5 _ _ O
Top _ _ O
and _ _ O
bottom _ _ O
are _ _ O
1 _ _ O
Center _ _ O
, _ _ O
width _ _ O
, _ _ O
and _ _ O
height _ _ O
of _ _ O
the _ _ O
blob _ _ B-Concept
will _ _ O
be _ _ O
calculated _ _ O
later _ _ O
Now _ _ O
, _ _ O
our _ _ O
first _ _ O
blob _ _ B-Concept
is _ _ O
( _ _ O
5 _ _ O
, _ _ O
5 _ _ O
, _ _ O
1 _ _ O
, _ _ O
1 _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

A _ _ O
Blob _ _ B-Concept
Detection _ _ O
Algorithm _ _ O
Next _ _ O
, _ _ O
set _ _ O
the _ _ O
pixel _ _ O
to _ _ O
zero _ _ O
and _ _ O
scanning _ _ O
for _ _ O
non-zero _ _ O
neighbor _ _ O
If _ _ O
a _ _ O
non-zero _ _ O
neighbor _ _ O
is _ _ O
found _ _ O
: _ _ O
Adjust _ _ O
the _ _ O
blob _ _ B-Concept
accordingly _ _ O
Add _ _ O
coordinate _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
of _ _ O
the _ _ O
non-zero _ _ O
neighbor _ _ O
into _ _ O
a _ _ O
queue _ _ O
Change _ _ O
non-zero _ _ O
neighbors _ _ O
to _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
Currently _ _ O
Blob _ _ B-Concept
is _ _ O
( _ _ O
5 _ _ O
, _ _ O
6 _ _ O
, _ _ O
1 _ _ O
, _ _ O
2 _ _ O
) _ _ O
Queue _ _ O
is _ _ O
[ _ _ O
( _ _ O
6 _ _ O
, _ _ O
1 _ _ O
) _ _ O
, _ _ O
( _ _ O
5 _ _ O
, _ _ O
2 _ _ O
) _ _ O
, _ _ O
( _ _ O
6 _ _ O
, _ _ O
2 _ _ O
) _ _ O
] _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ O
Detection _ _ O
0 _ _ B-Concept
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O

A _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept
Algorithm _ _ O
Repeat _ _ O
until _ _ O
the _ _ O
queue _ _ O
is _ _ O
empty _ _ O
: _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
Dequeue _ _ O
the _ _ O
first _ _ O
coordinate _ _ O
Scan _ _ O
for _ _ O
its _ _ O
non-zero _ _ O
neighbor _ _ O
Add _ _ O
all _ _ O
coordinates _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
of _ _ O
the _ _ O
non-zero _ _ O
neighbor _ _ O
into _ _ O
a _ _ O
queue _ _ O
Change _ _ O
all _ _ O
non-zero _ _ O
neighbor _ _ O
to _ _ O
0 _ _ O
Go _ _ O
back _ _ O
to _ _ O
step _ _ O
1 _ _ O
Once _ _ O
the _ _ O
queue _ _ O
is _ _ O
empty _ _ O
, _ _ O
we _ _ O
get _ _ O
the _ _ O
first _ _ O
blob _ _ B-Concept
( _ _ O
5 _ _ O
, _ _ O
7 _ _ O
, _ _ O
1 _ _ O
, _ _ O
7 _ _ O
) _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O

Blob _ _ B-Concept
Detection _ _ I-Concept
using _ _ O
OpenCV _ _ B-Concept
First _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
blur _ _ O
an _ _ O
image _ _ O
using _ _ O
the _ _ O
GaussianBlur _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
function _ _ O
The _ _ O
following _ _ O
code _ _ O
blurs _ _ O
an _ _ O
image _ _ O
and _ _ O
display _ _ O
: _ _ O
import _ _ O
cv2 _ _ O
def _ _ O
main _ _ O
( _ _ O
) _ _ O
: _ _ O
color_image _ _ O
= _ _ O
cv2.imread _ _ O
( _ _ O
' _ _ O
start_img.jpg _ _ O
' _ _ O
, _ _ O
cv2.IMREAD_COLOR _ _ O
) _ _ O
blur_image _ _ O
= _ _ O
cv2.GaussianBlur _ _ O
( _ _ O
color_image _ _ O
, _ _ O
( _ _ O
5 _ _ O
, _ _ O
5 _ _ O
) _ _ O
, _ _ O
0 _ _ O
) _ _ O
cv2.imshow _ _ O
( _ _ O
' _ _ O
Image _ _ O
' _ _ O
, _ _ O
color_image _ _ O
) _ _ O
cv2.imshow _ _ O
( _ _ O
' _ _ O
Blur _ _ O
Image _ _ O
' _ _ O
, _ _ O
blur_image _ _ O
) _ _ O
while _ _ O
True _ _ O
: _ _ O
key _ _ O
= _ _ O
cv2.waitKey _ _ O
( _ _ O
0 _ _ O
) _ _ O
& _ _ O
0xFF _ _ O
if _ _ O
key _ _ O
= _ _ O
= _ _ O
ord _ _ O
( _ _ O
' _ _ O
q _ _ O
' _ _ O
) _ _ O
: _ _ O
break _ _ O
; _ _ O
cv2.destroyAllWindows _ _ O
( _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
main _ _ O
( _ _ O
) _ _ O
The _ _ O
parameter _ _ O
( _ _ O
5 _ _ O
, _ _ O
5 _ _ O
) _ _ O
specifies _ _ O
how _ _ O
many _ _ O
pixels _ _ O
to _ _ O
be _ _ O
used _ _ O
( _ _ O
must _ _ O
be _ _ O
odd _ _ O
numbers _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Convert _ _ O
RGB _ _ B-Concept
to _ _ O
YUV _ _ B-Concept
OpenCV _ _ B-Concept
supplies _ _ O
the _ _ O
cvtColor _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
function _ _ O
to _ _ O
convert _ _ O
one _ _ O
color _ _ O
spectrum _ _ O
to _ _ O
another _ _ O
import _ _ O
cv2 _ _ O
def _ _ O
main _ _ O
( _ _ O
) _ _ O
: _ _ O
color_image _ _ O
= _ _ O
cv2.imread _ _ O
( _ _ O
' _ _ O
.. _ _ O
/ _ _ O
start_img.jpg _ _ O
' _ _ O
, _ _ O
cv2.IMREAD_COLOR _ _ O
) _ _ O
blur_image _ _ O
= _ _ O
cv2.GaussianBlur _ _ O
( _ _ O
color_image _ _ O
, _ _ O
( _ _ O
5 _ _ O
, _ _ O
5 _ _ O
) _ _ O
, _ _ O
0 _ _ O
) _ _ O
yuv_image _ _ O
= _ _ O
cv2.cvtColor _ _ O
( _ _ O
blur_image _ _ O
, _ _ O
cv2.COLOR_BGR2YUV _ _ O
) _ _ O
y _ _ O
, _ _ O
u _ _ O
, _ _ O
v _ _ O
= _ _ O
cv2.split _ _ O
( _ _ O
yuv_image _ _ O
) _ _ O
cv2.imshow _ _ O
( _ _ O
' _ _ O
Image _ _ O
' _ _ O
, _ _ O
blur_image _ _ O
) _ _ O
cv2.imshow _ _ O
( _ _ O
' _ _ O
Y _ _ O
' _ _ O
, _ _ O
y _ _ O
) _ _ O
cv2.imshow _ _ O
( _ _ O
' _ _ O
U _ _ O
' _ _ O
, _ _ O
u _ _ O
) _ _ O
cv2.imshow _ _ O
( _ _ O
' _ _ O
V _ _ O
' _ _ O
, _ _ O
v _ _ O
) _ _ O
while _ _ O
True _ _ O
: _ _ O
key _ _ O
= _ _ O
cv2.waitKey _ _ O
( _ _ O
0 _ _ O
) _ _ O
& _ _ O
0xFF _ _ O
if _ _ O
key _ _ O
= _ _ O
= _ _ O
ord _ _ O
( _ _ O
' _ _ O
q _ _ O
' _ _ O
) _ _ O
: _ _ O
break _ _ O
; _ _ O
cv2.destroyAllWindows _ _ O
( _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
main _ _ O
( _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Filter _ _ O
Unwanted _ _ O
Pixels _ _ O
Unwanted _ _ O
pixels _ _ O
can _ _ O
be _ _ O
filtered _ _ O
out _ _ O
using _ _ O
the _ _ O
inRange _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
function _ _ O
: _ _ O
def _ _ O
main _ _ O
( _ _ O
) _ _ O
: _ _ O
color_image _ _ O
= _ _ O
cv2.imread _ _ O
( _ _ O
' _ _ O
.. _ _ O
/ _ _ O
start_img.jpg _ _ O
' _ _ O
, _ _ O
cv2.IMREAD_COLOR _ _ O
) _ _ O
blur_image _ _ O
= _ _ O
cv2.GaussianBlur _ _ O
( _ _ O
color_image _ _ O
, _ _ O
( _ _ O
5 _ _ O
, _ _ O
5 _ _ O
) _ _ O
, _ _ O
0 _ _ O
) _ _ O
cv2.namedWindow _ _ O
( _ _ O
' _ _ O
Mask _ _ O
' _ _ O
) _ _ O
mask_image _ _ O
= _ _ O
cv2.inRange _ _ O
( _ _ O
blur_image _ _ O
, _ _ O
lower_bound _ _ O
, _ _ O
upper_bound _ _ O
) _ _ O
; _ _ O
cv2.imshow _ _ O
( _ _ O
' _ _ O
Mask _ _ O
' _ _ O
, _ _ O
mask_image _ _ O
) _ _ O
cv2.waitkey _ _ O
( _ _ O
0 _ _ O
) _ _ O
; _ _ O
cv2.destroyAllWindows _ _ O
( _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
main _ _ O
( _ _ O
) _ _ O
The _ _ O
lower_bound _ _ B-Concept
and _ _ O
upper_bound _ _ B-Concept
are _ _ O
( _ _ B-Concept
B _ _ I-Concept
, _ _ I-Concept
G _ _ I-Concept
, _ _ I-Concept
R _ _ I-Concept
) _ _ I-Concept
in _ _ O
this _ _ O
case _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Filter _ _ O
Unwanted _ _ O
Pixels _ _ O
Masked _ _ B-Concept
Image _ _ I-Concept
: _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

SimpleBlobDetector _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
OpenCV _ _ B-Concept
supplies _ _ O
the _ _ O
SimpleBlobDetector _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
function _ _ O
which _ _ O
detects _ _ O
blobs _ _ O
based _ _ O
on _ _ O
a _ _ O
given _ _ O
parameter _ _ O
: _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

SimpleBlobDetector _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
Parameters _ _ O
First _ _ O
we _ _ O
need _ _ O
to _ _ O
set _ _ O
the _ _ O
parameter _ _ O
: _ _ O
params _ _ O
= _ _ O
cv2.SimpleBlobDetector_Params _ _ O
( _ _ O
) _ _ O
params.minThreshold _ _ O
= _ _ O
0 _ _ O
params.maxThreshold _ _ O
= _ _ O
255 _ _ O
params.filterByArea _ _ O
= _ _ O
True _ _ O
params.minArea _ _ O
= _ _ O
50 _ _ O
params.maxArea _ _ O
= _ _ O
256 _ _ O
* _ _ O
256 _ _ O
params.filterByCircularity _ _ O
= _ _ O
False _ _ O
params.minCircularity _ _ O
= _ _ O
0.1 _ _ O
params.filterByConvexity _ _ O
= _ _ O
False _ _ O
params.minConvexity _ _ O
= _ _ O
0.9 _ _ O
params.filterByInertia _ _ O
= _ _ O
False _ _ O
params.minInertiaRatio _ _ O
= _ _ O
0.5 _ _ O
ver _ _ O
= _ _ O
( _ _ O
cv2.__version__ _ _ O
) _ _ O
.split _ _ O
( _ _ O
' _ _ O
. _ _ O
' _ _ O
) _ _ O
if _ _ O
int _ _ O
( _ _ O
ver _ _ O
[ _ _ O
0 _ _ O
] _ _ O
) _ _ O
< _ _ O
3 _ _ O
: _ _ O
detector _ _ O
= _ _ O
cv2.SimpleBlobDetector _ _ O
( _ _ O
params _ _ O
) _ _ O
else _ _ O
: _ _ O
detector _ _ O
= _ _ O
cv2.SimpleBlobDetector_create _ _ O
( _ _ O
params _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

SimpleBlobDetector _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
Then _ _ O
we _ _ O
can _ _ O
use _ _ O
the _ _ O
detector _ _ B-Concept
object _ _ O
to _ _ O
detect _ _ O
blobs _ _ O
from _ _ O
masked _ _ B-Concept
image _ _ I-Concept
keypoints _ _ O
= _ _ O
detector.detect _ _ O
( _ _ O
255 _ _ O
- _ _ O
mask_image _ _ O
) _ _ O
kp_image _ _ O
= _ _ O
cv2.drawKeypoints _ _ O
( _ _ O
blur_image _ _ O
, _ _ O
keypoints _ _ O
, _ _ O
np.array _ _ O
( _ _ O
[ _ _ O
] _ _ O
) _ _ O
, _ _ O
( _ _ O
0 _ _ O
, _ _ O
255 _ _ O
, _ _ O
0 _ _ O
) _ _ O
, _ _ O
cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS _ _ O
) _ _ O
cv2.imshow _ _ O
( _ _ O
' _ _ O
Keypoints _ _ O
' _ _ O
, _ _ O
kp_image _ _ O
) _ _ O
To _ _ O
extract _ _ O
blobs _ _ B-Concept
information _ _ O
, _ _ O
simply _ _ O
look _ _ O
at _ _ O
the _ _ O
keypoints _ _ B-Concept
variable _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

SimpleBlobDetector _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
Result _ _ O
from _ _ O
the _ _ O
drawKeypoints _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
function _ _ O
to _ _ O
the _ _ O
original _ _ O
image _ _ O
: _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

SimpleBlobDetector _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
The _ _ O
SimpleBlobDetector _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
function _ _ O
is _ _ O
good _ _ O
for _ _ O
round _ _ O
object _ _ O
It _ _ O
may _ _ O
not _ _ O
perform _ _ O
well _ _ O
for _ _ O
our _ _ O
application _ _ O
( _ _ O
high _ _ O
CPU _ _ O
utilization _ _ O
) _ _ O
With _ _ O
a _ _ O
large _ _ O
blob _ _ B-Concept
, _ _ O
it _ _ O
only _ _ O
show _ _ O
a _ _ O
small _ _ O
keypoint _ _ O
Parameters _ _ O
are _ _ O
hard _ _ O
to _ _ O
understand _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

Blob _ _ B-Concept
Detection _ _ I-Concept
using _ _ O
Contour _ _ B-Concept
Another _ _ O
method _ _ O
is _ _ O
to _ _ O
detect _ _ O
contours _ _ O
of _ _ O
masked _ _ B-Concept
image _ _ I-Concept
A _ _ O
contour _ _ B-Concept
is _ _ O
a _ _ O
curve _ _ O
joining _ _ O
all _ _ O
the _ _ O
continuous _ _ O
points _ _ O
( _ _ O
along _ _ O
the _ _ O
boundary _ _ O
) _ _ O
, _ _ O
having _ _ O
same _ _ O
color _ _ O
or _ _ O
intensity _ _ B-Concept
The _ _ O
contours _ _ B-Concept
are _ _ O
a _ _ O
useful _ _ O
tool _ _ O
for _ _ O
shape _ _ O
analysis _ _ O
and _ _ O
object _ _ O
detection _ _ O
and _ _ O
recognition _ _ O
In _ _ O
OpenCV _ _ B-Concept
, _ _ O
the _ _ O
function _ _ O
findContours _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
is _ _ O
given _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

findContours _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
findContours _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
example _ _ O
: _ _ O
def _ _ O
main _ _ O
( _ _ O
) _ _ O
: _ _ O
color_image _ _ O
= _ _ O
cv2.imread _ _ O
( _ _ O
' _ _ O
.. _ _ O
/ _ _ O
start_img.jpg _ _ O
' _ _ O
, _ _ O
cv2.IMREAD_COLOR _ _ O
) _ _ O
blur_image _ _ O
= _ _ O
cv2.GaussianBlur _ _ O
( _ _ O
color_image _ _ O
, _ _ O
( _ _ O
5 _ _ O
, _ _ O
5 _ _ O
) _ _ O
, _ _ O
0 _ _ O
) _ _ O
cv2.namedWindow _ _ O
( _ _ O
' _ _ O
Contour _ _ O
Image _ _ O
' _ _ O
) _ _ O
( _ _ O
cnts _ _ O
, _ _ O
_ _ _ O
) _ _ O
= _ _ O
cv2.findContours _ _ O
( _ _ O
mask_image.copy _ _ O
( _ _ O
) _ _ O
, _ _ O
cv2.RETR_TREE _ _ O
, _ _ O
cv2.CHAIN_APPROX_SIMPLE _ _ O
) _ _ O
cv2.drawContours _ _ O
( _ _ O
blur_image _ _ O
, _ _ O
cnts _ _ O
, _ _ O
-1 _ _ O
, _ _ O
( _ _ O
0 _ _ O
, _ _ O
255 _ _ O
, _ _ O
0 _ _ O
) _ _ O
, _ _ O
3 _ _ O
) _ _ O
cv2.imshow _ _ O
( _ _ O
' _ _ O
Contour _ _ O
Image _ _ O
' _ _ O
, _ _ O
blur_image _ _ O
) _ _ O
cv2.waitKey _ _ O
( _ _ O
0 _ _ O
) _ _ O
; _ _ O
cv2.destroyAllWindows _ _ O
( _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
main _ _ O
( _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

drawContours _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
Use _ _ O
the _ _ O
drawContours _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
to _ _ O
draw _ _ O
all _ _ O
contours _ _ B-Concept
into _ _ O
the _ _ O
original _ _ O
image _ _ O
Note _ _ O
that _ _ O
there _ _ O
are _ _ O
contours _ _ B-Concept
inside _ _ O
other _ _ O
contours _ _ B-Concept
We _ _ O
need _ _ O
bounding _ _ O
box _ _ O
for _ _ O
each _ _ O
contour _ _ B-Concept
and _ _ O
eliminate _ _ O
contours _ _ B-Concept
that _ _ O
are _ _ O
inside _ _ O
another _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept

findContours _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
with _ _ O
hierarchy _ _ B-Concept
Filter _ _ O
out _ _ O
some _ _ O
contours _ _ O
def _ _ O
main _ _ O
( _ _ O
) _ _ O
: _ _ O
color_image _ _ O
= _ _ O
cv2.imread _ _ O
( _ _ O
' _ _ O
.. _ _ O
/ _ _ O
start_img.jpg _ _ O
' _ _ O
, _ _ O
cv2.IMREAD_COLOR _ _ O
) _ _ O
blur_image _ _ O
= _ _ O
cv2.GaussianBlur _ _ O
( _ _ O
color_image _ _ O
, _ _ O
( _ _ O
5 _ _ O
, _ _ O
5 _ _ O
) _ _ O
, _ _ O
0 _ _ O
) _ _ O
cv2.namedWindow _ _ O
( _ _ O
' _ _ O
Bounding _ _ O
' _ _ O
) _ _ O
( _ _ O
cnts _ _ O
, _ _ O
hierarchy _ _ O
) _ _ O
= _ _ O
cv2.findContours _ _ O
( _ _ O
mask_image.copy _ _ O
( _ _ O
) _ _ O
, _ _ O
cv2.RETR_TREE _ _ O
, _ _ O
cv2.CHAIN_APPROX_SIMPLE _ _ O
) _ _ O
for _ _ O
i _ _ O
in _ _ O
range _ _ O
( _ _ O
0 _ _ O
, _ _ O
len _ _ O
( _ _ O
cnts _ _ O
) _ _ O
) _ _ O
: _ _ O
c _ _ O
= _ _ O
cnts _ _ O
[ _ _ O
i _ _ O
] _ _ O
if _ _ O
cv2.contourArea _ _ O
( _ _ O
c _ _ O
) _ _ O
< _ _ O
100 _ _ O
: _ _ O
continue _ _ O
if _ _ O
not _ _ O
hierarchy _ _ O
[ _ _ O
0 _ _ O
] _ _ O
[ _ _ O
i _ _ O
] _ _ O
[ _ _ O
3 _ _ O
] _ _ O
= _ _ O
= _ _ O
-1 _ _ O
: _ _ O
continue _ _ O
x _ _ O
, _ _ O
y _ _ O
, _ _ O
w _ _ O
, _ _ O
h _ _ O
= _ _ O
cv2.boundingRect _ _ O
( _ _ O
c _ _ O
) _ _ O
cv2.rectangle _ _ O
( _ _ O
blur_image _ _ O
, _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
) _ _ O
, _ _ O
( _ _ O
x _ _ O
+ _ _ O
w _ _ O
, _ _ O
y _ _ O
+ _ _ O
h _ _ O
) _ _ O
, _ _ O
( _ _ O
0 _ _ O
, _ _ O
255 _ _ O
, _ _ O
0 _ _ O
) _ _ O
, _ _ O
3 _ _ O
) _ _ O
; _ _ O
cv2.imshow _ _ O
( _ _ O
' _ _ O
Bounding _ _ O
' _ _ O
, _ _ O
blur_image _ _ O
) _ _ O
cv2.waitKey _ _ O
( _ _ O
0 _ _ O
) _ _ O
; _ _ O
cv2.destroyAllWindows _ _ O
( _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
main _ _ O
( _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ O
Detection _ _ O

drawContours _ _ B-Concept
( _ _ I-Concept
) _ _ I-Concept
After _ _ O
filtering _ _ O
out _ _ O
small _ _ O
contours _ _ B-Concept
and _ _ O
those _ _ O
that _ _ O
are _ _ O
inside _ _ O
another _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Blob _ _ B-Concept
Detection _ _ I-Concept



