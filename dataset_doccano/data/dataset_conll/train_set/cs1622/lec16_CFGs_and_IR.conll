['train_set', 'labeled']|cs1622|lec16_CFGs_and_IR
-DOCSTART- -X- -X- O

Control _ _ B-Concept
Flow _ _ I-Concept
Graphs _ _ I-Concept
and _ _ O
IR _ _ B-Concept
CS _ _ O
1622 _ _ O
Jarrett _ _ O
Billingsley _ _ O

Class _ _ O
Announcements _ _ O
● _ _ O
today _ _ O
: _ _ O
a _ _ O
second _ _ O
definition _ _ O
for _ _ O
CFG _ _ B-Concept
in _ _ O
the _ _ O
same _ _ O
course _ _ O
o _ _ O
naming _ _ O
is _ _ O
hard _ _ O
, _ _ O
ok _ _ O
o _ _ O
at _ _ O
least _ _ O
IR _ _ B-Concept
is _ _ O
new _ _ O
; _ _ O
O _ _ O
2 _ _ O

We _ _ O
have _ _ O
a _ _ O
problem _ _ O
3 _ _ O

Our _ _ O
compiler _ _ B-Concept
is _ _ O
producing _ _ O
terrible _ _ O
code _ _ O
. _ _ O
Oh _ _ O
no _ _ O
! _ _ O
● _ _ O
this _ _ O
is _ _ O
what _ _ O
my _ _ O
code _ _ B-Concept
generator _ _ I-Concept
produces _ _ O
for _ _ O
this _ _ O
tiny _ _ O
function _ _ O
. _ _ O
fn _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
println_i _ _ O
( _ _ O
5 _ _ O
) _ _ O
; _ _ O
} _ _ O
main _ _ O
: _ _ O
sw _ _ O
fp _ _ O
, _ _ O
-4 _ _ O
( _ _ O
sp _ _ O
) _ _ O
sw _ _ O
ra _ _ O
, _ _ O
-8 _ _ O
( _ _ O
sp _ _ O
) _ _ O
move _ _ O
fp _ _ O
, _ _ O
sp _ _ O
addi _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
-12 _ _ O
sw _ _ O
s0 _ _ O
, _ _ O
-12 _ _ O
( _ _ O
fp _ _ O
) _ _ O
addi _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
-4 _ _ O
li _ _ O
s0 _ _ O
, _ _ O
5 _ _ O
sw _ _ O
s0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
sp _ _ O
) _ _ O
jal _ _ O
println_i _ _ O
lw _ _ O
s0 _ _ O
, _ _ O
-12 _ _ O
( _ _ O
fp _ _ O
) _ _ O
lw _ _ O
ra _ _ O
, _ _ O
-8 _ _ O
( _ _ O
fp _ _ O
) _ _ O
lw _ _ O
fp _ _ O
, _ _ O
-4 _ _ O
( _ _ O
fp _ _ O
) _ _ O
addi _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
12 _ _ O
jr _ _ O
ra _ _ O
it _ _ O
's _ _ O
a _ _ O
little _ _ O
excessive _ _ O
. _ _ O
a _ _ O
better _ _ O
compiler _ _ B-Concept
might _ _ O
produce _ _ O
this _ _ O
( _ _ O
using _ _ O
the _ _ O
real _ _ O
MIPS _ _ O
ABI _ _ B-Concept
) _ _ O
: _ _ O
main _ _ O
: _ _ O
addi _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
-4 _ _ O
sw _ _ O
ra _ _ O
, _ _ O
0 _ _ O
( _ _ O
sp _ _ O
) _ _ O
li _ _ O
a0 _ _ O
, _ _ O
5 _ _ O
jal _ _ O
println_i _ _ O
lw _ _ O
ra _ _ O
, _ _ O
0 _ _ O
( _ _ O
sp _ _ O
) _ _ O
addi _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
4 _ _ O
jr _ _ O
ra _ _ O
so _ _ O
… _ _ O
how _ _ O
do _ _ O
we _ _ O
get _ _ O
closer _ _ O
to _ _ O
that _ _ O
? _ _ O
4 _ _ O

Something _ _ O
is _ _ O
holding _ _ O
us _ _ O
back _ _ O
● _ _ O
there _ _ O
's _ _ O
a _ _ O
limit _ _ O
on _ _ O
the _ _ O
quality _ _ O
of _ _ O
code _ _ O
we _ _ O
can _ _ O
produce _ _ O
by _ _ O
going _ _ O
directly _ _ O
from _ _ O
the _ _ O
AST _ _ B-Concept
to _ _ O
machine _ _ B-Concept
/ _ _ I-Concept
assembly _ _ I-Concept
code _ _ I-Concept
. _ _ O
o _ _ O
we _ _ O
could _ _ O
tweak _ _ O
and _ _ O
bodge _ _ O
and _ _ O
kludge _ _ O
improvements _ _ O
on _ _ O
what _ _ O
we _ _ O
have _ _ O
, _ _ O
and _ _ O
we _ _ O
'll _ _ O
asymptotically _ _ O
approach _ _ O
" _ _ O
good _ _ O
code _ _ O
" _ _ O
without _ _ O
ever _ _ O
really _ _ O
getting _ _ O
there _ _ O
. _ _ O
● _ _ O
generating _ _ O
good _ _ O
code _ _ O
requires _ _ O
certain _ _ O
kinds _ _ O
of _ _ O
analyses _ _ O
to _ _ O
extract _ _ O
more _ _ O
information _ _ O
about _ _ O
the _ _ O
program _ _ O
being _ _ O
compiled _ _ O
. _ _ O
o _ _ O
control _ _ B-Concept
flow _ _ I-Concept
analysis _ _ I-Concept
determines _ _ O
the _ _ O
sequence _ _ O
in _ _ O
which _ _ O
pieces _ _ O
of _ _ O
code _ _ O
are _ _ O
run _ _ O
( _ _ O
i.e. _ _ O
" _ _ O
this _ _ O
runs _ _ O
before _ _ O
that _ _ O
; _ _ O
this _ _ O
may _ _ O
run _ _ O
before _ _ O
that _ _ O
" _ _ O
) _ _ O
. _ _ O
o _ _ O
data _ _ B-Concept
flow _ _ I-Concept
analysis _ _ I-Concept
determines _ _ O
how _ _ O
values _ _ O
are _ _ O
computed _ _ O
, _ _ O
copied _ _ O
, _ _ O
moved _ _ O
, _ _ O
reused _ _ O
, _ _ O
saved _ _ O
in _ _ O
variables _ _ O
, _ _ O
passed _ _ O
to _ _ O
functions _ _ O
, _ _ O
and _ _ O
so _ _ O
on _ _ O
. _ _ O
● _ _ O
unfortunately _ _ O
, _ _ O
the _ _ O
AST _ _ B-Concept
is _ _ O
not _ _ O
a _ _ O
good _ _ O
fit _ _ O
for _ _ O
doing _ _ O
these _ _ O
analyses _ _ O
. _ _ O
5 _ _ O

What _ _ O
's _ _ O
the _ _ O
S _ _ O
in _ _ O
AST _ _ B-Concept
stand _ _ O
for _ _ O
, _ _ O
again _ _ O
? _ _ O
● _ _ O
consider _ _ O
these _ _ O
pieces _ _ O
of _ _ O
code _ _ O
and _ _ O
their _ _ O
ASTs _ _ B-Concept
. _ _ O
let _ _ O
x _ _ O
= _ _ O
0 _ _ O
; _ _ O
if _ _ O
x _ _ O
< _ _ O
10 _ _ O
{ _ _ O
println_s _ _ O
( _ _ O
"hi _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
println_s _ _ O
( _ _ O
"done _ _ O
. _ _ O
" _ _ O
) _ _ O
; _ _ O
Let _ _ O
Id _ _ O
( _ _ O
x _ _ O
) _ _ O
IntLit _ _ O
( _ _ O
0 _ _ O
) _ _ O
< _ _ O
{ _ _ O
} _ _ O
If _ _ O
Call _ _ O
Call _ _ O
Id _ _ O
( _ _ O
x _ _ O
) _ _ O
IntLit _ _ O
( _ _ O
10 _ _ O
) _ _ O
do _ _ O
these _ _ O
two _ _ O
pieces _ _ O
of _ _ O
code _ _ O
behave _ _ O
similarly _ _ O
? _ _ O
not _ _ O
at _ _ O
all _ _ O
. _ _ O
is _ _ O
it _ _ O
easy _ _ O
to _ _ O
tell _ _ O
that _ _ O
by _ _ O
looking _ _ O
at _ _ O
the _ _ O
AST _ _ B-Concept
? _ _ O
Id _ _ O
( _ _ O
println_s _ _ O
) _ _ O
[ _ _ O
StrLit _ _ O
( _ _ O
"hi _ _ O
" _ _ O
) _ _ O
] _ _ O
Id _ _ O
( _ _ O
println_s _ _ O
) _ _ O
[ _ _ O
StrLit _ _ O
( _ _ O
"done _ _ O
. _ _ O
" _ _ O
) _ _ O
] _ _ O
not _ _ O
really _ _ O
… _ _ O
{ _ _ O
} _ _ O
let _ _ O
x _ _ O
= _ _ O
0 _ _ O
; _ _ O
while _ _ O
x _ _ O
< _ _ O
10 _ _ O
{ _ _ O
println_s _ _ O
( _ _ O
"hi _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
println_s _ _ O
( _ _ O
"done _ _ O
. _ _ O
" _ _ O
) _ _ O
; _ _ O
Let _ _ O
Id _ _ O
( _ _ O
x _ _ O
) _ _ O
IntLit _ _ O
( _ _ O
0 _ _ O
) _ _ O
< _ _ O
While _ _ O
Call _ _ O
Call _ _ O
Id _ _ O
( _ _ O
x _ _ O
) _ _ O
IntLit _ _ O
( _ _ O
10 _ _ O
) _ _ O
Id _ _ O
( _ _ O
println_s _ _ O
) _ _ O
[ _ _ O
StrLit _ _ O
( _ _ O
"hi _ _ O
" _ _ O
) _ _ O
] _ _ O
Id _ _ O
( _ _ O
println_s _ _ O
) _ _ O
[ _ _ O
StrLit _ _ O
( _ _ O
"done _ _ O
. _ _ O
" _ _ O
) _ _ O
] _ _ O
6 _ _ O

Sufficiently _ _ O
Smart _ _ O
Compilers _ _ B-Concept
● _ _ O
there _ _ O
's _ _ O
a _ _ O
( _ _ O
possible _ _ O
) _ _ O
mistake _ _ O
in _ _ O
this _ _ O
code _ _ O
that _ _ O
we _ _ O
humans _ _ O
can _ _ O
see _ _ O
easily _ _ O
. _ _ O
let _ _ O
x _ _ O
= _ _ O
0 _ _ O
; _ _ O
while _ _ O
x _ _ O
< _ _ O
10 _ _ O
{ _ _ O
println_s _ _ O
( _ _ O
"hi _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
println_s _ _ O
( _ _ O
"done _ _ O
. _ _ O
" _ _ O
) _ _ O
; _ _ O
this _ _ O
loop _ _ O
never _ _ O
terminates _ _ O
, _ _ O
does _ _ O
it _ _ O
? _ _ O
think _ _ O
about _ _ O
how _ _ O
you _ _ O
determined _ _ O
that _ _ O
. _ _ O
1 _ _ O
. _ _ O
x _ _ O
is _ _ O
assigned _ _ O
a _ _ O
constant _ _ O
0 _ _ O
. _ _ O
2 _ _ O
. _ _ O
x _ _ O
is _ _ O
never _ _ O
assigned _ _ O
anywhere _ _ O
else _ _ O
, _ _ O
not _ _ O
even _ _ O
in _ _ O
the _ _ O
loop _ _ O
. _ _ O
3 _ _ O
. _ _ O
so _ _ O
, _ _ O
x _ _ O
can _ _ O
only _ _ O
be _ _ O
0 _ _ O
in _ _ O
the _ _ O
loop _ _ O
condition _ _ O
… _ _ O
4 _ _ O
. _ _ O
and _ _ O
0 _ _ O
< _ _ O
10 _ _ O
, _ _ O
meaning _ _ O
the _ _ O
condition _ _ O
is _ _ O
tautologically _ _ O
true _ _ O
. _ _ O
just _ _ O
looking _ _ O
at _ _ O
the _ _ O
AST _ _ B-Concept
, _ _ O
how _ _ O
would _ _ O
you _ _ O
prove _ _ O
these _ _ O
things _ _ O
? _ _ O
what _ _ O
if _ _ O
the _ _ O
control _ _ B-Concept
flow _ _ I-Concept
were _ _ O
a _ _ O
lot _ _ O
more _ _ O
complex _ _ O
? _ _ O
7 _ _ O

Program _ _ O
execution _ _ O
is _ _ O
not _ _ O
a _ _ O
tree _ _ O
. _ _ O
● _ _ O
the _ _ O
AST _ _ B-Concept
models _ _ O
what _ _ O
the _ _ O
programmer _ _ O
typed _ _ O
. _ _ O
there _ _ O
's _ _ O
another _ _ O
way _ _ O
of _ _ O
representing _ _ O
programs _ _ O
that _ _ O
models _ _ O
how _ _ O
the _ _ O
program _ _ O
executes _ _ O
. _ _ O
let _ _ O
x _ _ O
= _ _ O
0 _ _ O
; _ _ O
if _ _ O
x _ _ O
< _ _ O
10 _ _ O
{ _ _ O
println_s _ _ O
( _ _ O
"hi _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
println_s _ _ O
( _ _ O
"done _ _ O
. _ _ O
" _ _ O
) _ _ O
; _ _ O
x _ _ O
= _ _ O
0 _ _ O
x _ _ O
< _ _ O
10 _ _ O
? _ _ O
p _ _ O
( _ _ O
"done _ _ O
. _ _ O
" _ _ O
) _ _ O
flowcharts _ _ B-Concept
make _ _ O
it _ _ O
immediately _ _ O
obvious _ _ O
that _ _ O
the _ _ O
structure _ _ B-Concept
of _ _ O
these _ _ O
two _ _ O
programs _ _ O
is _ _ O
different _ _ O
. _ _ O
p _ _ O
( _ _ O
"hi _ _ O
! _ _ O
" _ _ O
) _ _ O
let _ _ O
x _ _ O
= _ _ O
0 _ _ O
; _ _ O
while _ _ O
x _ _ O
< _ _ O
10 _ _ O
{ _ _ O
println_s _ _ O
( _ _ O
"hi _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
println_s _ _ O
( _ _ O
"done _ _ O
. _ _ O
" _ _ O
) _ _ O
; _ _ O
x _ _ O
= _ _ O
0 _ _ O
x _ _ O
< _ _ O
10 _ _ O
? _ _ O
p _ _ O
( _ _ O
"hi _ _ O
! _ _ O
" _ _ O
) _ _ O
p _ _ O
( _ _ O
"done _ _ O
. _ _ O
" _ _ O
) _ _ O
8 _ _ O

Sufficiently _ _ O
Simple _ _ O
Algorithms _ _ O
● _ _ O
a _ _ O
flowchart _ _ B-Concept
makes _ _ O
it _ _ O
easier _ _ O
to _ _ O
detect _ _ O
the _ _ O
problem _ _ O
here _ _ O
. _ _ O
if _ _ O
we _ _ O
consider _ _ O
all _ _ O
possible _ _ O
paths _ _ O
that _ _ O
take _ _ O
us _ _ O
to _ _ O
the _ _ O
condition _ _ O
… _ _ O
x _ _ O
= _ _ O
0 _ _ O
x _ _ O
< _ _ O
10 _ _ O
? _ _ O
p _ _ O
( _ _ O
"done _ _ O
. _ _ O
" _ _ O
) _ _ O
p _ _ O
( _ _ O
"hi _ _ O
! _ _ O
" _ _ O
) _ _ O
then _ _ O
we _ _ O
can _ _ O
see _ _ O
that _ _ O
the _ _ O
only _ _ O
possible _ _ O
value _ _ O
for _ _ O
x _ _ O
is _ _ O
the _ _ O
constant _ _ O
0 _ _ O
. _ _ O
we _ _ O
could _ _ O
give _ _ O
an _ _ O
error _ _ O
( _ _ O
or _ _ O
warning _ _ O
) _ _ O
about _ _ O
the _ _ O
condition _ _ O
, _ _ O
or _ _ O
tell _ _ O
them _ _ O
that _ _ O
this _ _ O
last _ _ O
piece _ _ O
of _ _ O
code _ _ O
is _ _ O
unreachable _ _ O
. _ _ O
this _ _ O
sort _ _ O
of _ _ O
algorithm _ _ O
is _ _ O
crucial _ _ O
for _ _ O
detecting _ _ O
subtle _ _ O
bugs _ _ O
, _ _ O
doing _ _ O
certain _ _ O
kinds _ _ O
of _ _ O
semantic _ _ B-Concept
analysis _ _ I-Concept
, _ _ O
and _ _ O
generating _ _ O
better _ _ O
code _ _ O
. _ _ O
9 _ _ O

Intermediate _ _ B-Concept
Representation _ _ I-Concept
( _ _ O
IR _ _ B-Concept
) _ _ O
10 _ _ O

Real _ _ O
languages _ _ O
are _ _ O
a _ _ O
lot _ _ O
bigger _ _ O
. _ _ O
● _ _ O
the _ _ O
AST _ _ B-Concept
is _ _ O
an _ _ O
abstract _ _ O
representation _ _ O
of _ _ O
the _ _ O
source _ _ O
language _ _ O
. _ _ O
● _ _ O
but _ _ O
the _ _ O
source _ _ B-Concept
language _ _ I-Concept
can _ _ O
be _ _ O
… _ _ O
complicated _ _ O
. _ _ O
shhhHHHHHHHHHH _ _ O
there _ _ O
are _ _ O
so _ _ O
many _ _ O
pieces _ _ O
of _ _ O
syntax _ _ O
! _ _ O
so _ _ O
many _ _ O
kinds _ _ O
of _ _ O
AST _ _ B-Concept
nodes _ _ O
! _ _ O
aaaHHH _ _ O
11 _ _ O

Tight _ _ O
coupling _ _ O
is _ _ O
bad _ _ O
. _ _ O
● _ _ O
a _ _ O
codegen _ _ B-Concept
algorithm _ _ O
that _ _ O
goes _ _ O
directly _ _ O
from _ _ O
source _ _ O
AST _ _ B-Concept
to _ _ O
target _ _ O
machine _ _ B-Concept
code _ _ I-Concept
is _ _ O
also _ _ O
not _ _ O
very _ _ O
flexible _ _ O
. _ _ O
Truss _ _ B-Concept
AST _ _ B-Concept
Codegen _ _ B-Concept
what _ _ O
if _ _ O
you _ _ O
want _ _ O
to _ _ O
modify _ _ O
the _ _ O
source _ _ B-Concept
language _ _ I-Concept
? _ _ O
or _ _ O
change _ _ O
the _ _ O
AST _ _ B-Concept
representation _ _ O
? _ _ O
MIPS _ _ O
Code _ _ O
what _ _ O
if _ _ O
you _ _ O
want _ _ O
to _ _ O
output _ _ O
a _ _ O
different _ _ O
target _ _ B-Concept
language _ _ I-Concept
? _ _ O
this _ _ O
algorithm _ _ O
tightly _ _ O
couples _ _ O
the _ _ O
input _ _ O
and _ _ O
output _ _ O
: _ _ O
if _ _ O
you _ _ O
want _ _ O
to _ _ O
change _ _ O
either _ _ O
of _ _ O
them _ _ O
, _ _ O
you _ _ O
have _ _ O
to _ _ O
change _ _ O
the _ _ O
algorithm _ _ O
. _ _ O
12 _ _ O

Hidden _ _ O
complexity _ _ O
● _ _ O
the _ _ O
AST _ _ B-Concept
can _ _ O
also _ _ O
hide _ _ O
operations _ _ O
and _ _ O
control _ _ B-Concept
flow _ _ I-Concept
that _ _ O
we _ _ O
have _ _ O
to _ _ O
know _ _ O
about _ _ O
to _ _ O
be _ _ O
able _ _ O
to _ _ O
analyze _ _ O
the _ _ O
code _ _ O
properly _ _ O
. _ _ O
if _ _ O
cond _ _ O
{ _ _ O
code _ _ O
} _ _ O
while _ _ O
cond _ _ O
{ _ _ O
code _ _ O
} _ _ O
for _ _ O
i _ _ O
in _ _ O
lo _ _ O
, _ _ O
hi _ _ O
{ _ _ O
code _ _ O
} _ _ O
if _ _ O
! _ _ O
< _ _ O
cond _ _ O
> _ _ O
goto _ _ O
end _ _ O
< _ _ O
code _ _ O
> _ _ O
end _ _ O
: _ _ O
top _ _ O
: _ _ O
if _ _ O
! _ _ O
< _ _ O
cond _ _ O
> _ _ O
goto _ _ O
end _ _ O
< _ _ O
code _ _ O
> _ _ O
goto _ _ O
top _ _ O
end _ _ O
: _ _ O
i _ _ O
= _ _ O
< _ _ O
lo _ _ O
> _ _ O
top _ _ O
: _ _ O
if _ _ O
i _ _ O
> _ _ O
= _ _ O
< _ _ O
hi _ _ O
> _ _ O
goto _ _ O
end _ _ O
< _ _ O
code _ _ O
> _ _ O
i _ _ O
+ _ _ O
= _ _ O
1 _ _ O
goto _ _ O
top _ _ O
end _ _ O
: _ _ O
13 _ _ O

So _ _ O
instead _ _ O
… _ _ O
Frontend _ _ B-Concept
Semantic _ _ B-Concept
AST _ _ B-Concept
Lowering _ _ B-Concept
● _ _ O
an _ _ O
intermediate _ _ B-Concept
representation _ _ I-Concept
( _ _ O
IR _ _ B-Concept
) _ _ O
is _ _ O
essentially _ _ O
a _ _ O
third _ _ O
language _ _ O
that _ _ O
acts _ _ O
as _ _ O
a _ _ O
bridge _ _ O
between _ _ O
the _ _ O
source _ _ B-Concept
and _ _ O
target _ _ B-Concept
languages _ _ I-Concept
. _ _ O
MIPS _ _ O
Backend _ _ B-Concept
Codegen _ _ B-Concept
MIPS _ _ O
code _ _ O
IR _ _ B-Concept
x86 _ _ O
Backend _ _ O
Codegen _ _ B-Concept
x86 _ _ O
code _ _ O
now _ _ O
we _ _ O
can _ _ O
work _ _ O
on _ _ O
the _ _ O
frontend _ _ B-Concept
and _ _ O
backend _ _ B-Concept
parts _ _ O
in _ _ O
isolation _ _ O
, _ _ O
swap _ _ O
out _ _ O
the _ _ O
backend _ _ B-Concept
, _ _ O
change _ _ O
the _ _ O
AST _ _ B-Concept
without _ _ O
having _ _ O
to _ _ O
change _ _ O
the _ _ O
codegen _ _ B-Concept
, _ _ O
etc _ _ O
… _ _ O
14 _ _ O

IR _ _ B-Concept
Goals _ _ O
● _ _ O
we _ _ O
want _ _ O
a _ _ O
language _ _ O
with _ _ O
a _ _ O
small _ _ O
number _ _ O
of _ _ O
simple _ _ O
operations _ _ O
o _ _ O
… _ _ O
which _ _ O
can _ _ O
be _ _ O
efficiently _ _ O
implemented _ _ O
on _ _ O
most _ _ O
/ _ _ O
all _ _ O
targets _ _ O
● _ _ O
so _ _ O
, _ _ O
something _ _ O
similar _ _ O
to _ _ O
assembly _ _ B-Concept
language _ _ I-Concept
… _ _ O
o _ _ O
but _ _ O
without _ _ O
being _ _ O
tied _ _ O
to _ _ O
a _ _ O
particular _ _ O
ISA _ _ B-Concept
. _ _ O
● _ _ O
a _ _ O
representation _ _ O
amenable _ _ O
to _ _ O
optimization _ _ B-Concept
would _ _ O
also _ _ O
be _ _ O
nice _ _ O
… _ _ O
o _ _ O
optimization _ _ O
rewrites _ _ O
code _ _ O
to _ _ O
do _ _ O
the _ _ O
same _ _ O
thing _ _ O
, _ _ O
but _ _ O
faster _ _ O
. _ _ O
o _ _ O
simple _ _ O
code _ _ O
is _ _ O
easier _ _ O
to _ _ O
optimize _ _ O
, _ _ O
so _ _ O
we _ _ O
've _ _ O
got _ _ O
that _ _ O
covered _ _ O
. _ _ O
● _ _ O
finally _ _ O
, _ _ O
we _ _ O
'll _ _ O
want _ _ O
to _ _ O
represent _ _ O
control _ _ O
flow _ _ O
as _ _ O
a _ _ O
graph _ _ O
, _ _ O
o _ _ O
as _ _ O
this _ _ O
enables _ _ O
lots _ _ O
of _ _ O
analyses _ _ O
for _ _ O
optimization _ _ O
and _ _ O
codegen _ _ O
that _ _ O
a _ _ O
linear _ _ O
or _ _ O
tree _ _ O
structure _ _ O
would _ _ O
not _ _ O
. _ _ O
● _ _ O
the _ _ O
IR _ _ O
we _ _ O
'll _ _ O
be _ _ O
discussing _ _ O
is _ _ O
based _ _ O
on _ _ O
rustc _ _ O
's _ _ O
MIR _ _ O
, _ _ O
o _ _ O
but _ _ O
lots _ _ O
of _ _ O
IRs _ _ O
are _ _ O
similar _ _ O
in _ _ O
their _ _ O
goals _ _ O
and _ _ O
structure _ _ O
. _ _ O
15 _ _ O

Our _ _ O
IR _ _ B-Concept
16 _ _ O

The _ _ O
big _ _ O
picture _ _ O
● _ _ O
each _ _ O
function _ _ O
in _ _ O
the _ _ O
source _ _ O
language _ _ O
will _ _ O
be _ _ O
represented _ _ O
by _ _ O
a _ _ O
CFG _ _ B-Concept
. _ _ O
o _ _ O
this _ _ O
is _ _ O
a _ _ O
control _ _ B-Concept
flow _ _ I-Concept
graph _ _ I-Concept
: _ _ O
essentially _ _ O
, _ _ O
a _ _ O
flowchart _ _ B-Concept
. _ _ O
fn _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
println_i _ _ O
( _ _ O
5 _ _ O
) _ _ O
; _ _ O
} _ _ O
fn _ _ O
test _ _ O
( _ _ O
x _ _ O
: _ _ O
bool _ _ O
) _ _ O
{ _ _ O
if _ _ O
x _ _ O
{ _ _ O
println_s _ _ O
( _ _ O
"y _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
else _ _ O
{ _ _ O
println_s _ _ O
( _ _ O
"n _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
each _ _ O
node _ _ B-Concept
in _ _ O
the _ _ O
CFG _ _ B-Concept
is _ _ O
called _ _ O
a _ _ O
basic _ _ B-Concept
block _ _ I-Concept
. _ _ O
this _ _ O
function _ _ O
only _ _ O
has _ _ O
one _ _ O
. _ _ O
basic _ _ B-Concept
blocks _ _ I-Concept
can _ _ O
have _ _ O
0 _ _ O
, _ _ O
1 _ _ O
, _ _ O
or _ _ O
2 _ _ O
successors _ _ B-Concept
: _ _ O
what _ _ O
will _ _ O
be _ _ O
run _ _ O
after _ _ O
the _ _ O
basic _ _ B-Concept
block _ _ I-Concept
completes _ _ O
. _ _ O
blocks _ _ B-Concept
with _ _ O
2 _ _ O
successors _ _ B-Concept
are _ _ O
clearly _ _ O
making _ _ O
decisions _ _ O
… _ _ O
17 _ _ O

The _ _ O
little _ _ O
picture _ _ O
● _ _ O
each _ _ O
basic _ _ B-Concept
block _ _ I-Concept
will _ _ O
contain _ _ O
instructions _ _ B-Concept
in _ _ O
a _ _ O
simple _ _ O
language _ _ O
. _ _ O
o _ _ O
basically _ _ O
, _ _ O
each _ _ O
line _ _ O
only _ _ O
does _ _ O
one _ _ O
thing _ _ O
. _ _ O
d _ _ O
= _ _ O
( _ _ O
x _ _ O
+ _ _ O
y _ _ O
) _ _ O
* _ _ O
( _ _ O
-z _ _ O
/ _ _ O
w _ _ O
) _ _ O
if _ _ O
this _ _ O
reminds _ _ O
you _ _ O
of _ _ O
asm _ _ O
, _ _ O
good _ _ O
. _ _ O
$ _ _ O
t1 _ _ O
= _ _ O
x _ _ O
+ _ _ O
y _ _ O
$ _ _ O
t2 _ _ O
= _ _ O
-z _ _ O
$ _ _ O
t3 _ _ O
= _ _ O
$ _ _ O
t2 _ _ O
/ _ _ O
w _ _ O
d _ _ O
= _ _ O
$ _ _ O
t1 _ _ O
* _ _ O
$ _ _ O
t3 _ _ O
destination _ _ O
, _ _ O
source _ _ O
, _ _ O
operation _ _ O
add _ _ O
neg _ _ O
div _ _ O
mul _ _ O
$ _ _ O
t1 _ _ O
, _ _ O
x _ _ O
, _ _ O
y _ _ O
$ _ _ O
t2 _ _ O
, _ _ O
z _ _ O
$ _ _ O
t3 _ _ O
, _ _ O
$ _ _ O
t2 _ _ O
, _ _ O
w _ _ O
d _ _ O
, _ _ O
$ _ _ O
t1 _ _ O
, _ _ O
$ _ _ O
t3 _ _ O
it _ _ O
's _ _ O
kind _ _ O
of _ _ O
like _ _ O
asm _ _ O
without _ _ O
loads _ _ O
/ _ _ O
stores _ _ O
, _ _ O
and _ _ O
with _ _ O
infinite _ _ O
temporary _ _ O
registers _ _ O
. _ _ O
18 _ _ O

Locals _ _ B-Concept
/ _ _ O
temporaries _ _ B-Concept
● _ _ O
each _ _ O
function _ _ O
has _ _ O
a _ _ O
list _ _ O
of _ _ O
locals _ _ B-Concept
: _ _ O
places _ _ O
where _ _ O
values _ _ O
can _ _ O
be _ _ O
stored _ _ O
. _ _ O
● _ _ O
some _ _ O
of _ _ O
these _ _ O
are _ _ O
local _ _ B-Concept
variables _ _ I-Concept
that _ _ O
the _ _ O
user _ _ O
declared _ _ O
; _ _ O
others _ _ O
are _ _ O
temporaries _ _ B-Concept
created _ _ O
by _ _ O
the _ _ O
code _ _ B-Concept
generation _ _ I-Concept
. _ _ O
fn _ _ O
func _ _ O
( _ _ O
a _ _ O
: _ _ O
int _ _ O
, _ _ O
b _ _ O
: _ _ O
int _ _ O
) _ _ O
{ _ _ O
let _ _ O
x _ _ O
= _ _ O
( _ _ O
a _ _ O
+ _ _ O
b _ _ O
) _ _ O
* _ _ O
3 _ _ O
; _ _ O
println_i _ _ O
( _ _ O
x _ _ O
) _ _ O
; _ _ O
} _ _ O
each _ _ O
local _ _ B-Concept
has _ _ O
a _ _ O
type _ _ B-Concept
and _ _ O
optionally _ _ O
a _ _ O
name _ _ O
( _ _ O
from _ _ O
the _ _ O
code _ _ O
) _ _ O
. _ _ O
Locals _ _ B-Concept
Code _ _ O
Idx _ _ O
Name _ _ O
Type _ _ O
$ _ _ O
t3 _ _ O
= _ _ O
a _ _ O
+ _ _ O
b _ _ O
x _ _ O
= _ _ O
$ _ _ O
t3 _ _ O
* _ _ O
3 _ _ O
println_i _ _ O
( _ _ O
x _ _ O
) _ _ O
return _ _ O
0 _ _ O
( _ _ O
) _ _ O
1 _ _ O
a _ _ O
int _ _ O
2 _ _ O
b _ _ O
int _ _ O
3 _ _ O
4 _ _ O
if _ _ O
a _ _ O
local _ _ B-Concept
has _ _ O
no _ _ O
name _ _ O
, _ _ O
it _ _ O
's _ _ O
referred _ _ O
to _ _ O
by _ _ O
its _ _ O
index _ _ O
in _ _ O
the _ _ O
code _ _ O
( _ _ O
like _ _ O
$ _ _ O
t3 _ _ O
) _ _ O
. _ _ O
we _ _ O
'll _ _ O
come _ _ O
back _ _ O
to _ _ O
$ _ _ O
t0 _ _ O
shortly _ _ O
… _ _ O
int _ _ O
x _ _ O
int _ _ O
19 _ _ O

Places _ _ B-Concept
, _ _ O
Constants _ _ B-Concept
, _ _ O
and _ _ O
Sources _ _ B-Concept
● _ _ O
the _ _ O
operands _ _ B-Concept
of _ _ O
instructions _ _ O
are _ _ O
a _ _ O
little _ _ O
freer _ _ O
than _ _ O
in _ _ O
assembly _ _ O
. _ _ O
Sources _ _ B-Concept
Places _ _ B-Concept
Locals _ _ B-Concept
( _ _ O
x _ _ O
, _ _ O
$ _ _ O
t1 _ _ O
) _ _ O
Global _ _ O
variables _ _ O
Fields _ _ O
( _ _ O
x.y _ _ O
) _ _ O
a _ _ O
place _ _ B-Concept
is _ _ O
what _ _ O
can _ _ O
appear _ _ O
on _ _ O
the _ _ O
LHS _ _ O
of _ _ O
an _ _ O
assignment _ _ O
. _ _ O
Constants _ _ B-Concept
Int _ _ O
Literals _ _ O
String _ _ O
Literals _ _ O
Bool _ _ O
Literals _ _ O
Function _ _ B-Concept
Addresses _ _ I-Concept
a _ _ O
constant _ _ B-Concept
is _ _ O
just _ _ O
what _ _ O
it _ _ O
sounds _ _ O
like _ _ O
. _ _ O
function _ _ B-Concept
addresses _ _ I-Concept
are _ _ O
used _ _ O
in _ _ O
function _ _ O
calls _ _ O
. _ _ O
both _ _ O
places _ _ B-Concept
and _ _ O
constants _ _ B-Concept
can _ _ O
be _ _ O
used _ _ O
as _ _ O
sources _ _ B-Concept
, _ _ I-Concept
which _ _ O
are _ _ O
the _ _ O
operands _ _ B-Concept
on _ _ O
the _ _ O
RHS _ _ O
of _ _ O
assignments _ _ O
, _ _ O
arguments _ _ O
, _ _ O
etc _ _ O
. _ _ O
20 _ _ O

Instruction _ _ O
examples _ _ O
● _ _ O
here _ _ O
are _ _ O
some _ _ O
examples _ _ O
of _ _ O
valid _ _ O
instructions _ _ O
in _ _ O
this _ _ O
IR _ _ B-Concept
language _ _ O
. _ _ O
x _ _ O
= _ _ O
1 _ _ O
simple _ _ O
assignment _ _ O
of _ _ O
a _ _ O
constant _ _ B-Concept
to _ _ O
a _ _ O
local _ _ B-Concept
. _ _ O
$ _ _ O
t5.y _ _ O
= _ _ O
x.y _ _ O
field _ _ O
access _ _ O
can _ _ O
happen _ _ O
on _ _ O
either _ _ O
( _ _ O
or _ _ O
both _ _ O
) _ _ O
side _ _ O
( _ _ O
s _ _ O
) _ _ O
of _ _ O
an _ _ O
assignment _ _ O
. _ _ O
x.y _ _ O
= _ _ O
a.b.c _ _ O
+ _ _ O
1 _ _ O
this _ _ O
is _ _ O
still _ _ O
just _ _ O
one _ _ O
instruction _ _ O
. _ _ O
field _ _ O
access _ _ O
does _ _ O
n't _ _ O
count _ _ O
as _ _ O
an _ _ O
" _ _ O
operation _ _ O
; _ _ O
" _ _ O
+ _ _ O
does _ _ O
. _ _ O
$ _ _ O
t0 _ _ O
= _ _ O
f _ _ O
( _ _ O
1 _ _ O
, _ _ O
$ _ _ O
t1 _ _ O
) _ _ O
function _ _ B-Concept
calls _ _ I-Concept
can _ _ O
take _ _ O
any _ _ O
number _ _ O
of _ _ O
arguments _ _ B-Concept
, _ _ O
which _ _ O
are _ _ O
all _ _ O
sources _ _ B-Concept
. _ _ O
p _ _ O
= _ _ O
& _ _ O
println_s _ _ O
a _ _ O
function _ _ B-Concept
's _ _ I-Concept
address _ _ I-Concept
can _ _ O
be _ _ O
put _ _ O
in _ _ O
a _ _ O
place _ _ B-Concept
… _ _ O
p _ _ O
( _ _ O
"hi _ _ O
" _ _ O
) _ _ O
… _ _ O
and _ _ O
then _ _ O
that _ _ O
place _ _ B-Concept
can _ _ O
be _ _ O
called _ _ O
. _ _ O
21 _ _ O

Terminators _ _ B-Concept
● _ _ O
a _ _ O
basic _ _ B-Concept
block _ _ I-Concept
( _ _ O
BB _ _ B-Concept
) _ _ O
contains _ _ O
0 _ _ O
or _ _ O
more _ _ O
regular _ _ O
instructions _ _ O
, _ _ O
and _ _ O
ends _ _ O
with _ _ O
a _ _ O
terminator _ _ B-Concept
, _ _ O
which _ _ O
is _ _ O
a _ _ O
control _ _ B-Concept
flow _ _ I-Concept
instruction _ _ O
. _ _ O
a _ _ O
return _ _ B-Concept
terminator _ _ I-Concept
returns _ _ O
from _ _ O
the _ _ O
function _ _ O
. _ _ O
a _ _ O
goto _ _ B-Concept
terminator _ _ I-Concept
unconditionally _ _ O
goes _ _ O
to _ _ O
another _ _ O
BB _ _ B-Concept
. _ _ O
... _ _ O
return _ _ B-Concept
... _ _ O
goto _ _ B-Concept
bb7 _ _ O
and _ _ O
a _ _ O
conditional _ _ B-Concept
terminator _ _ I-Concept
goes _ _ O
to _ _ O
one _ _ O
of _ _ O
two _ _ O
BBs _ _ B-Concept
, _ _ O
based _ _ O
on _ _ O
the _ _ O
condition _ _ O
. _ _ O
... _ _ O
if _ _ O
$ _ _ O
t4 _ _ O
bb9 _ _ O
else _ _ O
bb12 _ _ O
22 _ _ O

One _ _ O
way _ _ O
in _ _ O
, _ _ O
one _ _ O
way _ _ O
out _ _ O
● _ _ O
every _ _ O
function _ _ O
has _ _ O
at _ _ O
least _ _ O
one _ _ O
BB _ _ B-Concept
, _ _ O
its _ _ O
entry _ _ B-Concept
point _ _ I-Concept
. _ _ O
it _ _ O
's _ _ O
named _ _ O
bb0 _ _ O
. _ _ O
● _ _ O
we _ _ O
will _ _ O
also _ _ O
ensure _ _ O
every _ _ O
function _ _ O
has _ _ O
exactly _ _ O
one _ _ O
BB _ _ B-Concept
with _ _ O
a _ _ O
return _ _ B-Concept
. _ _ O
o _ _ O
all _ _ O
return _ _ B-Concept
statements _ _ O
will _ _ O
jump _ _ O
( _ _ O
goto _ _ B-Concept
) _ _ O
to _ _ O
it _ _ O
. _ _ O
fn _ _ O
f _ _ O
( _ _ O
x _ _ O
: _ _ O
bool _ _ O
, _ _ O
y _ _ O
: _ _ O
bool _ _ O
) _ _ O
{ _ _ O
if _ _ O
x _ _ O
{ _ _ O
if _ _ O
y _ _ O
{ _ _ O
return _ _ B-Concept
; _ _ O
} _ _ O
println_s _ _ O
( _ _ O
"just _ _ O
x _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
else _ _ O
{ _ _ O
println_s _ _ O
( _ _ O
"not _ _ O
x _ _ O
" _ _ O
) _ _ O
; _ _ O
return _ _ B-Concept
; _ _ O
} _ _ O
println_s _ _ O
( _ _ O
"done _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
notice _ _ O
how _ _ O
both _ _ O
returns _ _ B-Concept
become _ _ O
arrows _ _ O
to _ _ O
the _ _ O
red _ _ O
BB _ _ B-Concept
( _ _ O
which _ _ O
has _ _ O
a _ _ O
return _ _ B-Concept
terminator _ _ I-Concept
) _ _ O
. _ _ O
bb0 _ _ O
not _ _ O
x _ _ O
just _ _ O
x _ _ O
done _ _ O
this _ _ O
is _ _ O
going _ _ O
to _ _ O
make _ _ O
certain _ _ O
analyses _ _ O
much _ _ O
easier _ _ O
, _ _ O
since _ _ O
some _ _ O
of _ _ O
them _ _ O
start _ _ O
at _ _ O
the _ _ O
end _ _ O
and _ _ O
go _ _ O
backwards _ _ O
. _ _ O
23 _ _ O

Return _ _ B-Concept
values _ _ I-Concept
● _ _ O
there _ _ O
is _ _ O
a _ _ O
special _ _ O
temporary _ _ O
, _ _ O
$ _ _ O
t0 _ _ O
, _ _ O
which _ _ O
is _ _ O
used _ _ O
for _ _ O
the _ _ O
return _ _ B-Concept
value _ _ I-Concept
. _ _ O
● _ _ O
similar _ _ O
to _ _ O
the _ _ O
$ _ _ O
v0 _ _ O
register _ _ O
in _ _ O
MIPS _ _ O
, _ _ O
a _ _ O
value _ _ O
is _ _ O
returned _ _ O
by _ _ O
assigning _ _ O
something _ _ O
into _ _ O
it _ _ O
before _ _ O
you _ _ O
get _ _ O
to _ _ O
the _ _ O
return _ _ B-Concept
terminator _ _ I-Concept
. _ _ O
fn _ _ O
ret _ _ O
( _ _ O
x _ _ O
: _ _ O
bool _ _ O
) _ _ O
: _ _ O
int _ _ O
{ _ _ O
if _ _ O
x _ _ O
{ _ _ O
return _ _ O
5 _ _ O
; _ _ O
} _ _ O
else _ _ O
{ _ _ O
return _ _ O
10 _ _ O
; _ _ O
} _ _ O
} _ _ O
Locals _ _ B-Concept
Idx _ _ O
Name _ _ O
Type _ _ O
0 _ _ O
1 _ _ O
int _ _ O
x _ _ O
bool _ _ O
bb0 _ _ O
: _ _ O
if _ _ O
x _ _ O
bb1 _ _ O
else _ _ O
bb2 _ _ O
bb1 _ _ O
: _ _ O
$ _ _ O
t0 _ _ O
= _ _ O
5 _ _ O
goto _ _ B-Concept
bb3 _ _ O
bb2 _ _ O
: _ _ O
$ _ _ O
t0 _ _ O
= _ _ O
10 _ _ O
goto _ _ B-Concept
bb3 _ _ O
bb3 _ _ O
: _ _ O
return _ _ B-Concept
the _ _ O
special _ _ O
parsing _ _ B-Concept
rule _ _ O
about _ _ O
returning _ _ B-Concept
statements _ _ I-Concept
( _ _ O
remember _ _ O
that _ _ O
? _ _ O
) _ _ O
along _ _ O
with _ _ O
the _ _ O
typechecking _ _ O
pass _ _ O
will _ _ O
ensure _ _ O
that _ _ O
this _ _ O
location _ _ O
is _ _ O
always _ _ O
assigned _ _ O
a _ _ O
value _ _ O
. _ _ O
24 _ _ O

Codegen _ _ B-Concept
, _ _ O
but _ _ O
different _ _ O
25 _ _ O

Lowering _ _ B-Concept
● _ _ O
lowering _ _ B-Concept
is _ _ O
the _ _ O
process _ _ O
of _ _ O
converting _ _ O
the _ _ O
high-level _ _ O
, _ _ O
abstract _ _ B-Concept
syntax _ _ I-Concept
tree _ _ I-Concept
into _ _ O
the _ _ O
mid-level _ _ O
IR _ _ B-Concept
that _ _ O
we _ _ O
just _ _ O
looked _ _ O
at _ _ O
. _ _ O
● _ _ O
it _ _ O
's _ _ O
a _ _ O
kind _ _ O
of _ _ O
code _ _ B-Concept
generation _ _ I-Concept
, _ _ O
so _ _ O
there _ _ O
are _ _ O
some _ _ O
similarities _ _ O
with _ _ O
what _ _ O
we _ _ O
talked _ _ O
about _ _ O
before _ _ O
. _ _ O
but _ _ O
in _ _ O
many _ _ O
ways _ _ O
it _ _ O
's _ _ O
a _ _ O
lot _ _ O
simpler _ _ O
: _ _ O
o _ _ O
there _ _ O
are _ _ O
infinite _ _ O
temporary _ _ O
locations _ _ O
, _ _ O
so _ _ O
there _ _ O
's _ _ O
no _ _ O
need _ _ O
for _ _ O
complex _ _ O
register _ _ B-Concept
allocation _ _ I-Concept
algorithms _ _ I-Concept
. _ _ O
o _ _ O
it _ _ O
also _ _ O
means _ _ O
there _ _ O
's _ _ O
no _ _ O
need _ _ O
for _ _ O
stack _ _ B-Concept
frames _ _ I-Concept
, _ _ O
loads _ _ O
, _ _ O
stores _ _ O
etc _ _ O
. _ _ O
o _ _ O
all _ _ O
locations _ _ O
are _ _ O
typed _ _ B-Concept
, _ _ O
so _ _ O
some _ _ O
implementation _ _ O
details _ _ O
are _ _ O
left _ _ O
out _ _ O
( _ _ O
e.g. _ _ O
a _ _ O
+ _ _ O
b _ _ O
can _ _ O
mean _ _ O
addition _ _ O
or _ _ O
string _ _ O
concatenation _ _ O
, _ _ O
like _ _ O
in _ _ O
the _ _ O
source _ _ O
language _ _ O
) _ _ O
● _ _ O
so _ _ O
all _ _ O
we _ _ O
have _ _ O
to _ _ O
do _ _ O
is _ _ O
: _ _ O
o _ _ O
convert _ _ O
complex _ _ O
operations _ _ O
into _ _ O
sequences _ _ O
of _ _ O
simpler _ _ O
ones _ _ O
o _ _ O
build _ _ O
the _ _ O
CFG _ _ B-Concept
according _ _ O
to _ _ O
the _ _ O
control _ _ B-Concept
flow _ _ I-Concept
statements _ _ O
26 _ _ O

Building _ _ O
the _ _ O
CFG _ _ B-Concept
: _ _ O
straight-line _ _ O
code _ _ O
( _ _ O
animated _ _ O
) _ _ O
● _ _ O
if _ _ O
a _ _ O
function _ _ O
has _ _ O
no _ _ O
control _ _ B-Concept
flow _ _ I-Concept
, _ _ O
it _ _ O
's _ _ O
super _ _ O
simple _ _ O
. _ _ O
fn _ _ O
do_gravity _ _ O
( _ _ O
vy _ _ O
: _ _ O
int _ _ O
) _ _ O
: _ _ O
int _ _ O
you _ _ O
start _ _ O
with _ _ O
an _ _ O
empty _ _ O
BB _ _ B-Concept
, _ _ O
and _ _ O
let _ _ O
ret _ _ O
= _ _ O
min _ _ O
( _ _ O
vy _ _ O
+ _ _ O
98 _ _ O
, _ _ O
800 _ _ O
) _ _ O
; _ _ O
generate _ _ O
IR _ _ B-Concept
instructions _ _ O
into _ _ O
it _ _ O
. _ _ O
println_i _ _ O
( _ _ O
ret _ _ O
) _ _ O
; _ _ O
bb0 _ _ O
: _ _ O
$ _ _ O
t2 _ _ O
= _ _ O
vy _ _ O
+ _ _ O
98 _ _ O
return _ _ B-Concept
ret _ _ O
; _ _ O
ret _ _ O
= _ _ O
min _ _ O
( _ _ O
$t2 _ _ O
, _ _ O
800 _ _ O
) _ _ O
} _ _ O
Locals _ _ B-Concept
println_i _ _ O
( _ _ O
ret _ _ O
) _ _ O
$ _ _ O
t0 _ _ O
= _ _ O
ret _ _ O
Idx _ _ O
Name _ _ O
Type _ _ O
goto _ _ O
bb1 _ _ O
0 _ _ O
int _ _ O
1 _ _ O
vy _ _ O
2 _ _ O
3 _ _ O
int _ _ O
int _ _ O
ret _ _ O
int _ _ O
bb1 _ _ O
: _ _ O
return _ _ B-Concept
we _ _ O
can _ _ O
make _ _ O
a _ _ O
new _ _ O
BB _ _ B-Concept
for _ _ O
the _ _ O
return _ _ B-Concept
like _ _ O
here _ _ O
, _ _ O
or _ _ O
special-case _ _ O
it _ _ O
if _ _ O
we _ _ O
want _ _ O
a _ _ O
simpler _ _ O
CFG _ _ B-Concept
. _ _ O
27 _ _ O

Building _ _ O
the _ _ O
CFG _ _ B-Concept
: _ _ O
a _ _ O
while _ _ O
loop _ _ O
( _ _ O
animated _ _ O
) _ _ O
● _ _ O
control _ _ B-Concept
flow _ _ I-Concept
structures _ _ O
tell _ _ O
us _ _ O
exactly _ _ O
where _ _ O
BBs _ _ B-Concept
need _ _ O
to _ _ O
begin _ _ O
/ _ _ O
end _ _ O
. _ _ O
println_s _ _ O
( _ _ O
"nums _ _ O
: _ _ O
" _ _ O
) _ _ O
; _ _ O
let _ _ O
i _ _ O
= _ _ O
10 _ _ O
; _ _ O
while _ _ O
i _ _ O
> _ _ O
0 _ _ O
{ _ _ O
println_i _ _ O
( _ _ O
i _ _ O
) _ _ O
; _ _ O
i _ _ O
= _ _ O
i _ _ O
– _ _ O
2 _ _ O
; _ _ O
} _ _ O
the _ _ O
loop _ _ O
needs _ _ O
a _ _ O
new _ _ O
BB _ _ B-Concept
. _ _ O
when _ _ O
we _ _ O
start _ _ O
a _ _ O
new _ _ O
BB _ _ B-Concept
, _ _ O
the _ _ O
previous _ _ O
one _ _ O
must _ _ O
goto _ _ B-Concept
the _ _ O
new _ _ O
one _ _ O
. _ _ O
done _ _ O
with _ _ O
the _ _ O
body _ _ O
; _ _ O
make _ _ O
a _ _ O
new _ _ O
BB _ _ B-Concept
after _ _ O
it _ _ O
. _ _ O
bb0 _ _ O
: _ _ O
println_s _ _ O
( _ _ O
"nums _ _ O
: _ _ O
" _ _ O
) _ _ O
i _ _ O
= _ _ O
10 _ _ O
goto _ _ B-Concept
bb1 _ _ O
bb1 _ _ O
: _ _ O
$ _ _ O
t2 _ _ O
= _ _ O
i _ _ O
> _ _ O
0 _ _ O
if _ _ O
$ _ _ O
t2 _ _ O
then _ _ O
bb2 _ _ O
else _ _ O
bb _ _ O
_ _ _ O
3 _ _ O
bb2 _ _ O
: _ _ O
println_i _ _ O
( _ _ O
i _ _ O
) _ _ O
i _ _ O
= _ _ O
i _ _ O
- _ _ O
2 _ _ O
goto _ _ B-Concept
bb1 _ _ O
bb3 _ _ O
: _ _ O
28 _ _ O

The _ _ O
shape _ _ O
of _ _ O
control _ _ B-Concept
flow _ _ I-Concept
● _ _ O
what _ _ O
kind _ _ O
of _ _ O
control _ _ B-Concept
flow _ _ I-Concept
statement _ _ O
would _ _ O
make _ _ O
each _ _ O
CFG _ _ B-Concept
? _ _ O
while _ _ O
true _ _ O
if _ _ O
if _ _ O
… _ _ O
else _ _ O
if _ _ O
… _ _ O
else _ _ O
for _ _ O
( _ _ O
i=a _ _ O
; _ _ O
i _ _ O
< _ _ O
b _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
… _ _ O
} _ _ O
while _ _ O
29 _ _ O

Some _ _ O
graph-related _ _ O
stuff _ _ O
30 _ _ O

How _ _ O
they _ _ O
connect _ _ O
( _ _ O
animated _ _ O
) _ _ O
● _ _ O
graphs _ _ B-Concept
always _ _ O
have _ _ O
all _ _ O
sorts _ _ O
of _ _ O
vocabulary _ _ O
, _ _ O
huh _ _ O
? _ _ O
a _ _ O
BB _ _ B-Concept
's _ _ I-Concept
predecessors _ _ B-Concept
are _ _ O
all _ _ O
the _ _ O
BBs _ _ B-Concept
that _ _ O
point _ _ O
to _ _ O
it _ _ O
. _ _ O
a _ _ O
BB _ _ B-Concept
's _ _ I-Concept
successors _ _ B-Concept
are _ _ O
the _ _ O
BBs _ _ O
which _ _ O
it _ _ O
points _ _ O
to _ _ O
. _ _ O
a _ _ O
BB _ _ O
can _ _ O
be _ _ O
its _ _ O
own _ _ O
successor _ _ O
, _ _ O
in _ _ O
which _ _ O
case _ _ O
it _ _ O
is _ _ O
also _ _ O
its _ _ O
own _ _ O
predecessor _ _ O
! _ _ O
a _ _ O
back _ _ O
edge _ _ O
is _ _ O
one _ _ O
that _ _ O
goes _ _ O
back _ _ O
to _ _ O
an _ _ O
earlier _ _ O
BB _ _ O
. _ _ O
remember _ _ O
: _ _ O
whenever _ _ O
you _ _ O
see _ _ O
cyclic _ _ O
graphs _ _ O
, _ _ O
things _ _ O
are _ _ O
gon _ _ O
na _ _ O
get _ _ O
weird _ _ O
. _ _ O
31 _ _ O

Visiting _ _ B-Concept
arbitrary _ _ I-Concept
graphs _ _ I-Concept
● _ _ O
visiting _ _ B-Concept
a _ _ O
tree _ _ B-Concept
is _ _ O
easy _ _ O
: _ _ O
just _ _ O
recurse _ _ O
for _ _ O
each _ _ O
child _ _ O
node _ _ O
. _ _ O
● _ _ O
but _ _ O
doing _ _ O
that _ _ O
for _ _ O
an _ _ O
arbitrary _ _ O
graph _ _ B-Concept
will _ _ O
get _ _ O
you _ _ O
into _ _ O
trouble _ _ O
. _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
fn _ _ O
visit_node _ _ B-Concept
( _ _ B-Concept
n _ _ O
) _ _ O
{ _ _ O
print _ _ O
( _ _ O
n _ _ O
's _ _ O
number _ _ O
) _ _ O
; _ _ O
for _ _ O
s _ _ O
in _ _ O
n.successors _ _ O
( _ _ O
) _ _ O
{ _ _ O
visit_node _ _ B-Concept
( _ _ B-Concept
s _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
if _ _ O
we _ _ O
run _ _ O
this _ _ O
code _ _ O
on _ _ O
this _ _ O
graph _ _ B-Concept
, _ _ O
what _ _ O
happens _ _ O
? _ _ O
we _ _ O
'll _ _ O
visit _ _ O
node _ _ B-Concept
1 _ _ O
… _ _ O
then _ _ O
2 _ _ O
… _ _ O
then _ _ O
1 _ _ O
… _ _ O
then _ _ O
2 _ _ O
… _ _ O
then _ _ O
1 _ _ O
… _ _ O
clearly _ _ O
this _ _ O
is _ _ O
n't _ _ O
sufficient _ _ O
. _ _ O
when _ _ O
visiting _ _ B-Concept
an _ _ O
arbitrary _ _ O
graph _ _ B-Concept
, _ _ O
you _ _ O
must _ _ O
manually _ _ O
keep _ _ O
track _ _ O
of _ _ O
which _ _ O
nodes _ _ B-Concept
have _ _ O
already _ _ O
been _ _ O
visited _ _ O
. _ _ O
32 _ _ O

Postorder _ _ B-Concept
using _ _ O
depth-first _ _ B-Concept
traversal _ _ I-Concept
● _ _ O
a _ _ O
really _ _ O
common _ _ O
way _ _ O
to _ _ O
visit _ _ O
CFGs _ _ O
is _ _ O
using _ _ O
postorder _ _ O
: _ _ O
each _ _ O
node _ _ O
is _ _ O
visited _ _ O
after _ _ O
all _ _ O
its _ _ O
successors _ _ O
have _ _ O
been _ _ O
visited _ _ O
. _ _ O
fn _ _ O
visit_node _ _ O
( _ _ O
n _ _ O
, _ _ O
visited _ _ O
) _ _ O
{ _ _ O
if _ _ O
visited _ _ O
[ _ _ O
n _ _ O
] _ _ O
{ _ _ O
return _ _ O
; _ _ O
} _ _ O
visited _ _ O
[ _ _ O
n _ _ O
] _ _ O
= _ _ O
true _ _ O
; _ _ O
for _ _ O
s _ _ O
in _ _ O
n.successors _ _ O
( _ _ O
) _ _ O
{ _ _ O
visit_node _ _ O
( _ _ O
s _ _ O
, _ _ O
visited _ _ O
) _ _ O
; _ _ O
} _ _ O
actually _ _ O
" _ _ O
visit _ _ O
" _ _ O
n _ _ O
here _ _ O
! _ _ O
} _ _ O
this _ _ O
bit _ _ O
is _ _ O
what _ _ O
prevents _ _ O
us _ _ O
from _ _ O
looping _ _ O
infinitely _ _ O
. _ _ O
and _ _ O
this _ _ O
is _ _ O
where _ _ O
we _ _ O
do _ _ O
whatever _ _ O
work _ _ O
is _ _ O
needed _ _ O
to _ _ O
" _ _ O
visit _ _ O
" _ _ O
n _ _ O
, _ _ O
after _ _ O
we _ _ O
've _ _ O
visited _ _ O
its _ _ O
successors _ _ O
. _ _ O
if _ _ O
we _ _ O
say _ _ O
, _ _ O
printed _ _ O
out _ _ O
the _ _ O
node _ _ O
's _ _ O
name _ _ O
/ _ _ O
number _ _ O
there _ _ O
, _ _ O
this _ _ O
would _ _ O
print _ _ O
out _ _ O
the _ _ O
postorder _ _ O
of _ _ O
the _ _ O
graph _ _ O
. _ _ O
33 _ _ O



