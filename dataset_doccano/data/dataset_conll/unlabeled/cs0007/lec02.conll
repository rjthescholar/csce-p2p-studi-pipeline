unlabeled|cs0007|lec02
-DOCSTART- -X- -X- O

CS _ _ O
0007 _ _ O
: _ _ O
Introduction _ _ O
to _ _ O
Java _ _ O
Lecture _ _ O
2 _ _ O
Nathan _ _ O
Ong _ _ O
University _ _ O
of _ _ O
Pittsburgh _ _ O
September _ _ O
6 _ _ O
, _ _ O
2016 _ _ O

Outline _ _ O
• _ _ O
Recap _ _ O
of _ _ O
last _ _ O
lecture _ _ O
• _ _ O
Java _ _ O
’s _ _ O
“ _ _ O
Place _ _ O
of _ _ O
Residence _ _ O
” _ _ O
• _ _ O
Your _ _ O
First _ _ O
Program _ _ O

Why _ _ O
Learn _ _ O
Java _ _ O
? _ _ O
• _ _ O
Widely _ _ O
used _ _ O
• _ _ O
Constantly _ _ O
updating _ _ O
and _ _ O
receiving _ _ O
support _ _ O
• _ _ O
Easily _ _ O
understood _ _ O
due _ _ O
to _ _ O
standardized _ _ O
and _ _ O
consistent _ _ O
syntax _ _ O
• _ _ O
Forces _ _ O
code _ _ O
readability _ _ O
• _ _ O
Virtual _ _ O
Machine _ _ O
isolates _ _ O
running _ _ O
code _ _ O

Software _ _ O
Layers _ _ O
• _ _ O
Applications _ _ O
: _ _ O
Software _ _ O
that _ _ O
interfaces _ _ O
with _ _ O
the _ _ O
user _ _ O
• _ _ O
System _ _ O
Software _ _ O
: _ _ O
Operating _ _ O
System _ _ O
( _ _ O
e.g. _ _ O
Windows _ _ O
, _ _ O
Mac _ _ O
OSX _ _ O
, _ _ O
Linux _ _ O
) _ _ O
• _ _ O
Device _ _ O
Drivers _ _ O
: _ _ O
Software _ _ O
to _ _ O
talk _ _ O
to _ _ O
non-computer _ _ O
devices _ _ O
( _ _ O
e.g. _ _ O
printers _ _ O
, _ _ O
webcams _ _ O
, _ _ O
etc _ _ O
. _ _ O
) _ _ O
Source _ _ O
: _ _ O

WHAT _ _ O
ABOUT _ _ O
JAVA _ _ O
? _ _ O

Virtual _ _ O
Machine _ _ O
• _ _ O
Java _ _ O
is _ _ O
run _ _ O
on _ _ O
a _ _ O
" _ _ O
Virtual _ _ O
Machine _ _ O
. _ _ O
" _ _ O
• _ _ O
A _ _ O
Virtual _ _ O
Machine _ _ O
( _ _ O
VM _ _ O
) _ _ O
is _ _ O
an _ _ O
emulation _ _ O
of _ _ O
all _ _ O
of _ _ O
the _ _ O
components _ _ O
( _ _ O
hardware _ _ O
or _ _ O
software _ _ O
) _ _ O
necessary _ _ O
to _ _ O
run _ _ O
a _ _ O
certain _ _ O
piece _ _ O
of _ _ O
software _ _ O
. _ _ O
• _ _ O
It _ _ O
is _ _ O
technically _ _ O
an _ _ O
application _ _ O
. _ _ O

Java _ _ O
Flowchart _ _ O
Java _ _ O
Progra _ _ O
m _ _ O
C _ _ O
O _ _ O
M _ _ O
P _ _ O
I _ _ O
L _ _ O
E _ _ O
R _ _ O
Java _ _ O
Byteco _ _ O
de _ _ O
Java _ _ O
VM _ _ O
Application _ _ O
Software _ _ O
Level _ _ O

VM _ _ O
Pros _ _ O
and _ _ O
Cons _ _ O
Pros _ _ O
: _ _ O
Cons _ _ O
: _ _ O
• _ _ O
Code _ _ O
and _ _ O
bytecode _ _ O
• _ _ O
Generally _ _ O
slower _ _ O
works _ _ O
independently _ _ O
runtime _ _ O
( _ _ O
than _ _ O
from _ _ O
the _ _ O
platform _ _ O
natively _ _ O
compiled _ _ O
( _ _ O
operating _ _ O
system _ _ O
) _ _ O
it _ _ O
languages _ _ O
like _ _ O
C++ _ _ O
) _ _ O
. _ _ O
was _ _ O
compiled _ _ O
on _ _ O
. _ _ O
• _ _ O
Arguably _ _ O
provides _ _ O
• _ _ O
More _ _ O
secure _ _ O
due _ _ O
to _ _ O
less _ _ O
fine-tuned _ _ O
runtime _ _ O
isolation _ _ O
. _ _ O
usage _ _ O
of _ _ O
lower _ _ O
levels _ _ O
of _ _ O
software _ _ O

My _ _ O
First _ _ O
Program _ _ O
COMPILING _ _ O
AND _ _ O
COMMENTING _ _ O

Hello _ _ O
World _ _ O
! _ _ O
• _ _ O
A _ _ O
" _ _ O
Hello _ _ O
World _ _ O
" _ _ O
program _ _ O
is _ _ O
frequently _ _ O
a _ _ O
student _ _ O
's _ _ O
first _ _ O
program _ _ O
of _ _ O
any _ _ O
language _ _ O
. _ _ O
• _ _ O
Similar _ _ O
to _ _ O
learning _ _ O
" _ _ O
Hello _ _ O
" _ _ O
greetings _ _ O
in _ _ O
other _ _ O
languages _ _ O
. _ _ O
• _ _ O
Note _ _ O
: _ _ O
all _ _ O
code _ _ O
is _ _ O
CaSe _ _ O
SeNsItIvE _ _ O

Hello _ _ O
World _ _ O
! _ _ O
public _ _ O
class _ _ O
HelloWorld _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"Hello _ _ O
World _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
HelloWorld _ _ O

Compilation _ _ O

Compiling _ _ O
javac _ _ O
– _ _ O
compiling _ _ O
a _ _ O
java _ _ O
file _ _ O
( _ _ O
javac _ _ O
FileName.java _ _ O
) _ _ O
java _ _ O
– _ _ O
running _ _ O
a _ _ O
compiled _ _ O
java _ _ O
file _ _ O
( _ _ O
java _ _ O
FileName _ _ O
) _ _ O

Hello _ _ O
World _ _ O
! _ _ O
public _ _ O
class _ _ O
HelloWorld _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"Hello _ _ O
World _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
HelloWorld _ _ O

System.out.println _ _ O
( _ _ O
"Hello _ _ O
World _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
• _ _ O
Statement _ _ O
• _ _ O
Ends _ _ O
with _ _ O
a _ _ O
semicolon _ _ O
( _ _ O
like _ _ O
a _ _ O
period _ _ O
in _ _ O
English _ _ O
) _ _ O
• _ _ O
Prints _ _ O
stuff _ _ O
– _ _ O
Where _ _ O
to _ _ O
? _ _ O
– _ _ O
What _ _ O
stuff _ _ O
? _ _ O
• _ _ O
To _ _ O
the _ _ O
console _ _ O
• _ _ O
Strings _ _ O

Hello _ _ O
World _ _ O
v2 _ _ O
public _ _ O
class _ _ O
Hello _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"My _ _ O
name _ _ O
is _ _ O
Nathan _ _ O
Ong _ _ O
! _ _ O
YAAAAYYYY _ _ O
LALALALA _ _ O
RANDOM _ _ O
TYPING _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Hello _ _ O
What _ _ O
is _ _ O
the _ _ O
output _ _ O
? _ _ O

String _ _ O
• _ _ O
Characters _ _ O
in _ _ O
between _ _ O
quotation _ _ O
marks _ _ O
• _ _ O
Some _ _ O
valid _ _ O
Strings _ _ O
– _ _ O
" _ _ O
Hi _ _ O
" _ _ O
– _ _ O
" _ _ O
# _ _ O
& _ _ O
^@ _ _ O
! _ _ O
* _ _ O
( _ _ O
QQQQQQQQ _ _ O
" _ _ O
• _ _ O
What _ _ O
if _ _ O
we _ _ O
want _ _ O
quotation _ _ O
marks _ _ O
in _ _ O
the _ _ O
String _ _ O
? _ _ O

\ _ _ O
• _ _ O
Escape _ _ O
character _ _ O
\ _ _ O
tells _ _ O
the _ _ O
computer _ _ O
that _ _ O
the _ _ O
next _ _ O
character _ _ O
should _ _ O
not _ _ O
be _ _ O
taken _ _ O
literally _ _ O
– _ _ O
\ _ _ O
" _ _ O
– _ _ O
Tab _ _ O
? _ _ O
\t _ _ O
– _ _ O
New _ _ O
line _ _ O
? _ _ O
\n _ _ O
– _ _ O
Slash _ _ O
? _ _ O
\\ _ _ O
• _ _ O
" _ _ O
Java _ _ O
said _ _ O
, _ _ O
" _ _ O
OMG _ _ O
SYNTAX _ _ O
ERROR _ _ O
" _ _ O
" _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
make _ _ O
the _ _ O
line _ _ O
above _ _ O
a _ _ O
valid _ _ O
String _ _ O
? _ _ O

Hello _ _ O
World _ _ O
v2 _ _ O
public _ _ O
class _ _ O
Hello _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"My _ _ O
name _ _ O
is _ _ O
Nathan _ _ O
Ong _ _ O
! _ _ O
YAAAAYYYY _ _ O
LALALALA _ _ O
RANDOM _ _ O
TYPING _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Hello _ _ O
What _ _ O
if _ _ O
I _ _ O
want _ _ O
to _ _ O
use _ _ O
my _ _ O
name _ _ O
in _ _ O
another _ _ O
print _ _ O
statement _ _ O
? _ _ O

Recycling _ _ O
• _ _ O
What _ _ O
if _ _ O
I _ _ O
want _ _ O
to _ _ O
use _ _ O
the _ _ O
string _ _ O
somewhere _ _ O
else _ _ O
? _ _ O
• _ _ O
I _ _ O
'm _ _ O
so _ _ O
lazy _ _ O
, _ _ O
I _ _ O
do _ _ O
n't _ _ O
want _ _ O
to _ _ O
type _ _ O
in _ _ O
my _ _ O
name _ _ O
when _ _ O
printing _ _ O
it _ _ O
out _ _ O
all _ _ O
the _ _ O
time _ _ O
. _ _ O
• _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
• _ _ O
Now _ _ O
I _ _ O
can _ _ O
call _ _ O
name _ _ O
wherever _ _ O
I _ _ O
want _ _ O
( _ _ O
not _ _ O
really _ _ O
) _ _ O
! _ _ O
-- _ _ O
> _ _ O
Variables _ _ O
< _ _ O
-- _ _ O

String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O

String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
Typ _ _ O
e _ _ O

String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O

String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
valu _ _ O
e _ _ O

To _ _ O
Declare _ _ O
a _ _ O
Variable _ _ O
: _ _ O
Type _ _ O
name _ _ O
= _ _ O
value _ _ O
; _ _ O

To _ _ O
Use _ _ O
a _ _ O
Variable _ _ O
: _ _ O
name _ _ O

Naming _ _ O
• _ _ O
The _ _ O
name _ _ O
of _ _ O
a _ _ O
variable _ _ O
( _ _ O
and _ _ O
other _ _ O
things _ _ O
) _ _ O
are _ _ O
called _ _ O
identifiers _ _ O
. _ _ O
• _ _ O
There _ _ O
are _ _ O
some _ _ O
rules _ _ O
regarding _ _ O
valid _ _ O
identifiers _ _ O
, _ _ O
and _ _ O
further _ _ O
conventions _ _ O
that _ _ O
you _ _ O
should _ _ O
follow _ _ O
. _ _ O

Valid _ _ O
Identifiers _ _ O
• _ _ O
You _ _ O
must _ _ O
have _ _ O
at _ _ O
least _ _ O
one _ _ O
character _ _ O
in _ _ O
the _ _ O
name _ _ O
• _ _ O
You _ _ O
can _ _ O
only _ _ O
use _ _ O
alphanumeric _ _ O
characters _ _ O
( _ _ O
letters _ _ O
and _ _ O
numbers _ _ O
) _ _ O
, _ _ O
underscores _ _ O
( _ _ O
_ _ _ O
) _ _ O
, _ _ O
and _ _ O
dollar _ _ O
signs _ _ O
( _ _ O
$ _ _ O
) _ _ O
in _ _ O
the _ _ O
name _ _ O
• _ _ O
You _ _ O
CANNOT _ _ O
use _ _ O
a _ _ O
number _ _ O
as _ _ O
the _ _ O
first _ _ O
character _ _ O
. _ _ O
• _ _ O
You _ _ O
CANNOT _ _ O
use _ _ O
reserved _ _ O
Java _ _ O
keywords _ _ O
. _ _ O

Reserved _ _ O
Java _ _ O
Keywords _ _ O
boolean _ _ O
do _ _ O
int _ _ O
static _ _ O
break _ _ O
double _ _ O
long _ _ O
super _ _ O
byte _ _ O
else _ _ O
new _ _ O
switch _ _ O
case _ _ O
final _ _ O
package _ _ O
this _ _ O
catch _ _ O
finally _ _ O
private _ _ O
throw _ _ O
char _ _ O
float _ _ O
protected _ _ O
throws _ _ O
class _ _ O
for _ _ O
public _ _ O
try _ _ O
continue _ _ O
if _ _ O
return _ _ O
void _ _ O
default _ _ O
import _ _ O
short _ _ O
while _ _ O

Conventional _ _ O
Naming _ _ O
• _ _ O
Variables _ _ O
and _ _ O
functions _ _ O
: _ _ O
lowerCamelCase _ _ O
– _ _ O
First _ _ O
word _ _ O
starts _ _ O
with _ _ O
a _ _ O
lowercase _ _ O
letter _ _ O
, _ _ O
subsequent _ _ O
words _ _ O
have _ _ O
uppercase _ _ O
first _ _ O
letters _ _ O
• _ _ O
Class _ _ O
names _ _ O
: _ _ O
UpperCamelCase _ _ O
– _ _ O
All _ _ O
words _ _ O
have _ _ O
uppercase _ _ O
first _ _ O
letters _ _ O
• _ _ O
Never _ _ O
use _ _ O
dollar _ _ O
signs _ _ O
or _ _ O
underscores _ _ O

Hello _ _ O
World _ _ O
v3 _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
name _ _ O
) _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
" _ _ O
is _ _ O
") _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
name _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O
What _ _ O
is _ _ O
the _ _ O
output _ _ O
? _ _ O

Oh _ _ O
I _ _ O
changed _ _ O
my _ _ O
name…Nathan _ _ O
Ong _ _ O
is _ _ O
no _ _ O
longer _ _ O
Nathan _ _ O
Ong…What _ _ O
am _ _ O
I _ _ O
going _ _ O
to _ _ O
do _ _ O
? _ _ O

What _ _ O
can _ _ O
we _ _ O
do _ _ O
with _ _ O
it _ _ O
? _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
name _ _ O
) _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
" _ _ O
is _ _ O
") _ _ O
; _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Brandon _ _ O
Ong _ _ O
" _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
name _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O
Can _ _ O
we _ _ O
do _ _ O
this _ _ O
? _ _ O
No _ _ O
, _ _ O
because _ _ O
we _ _ O
re-declared _ _ O
a _ _ O
variable _ _ O
! _ _ O

Declaring _ _ O
a _ _ O
new _ _ O
variable _ _ O
: _ _ O
Type _ _ O
name _ _ O
= _ _ O
value _ _ O
; _ _ O
Changing _ _ O
the _ _ O
old _ _ O
variable _ _ O
: _ _ O
name _ _ O
= _ _ O
newValue _ _ O
; _ _ O

What _ _ O
can _ _ O
we _ _ O
do _ _ O
with _ _ O
it _ _ O
? _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
name _ _ O
) _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
" _ _ O
is _ _ O
") _ _ O
; _ _ O
name _ _ O
= _ _ O
" _ _ O
Brandon _ _ O
Ong _ _ O
" _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
name _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O
What _ _ O
is _ _ O
the _ _ O
output _ _ O
? _ _ O

Okay _ _ O
so _ _ O
I _ _ O
'm _ _ O
not _ _ O
really _ _ O
changing _ _ O
my _ _ O
name _ _ O
. _ _ O
Regardless _ _ O
, _ _ O
the _ _ O
output _ _ O
is _ _ O
really _ _ O
annoying _ _ O
. _ _ O
How _ _ O
do _ _ O
we _ _ O
put _ _ O
it _ _ O
all _ _ O
in _ _ O
one _ _ O
line _ _ O
? _ _ O

What _ _ O
can _ _ O
we _ _ O
do _ _ O
with _ _ O
it _ _ O
? _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
System.out.print _ _ O
( _ _ O
name _ _ O
) _ _ O
; _ _ O
System.out.print _ _ O
( _ _ O
" _ _ O
is _ _ O
") _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
name _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O
Use _ _ O
print _ _ O
instead _ _ O
. _ _ O
No _ _ O
new _ _ O
line _ _ O
added _ _ O
. _ _ O
Saying _ _ O
print _ _ O
print _ _ O
print _ _ O
is _ _ O
kind _ _ O
of _ _ O
annoying _ _ O
… _ _ O

* _ _ O
cough _ _ O
* _ _ O
\n _ _ O
* _ _ O
cough _ _ O
* _ _ O
Ahhhhh _ _ O
, _ _ O
that _ _ O
's _ _ O
better _ _ O
. _ _ O
But _ _ O
just _ _ O
for _ _ O
fun _ _ O
, _ _ O
how _ _ O
do _ _ O
we _ _ O
get _ _ O
it _ _ O
back _ _ O
to _ _ O
the _ _ O
multiple-line _ _ O
version _ _ O
using _ _ O
the _ _ O
print _ _ O
statements _ _ O
instead _ _ O
of _ _ O
println _ _ O
? _ _ O

What _ _ O
can _ _ O
we _ _ O
do _ _ O
with _ _ O
it _ _ O
? _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
System.out.print _ _ O
( _ _ O
name _ _ O
) _ _ O
; _ _ O
System.out.print _ _ O
( _ _ O
"\n _ _ O
is _ _ O
\n _ _ O
" _ _ O
) _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
name _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O
Getting _ _ O
the _ _ O
same _ _ O
output _ _ O
from _ _ O
before _ _ O
with _ _ O
only _ _ O
print _ _ O
. _ _ O
But _ _ O
we _ _ O
do _ _ O
n't _ _ O
like _ _ O
that _ _ O
, _ _ O
so _ _ O
we _ _ O
'll _ _ O
take _ _ O
that _ _ O
out _ _ O
Saying _ _ O
print _ _ O
print _ _ O
print _ _ O
is _ _ O
kind _ _ O
of _ _ O
annoying _ _ O
… _ _ O

What _ _ O
can _ _ O
we _ _ O
do _ _ O
with _ _ O
it _ _ O
? _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
name _ _ O
+ _ _ O
" _ _ O
is _ _ O
" _ _ O
+ _ _ O
name _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O
Using _ _ O
+ _ _ O
with _ _ O
Strings _ _ O
is _ _ O
called _ _ O
concatenation _ _ O
( _ _ O
Note _ _ O
: _ _ O
there _ _ O
's _ _ O
no _ _ O
such _ _ O
thing _ _ O
as _ _ O
– _ _ O
for _ _ O
Strings _ _ O
) _ _ O

What _ _ O
can _ _ O
we _ _ O
do _ _ O
with _ _ O
it _ _ O
? _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
name _ _ O
+ _ _ O
" _ _ O
is _ _ O
" _ _ O
+ _ _ O
name _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O
Concatenation _ _ O
does _ _ O
not _ _ O
add _ _ O
spaces _ _ O
automatically _ _ O
. _ _ O

Nicknames _ _ O
• _ _ O
System.out.println _ _ O
( _ _ O
name _ _ O
+ _ _ O
" _ _ O
is _ _ O
" _ _ O
+ _ _ O
name _ _ O
) _ _ O
; _ _ O
• _ _ O
Seems _ _ O
useful _ _ O
, _ _ O
like _ _ O
if _ _ O
someone _ _ O
had _ _ O
a _ _ O
nickname _ _ O
• _ _ O
System.out.println _ _ O
( _ _ O
nickName _ _ O
+ _ _ O
" _ _ O
is _ _ O
" _ _ O
+ _ _ O
name _ _ O
) _ _ O
; _ _ O
• _ _ O
But _ _ O
I _ _ O
do _ _ O
n't _ _ O
have _ _ O
one…how _ _ O
do _ _ O
we _ _ O
make _ _ O
it _ _ O
so _ _ O
it _ _ O
does _ _ O
n't _ _ O
matter _ _ O
? _ _ O

Nicknames _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
String _ _ O
nickName _ _ O
= _ _ O
name _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
nickName _ _ O
+ _ _ O
" _ _ O
is _ _ O
" _ _ O
+ _ _ O
name _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O
Oh _ _ O
so _ _ O
we _ _ O
can _ _ O
make _ _ O
nickName _ _ O
the _ _ O
exact _ _ O
same _ _ O
thing _ _ O
as _ _ O
name _ _ O
without _ _ O
having _ _ O
to _ _ O
type _ _ O
everything _ _ O
again _ _ O
! _ _ O
What _ _ O
is _ _ O
the _ _ O
output _ _ O
? _ _ O

Same _ _ O
thing _ _ O

Comments _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
String _ _ O
nickName _ _ O
= _ _ O
name _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
nickName _ _ O
+ _ _ O
" _ _ O
is _ _ O
" _ _ O
+ _ _ O
name _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O

Commenting _ _ O
• _ _ O
You _ _ O
must _ _ O
comment _ _ O
every _ _ O
line _ _ O
of _ _ O
useful _ _ O
code _ _ O
. _ _ O
• _ _ O
Do _ _ O
n't _ _ O
forget _ _ O
the _ _ O
/ _ _ O
/ _ _ O
• _ _ O
If _ _ O
you _ _ O
need _ _ O
a _ _ O
block _ _ O
of _ _ O
comments _ _ O
, _ _ O
use _ _ O
/ _ _ O
* _ _ O
* _ _ O
/ _ _ O
• _ _ O
Everything _ _ O
in _ _ O
between _ _ O
is _ _ O
commented _ _ O
out _ _ O
• _ _ O
Careful _ _ O
about _ _ O
nested _ _ O
comments _ _ O
… _ _ O
• _ _ O
/ _ _ O
* _ _ O
This _ _ O
/ _ _ O
* _ _ O
Comment _ _ O
Ends _ _ O
* _ _ O
/ _ _ O
Here???* _ _ O
/ _ _ O

Line-by-Line _ _ O
Commenting _ _ O
/ _ _ O
/ _ _ O
The _ _ O
file _ _ O
name _ _ O
^Bad _ _ O
comment _ _ O
/ _ _ O
/ _ _ O
Prints _ _ O
out _ _ O
statistics _ _ O
for _ _ O
/ _ _ O
/ _ _ O
Nathan _ _ O
Ong _ _ O
^Good _ _ O
Comment _ _ O
public _ _ O
class _ _ O
Name _ _ O

Line-by-Line _ _ O
Commenting _ _ O
/ _ _ O
/ _ _ O
The _ _ O
main _ _ O
method _ _ O
^Bad _ _ O
comment _ _ O
/ _ _ O
/ _ _ O
The _ _ O
program _ _ O
begins _ _ O
here _ _ O
^Good _ _ O
Comment _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O

Line-by-Line _ _ O
Commenting _ _ O
/ _ _ O
/ _ _ O
A _ _ O
String _ _ O
^Bad _ _ O
comment _ _ O
/ _ _ O
/ _ _ O
The _ _ O
first _ _ O
name _ _ O
held _ _ O
in _ _ O
a _ _ O
/ _ _ O
/ _ _ O
String _ _ O
^Good _ _ O
Comment _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
" _ _ O
; _ _ O

Line-by-Line _ _ O
Commenting _ _ O
/ _ _ O
/ _ _ O
Prints _ _ O
out _ _ O
stuff _ _ O
^Bad _ _ O
comment _ _ O
/ _ _ O
/ _ _ O
Prints _ _ O
out _ _ O
the _ _ O
names _ _ O
^Okay _ _ O
comment _ _ O
/*Prints _ _ O
the _ _ O
nickname _ _ O
and _ _ O
links _ _ O
it _ _ O
to _ _ O
the _ _ O
original _ _ O
name.* _ _ O
/ _ _ O
^Good _ _ O
comment _ _ O
System.out.println _ _ O
( _ _ O
nickName _ _ O
+ _ _ O
" _ _ O
is _ _ O
" _ _ O
+ _ _ O
name _ _ O
) _ _ O
; _ _ O

Recap _ _ O
• _ _ O
Hello _ _ O
World _ _ O
! _ _ O
• _ _ O
System.out.println _ _ O
( _ _ O
and _ _ O
print _ _ O
) _ _ O
• _ _ O
Strings _ _ O
and _ _ O
String _ _ O
concatenation _ _ O
• _ _ O
Compiling _ _ O
and _ _ O
running _ _ O
• _ _ O
Variables _ _ O
Type _ _ O
name _ _ O
= _ _ O
value _ _ O
; _ _ O
name _ _ O
= _ _ O
newValue _ _ O
; _ _ O
• _ _ O
Commenting _ _ O



