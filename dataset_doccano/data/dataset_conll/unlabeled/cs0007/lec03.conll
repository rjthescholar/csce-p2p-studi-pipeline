unlabeled|cs0007|lec03
-DOCSTART- -X- -X- O

CS _ _ O
0007 _ _ O
: _ _ O
Introduction _ _ O
to _ _ O
Java _ _ O
Lecture _ _ O
3 _ _ O
Nathan _ _ O
Ong _ _ O
University _ _ O
of _ _ O
Pittsburgh _ _ O
September _ _ O
8 _ _ O
, _ _ O
2016 _ _ O

Primitive _ _ O
Types _ _ O
NO _ _ O
, _ _ O
STRING _ _ O
IS _ _ O
NOT _ _ O
A _ _ O
PRIMITIVE _ _ O

I _ _ O
Do _ _ O
n't _ _ O
Want _ _ O
to _ _ O
Do _ _ O
Strings _ _ O
Anymore _ _ O
. _ _ O
Is _ _ O
n't _ _ O
There _ _ O
Anything _ _ O
Else _ _ O
? _ _ O
• _ _ O
Strings _ _ O
are _ _ O
okay _ _ O
, _ _ O
but _ _ O
they _ _ O
do _ _ O
n't _ _ O
do _ _ O
much _ _ O
for _ _ O
us _ _ O
. _ _ O
• _ _ O
What _ _ O
about _ _ O
representing _ _ O
numbers _ _ O
and _ _ O
other _ _ O
things _ _ O
? _ _ O
• _ _ O
We _ _ O
must _ _ O
use _ _ O
the _ _ O
building _ _ O
blocks _ _ O
of _ _ O
Java _ _ O
! _ _ O
• _ _ O
Primitive _ _ O
Values _ _ O
: _ _ O
– _ _ O
– _ _ O
– _ _ O
– _ _ O
– _ _ O
– _ _ O
– _ _ O
– _ _ O
boolean _ _ O
byte _ _ O
char _ _ O
double _ _ O
float _ _ O
int _ _ O
long _ _ O
short _ _ O

I _ _ O
Do _ _ O
n't _ _ O
Want _ _ O
to _ _ O
Do _ _ O
Strings _ _ O
Anymore _ _ O
. _ _ O
Is _ _ O
n't _ _ O
There _ _ O
Anything _ _ O
Else _ _ O
? _ _ O
• _ _ O
Most _ _ O
useful _ _ O
– _ _ O
– _ _ O
– _ _ O
– _ _ O
boolean _ _ O
char _ _ O
double _ _ O
int _ _ O
• _ _ O
Second _ _ O
tier _ _ O
– _ _ O
byte _ _ O
– _ _ O
long _ _ O
• _ _ O
Primitive _ _ O
Values _ _ O
: _ _ O
– _ _ O
– _ _ O
– _ _ O
– _ _ O
– _ _ O
– _ _ O
– _ _ O
– _ _ O
boolean _ _ O
byte _ _ O
char _ _ O
double _ _ O
float _ _ O
int _ _ O
long _ _ O
short _ _ O

boolean _ _ O
• _ _ O
Two _ _ O
values _ _ O
only _ _ O
: _ _ O
– _ _ O
true _ _ O
– _ _ O
false _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
declare _ _ O
one _ _ O
? _ _ O

Type _ _ O
name _ _ O
= _ _ O
value _ _ O
; _ _ O

boolean _ _ O
name _ _ O
= _ _ O
value _ _ O
; _ _ O

boolean _ _ O
yes _ _ O
= _ _ O
true _ _ O
; _ _ O

char _ _ O
• _ _ O
Characters _ _ O
in _ _ O
single _ _ O
quotation _ _ O
marks _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
declare _ _ O
one _ _ O
? _ _ O

Type _ _ O
name _ _ O
= _ _ O
value _ _ O
; _ _ O

char _ _ O
mander _ _ O
= _ _ O
' _ _ O
z _ _ O
' _ _ O
; _ _ O

double _ _ O
• _ _ O
Decimal _ _ O
numbers _ _ O
( _ _ O
not _ _ O
whole _ _ O
numbers _ _ O
) _ _ O
• _ _ O
When _ _ O
providing _ _ O
a _ _ O
value _ _ O
, _ _ O
it _ _ O
must _ _ O
have _ _ O
at _ _ O
least _ _ O
one _ _ O
decimal _ _ O
place _ _ O
( _ _ O
2 _ _ O
should _ _ O
be _ _ O
2.0 _ _ O
) _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
declare _ _ O
one _ _ O
? _ _ O

double _ _ O
pi _ _ O
= _ _ O
3.14 _ _ O
; _ _ O

int _ _ O
• _ _ O
Integers _ _ O
( _ _ O
whole _ _ O
numbers _ _ O
) _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
declare _ _ O
one _ _ O
? _ _ O

int _ _ O
zero _ _ O
= _ _ O
0 _ _ O
; _ _ O

byte _ _ O
• _ _ O
Special _ _ O
tiny _ _ O
whole _ _ O
number _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
declare _ _ O
one _ _ O
? _ _ O

byte _ _ O
kiloB _ _ O
= _ _ O
( _ _ O
byte _ _ O
) _ _ O
127 _ _ O
; _ _ O

long _ _ O
• _ _ O
Special _ _ O
larger _ _ O
whole _ _ O
number _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
declare _ _ O
one _ _ O
? _ _ O

long _ _ O
timeAgo _ _ O
= _ _ O
123456789L _ _ O
; _ _ O

short _ _ O
• _ _ O
Special _ _ O
smaller _ _ O
whole _ _ O
number _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
declare _ _ O
one _ _ O
? _ _ O

short _ _ O
y _ _ O
= _ _ O
( _ _ O
short _ _ O
) _ _ O
-4 _ _ O
; _ _ O

float _ _ O
• _ _ O
Special _ _ O
smaller _ _ O
double _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
declare _ _ O
one _ _ O
? _ _ O

float _ _ O
away _ _ O
= _ _ O
3.5f _ _ O
; _ _ O

Why _ _ O
is _ _ O
String _ _ O
not _ _ O
purple _ _ O
? _ _ O
• _ _ O
Why _ _ O
is _ _ O
String _ _ O
not _ _ O
a _ _ O
primitive _ _ O
value _ _ O
? _ _ O
• _ _ O
What _ _ O
is _ _ O
a _ _ O
String _ _ O
made _ _ O
up _ _ O
of _ _ O
? _ _ O
• _ _ O
Characters _ _ O
 _ _ O
char _ _ O

WARNING _ _ O
• _ _ O
char _ _ O
uses _ _ O
SINGLE _ _ O
QUOTATIONS _ _ O
• _ _ O
String _ _ O
uses _ _ O
DOUBLE _ _ O
QUOTATIONS _ _ O
• _ _ O
String _ _ O
can _ _ O
be _ _ O
empty _ _ O
! _ _ O
( _ _ O
" _ _ O
" _ _ O
 _ _ O
legal _ _ O
) _ _ O
• _ _ O
char _ _ O
CANNOT _ _ O
be _ _ O
empty _ _ O
! _ _ O
( _ _ O

Okay _ _ O
, _ _ O
Let _ _ O
's _ _ O
Do _ _ O
Some _ _ O
Stuff _ _ O
Now _ _ O
! _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
firstName _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
" _ _ O
; _ _ O
char _ _ O
midInitial _ _ O
= _ _ O
' _ _ O
R _ _ O
' _ _ O
; _ _ O
String _ _ O
lastName _ _ O
= _ _ O
" _ _ O
Ong _ _ O
" _ _ O
; _ _ O
int _ _ O
age _ _ O
= _ _ O
19 _ _ O
; _ _ O
boolean _ _ O
hasFacebook _ _ O
= _ _ O
true _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
firstName _ _ O
+ _ _ O
" _ _ O
" _ _ O
+ _ _ O
midInitial _ _ O
+ _ _ O
" _ _ O
" _ _ O
+ _ _ O
lastName _ _ O
+ _ _ O
" _ _ O
, _ _ O
age _ _ O
: _ _ O
" _ _ O
+ _ _ O
age _ _ O
+ _ _ O
" _ _ O
, _ _ O
has _ _ O
a _ _ O
Facebook _ _ O
: _ _ O
" _ _ O
+ _ _ O
hasFacebook _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O
What _ _ O
is _ _ O
the _ _ O
output _ _ O
? _ _ O

Wait _ _ O
Whaaaaa _ _ O
? _ _ O
• _ _ O
How _ _ O
did _ _ O
he _ _ O
add _ _ O
all _ _ O
of _ _ O
those _ _ O
things _ _ O
together _ _ O
? _ _ O
? _ _ O
? _ _ O
Is _ _ O
that _ _ O
even _ _ O
legal _ _ O
? _ _ O
Is _ _ O
he _ _ O
cheating _ _ O
? _ _ O
He _ _ O
must _ _ O
have _ _ O
hacked _ _ O
Java _ _ O
. _ _ O
• _ _ O
Concatenation _ _ O
with _ _ O
any _ _ O
String _ _ O
forces _ _ O
other _ _ O
values _ _ O
to _ _ O
use _ _ O
their _ _ O
String _ _ O
representations _ _ O
! _ _ O
• _ _ O
The _ _ O
value _ _ O
19 _ _ O
is _ _ O
now _ _ O
" _ _ O
19 _ _ O
" _ _ O
! _ _ O
• _ _ O
The _ _ O
value _ _ O
true _ _ O
is _ _ O
now _ _ O
" _ _ O
true _ _ O
" _ _ O
! _ _ O
• _ _ O
So _ _ O
again _ _ O
, _ _ O
what _ _ O
is _ _ O
the _ _ O
output _ _ O
? _ _ O

Hmm _ _ O
, _ _ O
no _ _ O
one _ _ O
really _ _ O
says _ _ O
" _ _ O
has _ _ O
a _ _ O
Facebook _ _ O
: _ _ O
true _ _ O
" _ _ O
Now _ _ O
what _ _ O
? _ _ O
How _ _ O
do _ _ O
we _ _ O
fix _ _ O
this _ _ O
? _ _ O

Range _ _ O
of _ _ O
Values _ _ O
• _ _ O
• _ _ O
• _ _ O
• _ _ O
• _ _ O
• _ _ O
• _ _ O
• _ _ O
boolean _ _ O
– _ _ O
false _ _ O
, _ _ O
true _ _ O
byte _ _ O
– _ _ O
-2^7 _ _ O
, _ _ O
2^7 _ _ O
- _ _ O
1 _ _ O
char _ _ O
– _ _ O
ASCII _ _ O
double _ _ O
– _ _ O
-∞ _ _ O
, _ _ O
+ _ _ O
∞ _ _ O
; _ _ O
with _ _ O
limited _ _ O
precision _ _ O
, _ _ O
and _ _ O
NaN _ _ O
( _ _ O
Not _ _ O
a _ _ O
Number _ _ O
) _ _ O
float _ _ O
– _ _ O
-∞ _ _ O
, _ _ O
+ _ _ O
∞ _ _ O
; _ _ O
with _ _ O
limited _ _ O
precision _ _ O
, _ _ O
and _ _ O
NaN _ _ O
( _ _ O
Not _ _ O
a _ _ O
Number _ _ O
) _ _ O
int _ _ O
– _ _ O
-2^31 _ _ O
, _ _ O
2^31 _ _ O
- _ _ O
1 _ _ O
long _ _ O
– _ _ O
-2^63 _ _ O
, _ _ O
2^63 _ _ O
- _ _ O
1 _ _ O
short _ _ O
– _ _ O
-2^15 _ _ O
, _ _ O
2^15 _ _ O
- _ _ O
1 _ _ O

This _ _ O
is _ _ O
great _ _ O
and _ _ O
all _ _ O
, _ _ O
but _ _ O
I _ _ O
really _ _ O
want _ _ O
to _ _ O
be _ _ O
able _ _ O
to _ _ O
store _ _ O
more _ _ O
useful _ _ O
info _ _ O
• _ _ O
Feels _ _ O
limited _ _ O
if _ _ O
we _ _ O
have _ _ O
to _ _ O
stay _ _ O
with _ _ O
the _ _ O
Type _ _ O
name _ _ O
= _ _ O
value _ _ O
; _ _ O
structure _ _ O
• _ _ O
And _ _ O
thus _ _ O
we _ _ O
can _ _ O
introduce _ _ O
a _ _ O
new _ _ O
structure _ _ O

Type _ _ O
name _ _ O
= _ _ O
expression _ _ O
; _ _ O

boolean _ _ O
• _ _ O
Two _ _ O
values _ _ O
only _ _ O
: _ _ O
– _ _ O
true _ _ O
– _ _ O
false _ _ O
• _ _ O
We _ _ O
can _ _ O
also _ _ O
assign _ _ O
the _ _ O
variable _ _ O
an _ _ O
expression _ _ O
to _ _ O
be _ _ O
evaluated _ _ O
. _ _ O

boolean _ _ O
Operators _ _ O
& _ _ O
& _ _ O
|| _ _ O
! _ _ O
– _ _ O
Logical _ _ O
AND _ _ O
– _ _ O
Logical _ _ O
OR _ _ O
– _ _ O
Logical _ _ O
NOT _ _ O
boolean _ _ O
needUmb _ _ O
= _ _ O
rain _ _ O
|| _ _ O
cloud _ _ O
; _ _ O
Parentheses _ _ O
can _ _ O
be _ _ O
used _ _ O
as _ _ O
a _ _ O
way _ _ O
to _ _ O
group _ _ O

Truth _ _ O
Tables _ _ O
A _ _ O
B _ _ O
A _ _ O
& _ _ O
& _ _ O
B _ _ O
T _ _ O
T _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O
F _ _ O

Truth _ _ O
Tables _ _ O
A _ _ O
B _ _ O
A||B _ _ O
T _ _ O
T _ _ O
T _ _ O
T _ _ O
F _ _ O
T _ _ O
F _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O

Truth _ _ O
Tables _ _ O
A _ _ O
! _ _ O
A _ _ O
T _ _ O
F _ _ O
F _ _ O
T _ _ O

Order _ _ O
of _ _ O
Operators _ _ O
1 _ _ O
. _ _ O
2 _ _ O
. _ _ O
3 _ _ O
. _ _ O
! _ _ O
– _ _ O
Logical _ _ O
NOT _ _ O
& _ _ O
& _ _ O
– _ _ O
Logical _ _ O
AND _ _ O
|| _ _ O
– _ _ O
Logical _ _ O
OR _ _ O
boolean _ _ O
needUmb _ _ O
= _ _ O
rain _ _ O
|| _ _ O
! _ _ O
sun _ _ O
; _ _ O

Conditional _ _ O
Logic _ _ O
• _ _ O
“ _ _ O
If _ _ O
… _ _ O
then _ _ O
… _ _ O
” _ _ O
• _ _ O
Does _ _ O
not _ _ O
have _ _ O
an _ _ O
operator _ _ O
in _ _ O
Java _ _ O
A _ _ O
B _ _ O
AB _ _ O
T _ _ O
T _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
T _ _ O

Conditional _ _ O
Logic _ _ O
• _ _ O
We _ _ O
can _ _ O
use _ _ O
an _ _ O
equivalent _ _ O
statement _ _ O
to _ _ O
get _ _ O
the _ _ O
result _ _ O
we _ _ O
want _ _ O
. _ _ O
A _ _ O
B _ _ O
AB _ _ O
T _ _ O
T _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
T _ _ O

Conditional _ _ O
Logic _ _ O
• _ _ O
We _ _ O
can _ _ O
use _ _ O
an _ _ O
equivalent _ _ O
statement _ _ O
to _ _ O
get _ _ O
the _ _ O
result _ _ O
we _ _ O
want _ _ O
. _ _ O
A _ _ O
B _ _ O
AB _ _ O
T _ _ O
T _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
T _ _ O

Conditional _ _ O
Logic _ _ O
• _ _ O
We _ _ O
can _ _ O
use _ _ O
an _ _ O
equivalent _ _ O
statement _ _ O
to _ _ O
get _ _ O
the _ _ O
result _ _ O
we _ _ O
want _ _ O
. _ _ O
A _ _ O
B _ _ O
! _ _ O
A||B _ _ O
T _ _ O
T _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
F _ _ O
T _ _ O
T _ _ O
F _ _ O
F _ _ O
T _ _ O



