unlabeled|cs0007|lec08
-DOCSTART- -X- -X- O

CS _ _ O
0007 _ _ O
: _ _ O
Introduction _ _ O
to _ _ O
Java _ _ O
Lecture _ _ O
8 _ _ O
Nathan _ _ O
Ong _ _ O
University _ _ O
of _ _ O
Pittsburgh _ _ O
September _ _ O
27 _ _ O
, _ _ O
2016 _ _ O

Announcement _ _ O
• _ _ O
Your _ _ O
midterm _ _ O
exam _ _ O
is _ _ O
scheduled _ _ O
for _ _ O
Tuesday _ _ O
, _ _ O
October _ _ O
11 _ _ O
, _ _ O
during _ _ O
the _ _ O
normal _ _ O
class _ _ O
period _ _ O
. _ _ O
• _ _ O
Anything _ _ O
from _ _ O
the _ _ O
lecture _ _ O
, _ _ O
homework _ _ O
, _ _ O
quiz _ _ O
, _ _ O
labs _ _ O
, _ _ O
is _ _ O
fair _ _ O
game _ _ O
. _ _ O
• _ _ O
You _ _ O
should _ _ O
also _ _ O
be _ _ O
comfortable _ _ O
with _ _ O
analyzing _ _ O
previously _ _ O
unseen _ _ O
code _ _ O
in _ _ O
conjunction _ _ O
with _ _ O
using _ _ O
the _ _ O
API _ _ O
( _ _ O
as _ _ O
seen _ _ O
in _ _ O
several _ _ O
homeworks _ _ O
) _ _ O
. _ _ O

Function _ _ O
Components _ _ O
1 _ _ O
. _ _ O
2 _ _ O
. _ _ O
3 _ _ O
. _ _ O
Function _ _ O
4 _ _ O
. _ _ O
Header _ _ O
5 _ _ O
. _ _ O
Function _ _ O
Body _ _ O
6 _ _ O
. _ _ O
Visibility _ _ O
type _ _ O
( _ _ O
public _ _ O
/ _ _ O
protected _ _ O
/ _ _ O
private _ _ O
) _ _ O
static _ _ O
( _ _ O
For _ _ O
now _ _ O
, _ _ O
required _ _ O
) _ _ O
Return _ _ O
Type _ _ O
functionName _ _ O
Parentheses _ _ O
“ _ _ O
( _ _ O
) _ _ O
” _ _ O
– _ _ O
a _ _ O
) _ _ O
b _ _ O
) _ _ O
c _ _ O
) _ _ O
Parameters _ _ O
Type1 _ _ O
parameterName1 _ _ O
Type2 _ _ O
parameterName2 _ _ O
… _ _ O
Curly _ _ O
Brackets _ _ O
/ _ _ O
Braces _ _ O
“ _ _ O
{ _ _ O
} _ _ O
” _ _ O
– _ _ O
return _ _ O
a _ _ O
value _ _ O

Function _ _ O
Overloading _ _ O
• _ _ O
Sometimes _ _ O
, _ _ O
the _ _ O
function _ _ O
name _ _ O
that _ _ O
was _ _ O
already _ _ O
used _ _ O
fits _ _ O
perfectly _ _ O
with _ _ O
a _ _ O
function _ _ O
you _ _ O
need _ _ O
to _ _ O
create _ _ O
• _ _ O
They _ _ O
have _ _ O
similar _ _ O
functions _ _ O
, _ _ O
but _ _ O
operate _ _ O
on _ _ O
different _ _ O
parameters _ _ O
• _ _ O
Turns _ _ O
out _ _ O
, _ _ O
you _ _ O
can _ _ O
use _ _ O
the _ _ O
same _ _ O
name _ _ O
, _ _ O
in _ _ O
what _ _ O
is _ _ O
called _ _ O
function _ _ O
overloading _ _ O

Function _ _ O
Overloading _ _ O
Rules _ _ O
• _ _ O
Functions _ _ O
with _ _ O
the _ _ O
same _ _ O
name _ _ O
MUST _ _ O
have _ _ O
different _ _ O
typed _ _ O
parameters _ _ O
, _ _ O
or _ _ O
a _ _ O
different _ _ O
number _ _ O
of _ _ O
parameters _ _ O
. _ _ O
• _ _ O
We _ _ O
have _ _ O
seen _ _ O
this _ _ O
before _ _ O
! _ _ O
! _ _ O
! _ _ O
( _ _ O
System.out.println _ _ O
( _ _ O
) _ _ O
) _ _ O

Examples _ _ O
public _ _ O
static _ _ O
void _ _ O
britishGreeting _ _ O
( _ _ O
String _ _ O
fullName _ _ O
) _ _ O
public _ _ O
static _ _ O
void _ _ O
britishGreeting _ _ O
( _ _ O
String _ _ O
yourName _ _ O
, _ _ O
String _ _ O
childName _ _ O
) _ _ O
public _ _ O
static _ _ O
int _ _ O
britishGreeting _ _ O
( _ _ O
int _ _ O
numOfPeople _ _ O
) _ _ O
public _ _ O
static _ _ O
char _ _ O
britishGreeting _ _ O
( _ _ O
String _ _ O
firstNameOnly _ _ O
) _ _ O

Special _ _ O
Functions _ _ O
• _ _ O
Constructors _ _ O
: _ _ O
Functions _ _ O
that _ _ O
create _ _ O
new _ _ O
objects _ _ O
, _ _ O
preceded _ _ O
by _ _ O
the _ _ O
keyword _ _ O
new _ _ O
before _ _ O
calling _ _ O
it _ _ O
. _ _ O
• _ _ O
main _ _ O
: _ _ O
The _ _ O
first _ _ O
function _ _ O
that _ _ O
is _ _ O
always _ _ O
run _ _ O
by _ _ O
any _ _ O
Java _ _ O
program _ _ O
. _ _ O
It _ _ O
always _ _ O
has _ _ O
a _ _ O
String _ _ O
[ _ _ O
] _ _ O
as _ _ O
the _ _ O
only _ _ O
parameter _ _ O
. _ _ O
• _ _ O
Functions _ _ O
common _ _ O
to _ _ O
all _ _ O
objects _ _ O
: _ _ O
we _ _ O
may _ _ O
return _ _ O
to _ _ O
this _ _ O
later _ _ O
. _ _ O

And _ _ O
More _ _ O
Booleans _ _ O
and _ _ O
Scope _ _ O
IF _ _ O
STATEMENTS _ _ O

If _ _ O
Statements _ _ O
• _ _ O
English _ _ O
usage _ _ O
? _ _ O
• _ _ O
“ _ _ O
If _ _ O
it _ _ O
will _ _ O
rain _ _ O
today _ _ O
, _ _ O
then _ _ O
I _ _ O
will _ _ O
bring _ _ O
my _ _ O
umbrella _ _ O
. _ _ O
” _ _ O
• _ _ O
Rain _ _ O
today _ _ O
would _ _ O
indicate _ _ O
that _ _ O
I _ _ O
have _ _ O
brought _ _ O
my _ _ O
umbrella _ _ O
• _ _ O
Cause _ _ O
and _ _ O
effect _ _ O
relationship _ _ O
: _ _ O
when _ _ O
a _ _ O
condition _ _ O
is _ _ O
met _ _ O
, _ _ O
a _ _ O
behavior _ _ O
is _ _ O
elicited _ _ O
. _ _ O

Skeleton _ _ O
Statement _ _ O
if _ _ O
( _ _ O
< _ _ O
boolean _ _ O
condition _ _ O
> _ _ O
) _ _ O
{ _ _ O
… _ _ O
} _ _ O
… _ _ O

Boolean _ _ O
Condition _ _ O
• _ _ O
Must _ _ O
evaluate _ _ O
to _ _ O
true _ _ O
in _ _ O
order _ _ O
for _ _ O
the _ _ O
statements _ _ O
within _ _ O
the _ _ O
if-block _ _ O
to _ _ O
execute _ _ O
. _ _ O
• _ _ O
Evaluating _ _ O
to _ _ O
false _ _ O
will _ _ O
skip _ _ O
the _ _ O
block _ _ O
. _ _ O

Java _ _ O
Example _ _ O
/ _ _ O
* _ _ O
checkWeather _ _ O
returns _ _ O
true _ _ O
if _ _ O
it _ _ O
* _ _ O
will _ _ O
rain _ _ O
today.* _ _ O
/ _ _ O
boolean _ _ O
rainToday _ _ O
= _ _ O
checkWeather _ _ O
( _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
rainToday _ _ O
) _ _ O
{ _ _ O
bringUmbrella _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
goToSchool _ _ O
( _ _ O
) _ _ O
; _ _ O

Remember _ _ O
this _ _ O
? _ _ O
" _ _ O
has _ _ O
a _ _ O
Facebook _ _ O
: _ _ O
true _ _ O
“ _ _ O
How _ _ O
do _ _ O
we _ _ O
fix _ _ O
this _ _ O
? _ _ O

Code _ _ O
Reminder _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
firstName _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
" _ _ O
; _ _ O
char _ _ O
midInitial _ _ O
= _ _ O
' _ _ O
R _ _ O
' _ _ O
; _ _ O
String _ _ O
lastName _ _ O
= _ _ O
" _ _ O
Ong _ _ O
" _ _ O
; _ _ O
int _ _ O
age _ _ O
= _ _ O
19 _ _ O
; _ _ O
boolean _ _ O
hasFacebook _ _ O
= _ _ O
true _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
firstName _ _ O
+ _ _ O
" _ _ O
" _ _ O
+ _ _ O
midInitial _ _ O
+ _ _ O
" _ _ O
" _ _ O
+ _ _ O
lastName _ _ O
+ _ _ O
" _ _ O
, _ _ O
age _ _ O
: _ _ O
" _ _ O
+ _ _ O
age _ _ O
+ _ _ O
" _ _ O
, _ _ O
has _ _ O
a _ _ O
Facebook _ _ O
: _ _ O
" _ _ O
+ _ _ O
hasFacebook _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O

A _ _ O
More _ _ O
Useful _ _ O
Output _ _ O
• _ _ O
if _ _ O
hasFacebook _ _ O
is _ _ O
true _ _ O
, _ _ O
then _ _ O
print _ _ O
what _ _ O
? _ _ O
• _ _ O
" _ _ O
has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
• _ _ O
Otherwise _ _ O
, _ _ O
if _ _ O
hasFacebook _ _ O
is _ _ O
false _ _ O
, _ _ O
then _ _ O
print _ _ O
what _ _ O
? _ _ O
• _ _ O
" _ _ O
does _ _ O
not _ _ O
have _ _ O
a _ _ O
Facebook _ _ O
" _ _ O

if _ _ O
( _ _ O
) _ _ O
• _ _ O
if _ _ O
hasFacebook _ _ O
is _ _ O
true _ _ O
, _ _ O
then _ _ O
print _ _ O
" _ _ O
has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
is _ _ O
true _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
is _ _ O
true _ _ O
) _ _ O

hasFacebook _ _ O
is _ _ O
true _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
model _ _ O
this _ _ O
? _ _ O
• _ _ O
hasFacebook _ _ O
= _ _ O
true _ _ O
; _ _ O
/ _ _ O
/ _ _ O
? _ _ O
• _ _ O
But _ _ O
that _ _ O
let _ _ O
us _ _ O
do _ _ O
name-changing _ _ O
! _ _ O
• _ _ O
name _ _ O
= _ _ O
" _ _ O
Brandon _ _ O
Ong _ _ O
" _ _ O
; _ _ O

Making _ _ O
a _ _ O
new _ _ O
thing _ _ O
: _ _ O
Type _ _ O
name _ _ O
= _ _ O
value _ _ O
; _ _ O
Changing _ _ O
the _ _ O
old _ _ O
thing _ _ O
: _ _ O
name _ _ O
= _ _ O
newValue _ _ O
; _ _ O

hasFacebook _ _ O
is _ _ O
true _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
model _ _ O
this _ _ O
? _ _ O
• _ _ O
hasFacebook _ _ O
= _ _ O
true _ _ O
/ _ _ O
/ _ _ O
? _ _ O
• _ _ O
But _ _ O
that _ _ O
let _ _ O
us _ _ O
do _ _ O
name-changing _ _ O
! _ _ O
• _ _ O
name _ _ O
= _ _ O
" _ _ O
Brandon _ _ O
Ong _ _ O
" _ _ O
; _ _ O
• _ _ O
So _ _ O
no _ _ O
, _ _ O
we _ _ O
ca _ _ O
n't _ _ O
do _ _ O
this _ _ O
to _ _ O
check _ _ O
for _ _ O
equality _ _ O
• _ _ O
We _ _ O
instead _ _ O
use _ _ O
double _ _ O
equals _ _ O
( _ _ O
= _ _ O
= _ _ O
) _ _ O

= _ _ O
= _ _ O
vs _ _ O
= _ _ O
• _ _ O
= _ _ O
is _ _ O
for _ _ O
assignment _ _ O
– _ _ O
String _ _ O
name _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
– _ _ O
name _ _ O
has _ _ O
value _ _ O
? _ _ O
– _ _ O
int _ _ O
age _ _ O
= _ _ O
19 _ _ O
; _ _ O
– _ _ O
age _ _ O
has _ _ O
value _ _ O
? _ _ O
• _ _ O
= _ _ O
= _ _ O
is _ _ O
for _ _ O
comparison _ _ O
( _ _ O
equal _ _ O
or _ _ O
not _ _ O
equal _ _ O
) _ _ O
– _ _ O
age _ _ O
= _ _ O
= _ _ O
19 _ _ O
; _ _ O
– _ _ O
name _ _ O
= _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
; _ _ O
• _ _ O
What _ _ O
values _ _ O
do _ _ O
we _ _ O
get _ _ O
for _ _ O
the _ _ O
last _ _ O
two _ _ O
statements _ _ O
? _ _ O
• _ _ O
What _ _ O
type _ _ O
are _ _ O
they _ _ O
? _ _ O

WARNING _ _ O
• _ _ O
Be _ _ O
careful _ _ O
when _ _ O
comparing _ _ O
nonprimitive _ _ O
values _ _ O
! _ _ O
! _ _ O
! _ _ O
• _ _ O
name _ _ O
= _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
Ong _ _ O
" _ _ O
could _ _ O
actually _ _ O
give _ _ O
us _ _ O
false _ _ O
! _ _ O
• _ _ O
Instead _ _ O
you _ _ O
will _ _ O
need _ _ O
to _ _ O
use _ _ O
equals _ _ O
( _ _ O
) _ _ O
• _ _ O
name.equals _ _ O
( _ _ O
"Nathan _ _ O
Ong _ _ O
" _ _ O
) _ _ O
; _ _ O

if _ _ O
( _ _ O
) _ _ O
• _ _ O
if _ _ O
hasFacebook _ _ O
is _ _ O
true _ _ O
, _ _ O
then _ _ O
print _ _ O
" _ _ O
has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
true _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
true _ _ O
) _ _ O
• _ _ O
But _ _ O
how _ _ O
do _ _ O
I _ _ O
represent _ _ O
when _ _ O
hasFacebook _ _ O
is _ _ O
false _ _ O
? _ _ O

else _ _ O
if _ _ O
( _ _ O
) _ _ O
• _ _ O
If _ _ O
an _ _ O
if _ _ O
condition _ _ O
fails _ _ O
( _ _ O
the _ _ O
boolean _ _ O
condition _ _ O
evaluates _ _ O
to _ _ O
false _ _ O
) _ _ O
, _ _ O
it _ _ O
will _ _ O
check _ _ O
the _ _ O
condition _ _ O
for _ _ O
the _ _ O
subsequent _ _ O
else _ _ O
if _ _ O
. _ _ O
• _ _ O
Can _ _ O
also _ _ O
be _ _ O
placed _ _ O
directly _ _ O
after _ _ O
another _ _ O
else _ _ O
if _ _ O
block _ _ O
( _ _ O
i.e. _ _ O
you _ _ O
can _ _ O
have _ _ O
several _ _ O
) _ _ O
. _ _ O

else _ _ O
if _ _ O
( _ _ O
) _ _ O
• _ _ O
Otherwise _ _ O
, _ _ O
if _ _ O
hasFacebook _ _ O
is _ _ O
false _ _ O
, _ _ O
then _ _ O
print _ _ O
" _ _ O
does _ _ O
not _ _ O
have _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
else _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
false _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"does _ _ O
not _ _ O
have _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
else _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
/ _ _ O
/ _ _ O
= _ _ O
= _ _ O
false _ _ O
) _ _ O

else _ _ O
if _ _ O
( _ _ O
) _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
true _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
true _ _ O
) _ _ O
else _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
false _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"does _ _ O
not _ _ O
have _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
else _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
false _ _ O
) _ _ O
Seems _ _ O
kinda _ _ O
wordy _ _ O
… _ _ O

hasFacebook _ _ O
= _ _ O
= _ _ O
true _ _ O
• _ _ O
What _ _ O
does _ _ O
that _ _ O
give _ _ O
us _ _ O
? _ _ O
• _ _ O
What _ _ O
type _ _ O
? _ _ O
• _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
true _ _ O
when _ _ O
hasFacebook _ _ O
= _ _ O
true _ _ O
gives _ _ O
us _ _ O
? _ _ O
• _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
true _ _ O
when _ _ O
hasFacebook _ _ O
= _ _ O
false _ _ O
gives _ _ O
us _ _ O
? _ _ O
• _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
true _ _ O
 _ _ O
hasFacebook _ _ O
• _ _ O
* _ _ O
Gasp _ _ O
* _ _ O

if _ _ O
( _ _ O
) _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
) _ _ O
else _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
false _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"does _ _ O
not _ _ O
have _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
else _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
false _ _ O
) _ _ O
Still _ _ O
kinda _ _ O
wordy _ _ O
… _ _ O

hasFacebook _ _ O
= _ _ O
= _ _ O
false _ _ O
• _ _ O
We _ _ O
want _ _ O
to _ _ O
use _ _ O
the _ _ O
same _ _ O
trick _ _ O
we _ _ O
did _ _ O
before _ _ O
, _ _ O
except _ _ O
this _ _ O
time _ _ O
with _ _ O
false _ _ O
instead _ _ O
of _ _ O
true _ _ O
. _ _ O
• _ _ O
Remember _ _ O
the _ _ O
boolean _ _ O
operators _ _ O
? _ _ O

if _ _ O
( _ _ O
) _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
) _ _ O
else _ _ O
if _ _ O
( _ _ O
! _ _ O
hasFacebook _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"does _ _ O
not _ _ O
have _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
else _ _ O
if _ _ O
( _ _ O
! _ _ O
hasFacebook _ _ O
) _ _ O
Still _ _ O
kinda _ _ O
wordy _ _ O
… _ _ O



