unlabeled|cs0007|lec09
-DOCSTART- -X- -X- O

CS _ _ O
0007 _ _ O
: _ _ O
Introduction _ _ O
to _ _ O
Java _ _ O
Lecture _ _ O
9 _ _ O
Nathan _ _ O
Ong _ _ O
University _ _ O
of _ _ O
Pittsburgh _ _ O
September _ _ O
29 _ _ O
, _ _ O
2016 _ _ O

If _ _ O
Statements _ _ O
• _ _ O
English _ _ O
usage _ _ O
? _ _ O
• _ _ O
“ _ _ O
If _ _ O
it _ _ O
will _ _ O
rain _ _ O
today _ _ O
, _ _ O
then _ _ O
I _ _ O
will _ _ O
bring _ _ O
my _ _ O
umbrella _ _ O
. _ _ O
” _ _ O
• _ _ O
Rain _ _ O
today _ _ O
would _ _ O
indicate _ _ O
that _ _ O
I _ _ O
have _ _ O
brought _ _ O
my _ _ O
umbrella _ _ O
• _ _ O
Cause _ _ O
and _ _ O
effect _ _ O
relationship _ _ O
: _ _ O
when _ _ O
a _ _ O
condition _ _ O
is _ _ O
met _ _ O
, _ _ O
a _ _ O
behavior _ _ O
is _ _ O
elicited _ _ O
. _ _ O

Skeleton _ _ O
Statement _ _ O
if _ _ O
( _ _ O
< _ _ O
boolean _ _ O
condition _ _ O
> _ _ O
) _ _ O
{ _ _ O
… _ _ O
} _ _ O
… _ _ O

Boolean _ _ O
Condition _ _ O
• _ _ O
Must _ _ O
evaluate _ _ O
to _ _ O
true _ _ O
in _ _ O
order _ _ O
for _ _ O
the _ _ O
statements _ _ O
within _ _ O
the _ _ O
if-block _ _ O
to _ _ O
execute _ _ O
. _ _ O
• _ _ O
Evaluating _ _ O
to _ _ O
false _ _ O
will _ _ O
skip _ _ O
the _ _ O
block _ _ O
. _ _ O

Java _ _ O
Example _ _ O
/ _ _ O
* _ _ O
checkWeather _ _ O
returns _ _ O
true _ _ O
if _ _ O
it _ _ O
* _ _ O
will _ _ O
rain _ _ O
today.* _ _ O
/ _ _ O
boolean _ _ O
rainToday _ _ O
= _ _ O
checkWeather _ _ O
( _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
rainToday _ _ O
) _ _ O
{ _ _ O
bringUmbrella _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
goToSchool _ _ O
( _ _ O
) _ _ O
; _ _ O

if _ _ O
( _ _ O
) _ _ O
• _ _ O
if _ _ O
hasFacebook _ _ O
is _ _ O
true _ _ O
, _ _ O
then _ _ O
print _ _ O
" _ _ O
has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
= _ _ O
= _ _ O
true _ _ O
) _ _ O
• _ _ O
But _ _ O
how _ _ O
do _ _ O
I _ _ O
represent _ _ O
when _ _ O
hasFacebook _ _ O
is _ _ O
false _ _ O
? _ _ O

else _ _ O
if _ _ O
( _ _ O
) _ _ O
• _ _ O
Otherwise _ _ O
, _ _ O
if _ _ O
hasFacebook _ _ O
is _ _ O
false _ _ O
, _ _ O
then _ _ O
print _ _ O
" _ _ O
does _ _ O
not _ _ O
have _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
else _ _ O
if _ _ O
( _ _ O
! _ _ O
hasFacebook _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"does _ _ O
not _ _ O
have _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
else _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
/ _ _ O
/ _ _ O
= _ _ O
= _ _ O
false _ _ O
) _ _ O

if _ _ O
( _ _ O
) _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
) _ _ O
else _ _ O
if _ _ O
( _ _ O
! _ _ O
hasFacebook _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"does _ _ O
not _ _ O
have _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
else _ _ O
if _ _ O
( _ _ O
! _ _ O
hasFacebook _ _ O
) _ _ O
Still _ _ O
kinda _ _ O
wordy _ _ O
… _ _ O

else _ _ O
if _ _ O
( _ _ O
! _ _ O
hasFacebook _ _ O
) _ _ O
• _ _ O
How _ _ O
many _ _ O
values _ _ O
can _ _ O
hasFacebook _ _ O
have _ _ O
? _ _ O
• _ _ O
How _ _ O
many _ _ O
values _ _ O
can _ _ O
a _ _ O
boolean _ _ O
have _ _ O
? _ _ O
• _ _ O
Why _ _ O
do _ _ O
we _ _ O
even _ _ O
need _ _ O
to _ _ O
check _ _ O
for _ _ O
! _ _ O
hasFacebook _ _ O
when _ _ O
we _ _ O
know _ _ O
if _ _ O
it _ _ O
is _ _ O
not _ _ O
true _ _ O
, _ _ O
it _ _ O
should _ _ O
do _ _ O
that _ _ O
portion _ _ O
of _ _ O
code _ _ O
? _ _ O
• _ _ O
 _ _ O
else _ _ O

else _ _ O
• _ _ O
When _ _ O
all _ _ O
else _ _ O
fails _ _ O
, _ _ O
execute _ _ O
everything _ _ O
inside _ _ O
this _ _ O
block _ _ O
. _ _ O
• _ _ O
All _ _ O
boolean _ _ O
expressions _ _ O
from _ _ O
the _ _ O
previous _ _ O
if _ _ O
and _ _ O
else _ _ O
if _ _ O
blocks _ _ O
must _ _ O
all _ _ O
evaluate _ _ O
to _ _ O
false _ _ O
for _ _ O
this _ _ O
block _ _ O
to _ _ O
execute _ _ O
. _ _ O
• _ _ O
In _ _ O
the _ _ O
hasFacebook _ _ O
example _ _ O
, _ _ O
because _ _ O
we _ _ O
know _ _ O
it _ _ O
can _ _ O
only _ _ O
hold _ _ O
two _ _ O
values _ _ O
, _ _ O
if _ _ O
it _ _ O
is _ _ O
not _ _ O
true _ _ O
, _ _ O
then _ _ O
it _ _ O
must _ _ O
be _ _ O
false _ _ O
. _ _ O

else _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
) _ _ O
else _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"does _ _ O
not _ _ O
have _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
else _ _ O
STILL _ _ O
kinda _ _ O
wordy _ _ O
… _ _ O

System.out.println _ _ O
( _ _ O
"has _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
• _ _ O
Both _ _ O
lines _ _ O
use _ _ O
" _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
• _ _ O
How _ _ O
can _ _ O
we _ _ O
use _ _ O
this _ _ O
to _ _ O
our _ _ O
advantage _ _ O
? _ _ O
• _ _ O
Why _ _ O
do _ _ O
we _ _ O
even _ _ O
want _ _ O
to _ _ O
do _ _ O
this _ _ O
? _ _ O

Optimization _ _ O
• _ _ O
Eventually _ _ O
, _ _ O
we _ _ O
get _ _ O
down _ _ O
all _ _ O
of _ _ O
that _ _ O
code _ _ O
into _ _ O
something _ _ O
very _ _ O
short _ _ O
• _ _ O
Shorter _ _ O
code _ _ O
generally _ _ O
( _ _ O
in _ _ O
all _ _ O
the _ _ O
programming _ _ O
you _ _ O
will _ _ O
be _ _ O
doing _ _ O
) _ _ O
means _ _ O
a _ _ O
faster _ _ O
program _ _ O
and _ _ O
is _ _ O
easier _ _ O
to _ _ O
read _ _ O
• _ _ O
if _ _ O
statements _ _ O
take _ _ O
time _ _ O
to _ _ O
evaluate _ _ O
• _ _ O
If _ _ O
you _ _ O
had _ _ O
five _ _ O
million _ _ O
of _ _ O
them _ _ O
, _ _ O
your _ _ O
program _ _ O
would _ _ O
be _ _ O
painfully _ _ O
slow _ _ O
. _ _ O
Reduce _ _ O
the _ _ O
number _ _ O
of _ _ O
if _ _ O
statements _ _ O
, _ _ O
if _ _ O
you _ _ O
can _ _ O
. _ _ O

Reducing _ _ O
Common _ _ O
Code _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
) _ _ O
{ _ _ O
System.out.print _ _ O
( _ _ O
"has _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
if _ _ O
( _ _ O
hasFacebook _ _ O
) _ _ O
else _ _ O
{ _ _ O
System.out.print _ _ O
( _ _ O
"does _ _ O
not _ _ O
have _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
block _ _ O
else _ _ O
System.out.println _ _ O
( _ _ O
" _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
This _ _ O
is _ _ O
overkill _ _ O
for _ _ O
this _ _ O
example _ _ O
, _ _ O
but _ _ O
may _ _ O
prove _ _ O
useful _ _ O
in _ _ O
later _ _ O
situations _ _ O
. _ _ O
I _ _ O
can _ _ O
still _ _ O
make _ _ O
this _ _ O
even _ _ O
shorter _ _ O
. _ _ O

? _ _ O
: _ _ O
• _ _ O
Simple _ _ O
choice _ _ O
operator _ _ O
( _ _ O
boolean _ _ O
expression _ _ O
) _ _ O
? _ _ O
true _ _ O
return _ _ O
: _ _ O
false _ _ O
return _ _ O
; _ _ O
• _ _ O
Only _ _ O
use _ _ O
this _ _ O
in _ _ O
very _ _ O
simple _ _ O
if _ _ O
cases _ _ O

? _ _ O
: _ _ O
( _ _ O
hasFacebook _ _ O
? _ _ O
" _ _ O
has _ _ O
" _ _ O
: _ _ O
" _ _ O
does _ _ O
not _ _ O
have _ _ O
" _ _ O
) _ _ O
+ _ _ O
" _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
• _ _ O
Now _ _ O
we _ _ O
can _ _ O
get _ _ O
it _ _ O
all _ _ O
in _ _ O
one _ _ O
line _ _ O
! _ _ O

Adding _ _ O
It _ _ O
in _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
firstName _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
" _ _ O
; _ _ O
char _ _ O
midInitial _ _ O
= _ _ O
' _ _ O
R _ _ O
' _ _ O
; _ _ O
String _ _ O
lastName _ _ O
= _ _ O
" _ _ O
Ong _ _ O
" _ _ O
; _ _ O
int _ _ O
age _ _ O
= _ _ O
19 _ _ O
; _ _ O
boolean _ _ O
hasFacebook _ _ O
= _ _ O
true _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
firstName _ _ O
+ _ _ O
" _ _ O
" _ _ O
+ _ _ O
midInitial _ _ O
+ _ _ O
" _ _ O
" _ _ O
+ _ _ O
lastName _ _ O
+ _ _ O
" _ _ O
, _ _ O
age _ _ O
: _ _ O
" _ _ O
+ _ _ O
age _ _ O
+ _ _ O
" _ _ O
, _ _ O
" _ _ O
+ _ _ O
( _ _ O
hasFacebook _ _ O
? _ _ O
" _ _ O
has _ _ O
" _ _ O
: _ _ O
" _ _ O
does _ _ O
not _ _ O
have _ _ O
" _ _ O
) _ _ O
+ _ _ O
" _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O
What _ _ O
is _ _ O
the _ _ O
output _ _ O
? _ _ O

Was _ _ O
it _ _ O
really _ _ O
worth _ _ O
it _ _ O
? _ _ O
How _ _ O
messy _ _ O
was _ _ O
that _ _ O
code _ _ O
? _ _ O

Trade-Offs _ _ O
• _ _ O
Readability _ _ O
vs. _ _ O
Length _ _ O
• _ _ O
Who _ _ O
even _ _ O
wants _ _ O
to _ _ O
read _ _ O
a _ _ O
four-line _ _ O
oneliner _ _ O
? _ _ O
• _ _ O
Instead _ _ O
you _ _ O
should _ _ O
somehow _ _ O
tell _ _ O
the _ _ O
programmer _ _ O
what _ _ O
you _ _ O
mean _ _ O
( _ _ O
also _ _ O
so _ _ O
you _ _ O
do _ _ O
n't _ _ O
forget _ _ O
) _ _ O
• _ _ O
Remember _ _ O
the _ _ O
strange _ _ O
green _ _ O
thing _ _ O
at _ _ O
the _ _ O
end _ _ O
? _ _ O

Comment _ _ O
Reminders _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
firstName _ _ O
= _ _ O
" _ _ O
Nathan _ _ O
" _ _ O
; _ _ O
char _ _ O
midInitial _ _ O
= _ _ O
' _ _ O
R _ _ O
' _ _ O
; _ _ O
String _ _ O
lastName _ _ O
= _ _ O
" _ _ O
Ong _ _ O
" _ _ O
; _ _ O
int _ _ O
age _ _ O
= _ _ O
19 _ _ O
; _ _ O
boolean _ _ O
hasFacebook _ _ O
= _ _ O
true _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
firstName _ _ O
+ _ _ O
" _ _ O
" _ _ O
+ _ _ O
midInitial _ _ O
+ _ _ O
" _ _ O
" _ _ O
+ _ _ O
lastName _ _ O
+ _ _ O
" _ _ O
, _ _ O
age _ _ O
: _ _ O
" _ _ O
+ _ _ O
age _ _ O
+ _ _ O
" _ _ O
, _ _ O
" _ _ O
+ _ _ O
( _ _ O
hasFacebook _ _ O
? _ _ O
" _ _ O
has _ _ O
" _ _ O
: _ _ O
" _ _ O
does _ _ O
not _ _ O
have _ _ O
" _ _ O
) _ _ O
+ _ _ O
" _ _ O
a _ _ O
Facebook _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O

if _ _ O
( _ _ O
) _ _ O
recap _ _ O
/ _ _ O
/ _ _ O
always _ _ O
run _ _ O
this _ _ O
code _ _ O
if _ _ O
( _ _ O
condition1 _ _ O
is _ _ O
true _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
run _ _ O
this _ _ O
code _ _ O
} _ _ O
else _ _ O
if _ _ O
( _ _ O
condition2 _ _ O
is _ _ O
true _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
run _ _ O
this _ _ O
code _ _ O
} _ _ O
else _ _ O
if _ _ O
( _ _ O
condition3 _ _ O
is _ _ O
true _ _ O
) _ _ O
{ _ _ O
… _ _ O
} _ _ O
… _ _ O
else _ _ O
/ _ _ O
/ _ _ O
if _ _ O
conditions _ _ O
1…n _ _ O
were _ _ O
not _ _ O
satisfied _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
run _ _ O
this _ _ O
code _ _ O
} _ _ O
/ _ _ O
/ _ _ O
always _ _ O
run _ _ O
this _ _ O
code _ _ O

Revisiting _ _ O
Scope _ _ O
• _ _ O
Scope _ _ O
works _ _ O
by _ _ O
curly _ _ O
brackets _ _ O
. _ _ O
• _ _ O
Curly _ _ O
brackets _ _ O
surround _ _ O
all _ _ O
newly _ _ O
declared _ _ O
information _ _ O
, _ _ O
keeping _ _ O
it _ _ O
hidden _ _ O
from _ _ O
code _ _ O
outside _ _ O
of _ _ O
the _ _ O
curly _ _ O
brackets _ _ O
. _ _ O

Scope _ _ O
Confidential _ _ O
Secret _ _ O
Top _ _ O
Secret _ _ O

Scope _ _ O
public _ _ O
class _ _ O
ScopeExample _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
public _ _ O
static _ _ O
void _ _ O
func _ _ O
if _ _ O
if _ _ O
if _ _ O
else _ _ O
if _ _ O
Darker _ _ O
shades _ _ O
can _ _ O
see _ _ O
lighter _ _ O
shades _ _ O
, _ _ O
but _ _ O
not _ _ O
vice _ _ O
versa _ _ O

Scope _ _ O
in _ _ O
Code _ _ O
public _ _ O
class _ _ O
Name _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
int _ _ O
x _ _ O
= _ _ O
0 _ _ O
; _ _ O
/ _ _ O
/ _ _ O
x _ _ O
= _ _ O
= _ _ O
0 _ _ O
, _ _ O
y _ _ O
is _ _ O
undefined _ _ O
if _ _ O
( _ _ O
x _ _ O
= _ _ O
= _ _ O
0 _ _ O
) _ _ O
{ _ _ O
int _ _ O
y _ _ O
= _ _ O
10 _ _ O
; _ _ O
x _ _ O
= _ _ O
15 _ _ O
; _ _ O
/ _ _ O
/ _ _ O
x _ _ O
= _ _ O
= _ _ O
15 _ _ O
, _ _ O
y _ _ O
= _ _ O
= _ _ O
10 _ _ O
} _ _ O
/ _ _ O
/ _ _ O
x _ _ O
= _ _ O
= _ _ O
15 _ _ O
, _ _ O
y _ _ O
is _ _ O
undefined _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Name _ _ O



