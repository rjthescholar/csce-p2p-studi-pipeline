unlabeled|cs0007|lec12
-DOCSTART- -X- -X- O

CS _ _ O
0007 _ _ O
: _ _ O
Introduction _ _ O
to _ _ O
Java _ _ O
Lecture _ _ O
12 _ _ O
Nathan _ _ O
Ong _ _ O
University _ _ O
of _ _ O
Pittsburgh _ _ O
October _ _ O
20 _ _ O
, _ _ O
2016 _ _ O

Annoucements _ _ O
• _ _ O
Project _ _ O
0 _ _ O
submission _ _ O
link _ _ O
is _ _ O
now _ _ O
available _ _ O
via _ _ O
CourseWeb _ _ O
• _ _ O
When _ _ O
submitting _ _ O
, _ _ O
please _ _ O
organize _ _ O
your _ _ O
source _ _ O
code _ _ O
and _ _ O
your _ _ O
essay _ _ O
into _ _ O
one _ _ O
zip _ _ O
file _ _ O
. _ _ O
The _ _ O
zip _ _ O
file _ _ O
name _ _ O
should _ _ O
be _ _ O
LastnameFirstname_Project0.zip _ _ O
• _ _ O
Please _ _ O
DO _ _ O
NOT _ _ O
include _ _ O
any _ _ O
* _ _ O
.class _ _ O
files _ _ O

Type _ _ O
[ _ _ O
] _ _ O
name _ _ O
= _ _ O
new _ _ O
Type _ _ O
[ _ _ O
size _ _ O
] _ _ O
; _ _ O

int _ _ O
[ _ _ O
] _ _ O
empty _ _ O
= _ _ O
new _ _ O
int _ _ O
[ _ _ O
10 _ _ O
] _ _ O
; _ _ O

int _ _ O
[ _ _ O
] _ _ O
list _ _ O
= _ _ O
{ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
4 _ _ O
} _ _ O
; _ _ O

while _ _ O
( _ _ O
) _ _ O
{ _ _ O
… _ _ O
} _ _ O
• _ _ O
While _ _ O
a _ _ O
condition _ _ O
is _ _ O
true _ _ O
, _ _ O
run _ _ O
the _ _ O
block _ _ O
• _ _ O
While _ _ O
not _ _ O
at _ _ O
the _ _ O
end _ _ O
of _ _ O
the _ _ O
list _ _ O
, _ _ O
print _ _ O
out _ _ O
the _ _ O
next _ _ O
element _ _ O
while _ _ O
( _ _ O
not _ _ O
at _ _ O
end _ _ O
of _ _ O
list _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
next _ _ O
element _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
loop _ _ O
while _ _ O
( _ _ O
not _ _ O
at _ _ O
end _ _ O
of _ _ O
list _ _ O
) _ _ O

while _ _ O
( _ _ O
) _ _ O
{ _ _ O
… _ _ O
} _ _ O
int _ _ O
currElement _ _ O
= _ _ O
0 _ _ O
; _ _ O
while _ _ O
( _ _ O
currElement _ _ O
< _ _ O
list.length _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
list _ _ O
[ _ _ O
currElement _ _ O
] _ _ O
) _ _ O
; _ _ O
currElement++ _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
loop _ _ O
while _ _ O
( _ _ O
currElement _ _ O
< _ _ O
list.length _ _ O
) _ _ O

So _ _ O
Many _ _ O
Things _ _ O
We _ _ O
Have _ _ O
to _ _ O
Remember…WHYYYYYYYYYY _ _ O
int _ _ O
counter _ _ O
= _ _ O
start _ _ O
; _ _ O
while _ _ O
( _ _ O
condition _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
Do _ _ O
stuff _ _ O
counter _ _ O
increment _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
loop _ _ O
while _ _ O
( _ _ O
condition _ _ O
) _ _ O
• _ _ O
There _ _ O
must _ _ O
be _ _ O
a _ _ O
better _ _ O
way _ _ O
• _ _ O
WILD _ _ O
KEYWORD _ _ O
APPEARS _ _ O

for _ _ O
( _ _ O
; _ _ O
; _ _ O
) _ _ O
{ _ _ O
… _ _ O
} _ _ O
• _ _ O
The _ _ O
for _ _ O
loop _ _ O
allows _ _ O
us _ _ O
to _ _ O
put _ _ O
everything _ _ O
together _ _ O
for _ _ O
us _ _ O
! _ _ O
• _ _ O
for _ _ O
( _ _ O
counter _ _ O
= _ _ O
start _ _ O
; _ _ O
condition _ _ O
; _ _ O
counter _ _ O
increment _ _ O
) _ _ O
• _ _ O
Now _ _ O
we _ _ O
do _ _ O
n't _ _ O
have _ _ O
to _ _ O
worry _ _ O
about _ _ O
the _ _ O
placement _ _ O
of _ _ O
the _ _ O
counter _ _ O
and _ _ O
incrementing _ _ O
it _ _ O
! _ _ O

EQUIVALENCE _ _ O
int _ _ O
counter _ _ O
= _ _ O
start _ _ O
; _ _ O
while _ _ O
( _ _ O
condition _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
Do _ _ O
stuff _ _ O
counter _ _ O
increment _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
loop _ _ O
/ _ _ O
/ _ _ O
while _ _ O
( _ _ O
condition _ _ O
) _ _ O
for _ _ O
( _ _ O
int _ _ O
counter _ _ O
= _ _ O
start _ _ O
; _ _ O
condition _ _ O
; _ _ O
counter _ _ O
increment _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
Do _ _ O
stuff _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
loop _ _ O
for _ _ O
( _ _ O
condition _ _ O
) _ _ O

for _ _ O
( _ _ O
; _ _ O
; _ _ O
) _ _ O
{ _ _ O
… _ _ O
} _ _ O
for _ _ O
( _ _ O
int _ _ O
currElement _ _ O
= _ _ O
0 _ _ O
; _ _ O
currElement _ _ O
< _ _ O
list.length _ _ O
; _ _ O
currElement++ _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
list _ _ O
[ _ _ O
currElement _ _ O
] _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
loop _ _ O
for _ _ O
( _ _ O
currElement _ _ O
< _ _ O
list.length _ _ O
) _ _ O

A _ _ O
Note _ _ O
• _ _ O
Programmers _ _ O
are _ _ O
lazy _ _ O
• _ _ O
Therefore _ _ O
, _ _ O
currElement _ _ O
is _ _ O
too _ _ O
long _ _ O
for _ _ O
a _ _ O
name _ _ O
• _ _ O
Conventional _ _ O
counter _ _ O
names _ _ O
are _ _ O
: _ _ O
i _ _ O
, _ _ O
j _ _ O
, _ _ O
k _ _ O
, _ _ O
l _ _ O
, _ _ O
m _ _ O
, _ _ O
n _ _ O
, _ _ O
c _ _ O
, _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
d _ _ O
, _ _ O
num _ _ O
, _ _ O
count _ _ O
, _ _ O
counter _ _ O

for _ _ O
( _ _ O
; _ _ O
; _ _ O
) _ _ O
{ _ _ O
… _ _ O
} _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
list.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
list _ _ O
[ _ _ O
currElement _ _ O
] _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
loop _ _ O
for _ _ O
( _ _ O
i _ _ O
< _ _ O
list.length _ _ O
) _ _ O

Let _ _ O
's _ _ O
Test _ _ O
It _ _ O
on _ _ O
List _ _ O
int _ _ O
[ _ _ O
] _ _ O
list _ _ O
= _ _ O
{ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
4 _ _ O
} _ _ O
; _ _ O

Let _ _ O
's _ _ O
Test _ _ O
It _ _ O
on _ _ O
List _ _ O
public _ _ O
class _ _ O
Test _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
int _ _ O
[ _ _ O
] _ _ O
list _ _ O
= _ _ O
{ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
4 _ _ O
} _ _ O
; _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
list.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"Counting _ _ O
... _ _ O
list _ _ O
[ _ _ O
i _ _ O
] _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
loop _ _ O
for _ _ O
( _ _ O
i _ _ O
< _ _ O
list.length _ _ O
) _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Test _ _ O
What _ _ O
is _ _ O
the _ _ O
output _ _ O
? _ _ O
Now _ _ O
at _ _ O
" _ _ O
+ _ _ O

It _ _ O
works _ _ O
, _ _ O
YAAAAAYYYYYY _ _ O
! _ _ O
! _ _ O
! _ _ O

Usage _ _ O
• _ _ O
When _ _ O
do _ _ O
I _ _ O
use _ _ O
For _ _ O
Loops _ _ O
? _ _ O
– _ _ O
Iteration _ _ O
, _ _ O
or _ _ O
going _ _ O
through _ _ O
all _ _ O
of _ _ O
the _ _ O
elements _ _ O
of _ _ O
an _ _ O
array _ _ O
or _ _ O
other _ _ O
type _ _ O
of _ _ O
list _ _ O
. _ _ O
– _ _ O
When _ _ O
the _ _ O
number _ _ O
of _ _ O
times _ _ O
you _ _ O
need _ _ O
to _ _ O
loop _ _ O
is _ _ O
known _ _ O
, _ _ O
either _ _ O
explicitly _ _ O
with _ _ O
a _ _ O
value _ _ O
, _ _ O
or _ _ O
through _ _ O
a _ _ O
variable _ _ O
. _ _ O
• _ _ O
While _ _ O
loops _ _ O
are _ _ O
used _ _ O
otherwise _ _ O

Multi-dimension _ _ O
Arrays _ _ O
• _ _ O
Arrays _ _ O
do _ _ O
n't _ _ O
just _ _ O
have _ _ O
to _ _ O
be _ _ O
lists _ _ O
• _ _ O
They _ _ O
can _ _ O
also _ _ O
be _ _ O
grids _ _ O
, _ _ O
cubes _ _ O
, _ _ O
hypercubes _ _ O
, _ _ O
… _ _ O

Type _ _ O
[ _ _ O
] _ _ O
… _ _ O
[ _ _ O
] _ _ O
name _ _ O
= _ _ O
new _ _ O
Type _ _ O
[ _ _ O
size1 _ _ O
] _ _ O
… _ _ O
[ _ _ O
sizeN _ _ O
] _ _ O
; _ _ O

Type _ _ O
[ _ _ O
] _ _ O
… _ _ O
[ _ _ O
] _ _ O
name _ _ O
= _ _ O
values…s _ _ O
; _ _ O

int _ _ O
[ _ _ O
] _ _ O
[ _ _ O
] _ _ O
listList _ _ O
= _ _ O
{ _ _ O
{ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
} _ _ O
, _ _ O
{ _ _ O
4 _ _ O
, _ _ O
5 _ _ O
, _ _ O
6} _ _ O
, _ _ O
{7 _ _ O
, _ _ O
8 _ _ O
, _ _ O
9 _ _ O
} _ _ O
} _ _ O
; _ _ O

Things _ _ O
to _ _ O
Remember _ _ O
• _ _ O
In _ _ O
2-D _ _ O
Arrays _ _ O
, _ _ O
referencing _ _ O
an _ _ O
element _ _ O
requires _ _ O
TWO _ _ O
PAIRS _ _ O
of _ _ O
square _ _ O
brackets _ _ O
• _ _ O
To _ _ O
get _ _ O
the _ _ O
# _ _ O
1 _ _ O
from _ _ O
listList _ _ O
• _ _ O
listList _ _ O
[ _ _ O
0 _ _ O
] _ _ O
[ _ _ O
0 _ _ O
] _ _ O
• _ _ O
To _ _ O
get _ _ O
the _ _ O
# _ _ O
4 _ _ O
from _ _ O
listList _ _ O
• _ _ O
listList _ _ O
[ _ _ O
1 _ _ O
] _ _ O
[ _ _ O
0 _ _ O
] _ _ O
• _ _ O
Remember _ _ O
: _ _ O
element _ _ O
 _ _ O
listList _ _ O
[ _ _ O
row _ _ O
] _ _ O
[ _ _ O
col _ _ O
] _ _ O

How _ _ O
Do _ _ O
We _ _ O
Go _ _ O
Through _ _ O
a _ _ O
2-D _ _ O
Array _ _ O
? _ _ O
• _ _ O
If _ _ O
it _ _ O
took _ _ O
one _ _ O
for _ _ O
loop _ _ O
to _ _ O
go _ _ O
though _ _ O
a _ _ O
1D _ _ O
array _ _ O
, _ _ O
then _ _ O
… _ _ O
• _ _ O
It _ _ O
will _ _ O
take _ _ O
two _ _ O
for _ _ O
loops _ _ O
to _ _ O
go _ _ O
through _ _ O
a _ _ O
2-D _ _ O
array _ _ O
• _ _ O
It _ _ O
will _ _ O
take _ _ O
N _ _ O
for _ _ O
loops _ _ O
to _ _ O
go _ _ O
through _ _ O
an _ _ O
N-D _ _ O
array _ _ O
• _ _ O
If _ _ O
you _ _ O
do _ _ O
n't _ _ O
have _ _ O
to _ _ O
go _ _ O
through _ _ O
everything _ _ O
, _ _ O
do _ _ O
n't _ _ O
. _ _ O
It _ _ O
just _ _ O
wastes _ _ O
time _ _ O

We _ _ O
need _ _ O
to _ _ O
modify _ _ O
this _ _ O
public _ _ O
class _ _ O
Test _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
int _ _ O
[ _ _ O
] _ _ O
[ _ _ O
] _ _ O
listList _ _ O
= _ _ O
{ _ _ O
{ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3} _ _ O
, _ _ O
{4 _ _ O
, _ _ O
5 _ _ O
, _ _ O
6} _ _ O
, _ _ O
{7 _ _ O
, _ _ O
8 _ _ O
, _ _ O
9 _ _ O
} _ _ O
} _ _ O
; _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
listList.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"Counting _ _ O
... _ _ O
Now _ _ O
at _ _ O
" _ _ O
+ _ _ O
listList _ _ O
[ _ _ O
i _ _ O
] _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
loop _ _ O
for _ _ O
( _ _ O
i _ _ O
< _ _ O
list.length _ _ O
) _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
class _ _ O
Test _ _ O
There _ _ O
is _ _ O
only _ _ O
one _ _ O
loop _ _ O
. _ _ O
How _ _ O
do _ _ O
we _ _ O
write _ _ O
the _ _ O
next _ _ O
one _ _ O
? _ _ O

Inner _ _ O
For _ _ O
Loop _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
listList.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
inner _ _ O
for _ _ O
loop _ _ O
/ _ _ O
/ _ _ O
… _ _ O
/ _ _ O
/ _ _ O
end _ _ O
inner _ _ O
for _ _ O
loop _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
outer-loop _ _ O
for _ _ O
( _ _ O
i _ _ O
< _ _ O
/ _ _ O
/ _ _ O
listList.length _ _ O
) _ _ O
What _ _ O
does _ _ O
the _ _ O
outer _ _ O
for _ _ O
loop _ _ O
go _ _ O
through _ _ O
? _ _ O
What _ _ O
should _ _ O
the _ _ O
inner _ _ O
for _ _ O
loop _ _ O
go _ _ O
through _ _ O
? _ _ O

listList _ _ O
[ _ _ O
row _ _ O
] _ _ O
[ _ _ O
col _ _ O
] _ _ O

Inner _ _ O
For _ _ O
Loop _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
listList.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
inner _ _ O
for _ _ O
loop _ _ O
/ _ _ O
/ _ _ O
… _ _ O
/ _ _ O
/ _ _ O
end _ _ O
inner _ _ O
for _ _ O
loop _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
outer-loop _ _ O
for _ _ O
( _ _ O
i _ _ O
< _ _ O
/ _ _ O
/ _ _ O
listList.length _ _ O
) _ _ O
The _ _ O
outer _ _ O
loop _ _ O
goes _ _ O
through _ _ O
the _ _ O
row _ _ O
The _ _ O
inner _ _ O
loop _ _ O
goes _ _ O
through _ _ O
the _ _ O
columns _ _ O

Inner _ _ O
For _ _ O
Loop _ _ O
/ _ _ O
/ _ _ O
inner _ _ O
for _ _ O
loop _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
listList.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"Counting _ _ O
… _ _ O
Now _ _ O
at _ _ O
" _ _ O
+ _ _ O
listList _ _ O
[ _ _ O
i _ _ O
] _ _ O
[ _ _ O
i _ _ O
] _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
inner-loop _ _ O
for _ _ O
( _ _ O
i _ _ O
< _ _ O
/ _ _ O
/ _ _ O
listList.length _ _ O
) _ _ O
Is _ _ O
this _ _ O
allowed _ _ O
? _ _ O
No _ _ O
because _ _ O
i _ _ O
is _ _ O
already _ _ O
used _ _ O

Inner _ _ O
For _ _ O
Loop _ _ O
/ _ _ O
/ _ _ O
inner _ _ O
for _ _ O
loop _ _ O
for _ _ O
( _ _ O
int _ _ O
j _ _ O
= _ _ O
0 _ _ O
; _ _ O
j _ _ O
< _ _ O
listList.length _ _ O
; _ _ O
j++ _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"Counting _ _ O
… _ _ O
Now _ _ O
at _ _ O
" _ _ O
+ _ _ O
listList _ _ O
[ _ _ O
i _ _ O
] _ _ O
[ _ _ O
j _ _ O
] _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
inner-loop _ _ O
for _ _ O
( _ _ O
j _ _ O
< _ _ O
/ _ _ O
/ _ _ O
listList.length _ _ O
) _ _ O
Is _ _ O
this _ _ O
allowed _ _ O
? _ _ O
No _ _ O
because _ _ O
listList.length _ _ O
only _ _ O
gets _ _ O
the _ _ O
number _ _ O
of _ _ O
rows _ _ O
! _ _ O
What _ _ O
can _ _ O
we _ _ O
do _ _ O
? _ _ O
What _ _ O
if _ _ O
we _ _ O
use _ _ O
each _ _ O
individual _ _ O
row _ _ O
's _ _ O
length _ _ O
? _ _ O

Inner _ _ O
For _ _ O
Loop _ _ O
/ _ _ O
/ _ _ O
inner _ _ O
for _ _ O
loop _ _ O
for _ _ O
( _ _ O
int _ _ O
j _ _ O
= _ _ O
0 _ _ O
; _ _ O
j _ _ O
< _ _ O
listList _ _ O
[ _ _ O
i _ _ O
] _ _ O
.length _ _ O
; _ _ O
j++ _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"Counting _ _ O
… _ _ O
Now _ _ O
at _ _ O
" _ _ O
+ _ _ O
listList _ _ O
[ _ _ O
i _ _ O
] _ _ O
[ _ _ O
j _ _ O
] _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
inner-loop _ _ O
for _ _ O
( _ _ O
j _ _ O
< _ _ O
/ _ _ O
/ _ _ O
listList _ _ O
[ _ _ O
i _ _ O
] _ _ O
.length _ _ O
) _ _ O
Does _ _ O
this _ _ O
work _ _ O
? _ _ O

Let _ _ O
's _ _ O
Test _ _ O
It _ _ O
on _ _ O
listList _ _ O
public _ _ O
class _ _ O
Test _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
int _ _ O
[ _ _ O
] _ _ O
[ _ _ O
] _ _ O
list _ _ O
= _ _ O
{ _ _ O
{ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3} _ _ O
, _ _ O
{4 _ _ O
, _ _ O
5 _ _ O
, _ _ O
6} _ _ O
, _ _ O
{7 _ _ O
, _ _ O
8 _ _ O
, _ _ O
9 _ _ O
} _ _ O
} _ _ O
; _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
list.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
for _ _ O
( _ _ O
int _ _ O
j _ _ O
= _ _ O
0 _ _ O
; _ _ O
j _ _ O
< _ _ O
list _ _ O
[ _ _ O
i _ _ O
] _ _ O
.length _ _ O
; _ _ O
j++ _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"Counting _ _ O
... _ _ O
Now _ _ O
at _ _ O
" _ _ O
+ _ _ O
list _ _ O
[ _ _ O
i _ _ O
] _ _ O
[ _ _ O
j _ _ O
] _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
inner-loop _ _ O
for _ _ O
( _ _ O
j _ _ O
< _ _ O
list _ _ O
[ _ _ O
i _ _ O
] _ _ O
.length _ _ O
) _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
outer-loop _ _ O
for _ _ O
( _ _ O
i _ _ O
< _ _ O
list.length _ _ O
) _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Test _ _ O
For _ _ O
convenience _ _ O
sake _ _ O
, _ _ O
listList _ _ O
 _ _ O
list _ _ O
What _ _ O
is _ _ O
the _ _ O
output _ _ O
? _ _ O

It _ _ O
works _ _ O
, _ _ O
YAAAAAYYYYYY _ _ O
! _ _ O
! _ _ O
! _ _ O



