unlabeled|cs0007|lec13
-DOCSTART- -X- -X- O

CS _ _ O
0007 _ _ O
: _ _ O
Introduction _ _ O
to _ _ O
Java _ _ O
Lecture _ _ O
13 _ _ O
Nathan _ _ O
Ong _ _ O
University _ _ O
of _ _ O
Pittsburgh _ _ O
October _ _ O
25 _ _ O
, _ _ O
2016 _ _ O

Announcements _ _ O
• _ _ O
Exam _ _ O
grades _ _ O
are _ _ O
posted _ _ O
on _ _ O
Courseweb _ _ O
• _ _ O
You _ _ O
can _ _ O
see _ _ O
your _ _ O
exam _ _ O
during _ _ O
office _ _ O
hours _ _ O
or _ _ O
make _ _ O
an _ _ O
appointment _ _ O
, _ _ O
but _ _ O
you _ _ O
may _ _ O
not _ _ O
keep _ _ O
them _ _ O
• _ _ O
Project _ _ O
0 _ _ O
due _ _ O
October _ _ O
31 _ _ O
, _ _ O
2016 _ _ O
at _ _ O
11 _ _ O
: _ _ O
59 _ _ O
PM _ _ O
via _ _ O
submission _ _ O
link _ _ O
on _ _ O
Courseweb _ _ O
• _ _ O
Project _ _ O
1 _ _ O
released _ _ O
soon _ _ O

Usage _ _ O
• _ _ O
When _ _ O
do _ _ O
I _ _ O
use _ _ O
For _ _ O
Loops _ _ O
? _ _ O
– _ _ O
Iteration _ _ O
, _ _ O
or _ _ O
going _ _ O
through _ _ O
all _ _ O
of _ _ O
the _ _ O
elements _ _ O
of _ _ O
an _ _ O
array _ _ O
or _ _ O
other _ _ O
type _ _ O
of _ _ O
list _ _ O
. _ _ O
– _ _ O
When _ _ O
the _ _ O
number _ _ O
of _ _ O
times _ _ O
you _ _ O
need _ _ O
to _ _ O
loop _ _ O
is _ _ O
known _ _ O
, _ _ O
either _ _ O
explicitly _ _ O
with _ _ O
a _ _ O
value _ _ O
, _ _ O
or _ _ O
through _ _ O
a _ _ O
variable _ _ O
. _ _ O
• _ _ O
While _ _ O
loops _ _ O
are _ _ O
used _ _ O
otherwise _ _ O

Multi-dimension _ _ O
Arrays _ _ O
• _ _ O
Arrays _ _ O
do _ _ O
n't _ _ O
just _ _ O
have _ _ O
to _ _ O
be _ _ O
lists _ _ O
• _ _ O
They _ _ O
can _ _ O
also _ _ O
be _ _ O
grids _ _ O
, _ _ O
cubes _ _ O
, _ _ O
hypercubes _ _ O
, _ _ O
… _ _ O

Type _ _ O
[ _ _ O
] _ _ O
… _ _ O
[ _ _ O
] _ _ O
name _ _ O
= _ _ O
new _ _ O
Type _ _ O
[ _ _ O
size1 _ _ O
] _ _ O
… _ _ O
[ _ _ O
sizeN _ _ O
] _ _ O
; _ _ O

Type _ _ O
[ _ _ O
] _ _ O
… _ _ O
[ _ _ O
] _ _ O
name _ _ O
= _ _ O
values…s _ _ O
; _ _ O

int _ _ O
[ _ _ O
] _ _ O
[ _ _ O
] _ _ O
listList _ _ O
= _ _ O
{ _ _ O
{ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
} _ _ O
, _ _ O
{ _ _ O
4 _ _ O
, _ _ O
5 _ _ O
, _ _ O
6} _ _ O
, _ _ O
{7 _ _ O
, _ _ O
8 _ _ O
, _ _ O
9 _ _ O
} _ _ O
} _ _ O
; _ _ O

Things _ _ O
to _ _ O
Remember _ _ O
• _ _ O
In _ _ O
2-D _ _ O
Arrays _ _ O
, _ _ O
referencing _ _ O
an _ _ O
element _ _ O
requires _ _ O
TWO _ _ O
PAIRS _ _ O
of _ _ O
square _ _ O
brackets _ _ O
• _ _ O
To _ _ O
get _ _ O
the _ _ O
# _ _ O
1 _ _ O
from _ _ O
listList _ _ O
• _ _ O
listList _ _ O
[ _ _ O
0 _ _ O
] _ _ O
[ _ _ O
0 _ _ O
] _ _ O
• _ _ O
To _ _ O
get _ _ O
the _ _ O
# _ _ O
4 _ _ O
from _ _ O
listList _ _ O
• _ _ O
listList _ _ O
[ _ _ O
1 _ _ O
] _ _ O
[ _ _ O
0 _ _ O
] _ _ O
• _ _ O
Remember _ _ O
: _ _ O
element _ _ O
 _ _ O
listList _ _ O
[ _ _ O
row _ _ O
] _ _ O
[ _ _ O
col _ _ O
] _ _ O

How _ _ O
Do _ _ O
We _ _ O
Go _ _ O
Through _ _ O
a _ _ O
2-D _ _ O
Array _ _ O
? _ _ O
• _ _ O
If _ _ O
it _ _ O
took _ _ O
one _ _ O
for _ _ O
loop _ _ O
to _ _ O
go _ _ O
though _ _ O
a _ _ O
1D _ _ O
array _ _ O
, _ _ O
then _ _ O
… _ _ O
• _ _ O
It _ _ O
will _ _ O
take _ _ O
two _ _ O
for _ _ O
loops _ _ O
to _ _ O
go _ _ O
through _ _ O
a _ _ O
2-D _ _ O
array _ _ O
• _ _ O
It _ _ O
will _ _ O
take _ _ O
N _ _ O
for _ _ O
loops _ _ O
to _ _ O
go _ _ O
through _ _ O
an _ _ O
N-D _ _ O
array _ _ O
• _ _ O
If _ _ O
you _ _ O
do _ _ O
n't _ _ O
have _ _ O
to _ _ O
go _ _ O
through _ _ O
everything _ _ O
, _ _ O
do _ _ O
n't _ _ O
. _ _ O
It _ _ O
just _ _ O
wastes _ _ O
time _ _ O

listList _ _ O
[ _ _ O
row _ _ O
] _ _ O
[ _ _ O
col _ _ O
] _ _ O

Let _ _ O
's _ _ O
Test _ _ O
It _ _ O
on _ _ O
listList _ _ O
public _ _ O
class _ _ O
Test _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
int _ _ O
[ _ _ O
] _ _ O
[ _ _ O
] _ _ O
list _ _ O
= _ _ O
{ _ _ O
{ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3} _ _ O
, _ _ O
{4 _ _ O
, _ _ O
5 _ _ O
, _ _ O
6} _ _ O
, _ _ O
{7 _ _ O
, _ _ O
8 _ _ O
, _ _ O
9 _ _ O
} _ _ O
} _ _ O
; _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
list.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
for _ _ O
( _ _ O
int _ _ O
j _ _ O
= _ _ O
0 _ _ O
; _ _ O
j _ _ O
< _ _ O
list _ _ O
[ _ _ O
i _ _ O
] _ _ O
.length _ _ O
; _ _ O
j++ _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
"Counting _ _ O
... _ _ O
Now _ _ O
at _ _ O
" _ _ O
+ _ _ O
list _ _ O
[ _ _ O
i _ _ O
] _ _ O
[ _ _ O
j _ _ O
] _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
inner-loop _ _ O
for _ _ O
( _ _ O
j _ _ O
< _ _ O
list _ _ O
[ _ _ O
i _ _ O
] _ _ O
.length _ _ O
) _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
outer-loop _ _ O
for _ _ O
( _ _ O
i _ _ O
< _ _ O
list.length _ _ O
) _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Test _ _ O
For _ _ O
convenience _ _ O
sake _ _ O
, _ _ O
listList _ _ O
 _ _ O
list _ _ O
What _ _ O
is _ _ O
the _ _ O
output _ _ O
? _ _ O

Good _ _ O
Coding _ _ O
Practices _ _ O
• _ _ O
Whenever _ _ O
you _ _ O
make _ _ O
any _ _ O
variable _ _ O
or _ _ O
array _ _ O
, _ _ O
ensure _ _ O
that _ _ O
you _ _ O
fill _ _ O
it _ _ O
with _ _ O
the _ _ O
appropriate _ _ O
values _ _ O
, _ _ O
or _ _ O
use _ _ O
some _ _ O
default _ _ O
non-important _ _ O
value _ _ O
. _ _ O
• _ _ O
Rule _ _ O
of _ _ O
thumb _ _ O
: _ _ O
– _ _ O
Numbers _ _ O
/ _ _ O
char _ _ O
 _ _ O
0 _ _ O
( _ _ O
.0 _ _ O
) _ _ O
– _ _ O
boolean _ _ O
 _ _ O
false _ _ O
– _ _ O
Objects _ _ O
 _ _ O
null _ _ O
– _ _ O
Arrays _ _ O
 _ _ O
Depends _ _ O
on _ _ O
type _ _ O
, _ _ O
but _ _ O
every _ _ O
element _ _ O
should _ _ O
be _ _ O
set _ _ O
to _ _ O
something _ _ O
explicitly _ _ O

Meaning _ _ O
of _ _ O
null _ _ O
• _ _ O
Null _ _ O
indicates _ _ O
the _ _ O
variable _ _ O
refers _ _ O
to _ _ O
nothing _ _ O
• _ _ O
There _ _ O
is _ _ O
no _ _ O
actual _ _ O
object _ _ O
with _ _ O
the _ _ O
given _ _ O
variable _ _ O
name _ _ O
• _ _ O
As _ _ O
expected _ _ O
, _ _ O
you _ _ O
can _ _ O
not _ _ O
do _ _ O
anything _ _ O
useful _ _ O
with _ _ O
a _ _ O
variable _ _ O
set _ _ O
to _ _ O
null _ _ O
• _ _ O
Checking _ _ O
for _ _ O
null _ _ O
( _ _ O
in _ _ O
an _ _ O
if-statement _ _ O
or _ _ O
other _ _ O
boolean _ _ O
expression _ _ O
) _ _ O
uses _ _ O
= _ _ O
= _ _ O
Scanner _ _ O
myScan _ _ O
= _ _ O
new _ _ O
Scanner _ _ O
( _ _ O
System.in _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
myScan _ _ O
= _ _ O
= _ _ O
null _ _ O
) _ _ O
{ _ _ O
System.err.println _ _ O
( _ _ O
"Something _ _ O
wrong _ _ O
happened _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
clearly _ _ O
never _ _ O
executed _ _ O

Recursion _ _ O
• _ _ O
Recursion _ _ O
is _ _ O
the _ _ O
process _ _ O
of _ _ O
a _ _ O
function _ _ O
( _ _ O
or _ _ O
set _ _ O
of _ _ O
functions _ _ O
) _ _ O
that _ _ O
calls _ _ O
itself _ _ O
. _ _ O
• _ _ O
Recursion _ _ O
is _ _ O
really _ _ O
just _ _ O
a _ _ O
special _ _ O
name _ _ O
for _ _ O
calling _ _ O
the _ _ O
same _ _ O
function _ _ O
within _ _ O
itself _ _ O
• _ _ O
Recursion _ _ O
ends _ _ O
at _ _ O
a _ _ O
base _ _ O
case _ _ O
. _ _ O

A _ _ O
Simple _ _ O
Example _ _ O
• _ _ O
I _ _ O
want _ _ O
to _ _ O
compute _ _ O
n _ _ O
! _ _ O
( _ _ O
factorial _ _ O
) _ _ O
n _ _ O
! _ _ O
= _ _ O
n _ _ O
* _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
* _ _ O
( _ _ O
n-2 _ _ O
) _ _ O
* _ _ O
… _ _ O
* _ _ O
1 _ _ O
• _ _ O
I _ _ O
can _ _ O
easily _ _ O
do _ _ O
this _ _ O
with _ _ O
loops _ _ O
, _ _ O
but _ _ O
for _ _ O
the _ _ O
sake _ _ O
of _ _ O
an _ _ O
easy _ _ O
example _ _ O
, _ _ O
we _ _ O
can _ _ O
easily _ _ O
break _ _ O
this _ _ O
down _ _ O

A _ _ O
Simple _ _ O
Example _ _ O
• _ _ O
I _ _ O
want _ _ O
to _ _ O
compute _ _ O
n _ _ O
! _ _ O
( _ _ O
factorial _ _ O
) _ _ O
n _ _ O
! _ _ O
= _ _ O
n _ _ O
* _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
* _ _ O
( _ _ O
n-2 _ _ O
) _ _ O
* _ _ O
… _ _ O
* _ _ O
1 _ _ O
• _ _ O
Recursion _ _ O
is _ _ O
the _ _ O
breakdown _ _ O
of _ _ O
a _ _ O
problem _ _ O
into _ _ O
smaller _ _ O
chunks _ _ O
, _ _ O
like _ _ O
Matryoshka _ _ O
dolls _ _ O
Source _ _ O
: _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
upload.wikimedia.org _ _ O
/ _ _ O
wikip _ _ O
edia _ _ O
/ _ _ O
commons _ _ O
/ _ _ O
7 _ _ O
/ _ _ O
71 _ _ O
/ _ _ O
RussianMatroshka.jpg _ _ O

Recursive _ _ O
Factorial _ _ O
• _ _ O
How _ _ O
can _ _ O
we _ _ O
take _ _ O
the _ _ O
large _ _ O
problem _ _ O
and _ _ O
break _ _ O
it _ _ O
up _ _ O
into _ _ O
something _ _ O
smaller _ _ O
? _ _ O
• _ _ O
Can _ _ O
we _ _ O
build _ _ O
up _ _ O
a _ _ O
solution _ _ O
? _ _ O
• _ _ O
With _ _ O
factorial _ _ O
, _ _ O
it _ _ O
is _ _ O
easy _ _ O
to _ _ O
see _ _ O
how _ _ O
to _ _ O
break _ _ O
this _ _ O
down _ _ O
by _ _ O
this _ _ O
equivalence _ _ O
: _ _ O
n _ _ O
! _ _ O
= _ _ O
n _ _ O
* _ _ O
( _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
* _ _ O
( _ _ O
n-2 _ _ O
) _ _ O
* _ _ O
… _ _ O
* _ _ O
2 _ _ O
* _ _ O
1 _ _ O
) _ _ O
= _ _ O
n _ _ O
* _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
! _ _ O
• _ _ O
To _ _ O
compute _ _ O
n _ _ O
! _ _ O
, _ _ O
we _ _ O
can _ _ O
rely _ _ O
on _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
! _ _ O

How _ _ O
Do _ _ O
We _ _ O
Put _ _ O
This _ _ O
In _ _ O
Code _ _ O
? _ _ O
• _ _ O
We _ _ O
already _ _ O
know _ _ O
by _ _ O
the _ _ O
definition _ _ O
of _ _ O
recursion _ _ O
that _ _ O
we _ _ O
have _ _ O
to _ _ O
call _ _ O
the _ _ O
function _ _ O
inside _ _ O
of _ _ O
itself _ _ O
. _ _ O
public _ _ O
static _ _ O
int _ _ O
factorial _ _ O
( _ _ O
int _ _ O
n _ _ O
) _ _ O
{ _ _ O
factorial _ _ O
( _ _ O
< _ _ O
something _ _ O
> _ _ O
) _ _ O
; _ _ O
return _ _ O
< _ _ O
something _ _ O
> _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
int _ _ O
) _ _ O

Recursive _ _ O
Factorial _ _ O
• _ _ O
Let _ _ O
us _ _ O
use _ _ O
the _ _ O
knowledge _ _ O
that _ _ O
we _ _ O
know _ _ O
from _ _ O
the _ _ O
equivalence _ _ O
. _ _ O
n _ _ O
! _ _ O
= _ _ O
n _ _ O
* _ _ O
( _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
* _ _ O
( _ _ O
n-2 _ _ O
) _ _ O
* _ _ O
… _ _ O
* _ _ O
2 _ _ O
* _ _ O
1 _ _ O
) _ _ O
= _ _ O
n _ _ O
* _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
! _ _ O
• _ _ O
In _ _ O
order _ _ O
to _ _ O
return _ _ O
n _ _ O
! _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
know _ _ O
the _ _ O
value _ _ O
of _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
! _ _ O
and _ _ O
then _ _ O
multiply _ _ O
it _ _ O
with _ _ O
n. _ _ O

How _ _ O
Do _ _ O
We _ _ O
Put _ _ O
This _ _ O
In _ _ O
Code _ _ O
? _ _ O
• _ _ O
In _ _ O
order _ _ O
to _ _ O
return _ _ O
n _ _ O
! _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
know _ _ O
the _ _ O
value _ _ O
of _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
! _ _ O
and _ _ O
then _ _ O
multiply _ _ O
it _ _ O
with _ _ O
n. _ _ O
public _ _ O
static _ _ O
int _ _ O
factorial _ _ O
( _ _ O
int _ _ O
n _ _ O
) _ _ O
{ _ _ O
factorial _ _ O
( _ _ O
< _ _ O
something _ _ O
> _ _ O
) _ _ O
; _ _ O
return _ _ O
< _ _ O
something _ _ O
> _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
int _ _ O
) _ _ O

How _ _ O
Do _ _ O
We _ _ O
Put _ _ O
This _ _ O
In _ _ O
Code _ _ O
? _ _ O
• _ _ O
In _ _ O
order _ _ O
to _ _ O
return _ _ O
n _ _ O
! _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
know _ _ O
the _ _ O
value _ _ O
of _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
! _ _ O
and _ _ O
then _ _ O
multiply _ _ O
it _ _ O
with _ _ O
n. _ _ O
public _ _ O
static _ _ O
int _ _ O
factorial _ _ O
( _ _ O
int _ _ O
n _ _ O
) _ _ O
{ _ _ O
factorial _ _ O
( _ _ O
< _ _ O
n-1 _ _ O
> _ _ O
) _ _ O
; _ _ O
return _ _ O
< _ _ O
n* _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
! _ _ O
> _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
int _ _ O
) _ _ O

How _ _ O
Do _ _ O
We _ _ O
Put _ _ O
This _ _ O
In _ _ O
Code _ _ O
? _ _ O
• _ _ O
In _ _ O
order _ _ O
to _ _ O
return _ _ O
n _ _ O
! _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
know _ _ O
the _ _ O
value _ _ O
of _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
! _ _ O
and _ _ O
then _ _ O
multiply _ _ O
it _ _ O
with _ _ O
n. _ _ O
public _ _ O
static _ _ O
int _ _ O
factorial _ _ O
( _ _ O
int _ _ O
n _ _ O
) _ _ O
{ _ _ O
int _ _ O
prevFact _ _ O
= _ _ O
factorial _ _ O
( _ _ O
n1 _ _ O
) _ _ O
; _ _ O
return _ _ O
n*prevFact _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
int _ _ O
) _ _ O

How _ _ O
Do _ _ O
We _ _ O
Put _ _ O
This _ _ O
In _ _ O
Code _ _ O
? _ _ O
• _ _ O
In _ _ O
order _ _ O
to _ _ O
return _ _ O
n _ _ O
! _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
know _ _ O
the _ _ O
value _ _ O
of _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
! _ _ O
and _ _ O
then _ _ O
multiply _ _ O
it _ _ O
with _ _ O
n. _ _ O
public _ _ O
static _ _ O
int _ _ O
factorial _ _ O
( _ _ O
int _ _ O
n _ _ O
) _ _ O
{ _ _ O
return _ _ O
n*factorial _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
int _ _ O
) _ _ O

How _ _ O
Do _ _ O
We _ _ O
Put _ _ O
This _ _ O
In _ _ O
Code _ _ O
? _ _ O
• _ _ O
If _ _ O
we _ _ O
just _ _ O
use _ _ O
this _ _ O
, _ _ O
we _ _ O
run _ _ O
into _ _ O
the _ _ O
problem _ _ O
that _ _ O
this _ _ O
goes _ _ O
on _ _ O
forever _ _ O
. _ _ O
• _ _ O
When _ _ O
do _ _ O
we _ _ O
stop _ _ O
? _ _ O
When _ _ O
is _ _ O
the _ _ O
base _ _ O
case _ _ O
? _ _ O
public _ _ O
static _ _ O
int _ _ O
factorial _ _ O
( _ _ O
int _ _ O
n _ _ O
) _ _ O
{ _ _ O
return _ _ O
n*factorial _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
int _ _ O
) _ _ O

How _ _ O
Do _ _ O
We _ _ O
Put _ _ O
This _ _ O
In _ _ O
Code _ _ O
? _ _ O
• _ _ O
When _ _ O
n _ _ O
< _ _ O
= _ _ O
1 _ _ O
, _ _ O
n _ _ O
! _ _ O
is _ _ O
just _ _ O
1 _ _ O
public _ _ O
static _ _ O
int _ _ O
factorial _ _ O
( _ _ O
int _ _ O
n _ _ O
) _ _ O
{ _ _ O
if _ _ O
( _ _ O
n _ _ O
< _ _ O
= _ _ O
1 _ _ O
) _ _ O
{ _ _ O
return _ _ O
1 _ _ O
; _ _ O
} _ _ O
return _ _ O
n*factorial _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
function _ _ O
( _ _ O
int _ _ O
) _ _ O

How _ _ O
Do _ _ O
We _ _ O
Put _ _ O
This _ _ O
In _ _ O
Code _ _ O
? _ _ O
public _ _ O
class _ _ O
FactorialTester _ _ O
{ _ _ O
… _ _ O
( _ _ O
Function _ _ O
) _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
Scanner _ _ O
scanner _ _ O
= _ _ O
new _ _ O
Scanner _ _ O
( _ _ O
System.in _ _ O
) _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
"Enter _ _ O
an _ _ O
integer _ _ O
" _ _ O
) _ _ O
; _ _ O
int _ _ O
n _ _ O
= _ _ O
scanner.nextInt _ _ O
( _ _ O
) _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
n _ _ O
+ _ _ O
" _ _ O
! _ _ O
= _ _ O
" _ _ O
+ _ _ O
factorial _ _ O
( _ _ O
n _ _ O
) _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
) _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
FactorialTester _ _ O

OBJECT _ _ O
ORIENTED _ _ O
PROGRAMMING _ _ O

Revisiting _ _ O
the _ _ O
History _ _ O
of _ _ O
Languages _ _ O
• _ _ O
Assembly _ _ O
– _ _ O
Low-level _ _ O
hardware _ _ O
based _ _ O
code _ _ O
• _ _ O
Structured _ _ O
– _ _ O
Introduces _ _ O
subroutines _ _ O
( _ _ O
i.e. _ _ O
functions _ _ O
) _ _ O
and _ _ O
well-defined _ _ O
looping _ _ O
structures _ _ O
• _ _ O
Object-Oriented _ _ O
– _ _ O
Introduces _ _ O
classes _ _ O
and _ _ O
a _ _ O
philosophy _ _ O
about _ _ O
programming _ _ O

It _ _ O
’s _ _ O
In _ _ O
the _ _ O
Name _ _ O
• _ _ O
Object-Oriented _ _ O
Programming _ _ O
is _ _ O
as _ _ O
it _ _ O
sounds _ _ O
. _ _ O
Assume _ _ O
everything _ _ O
can _ _ O
be _ _ O
modeled _ _ O
as _ _ O
an _ _ O
object _ _ O
. _ _ O

Terminology _ _ O
• _ _ O
A _ _ O
class _ _ O
is _ _ O
code _ _ O
that _ _ O
describes _ _ O
objects _ _ O
of _ _ O
that _ _ O
type _ _ O
• _ _ O
An _ _ O
instance _ _ O
is _ _ O
a _ _ O
particular _ _ O
object _ _ O
of _ _ O
a _ _ O
given _ _ O
type _ _ O
• _ _ O
A _ _ O
field _ _ O
is _ _ O
a _ _ O
property _ _ O
of _ _ O
an _ _ O
object _ _ O
• _ _ O
A _ _ O
method _ _ O
is _ _ O
a _ _ O
function _ _ O
that _ _ O
is _ _ O
provided _ _ O
by _ _ O
the _ _ O
class _ _ O
for _ _ O
an _ _ O
object _ _ O
of _ _ O
the _ _ O
class _ _ O
type _ _ O

Static _ _ O
• _ _ O
Referenced _ _ O
by _ _ O
keyword _ _ O
static _ _ O
• _ _ O
Property _ _ O
or _ _ O
method _ _ O
is _ _ O
not _ _ O
dependent _ _ O
on _ _ O
the _ _ O
individual _ _ O
instantiated _ _ O
object _ _ O
, _ _ O
but _ _ O
rather _ _ O
the _ _ O
class _ _ O
as _ _ O
a _ _ O
whole _ _ O
• _ _ O
The _ _ O
property _ _ O
/ _ _ O
method _ _ O
exists _ _ O
between _ _ O
instances _ _ O
; _ _ O
any _ _ O
change _ _ O
made _ _ O
to _ _ O
static _ _ O
fields _ _ O
are _ _ O
reflected _ _ O
through _ _ O
all _ _ O
instances _ _ O
of _ _ O
the _ _ O
class _ _ O
• _ _ O
Static _ _ O
methods _ _ O
can _ _ O
only _ _ O
manipulate _ _ O
static _ _ O
fields _ _ O

Main _ _ O
Portions _ _ O
of _ _ O
OOP _ _ O
• _ _ O
Building _ _ O
a _ _ O
class _ _ O
• _ _ O
Determining _ _ O
inter-class _ _ O
relationships _ _ O
– _ _ O
Subclasses _ _ O
– _ _ O
Superclasses _ _ O
– _ _ O
Ownership _ _ O



