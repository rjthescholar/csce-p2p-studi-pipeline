unlabeled|cs0007|lec20
-DOCSTART- -X- -X- O

CS _ _ O
0007 _ _ O
: _ _ O
Introduction _ _ O
to _ _ O
Java _ _ O
Lecture _ _ O
20 _ _ O
Nathan _ _ O
Ong _ _ O
University _ _ O
of _ _ O
Pittsburgh _ _ O
November _ _ O
22 _ _ O
, _ _ O
2016 _ _ O

Long _ _ O
Story _ _ O
Short _ _ O
• _ _ O
Scanner _ _ O
has _ _ O
a _ _ O
buffering _ _ O
quirk _ _ O
. _ _ O
When _ _ O
scanning _ _ O
for _ _ O
a _ _ O
token _ _ O
( _ _ O
an _ _ O
item _ _ O
like _ _ O
boolean _ _ O
, _ _ O
int _ _ O
) _ _ O
that _ _ O
is _ _ O
not _ _ O
a _ _ O
line _ _ O
, _ _ O
the _ _ O
scanner _ _ O
reads _ _ O
up _ _ O
to _ _ O
the _ _ O
new _ _ O
line _ _ O
character _ _ O
, _ _ O
but _ _ O
does _ _ O
not _ _ O
consume _ _ O
it _ _ O
. _ _ O
• _ _ O
When _ _ O
you _ _ O
call _ _ O
nextLine _ _ O
( _ _ O
) _ _ O
, _ _ O
it _ _ O
sees _ _ O
the _ _ O
new _ _ O
line _ _ O
, _ _ O
assumes _ _ O
it _ _ O
is _ _ O
done _ _ O
reading _ _ O
, _ _ O
and _ _ O
returns _ _ O
an _ _ O
empty _ _ O
String _ _ O
. _ _ O

A _ _ O
Reminder _ _ O
• _ _ O
The _ _ O
act _ _ O
of _ _ O
receiving _ _ O
input _ _ O
is _ _ O
called _ _ O
reading _ _ O
• _ _ O
Relevant _ _ O
classes _ _ O
that _ _ O
do _ _ O
reading _ _ O
are _ _ O
Readers _ _ O

A _ _ O
Re-examination _ _ O
• _ _ O
System.in _ _ O
• _ _ O
An _ _ O
InputStream _ _ O
• _ _ O
If _ _ O
we _ _ O
examine _ _ O
the _ _ O
API _ _ O
, _ _ O
InputStreams _ _ O
can _ _ O
only _ _ O
read _ _ O
bytes _ _ O
. _ _ O
Not _ _ O
very _ _ O
helpful _ _ O
. _ _ O
• _ _ O
What _ _ O
could _ _ O
we _ _ O
try _ _ O
? _ _ O

InputStreamReader _ _ O
• _ _ O
Now _ _ O
we _ _ O
can _ _ O
read _ _ O
characters _ _ O
, _ _ O
but _ _ O
having _ _ O
to _ _ O
combine _ _ O
all _ _ O
the _ _ O
characters _ _ O
is _ _ O
difficult _ _ O
• _ _ O
Why _ _ O
do _ _ O
n’t _ _ O
we _ _ O
use _ _ O
the _ _ O
suggestion _ _ O
from _ _ O
the _ _ O
API _ _ O
? _ _ O

BufferedReader _ _ O
• _ _ O
This _ _ O
thankfully _ _ O
allows _ _ O
us _ _ O
to _ _ O
read _ _ O
full _ _ O
lines _ _ O
of _ _ O
input _ _ O
• _ _ O
The _ _ O
input _ _ O
needs _ _ O
to _ _ O
be _ _ O
processed _ _ O
depending _ _ O
on _ _ O
your _ _ O
needs _ _ O
• _ _ O
Let _ _ O
us _ _ O
first _ _ O
learn _ _ O
how _ _ O
to _ _ O
use _ _ O
BufferedReader _ _ O
correctly _ _ O

Exceptions _ _ O
• _ _ O
An _ _ O
exception _ _ O
is _ _ O
an _ _ O
event _ _ O
meant _ _ O
to _ _ O
disrupt _ _ O
the _ _ O
flow _ _ O
of _ _ O
execution _ _ O
• _ _ O
To _ _ O
throw _ _ O
an _ _ O
exception _ _ O
is _ _ O
to _ _ O
see _ _ O
an _ _ O
exception _ _ O
being _ _ O
raised _ _ O
• _ _ O
To _ _ O
catch _ _ O
an _ _ O
exception _ _ O
is _ _ O
to _ _ O
acknowledge _ _ O
a _ _ O
thrown _ _ O
exception _ _ O
• _ _ O
You _ _ O
probably _ _ O
have _ _ O
already _ _ O
encountered _ _ O
some _ _ O
while _ _ O
debugging _ _ O
your _ _ O
code _ _ O
• _ _ O
We _ _ O
will _ _ O
focus _ _ O
on _ _ O
two _ _ O
of _ _ O
three _ _ O
types _ _ O
, _ _ O
which _ _ O
are _ _ O
more _ _ O
common _ _ O

Exception _ _ O
Types _ _ O
• _ _ O
Checked _ _ O
– _ _ O
Exceptions _ _ O
that _ _ O
need _ _ O
to _ _ O
have _ _ O
a _ _ O
contingency _ _ O
plan _ _ O
should _ _ O
the _ _ O
exception _ _ O
arise _ _ O
– _ _ O
These _ _ O
stop _ _ O
the _ _ O
compiler _ _ O
from _ _ O
running _ _ O
– _ _ O
Example _ _ O
: _ _ O
IOException _ _ O
• _ _ O
Unchecked _ _ O
– _ _ O
Exceptions _ _ O
that _ _ O
tend _ _ O
to _ _ O
indicate _ _ O
the _ _ O
program _ _ O
has _ _ O
a _ _ O
flaw _ _ O
during _ _ O
its _ _ O
execution _ _ O
– _ _ O
These _ _ O
stop _ _ O
the _ _ O
program _ _ O
in _ _ O
the _ _ O
middle _ _ O
of _ _ O
execution _ _ O
– _ _ O
Example _ _ O
: _ _ O
ArrayIndexOutOfBoundsException _ _ O

Dealing _ _ O
with _ _ O
Exceptions _ _ O
• _ _ O
Checked _ _ O
– _ _ O
try _ _ O
, _ _ O
catch _ _ O
, _ _ O
finally _ _ O
• _ _ O
Unchecked _ _ O
– _ _ O
Fix _ _ O
your _ _ O
program _ _ O
code _ _ O

Keywords _ _ O
in _ _ O
Context _ _ O
• _ _ O
Everything _ _ O
inside _ _ O
the _ _ O
try _ _ O
block _ _ O
indicates _ _ O
the _ _ O
section _ _ O
of _ _ O
code _ _ O
that _ _ O
may _ _ O
throw _ _ O
exceptions _ _ O
• _ _ O
Inside _ _ O
the _ _ O
catch _ _ O
’s _ _ O
parentheses _ _ O
is _ _ O
the _ _ O
expected _ _ O
exception _ _ O
to _ _ O
process _ _ O
, _ _ O
and _ _ O
the _ _ O
name _ _ O
given _ _ O
to _ _ O
it _ _ O
( _ _ O
usually _ _ O
‘ _ _ O
e _ _ O
’ _ _ O
) _ _ O
• _ _ O
Inside _ _ O
the _ _ O
catch _ _ O
block _ _ O
indicates _ _ O
the _ _ O
section _ _ O
of _ _ O
code _ _ O
that _ _ O
should _ _ O
be _ _ O
executed _ _ O
if _ _ O
the _ _ O
exception _ _ O
is _ _ O
caught _ _ O

Some _ _ O
FAQ _ _ O
• _ _ O
How _ _ O
do _ _ O
I _ _ O
know _ _ O
when _ _ O
an _ _ O
exception _ _ O
is _ _ O
thrown _ _ O
? _ _ O
– _ _ O
Check _ _ O
the _ _ O
API _ _ O
for _ _ O
relevant _ _ O
methods _ _ O
• _ _ O
How _ _ O
do _ _ O
I _ _ O
know _ _ O
which _ _ O
exception _ _ O
is _ _ O
thrown _ _ O
? _ _ O
– _ _ O
Check _ _ O
the _ _ O
API _ _ O
• _ _ O
How _ _ O
much _ _ O
code _ _ O
should _ _ O
I _ _ O
surround _ _ O
with _ _ O
try _ _ O
? _ _ O
– _ _ O
Only _ _ O
as _ _ O
much _ _ O
as _ _ O
you _ _ O
need _ _ O
– _ _ O
Note _ _ O
that _ _ O
scope _ _ O
applies _ _ O
here _ _ O
as _ _ O
well _ _ O
• _ _ O
Can _ _ O
I _ _ O
catch _ _ O
multiple _ _ O
exceptions _ _ O
? _ _ O
– _ _ O
Yes _ _ O
, _ _ O
you _ _ O
can _ _ O
use _ _ O
several _ _ O
catch _ _ O
blocks _ _ O
– _ _ O
We _ _ O
’ll _ _ O
see _ _ O
an _ _ O
example _ _ O
soon _ _ O

Example _ _ O
import _ _ O
java.io.BufferedReader _ _ O
; _ _ O
import _ _ O
java.io.InputStreamReader _ _ O
; _ _ O
import _ _ O
java.io.IOException _ _ O
; _ _ O
public _ _ O
class _ _ O
BRExample _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
line _ _ O
= _ _ O
" _ _ O
" _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
"Type _ _ O
something _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
try _ _ O
{ _ _ O
BufferedReader _ _ O
reader _ _ O
= _ _ O
new _ _ O
BufferedReader _ _ O
( _ _ O
new _ _ O
InputStreamReader _ _ O
( _ _ O
System.in _ _ O
) _ _ O
) _ _ O
; _ _ O
line _ _ O
= _ _ O
reader.readLine _ _ O
( _ _ O
) _ _ O
; _ _ O
reader.close _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
catch _ _ O
( _ _ O
IOException _ _ O
e _ _ O
) _ _ O
{ _ _ O
e.printStackTrace _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
System.out.println _ _ O
( _ _ O
line _ _ O
+ _ _ O
" _ _ O
is _ _ O
what _ _ O
you _ _ O
wrote _ _ O
. _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
BRExample _ _ O

Converting _ _ O
Strings _ _ O
into _ _ O
Useful _ _ O
Primitives _ _ O
• _ _ O
Scanner _ _ O
gave _ _ O
us _ _ O
useful _ _ O
methods _ _ O
like _ _ O
nextInt _ _ O
( _ _ O
) _ _ O
or _ _ O
nextDouble _ _ O
( _ _ O
) _ _ O
. _ _ O
We _ _ O
can _ _ O
do _ _ O
the _ _ O
same _ _ O
with _ _ O
BufferedReader _ _ O
, _ _ O
but _ _ O
not _ _ O
directly _ _ O
. _ _ O
• _ _ O
We _ _ O
need _ _ O
to _ _ O
take _ _ O
another _ _ O
trip _ _ O
to _ _ O
the _ _ O
API _ _ O
, _ _ O
specifically _ _ O
for _ _ O
the _ _ O
classes _ _ O
that _ _ O
back _ _ O
the _ _ O
primitives _ _ O
. _ _ O
• _ _ O
Let _ _ O
’s _ _ O
look _ _ O
at _ _ O
Integer _ _ O

Example _ _ O
public _ _ O
class _ _ O
Converter _ _ O
{ _ _ O
public _ _ O
static _ _ O
int _ _ O
convertToInt _ _ O
( _ _ O
String _ _ O
line _ _ O
) _ _ O
{ _ _ O
try _ _ O
{ _ _ O
return _ _ O
Integer.parseInt _ _ O
( _ _ O
line _ _ O
) _ _ O
; _ _ O
} _ _ O
catch _ _ O
( _ _ O
NumberFormatException _ _ O
e _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
? _ _ O
? _ _ O
} _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
Converter _ _ O

Example _ _ O
import _ _ O
java.io.BufferedReader _ _ O
; _ _ O
import _ _ O
java.io.InputStreamReader _ _ O
; _ _ O
import _ _ O
java.io.IOException _ _ O
; _ _ O
public _ _ O
class _ _ O
BRExample2 _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
int _ _ O
inputNum _ _ O
= _ _ O
-1 _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
"Type _ _ O
an _ _ O
integer _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
try _ _ O
{ _ _ O
BufferedReader _ _ O
reader _ _ O
= _ _ O
new _ _ O
BufferedReader _ _ O
( _ _ O
new _ _ O
InputStreamReader _ _ O
( _ _ O
System.in _ _ O
) _ _ O
) _ _ O
; _ _ O
String _ _ O
line _ _ O
= _ _ O
reader.readLine _ _ O
( _ _ O
) _ _ O
; _ _ O
inputNum _ _ O
= _ _ O
Converter.convertToInt _ _ O
( _ _ O
line _ _ O
) _ _ O
; _ _ O
reader.close _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
catch _ _ O
( _ _ O
IOException _ _ O
e _ _ O
) _ _ O
{ _ _ O
e.printStackTrace _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
System.out.println _ _ O
( _ _ O
inputNum _ _ O
+ _ _ O
" _ _ O
+ _ _ O
1 _ _ O
= _ _ O
" _ _ O
+ _ _ O
( _ _ O
inputNum+1 _ _ O
) _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
BRExample2 _ _ O

A _ _ O
Note _ _ O
about _ _ O
Integer _ _ O
• _ _ O
Integer _ _ O
is _ _ O
a _ _ O
wrapper _ _ O
class _ _ O
around _ _ O
the _ _ O
primitive _ _ O
int _ _ O
• _ _ O
All _ _ O
primitives _ _ O
have _ _ O
wrapper _ _ O
classes _ _ O
• _ _ O
Consult _ _ O
the _ _ O
API _ _ O

File _ _ O
Input _ _ O
/ _ _ O
Output _ _ O
• _ _ O
Files _ _ O
are _ _ O
the _ _ O
biggest _ _ O
way _ _ O
we _ _ O
interact _ _ O
with _ _ O
computer _ _ O
data _ _ O
. _ _ O
• _ _ O
Your _ _ O
Word _ _ O
documents _ _ O
, _ _ O
your _ _ O
game _ _ O
save _ _ O
files _ _ O
, _ _ O
your _ _ O
Java _ _ O
source _ _ O
code _ _ O
, _ _ O
all _ _ O
of _ _ O
them _ _ O
are _ _ O
stored _ _ O
as _ _ O
files _ _ O
. _ _ O
• _ _ O
We _ _ O
want _ _ O
to _ _ O
read _ _ O
them _ _ O
too _ _ O
! _ _ O
• _ _ O
Let _ _ O
’s _ _ O
check _ _ O
BufferedReader _ _ O
’s _ _ O
API _ _ O
for _ _ O
any _ _ O
clues _ _ O
. _ _ O

File _ _ O
Input _ _ O
/ _ _ O
Output _ _ O
• _ _ O
Files _ _ O
are _ _ O
the _ _ O
biggest _ _ O
way _ _ O
we _ _ O
interact _ _ O
with _ _ O
computer _ _ O
data _ _ O
. _ _ O
• _ _ O
Your _ _ O
Word _ _ O
documents _ _ O
, _ _ O
your _ _ O
game _ _ O
save _ _ O
files _ _ O
, _ _ O
your _ _ O
Java _ _ O
source _ _ O
code _ _ O
, _ _ O
all _ _ O
of _ _ O
them _ _ O
are _ _ O
stored _ _ O
as _ _ O
files _ _ O
. _ _ O
• _ _ O
We _ _ O
want _ _ O
to _ _ O
read _ _ O
them _ _ O
too _ _ O
! _ _ O
• _ _ O
Let _ _ O
’s _ _ O
check _ _ O
BufferedReader _ _ O
’s _ _ O
API _ _ O
for _ _ O
any _ _ O
clues _ _ O
. _ _ O

import _ _ O
java.io.BufferedReader _ _ O
; _ _ O
import _ _ O
java.io.InputStreamReader _ _ O
; _ _ O
import _ _ O
java.io.IOException _ _ O
; _ _ O
import _ _ O
java.io.FileNotFoundException _ _ O
; _ _ O
public _ _ O
class _ _ O
BRWithFiles _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
int _ _ O
inputNum _ _ O
= _ _ O
-1 _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
"Type _ _ O
an _ _ O
integer _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
try _ _ O
{ _ _ O
BufferedReader _ _ O
reader _ _ O
= _ _ O
new _ _ O
BufferedReader _ _ O
( _ _ O
new _ _ O
FileReader _ _ O
( _ _ O
"test.txt _ _ O
" _ _ O
) _ _ O
) _ _ O
; _ _ O
String _ _ O
line _ _ O
= _ _ O
reader.readLine _ _ O
( _ _ O
) _ _ O
; _ _ O
inputNum _ _ O
= _ _ O
Converter.convertToInt _ _ O
( _ _ O
line _ _ O
) _ _ O
; _ _ O
reader.close _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
catch _ _ O
( _ _ O
FileNotFoundException _ _ O
e _ _ O
) _ _ O
{ _ _ O
System.err.println _ _ O
( _ _ O
"The _ _ O
file _ _ O
was _ _ O
not _ _ O
found _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
catch _ _ O
( _ _ O
IOException _ _ O
e _ _ O
) _ _ O
{ _ _ O
e.printStackTrace _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
System.out.println _ _ O
( _ _ O
"The _ _ O
number _ _ O
in _ _ O
the _ _ O
file _ _ O
was _ _ O
: _ _ O
" _ _ O
+ _ _ O
inputNum _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
BRWithFiles _ _ O

Writers _ _ O
and _ _ O
Writing _ _ O
• _ _ O
The _ _ O
act _ _ O
of _ _ O
providing _ _ O
output _ _ O
is _ _ O
called _ _ O
writing _ _ O
• _ _ O
Relevant _ _ O
classes _ _ O
that _ _ O
do _ _ O
writing _ _ O
are _ _ O
Writers _ _ O
• _ _ O
How _ _ O
do _ _ O
I _ _ O
write _ _ O
to _ _ O
a _ _ O
File _ _ O
? _ _ O

import _ _ O
java.io.BufferedReader _ _ O
; _ _ O
import _ _ O
java.io.InputStreamReader _ _ O
; _ _ O
import _ _ O
java.io.IOException _ _ O
; _ _ O
public _ _ O
class _ _ O
InputAndOutput _ _ O
{ _ _ O
… _ _ O
public _ _ O
static _ _ O
String _ _ O
getInput _ _ O
( _ _ O
String _ _ O
prompt _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
prompt _ _ O
) _ _ O
; _ _ O
String _ _ O
input _ _ O
= _ _ O
null _ _ O
; _ _ O
try _ _ O
{ _ _ O
BufferedReader _ _ O
reader _ _ O
= _ _ O
new _ _ O
BufferedReader _ _ O
( _ _ O
new _ _ O
InputStreamReader _ _ O
( _ _ O
System.in _ _ O
) _ _ O
) _ _ O
; _ _ O
input _ _ O
= _ _ O
reader.readLine _ _ O
( _ _ O
) _ _ O
; _ _ O
reader.close _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
catch _ _ O
( _ _ O
IOException _ _ O
e _ _ O
) _ _ O
{ _ _ O
e.printStackTrace _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
return _ _ O
input _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
getInput _ _ O
( _ _ O
String _ _ O
) _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
InputAndOutput _ _ O

import _ _ O
java.io.BufferedReader _ _ O
; _ _ O
import _ _ O
java.io.InputStreamReader _ _ O
; _ _ O
import _ _ O
java.io.IOException _ _ O
; _ _ O
public _ _ O
class _ _ O
InputAndOutput _ _ O
{ _ _ O
… _ _ O
public _ _ O
static _ _ O
void _ _ O
writeOutput _ _ O
( _ _ O
String _ _ O
lines _ _ O
, _ _ O
String _ _ O
filename _ _ O
) _ _ O
{ _ _ O
try _ _ O
{ _ _ O
FileWriter _ _ O
writer _ _ O
= _ _ O
new _ _ O
FileWriter _ _ O
( _ _ O
filename _ _ O
) _ _ O
; _ _ O
writer.write _ _ O
( _ _ O
lines _ _ O
) _ _ O
; _ _ O
writer.flush _ _ O
( _ _ O
) _ _ O
; _ _ O
writer.close _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
catch _ _ O
( _ _ O
IOException _ _ O
e _ _ O
) _ _ O
{ _ _ O
e.printStackTrace _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
writeOutput _ _ O
( _ _ O
String _ _ O
, _ _ O
String _ _ O
) _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
InputAndOutput _ _ O

Example _ _ O
import _ _ O
java.io.BufferedReader _ _ O
; _ _ O
import _ _ O
java.io.InputStreamReader _ _ O
; _ _ O
import _ _ O
java.io.IOException _ _ O
; _ _ O
public _ _ O
class _ _ O
InputAndOutput _ _ O
{ _ _ O
… _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
String _ _ O
filename _ _ O
= _ _ O
getInput _ _ O
( _ _ O
"What _ _ O
file _ _ O
would _ _ O
you _ _ O
like _ _ O
to _ _ O
create _ _ O
? _ _ O
" _ _ O
) _ _ O
; _ _ O
String _ _ O
toStore _ _ O
= _ _ O
getInput _ _ O
( _ _ O
"What _ _ O
would _ _ O
you _ _ O
like _ _ O
to _ _ O
store _ _ O
in _ _ O
the _ _ O
file _ _ O
? _ _ O
" _ _ O
) _ _ O
; _ _ O
writeOutput _ _ O
( _ _ O
filename _ _ O
, _ _ O
toStore _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
end _ _ O
method _ _ O
main _ _ O
} _ _ O
/ _ _ O
/ _ _ O
End _ _ O
class _ _ O
InputAndOutput _ _ O



