unlabeled|cs0441|lec16
-DOCSTART- -X- -X- O

Discrete _ _ O
Structures _ _ O
for _ _ O
Computer _ _ O
Science _ _ O
William _ _ O
Garrison _ _ O
bill@cs.pitt.edu _ _ O
6311 _ _ O
Sennott _ _ O
Square _ _ O
Lecture _ _ O
# _ _ O
16 _ _ O
: _ _ O
Counting _ _ O
Basics _ _ O
Based _ _ O
on _ _ O
materials _ _ O
developed _ _ O
by _ _ O
Dr. _ _ O
Adam _ _ O
Lee _ _ O

Today _ _ O
’s _ _ O
Topics _ _ O
n _ _ O
Introduction _ _ O
to _ _ O
combinatorics _ _ O
n _ _ O
Product _ _ O
rule _ _ O
n _ _ O
Sum _ _ O
rule _ _ O

What _ _ O
is _ _ O
combinatorics _ _ O
? _ _ O
Combinatorics _ _ O
is _ _ O
the _ _ O
study _ _ O
of _ _ O
arrangements _ _ O
of _ _ O
discrete _ _ O
objects _ _ O
. _ _ O
We _ _ O
can _ _ O
think _ _ O
of _ _ O
this _ _ O
as _ _ O
a _ _ O
fancy _ _ O
word _ _ O
for _ _ O
“ _ _ O
counting _ _ O
” _ _ O
Many _ _ O
applications _ _ O
throughout _ _ O
computer _ _ O
science _ _ O
: _ _ O
l _ _ O
Algorithm _ _ O
complexity _ _ O
analysis _ _ O
l _ _ O
Resource _ _ O
allocation _ _ O
& _ _ O
scheduling _ _ O
l _ _ O
Security _ _ O
analysis _ _ O
l _ _ O
… _ _ O
Today _ _ O
, _ _ O
we _ _ O
will _ _ O
learn _ _ O
the _ _ O
basics _ _ O
of _ _ O
counting _ _ O
. _ _ O
More _ _ O
advanced _ _ O
topics _ _ O
will _ _ O
be _ _ O
covered _ _ O
in _ _ O
later _ _ O
lectures _ _ O
. _ _ O

A _ _ O
motivating _ _ O
example _ _ O
… _ _ O
To _ _ O
access _ _ O
most _ _ O
computer _ _ O
systems _ _ O
, _ _ O
you _ _ O
need _ _ O
to _ _ O
login _ _ O
with _ _ O
a _ _ O
user _ _ O
name _ _ O
and _ _ O
a _ _ O
password _ _ O
. _ _ O
Suppose _ _ O
that _ _ O
for _ _ O
a _ _ O
certain _ _ O
system _ _ O
l _ _ O
Passwords _ _ O
must _ _ O
contain _ _ O
either _ _ O
6 _ _ O
, _ _ O
7 _ _ O
, _ _ O
or _ _ O
8 _ _ O
characters _ _ O
l _ _ O
Each _ _ O
character _ _ O
must _ _ O
be _ _ O
an _ _ O
uppercase _ _ O
letter _ _ O
or _ _ O
a _ _ O
digit _ _ O
l _ _ O
Every _ _ O
password _ _ O
must _ _ O
contain _ _ O
at _ _ O
least _ _ O
one _ _ O
digit _ _ O
How _ _ O
many _ _ O
valid _ _ O
passwords _ _ O
are _ _ O
there _ _ O
? _ _ O

Solving _ _ O
these _ _ O
types _ _ O
of _ _ O
problems _ _ O
requires _ _ O
that _ _ O
we _ _ O
learn _ _ O
how _ _ O
to _ _ O
count _ _ O
complex _ _ O
objects _ _ O
Fortunately _ _ O
, _ _ O
we _ _ O
can _ _ O
solve _ _ O
many _ _ O
types _ _ O
of _ _ O
combinatorial _ _ O
problems _ _ O
using _ _ O
two _ _ O
simple _ _ O
rules _ _ O
: _ _ O
The _ _ O
product _ _ O
rule _ _ O
The _ _ O
sum _ _ O
rule _ _ O

Product _ _ O
rule _ _ O
applies _ _ O
when _ _ O
a _ _ O
counting _ _ O
problem _ _ O
can _ _ O
be _ _ O
broken _ _ O
into _ _ O
multiple _ _ O
tasks _ _ O
The _ _ O
Product _ _ O
Rule _ _ O
: _ _ O
Suppose _ _ O
a _ _ O
procedure _ _ O
can _ _ O
be _ _ O
broken _ _ O
into _ _ O
a _ _ O
sequence _ _ O
t1 _ _ O
, _ _ O
t2 _ _ O
, _ _ O
… _ _ O
, _ _ O
tk _ _ O
of _ _ O
tasks _ _ O
. _ _ O
Further _ _ O
, _ _ O
let _ _ O
there _ _ O
be _ _ O
n1 _ _ O
, _ _ O
n2 _ _ O
, _ _ O
… _ _ O
, _ _ O
nk _ _ O
ways _ _ O
to _ _ O
complete _ _ O
each _ _ O
task _ _ O
. _ _ O
Then _ _ O
there _ _ O
are _ _ O
n1× _ _ O
n2× _ _ O
… _ _ O
× _ _ O
nk _ _ O
ways _ _ O
to _ _ O
complete _ _ O
the _ _ O
procedure _ _ O
. _ _ O
To _ _ O
apply _ _ O
the _ _ O
product _ _ O
rule _ _ O
, _ _ O
do _ _ O
the _ _ O
following _ _ O
: _ _ O
1 _ _ O
. _ _ O
Identify _ _ O
each _ _ O
task _ _ O
t1 _ _ O
, _ _ O
… _ _ O
, _ _ O
tk _ _ O
2 _ _ O
. _ _ O
For _ _ O
each _ _ O
task _ _ O
ti _ _ O
, _ _ O
determine _ _ O
the _ _ O
ni _ _ O
, _ _ O
the _ _ O
number _ _ O
of _ _ O
possible _ _ O
ways _ _ O
to _ _ O
complete _ _ O
ti _ _ O
3 _ _ O
. _ _ O
Compute _ _ O
n1× _ _ O
n2× _ _ O
… _ _ O
× _ _ O
nk _ _ O
Let _ _ O
’s _ _ O
look _ _ O
at _ _ O
a _ _ O
few _ _ O
examples _ _ O
… _ _ O

An _ _ O
example _ _ O
: _ _ O
Assigning _ _ O
offices _ _ O
Example _ _ O
: _ _ O
It _ _ O
is _ _ O
Sherif _ _ O
and _ _ O
Bill _ _ O
’s _ _ O
first _ _ O
day _ _ O
of _ _ O
work _ _ O
at _ _ O
Pitt _ _ O
. _ _ O
If _ _ O
there _ _ O
are _ _ O
10 _ _ O
unused _ _ O
offices _ _ O
in _ _ O
their _ _ O
department _ _ O
, _ _ O
how _ _ O
many _ _ O
ways _ _ O
can _ _ O
Sherif _ _ O
and _ _ O
Bill _ _ O
be _ _ O
assigned _ _ O
an _ _ O
office _ _ O
? _ _ O
Step _ _ O
1 _ _ O
: _ _ O
Determine _ _ O
tasks _ _ O
1 _ _ O
. _ _ O
Give _ _ O
Sherif _ _ O
an _ _ O
office _ _ O
2 _ _ O
. _ _ O
Give _ _ O
Bill _ _ O
an _ _ O
office _ _ O
Step _ _ O
2 _ _ O
: _ _ O
Count _ _ O
possible _ _ O
completions _ _ O
1 _ _ O
. _ _ O
Can _ _ O
give _ _ O
any _ _ O
one _ _ O
of _ _ O
10 _ _ O
offices _ _ O
to _ _ O
Sherif _ _ O
2 _ _ O
. _ _ O
Can _ _ O
give _ _ O
any _ _ O
one _ _ O
of _ _ O
the _ _ O
remaining _ _ O
9 _ _ O
offices _ _ O
to _ _ O
Bill _ _ O
Step _ _ O
3 _ _ O
: _ _ O
Compute _ _ O
the _ _ O
product _ _ O
l _ _ O
Sherif _ _ O
and _ _ O
Bill _ _ O
can _ _ O
be _ _ O
assigned _ _ O
offices _ _ O
in _ _ O
10× _ _ O
9 _ _ O
= _ _ O
90 _ _ O
ways _ _ O
! _ _ O

Auditorium _ _ O
Seating _ _ O
Example _ _ O
: _ _ O
The _ _ O
chairs _ _ O
in _ _ O
an _ _ O
auditorium _ _ O
are _ _ O
to _ _ O
be _ _ O
labeled _ _ O
using _ _ O
an _ _ O
upper _ _ O
case _ _ O
letter _ _ O
and _ _ O
a _ _ O
positive _ _ O
number _ _ O
not _ _ O
exceeding _ _ O
100 _ _ O
( _ _ O
e.g. _ _ O
, _ _ O
B23 _ _ O
) _ _ O
. _ _ O
What _ _ O
is _ _ O
the _ _ O
maximum _ _ O
number _ _ O
of _ _ O
seats _ _ O
that _ _ O
can _ _ O
be _ _ O
placed _ _ O
in _ _ O
the _ _ O
auditorium _ _ O
? _ _ O
Solution _ _ O
: _ _ O
l _ _ O
Task _ _ O
1 _ _ O
: _ _ O
Count _ _ O
the _ _ O
letters _ _ O
that _ _ O
can _ _ O
be _ _ O
used _ _ O
( _ _ O
26 _ _ O
) _ _ O
l _ _ O
Task _ _ O
2 _ _ O
: _ _ O
Count _ _ O
the _ _ O
numbers _ _ O
that _ _ O
can _ _ O
be _ _ O
used _ _ O
( _ _ O
100 _ _ O
) _ _ O
l _ _ O
So _ _ O
, _ _ O
the _ _ O
auditorium _ _ O
can _ _ O
hold _ _ O
26× _ _ O
100 _ _ O
= _ _ O
2600 _ _ O
chairs _ _ O
. _ _ O

Counting _ _ O
Bit _ _ O
Strings _ _ O
Example _ _ O
: _ _ O
How _ _ O
many _ _ O
bit _ _ O
strings _ _ O
of _ _ O
length _ _ O
5 _ _ O
are _ _ O
there _ _ O
? _ _ O
Solution _ _ O
: _ _ O
l _ _ O
Task _ _ O
1 _ _ O
: _ _ O
Choose _ _ O
first _ _ O
bit _ _ O
l _ _ O
Task _ _ O
2 _ _ O
: _ _ O
Choose _ _ O
second _ _ O
bit _ _ O
l _ _ O
Task _ _ O
3 _ _ O
: _ _ O
Choose _ _ O
third _ _ O
bit _ _ O
l _ _ O
Task _ _ O
4 _ _ O
: _ _ O
Choose _ _ O
fourth _ _ O
bit _ _ O
l _ _ O
Task _ _ O
5 _ _ O
: _ _ O
Choose _ _ O
fifth _ _ O
bit _ _ O
( _ _ O
2 _ _ O
) _ _ O
( _ _ O
2 _ _ O
) _ _ O
( _ _ O
2 _ _ O
) _ _ O
( _ _ O
2 _ _ O
) _ _ O
( _ _ O
2 _ _ O
) _ _ O
l _ _ O
So _ _ O
, _ _ O
there _ _ O
are _ _ O
2× _ _ O
2× _ _ O
2× _ _ O
2× _ _ O
2 _ _ O
= _ _ O
25 _ _ O
= _ _ O
32 _ _ O
bit _ _ O
strings _ _ O
of _ _ O
length _ _ O
5 _ _ O

Counting _ _ O
1-to-1 _ _ O
Functions _ _ O
Example _ _ O
: _ _ O
How _ _ O
many _ _ O
1-to-1 _ _ O
functions _ _ O
are _ _ O
there _ _ O
mapping _ _ O
a _ _ O
set _ _ O
A _ _ O
containing _ _ O
m _ _ O
elements _ _ O
to _ _ O
another _ _ O
set _ _ O
B _ _ O
containing _ _ O
n _ _ O
elements _ _ O
( _ _ O
assuming _ _ O
that _ _ O
m _ _ O
≤ _ _ O
n _ _ O
) _ _ O
? _ _ O
Solution _ _ O
: _ _ O
l _ _ O
Task _ _ O
1 _ _ O
: _ _ O
Map _ _ O
first _ _ O
element _ _ O
of _ _ O
A _ _ O
to _ _ O
B _ _ O
l _ _ O
Task _ _ O
2 _ _ O
: _ _ O
Map _ _ O
second _ _ O
element _ _ O
of _ _ O
A _ _ O
to _ _ O
B _ _ O
l _ _ O
Task _ _ O
3 _ _ O
: _ _ O
Map _ _ O
third _ _ O
element _ _ O
of _ _ O
A _ _ O
to _ _ O
B _ _ O
l _ _ O
… _ _ O
l _ _ O
Task _ _ O
m _ _ O
: _ _ O
Map _ _ O
last _ _ O
element _ _ O
of _ _ O
A _ _ O
to _ _ O
B _ _ O
( _ _ O
n _ _ O
) _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
( _ _ O
n-2 _ _ O
) _ _ O
( _ _ O
n-m+1 _ _ O
) _ _ O
l _ _ O
So _ _ O
, _ _ O
there _ _ O
are _ _ O
a _ _ O
total _ _ O
of _ _ O
n _ _ O
× _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
× _ _ O
… _ _ O
× _ _ O
( _ _ O
n-m+1 _ _ O
) _ _ O
1-to-1 _ _ O
functions _ _ O
from _ _ O
A _ _ O
to _ _ O
B _ _ O

License _ _ O
Plates _ _ O
Example _ _ O
: _ _ O
Suppose _ _ O
that _ _ O
in _ _ O
some _ _ O
state _ _ O
, _ _ O
license _ _ O
plates _ _ O
consist _ _ O
of _ _ O
three _ _ O
letters _ _ O
followed _ _ O
by _ _ O
three _ _ O
decimal _ _ O
digits _ _ O
. _ _ O
How _ _ O
many _ _ O
valid _ _ O
license _ _ O
plates _ _ O
are _ _ O
there _ _ O
? _ _ O
A _ _ O
B _ _ O
C _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
26 _ _ O
choices _ _ O
for _ _ O
each _ _ O
10 _ _ O
choices _ _ O
for _ _ O
each _ _ O
Solution _ _ O
: _ _ O
There _ _ O
are _ _ O
263×103 _ _ O
= _ _ O
17 _ _ O
, _ _ O
576 _ _ O
, _ _ O
000 _ _ O
possible _ _ O
valid _ _ O
license _ _ O
plates _ _ O

In-class _ _ O
exercises _ _ O
Top _ _ O
Hat _ _ O

The _ _ O
sum _ _ O
rule _ _ O
applies _ _ O
when _ _ O
a _ _ O
single _ _ O
task _ _ O
can _ _ O
be _ _ O
completed _ _ O
using _ _ O
several _ _ O
different _ _ O
approaches _ _ O
The _ _ O
Sum _ _ O
Rule _ _ O
: _ _ O
Suppose _ _ O
that _ _ O
a _ _ O
single _ _ O
task _ _ O
can _ _ O
be _ _ O
completed _ _ O
in _ _ O
either _ _ O
one _ _ O
of _ _ O
n1 _ _ O
ways _ _ O
, _ _ O
one _ _ O
of _ _ O
n2 _ _ O
ways _ _ O
, _ _ O
… _ _ O
, _ _ O
or _ _ O
one _ _ O
of _ _ O
nk _ _ O
ways _ _ O
. _ _ O
Then _ _ O
the _ _ O
task _ _ O
can _ _ O
be _ _ O
completed _ _ O
in _ _ O
n1 _ _ O
+ _ _ O
n2 _ _ O
+ _ _ O
… _ _ O
+ _ _ O
nk _ _ O
different _ _ O
ways _ _ O
. _ _ O
Note _ _ O
: _ _ O
We _ _ O
can _ _ O
break _ _ O
the _ _ O
set _ _ O
of _ _ O
all _ _ O
possible _ _ O
solutions _ _ O
to _ _ O
the _ _ O
problem _ _ O
into _ _ O
disjoint _ _ O
subsets _ _ O
. _ _ O
E.g. _ _ O
, _ _ O
if _ _ O
we _ _ O
have _ _ O
k _ _ O
“ _ _ O
classes _ _ O
” _ _ O
of _ _ O
solutions _ _ O
, _ _ O
then _ _ O
S _ _ O
= _ _ O
S1 _ _ O
∪ _ _ O
S2 _ _ O
∪ _ _ O
… _ _ O
∪ _ _ O
Sk _ _ O
l _ _ O
|S| _ _ O
= _ _ O
|S1 _ _ O
∪ _ _ O
S2 _ _ O
∪ _ _ O
… _ _ O
∪ _ _ O
Sk| _ _ O
l _ _ O
= _ _ O
|S1| _ _ O
+ _ _ O
|S2| _ _ O
+ _ _ O
… _ _ O
+ _ _ O
|Sk| _ _ O
l _ _ O
= _ _ O
n1 _ _ O
+ _ _ O
n2 _ _ O
+ _ _ O
… _ _ O
+ _ _ O
nk _ _ O
Since _ _ O
S1 _ _ O
, _ _ O
… _ _ O
, _ _ O
SK _ _ O
are _ _ O
disjoint _ _ O

University _ _ O
Committees _ _ O
Example _ _ O
: _ _ O
Suppose _ _ O
that _ _ O
either _ _ O
a _ _ O
CS _ _ O
professor _ _ O
or _ _ O
a _ _ O
CS _ _ O
graduate _ _ O
student _ _ O
can _ _ O
be _ _ O
nominated _ _ O
to _ _ O
serve _ _ O
on _ _ O
the _ _ O
CS _ _ O
Day _ _ O
Committee _ _ O
. _ _ O
If _ _ O
there _ _ O
are _ _ O
21 _ _ O
CS _ _ O
professors _ _ O
and _ _ O
101 _ _ O
CS _ _ O
graduate _ _ O
students _ _ O
, _ _ O
how _ _ O
many _ _ O
ways _ _ O
can _ _ O
this _ _ O
seat _ _ O
on _ _ O
the _ _ O
committee _ _ O
be _ _ O
chosen _ _ O
? _ _ O
Solution _ _ O
: _ _ O
l _ _ O
Let _ _ O
➣ _ _ O
P _ _ O
be _ _ O
the _ _ O
set _ _ O
of _ _ O
professors _ _ O
➣ _ _ O
G _ _ O
be _ _ O
the _ _ O
set _ _ O
of _ _ O
graduate _ _ O
students _ _ O
➣ _ _ O
S _ _ O
be _ _ O
the _ _ O
solution _ _ O
set _ _ O
, _ _ O
with _ _ O
S _ _ O
= _ _ O
P _ _ O
∪ _ _ O
G _ _ O
l _ _ O
Then _ _ O
there _ _ O
are _ _ O
|S| _ _ O
= _ _ O
|P _ _ O
∪ _ _ O
G| _ _ O
= _ _ O
|P| _ _ O
+ _ _ O
|G| _ _ O
= _ _ O
21 _ _ O
+ _ _ O
101 _ _ O
= _ _ O
122 _ _ O
ways _ _ O
to _ _ O
fill _ _ O
the _ _ O
empty _ _ O
seat _ _ O
on _ _ O
the _ _ O
committee _ _ O
. _ _ O

Travel _ _ O
Choices _ _ O
Example _ _ O
: _ _ O
Jane _ _ O
wants _ _ O
to _ _ O
travel _ _ O
from _ _ O
Pittsburgh _ _ O
to _ _ O
New _ _ O
York _ _ O
City _ _ O
. _ _ O
If _ _ O
she _ _ O
flies _ _ O
, _ _ O
she _ _ O
can _ _ O
leave _ _ O
at _ _ O
any _ _ O
one _ _ O
of _ _ O
12 _ _ O
departure _ _ O
times _ _ O
. _ _ O
If _ _ O
she _ _ O
takes _ _ O
the _ _ O
bus _ _ O
, _ _ O
she _ _ O
can _ _ O
leave _ _ O
at _ _ O
any _ _ O
one _ _ O
of _ _ O
6 _ _ O
departure _ _ O
times _ _ O
. _ _ O
If _ _ O
she _ _ O
takes _ _ O
the _ _ O
train _ _ O
, _ _ O
she _ _ O
can _ _ O
leave _ _ O
at _ _ O
any _ _ O
one _ _ O
of _ _ O
4 _ _ O
departure _ _ O
times _ _ O
. _ _ O
How _ _ O
many _ _ O
different _ _ O
departure _ _ O
times _ _ O
can _ _ O
Jane _ _ O
choose _ _ O
from _ _ O
? _ _ O
Solution _ _ O
: _ _ O
l _ _ O
S _ _ O
= _ _ O
F _ _ O
∪ _ _ O
B _ _ O
∪ _ _ O
T _ _ O
, _ _ O
so _ _ O
l _ _ O
|S| _ _ O
= _ _ O
|F _ _ O
∪ _ _ O
B _ _ O
∪ _ _ O
T| _ _ O
l _ _ O
l _ _ O
l _ _ O
= _ _ O
|F| _ _ O
+ _ _ O
|B| _ _ O
+ _ _ O
|T| _ _ O
= _ _ O
12 _ _ O
+ _ _ O
6 _ _ O
+ _ _ O
4 _ _ O
= _ _ O
22 _ _ O
departure _ _ O
times _ _ O

The _ _ O
product _ _ O
and _ _ O
sum _ _ O
rules _ _ O
are _ _ O
kind _ _ O
of _ _ O
boring _ _ O
… _ _ O
Most _ _ O
interesting _ _ O
counting _ _ O
problems _ _ O
can _ _ O
not _ _ O
be _ _ O
solved _ _ O
using _ _ O
the _ _ O
product _ _ O
rule _ _ O
or _ _ O
the _ _ O
sum _ _ O
rule _ _ O
alone _ _ O
… _ _ O
… _ _ O
but _ _ O
many _ _ O
interesting _ _ O
problems _ _ O
can _ _ O
be _ _ O
solved _ _ O
by _ _ O
combining _ _ O
these _ _ O
two _ _ O
approaches _ _ O
! _ _ O
Let _ _ O
’s _ _ O
revisit _ _ O
our _ _ O
password _ _ O
example _ _ O
… _ _ O

Passwords _ _ O
revisited _ _ O
… _ _ O
To _ _ O
access _ _ O
most _ _ O
computer _ _ O
systems _ _ O
, _ _ O
you _ _ O
need _ _ O
to _ _ O
login _ _ O
with _ _ O
a _ _ O
user _ _ O
name _ _ O
and _ _ O
a _ _ O
password _ _ O
. _ _ O
Use _ _ O
the _ _ O
product _ _ O
rule _ _ O
to _ _ O
count _ _ O
passwords _ _ O
of _ _ O
each _ _ O
possible _ _ O
length _ _ O
! _ _ O
Choices _ _ O
: _ _ O
Sum _ _ O
rule _ _ O
! _ _ O
Suppose _ _ O
that _ _ O
for _ _ O
a _ _ O
certain _ _ O
system _ _ O
l _ _ O
Passwords _ _ O
must _ _ O
contain _ _ O
either _ _ O
6 _ _ O
, _ _ O
7 _ _ O
, _ _ O
or _ _ O
8 _ _ O
characters _ _ O
l _ _ O
Each _ _ O
character _ _ O
must _ _ O
be _ _ O
an _ _ O
uppercase _ _ O
letter _ _ O
or _ _ O
a _ _ O
digit _ _ O
l _ _ O
Every _ _ O
password _ _ O
must _ _ O
contain _ _ O
at _ _ O
least _ _ O
one _ _ O
digit _ _ O
How _ _ O
many _ _ O
valid _ _ O
passwords _ _ O
are _ _ O
there _ _ O
? _ _ O

First _ _ O
, _ _ O
we _ _ O
’ll _ _ O
apply _ _ O
the _ _ O
sum _ _ O
rule _ _ O
Let _ _ O
: _ _ O
l _ _ O
P6 _ _ O
= _ _ O
Set _ _ O
of _ _ O
passwords _ _ O
of _ _ O
length _ _ O
6 _ _ O
l _ _ O
P7 _ _ O
= _ _ O
Set _ _ O
of _ _ O
passwords _ _ O
of _ _ O
length _ _ O
7 _ _ O
l _ _ O
P8 _ _ O
= _ _ O
Set _ _ O
of _ _ O
passwords _ _ O
of _ _ O
length _ _ O
8 _ _ O
l _ _ O
S _ _ O
= _ _ O
P6 _ _ O
∪ _ _ O
P7 _ _ O
∪ _ _ O
P8 _ _ O
Note _ _ O
: _ _ O
|S| _ _ O
= _ _ O
|P6| _ _ O
+ _ _ O
|P7| _ _ O
+ _ _ O
|P8| _ _ O
Since _ _ O
each _ _ O
element _ _ O
of _ _ O
P6 _ _ O
, _ _ O
P7 _ _ O
, _ _ O
and _ _ O
P8 _ _ O
is _ _ O
made _ _ O
up _ _ O
of _ _ O
independent _ _ O
choices _ _ O
of _ _ O
letters _ _ O
and _ _ O
numbers _ _ O
, _ _ O
we _ _ O
can _ _ O
apply _ _ O
the _ _ O
product _ _ O
rule _ _ O
to _ _ O
determine _ _ O
|P6| _ _ O
, _ _ O
|P7| _ _ O
, _ _ O
and _ _ O
|P8| _ _ O

Recall _ _ O
: _ _ O
a _ _ O
password _ _ O
must _ _ O
contain _ _ O
at _ _ O
least _ _ O
one _ _ O
number _ _ O
! _ _ O
Observation _ _ O
: _ _ O
To _ _ O
figure _ _ O
out _ _ O
the _ _ O
number _ _ O
of _ _ O
6-character _ _ O
passwords _ _ O
containing _ _ O
at _ _ O
least _ _ O
one _ _ O
number _ _ O
, _ _ O
it _ _ O
is _ _ O
easier _ _ O
for _ _ O
us _ _ O
to _ _ O
count _ _ O
all _ _ O
6-character _ _ O
passwords _ _ O
and _ _ O
then _ _ O
subtract _ _ O
away _ _ O
those _ _ O
passwords _ _ O
not _ _ O
containing _ _ O
a _ _ O
number _ _ O
. _ _ O
Note _ _ O
: _ _ O
there _ _ O
are _ _ O
l _ _ O
( _ _ O
26 _ _ O
+ _ _ O
10 _ _ O
) _ _ O
6 _ _ O
= _ _ O
366 _ _ O
6-character _ _ O
passwords _ _ O
l _ _ O
266 _ _ O
6-character _ _ O
passwords _ _ O
not _ _ O
containing _ _ O
a _ _ O
digit _ _ O
So _ _ O
, _ _ O
|P6| _ _ O
= _ _ O
366 _ _ O
– _ _ O
266 _ _ O
= _ _ O
1 _ _ O
, _ _ O
867 _ _ O
, _ _ O
866 _ _ O
, _ _ O
560 _ _ O

Wrapping _ _ O
it _ _ O
all _ _ O
up _ _ O
… _ _ O
We _ _ O
can _ _ O
compute _ _ O
l _ _ O
|P6| _ _ O
= _ _ O
366 _ _ O
– _ _ O
266 _ _ O
= _ _ O
1 _ _ O
, _ _ O
867 _ _ O
, _ _ O
866 _ _ O
, _ _ O
560 _ _ O
l _ _ O
|P7| _ _ O
= _ _ O
367 _ _ O
– _ _ O
267 _ _ O
= _ _ O
70 _ _ O
, _ _ O
332 _ _ O
, _ _ O
353 _ _ O
, _ _ O
920 _ _ O
l _ _ O
|P8| _ _ O
= _ _ O
368 _ _ O
– _ _ O
268 _ _ O
= _ _ O
2 _ _ O
, _ _ O
612 _ _ O
, _ _ O
282 _ _ O
, _ _ O
842 _ _ O
, _ _ O
880 _ _ O
By _ _ O
leveraging _ _ O
our _ _ O
earlier _ _ O
observation _ _ O
that _ _ O
|S| _ _ O
= _ _ O
|P6| _ _ O
+ _ _ O
|P7| _ _ O
+ _ _ O
|P8| _ _ O
, _ _ O
we _ _ O
can _ _ O
conclude _ _ O
that _ _ O
there _ _ O
are _ _ O
2 _ _ O
, _ _ O
684 _ _ O
, _ _ O
483 _ _ O
, _ _ O
063 _ _ O
, _ _ O
360 _ _ O
valid _ _ O
passwords _ _ O
for _ _ O
our _ _ O
target _ _ O
system _ _ O
. _ _ O

IP _ _ O
Addresses _ _ O
An _ _ O
IP _ _ O
address _ _ O
( _ _ O
in _ _ O
IPv4 _ _ O
) _ _ O
is _ _ O
a _ _ O
32-bit _ _ O
string _ _ O
that _ _ O
is _ _ O
used _ _ O
to _ _ O
identify _ _ O
a _ _ O
computer _ _ O
that _ _ O
is _ _ O
connected _ _ O
to _ _ O
the _ _ O
Internet _ _ O
. _ _ O
There _ _ O
are _ _ O
three _ _ O
categories _ _ O
of _ _ O
IP _ _ O
addresses _ _ O
that _ _ O
can _ _ O
be _ _ O
assigned _ _ O
to _ _ O
computers _ _ O
: _ _ O
1 _ _ O
. _ _ O
Class _ _ O
A _ _ O
addresses _ _ O
consist _ _ O
of _ _ O
the _ _ O
prefix _ _ O
“ _ _ O
0 _ _ O
” _ _ O
followed _ _ O
by _ _ O
a _ _ O
7bit _ _ O
network _ _ O
ID _ _ O
and _ _ O
a _ _ O
24-bit _ _ O
host _ _ O
ID _ _ O
2 _ _ O
. _ _ O
Class _ _ O
B _ _ O
addresses _ _ O
consist _ _ O
of _ _ O
the _ _ O
prefix _ _ O
“ _ _ O
10 _ _ O
” _ _ O
followed _ _ O
by _ _ O
a _ _ O
14-bit _ _ O
network _ _ O
ID _ _ O
and _ _ O
a _ _ O
16-bit _ _ O
host _ _ O
ID _ _ O
3 _ _ O
. _ _ O
Class _ _ O
C _ _ O
addresses _ _ O
consist _ _ O
of _ _ O
the _ _ O
prefix _ _ O
“ _ _ O
110 _ _ O
” _ _ O
followed _ _ O
by _ _ O
a _ _ O
21-bit _ _ O
network _ _ O
ID _ _ O
and _ _ O
an _ _ O
8-bit _ _ O
host _ _ O
ID _ _ O

So _ _ O
how _ _ O
many _ _ O
valid _ _ O
IP _ _ O
addresses _ _ O
are _ _ O
there _ _ O
? _ _ O
Note _ _ O
: _ _ O
IP _ _ O
addresses _ _ O
are _ _ O
subject _ _ O
to _ _ O
restrictions _ _ O
: _ _ O
l _ _ O
1111111 _ _ O
can _ _ O
not _ _ O
be _ _ O
used _ _ O
as _ _ O
the _ _ O
network _ _ O
ID _ _ O
of _ _ O
a _ _ O
Class _ _ O
A _ _ O
IP _ _ O
l _ _ O
Host _ _ O
IDs _ _ O
consisting _ _ O
of _ _ O
only _ _ O
1s _ _ O
or _ _ O
only _ _ O
0s _ _ O
can _ _ O
not _ _ O
be _ _ O
used _ _ O
To _ _ O
count _ _ O
IP _ _ O
addresses _ _ O
, _ _ O
we _ _ O
will _ _ O
use _ _ O
the _ _ O
sum _ _ O
rule _ _ O
and _ _ O
the _ _ O
product _ _ O
rule _ _ O
. _ _ O
So _ _ O
S _ _ O
= _ _ O
SA _ _ O
∪ _ _ O
SB _ _ O
∪ _ _ O
SC _ _ O
, _ _ O
so _ _ O
|S| _ _ O
= _ _ O
|SA| _ _ O
+ _ _ O
|SB| _ _ O
+ _ _ O
|SC| _ _ O
Compute _ _ O
SA _ _ O
: _ _ O
l _ _ O
27 _ _ O
– _ _ O
1 _ _ O
network _ _ O
IDs _ _ O
since _ _ O
1111111 _ _ O
ca _ _ O
n’t _ _ O
be _ _ O
used _ _ O
l _ _ O
224 _ _ O
– _ _ O
2 _ _ O
host _ _ O
IDs _ _ O
for _ _ O
each _ _ O
network _ _ O
ID _ _ O
l _ _ O
Total _ _ O
of _ _ O
2 _ _ O
, _ _ O
130 _ _ O
, _ _ O
706 _ _ O
, _ _ O
178 _ _ O
Class _ _ O
A _ _ O
IP _ _ O
addresses _ _ O

So _ _ O
how _ _ O
many _ _ O
valid _ _ O
IP _ _ O
addresses _ _ O
are _ _ O
there _ _ O
? _ _ O
( _ _ O
cont _ _ O
. _ _ O
) _ _ O
Compute _ _ O
SB _ _ O
: _ _ O
l _ _ O
214 _ _ O
network _ _ O
IDs _ _ O
l _ _ O
216 _ _ O
– _ _ O
2 _ _ O
host _ _ O
IDs _ _ O
for _ _ O
each _ _ O
network _ _ O
ID _ _ O
l _ _ O
Total _ _ O
of _ _ O
1 _ _ O
, _ _ O
073 _ _ O
, _ _ O
709 _ _ O
, _ _ O
056 _ _ O
Class _ _ O
B _ _ O
IP _ _ O
addresses _ _ O
Compute _ _ O
SC _ _ O
: _ _ O
l _ _ O
221 _ _ O
network _ _ O
IDs _ _ O
l _ _ O
28 _ _ O
– _ _ O
2 _ _ O
host _ _ O
IDs _ _ O
for _ _ O
each _ _ O
network _ _ O
ID _ _ O
l _ _ O
Total _ _ O
of _ _ O
532 _ _ O
, _ _ O
676 _ _ O
, _ _ O
608 _ _ O
Class _ _ O
C _ _ O
IP _ _ O
addresses _ _ O
Since _ _ O
|S| _ _ O
= _ _ O
|SA| _ _ O
+ _ _ O
|SB| _ _ O
+ _ _ O
|SC| _ _ O
, _ _ O
there _ _ O
are _ _ O
3 _ _ O
, _ _ O
737 _ _ O
, _ _ O
091 _ _ O
, _ _ O
842 _ _ O
IP _ _ O
addresses _ _ O
that _ _ O
can _ _ O
be _ _ O
assigned _ _ O
to _ _ O
computers _ _ O
connected _ _ O
to _ _ O
the _ _ O
Internet _ _ O
! _ _ O

In-class _ _ O
exercises _ _ O
Top _ _ O
Hat _ _ O

Final _ _ O
Thoughts _ _ O
n _ _ O
Combinatorics _ _ O
is _ _ O
just _ _ O
a _ _ O
fancy _ _ O
word _ _ O
for _ _ O
counting _ _ O
! _ _ O
n _ _ O
There _ _ O
are _ _ O
many _ _ O
uses _ _ O
of _ _ O
combinatorics _ _ O
throughout _ _ O
computer _ _ O
science _ _ O
n _ _ O
We _ _ O
can _ _ O
solve _ _ O
a _ _ O
variety _ _ O
of _ _ O
interesting _ _ O
problems _ _ O
using _ _ O
simple _ _ O
rules _ _ O
like _ _ O
the _ _ O
product _ _ O
rule _ _ O
and _ _ O
the _ _ O
sum _ _ O
rule _ _ O
n _ _ O
Next _ _ O
time _ _ O
: _ _ O
l _ _ O
Inclusion _ _ O
/ _ _ O
Exclusion _ _ O
principle _ _ O
( _ _ O
Section _ _ O
6.1 _ _ O
) _ _ O
l _ _ O
The _ _ O
pigeonhole _ _ O
principle _ _ O
( _ _ O
Section _ _ O
6.2 _ _ O
) _ _ O



