unlabeled|cs0447|lec06
-DOCSTART- -X- -X- O

# _ _ O
6 _ _ O
Flow _ _ O
, _ _ O
Conditionals _ _ O
, _ _ O
and _ _ O
Loops _ _ O
Original _ _ O
slides _ _ O
by _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
Modified _ _ O
with _ _ O
bits _ _ O
from _ _ O
: _ _ O
Bruce _ _ O
Childers _ _ O
, _ _ O
David _ _ O
Wilkinson _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Luís _ _ O
Oliveira _ _ O
Fall _ _ O
2020 _ _ O

So _ _ O
far _ _ O
… _ _ O
● _ _ O
Putting _ _ O
numbers _ _ O
into _ _ O
registers _ _ O
li _ _ O
a0 _ _ O
, _ _ O
3 _ _ O
la _ _ O
a0 _ _ O
, _ _ O
x _ _ O
label _ _ O
.data _ _ O
x _ _ O
: _ _ O
.word _ _ O
4 _ _ O
● _ _ O
COPYing _ _ O
register _ _ O
contents _ _ O
move _ _ O
a0 _ _ O
, _ _ O
t0 _ _ O
These _ _ O
do _ _ O
zero _ _ O
Unsigned _ _ O
! _ _ O
 _ _ O
extension _ _ O
● _ _ O
COPYing _ _ O
from _ _ O
/ _ _ O
to _ _ O
memory _ _ O
lw _ _ O
/ _ _ O
sw _ _ O
, _ _ O
lh _ _ O
/ _ _ O
lhu _ _ O
/ _ _ O
sh _ _ O
, _ _ O
lb _ _ O
/ _ _ O
lbu _ _ O
/ _ _ O
sb _ _ O
la _ _ O
t1 _ _ O
, _ _ O
x _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
t1 _ _ O
) _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
x _ _ O
la _ _ O
t1 _ _ O
, _ _ O
x _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
t1 _ _ O
) _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
x _ _ O
Do _ _ O
the _ _ O
same _ _ O
thing _ _ O
2 _ _ O

In _ _ O
another _ _ O
perspective _ _ O
lw _ _ O
, _ _ O
lh _ _ O
, _ _ O
lhu _ _ O
, _ _ O
lb _ _ O
, _ _ O
lbu _ _ O
move _ _ O
CPU _ _ O
Memory _ _ O
Registers _ _ O
li _ _ O
, _ _ O
la _ _ O
sw _ _ O
, _ _ O
sh _ _ O
, _ _ O
sb _ _ O
Other _ _ O
operations _ _ O
Datatypes _ _ O
add _ _ O
word _ _ O
sub _ _ O
half _ _ O
mul _ _ O
byte _ _ O
syscall _ _ O
asciiz _ _ O
… _ _ O
… _ _ O
3 _ _ O

Introduction _ _ O
to _ _ O
conditions _ _ O
● _ _ O
What _ _ O
distinguishes _ _ O
a _ _ O
computer _ _ O
from _ _ O
a _ _ O
calculator _ _ O
? _ _ O
● _ _ O
It _ _ O
can _ _ O
make _ _ O
decisions _ _ O
based _ _ O
on _ _ O
values _ _ O
that _ _ O
it _ _ O
calculates _ _ O
o _ _ O
If _ _ O
the _ _ O
value _ _ O
of _ _ O
this _ _ O
register _ _ O
is _ _ O
this _ _ O
, _ _ O
do _ _ O
something _ _ O
. _ _ O
o _ _ O
Otherwise _ _ O
, _ _ O
do _ _ O
something _ _ O
else _ _ O
. _ _ O
● _ _ O
The _ _ O
possible _ _ O
decisions _ _ O
make _ _ O
up _ _ O
the _ _ O
potential _ _ O
control _ _ O
flow _ _ O
of _ _ O
the _ _ O
program _ _ O
. _ _ O
o _ _ O
When _ _ O
there _ _ O
is _ _ O
no _ _ O
possible _ _ O
route _ _ O
to _ _ O
a _ _ O
piece _ _ O
of _ _ O
code _ _ O
in _ _ O
your _ _ O
program _ _ O
, _ _ O
that _ _ O
is _ _ O
called _ _ O
dead _ _ O
code _ _ O
. _ _ O
 _ _ O
It _ _ O
’s _ _ O
like _ _ O
procrastination _ _ O
! _ _ O
if _ _ O
( _ _ O
false _ _ O
) _ _ O
{ _ _ O
do_some_work _ _ O
( _ _ O
) _ _ O
} _ _ O
4 _ _ O

Control _ _ O
flow _ _ O
5 _ _ O

With _ _ O
great _ _ O
power _ _ O
… _ _ O
● _ _ O
Control _ _ O
flow _ _ O
determines _ _ O
the _ _ O
order _ _ O
that _ _ O
your _ _ O
instructions _ _ O
run _ _ O
in _ _ O
o _ _ O
What _ _ O
kinds _ _ O
of _ _ O
control _ _ O
flow _ _ O
statements _ _ O
do _ _ O
you _ _ O
know _ _ O
of _ _ O
? _ _ O
o _ _ O
What _ _ O
about _ _ O
functions _ _ O
? _ _ O
● _ _ O
In _ _ O
asm _ _ O
, _ _ O
the _ _ O
only _ _ O
thing _ _ O
you _ _ O
get _ _ O
for _ _ O
free _ _ O
is _ _ O
that _ _ O
instructions _ _ O
run _ _ O
in _ _ O
order _ _ O
● _ _ O
You _ _ O
're _ _ O
responsible _ _ O
for _ _ O
coming _ _ O
up _ _ O
with _ _ O
everything _ _ O
else _ _ O
. _ _ O
o _ _ O
If _ _ O
you _ _ O
screw _ _ O
up _ _ O
your _ _ O
control _ _ O
flow _ _ O
, _ _ O
the _ _ O
CPU _ _ O
does _ _ O
n't _ _ O
care _ _ O
o _ _ O
You _ _ O
'll _ _ O
just _ _ O
have _ _ O
a _ _ O
broken _ _ O
, _ _ O
malfunctioning _ _ O
program _ _ O
 _ _ O
And _ _ O
it _ _ O
'll _ _ O
be _ _ O
half _ _ O
an _ _ O
hour _ _ O
before _ _ O
the _ _ O
lab _ _ O
is _ _ O
due _ _ O
– _ _ O
And _ _ O
you _ _ O
'll _ _ O
be _ _ O
sad _ _ O
» _ _ O
This _ _ O
is _ _ O
like _ _ O
90 _ _ O
% _ _ O
of _ _ O
the _ _ O
bugs _ _ O
6 _ _ O

Getting _ _ O
a _ _ O
little _ _ O
further _ _ O
from _ _ O
familiarity _ _ O
● _ _ O
all _ _ O
control _ _ O
flow _ _ O
is _ _ O
done _ _ O
with _ _ O
branches _ _ O
and _ _ O
jumps _ _ O
o _ _ O
these _ _ O
are _ _ O
instructions _ _ O
which _ _ O
say _ _ O
" _ _ O
go _ _ O
somewhere _ _ O
else _ _ O
" _ _ O
● _ _ O
for _ _ O
example _ _ O
… _ _ O
this _ _ O
is _ _ O
an _ _ O
infinite _ _ O
loop _ _ O
, _ _ O
which _ _ O
is _ _ O
sometimes _ _ O
useful _ _ O
but _ _ O
not _ _ O
too _ _ O
interesting _ _ O
_ _ _ O
main_loop _ _ O
: _ _ O
# _ _ O
clear _ _ O
screen _ _ O
# _ _ O
draw _ _ O
one _ _ O
thing _ _ O
# _ _ O
sleep _ _ O
# _ _ O
draw _ _ O
another _ _ O
thing _ _ O
j _ _ O
stands _ _ O
for _ _ O
” _ _ O
jump _ _ O
" _ _ O
– _ _ O
go _ _ O
# _ _ O
etc _ _ O
somewhere _ _ O
else _ _ O
j _ _ O
_ _ _ O
main_loop _ _ O
7 _ _ O

Building _ _ O
blocks _ _ O
● _ _ O
A _ _ O
basic _ _ O
block _ _ O
is _ _ O
a _ _ O
chunk _ _ O
of _ _ O
code _ _ O
that _ _ O
has _ _ O
no _ _ O
control _ _ O
flow _ _ O
in _ _ O
it _ _ O
● _ _ O
Control _ _ O
flow _ _ O
statements _ _ O
separate _ _ O
basic _ _ O
blocks _ _ O
if _ _ O
( _ _ O
x _ _ O
= _ _ O
= _ _ O
w _ _ O
- _ _ O
1 _ _ O
) _ _ O
{ _ _ O
do_thing _ _ O
( _ _ O
) _ _ O
} _ _ O
else _ _ O
{ _ _ O
other_thing _ _ O
( _ _ O
) _ _ O
} _ _ O
third_thing _ _ O
( _ _ O
) _ _ O
x _ _ O
= _ _ O
= _ _ O
w _ _ O
- _ _ O
1 _ _ O
? _ _ O
other_thing _ _ O
do_thing _ _ O
third_thing _ _ O
thinking _ _ O
about _ _ O
this _ _ O
is _ _ O
REAL _ _ O
HELPFUL _ _ O
8 _ _ O

Essentially _ _ O
… _ _ O
● _ _ O
The _ _ O
way _ _ O
control _ _ O
flow _ _ O
works _ _ O
in _ _ O
asm _ _ O
is _ _ O
you _ _ O
make _ _ O
basic _ _ O
blocks _ _ O
o _ _ O
You _ _ O
got _ _ O
ta _ _ O
name _ _ O
( _ _ O
label _ _ O
) _ _ O
them _ _ O
● _ _ O
Then _ _ O
, _ _ O
you _ _ O
use _ _ O
special _ _ O
instructions _ _ O
to _ _ O
choose _ _ O
where _ _ O
to _ _ O
go _ _ O
o _ _ O
Ask _ _ O
yourself _ _ O
“ _ _ O
Which _ _ O
basic _ _ O
block _ _ O
runs _ _ O
next _ _ O
? _ _ O
" _ _ O
o _ _ O
Select _ _ O
the _ _ O
instruction _ _ O
you _ _ O
need _ _ O
! _ _ O
 _ _ O
Do _ _ O
n’t _ _ O
worry _ _ O
, _ _ O
we _ _ O
look _ _ O
into _ _ O
these _ _ O
instructions _ _ O
in _ _ O
a _ _ O
moment _ _ O
● _ _ O
And _ _ O
do _ _ O
n’t _ _ O
forget _ _ O
! _ _ O
o _ _ O
Write _ _ O
pseudo-code _ _ O
( _ _ O
with _ _ O
comments _ _ O
) _ _ O
to _ _ O
keep _ _ O
track _ _ O
of _ _ O
control _ _ O
flow _ _ O
o _ _ O
Or _ _ O
make _ _ O
a _ _ O
drawing _ _ O
of _ _ O
a _ _ O
flow-chart _ _ O
! _ _ O
o _ _ O
Or _ _ O
… _ _ O
any _ _ O
other _ _ O
guide _ _ O
you _ _ O
think _ _ O
it _ _ O
’s _ _ O
helpful _ _ O
9 _ _ O

Conditionals _ _ O
: _ _ O
if _ _ O
and _ _ O
if-else _ _ O
10 _ _ O

MIPS _ _ O
ISA _ _ O
: _ _ O
conditional _ _ O
branch _ _ O
instructions _ _ O
● _ _ O
conditional _ _ O
branch _ _ O
instructions _ _ O
do _ _ O
one _ _ O
of _ _ O
two _ _ O
things _ _ O
: _ _ O
o _ _ O
if _ _ O
the _ _ O
condition _ _ O
is _ _ O
met _ _ O
, _ _ O
we _ _ O
go _ _ O
to _ _ O
the _ _ O
label _ _ O
o _ _ O
otherwise _ _ O
, _ _ O
nothing _ _ O
happens _ _ O
, _ _ O
and _ _ O
we _ _ O
go _ _ O
to _ _ O
the _ _ O
next _ _ O
instruction _ _ O
Instruction _ _ O
Meaning _ _ O
beq _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
= _ _ O
= _ _ O
b _ _ O
) _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
bne _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
! _ _ O
= _ _ O
b _ _ O
) _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
above _ _ O
, _ _ O
a _ _ O
must _ _ O
be _ _ O
a _ _ O
register _ _ O
, _ _ O
but _ _ O
b _ _ O
can _ _ O
be _ _ O
a _ _ O
register _ _ O
or _ _ O
immediate _ _ O
( _ _ O
by _ _ O
the _ _ O
powers _ _ O
of _ _ O
the _ _ O
pseudo-instruction _ _ O
) _ _ O
11 _ _ O

How _ _ O
do _ _ O
these _ _ O
work _ _ O
? _ _ O
Previous _ _ O
instruction _ _ O
This _ _ O
is _ _ O
the _ _ O
branch _ _ O
beq _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
, _ _ O
label _ _ O
# _ _ O
branch _ _ O
if _ _ O
equal _ _ O
t0==t1 _ _ O
True _ _ O
False _ _ O
Next _ _ O
instruction _ _ O
label _ _ O
: _ _ O
Other _ _ O
instruction _ _ O
12 _ _ O

How _ _ O
do _ _ O
these _ _ O
work _ _ O
? _ _ O
label _ _ O
: _ _ O
beq _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
, _ _ O
label _ _ O
# _ _ O
branch _ _ O
if _ _ O
equal _ _ O
Other _ _ O
instruction _ _ O
Previous _ _ O
instruction _ _ O
True _ _ O
t0==t1 _ _ O
This _ _ O
is _ _ O
the _ _ O
branch _ _ O
False _ _ O
Next _ _ O
instruction _ _ O
13 _ _ O

How _ _ O
to _ _ O
write _ _ O
asm _ _ O
( _ _ O
again _ _ O
! _ _ O
) _ _ O
● _ _ O
Remember _ _ O
: _ _ O
WRITE _ _ O
PSEUDOCODE _ _ O
ALWAYS _ _ O
REALLY _ _ O
! _ _ O
! _ _ O
! _ _ O
if _ _ O
( _ _ O
x _ _ O
= _ _ O
= _ _ O
w _ _ O
- _ _ O
1 _ _ O
) _ _ O
{ _ _ O
do_thing _ _ O
( _ _ O
) _ _ O
} _ _ O
else _ _ O
{ _ _ O
other_thing _ _ O
( _ _ O
) _ _ O
} _ _ O
14 _ _ O

Like _ _ O
mad _ _ O
libs _ _ O
, _ _ O
but _ _ O
for _ _ O
code _ _ O
● _ _ O
From _ _ O
now _ _ O
on _ _ O
, _ _ O
I _ _ O
’ll _ _ O
use _ _ O
these _ _ O
' _ _ O
blocks _ _ O
' _ _ O
to _ _ O
represent _ _ O
the _ _ O
basic _ _ O
blocks _ _ O
o _ _ O
cause _ _ O
they _ _ O
do _ _ O
n’t _ _ O
matter _ _ O
if _ _ O
( _ _ O
some _ _ O
condition _ _ O
) _ _ O
{ _ _ O
block _ _ O
A _ _ O
} _ _ O
else _ _ O
{ _ _ O
block _ _ O
B _ _ O
} _ _ O
block _ _ O
C _ _ O
15 _ _ O

A _ _ O
simple _ _ O
conditional _ _ O
block _ _ O
( _ _ O
if _ _ O
) _ _ O
● _ _ O
If _ _ O
there _ _ O
is _ _ O
no _ _ O
else _ _ O
, _ _ O
it _ _ O
's _ _ O
pretty _ _ O
simple _ _ O
. _ _ O
if _ _ O
( _ _ O
s0 _ _ O
= _ _ O
= _ _ O
30 _ _ O
) _ _ O
{ _ _ O
block _ _ O
A _ _ O
} _ _ O
block _ _ O
B _ _ O
bne _ _ O
s0 _ _ O
, _ _ O
30 _ _ O
, _ _ O
blockB _ _ O
blockA _ _ O
: _ _ O
blockB _ _ O
: _ _ O
16 _ _ O

A _ _ O
simple _ _ O
conditional _ _ O
block _ _ O
( _ _ O
if _ _ O
) _ _ O
● _ _ O
If _ _ O
there _ _ O
is _ _ O
no _ _ O
else _ _ O
, _ _ O
it _ _ O
's _ _ O
pretty _ _ O
simple _ _ O
. _ _ O
if _ _ O
( _ _ O
s0 _ _ O
= _ _ O
= _ _ O
30 _ _ O
) _ _ O
{ _ _ O
block _ _ O
A _ _ O
} _ _ O
block _ _ O
B _ _ O
bne _ _ O
s0 _ _ O
, _ _ O
30 _ _ O
, _ _ O
blockB _ _ O
In _ _ O
Java _ _ O
/ _ _ O
C _ _ O
what _ _ O
happens _ _ O
in _ _ O
an _ _ O
if _ _ O
? _ _ O
You _ _ O
JUMP _ _ O
OVER _ _ O
when _ _ O
the _ _ O
condition _ _ O
is _ _ O
true _ _ O
or _ _ O
false _ _ O
? _ _ O
When _ _ O
its _ _ O
FALSE _ _ O
! _ _ O
! _ _ O
17 _ _ O

A _ _ O
simple _ _ O
conditional _ _ O
block _ _ O
( _ _ O
if _ _ O
) _ _ O
● _ _ O
In _ _ O
MIPS _ _ O
you _ _ O
jump _ _ O
when _ _ O
the _ _ O
condition _ _ O
is _ _ O
TRUE _ _ O
if _ _ O
( _ _ O
s0 _ _ O
= _ _ O
= _ _ O
30 _ _ O
) _ _ O
{ _ _ O
block _ _ O
A _ _ O
} _ _ O
block _ _ O
B _ _ O
bne _ _ O
s0 _ _ O
, _ _ O
30 _ _ O
, _ _ O
blockB _ _ O
blockA _ _ O
: _ _ O
block _ _ O
A _ _ O
blockB _ _ O
: _ _ O
block _ _ O
B _ _ O
18 _ _ O

An _ _ O
if-else _ _ O
with _ _ O
a _ _ O
simple _ _ O
condition _ _ O
● _ _ O
more _ _ O
blocks _ _ O
now _ _ O
… _ _ O
if _ _ O
( _ _ O
s0 _ _ O
= _ _ O
= _ _ O
30 _ _ O
) _ _ O
{ _ _ O
block _ _ O
A _ _ O
} _ _ O
else _ _ O
{ _ _ O
block _ _ O
B _ _ O
} _ _ O
block _ _ O
C _ _ O
bne _ _ O
s0 _ _ O
, _ _ O
30 _ _ O
, _ _ O
blockB _ _ O
block _ _ O
A _ _ O
j _ _ O
blockC _ _ O
blockB _ _ O
: _ _ O
block _ _ O
B _ _ O
blockC _ _ O
: _ _ O
block _ _ O
C _ _ O
we _ _ O
NEED _ _ O
THIS _ _ O
– _ _ O
the _ _ O
CPU _ _ O
does _ _ O
n't _ _ O
see _ _ O
/ _ _ O
care _ _ O
about _ _ O
your _ _ O
labels _ _ O
! _ _ O
! _ _ O
19 _ _ O

The _ _ O
other _ _ O
way _ _ O
around _ _ O
● _ _ O
Because _ _ O
in _ _ O
HLL _ _ O
we _ _ O
“ _ _ O
execute _ _ O
smth _ _ O
if _ _ O
” _ _ O
and _ _ O
In _ _ O
assembly _ _ O
we _ _ O
“ _ _ O
jump _ _ O
over _ _ O
if _ _ O
” _ _ O
● _ _ O
We _ _ O
usually _ _ O
negate _ _ O
the _ _ O
condition _ _ O
in _ _ O
the _ _ O
assembly _ _ O
to _ _ O
skip _ _ O
over _ _ O
code _ _ O
o _ _ O
It _ _ O
’s _ _ O
a _ _ O
preference _ _ O
. _ _ O
o _ _ O
You _ _ O
can _ _ O
still _ _ O
invert _ _ O
the _ _ O
process _ _ O
 _ _ O
How _ _ O
? _ _ O
if _ _ O
( _ _ O
s0 _ _ O
= _ _ O
= _ _ O
30 _ _ O
) _ _ O
{ _ _ O
} _ _ O
else _ _ O
{ _ _ O
} _ _ O
block _ _ O
A _ _ O
block _ _ O
B _ _ O
block _ _ O
C _ _ O
beq _ _ O
s0 _ _ O
, _ _ O
30 _ _ O
, _ _ O
blockA _ _ O
j _ _ O
blockElse _ _ O
blockA _ _ O
: _ _ O
block _ _ O
A _ _ O
j _ _ O
blockExit _ _ O
# _ _ O
skip _ _ O
the _ _ O
else _ _ O
blockElse _ _ O
: _ _ O
block _ _ O
B _ _ O
blockExit _ _ O
: _ _ O
block _ _ O
C _ _ O
20 _ _ O

MIPS _ _ O
ISA _ _ O
: _ _ O
conditional _ _ O
branch _ _ O
instructions _ _ O
● _ _ O
MIPS _ _ O
also _ _ O
supports _ _ O
instructions _ _ O
that _ _ O
compare _ _ O
to _ _ O
zero _ _ O
Instruction _ _ O
Meaning _ _ O
bltz _ _ O
a _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
< _ _ O
0 _ _ O
) _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
blez _ _ O
a _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
< _ _ O
= _ _ O
0 _ _ O
) _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
bgtz _ _ O
a _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
> _ _ O
0 _ _ O
) _ _ O
bgez _ _ O
a _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
> _ _ O
= _ _ O
0 _ _ O
) _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
21 _ _ O

MIPS _ _ O
ISA _ _ O
: _ _ O
set _ _ O
if _ _ O
less _ _ O
than _ _ O
● _ _ O
And _ _ O
… _ _ O
Instruction _ _ O
slt _ _ O
c _ _ O
, _ _ O
a _ _ O
, _ _ O
b _ _ O
Meaning _ _ O
if _ _ O
( _ _ O
a _ _ O
< _ _ O
b _ _ O
) _ _ O
{ _ _ O
c _ _ O
= _ _ O
1 _ _ O
} _ _ O
else _ _ O
{ _ _ O
c _ _ O
= _ _ O
0 _ _ O
} _ _ O
Set _ _ O
if _ _ O
Less _ _ O
Than _ _ O
: _ _ O
register _ _ O
c _ _ O
will _ _ O
be _ _ O
set _ _ O
to _ _ O
1 _ _ O
if _ _ O
a _ _ O
< _ _ O
b _ _ O
. _ _ O
Otherwise _ _ O
, _ _ O
register _ _ O
c _ _ O
will _ _ O
be _ _ O
set _ _ O
to _ _ O
0 _ _ O
. _ _ O
Using _ _ O
slt _ _ O
together _ _ O
with _ _ O
bne _ _ O
and _ _ O
beq _ _ O
all _ _ O
conditionals _ _ O
can _ _ O
be _ _ O
implemented _ _ O
! _ _ O
a=b _ _ O
, _ _ O
a≠b _ _ O
, _ _ O
a _ _ O
> _ _ O
b _ _ O
, _ _ O
a≥b _ _ O
, _ _ O
a _ _ O
< _ _ O
b _ _ O
, _ _ O
a≤b _ _ O
Thanks _ _ O
, _ _ O
De _ _ O
Morgan _ _ O
22 _ _ O

MIPS _ _ O
ISA _ _ O
: _ _ O
conditional _ _ O
branch _ _ O
instructions _ _ O
● _ _ O
Or _ _ O
… _ _ O
we _ _ O
can _ _ O
just _ _ O
use _ _ O
the _ _ O
pseudo-instructions _ _ O
:D _ _ O
Instruction _ _ O
Meaning _ _ O
blt _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
< _ _ O
b _ _ O
) _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
ble _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
< _ _ O
= _ _ O
b _ _ O
) _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
bgt _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
> _ _ O
b _ _ O
) _ _ O
bge _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
> _ _ O
= _ _ O
b _ _ O
) _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
above _ _ O
, _ _ O
a _ _ O
must _ _ O
be _ _ O
a _ _ O
register _ _ O
, _ _ O
but _ _ O
b _ _ O
can _ _ O
be _ _ O
a _ _ O
register _ _ O
or _ _ O
immediate _ _ O
23 _ _ O

Examples _ _ O
Example _ _ O
1 _ _ O
: _ _ O
branch _ _ O
if _ _ O
a _ _ O
> _ _ O
b _ _ O
bgt _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
# _ _ O
Goto _ _ O
label _ _ O
if _ _ O
a _ _ O
> _ _ O
b _ _ O
Solution _ _ O
: _ _ O
branch _ _ O
if _ _ O
b _ _ O
< _ _ O
a _ _ O
slt _ _ O
t _ _ O
, _ _ O
b _ _ O
, _ _ O
a _ _ O
bne _ _ O
t _ _ O
, _ _ O
zero _ _ O
, _ _ O
label _ _ O
# _ _ O
t=1 _ _ O
if _ _ O
b _ _ O
< _ _ O
a _ _ O
# _ _ O
Goto _ _ O
label _ _ O
if _ _ O
t≠0 _ _ O
Example _ _ O
2 _ _ O
: _ _ O
branch _ _ O
if _ _ O
a≥b _ _ O
bge _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
# _ _ O
Goto _ _ O
label _ _ O
if _ _ O
a≥b _ _ O
Solution _ _ O
: _ _ O
branch _ _ O
if _ _ O
! _ _ O
( _ _ O
a _ _ O
< _ _ O
b _ _ O
) _ _ O
slt _ _ O
t _ _ O
, _ _ O
a _ _ O
, _ _ O
b _ _ O
beq _ _ O
t _ _ O
, _ _ O
zero _ _ O
, _ _ O
label _ _ O
# _ _ O
t=1 _ _ O
if _ _ O
a _ _ O
< _ _ O
b _ _ O
# _ _ O
Goto _ _ O
label _ _ O
if _ _ O
t=0 _ _ O
24 _ _ O

Complex _ _ O
conditionals _ _ O
25 _ _ O

In _ _ O
this _ _ O
code _ _ O
… _ _ O
if _ _ O
( _ _ O
dog_size _ _ O
< _ _ O
10 _ _ O
|| _ _ O
dog_name _ _ O
( _ _ O
) _ _ O
= _ _ O
= _ _ O
" _ _ O
Fluffy _ _ O
" _ _ O
) _ _ O
if _ _ O
dog_size _ _ O
is _ _ O
3 _ _ O
, _ _ O
is _ _ O
dog_name _ _ O
( _ _ O
) _ _ O
called _ _ O
? _ _ O
NO _ _ O
! _ _ O
this _ _ O
is _ _ O
short _ _ O
circuit _ _ O
evaluation _ _ O
. _ _ O
for _ _ O
|| _ _ O
( _ _ O
logical _ _ O
OR _ _ O
) _ _ O
, _ _ O
if _ _ O
the _ _ O
first _ _ O
condition _ _ O
is _ _ O
true _ _ O
, _ _ O
the _ _ O
second _ _ O
one _ _ O
is _ _ O
skipped _ _ O
. _ _ O
( _ _ O
cause _ _ O
there _ _ O
's _ _ O
no _ _ O
way _ _ O
for _ _ O
the _ _ O
result _ _ O
of _ _ O
the _ _ O
OR _ _ O
to _ _ O
be _ _ O
false _ _ O
. _ _ O
) _ _ O
for _ _ O
& _ _ O
& _ _ O
( _ _ O
logical _ _ O
AND _ _ O
) _ _ O
, _ _ O
if _ _ O
the _ _ O
first _ _ O
condition _ _ O
is _ _ O
false _ _ O
, _ _ O
the _ _ O
second _ _ O
one _ _ O
is _ _ O
skipped _ _ O
. _ _ O
26 _ _ O

In _ _ O
this _ _ O
code _ _ O
… _ _ O
if _ _ O
( _ _ O
dog_size _ _ O
< _ _ O
10 _ _ O
) _ _ O
small _ _ O
( _ _ O
) _ _ O
; _ _ O
if _ _ O
dog_size _ _ O
is _ _ O
3 _ _ O
, _ _ O
is _ _ O
this _ _ O
else _ _ O
if _ _ O
( _ _ O
dog_size _ _ O
< _ _ O
20 _ _ O
) _ _ O
condition _ _ O
checked _ _ O
? _ _ O
medium _ _ O
( _ _ O
) _ _ O
; _ _ O
NO _ _ O
! _ _ O
else _ _ O
if _ _ O
( _ _ O
dog_size _ _ O
< _ _ O
30 _ _ O
) _ _ O
large _ _ O
( _ _ O
) _ _ O
; _ _ O
else _ _ O
once _ _ O
a _ _ O
true _ _ O
condition _ _ O
is _ _ O
found _ _ O
, _ _ O
no _ _ O
enormous _ _ O
( _ _ O
) _ _ O
; _ _ O
more _ _ O
conditions _ _ O
are _ _ O
checked _ _ O
. _ _ O
after _ _ O
small _ _ O
( _ _ O
) _ _ O
, _ _ O
it _ _ O
comes _ _ O
down _ _ O
here _ _ O
. _ _ O
27 _ _ O

And-and _ _ O
! _ _ O
● _ _ O
Block _ _ O
A _ _ O
is _ _ O
run _ _ O
if _ _ O
both _ _ O
conditions _ _ O
are _ _ O
true _ _ O
. _ _ O
o _ _ O
to _ _ O
think _ _ O
of _ _ O
it _ _ O
another _ _ O
way _ _ O
… _ _ O
it _ _ O
's _ _ O
skipped _ _ O
if _ _ O
? _ _ O
What _ _ O
’s _ _ O
the _ _ O
inverse _ _ O
? _ _ O
o _ _ O
either _ _ O
condition _ _ O
is _ _ O
false _ _ O
… _ _ O
if _ _ O
( _ _ O
s0 _ _ O
= _ _ O
= _ _ O
30 _ _ O
& _ _ O
& _ _ O
s1 _ _ O
> _ _ O
1 _ _ O
) _ _ O
{ _ _ O
block _ _ O
A _ _ O
} _ _ O
bne _ _ O
s0 _ _ O
, _ _ O
30 _ _ O
, _ _ O
skipA _ _ O
ble _ _ O
s1 _ _ O
, _ _ O
1 _ _ O
, _ _ O
skipA _ _ O
block _ _ O
A _ _ O
skipA _ _ O
: _ _ O
28 _ _ O

Or-or _ _ O
! _ _ O
● _ _ O
We _ _ O
go _ _ O
to _ _ O
block _ _ O
A _ _ O
if _ _ O
either _ _ O
condition _ _ O
is _ _ O
true _ _ O
. _ _ O
o _ _ O
to _ _ O
think _ _ O
of _ _ O
it _ _ O
another _ _ O
way _ _ O
… _ _ O
it _ _ O
's _ _ O
skipped _ _ O
if _ _ O
? _ _ O
What _ _ O
’s _ _ O
the _ _ O
inverse _ _ O
? _ _ O
o _ _ O
all _ _ O
conditions _ _ O
are _ _ O
false _ _ O
. _ _ O
if _ _ O
( _ _ O
s0 _ _ O
= _ _ O
= _ _ O
30 _ _ O
|| _ _ O
s1 _ _ O
> _ _ O
1 _ _ O
) _ _ O
{ _ _ O
block _ _ O
A _ _ O
} _ _ O
beq _ _ O
s0 _ _ O
, _ _ O
30 _ _ O
, _ _ O
blockA _ _ O
ble _ _ O
s1 _ _ O
, _ _ O
1 _ _ O
, _ _ O
skipA _ _ O
blockA _ _ O
: _ _ O
block _ _ O
A _ _ O
skipA _ _ O
: _ _ O
29 _ _ O

Looooops _ _ O
o _ _ O
o _ _ O
o _ _ O
o _ _ O
o _ _ O
o _ _ O
oo _ _ O
oo _ _ O
30 _ _ O

Dis-assembling _ _ O
a _ _ O
for-loop _ _ O
● _ _ O
How _ _ O
does _ _ O
a _ _ O
for _ _ O
loop _ _ O
work _ _ O
? _ _ O
What _ _ O
is _ _ O
the _ _ O
first _ _ O
thing _ _ O
a _ _ O
for _ _ O
does _ _ O
? _ _ O
Initialize _ _ O
: _ _ O
i=0 _ _ O
for _ _ O
( _ _ O
i=0 _ _ O
; _ _ O
i _ _ O
< _ _ O
10 _ _ O
; _ _ O
i++ _ _ O
) _ _ O
And _ _ O
? _ _ O
? _ _ O
? _ _ O
Check _ _ O
condition _ _ O
: _ _ O
{ _ _ O
execute _ _ O
while _ _ O
i _ _ O
< _ _ O
10 _ _ O
block _ _ O
A _ _ O
Then _ _ O
… _ _ O
} _ _ O
/ _ _ O
/ _ _ O
carry _ _ O
on _ _ O
block _ _ O
A _ _ O
Finally _ _ O
? _ _ O
Increment _ _ O
: _ _ O
i++ _ _ O
Go _ _ O
back _ _ O
up _ _ O
to _ _ O
the _ _ O
top _ _ O
31 _ _ O

Looping _ _ O
in _ _ O
MIPS _ _ O
assembly _ _ O
What _ _ O
’s _ _ O
the _ _ O
first _ _ O
li _ _ O
s0 _ _ O
, _ _ O
0 _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
thing _ _ O
a _ _ O
for _ _ O
loop_top _ _ O
: _ _ O
does _ _ O
? _ _ O
for _ _ O
( _ _ O
i=0 _ _ O
; _ _ O
i _ _ O
< _ _ O
10 _ _ O
; _ _ O
i++ _ _ O
) _ _ O
which _ _ O
conditional _ _ O
branch _ _ O
? _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
{ _ _ O
block _ _ O
A _ _ O
block _ _ O
A _ _ O
} _ _ O
How _ _ O
do _ _ O
we _ _ O
/ _ _ O
/ _ _ O
carry _ _ O
on _ _ O
increment _ _ O
? _ _ O
addi _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
1 _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
j _ _ O
loop_top _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
Let _ _ O
’s _ _ O
start _ _ O
with _ _ O
a _ _ O
How _ _ O
do _ _ O
recipe _ _ O
carry_on _ _ O
: _ _ O
we _ _ O
go _ _ O
up _ _ O
? _ _ O
# _ _ O
carry _ _ O
on _ _ O
● _ _ O
Let _ _ O
’s _ _ O
use _ _ O
s0 _ _ O
to _ _ O
hold _ _ O
i _ _ O
32 _ _ O

That _ _ O
’s _ _ O
bge _ _ O
, _ _ O
actually _ _ O
We _ _ O
want _ _ O
to _ _ O
leave _ _ O
the _ _ O
loop _ _ O
… _ _ O
when _ _ O
the _ _ O
opposite _ _ O
of _ _ O
i _ _ O
< _ _ O
10 _ _ O
happens _ _ O
! _ _ O
● _ _ O
In _ _ O
HLL _ _ O
we _ _ O
“ _ _ O
execute _ _ O
smth _ _ O
if _ _ O
” _ _ O
● _ _ O
In _ _ O
assembly _ _ O
we _ _ O
“ _ _ O
jump _ _ O
over _ _ O
if _ _ O
” _ _ O
● _ _ O
Thus _ _ O
negate _ _ O
the _ _ O
condition _ _ O
in _ _ O
the _ _ O
assembly _ _ O
to _ _ O
skip _ _ O
over _ _ O
code _ _ O
li _ _ O
s0 _ _ O
, _ _ O
0 _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
loop_top _ _ O
: _ _ O
bge _ _ O
s0 _ _ O
, _ _ O
10 _ _ O
, _ _ O
carry_on _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
s0 _ _ O
move _ _ O
a0 _ _ O
, _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
li _ _ O
v0 _ _ O
, _ _ O
1 _ _ O
syscall _ _ O
addi _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
1 _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
j _ _ O
loop_top _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
carry_on _ _ O
: _ _ O
# _ _ O
carry _ _ O
on _ _ O
33 _ _ O

The _ _ O
other _ _ O
way _ _ O
around _ _ O
li _ _ O
s0 _ _ O
, _ _ O
0 _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
loop_top _ _ O
: _ _ O
blt _ _ O
s0 _ _ O
, _ _ O
10 _ _ O
, _ _ O
loop_code _ _ O
b _ _ O
carry_on _ _ O
loop_code _ _ O
: _ _ O
s0 _ _ O
move _ _ O
a0 _ _ O
, _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
li _ _ O
v0 _ _ O
, _ _ O
1 _ _ O
syscall _ _ O
addi _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
1 _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
j _ _ O
loop_top _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
carry_on _ _ O
: _ _ O
# _ _ O
carry _ _ O
on _ _ O
34 _ _ O

While _ _ O
looks _ _ O
the _ _ O
same _ _ O
, _ _ O
no _ _ O
initialization _ _ O
or _ _ O
increment _ _ O
while _ _ O
( _ _ O
s2 _ _ O
< _ _ O
10 _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
stuff _ _ O
! _ _ O
! _ _ O
} _ _ O
/ _ _ O
/ _ _ O
more _ _ O
stuff _ _ O
loop_top _ _ O
: _ _ O
bge _ _ O
s2 _ _ O
, _ _ O
10 _ _ O
, _ _ O
more_stuff _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
stuff _ _ O
: _ _ O
# _ _ O
stuff _ _ O
! _ _ O
! _ _ O
j _ _ O
loop_top _ _ O
more_stuff _ _ O
: _ _ O
# _ _ O
more _ _ O
stuff _ _ O
35 _ _ O



