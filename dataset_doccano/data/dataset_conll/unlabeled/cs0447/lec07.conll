unlabeled|cs0447|lec07
-DOCSTART- -X- -X- O

# _ _ O
7 _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Functions _ _ O
and _ _ O
the _ _ O
Stack _ _ O
Original _ _ O
slides _ _ O
by _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
Modified _ _ O
with _ _ O
bits _ _ O
from _ _ O
: _ _ O
Bruce _ _ O
Childers _ _ O
, _ _ O
David _ _ O
Wilkinson _ _ O
Luís _ _ O
Oliveira _ _ O
Fall _ _ O
2020 _ _ O

What _ _ O
do _ _ O
I _ _ O
need _ _ O
to _ _ O
know _ _ O
now _ _ O
! _ _ O
The _ _ O
classes _ _ O
will _ _ O
be _ _ O
recorded _ _ O
! _ _ O
● _ _ O
You _ _ O
will _ _ O
be _ _ O
able _ _ O
to _ _ O
access _ _ O
the _ _ O
videos _ _ O
online _ _ O
o _ _ O
They _ _ O
are _ _ O
for _ _ O
your _ _ O
personal _ _ O
use _ _ O
only _ _ O
! _ _ O
o _ _ O
Do _ _ O
not _ _ O
distribute _ _ O
them _ _ O
! _ _ O
● _ _ O
You _ _ O
do _ _ O
n’t _ _ O
need _ _ O
to _ _ O
turn _ _ O
on _ _ O
your _ _ O
camera _ _ O
o _ _ O
If _ _ O
you _ _ O
do _ _ O
, _ _ O
you _ _ O
may _ _ O
be _ _ O
recorded _ _ O
● _ _ O
You _ _ O
can _ _ O
ask _ _ O
questions _ _ O
via _ _ O
text _ _ O
! _ _ O
o _ _ O
Chat _ _ O
is _ _ O
great _ _ O
for _ _ O
that _ _ O
. _ _ O
If _ _ O
I _ _ O
do _ _ O
n’t _ _ O
stop _ _ O
and _ _ O
read _ _ O
your _ _ O
questions _ _ O
, _ _ O
ask _ _ O
them _ _ O
again _ _ O
o _ _ O
But _ _ O
feel _ _ O
free _ _ O
to _ _ O
interrupt _ _ O
me _ _ O
at _ _ O
any _ _ O
point _ _ O
. _ _ O
2 _ _ O

Class _ _ O
announcements _ _ O
• _ _ O
Project _ _ O
1 _ _ O
is _ _ O
out _ _ O
soon _ _ O
! _ _ O
o _ _ O
You _ _ O
have _ _ O
3 _ _ O
weeks _ _ O
! _ _ O
• _ _ O
Do _ _ O
n’t _ _ O
forget _ _ O
! _ _ O
o _ _ O
In _ _ O
the _ _ O
website _ _ O
( _ _ O
next _ _ O
to _ _ O
the _ _ O
slides _ _ O
) _ _ O
there _ _ O
are _ _ O
code _ _ O
examples _ _ O
o _ _ O
Those _ _ O
code _ _ O
examples _ _ O
have _ _ O
extra _ _ O
exercises _ _ O
! _ _ O
o _ _ O
Go _ _ O
and _ _ O
do _ _ O
them _ _ O
! _ _ O
• _ _ O
Have _ _ O
you _ _ O
been _ _ O
going _ _ O
to _ _ O
recitation _ _ O
? _ _ O
o _ _ O
You _ _ O
should _ _ O
! _ _ O
3 _ _ O

Calling _ _ O
conventions _ _ O
4 _ _ O

What _ _ O
's _ _ O
a _ _ O
calling _ _ O
convention _ _ O
? _ _ O
● _ _ O
It _ _ O
ensures _ _ O
our _ _ O
programs _ _ O
do _ _ O
n't _ _ O
trip _ _ O
over _ _ O
their _ _ O
own _ _ O
feet _ _ O
● _ _ O
It _ _ O
's _ _ O
how _ _ O
machine-language _ _ O
functions _ _ O
call _ _ O
one _ _ O
another _ _ O
o _ _ O
How _ _ O
arguments _ _ O
are _ _ O
passed _ _ O
o _ _ O
How _ _ O
return _ _ O
values _ _ O
are _ _ O
returned _ _ O
o _ _ O
How _ _ O
control _ _ O
flows _ _ O
into _ _ O
/ _ _ O
out _ _ O
of _ _ O
the _ _ O
function _ _ O
o _ _ O
What _ _ O
contracts _ _ O
exist _ _ O
between _ _ O
the _ _ O
caller _ _ O
and _ _ O
the _ _ O
callee _ _ O
void _ _ O
fork _ _ O
( _ _ O
) _ _ O
{ _ _ O
knife _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
caller _ _ O
void _ _ O
knife _ _ O
( _ _ O
) _ _ O
{ _ _ O
... _ _ O
} _ _ O
callee _ _ O
5 _ _ O

The _ _ O
program _ _ O
counter _ _ O
register _ _ O
● _ _ O
A _ _ O
program _ _ O
's _ _ O
instructions _ _ O
are _ _ O
in _ _ O
memory _ _ O
, _ _ O
so _ _ O
they _ _ O
have _ _ O
addresses _ _ O
● _ _ O
The _ _ O
PC _ _ O
( _ _ O
program _ _ O
counter _ _ O
) _ _ O
holds _ _ O
the _ _ O
address _ _ O
of _ _ O
the _ _ O
next _ _ O
instruction _ _ O
to _ _ O
run _ _ O
o _ _ O
Is _ _ O
incremented _ _ O
by _ _ O
a _ _ O
word _ _ O
! _ _ O
Each _ _ O
instruction _ _ O
is _ _ O
a _ _ O
word _ _ O
time _ _ O
PC _ _ O
0x8000 _ _ O
0x8004 _ _ O
0x8008 _ _ O
0x800C _ _ O
0x8010 _ _ O
0x8000 _ _ O
? _ _ O
0x8014 _ _ O
Address _ _ O
top _ _ O
: _ _ O
0x8000 _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
( _ _ O
s0 _ _ O
) _ _ O
0x8004 _ _ O
add _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
1 _ _ O
0x8008 _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
( _ _ O
s0 _ _ O
) _ _ O
0x800C _ _ O
add _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
4 _ _ O
0x8010 _ _ O
blt _ _ O
s0 _ _ O
, _ _ O
s1 _ _ O
, _ _ O
top _ _ O
btw _ _ O
what _ _ O
pattern _ _ O
do _ _ O
you _ _ O
notice _ _ O
about _ _ O
these _ _ O
addresses _ _ O
? _ _ O
6 _ _ O

MIPS _ _ O
ISA _ _ O
: _ _ O
conditional _ _ O
branch _ _ O
instructions _ _ O
● _ _ O
The _ _ O
conditional _ _ O
branch _ _ O
instructions _ _ O
we _ _ O
’ve _ _ O
seen _ _ O
last _ _ O
class _ _ O
o _ _ O
Actually _ _ O
interact _ _ O
with _ _ O
pc _ _ O
Instruction _ _ O
Meaning _ _ O
beq _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
= _ _ O
= _ _ O
b _ _ O
) _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
bne _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
! _ _ O
= _ _ O
b _ _ O
) _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
blt _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
< _ _ O
b _ _ O
) _ _ O
ble _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
< _ _ O
= _ _ O
b _ _ O
) _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
bgt _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
> _ _ O
b _ _ O
) _ _ O
bge _ _ O
a _ _ O
, _ _ O
b _ _ O
, _ _ O
label _ _ O
if _ _ O
( _ _ O
a _ _ O
> _ _ O
= _ _ O
b _ _ O
) _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
{ _ _ O
goto _ _ O
label _ _ O
} _ _ O
7 _ _ O

The _ _ O
flow _ _ O
of _ _ O
control _ _ O
● _ _ O
When _ _ O
the _ _ O
caller _ _ O
calls _ _ O
a _ _ O
function _ _ O
, _ _ O
where _ _ O
do _ _ O
we _ _ O
go _ _ O
? _ _ O
● _ _ O
When _ _ O
the _ _ O
callee _ _ O
's _ _ O
code _ _ O
is _ _ O
finished _ _ O
, _ _ O
where _ _ O
do _ _ O
we _ _ O
go _ _ O
? _ _ O
void _ _ O
fork _ _ O
( _ _ O
) _ _ O
{ _ _ O
knife _ _ O
( _ _ O
) _ _ O
; _ _ O
spoon++ _ _ O
; _ _ O
} _ _ O
caller _ _ O
void _ _ O
knife _ _ O
( _ _ O
) _ _ O
{ _ _ O
spork++ _ _ O
; _ _ O
spatula-- _ _ O
; _ _ O
} _ _ O
callee _ _ O
8 _ _ O

MIPS _ _ O
ISA _ _ O
: _ _ O
The _ _ O
jump _ _ O
and _ _ O
link _ _ O
instruction _ _ O
● _ _ O
We _ _ O
call _ _ O
functions _ _ O
with _ _ O
jal _ _ O
: _ _ O
jump _ _ O
and _ _ O
link _ _ O
void _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
func _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
main _ _ O
: _ _ O
label _ _ O
jal _ _ O
func _ _ O
9 _ _ O

MIPS _ _ O
ISA _ _ O
: _ _ O
The _ _ O
jump _ _ O
and _ _ O
link _ _ O
instruction _ _ O
● _ _ O
We _ _ O
call _ _ O
functions _ _ O
with _ _ O
jal _ _ O
: _ _ O
jump _ _ O
and _ _ O
link _ _ O
PC _ _ O
0x8004 _ _ O
What _ _ O
address _ _ O
should _ _ O
PC _ _ O
0x8C30 _ _ O
go _ _ O
into _ _ O
PC _ _ O
next _ _ O
? _ _ O
When _ _ O
func _ _ O
returns _ _ O
, _ _ O
0x8008 _ _ O
ra _ _ O
where _ _ O
will _ _ O
we _ _ O
go _ _ O
? _ _ O
0x8000 _ _ O
li _ _ O
a0 _ _ O
, _ _ O
10 _ _ O
0x8004 _ _ O
jal _ _ O
func _ _ O
0x8008 _ _ O
li _ _ O
v0 _ _ O
, _ _ O
10 _ _ O
... _ _ O
... _ _ O
func _ _ O
: _ _ O
0x8C30 _ _ O
li _ _ O
v0 _ _ O
, _ _ O
4 _ _ O
This _ _ O
is _ _ O
what _ _ O
jal _ _ O
does _ _ O
: _ _ O
it _ _ O
jumps _ _ O
to _ _ O
a _ _ O
new _ _ O
location _ _ O
, _ _ O
and _ _ O
... _ _ O
... _ _ O
makes _ _ O
a _ _ O
link _ _ O
back _ _ O
to _ _ O
the _ _ O
old _ _ O
one _ _ O
in _ _ O
the _ _ O
ra _ _ O
( _ _ O
return _ _ O
address _ _ O
) _ _ O
register _ _ O
and _ _ O
this _ _ O
is _ _ O
ALL _ _ O
it _ _ O
does _ _ O
. _ _ O
10 _ _ O

MIPS _ _ O
ISA _ _ O
: _ _ O
The _ _ O
jump _ _ O
register _ _ O
instruction _ _ O
● _ _ O
We _ _ O
return _ _ O
from _ _ O
functions _ _ O
with _ _ O
jr _ _ O
: _ _ O
jump _ _ O
to _ _ O
address _ _ O
in _ _ O
register _ _ O
void _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
func _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
main _ _ O
: _ _ O
label _ _ O
jal _ _ O
func _ _ O
label _ _ O
void _ _ O
func _ _ O
( _ _ O
) _ _ O
{ _ _ O
return _ _ O
; _ _ O
} _ _ O
func _ _ O
: _ _ O
jr _ _ O
ra _ _ O
return _ _ O
11 _ _ O

MIPS _ _ O
ISA _ _ O
: _ _ O
The _ _ O
jump _ _ O
register _ _ O
instruction _ _ O
● _ _ O
We _ _ O
return _ _ O
from _ _ O
functions _ _ O
with _ _ O
jr _ _ O
: _ _ O
jump _ _ O
to _ _ O
address _ _ O
in _ _ O
register _ _ O
Now _ _ O
we _ _ O
're _ _ O
at _ _ O
the _ _ O
end _ _ O
PC _ _ O
0x8C38 _ _ O
of _ _ O
func _ _ O
. _ _ O
ra _ _ O
still _ _ O
has _ _ O
the _ _ O
proper _ _ O
return _ _ O
address _ _ O
ra _ _ O
0x8008 _ _ O
jr _ _ O
ra _ _ O
copies _ _ O
ra _ _ O
into _ _ O
pc _ _ O
. _ _ O
PC _ _ O
0x8008 _ _ O
and _ _ O
this _ _ O
is _ _ O
ALL _ _ O
it _ _ O
does _ _ O
. _ _ O
0x8000 _ _ O
li _ _ O
a0 _ _ O
, _ _ O
10 _ _ O
0x8004 _ _ O
jal _ _ O
func _ _ O
0x8008 _ _ O
li _ _ O
v0 _ _ O
, _ _ O
10 _ _ O
... _ _ O
... _ _ O
func _ _ O
: _ _ O
0x8C30 _ _ O
li _ _ O
v0 _ _ O
, _ _ O
4 _ _ O
0x8C34 _ _ O
syscall _ _ O
0x8C38 _ _ O
jr _ _ O
ra _ _ O
12 _ _ O

Arguments _ _ O
and _ _ O
Return _ _ O
Values _ _ O
13 _ _ O

It _ _ O
's _ _ O
pretty _ _ O
simple _ _ O
, _ _ O
remember _ _ O
register _ _ O
names _ _ O
! _ _ O
! _ _ O
● _ _ O
if _ _ O
we _ _ O
have _ _ O
a _ _ O
function _ _ O
in _ _ O
a _ _ O
higher _ _ O
level _ _ O
language _ _ O
… _ _ O
we _ _ O
use _ _ O
particular _ _ O
registers _ _ O
v0 _ _ O
a0 _ _ O
a1 _ _ O
to _ _ O
pass _ _ O
arguments _ _ O
and _ _ O
int _ _ O
gcd _ _ O
( _ _ O
int _ _ O
a _ _ O
, _ _ O
int _ _ O
b _ _ O
) _ _ O
{ _ _ O
return _ _ O
values _ _ O
. _ _ O
while _ _ O
( _ _ O
a _ _ O
! _ _ O
= _ _ O
b _ _ O
) _ _ O
{ _ _ O
if _ _ O
( _ _ O
a _ _ O
> _ _ O
b _ _ O
) _ _ O
a _ _ O
-= _ _ O
b _ _ O
; _ _ O
else _ _ O
we _ _ O
already _ _ O
know _ _ O
how _ _ O
to _ _ O
b _ _ O
-= _ _ O
a _ _ O
; _ _ O
return _ _ O
. _ _ O
How _ _ O
do _ _ O
syscalls _ _ O
do _ _ O
it _ _ O
? _ _ O
} _ _ O
for _ _ O
this _ _ O
, _ _ O
just _ _ O
put _ _ O
the _ _ O
value _ _ O
you _ _ O
want _ _ O
return _ _ O
a _ _ O
; _ _ O
to _ _ O
return _ _ O
in _ _ O
v0 _ _ O
before _ _ O
jr _ _ O
ra _ _ O
. _ _ O
} _ _ O
14 _ _ O

The _ _ O
a _ _ O
and _ _ O
v _ _ O
registers _ _ O
● _ _ O
a0-a3 _ _ O
are _ _ O
the _ _ O
argument _ _ O
registers _ _ O
● _ _ O
v0-v1 _ _ O
are _ _ O
the _ _ O
return _ _ O
value _ _ O
registers _ _ O
o _ _ O
This _ _ O
is _ _ O
just _ _ O
a _ _ O
convention _ _ O
, _ _ O
there _ _ O
's _ _ O
nothing _ _ O
special _ _ O
about _ _ O
them _ _ O
▪ _ _ O
Does _ _ O
that _ _ O
mean _ _ O
I _ _ O
can _ _ O
pass _ _ O
values _ _ O
in _ _ O
( _ _ O
e.g. _ _ O
) _ _ O
s-registers _ _ O
? _ _ O
– _ _ O
Yessssssss….????¬.¬ _ _ O
▪ _ _ O
Will _ _ O
I _ _ O
lose _ _ O
any _ _ O
points _ _ O
in _ _ O
midterms _ _ O
/ _ _ O
labs _ _ O
/ _ _ O
projects _ _ O
if _ _ O
I _ _ O
do _ _ O
? _ _ O
– _ _ O
Yessssssss _ _ O
! _ _ O
! _ _ O
! _ _ O
! _ _ O
¬.¬ _ _ O
● _ _ O
By _ _ O
convention _ _ O
! _ _ O
We _ _ O
never _ _ O
do _ _ O
that _ _ O
! _ _ O
o _ _ O
ALWAYS _ _ O
pass _ _ O
arguments _ _ O
in _ _ O
a-registers _ _ O
o _ _ O
ALWAYS _ _ O
return _ _ O
arguments _ _ O
in _ _ O
v-registers _ _ O
15 _ _ O

To _ _ O
call _ _ O
a _ _ O
function _ _ O
… _ _ O
● _ _ O
You _ _ O
put _ _ O
its _ _ O
arguments _ _ O
in _ _ O
the _ _ O
a _ _ O
registers _ _ O
before _ _ O
doing _ _ O
a _ _ O
jal _ _ O
● _ _ O
Once _ _ O
control _ _ O
is _ _ O
inside _ _ O
the _ _ O
callee _ _ O
… _ _ O
o _ _ O
The _ _ O
arguments _ _ O
are _ _ O
just _ _ O
" _ _ O
there _ _ O
" _ _ O
in _ _ O
the _ _ O
a _ _ O
registers _ _ O
. _ _ O
▪ _ _ O
Cause _ _ O
they _ _ O
are _ _ O
. _ _ O
– _ _ O
They _ _ O
did _ _ O
n't _ _ O
go _ _ O
anywhere _ _ O
! _ _ O
add_nums _ _ O
● _ _ O
Functions _ _ O
should _ _ O
be _ _ O
black _ _ O
boxes _ _ O
for _ _ O
the _ _ O
caller _ _ O
o _ _ O
You _ _ O
do _ _ O
n’t _ _ O
need _ _ O
any _ _ O
information _ _ O
about _ _ O
the _ _ O
implementation _ _ O
o _ _ O
You _ _ O
only _ _ O
need _ _ O
to _ _ O
know _ _ O
inputs _ _ O
and _ _ O
outputs _ _ O
! _ _ O
o _ _ O
… _ _ O
and _ _ O
conventions _ _ O
Amazing _ _ O
function _ _ O
that _ _ O
adds _ _ O
two _ _ O
numbers _ _ O
. _ _ O
You _ _ O
do _ _ O
not _ _ O
need _ _ O
to _ _ O
know _ _ O
how _ _ O
it _ _ O
is _ _ O
implemented _ _ O
! _ _ O
! _ _ O
! _ _ O
Inputs _ _ O
: _ _ O
1 _ _ O
. _ _ O
Number _ _ O
to _ _ O
add _ _ O
2 _ _ O
. _ _ O
Number _ _ O
to _ _ O
add _ _ O
Outputs _ _ O
: _ _ O
1 _ _ O
. _ _ O
Numbers _ _ O
added _ _ O
together _ _ O
16 _ _ O

Let _ _ O
’s _ _ O
call _ _ O
a _ _ O
function _ _ O
! _ _ O
● _ _ O
Let _ _ O
's _ _ O
make _ _ O
main _ _ O
do _ _ O
this _ _ O
: _ _ O
v0=add_nums _ _ O
( _ _ O
3 _ _ O
, _ _ O
8) _ _ O
print _ _ O
( _ _ O
v0 _ _ O
) _ _ O
li _ _ O
a0 _ _ O
, _ _ O
3 _ _ O
li _ _ O
a1 _ _ O
, _ _ O
8 _ _ O
jal _ _ O
add_nums _ _ O
move _ _ O
a0 _ _ O
, _ _ O
v0 _ _ O
li _ _ O
v0 _ _ O
, _ _ O
1 _ _ O
syscall _ _ O
Careful _ _ O
! _ _ O
● _ _ O
How _ _ O
do _ _ O
we _ _ O
set _ _ O
3 _ _ O
and _ _ O
8 _ _ O
as _ _ O
the _ _ O
arguments _ _ O
? _ _ O
● _ _ O
How _ _ O
do _ _ O
we _ _ O
call _ _ O
add_nums _ _ O
? _ _ O
● _ _ O
Afterwards _ _ O
, _ _ O
which _ _ O
register _ _ O
holds _ _ O
the _ _ O
sum _ _ O
? _ _ O
● _ _ O
So _ _ O
how _ _ O
can _ _ O
we _ _ O
print _ _ O
that _ _ O
value _ _ O
? _ _ O
● _ _ O
Why _ _ O
do _ _ O
syscalls _ _ O
put _ _ O
the _ _ O
number _ _ O
of _ _ O
the _ _ O
syscall _ _ O
in _ _ O
v0 _ _ O
? _ _ O
o _ _ O
Well _ _ O
what _ _ O
do _ _ O
you _ _ O
get _ _ O
when _ _ O
you _ _ O
cross _ _ O
an _ _ O
elephant _ _ O
and _ _ O
a _ _ O
rhino _ _ O
? _ _ O
▪ _ _ O
Hell _ _ O
if _ _ O
I _ _ O
know _ _ O
¯\_ _ _ O
( _ _ O
ツ _ _ O
) _ _ O
_ _ _ O
/ _ _ O
¯ _ _ O
It _ _ O
’s _ _ O
a _ _ O
rhinophant _ _ O
17 _ _ O

Input _ _ O
, _ _ O
output _ _ O
● _ _ O
Now _ _ O
, _ _ O
let _ _ O
's _ _ O
write _ _ O
the _ _ O
function _ _ O
: _ _ O
int _ _ O
add_nums _ _ O
( _ _ O
int _ _ O
x _ _ O
, _ _ O
int _ _ O
y _ _ O
) _ _ O
{ _ _ O
return _ _ O
x _ _ O
+ _ _ O
y _ _ O
; _ _ O
} _ _ O
● _ _ O
inside _ _ O
of _ _ O
our _ _ O
add_nums _ _ O
asm _ _ O
function _ _ O
… _ _ O
o _ _ O
which _ _ O
register _ _ O
represents _ _ O
x _ _ O
? _ _ O
o _ _ O
which _ _ O
register _ _ O
represents _ _ O
y _ _ O
? _ _ O
o _ _ O
which _ _ O
register _ _ O
will _ _ O
hold _ _ O
the _ _ O
sum _ _ O
that _ _ O
we _ _ O
return _ _ O
? _ _ O
add_nums _ _ O
: _ _ O
add _ _ O
_ _ _ O
_ _ _ O
, _ _ O
_ _ _ O
_ _ _ O
, _ _ O
_ _ _ O
_ _ _ O
jr _ _ O
v0 _ _ O
ra _ _ O
a0 _ _ O
a1 _ _ O
18 _ _ O

More _ _ O
conventions _ _ O
: _ _ O
Saved _ _ O
and _ _ O
Unsaved _ _ O
registers _ _ O
19 _ _ O

Let _ _ O
’s _ _ O
try _ _ O
something _ _ O
● _ _ O
Let _ _ O
's _ _ O
make _ _ O
a _ _ O
variable _ _ O
and _ _ O
a _ _ O
function _ _ O
to _ _ O
change _ _ O
it _ _ O
.data _ _ O
counter _ _ O
: _ _ O
.word _ _ O
0 _ _ O
.text _ _ O
increment _ _ O
: _ _ O
la _ _ O
t0 _ _ O
, _ _ O
counter _ _ O
lw _ _ O
t1 _ _ O
, _ _ O
( _ _ O
t0 _ _ O
) _ _ O
add _ _ O
t1 _ _ O
, _ _ O
t1 _ _ O
, _ _ O
1 _ _ O
sw _ _ O
t1 _ _ O
, _ _ O
( _ _ O
t0 _ _ O
) _ _ O
jr _ _ O
ra _ _ O
then _ _ O
we _ _ O
can _ _ O
call _ _ O
it _ _ O
main _ _ O
: _ _ O
jal _ _ O
increment _ _ O
jal _ _ O
increment _ _ O
jal _ _ O
increment _ _ O
20 _ _ O

Everything _ _ O
's _ _ O
just _ _ O
fine _ _ O
, _ _ O
right _ _ O
? _ _ O
● _ _ O
let _ _ O
's _ _ O
write _ _ O
a _ _ O
loop _ _ O
that _ _ O
calls _ _ O
it _ _ O
ten _ _ O
times _ _ O
in _ _ O
a _ _ O
row _ _ O
● _ _ O
so _ _ O
we _ _ O
need _ _ O
a _ _ O
loop _ _ O
counter _ _ O
( _ _ O
' _ _ O
i _ _ O
' _ _ O
in _ _ O
a _ _ O
for _ _ O
loop _ _ O
) _ _ O
li _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
# _ _ O
our _ _ O
counter _ _ O
loop_begin _ _ O
: _ _ O
jal _ _ O
increment _ _ O
add _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
1 _ _ O
blt _ _ O
t0 _ _ O
, _ _ O
10 _ _ O
, _ _ O
loop_begin _ _ O
loop_end _ _ O
: _ _ O
( _ _ O
this _ _ O
is _ _ O
a _ _ O
do-while _ _ O
loop _ _ O
) _ _ O
if _ _ O
we _ _ O
run _ _ O
this _ _ O
, _ _ O
it _ _ O
only _ _ O
increments _ _ O
the _ _ O
variable _ _ O
once _ _ O
. _ _ O
why _ _ O
? _ _ O
let _ _ O
's _ _ O
put _ _ O
a _ _ O
breakpoint _ _ O
on _ _ O
blt _ _ O
and _ _ O
see _ _ O
what _ _ O
it _ _ O
sees _ _ O
. _ _ O
21 _ _ O

Scribbling _ _ O
on _ _ O
someone _ _ O
else _ _ O
's _ _ O
notes _ _ O
● _ _ O
both _ _ O
functions _ _ O
are _ _ O
trying _ _ O
to _ _ O
use _ _ O
t0 _ _ O
for _ _ O
different _ _ O
purposes _ _ O
o _ _ O
but _ _ O
there _ _ O
's _ _ O
only _ _ O
ONE _ _ O
t0 _ _ O
! _ _ O
● _ _ O
the _ _ O
increment _ _ O
function _ _ O
is _ _ O
in _ _ O
the _ _ O
clear _ _ O
o _ _ O
the _ _ O
problem _ _ O
is _ _ O
actually _ _ O
the _ _ O
loop _ _ O
● _ _ O
this _ _ O
is _ _ O
one _ _ O
of _ _ O
the _ _ O
contracts _ _ O
between _ _ O
the _ _ O
caller _ _ O
and _ _ O
the _ _ O
callee _ _ O
… _ _ O
a _ _ O
caller _ _ O
can _ _ O
not _ _ O
depend _ _ O
on _ _ O
the _ _ O
t _ _ O
, _ _ O
a _ _ O
, _ _ O
or _ _ O
v _ _ O
registers _ _ O
to _ _ O
have _ _ O
the _ _ O
same _ _ O
values _ _ O
after _ _ O
a _ _ O
call _ _ O
as _ _ O
before _ _ O
it _ _ O
. _ _ O
or _ _ O
to _ _ O
put _ _ O
it _ _ O
another _ _ O
way _ _ O
, _ _ O
callees _ _ O
are _ _ O
allowed _ _ O
to _ _ O
trash _ _ O
those _ _ O
registers _ _ O
. _ _ O
22 _ _ O

Another _ _ O
piece _ _ O
of _ _ O
the _ _ O
calling _ _ O
convention _ _ O
puzzle _ _ O
● _ _ O
When _ _ O
you _ _ O
call _ _ O
a _ _ O
function _ _ O
, _ _ O
it _ _ O
's _ _ O
allowed _ _ O
to _ _ O
change _ _ O
some _ _ O
registers _ _ O
● _ _ O
But _ _ O
other _ _ O
registers _ _ O
must _ _ O
be _ _ O
left _ _ O
exactly _ _ O
as _ _ O
they _ _ O
were _ _ O
functions _ _ O
are _ _ O
required _ _ O
to _ _ O
put _ _ O
these _ _ O
registers _ _ O
back _ _ O
the _ _ O
way _ _ O
they _ _ O
were _ _ O
before _ _ O
they _ _ O
were _ _ O
called _ _ O
. _ _ O
Saved _ _ O
s0-s7 _ _ O
sp _ _ O
ra _ _ O
* _ _ O
anyone _ _ O
can _ _ O
change _ _ O
Unsaved _ _ O
these _ _ O
. _ _ O
after _ _ O
you _ _ O
call _ _ O
a _ _ O
v0-v1 _ _ O
function _ _ O
, _ _ O
they _ _ O
might _ _ O
a0-a3 _ _ O
have _ _ O
totally _ _ O
different _ _ O
values _ _ O
from _ _ O
before _ _ O
t0-t9 _ _ O
you _ _ O
called _ _ O
it _ _ O
. _ _ O
* _ _ O
ra _ _ O
is _ _ O
a _ _ O
little _ _ O
weird _ _ O
cause _ _ O
it _ _ O
's _ _ O
kinda _ _ O
" _ _ O
out _ _ O
of _ _ O
sync _ _ O
" _ _ O
with _ _ O
the _ _ O
other _ _ O
saved _ _ O
regs _ _ O
but _ _ O
you _ _ O
DO _ _ O
save _ _ O
and _ _ O
restore _ _ O
it _ _ O
like _ _ O
the _ _ O
others _ _ O
23 _ _ O

Whenever _ _ O
you _ _ O
call _ _ O
a _ _ O
function _ _ O
… _ _ O
● _ _ O
after _ _ O
a _ _ O
jal _ _ O
, _ _ O
you _ _ O
have _ _ O
no _ _ O
idea _ _ O
what _ _ O
's _ _ O
in _ _ O
these _ _ O
registers _ _ O
. _ _ O
... _ _ O
jal _ _ O
... _ _ O
increment _ _ O
Unsaved _ _ O
v0-v1 _ _ O
a0-a3 _ _ O
t0-t9 _ _ O
24 _ _ O

Why _ _ O
it _ _ O
broke _ _ O
● _ _ O
if _ _ O
we _ _ O
look _ _ O
at _ _ O
this _ _ O
code _ _ O
again _ _ O
… _ _ O
t0 _ _ O
is _ _ O
our _ _ O
loop _ _ O
counter _ _ O
and _ _ O
everything _ _ O
's _ _ O
fiiiine _ _ O
. _ _ O
li _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
loop_begin _ _ O
: _ _ O
uh _ _ O
oh _ _ O
. _ _ O
jal _ _ O
increment _ _ O
add _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
1 _ _ O
blt _ _ O
t0 _ _ O
, _ _ O
10 _ _ O
, _ _ O
loop_begin _ _ O
WHAT _ _ O
IS _ _ O
IN _ _ O
t0 _ _ O
NOW _ _ O
? _ _ O
? _ _ O
loop_end _ _ O
: _ _ O
instead _ _ O
, _ _ O
this _ _ O
is _ _ O
a _ _ O
great _ _ O
place _ _ O
to _ _ O
use _ _ O
an _ _ O
s _ _ O
register _ _ O
. _ _ O
25 _ _ O

Using _ _ O
the _ _ O
convention _ _ O
● _ _ O
if _ _ O
we _ _ O
use _ _ O
an _ _ O
s _ _ O
register _ _ O
… _ _ O
s0 _ _ O
is _ _ O
our _ _ O
loop _ _ O
counter _ _ O
and _ _ O
everything _ _ O
's _ _ O
fiiiine _ _ O
. _ _ O
li _ _ O
s0 _ _ O
, _ _ O
0 _ _ O
loop_begin _ _ O
: _ _ O
uh _ _ O
oh _ _ O
. _ _ O
jal _ _ O
increment _ _ O
add _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
1 _ _ O
oh _ _ O
whew _ _ O
, _ _ O
we _ _ O
used _ _ O
an _ _ O
s _ _ O
blt _ _ O
s0 _ _ O
, _ _ O
10 _ _ O
, _ _ O
loop_begin _ _ O
register _ _ O
, _ _ O
it _ _ O
's _ _ O
fine _ _ O
. _ _ O
loop_end _ _ O
: _ _ O
but _ _ O
s _ _ O
registers _ _ O
are _ _ O
n't _ _ O
magic _ _ O
. _ _ O
they _ _ O
do _ _ O
n't _ _ O
do _ _ O
this _ _ O
automatically _ _ O
. _ _ O
26 _ _ O

Do _ _ O
n't _ _ O
step _ _ O
on _ _ O
each _ _ O
others _ _ O
' _ _ O
toes _ _ O
● _ _ O
let _ _ O
's _ _ O
track _ _ O
PC _ _ O
and _ _ O
ra _ _ O
as _ _ O
we _ _ O
run _ _ O
this _ _ O
code _ _ O
. _ _ O
PC _ _ O
ra _ _ O
0x8000 _ _ O
0x0000 _ _ O
After _ _ O
jal _ _ O
fork _ _ O
: _ _ O
0x8020 _ _ O
0x8004 _ _ O
After _ _ O
jal _ _ O
spoon _ _ O
: _ _ O
0x8040 _ _ O
After _ _ O
jr _ _ O
ra _ _ O
: _ _ O
0x8024 _ _ O
0x8024 _ _ O
fork _ _ O
: _ _ O
0x8024 _ _ O
0x8000 _ _ O
jal _ _ O
fork _ _ O
0x8004 _ _ O
li _ _ O
v0 _ _ O
, _ _ O
10 _ _ O
... _ _ O
... _ _ O
0x8020 _ _ O
jal _ _ O
spoon _ _ O
0x8024 _ _ O
jr _ _ O
ra _ _ O
... _ _ O
... _ _ O
After _ _ O
jr _ _ O
ra _ _ O
: _ _ O
0x8024 _ _ O
0x8024 _ _ O
spoon _ _ O
: _ _ O
0x8040 _ _ O
jr _ _ O
ra _ _ O
After _ _ O
jr _ _ O
ra _ _ O
: _ _ O
0x8024 _ _ O
0x8024 _ _ O
After _ _ O
jr _ _ O
ra _ _ O
: _ _ O
0x8024 _ _ O
0x8024 _ _ O
After _ _ O
jr _ _ O
ra _ _ O
: _ _ O
0x8024 _ _ O
0x8024 _ _ O
27 _ _ O

What _ _ O
's _ _ O
the _ _ O
deal _ _ O
? _ _ O
● _ _ O
There _ _ O
's _ _ O
only _ _ O
one _ _ O
return _ _ O
address _ _ O
register _ _ O
● _ _ O
If _ _ O
we _ _ O
call _ _ O
more _ _ O
than _ _ O
one _ _ O
level _ _ O
deep _ _ O
, _ _ O
things _ _ O
go _ _ O
horribly _ _ O
wrong _ _ O
● _ _ O
Could _ _ O
we _ _ O
put _ _ O
it _ _ O
in _ _ O
another _ _ O
register _ _ O
? _ _ O
o _ _ O
Then _ _ O
what _ _ O
about _ _ O
three _ _ O
levels _ _ O
deep _ _ O
? _ _ O
four _ _ O
? _ _ O
▪ _ _ O
We _ _ O
just _ _ O
do _ _ O
n't _ _ O
have _ _ O
enough _ _ O
registers _ _ O
… _ _ O
● _ _ O
So _ _ O
where _ _ O
do _ _ O
we _ _ O
put _ _ O
things _ _ O
when _ _ O
we _ _ O
do _ _ O
n't _ _ O
have _ _ O
room _ _ O
in _ _ O
registers _ _ O
? _ _ O
o _ _ O
Tip _ _ O
: _ _ O
NOT _ _ O
in _ _ O
other _ _ O
registers _ _ O
( _ _ O
obviously _ _ O
! _ _ O
) _ _ O
▪ _ _ O
So _ _ O
do _ _ O
n’t _ _ O
give _ _ O
into _ _ O
the _ _ O
urge _ _ O
of _ _ O
doing _ _ O
it _ _ O
o _ _ O
Put _ _ O
things _ _ O
in _ _ O
memory _ _ O
! _ _ O
28 _ _ O

( _ _ O
yes _ _ O
, _ _ O
memory _ _ O
) _ _ O
The _ _ O
Stack _ _ O
29 _ _ O

One _ _ O
busy _ _ O
desk _ _ O
● _ _ O
there _ _ O
's _ _ O
a _ _ O
tiny _ _ O
desk _ _ O
that _ _ O
three _ _ O
people _ _ O
have _ _ O
to _ _ O
share _ _ O
● _ _ O
person _ _ O
1 _ _ O
is _ _ O
working _ _ O
at _ _ O
the _ _ O
desk _ _ O
. _ _ O
it _ _ O
's _ _ O
covered _ _ O
in _ _ O
their _ _ O
stuff _ _ O
. _ _ O
● _ _ O
person _ _ O
2 _ _ O
interrupts _ _ O
them _ _ O
and _ _ O
needs _ _ O
to _ _ O
do _ _ O
some _ _ O
important _ _ O
work _ _ O
● _ _ O
what _ _ O
does _ _ O
person _ _ O
2 _ _ O
do _ _ O
with _ _ O
the _ _ O
stuff _ _ O
? _ _ O
o _ _ O
throw _ _ O
it _ _ O
in _ _ O
the _ _ O
trash _ _ O
? _ _ O
● _ _ O
they _ _ O
put _ _ O
it _ _ O
somewhere _ _ O
else _ _ O
. _ _ O
P1 _ _ O
P1 _ _ O
Trash _ _ O
30 _ _ O

One _ _ O
busy _ _ O
desk _ _ O
● _ _ O
there _ _ O
's _ _ O
a _ _ O
tiny _ _ O
desk _ _ O
that _ _ O
three _ _ O
people _ _ O
have _ _ O
to _ _ O
share _ _ O
● _ _ O
person _ _ O
1 _ _ O
is _ _ O
working _ _ O
at _ _ O
the _ _ O
desk _ _ O
. _ _ O
it _ _ O
's _ _ O
covered _ _ O
in _ _ O
their _ _ O
stuff _ _ O
. _ _ O
● _ _ O
person _ _ O
2 _ _ O
interrupts _ _ O
them _ _ O
and _ _ O
needs _ _ O
to _ _ O
do _ _ O
some _ _ O
important _ _ O
work _ _ O
● _ _ O
what _ _ O
does _ _ O
person _ _ O
2 _ _ O
do _ _ O
with _ _ O
the _ _ O
stuff _ _ O
? _ _ O
o _ _ O
throw _ _ O
it _ _ O
in _ _ O
the _ _ O
trash _ _ O
? _ _ O
● _ _ O
they _ _ O
put _ _ O
it _ _ O
somewhere _ _ O
else _ _ O
. _ _ O
● _ _ O
And _ _ O
once _ _ O
they _ _ O
are _ _ O
done _ _ O
o _ _ O
They _ _ O
put _ _ O
it _ _ O
back _ _ O
. _ _ O
P1 _ _ O
P1 _ _ O
Trash _ _ O
31 _ _ O

One _ _ O
busy _ _ O
desk _ _ O
● _ _ O
now _ _ O
person _ _ O
2 _ _ O
is _ _ O
interrupted _ _ O
by _ _ O
person _ _ O
3 _ _ O
. _ _ O
● _ _ O
when _ _ O
person _ _ O
3 _ _ O
is _ _ O
done _ _ O
, _ _ O
person _ _ O
2 _ _ O
will _ _ O
come _ _ O
back _ _ O
. _ _ O
● _ _ O
where _ _ O
do _ _ O
we _ _ O
put _ _ O
person _ _ O
2 _ _ O
's _ _ O
stuff _ _ O
? _ _ O
o _ _ O
on _ _ O
top _ _ O
of _ _ O
the _ _ O
stack _ _ O
of _ _ O
stuff _ _ O
. _ _ O
● _ _ O
the _ _ O
desk _ _ O
is _ _ O
the _ _ O
registers _ _ O
. _ _ O
● _ _ O
the _ _ O
people _ _ O
are _ _ O
functions _ _ O
. _ _ O
● _ _ O
the _ _ O
stack _ _ O
of _ _ O
stuff _ _ O
is _ _ O
… _ _ O
the _ _ O
stack _ _ O
. _ _ O
P2 _ _ O
P2 _ _ O
P1 _ _ O
32 _ _ O

What _ _ O
's _ _ O
the _ _ O
stack _ _ O
? _ _ O
● _ _ O
it _ _ O
's _ _ O
an _ _ O
area _ _ O
of _ _ O
memory _ _ O
provided _ _ O
to _ _ O
your _ _ O
program _ _ O
by _ _ O
the _ _ O
OS _ _ O
o _ _ O
when _ _ O
your _ _ O
program _ _ O
starts _ _ O
, _ _ O
it _ _ O
's _ _ O
already _ _ O
there _ _ O
● _ _ O
the _ _ O
stack _ _ O
holds _ _ O
information _ _ O
about _ _ O
function _ _ O
calls _ _ O
: _ _ O
o _ _ O
the _ _ O
return _ _ O
address _ _ O
to _ _ O
the _ _ O
caller _ _ O
o _ _ O
copies _ _ O
of _ _ O
registers _ _ O
that _ _ O
we _ _ O
want _ _ O
to _ _ O
change _ _ O
o _ _ O
local _ _ O
variables _ _ O
that _ _ O
ca _ _ O
n't _ _ O
fit _ _ O
in _ _ O
registers _ _ O
● _ _ O
how _ _ O
do _ _ O
we _ _ O
access _ _ O
the _ _ O
stack _ _ O
? _ _ O
o _ _ O
through _ _ O
the _ _ O
stack _ _ O
pointer _ _ O
( _ _ O
sp _ _ O
) _ _ O
register _ _ O
o _ _ O
this _ _ O
register _ _ O
is _ _ O
initialized _ _ O
for _ _ O
you _ _ O
by _ _ O
the _ _ O
OS _ _ O
too _ _ O
Stack _ _ O
Memory _ _ O
Program _ _ O
33 _ _ O

The _ _ O
stack _ _ O
pointer _ _ O
( _ _ O
animated _ _ O
) _ _ O
● _ _ O
let _ _ O
's _ _ O
say _ _ O
sp _ _ O
starts _ _ O
at _ _ O
the _ _ O
address _ _ O
0xF000 _ _ O
● _ _ O
we _ _ O
want _ _ O
to _ _ O
push _ _ O
something _ _ O
on _ _ O
the _ _ O
stack _ _ O
● _ _ O
the _ _ O
first _ _ O
thing _ _ O
we _ _ O
'll _ _ O
do _ _ O
is _ _ O
move _ _ O
sp _ _ O
to _ _ O
the _ _ O
next _ _ O
available _ _ O
slot _ _ O
● _ _ O
clearly _ _ O
, _ _ O
that _ _ O
's _ _ O
the _ _ O
previous _ _ O
address _ _ O
... _ _ O
o _ _ O
subtract _ _ O
4 _ _ O
from _ _ O
sp _ _ O
0xF008 _ _ O
● _ _ O
then _ _ O
, _ _ O
we _ _ O
can _ _ O
store _ _ O
something _ _ O
in _ _ O
the _ _ O
memory _ _ O
that _ _ O
sp _ _ O
points _ _ O
to _ _ O
. _ _ O
0xF004 _ _ O
sp _ _ O
... _ _ O
0x00000000 _ _ O
0x00000000 _ _ O
0xF000 _ _ O
0x00000000 _ _ O
0xEFFC _ _ O
0xC0DEBEEF _ _ O
0x00000000 _ _ O
34 _ _ O

Doing _ _ O
that _ _ O
in _ _ O
MIPS _ _ O
( _ _ O
animated _ _ O
) _ _ O
● _ _ O
say _ _ O
ra _ _ O
= _ _ O
0xC0DEBEEF _ _ O
● _ _ O
first _ _ O
: _ _ O
move _ _ O
the _ _ O
stack _ _ O
pointer _ _ O
down _ _ O
( _ _ O
up _ _ O
? _ _ O
) _ _ O
: _ _ O
sub _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
4 _ _ O
... _ _ O
... _ _ O
0xF008 _ _ O
0x00000000 _ _ O
● _ _ O
then _ _ O
, _ _ O
store _ _ O
ra _ _ O
at _ _ O
the _ _ O
address _ _ O
that _ _ O
sp _ _ O
holds _ _ O
. _ _ O
sw _ _ O
ra _ _ O
, _ _ O
( _ _ O
sp _ _ O
) _ _ O
● _ _ O
now _ _ O
the _ _ O
value _ _ O
in _ _ O
ra _ _ O
is _ _ O
saved _ _ O
on _ _ O
the _ _ O
stack _ _ O
, _ _ O
and _ _ O
we _ _ O
can _ _ O
get _ _ O
it _ _ O
back _ _ O
later _ _ O
. _ _ O
o _ _ O
and _ _ O
we _ _ O
can _ _ O
store _ _ O
as _ _ O
many _ _ O
return _ _ O
addresses _ _ O
as _ _ O
we _ _ O
want _ _ O
! _ _ O
sp _ _ O
0xF004 _ _ O
0x00000000 _ _ O
0xF000 _ _ O
0x00000000 _ _ O
0xEFFC _ _ O
0xC0DEBEEF _ _ O
0x00000000 _ _ O
35 _ _ O

Going _ _ O
the _ _ O
other _ _ O
direction _ _ O
( _ _ O
animated _ _ O
) _ _ O
● _ _ O
now _ _ O
we _ _ O
wanna _ _ O
pop _ _ O
the _ _ O
value _ _ O
off _ _ O
the _ _ O
stack _ _ O
and _ _ O
put _ _ O
it _ _ O
back _ _ O
in _ _ O
ra _ _ O
● _ _ O
we _ _ O
do _ _ O
the _ _ O
same _ _ O
things _ _ O
, _ _ O
but _ _ O
in _ _ O
reverse _ _ O
ra _ _ O
0xC0DEBEEF _ _ O
0xABAD1DEA _ _ O
lw _ _ O
ra _ _ O
, _ _ O
( _ _ O
sp _ _ O
) _ _ O
... _ _ O
... _ _ O
0xF008 _ _ O
0x00000000 _ _ O
0xF004 _ _ O
0x00000000 _ _ O
0xF000 _ _ O
0x00000000 _ _ O
● _ _ O
then _ _ O
, _ _ O
we _ _ O
move _ _ O
the _ _ O
stack _ _ O
pointer _ _ O
… _ _ O
up _ _ O
? _ _ O
down _ _ O
? _ _ O
whatever _ _ O
add _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
4 _ _ O
● _ _ O
now _ _ O
we _ _ O
got _ _ O
back _ _ O
the _ _ O
old _ _ O
value _ _ O
of _ _ O
ra _ _ O
! _ _ O
● _ _ O
and _ _ O
sp _ _ O
is _ _ O
back _ _ O
where _ _ O
it _ _ O
was _ _ O
before _ _ O
! _ _ O
sp _ _ O
0xEFFC _ _ O
0xC0DEBEEF _ _ O
36 _ _ O

Shortening _ _ O
the _ _ O
pushes _ _ O
and _ _ O
pops _ _ O
● _ _ O
the _ _ O
push _ _ O
and _ _ O
pop _ _ O
operations _ _ O
always _ _ O
look _ _ O
and _ _ O
work _ _ O
the _ _ O
same _ _ O
● _ _ O
since _ _ O
you _ _ O
'll _ _ O
be _ _ O
using _ _ O
them _ _ O
in _ _ O
most _ _ O
functions _ _ O
, _ _ O
we _ _ O
shortened _ _ O
em _ _ O
● _ _ O
if _ _ O
you _ _ O
write _ _ O
push _ _ O
ra _ _ O
or _ _ O
pop _ _ O
ra _ _ O
, _ _ O
it _ _ O
'll _ _ O
do _ _ O
these _ _ O
things _ _ O
for _ _ O
you _ _ O
! _ _ O
push _ _ O
ra _ _ O
subi _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
4 _ _ O
sw _ _ O
ra _ _ O
, _ _ O
( _ _ O
sp _ _ O
) _ _ O
pop _ _ O
lw _ _ O
ra _ _ O
, _ _ O
( _ _ O
sp _ _ O
) _ _ O
addi _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
4 _ _ O
ra _ _ O
these _ _ O
are _ _ O
pseudo-ops _ _ O
: _ _ O
fake _ _ O
instructions _ _ O
to _ _ O
shorten _ _ O
common _ _ O
tasks _ _ O
these _ _ O
can _ _ O
be _ _ O
used _ _ O
with _ _ O
ANY _ _ O
register _ _ O
, _ _ O
not _ _ O
just _ _ O
ra _ _ O
! _ _ O
37 _ _ O

Toes _ _ O
= _ _ O
protected _ _ O
sp _ _ O
0x8004 _ _ O
stuff _ _ O
PC _ _ O
ra _ _ O
0x8000 _ _ O
0x0000 _ _ O
After _ _ O
jal _ _ O
fork _ _ O
: _ _ O
0x8020 _ _ O
0x8004 _ _ O
Then _ _ O
we _ _ O
push _ _ O
ra _ _ O
on _ _ O
the _ _ O
stack _ _ O
! _ _ O
After _ _ O
jal _ _ O
spoon _ _ O
: _ _ O
0x8040 _ _ O
0x802C _ _ O
After _ _ O
spoon _ _ O
jr _ _ O
ra _ _ O
: _ _ O
0x802C _ _ O
0x802C _ _ O
Then _ _ O
we _ _ O
pop _ _ O
ra _ _ O
off _ _ O
the _ _ O
stack _ _ O
! _ _ O
Before _ _ O
fork _ _ O
jr _ _ O
ra _ _ O
: _ _ O
0x8034 _ _ O
0x8004 _ _ O
After _ _ O
fork _ _ O
jr _ _ O
ra _ _ O
: _ _ O
0x8004 _ _ O
0x8004 _ _ O
0x8000 _ _ O
jal _ _ O
fork _ _ O
: _ _ O
fork _ _ O
0x8020 _ _ O
push _ _ O
ra _ _ O
0x8028 _ _ O
jal _ _ O
spoon _ _ O
0x802C _ _ O
pop _ _ O
0x8034 _ _ O
jr _ _ O
spoon _ _ O
: _ _ O
ra _ _ O
ra _ _ O
0x8040 _ _ O
jr _ _ O
ra _ _ O
38 _ _ O

Writing _ _ O
a _ _ O
simple _ _ O
function _ _ O
● _ _ O
Function _ _ O
calling _ _ O
conventions _ _ O
follows _ _ O
a _ _ O
simple _ _ O
structure _ _ O
: _ _ O
1 _ _ O
. _ _ O
Give _ _ O
it _ _ O
a _ _ O
name _ _ O
( _ _ O
label _ _ O
) _ _ O
. _ _ O
spoon _ _ O
: _ _ O
2 _ _ O
. _ _ O
Save _ _ O
ra _ _ O
to _ _ O
the _ _ O
stack _ _ O
. _ _ O
3 _ _ O
. _ _ O
Do _ _ O
whatever _ _ O
. _ _ O
4 _ _ O
. _ _ O
Load _ _ O
ra _ _ O
from _ _ O
the _ _ O
stack _ _ O
. _ _ O
5 _ _ O
. _ _ O
Return _ _ O
! _ _ O
push _ _ O
ra _ _ O
your _ _ O
code _ _ O
goes _ _ O
here _ _ O
pop _ _ O
jr _ _ O
ra _ _ O
ra _ _ O
● _ _ O
Push _ _ O
everything _ _ O
you _ _ O
need _ _ O
! _ _ O
Pop _ _ O
it _ _ O
back _ _ O
in _ _ O
reverse _ _ O
order _ _ O
at _ _ O
the _ _ O
end _ _ O
! _ _ O
39 _ _ O

What _ _ O
about _ _ O
other _ _ O
registers _ _ O
? _ _ O
● _ _ O
Function _ _ O
calling _ _ O
conventions _ _ O
follows _ _ O
a _ _ O
simple _ _ O
structure _ _ O
: _ _ O
1 _ _ O
. _ _ O
Give _ _ O
it _ _ O
a _ _ O
name _ _ O
( _ _ O
label _ _ O
) _ _ O
. _ _ O
spoon _ _ O
: _ _ O
2a _ _ O
. _ _ O
Save _ _ O
ra _ _ O
to _ _ O
the _ _ O
stack _ _ O
. _ _ O
2b _ _ O
. _ _ O
Save _ _ O
s0 _ _ O
to _ _ O
the _ _ O
stack _ _ O
. _ _ O
3 _ _ O
. _ _ O
Do _ _ O
whatever _ _ O
. _ _ O
4a _ _ O
. _ _ O
Load _ _ O
s0 _ _ O
from _ _ O
the _ _ O
stack _ _ O
. _ _ O
4b _ _ O
. _ _ O
Load _ _ O
ra _ _ O
from _ _ O
the _ _ O
stack _ _ O
. _ _ O
5 _ _ O
. _ _ O
Return _ _ O
! _ _ O
push _ _ O
ra _ _ O
push _ _ O
s0 _ _ O
your _ _ O
code _ _ O
goes _ _ O
here _ _ O
pop _ _ O
s0 _ _ O
pop _ _ O
ra _ _ O
jr _ _ O
ra _ _ O
● _ _ O
Push _ _ O
everything _ _ O
you _ _ O
need _ _ O
! _ _ O
Pop _ _ O
it _ _ O
back _ _ O
in _ _ O
reverse _ _ O
order _ _ O
at _ _ O
the _ _ O
end _ _ O
! _ _ O
40 _ _ O

it _ _ O
's _ _ O
really _ _ O
simple _ _ O
● _ _ O
treat _ _ O
pushes _ _ O
and _ _ O
pops _ _ O
like _ _ O
the _ _ O
{ _ _ O
braces _ _ O
} _ _ O
around _ _ O
a _ _ O
function _ _ O
spoon _ _ O
: _ _ O
pushes _ _ O
come _ _ O
at _ _ O
the _ _ O
push _ _ O
ra _ _ O
# _ _ O
{ _ _ O
beginnings _ _ O
of _ _ O
functions _ _ O
# _ _ O
800 _ _ O
instructions _ _ O
# _ _ O
so _ _ O
much _ _ O
stuff _ _ O
omg _ _ O
pops _ _ O
come _ _ O
at _ _ O
the _ _ O
end _ _ O
pop _ _ O
ra _ _ O
# _ _ O
} _ _ O
jr _ _ O
ra _ _ O
that _ _ O
is _ _ O
it _ _ O
, _ _ O
seriously _ _ O
, _ _ O
do _ _ O
n't _ _ O
make _ _ O
it _ _ O
more _ _ O
complicated _ _ O
never _ _ O
push _ _ O
or _ _ O
pop _ _ O
anywhere _ _ O
else _ _ O
please _ _ O
41 _ _ O

The _ _ O
s _ _ O
register _ _ O
contract _ _ O
● _ _ O
if _ _ O
you _ _ O
want _ _ O
to _ _ O
use _ _ O
an _ _ O
s _ _ O
register _ _ O
… _ _ O
● _ _ O
you _ _ O
must _ _ O
save _ _ O
and _ _ O
restore _ _ O
it _ _ O
, _ _ O
just _ _ O
like _ _ O
ra _ _ O
. _ _ O
my_func _ _ O
: _ _ O
push _ _ O
ra _ _ O
push _ _ O
s0 _ _ O
moving _ _ O
the _ _ O
papers _ _ O
off _ _ O
the _ _ O
desk _ _ O
code _ _ O
that _ _ O
uses _ _ O
s0 _ _ O
! _ _ O
it _ _ O
's _ _ O
fine _ _ O
! _ _ O
we _ _ O
saved _ _ O
it _ _ O
! _ _ O
pop _ _ O
pop _ _ O
jr _ _ O
s0 _ _ O
ra _ _ O
ra _ _ O
putting _ _ O
the _ _ O
papers _ _ O
back _ _ O
the _ _ O
pops _ _ O
happen _ _ O
in _ _ O
reverse _ _ O
order _ _ O
! _ _ O
42 _ _ O

Oh _ _ O
, _ _ O
and _ _ O
… _ _ O
● _ _ O
You _ _ O
must _ _ O
always _ _ O
pop _ _ O
the _ _ O
same _ _ O
number _ _ O
of _ _ O
registers _ _ O
that _ _ O
you _ _ O
push _ _ O
. _ _ O
● _ _ O
To _ _ O
make _ _ O
this _ _ O
simpler _ _ O
for _ _ O
yourself _ _ O
… _ _ O
make _ _ O
a _ _ O
label _ _ O
before _ _ O
the _ _ O
pops _ _ O
. _ _ O
o _ _ O
then _ _ O
you _ _ O
can _ _ O
leave _ _ O
the _ _ O
function _ _ O
by _ _ O
jumping _ _ O
/ _ _ O
branching _ _ O
there _ _ O
. _ _ O
● _ _ O
Remember _ _ O
: _ _ O
These _ _ O
are _ _ O
the _ _ O
{ _ _ O
braces _ _ O
} _ _ O
o _ _ O
So _ _ O
… _ _ O
only _ _ O
push _ _ O
in _ _ O
the _ _ O
top _ _ O
and _ _ O
pop _ _ O
in _ _ O
the _ _ O
bottom _ _ O
of _ _ O
the _ _ O
function _ _ O
! _ _ O
▪ _ _ O
Only _ _ O
! _ _ O
my_func _ _ O
: _ _ O
push _ _ O
ra _ _ O
push _ _ O
s0 _ _ O
... _ _ O
bge _ _ O
... _ _ O
b _ _ O
exit_func _ _ O
... _ _ O
exit_func _ _ O
: _ _ O
pop _ _ O
s0 _ _ O
pop _ _ O
ra _ _ O
jr _ _ O
ra _ _ O
43 _ _ O

Summing _ _ O
it _ _ O
up _ _ O
: _ _ O
Terminology _ _ O
myFunction _ _ O
: _ _ O
push _ _ O
ra _ _ O
Activation _ _ O
Frame _ _ O
push _ _ O
s0 _ _ O
Contains _ _ O
: _ _ O
⚫ _ _ O
Arguments _ _ O
( _ _ O
that _ _ O
are _ _ O
n’t _ _ O
in _ _ O
registers _ _ O
) _ _ O
⚫ _ _ O
Saved _ _ O
Registers _ _ O
( _ _ O
ra _ _ O
, _ _ O
s0 _ _ O
, _ _ O
etc _ _ O
) _ _ O
⚫ _ _ O
Local _ _ O
Variables _ _ O
# _ _ O
my _ _ O
code _ _ O
pop _ _ O
s0 _ _ O
Function _ _ O
Prologue _ _ O
pop _ _ O
ra _ _ O
jr _ _ O
ra _ _ O
Function _ _ O
Epilogue _ _ O
0xffff _ _ O
Stack _ _ O
Memory _ _ O
Heap _ _ O
Program _ _ O
0x0000 _ _ O
44 _ _ O

Side _ _ O
Stacking _ _ O
( _ _ O
on _ _ O
your _ _ O
own _ _ O
) _ _ O
45 _ _ O

Sooooo _ _ O
… _ _ O
.. _ _ O
● _ _ O
Why _ _ O
this _ _ O
mysterious _ _ O
behavior _ _ O
? _ _ O
o _ _ O
“ _ _ O
Allocating _ _ O
” _ _ O
on _ _ O
the _ _ O
stack _ _ O
( _ _ O
making _ _ O
room _ _ O
) _ _ O
has _ _ O
you _ _ O
subtract _ _ O
from _ _ O
its _ _ O
base _ _ O
address _ _ O
. _ _ O
● _ _ O
Let _ _ O
’s _ _ O
visit _ _ O
this _ _ O
from _ _ O
a _ _ O
different _ _ O
direction _ _ O
. _ _ O
● _ _ O
Let _ _ O
’s _ _ O
consider _ _ O
… _ _ O
the _ _ O
problem _ _ O
itself _ _ O
. _ _ O
o _ _ O
And _ _ O
how _ _ O
we _ _ O
might _ _ O
solve _ _ O
it _ _ O
. _ _ O
46 _ _ O

The _ _ O
Problem _ _ O
● _ _ O
We _ _ O
have _ _ O
a _ _ O
program _ _ O
. _ _ O
It _ _ O
uses _ _ O
memory _ _ O
. _ _ O
● _ _ O
We _ _ O
do _ _ O
n’t _ _ O
know _ _ O
exactly _ _ O
how _ _ O
much _ _ O
memory _ _ O
we _ _ O
need _ _ O
. _ _ O
o _ _ O
It _ _ O
may _ _ O
depend _ _ O
on _ _ O
how _ _ O
long _ _ O
the _ _ O
program _ _ O
runs _ _ O
. _ _ O
o _ _ O
Or _ _ O
the _ _ O
size _ _ O
of _ _ O
the _ _ O
data _ _ O
it _ _ O
is _ _ O
working _ _ O
on _ _ O
( _ _ O
arbitrarily _ _ O
specified _ _ O
by _ _ O
a _ _ O
human _ _ O
being _ _ O
, _ _ O
perhaps _ _ O
) _ _ O
o _ _ O
Maybe _ _ O
our _ _ O
program _ _ O
responds _ _ O
to _ _ O
the _ _ O
available _ _ O
memory _ _ O
by _ _ O
choosing _ _ O
a _ _ O
different _ _ O
algorithm _ _ O
when _ _ O
it _ _ O
has _ _ O
more _ _ O
or _ _ O
less _ _ O
. _ _ O
● _ _ O
Either _ _ O
way _ _ O
, _ _ O
a _ _ O
program _ _ O
does _ _ O
not _ _ O
have _ _ O
a _ _ O
static _ _ O
allocation _ _ O
of _ _ O
memory _ _ O
. _ _ O
● _ _ O
How _ _ O
do _ _ O
we _ _ O
allow _ _ O
a _ _ O
program _ _ O
to _ _ O
allocate _ _ O
memory _ _ O
on-demand _ _ O
? _ _ O
47 _ _ O

Our _ _ O
Example _ _ O
: _ _ O
Video _ _ O
Editor _ _ O
● _ _ O
Let _ _ O
’s _ _ O
consider _ _ O
a _ _ O
video _ _ O
editing _ _ O
program _ _ O
. _ _ O
o _ _ O
But _ _ O
thankfully _ _ O
ignore _ _ O
all _ _ O
of _ _ O
the _ _ O
actual _ _ O
video _ _ O
details _ _ O
! _ _ O
● _ _ O
Data _ _ O
is _ _ O
large _ _ O
, _ _ O
and _ _ O
the _ _ O
memory _ _ O
usage _ _ O
is _ _ O
relative _ _ O
to _ _ O
the _ _ O
size _ _ O
of _ _ O
our _ _ O
video _ _ O
. _ _ O
● _ _ O
We _ _ O
want _ _ O
memory _ _ O
to _ _ O
be _ _ O
continuous _ _ O
. _ _ O
o _ _ O
Could _ _ O
you _ _ O
imagine _ _ O
if _ _ O
data _ _ O
were _ _ O
all _ _ O
broken _ _ O
up _ _ O
? _ _ O
o _ _ O
Your _ _ O
program _ _ O
would _ _ O
be _ _ O
difficult _ _ O
to _ _ O
code _ _ O
if _ _ O
an _ _ O
array _ _ O
was _ _ O
broken _ _ O
up _ _ O
. _ _ O
▪ _ _ O
Our _ _ O
array _ _ O
addressing _ _ O
math _ _ O
would _ _ O
no _ _ O
longer _ _ O
be _ _ O
general _ _ O
and _ _ O
would _ _ O
cease _ _ O
to _ _ O
work _ _ O
Memory _ _ O
well _ _ O
. _ _ O
( _ _ O
You _ _ O
’d _ _ O
have _ _ O
multiple _ _ O
array _ _ O
base _ _ O
addresses _ _ O
) _ _ O
Program _ _ O
48 _ _ O

Allocating _ _ O
Memory _ _ O
● _ _ O
You _ _ O
’ll _ _ O
learn _ _ O
a _ _ O
lot _ _ O
more _ _ O
about _ _ O
this _ _ O
in _ _ O
CS _ _ O
449 _ _ O
o _ _ O
But _ _ O
it _ _ O
’s _ _ O
worth _ _ O
sequence _ _ O
breaking _ _ O
and _ _ O
talking _ _ O
about _ _ O
it _ _ O
now _ _ O
● _ _ O
We _ _ O
will _ _ O
maintain _ _ O
a _ _ O
section _ _ O
of _ _ O
memory _ _ O
: _ _ O
the _ _ O
heap _ _ O
. _ _ O
o _ _ O
The _ _ O
heap _ _ O
is _ _ O
a _ _ O
section _ _ O
of _ _ O
memory _ _ O
used _ _ O
for _ _ O
dynamic _ _ O
memory _ _ O
. _ _ O
o _ _ O
Dynamic _ _ O
memory _ _ O
is _ _ O
memory _ _ O
that _ _ O
is _ _ O
allocated _ _ O
during _ _ O
the _ _ O
runtime _ _ O
of _ _ O
a _ _ O
program _ _ O
and _ _ O
may _ _ O
be _ _ O
reclaimed _ _ O
later _ _ O
. _ _ O
● _ _ O
When _ _ O
we _ _ O
allocate _ _ O
memory _ _ O
, _ _ O
we _ _ O
add _ _ O
it _ _ O
to _ _ O
the _ _ O
end _ _ O
of _ _ O
the _ _ O
heap _ _ O
. _ _ O
o _ _ O
It _ _ O
’s _ _ O
like _ _ O
appending _ _ O
to _ _ O
an _ _ O
array _ _ O
. _ _ O
o _ _ O
Look _ _ O
at _ _ O
it _ _ O
go _ _ O
! _ _ O
0x46f0 _ _ O
Memory _ _ O
0x4100 _ _ O
0x4000 _ _ O
Heap _ _ O
Program _ _ O
0x0000 _ _ O
49 _ _ O

Revisiting _ _ O
Functions _ _ O
: _ _ O
A _ _ O
Problem _ _ O
Arises _ _ O
● _ _ O
Now _ _ O
, _ _ O
consider _ _ O
functions _ _ O
. _ _ O
● _ _ O
When _ _ O
we _ _ O
call _ _ O
a _ _ O
function _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
remember _ _ O
where _ _ O
we _ _ O
were _ _ O
. _ _ O
o _ _ O
This _ _ O
is _ _ O
stored _ _ O
in _ _ O
the _ _ O
$ _ _ O
ra _ _ O
register _ _ O
. _ _ O
o _ _ O
But _ _ O
if _ _ O
we _ _ O
call _ _ O
a _ _ O
function _ _ O
twice _ _ O
, _ _ O
what _ _ O
happens _ _ O
to _ _ O
$ _ _ O
ra _ _ O
? _ _ O
▪ _ _ O
It _ _ O
is _ _ O
overwritten _ _ O
, _ _ O
and _ _ O
our _ _ O
first _ _ O
value _ _ O
in _ _ O
$ _ _ O
ra _ _ O
is _ _ O
lost _ _ O
. _ _ O
▪ _ _ O
This _ _ O
means _ _ O
after _ _ O
our _ _ O
second _ _ O
function _ _ O
is _ _ O
called _ _ O
, _ _ O
the _ _ O
first _ _ O
function _ _ O
will _ _ O
now _ _ O
be _ _ O
lost _ _ O
, _ _ O
and _ _ O
it _ _ O
will _ _ O
return _ _ O
to _ _ O
itself _ _ O
. _ _ O
( _ _ O
Refer _ _ O
to _ _ O
the _ _ O
previous _ _ O
slides _ _ O
) _ _ O
● _ _ O
What _ _ O
are _ _ O
our _ _ O
strategies _ _ O
for _ _ O
remembering _ _ O
ra _ _ O
? _ _ O
50 _ _ O

Remembering _ _ O
RA _ _ O
● _ _ O
Bad _ _ O
Idea _ _ O
# _ _ O
1 _ _ O
: _ _ O
Place _ _ O
it _ _ O
in _ _ O
another _ _ O
register _ _ O
myFunction _ _ O
: _ _ O
move _ _ O
t0 _ _ O
, _ _ O
ra _ _ O
# _ _ O
overwrites _ _ O
ra _ _ O
! _ _ O
jal _ _ O
myOtherFunction _ _ O
# _ _ O
it _ _ O
’s _ _ O
ok _ _ O
though _ _ O
: _ _ O
move _ _ O
ra _ _ O
, _ _ O
t0 _ _ O
jr _ _ O
ra _ _ O
However _ _ O
: _ _ O
• _ _ O
What _ _ O
if _ _ O
myOtherFunction _ _ O
uses _ _ O
t0 _ _ O
? _ _ O
• _ _ O
Ok _ _ O
, _ _ O
t0 _ _ O
is _ _ O
n’t _ _ O
preserved _ _ O
, _ _ O
so _ _ O
let _ _ O
’s _ _ O
use _ _ O
s0 _ _ O
. _ _ O
• _ _ O
Wait _ _ O
… _ _ O
we _ _ O
need _ _ O
to _ _ O
preserve _ _ O
s0 _ _ O
… _ _ O
• _ _ O
Where _ _ O
do _ _ O
we _ _ O
put _ _ O
that _ _ O
? _ _ O
? _ _ O
s1 _ _ O
? _ _ O
? _ _ O
? _ _ O
• _ _ O
Wait _ _ O
… _ _ O
we _ _ O
need _ _ O
to _ _ O
preserve _ _ O
s1 _ _ O
! _ _ O
! _ _ O
• _ _ O
We _ _ O
will _ _ O
run _ _ O
out _ _ O
of _ _ O
saved _ _ O
registers _ _ O
and _ _ O
we _ _ O
can _ _ O
not _ _ O
trust _ _ O
unsaved _ _ O
registers _ _ O
. _ _ O
( _ _ O
other _ _ O
functions _ _ O
may _ _ O
overwrite _ _ O
them _ _ O
) _ _ O
• _ _ O
Therefore _ _ O
, _ _ O
we _ _ O
need _ _ O
memory _ _ O
. _ _ O
51 _ _ O

Remembering _ _ O
RA _ _ O
● _ _ O
We _ _ O
need _ _ O
memory _ _ O
. _ _ O
We _ _ O
have _ _ O
that _ _ O
heap _ _ O
thing _ _ O
. _ _ O
● _ _ O
So _ _ O
ca _ _ O
n’t _ _ O
we _ _ O
just _ _ O
allocate _ _ O
some _ _ O
on _ _ O
the _ _ O
heap _ _ O
? _ _ O
● _ _ O
Sure _ _ O
can _ _ O
. _ _ O
But _ _ O
it _ _ O
is _ _ O
Bad _ _ O
Idea _ _ O
# _ _ O
2 _ _ O
. _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
that _ _ O
function _ _ O
allocates _ _ O
memory _ _ O
? _ _ O
● _ _ O
And _ _ O
then _ _ O
calls _ _ O
another _ _ O
function _ _ O
. _ _ O
● _ _ O
And _ _ O
then _ _ O
we _ _ O
return _ _ O
… _ _ O
● _ _ O
And _ _ O
return _ _ O
from _ _ O
the _ _ O
first _ _ O
function _ _ O
… _ _ O
● _ _ O
Leaving _ _ O
gaps _ _ O
in _ _ O
our _ _ O
memory _ _ O
! _ _ O
Memory _ _ O
0x4000 _ _ O
Heap _ _ O
Program _ _ O
0x0000 _ _ O
52 _ _ O

Let _ _ O
’s _ _ O
Design _ _ O
a _ _ O
Memory _ _ O
Layout _ _ O
( _ _ O
kinda _ _ O
) _ _ O
● _ _ O
Our _ _ O
video _ _ O
editing _ _ O
application _ _ O
wants _ _ O
to _ _ O
use _ _ O
large _ _ O
, _ _ O
continuous _ _ O
memory _ _ O
regions _ _ O
. _ _ O
o _ _ O
Videos _ _ O
are _ _ O
big _ _ O
things _ _ O
! _ _ O
( _ _ O
Continuous _ _ O
memory _ _ O
makes _ _ O
things _ _ O
easier _ _ O
/ _ _ O
faster _ _ O
… _ _ O
future _ _ O
courses _ _ O
will _ _ O
convince _ _ O
you _ _ O
. _ _ O
) _ _ O
● _ _ O
We _ _ O
have _ _ O
very _ _ O
few _ _ O
registers _ _ O
, _ _ O
and _ _ O
need _ _ O
to _ _ O
remember _ _ O
ra _ _ O
o _ _ O
So _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
place _ _ O
ra _ _ O
in _ _ O
memory _ _ O
to _ _ O
recall _ _ O
it _ _ O
before _ _ O
we _ _ O
jr _ _ O
ra _ _ O
● _ _ O
However _ _ O
, _ _ O
placing _ _ O
it _ _ O
with _ _ O
other _ _ O
program _ _ O
memory _ _ O
creates _ _ O
gaps _ _ O
o _ _ O
This _ _ O
is _ _ O
very _ _ O
very _ _ O
trash _ _ O
! _ _ O
! _ _ O
● _ _ O
How _ _ O
do _ _ O
we _ _ O
solve _ _ O
this _ _ O
. _ _ O
o _ _ O
Occam _ _ O
’s _ _ O
Razor _ _ O
to _ _ O
the _ _ O
rescue _ _ O
… _ _ O
and _ _ O
it _ _ O
will _ _ O
create _ _ O
a _ _ O
very _ _ O
weird _ _ O
situation _ _ O
. _ _ O
o _ _ O
One _ _ O
that _ _ O
involves _ _ O
subtracting _ _ O
to _ _ O
allocate _ _ O
… _ _ O
53 _ _ O

Solving _ _ O
our _ _ O
Problem _ _ O
: _ _ O
Step _ _ O
1 _ _ O
● _ _ O
How _ _ O
can _ _ O
we _ _ O
use _ _ O
memory _ _ O
, _ _ O
but _ _ O
not _ _ O
create _ _ O
gaps _ _ O
? _ _ O
● _ _ O
Good _ _ O
[ _ _ O
rational _ _ O
] _ _ O
Idea _ _ O
: _ _ O
Maintain _ _ O
two _ _ O
dynamic _ _ O
memory _ _ O
sections _ _ O
. _ _ O
● _ _ O
We _ _ O
call _ _ O
our _ _ O
function _ _ O
. _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
that _ _ O
function _ _ O
allocates _ _ O
memory _ _ O
? _ _ O
● _ _ O
And _ _ O
then _ _ O
calls _ _ O
another _ _ O
function _ _ O
. _ _ O
● _ _ O
And _ _ O
then _ _ O
we _ _ O
return _ _ O
… _ _ O
● _ _ O
And _ _ O
return _ _ O
from _ _ O
the _ _ O
first _ _ O
function _ _ O
… _ _ O
WHEW _ _ O
! _ _ O
No _ _ O
gaps _ _ O
. _ _ O
● _ _ O
( _ _ O
Ok _ _ O
, _ _ O
but _ _ O
now _ _ O
we _ _ O
start _ _ O
editing _ _ O
a _ _ O
LARGE _ _ O
video _ _ O
… _ _ O
) _ _ O
o _ _ O
Uh _ _ O
oh _ _ O
! _ _ O
We _ _ O
’ve _ _ O
lost _ _ O
our _ _ O
$ _ _ O
ra _ _ O
Stack _ _ O
0x8000 _ _ O
Memory _ _ O
0x4000 _ _ O
Heap _ _ O
Program _ _ O
0x0000 _ _ O
54 _ _ O

Solving _ _ O
our _ _ O
Problem _ _ O
: _ _ O
Step _ _ O
2 _ _ O
● _ _ O
Good _ _ O
[ _ _ O
weird _ _ O
] _ _ O
Idea _ _ O
: _ _ O
Maintain _ _ O
two _ _ O
dynamic _ _ O
memory _ _ O
sections _ _ O
. _ _ O
One _ _ O
of _ _ O
which _ _ O
starts _ _ O
at _ _ O
the _ _ O
highest _ _ O
memory _ _ O
address _ _ O
. _ _ O
Allocate _ _ O
via _ _ O
subtraction _ _ O
( _ _ O
append _ _ O
to _ _ O
bottom _ _ O
) _ _ O
0xfffc _ _ O
● _ _ O
We _ _ O
call _ _ O
our _ _ O
function _ _ O
. _ _ O
0xfff0 _ _ O
Stack _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
that _ _ O
function _ _ O
allocates _ _ O
memory _ _ O
? _ _ O
● _ _ O
And _ _ O
then _ _ O
calls _ _ O
another _ _ O
function _ _ O
. _ _ O
● _ _ O
And _ _ O
then _ _ O
we _ _ O
return _ _ O
… _ _ O
● _ _ O
And _ _ O
return _ _ O
from _ _ O
the _ _ O
first _ _ O
function _ _ O
… _ _ O
No _ _ O
gaps _ _ O
. _ _ O
● _ _ O
As _ _ O
for _ _ O
our _ _ O
large _ _ O
memory _ _ O
case _ _ O
… _ _ O
● _ _ O
It _ _ O
’s _ _ O
fine _ _ O
! _ _ O
( _ _ O
only _ _ O
problem _ _ O
: _ _ O
running _ _ O
out _ _ O
of _ _ O
memory _ _ O
) _ _ O
o _ _ O
But _ _ O
, _ _ O
my _ _ O
goodness _ _ O
, _ _ O
you _ _ O
have _ _ O
a _ _ O
bigger _ _ O
problem _ _ O
, _ _ O
then _ _ O
. _ _ O
Memory _ _ O
0x4000 _ _ O
Heap _ _ O
Program _ _ O
0x0000 _ _ O
55 _ _ O

Solving _ _ O
our _ _ O
Problem _ _ O
: _ _ O
Step _ _ O
2 _ _ O
● _ _ O
Good _ _ O
[ _ _ O
weird _ _ O
] _ _ O
Idea _ _ O
: _ _ O
Maintain _ _ O
two _ _ O
dynamic _ _ O
memory _ _ O
sections _ _ O
. _ _ O
One _ _ O
of _ _ O
which _ _ O
starts _ _ O
at _ _ O
the _ _ O
highest _ _ O
memory _ _ O
address _ _ O
. _ _ O
Allocate _ _ O
via _ _ O
subtraction _ _ O
( _ _ O
append _ _ O
to _ _ O
bottom _ _ O
) _ _ O
0xfffc _ _ O
● _ _ O
We _ _ O
call _ _ O
our _ _ O
function _ _ O
. _ _ O
( _ _ O
subtract _ _ O
$ _ _ O
sp _ _ O
, _ _ O
store _ _ O
) _ _ O
0xfff0 _ _ O
Stack _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
that _ _ O
function _ _ O
allocates _ _ O
memory _ _ O
? _ _ O
● _ _ O
And _ _ O
then _ _ O
calls _ _ O
another _ _ O
function _ _ O
. _ _ O
( _ _ O
sub _ _ O
, _ _ O
store _ _ O
) _ _ O
● _ _ O
And _ _ O
then _ _ O
we _ _ O
return _ _ O
… _ _ O
( _ _ O
load _ _ O
, _ _ O
add _ _ O
to _ _ O
$ _ _ O
sp _ _ O
) _ _ O
● _ _ O
And _ _ O
return _ _ O
from _ _ O
the _ _ O
first _ _ O
function _ _ O
… _ _ O
( _ _ O
load _ _ O
, _ _ O
add _ _ O
$ _ _ O
sp _ _ O
) _ _ O
● _ _ O
Refer _ _ O
to _ _ O
the _ _ O
previous _ _ O
slides _ _ O
on _ _ O
the _ _ O
Stack _ _ O
with _ _ O
this _ _ O
knowledge _ _ O
in _ _ O
your _ _ O
Memory _ _ O
mind _ _ O
. _ _ O
0x4000 _ _ O
Heap _ _ O
Program _ _ O
0x0000 _ _ O
56 _ _ O



