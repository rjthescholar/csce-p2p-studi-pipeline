unlabeled|cs0447|lec0D
-DOCSTART- -X- -X- O

# _ _ O
D _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Adding _ _ O
circuits _ _ O
and _ _ O
Plexers _ _ O
Original _ _ O
slides _ _ O
by _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
Modified _ _ O
with _ _ O
bits _ _ O
from _ _ O
: _ _ O
Bruce _ _ O
Childers _ _ O
, _ _ O
David _ _ O
Wilkinson _ _ O
Luís _ _ O
Oliveira _ _ O
Fall _ _ O
2020 _ _ O

Class _ _ O
announcements _ _ O
● _ _ O
none _ _ O
2 _ _ O

Can _ _ O
I _ _ O
add _ _ O
with _ _ O
transistors _ _ O
? _ _ O
3 _ _ O

Solving _ _ O
a _ _ O
problem _ _ O
● _ _ O
Let _ _ O
’s _ _ O
say _ _ O
we _ _ O
want _ _ O
to _ _ O
create _ _ O
a _ _ O
circuit _ _ O
to _ _ O
add _ _ O
two _ _ O
bits _ _ O
. _ _ O
o _ _ O
How _ _ O
do _ _ O
we _ _ O
do _ _ O
that _ _ O
? _ _ O
● _ _ O
In _ _ O
3 _ _ O
very _ _ O
simple _ _ O
steps _ _ O
: _ _ O
o _ _ O
Create _ _ O
a _ _ O
truth _ _ O
table _ _ O
that _ _ O
accurately _ _ O
represents _ _ O
the _ _ O
problem _ _ O
o _ _ O
Interpret _ _ O
the _ _ O
truth _ _ O
table _ _ O
into _ _ O
a _ _ O
logic _ _ O
function _ _ O
o _ _ O
Translate _ _ O
the _ _ O
function _ _ O
into _ _ O
a _ _ O
circuit _ _ O
4 _ _ O

The _ _ O
Tables _ _ O
of _ _ O
Truth _ _ O
● _ _ O
let _ _ O
's _ _ O
try _ _ O
to _ _ O
come _ _ O
up _ _ O
with _ _ O
a _ _ O
truth _ _ O
table _ _ O
for _ _ O
adding _ _ O
two _ _ O
bits _ _ O
● _ _ O
each _ _ O
column _ _ O
will _ _ O
hold _ _ O
1 _ _ O
bit _ _ O
let _ _ O
's _ _ O
name _ _ O
the _ _ O
A _ _ O
B _ _ O
0 _ _ O
0 _ _ O
for _ _ O
the _ _ O
input _ _ O
values _ _ O
, _ _ O
0 _ _ O
1 _ _ O
we _ _ O
count _ _ O
up _ _ O
in _ _ O
1 _ _ O
0 _ _ O
binary _ _ O
1 _ _ O
1 _ _ O
let _ _ O
's _ _ O
name _ _ O
the _ _ O
inputs _ _ O
A _ _ O
and _ _ O
B _ _ O
C _ _ O
S _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
outputs _ _ O
C _ _ O
and _ _ O
S _ _ O
, _ _ O
for _ _ O
Carry _ _ O
and _ _ O
Sum _ _ O
now _ _ O
let _ _ O
's _ _ O
fill _ _ O
in _ _ O
the _ _ O
output _ _ O
values _ _ O
hey _ _ O
, _ _ O
this _ _ O
C _ _ O
column _ _ O
looks _ _ O
familiar _ _ O
… _ _ O
so _ _ O
does _ _ O
the _ _ O
S _ _ O
column _ _ O
great _ _ O
! _ _ O
But _ _ O
this _ _ O
is _ _ O
wrong _ _ O
. _ _ O
5 _ _ O

Half-truth _ _ O
tables _ _ O
● _ _ O
what _ _ O
we _ _ O
just _ _ O
made _ _ O
was _ _ O
a _ _ O
half-adder _ _ O
● _ _ O
it _ _ O
has _ _ O
a _ _ O
carry _ _ O
output _ _ O
but _ _ O
not _ _ O
a _ _ O
carry _ _ O
input _ _ O
o _ _ O
( _ _ O
which _ _ O
might _ _ O
be _ _ O
useful _ _ O
for _ _ O
the _ _ O
lowest _ _ O
bit _ _ O
) _ _ O
● _ _ O
to _ _ O
make _ _ O
a _ _ O
full _ _ O
adder _ _ O
, _ _ O
we _ _ O
need _ _ O
3 _ _ O
input _ _ O
bits _ _ O
Co _ _ O
C _ _ O
i _ _ O
00111 _ _ O
110 _ _ O
A _ _ O
1011 _ _ O
0010 _ _ O
B _ _ O
+0010 _ _ O
1111 _ _ O
1110 _ _ O
0001 _ _ O
S _ _ O
Ci _ _ O
A _ _ O
B _ _ O
Co _ _ O
S _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
6 _ _ O

The _ _ O
logic _ _ O
of _ _ O
it _ _ O
all _ _ O
● _ _ O
it _ _ O
looks _ _ O
a _ _ O
little _ _ O
messy _ _ O
, _ _ O
but _ _ O
it _ _ O
kinda _ _ O
makes _ _ O
sense _ _ O
if _ _ O
you _ _ O
think _ _ O
of _ _ O
it _ _ O
like _ _ O
this _ _ O
: _ _ O
o _ _ O
it _ _ O
counts _ _ O
how _ _ O
many _ _ O
input _ _ O
bits _ _ O
are _ _ O
" _ _ O
1 _ _ O
" _ _ O
o _ _ O
Co _ _ O
and _ _ O
S _ _ O
are _ _ O
a _ _ O
2-bit _ _ O
number _ _ O
! _ _ O
● _ _ O
if _ _ O
we _ _ O
look _ _ O
at _ _ O
the _ _ O
outputs _ _ O
in _ _ O
isolation _ _ O
: _ _ O
o _ _ O
S _ _ O
is _ _ O
1 _ _ O
if _ _ O
we _ _ O
have _ _ O
an _ _ O
odd _ _ O
number _ _ O
of _ _ O
" _ _ O
1s _ _ O
" _ _ O
o _ _ O
Co _ _ O
is _ _ O
1 _ _ O
if _ _ O
we _ _ O
have _ _ O
2 _ _ O
or _ _ O
3 _ _ O
" _ _ O
1s _ _ O
" _ _ O
● _ _ O
it _ _ O
's _ _ O
a _ _ O
little _ _ O
weird _ _ O
, _ _ O
but _ _ O
we _ _ O
can _ _ O
build _ _ O
this _ _ O
out _ _ O
of _ _ O
AND _ _ O
, _ _ O
OR _ _ O
, _ _ O
and _ _ O
XOR _ _ O
gates _ _ O
Ci _ _ O
A _ _ O
B _ _ O
Co _ _ O
S _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
7 _ _ O

Let _ _ O
’s _ _ O
build _ _ O
the _ _ O
adder _ _ O
Co _ _ O
circuit _ _ O
A _ _ O
B _ _ O
Ci _ _ O
Co _ _ O
S _ _ O
𝐂𝐨𝐮𝐭 _ _ O
= _ _ O
𝐀 _ _ O
ഥ _ _ O
𝐁𝐂𝐢𝐧 _ _ O
+ _ _ O
𝐀𝑩 _ _ O
ഥ _ _ O
𝐂𝐢𝐧 _ _ O
+ _ _ O
𝐀𝐁𝐂𝐢𝐧 _ _ O
+ _ _ O
𝐀𝐁𝐂𝐢𝐧 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
ഥ _ _ O
𝐁𝐂𝐢𝐧 _ _ O
𝐀 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
ഥ _ _ O
𝐂𝐢𝐧 _ _ O
𝐀𝑩 _ _ O
𝐀𝐁𝐂𝐢𝐧 _ _ O
𝐀𝐁𝐂𝐢𝐧 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
8 _ _ O

Sweeping _ _ O
that _ _ O
under _ _ O
the _ _ O
rug _ _ O
… _ _ O
● _ _ O
in _ _ O
programming _ _ O
, _ _ O
we _ _ O
use _ _ O
functions _ _ O
to _ _ O
be _ _ O
able _ _ O
to _ _ O
reuse _ _ O
code _ _ O
● _ _ O
in _ _ O
hardware _ _ O
, _ _ O
we _ _ O
can _ _ O
group _ _ O
gates _ _ O
into _ _ O
a _ _ O
component _ _ O
● _ _ O
here _ _ O
's _ _ O
the _ _ O
symbol _ _ O
for _ _ O
a _ _ O
one-bit _ _ O
full _ _ O
adder _ _ O
Co _ _ O
A _ _ O
B _ _ O
the _ _ O
inputs _ _ O
are _ _ O
like _ _ O
arguments _ _ O
+ _ _ O
Ci _ _ O
the _ _ O
outputs _ _ O
are _ _ O
like _ _ O
return _ _ O
values _ _ O
S _ _ O
now _ _ O
we _ _ O
do _ _ O
n't _ _ O
have _ _ O
to _ _ O
care _ _ O
how _ _ O
it _ _ O
adds _ _ O
, _ _ O
just _ _ O
that _ _ O
it _ _ O
does _ _ O
9 _ _ O

Adding _ _ O
longer _ _ O
numbers _ _ O
10 _ _ O

Where _ _ O
do _ _ O
the _ _ O
carries _ _ O
go _ _ O
? _ _ O
● _ _ O
when _ _ O
you _ _ O
add _ _ O
one _ _ O
place _ _ O
, _ _ O
you _ _ O
might _ _ O
get _ _ O
a _ _ O
carry _ _ O
out _ _ O
● _ _ O
that _ _ O
becomes _ _ O
the _ _ O
carry _ _ O
in _ _ O
for _ _ O
the _ _ O
next _ _ O
higher _ _ O
place _ _ O
Bit _ _ O
Bucket _ _ O
.. _ _ O
? _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
+0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
11 _ _ O

Ripple _ _ O
Carry _ _ O
Adder _ _ O
● _ _ O
if _ _ O
we _ _ O
want _ _ O
to _ _ O
add _ _ O
two _ _ O
three-bit _ _ O
numbers _ _ O
, _ _ O
we _ _ O
'll _ _ O
need _ _ O
three _ _ O
one-bit _ _ O
adders _ _ O
● _ _ O
we _ _ O
chain _ _ O
the _ _ O
carries _ _ O
from _ _ O
each _ _ O
place _ _ O
to _ _ O
the _ _ O
next _ _ O
higher _ _ O
place _ _ O
, _ _ O
like _ _ O
we _ _ O
do _ _ O
on _ _ O
paper _ _ O
● _ _ O
we _ _ O
have _ _ O
to _ _ O
split _ _ O
the _ _ O
numbers _ _ O
up _ _ O
like _ _ O
so _ _ O
: _ _ O
A2 _ _ O
A1 _ _ O
A _ _ O
0 _ _ O
+ _ _ O
B2 _ _ O
B1 _ _ O
B0 _ _ O
S2 _ _ O
S1 _ _ O
S0 _ _ O
A2 _ _ O
B2 _ _ O
A1 _ _ O
B1 _ _ O
A0 _ _ O
B0 _ _ O
+ _ _ O
S2 _ _ O
+ _ _ O
S1 _ _ O
+ _ _ O
S0 _ _ O
12 _ _ O

Flip _ _ O
side _ _ O
● _ _ O
We _ _ O
could _ _ O
come _ _ O
up _ _ O
with _ _ O
a _ _ O
separate _ _ O
subtraction _ _ O
circuit _ _ O
, _ _ O
but _ _ O
… _ _ O
● _ _ O
Since _ _ O
algebra _ _ O
tells _ _ O
us _ _ O
that _ _ O
x _ _ O
- _ _ O
y _ _ O
= _ _ O
x _ _ O
+ _ _ O
( _ _ O
-y _ _ O
) _ _ O
o _ _ O
Negation _ _ O
meaning _ _ O
flip _ _ O
the _ _ O
bits _ _ O
and _ _ O
add _ _ O
1 _ _ O
A1 _ _ O
● _ _ O
Flipping _ _ O
the _ _ O
bits _ _ O
uses _ _ O
NOT _ _ O
gates _ _ O
● _ _ O
How _ _ O
do _ _ O
we _ _ O
add _ _ O
1 _ _ O
without _ _ O
any _ _ O
extra _ _ O
circuitry _ _ O
? _ _ O
~B1 _ _ O
o _ _ O
we _ _ O
use _ _ O
a _ _ O
full _ _ O
adder _ _ O
for _ _ O
the _ _ O
LSB _ _ O
, _ _ O
and _ _ O
when _ _ O
we _ _ O
're _ _ O
subtracting _ _ O
, _ _ O
set _ _ O
the _ _ O
" _ _ O
carry _ _ O
in _ _ O
" _ _ O
to _ _ O
1 _ _ O
A0 _ _ O
~B0 _ _ O
+ _ _ O
S1 _ _ O
+ _ _ O
S0 _ _ O
1 _ _ O
13 _ _ O

What _ _ O
makes _ _ O
a _ _ O
good _ _ O
word _ _ O
size _ _ O
? _ _ O
● _ _ O
can _ _ O
you _ _ O
think _ _ O
of _ _ O
an _ _ O
example _ _ O
of _ _ O
… _ _ O
o _ _ O
100 _ _ O
of _ _ O
something _ _ O
? _ _ O
o _ _ O
a _ _ O
million _ _ O
of _ _ O
something _ _ O
? _ _ O
One _ _ O
thousand _ _ O
million _ _ O
? _ _ O
o _ _ O
One _ _ O
billion _ _ O
? _ _ O
more _ _ O
? _ _ O
● _ _ O
28 _ _ O
= _ _ O
256 _ _ O
, _ _ O
216 _ _ O
≅ _ _ O
65 _ _ O
, _ _ O
000 _ _ O
, _ _ O
232 _ _ O
≅ _ _ O
4000 _ _ O
million _ _ O
, _ _ O
264 _ _ O
≅ _ _ O
lots-of-a-lot _ _ O
● _ _ O
for _ _ O
a _ _ O
given _ _ O
word _ _ O
size _ _ O
, _ _ O
all _ _ O
the _ _ O
circuitry _ _ O
has _ _ O
to _ _ O
be _ _ O
built _ _ O
to _ _ O
support _ _ O
it _ _ O
o _ _ O
64 _ _ O
1-bit _ _ O
adders _ _ O
o _ _ O
128 _ _ O
wires _ _ O
going _ _ O
in _ _ O
o _ _ O
64 _ _ O
wires _ _ O
coming _ _ O
out _ _ O
14 _ _ O

Gate _ _ O
Delay _ _ O
● _ _ O
electrical _ _ O
signals _ _ O
ca _ _ O
n't _ _ O
move _ _ O
infinitely _ _ O
fast _ _ O
● _ _ O
transistors _ _ O
ca _ _ O
n't _ _ O
turn _ _ O
on _ _ O
and _ _ O
off _ _ O
infinitely _ _ O
fast _ _ O
● _ _ O
since _ _ O
each _ _ O
digit _ _ O
must _ _ O
wait _ _ O
for _ _ O
the _ _ O
next _ _ O
smaller _ _ O
digit _ _ O
to _ _ O
compute _ _ O
its _ _ O
carry _ _ O
… _ _ O
o _ _ O
ripple _ _ O
carry _ _ O
is _ _ O
linear _ _ O
in _ _ O
the _ _ O
number _ _ O
of _ _ O
digits _ _ O
● _ _ O
this _ _ O
is _ _ O
a _ _ O
diagram _ _ O
of _ _ O
how _ _ O
the _ _ O
outputs _ _ O
of _ _ O
a _ _ O
16-bit _ _ O
ripple _ _ O
carry _ _ O
adder _ _ O
change _ _ O
over _ _ O
time _ _ O
o _ _ O
it _ _ O
's _ _ O
measured _ _ O
in _ _ O
picoseconds _ _ O
! _ _ O
so _ _ O
~100ps _ _ O
total _ _ O
● _ _ O
but _ _ O
if _ _ O
we _ _ O
went _ _ O
to _ _ O
32 _ _ O
bits _ _ O
, _ _ O
it _ _ O
'd _ _ O
take _ _ O
200ps _ _ O
o _ _ O
and _ _ O
64 _ _ O
bits _ _ O
, _ _ O
400ps _ _ O
... _ _ O
● _ _ O
there _ _ O
are _ _ O
more _ _ O
efficient _ _ O
ways _ _ O
of _ _ O
adding _ _ O
( _ _ O
courtesy _ _ O
of _ _ O
Kate _ _ O
Temkin _ _ O
) _ _ O
15 _ _ O

What _ _ O
about _ _ O
overflow _ _ O
? _ _ O
● _ _ O
For _ _ O
unsigned _ _ O
addition _ _ O
, _ _ O
it _ _ O
's _ _ O
easy _ _ O
o _ _ O
For _ _ O
an _ _ O
n-bit _ _ O
adder _ _ O
: _ _ O
▪ _ _ O
just _ _ O
look _ _ O
at _ _ O
the _ _ O
Co _ _ O
of _ _ O
the _ _ O
MSB _ _ O
▪ _ _ O
if _ _ O
it _ _ O
's _ _ O
1 _ _ O
, _ _ O
it _ _ O
's _ _ O
an _ _ O
overflow _ _ O
. _ _ O
o _ _ O
what _ _ O
about _ _ O
subtraction _ _ O
? _ _ O
● _ _ O
For _ _ O
signed _ _ O
, _ _ O
is _ _ O
a _ _ O
bit _ _ O
strange _ _ O
o _ _ O
Compare _ _ O
the _ _ O
last _ _ O
2 _ _ O
carry _ _ O
bits _ _ O
o _ _ O
If _ _ O
they _ _ O
are _ _ O
different _ _ O
▪ _ _ O
Then _ _ O
there _ _ O
is _ _ O
overflow _ _ O
OVF _ _ O
A2 _ _ O
B2 _ _ O
A1 _ _ O
B1 _ _ O
A0 _ _ O
B0 _ _ O
+ _ _ O
S2 _ _ O
+ _ _ O
S1 _ _ O
+ _ _ O
S0 _ _ O
16 _ _ O

But _ _ O
why _ _ O
? _ _ O
● _ _ O
When _ _ O
does _ _ O
signed _ _ O
addition _ _ O
overflow _ _ O
? _ _ O
o _ _ O
If _ _ O
: _ _ O
▪ _ _ O
Both _ _ O
addends _ _ O
have _ _ O
the _ _ O
same _ _ O
sign _ _ O
▪ _ _ O
The _ _ O
result _ _ O
has _ _ O
a _ _ O
different _ _ O
sign _ _ O
● _ _ O
How _ _ O
can _ _ O
we _ _ O
detect _ _ O
that _ _ O
? _ _ O
o _ _ O
Looking _ _ O
at _ _ O
the _ _ O
last _ _ O
bit _ _ O
! _ _ O
● _ _ O
Where _ _ O
is _ _ O
the _ _ O
overflow _ _ O
? _ _ O
There _ _ O
is _ _ O
overflow _ _ O
in _ _ O
signed _ _ O
addition _ _ O
if _ _ O
: _ _ O
On _ _ O
the _ _ O
last _ _ O
bit _ _ O
, _ _ O
the _ _ O
carry-in _ _ O
and _ _ O
carryout _ _ O
have _ _ O
different _ _ O
bit _ _ O
values _ _ O
. _ _ O
The _ _ O
last _ _ O
bit _ _ O
: _ _ O
Ci _ _ O
A _ _ O
B _ _ O
Co _ _ O
S _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
17 _ _ O

Muxes _ _ O
and _ _ O
demuxes _ _ O
, _ _ O
encoders _ _ O
and _ _ O
decoders _ _ O
18 _ _ O

Hardware _ _ O
that _ _ O
makes _ _ O
decisions _ _ O
● _ _ O
a _ _ O
multiplexer _ _ O
( _ _ O
mux _ _ O
) _ _ O
outputs _ _ O
one _ _ O
of _ _ O
its _ _ O
inputs _ _ O
based _ _ O
on _ _ O
a _ _ O
select _ _ O
. _ _ O
A _ _ O
A _ _ O
Q _ _ O
Q _ _ O
B _ _ O
B _ _ O
S _ _ O
A _ _ O
Q _ _ O
B _ _ O
S=0 _ _ O
S=1 _ _ O
This _ _ O
is _ _ O
the _ _ O
select _ _ O
input _ _ O
. _ _ O
19 _ _ O

Multiplexer _ _ O
truth _ _ O
table _ _ O
● _ _ O
let _ _ O
's _ _ O
make _ _ O
a _ _ O
truth _ _ O
table _ _ O
for _ _ O
a _ _ O
two-input _ _ O
1-bit _ _ O
multiplexer _ _ O
. _ _ O
A _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
A _ _ O
Q _ _ O
B _ _ O
Q _ _ O
B _ _ O
S=0 _ _ O
S _ _ O
A _ _ O
B _ _ O
Q _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
S=1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
20 _ _ O

Doing _ _ O
everything _ _ O
and _ _ O
throwing _ _ O
most _ _ O
of _ _ O
it _ _ O
away _ _ O
● _ _ O
I _ _ O
want _ _ O
a _ _ O
circuit _ _ O
that _ _ O
does _ _ O
this _ _ O
: _ _ O
if _ _ O
( _ _ O
select _ _ O
= _ _ O
= _ _ O
1 _ _ O
) _ _ O
output _ _ O
= _ _ O
A _ _ O
– _ _ O
B _ _ O
else _ _ O
output _ _ O
= _ _ O
A _ _ O
+ _ _ O
B _ _ O
● _ _ O
let _ _ O
's _ _ O
see _ _ O
what _ _ O
that _ _ O
looks _ _ O
like _ _ O
● _ _ O
a _ _ O
mux _ _ O
is _ _ O
like _ _ O
a _ _ O
hardware _ _ O
if-else _ _ O
statement _ _ O
● _ _ O
but _ _ O
unlike _ _ O
in _ _ O
software _ _ O
… _ _ O
o _ _ O
the _ _ O
" _ _ O
condition _ _ O
" _ _ O
comes _ _ O
at _ _ O
the _ _ O
" _ _ O
end _ _ O
" _ _ O
( _ _ O
the _ _ O
output _ _ O
) _ _ O
o _ _ O
instead _ _ O
of _ _ O
doing _ _ O
one _ _ O
or _ _ O
the _ _ O
other _ _ O
, _ _ O
we _ _ O
do _ _ O
both _ _ O
, _ _ O
choose _ _ O
the _ _ O
one _ _ O
that _ _ O
we _ _ O
care _ _ O
about _ _ O
, _ _ O
and _ _ O
ignore _ _ O
the _ _ O
rest _ _ O
! _ _ O
21 _ _ O

Amusing _ _ O
muxes _ _ O
● _ _ O
Let _ _ O
’s _ _ O
go _ _ O
to _ _ O
Logisim _ _ O
! _ _ O
22 _ _ O

What _ _ O
's _ _ O
that _ _ O
enable _ _ O
input _ _ O
? _ _ O
● _ _ O
if _ _ O
you _ _ O
do _ _ O
n't _ _ O
understand _ _ O
tristate _ _ O
buses _ _ O
or _ _ O
high _ _ O
impedance _ _ O
states _ _ O
, _ _ O
do _ _ O
not _ _ O
turn _ _ O
on _ _ O
the _ _ O
enable _ _ O
input _ _ O
. _ _ O
● _ _ O
if _ _ O
you _ _ O
ever _ _ O
see _ _ O
blue _ _ O
wires _ _ O
, _ _ O
you _ _ O
are _ _ O
in _ _ O
weird _ _ O
, _ _ O
confusing _ _ O
territory _ _ O
. _ _ O
● _ _ O
if _ _ O
you _ _ O
know _ _ O
this _ _ O
stuff _ _ O
, _ _ O
fine _ _ O
, _ _ O
but _ _ O
otherwise _ _ O
… _ _ O
23 _ _ O

Demultipliexers _ _ O
● _ _ O
a _ _ O
demux _ _ O
does _ _ O
the _ _ O
opposite _ _ O
: _ _ O
it _ _ O
sends _ _ O
its _ _ O
input _ _ O
to _ _ O
one _ _ O
of _ _ O
its _ _ O
outputs _ _ O
● _ _ O
the _ _ O
rest _ _ O
of _ _ O
the _ _ O
outputs _ _ O
are _ _ O
0s _ _ O
In _ _ O
In _ _ O
S _ _ O
In _ _ O
S=0 _ _ O
S=1 _ _ O
24 _ _ O

Looking _ _ O
in _ _ O
a _ _ O
mirror _ _ O
● _ _ O
it _ _ O
can _ _ O
be _ _ O
confusing _ _ O
if _ _ O
all _ _ O
you _ _ O
see _ _ O
is _ _ O
this _ _ O
: _ _ O
which _ _ O
is _ _ O
which _ _ O
? _ _ O
? _ _ O
? _ _ O
Logisim _ _ O
distinguishes _ _ O
these _ _ O
with _ _ O
names _ _ O
I _ _ O
’ll _ _ O
do _ _ O
it _ _ O
with _ _ O
arrows _ _ O
25 _ _ O

Encoders _ _ O
● _ _ O
They _ _ O
encode _ _ O
2n _ _ O
inputs _ _ O
into _ _ O
n _ _ O
outputs _ _ O
. _ _ O
Specifically _ _ O
… _ _ O
● _ _ O
you _ _ O
give _ _ O
it _ _ O
several _ _ O
1-bit _ _ O
inputs _ _ O
, _ _ O
and _ _ O
it _ _ O
tells _ _ O
you _ _ O
which _ _ O
one _ _ O
is _ _ O
1 _ _ O
. _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
2 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
2 _ _ O
3 _ _ O
0 _ _ O
3 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
2 _ _ O
0 _ _ O
3 _ _ O
0 _ _ O
Enc _ _ O
1 _ _ O
Enc _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
2 _ _ O
1 _ _ O
3 _ _ O
0 _ _ O
Enc _ _ O
1 _ _ O
Enc _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
I0 _ _ O
I1 _ _ O
I2 _ _ O
I3 _ _ O
Out _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
00 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
01 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
10 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
11 _ _ O
26 _ _ O

Encoder _ _ O
issues _ _ O
● _ _ O
That _ _ O
table _ _ O
seems _ _ O
VERY _ _ O
incomplete _ _ O
! _ _ O
! _ _ O
! _ _ O
o _ _ O
What _ _ O
about _ _ O
the _ _ O
other _ _ O
entries _ _ O
? _ _ O
? _ _ O
? _ _ O
The _ _ O
output _ _ O
is _ _ O
not _ _ O
valid _ _ O
! _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
2 _ _ O
0 _ _ O
3 _ _ O
Enc _ _ O
0 _ _ O
1 _ _ O
valid _ _ O
? _ _ O
? _ _ O
? _ _ O
? _ _ O
? _ _ O
? _ _ O
0 _ _ O
I0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
… _ _ O
I1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
… _ _ O
I2 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
… _ _ O
I3 _ _ O
Out _ _ O
Valid _ _ O
0 _ _ O
? _ _ O
? _ _ O
0 _ _ O
0 _ _ O
? _ _ O
? _ _ O
0 _ _ O
0 _ _ O
? _ _ O
? _ _ O
0 _ _ O
1 _ _ O
? _ _ O
? _ _ O
0 _ _ O
… _ _ O
… _ _ O
… _ _ O
27 _ _ O

Enter _ _ O
: _ _ O
Priority _ _ O
Encoders _ _ O
● _ _ O
In _ _ O
a _ _ O
priority _ _ O
encoder _ _ O
… _ _ O
you _ _ O
give _ _ O
it _ _ O
several _ _ O
1-bit _ _ O
inputs _ _ O
, _ _ O
and _ _ O
it _ _ O
tells _ _ O
you _ _ O
the _ _ O
highest _ _ O
input _ _ O
with _ _ O
a _ _ O
1 _ _ O
. _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
2 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
2 _ _ O
3 _ _ O
0 _ _ O
3 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
2 _ _ O
0 _ _ O
3 _ _ O
0 _ _ O
Pri _ _ O
1 _ _ O
Pri _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
2 _ _ O
1 _ _ O
3 _ _ O
0 _ _ O
Pri _ _ O
1 _ _ O
Pri _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
I0 _ _ O
I1 _ _ O
I2 _ _ O
I3 _ _ O
Out _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
00 _ _ O
X _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
01 _ _ O
X _ _ O
X _ _ O
1 _ _ O
0 _ _ O
10 _ _ O
X _ _ O
X _ _ O
X _ _ O
1 _ _ O
11 _ _ O
What _ _ O
are _ _ O
these _ _ O
? _ _ O
28 _ _ O

idc _ _ O
● _ _ O
we _ _ O
do _ _ O
n't _ _ O
even _ _ O
care _ _ O
about _ _ O
the _ _ O
that _ _ O
input _ _ O
● _ _ O
we _ _ O
can _ _ O
put _ _ O
X _ _ O
in _ _ O
the _ _ O
inputs _ _ O
we _ _ O
do _ _ O
n't _ _ O
care _ _ O
about _ _ O
● _ _ O
we _ _ O
call _ _ O
these _ _ O
do _ _ O
n't _ _ O
cares _ _ O
o _ _ O
yep _ _ O
, _ _ O
really _ _ O
● _ _ O
what _ _ O
these _ _ O
mean _ _ O
is _ _ O
: _ _ O
o _ _ O
when _ _ O
we _ _ O
make _ _ O
this _ _ O
into _ _ O
a _ _ O
boolean _ _ O
function _ _ O
, _ _ O
we _ _ O
can _ _ O
ignore _ _ O
those _ _ O
inputs _ _ O
▪ _ _ O
we _ _ O
wo _ _ O
n't _ _ O
even _ _ O
need _ _ O
to _ _ O
write _ _ O
em _ _ O
I0 _ _ O
I1 _ _ O
I2 _ _ O
I3 _ _ O
Out _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
00 _ _ O
X _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
01 _ _ O
X _ _ O
X _ _ O
1 _ _ O
0 _ _ O
10 _ _ O
X _ _ O
X _ _ O
X _ _ O
1 _ _ O
11 _ _ O
29 _ _ O

Still _ _ O
… _ _ O
● _ _ O
All _ _ O
zeros _ _ O
is _ _ O
still _ _ O
an _ _ O
invalid _ _ O
input _ _ O
:( _ _ O
if _ _ O
none _ _ O
of _ _ O
the _ _ O
inputs _ _ O
is _ _ O
1 _ _ O
, _ _ O
then _ _ O
logisim _ _ O
gives _ _ O
you _ _ O
X _ _ O
… _ _ O
These _ _ O
are _ _ O
not _ _ O
do _ _ O
n’t _ _ O
cares _ _ O
:’) _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
2 _ _ O
0 _ _ O
3 _ _ O
0 _ _ O
Pri _ _ O
1 _ _ O
valid _ _ O
X _ _ O
X _ _ O
0 _ _ O
30 _ _ O

Decoders _ _ O
● _ _ O
a _ _ O
decoder _ _ O
is _ _ O
like _ _ O
a _ _ O
1-bit _ _ O
demux _ _ O
whose _ _ O
input _ _ O
is _ _ O
always _ _ O
1 _ _ O
● _ _ O
It _ _ O
does _ _ O
pretty _ _ O
much _ _ O
the _ _ O
opposite _ _ O
of _ _ O
an _ _ O
encoder _ _ O
☺ _ _ O
1 _ _ O
S _ _ O
S _ _ O
exactly _ _ O
one _ _ O
output _ _ O
is _ _ O
1 _ _ O
, _ _ O
and _ _ O
the _ _ O
rest _ _ O
are _ _ O
0s _ _ O
31 _ _ O

Uses _ _ O
for _ _ O
encoders _ _ O
, _ _ O
decoders _ _ O
and _ _ O
demuxes _ _ O
● _ _ O
uhhhhhhhhhhh _ _ O
o _ _ O
Ummmmmmmmm _ _ O
… _ _ O
for _ _ O
now _ _ O
… _ _ O
▪ _ _ O
unless _ _ O
you _ _ O
're _ _ O
using _ _ O
tristate _ _ O
( _ _ O
blue _ _ O
) _ _ O
wires _ _ O
, _ _ O
they _ _ O
're _ _ O
not _ _ O
too _ _ O
useful _ _ O
… _ _ O
● _ _ O
most _ _ O
of _ _ O
the _ _ O
time _ _ O
, _ _ O
you _ _ O
do _ _ O
n't _ _ O
have _ _ O
to _ _ O
" _ _ O
direct _ _ O
" _ _ O
a _ _ O
signal _ _ O
to _ _ O
a _ _ O
location _ _ O
o _ _ O
instead _ _ O
, _ _ O
you _ _ O
hook _ _ O
up _ _ O
the _ _ O
inputs _ _ O
to _ _ O
everything _ _ O
that _ _ O
needs _ _ O
them _ _ O
● _ _ O
we _ _ O
'll _ _ O
use _ _ O
them _ _ O
more _ _ O
when _ _ O
we _ _ O
get _ _ O
to _ _ O
sequential _ _ O
logic _ _ O
32 _ _ O

Combinational _ _ O
vs _ _ O
Sequential _ _ O
● _ _ O
combinational _ _ O
logic _ _ O
: _ _ O
the _ _ O
outputs _ _ O
of _ _ O
a _ _ O
circuit _ _ O
depend _ _ O
entirely _ _ O
on _ _ O
their _ _ O
current _ _ O
inputs _ _ O
o _ _ O
AND _ _ O
, _ _ O
OR _ _ O
, _ _ O
NOT _ _ O
, _ _ O
XOR _ _ O
gates _ _ O
o _ _ O
adders _ _ O
o _ _ O
muxes _ _ O
, _ _ O
demuxes _ _ O
, _ _ O
encoders _ _ O
, _ _ O
and _ _ O
decoders _ _ O
● _ _ O
sequential _ _ O
logic _ _ O
is _ _ O
coming _ _ O
up _ _ O
soon _ _ O
o _ _ O
the _ _ O
outputs _ _ O
can _ _ O
depend _ _ O
on _ _ O
the _ _ O
current _ _ O
and _ _ O
previous _ _ O
inputs _ _ O
o _ _ O
it _ _ O
remembers _ _ O
● _ _ O
logic _ _ O
minimization _ _ O
techniques _ _ O
only _ _ O
work _ _ O
on _ _ O
combinational _ _ O
logic _ _ O
! _ _ O
o _ _ O
… _ _ O
or _ _ O
combinational _ _ O
pieces _ _ O
of _ _ O
a _ _ O
larger _ _ O
sequential _ _ O
circuit _ _ O
33 _ _ O



