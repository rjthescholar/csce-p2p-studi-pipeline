unlabeled|cs0447|lec12
-DOCSTART- -X- -X- O

# _ _ O
12 _ _ O
Controlling _ _ O
the _ _ O
PC _ _ O
Original _ _ O
slides _ _ O
by _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
Modified _ _ O
with _ _ O
bits _ _ O
from _ _ O
: _ _ O
Bruce _ _ O
Childers _ _ O
, _ _ O
David _ _ O
Wilkinson _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Luís _ _ O
Oliveira _ _ O
Fall _ _ O
2020 _ _ O

Class _ _ O
announcements _ _ O
● _ _ O
If _ _ O
you _ _ O
had _ _ O
a _ _ O
negative _ _ O
grade _ _ O
in _ _ O
the _ _ O
project _ _ O
o _ _ O
You _ _ O
should _ _ O
talk _ _ O
to _ _ O
me _ _ O
2 _ _ O

Assemblers _ _ O
and _ _ O
Compilers _ _ O
How _ _ O
the _ _ O
machine-code _ _ O
sausage _ _ O
is _ _ O
made _ _ O
3 _ _ O

What _ _ O
is _ _ O
machine _ _ O
code _ _ O
? _ _ O
4 _ _ O

Something _ _ O
denser _ _ O
● _ _ O
text _ _ O
is _ _ O
human-oriented _ _ O
and _ _ O
informationally _ _ O
… _ _ O
sparse _ _ O
. _ _ O
● _ _ O
instead _ _ O
, _ _ O
we _ _ O
encode _ _ O
each _ _ O
instruction _ _ O
as _ _ O
a _ _ O
bitfield _ _ O
. _ _ O
o _ _ O
this _ _ O
encoding _ _ O
is _ _ O
specified _ _ O
by _ _ O
the _ _ O
ISA _ _ O
. _ _ O
MIPS _ _ O
has _ _ O
three _ _ O
instruction _ _ O
formats _ _ O
. _ _ O
R _ _ O
opcode _ _ O
31 _ _ O
26 _ _ O
25 _ _ O
I _ _ O
opcode _ _ O
31 _ _ O
rs _ _ O
26 _ _ O
25 _ _ O
J _ _ O
opcode _ _ O
31 _ _ O
21 _ _ O
20 _ _ O
16 _ _ O
15 _ _ O
rt _ _ O
21 _ _ O
20 _ _ O
rs _ _ O
the _ _ O
opcode _ _ O
( _ _ O
and _ _ O
funct _ _ O
) _ _ O
field _ _ O
identifies _ _ O
which _ _ O
instruction _ _ O
it _ _ O
is _ _ O
. _ _ O
11 _ _ O
10 _ _ O
rd _ _ O
6 _ _ O
5 _ _ O
shamt _ _ O
funct _ _ O
16 _ _ O
15 _ _ O
rt _ _ O
0 _ _ O
add _ _ O
rd _ _ O
, _ _ O
rs _ _ O
, _ _ O
rt _ _ O
sll _ _ O
rd _ _ O
, _ _ O
rs _ _ O
, _ _ O
shamt _ _ O
0 _ _ O
beq _ _ O
rs _ _ O
, _ _ O
rt _ _ O
, _ _ O
offset _ _ O
immediate _ _ O
26 _ _ O
25 _ _ O
0 _ _ O
target _ _ O
jal _ _ O
target _ _ O
5 _ _ O

How _ _ O
does _ _ O
it _ _ O
… _ _ O
do _ _ O
the _ _ O
thing _ _ O
? _ _ O
● _ _ O
well _ _ O
this _ _ O
is _ _ O
mostly _ _ O
next _ _ O
lecture _ _ O
, _ _ O
but _ _ O
… _ _ O
the _ _ O
fields _ _ O
are _ _ O
used _ _ O
as _ _ O
the _ _ O
control _ _ O
signals _ _ O
to _ _ O
the _ _ O
CPU _ _ O
's _ _ O
components _ _ O
. _ _ O
Register _ _ O
File _ _ O
WE _ _ O
add _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
, _ _ O
t2 _ _ O
ALU _ _ O
rd _ _ O
rs _ _ O
rt _ _ O
1 _ _ O
" _ _ O
add _ _ O
" _ _ O
gets _ _ O
encoded _ _ O
as _ _ O
… _ _ O
31 _ _ O
26 _ _ O
25 _ _ O
21 _ _ O
20 _ _ O
16 _ _ O
15 _ _ O
11 _ _ O
10 _ _ O
6 _ _ O
5 _ _ O
0 _ _ O
000000 _ _ O
01001 _ _ O
01010 _ _ O
01000 _ _ O
00000 _ _ O
100000 _ _ O
6 _ _ O

How _ _ O
It _ _ O
's _ _ O
Made _ _ O
7 _ _ O

So _ _ O
we _ _ O
know _ _ O
the _ _ O
assembler _ _ O
li _ _ O
top _ _ O
: _ _ O
s0 _ _ O
, _ _ O
0 _ _ O
Address _ _ O
Instruction _ _ O
0x00400000 _ _ O
0x24100000 _ _ O
0x00400004 _ _ O
0x00102021 _ _ O
move _ _ O
a0 _ _ O
, _ _ O
s0 _ _ O
assembler _ _ O
! _ _ O
0x00400008 _ _ O
jal _ _ O
print_int _ _ O
0x0040000C _ _ O
addi _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
1 _ _ O
0x00400010 _ _ O
blt _ _ O
s0 _ _ O
, _ _ O
5 _ _ O
, _ _ O
top _ _ O
0x00400014 _ _ O
li _ _ O
v0 _ _ O
, _ _ O
10 _ _ O
but _ _ O
, _ _ O
there _ _ O
's _ _ O
clearly _ _ O
0x00400018 _ _ O
syscall _ _ O
a _ _ O
little _ _ O
more _ _ O
0x0040001C _ _ O
print_int _ _ O
: _ _ O
going _ _ O
on _ _ O
under _ _ O
0x00400020 _ _ O
li _ _ O
v0 _ _ O
, _ _ O
1 _ _ O
the _ _ O
hood _ _ O
… _ _ O
syscall _ _ O
0x00400024 _ _ O
jr _ _ O
ra _ _ O
0x00400028 _ _ O
0x0C100008 _ _ O
0x22100001 _ _ O
0x2A010005 _ _ O
0x1420FFFB _ _ O
0x2402000A _ _ O
0x0000000C _ _ O
0x24020001 _ _ O
0x0000000C _ _ O
0x03E00008 _ _ O
8 _ _ O

How _ _ O
it _ _ O
works _ _ O
● _ _ O
An _ _ O
assembler _ _ O
is _ _ O
a _ _ O
pretty _ _ O
simple _ _ O
program _ _ O
● _ _ O
See _ _ O
an _ _ O
instruction _ _ O
, _ _ O
output _ _ O
its _ _ O
encoding _ _ O
addi _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
1 _ _ O
splut _ _ O
opcode _ _ O
rs _ _ O
rt _ _ O
imm _ _ O
8 _ _ O
16 _ _ O
16 _ _ O
1 _ _ O
0x22100001 _ _ O
But _ _ O
what _ _ O
about _ _ O
labels _ _ O
and _ _ O
the _ _ O
data _ _ O
segment _ _ O
9 _ _ O

How _ _ O
it _ _ O
actually _ _ O
works _ _ O
( _ _ O
animated _ _ O
) _ _ O
.data _ _ O
Labels _ _ O
.text _ _ O
x _ _ O
: _ _ O
.word _ _ O
0xDEADBEEF _ _ O
0 _ _ O
: _ _ O
24100000 _ _ O
x _ _ O
: _ _ O
.data _ _ O
: _ _ O
0 _ _ O
y _ _ O
: _ _ O
.word _ _ O
5 _ _ O
4 _ _ O
: _ _ O
00102021 _ _ O
y _ _ O
: _ _ O
.data _ _ O
: _ _ O
4 _ _ O
z _ _ O
: _ _ O
.word _ _ O
0x12345678 _ _ O
z _ _ O
: _ _ O
.data _ _ O
: _ _ O
8 _ _ O
8 _ _ O
: _ _ O
0c000008 _ _ O
0c000000 _ _ O
.text _ _ O
top _ _ O
: _ _ O
.text _ _ O
: _ _ O
4 _ _ O
C _ _ O
: _ _ O
22100001 _ _ O
print_int _ _ O
: _ _ O
li _ _ O
s0 _ _ O
, _ _ O
0 _ _ O
10 _ _ O
: _ _ O
2A010005 _ _ O
.text _ _ O
: _ _ O
20 _ _ O
14 _ _ O
: _ _ O
1420FFFB _ _ O
top _ _ O
: _ _ O
18 _ _ O
: _ _ O
2402000A _ _ O
move _ _ O
a0 _ _ O
, _ _ O
s0 _ _ O
1C _ _ O
: _ _ O
0000000C _ _ O
jal _ _ O
print_int _ _ O
20 _ _ O
: _ _ O
24020001 _ _ O
addi _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
1 _ _ O
Fixups _ _ O
24 _ _ O
: _ _ O
0000000C _ _ O
blt _ _ O
s0 _ _ O
, _ _ O
5 _ _ O
, _ _ O
top _ _ O
28 _ _ O
: _ _ O
03E00008 _ _ O
8 _ _ O
: _ _ O
print_int _ _ O
li _ _ O
v0 _ _ O
, _ _ O
10 _ _ O
syscall _ _ O
print_int _ _ O
: _ _ O
li _ _ O
v0 _ _ O
, _ _ O
1 _ _ O
syscall _ _ O
then _ _ O
, _ _ O
run _ _ O
through _ _ O
the _ _ O
fixups _ _ O
! _ _ O
jr _ _ O
ra _ _ O
.data _ _ O
0 _ _ O
: _ _ O
DEADBEEF _ _ O
4 _ _ O
: _ _ O
00000005 _ _ O
8 _ _ O
: _ _ O
12345678 _ _ O
10 _ _ O

Yum _ _ O
yum _ _ O
● _ _ O
if _ _ O
a _ _ O
label _ _ O
does _ _ O
n't _ _ O
exist _ _ O
, _ _ O
it _ _ O
's _ _ O
an _ _ O
error _ _ O
. _ _ O
● _ _ O
now _ _ O
we _ _ O
have _ _ O
machine _ _ O
code _ _ O
! _ _ O
● _ _ O
it _ _ O
's _ _ O
packaged _ _ O
up _ _ O
into _ _ O
a _ _ O
casing _ _ O
: _ _ O
an _ _ O
object _ _ O
file _ _ O
● _ _ O
then _ _ O
the _ _ O
object _ _ O
files _ _ O
are _ _ O
linked _ _ O
● _ _ O
and _ _ O
then _ _ O
you _ _ O
get _ _ O
an _ _ O
executable _ _ O
program _ _ O
o _ _ O
this _ _ O
is _ _ O
CS0449 _ _ O
stuff _ _ O
! _ _ O
11 _ _ O

What _ _ O
about _ _ O
compilers _ _ O
? _ _ O
● _ _ O
ahahaha _ _ O
oh _ _ O
they _ _ O
're _ _ O
a _ _ O
lot _ _ O
more _ _ O
complicated _ _ O
int _ _ O
main _ _ O
( _ _ O
int _ _ O
argc _ _ O
, _ _ O
char _ _ O
* _ _ O
* _ _ O
argv _ _ O
) _ _ O
{ _ _ O
if _ _ O
( _ _ O
argc _ _ O
< _ _ O
2 _ _ O
) _ _ O
fatal _ _ O
( _ _ O
"gimme _ _ O
arguments _ _ O
" _ _ O
) _ _ O
; _ _ O
else _ _ O
{ _ _ O
Tokens _ _ O
... _ _ O
KEYWORD _ _ O
( _ _ O
"int _ _ O
" _ _ O
) _ _ O
, _ _ O
} _ _ O
ID _ _ O
( _ _ O
"main _ _ O
" _ _ O
) _ _ O
, _ _ O
} _ _ O
LPAREN _ _ O
, _ _ O
AST _ _ O
( _ _ O
Abstract _ _ O
Syntax _ _ O
Tree _ _ O
) _ _ O
Function _ _ O
ret_type _ _ O
: _ _ O
int _ _ O
name _ _ O
: _ _ O
" _ _ O
main _ _ O
" _ _ O
args _ _ O
: _ _ O
[ _ _ O
{ _ _ O
type _ _ O
: _ _ O
int _ _ O
, _ _ O
name _ _ O
: _ _ O
" _ _ O
argc _ _ O
" _ _ O
} _ _ O
, _ _ O
{ _ _ O
type _ _ O
: _ _ O
ptr _ _ O
( _ _ O
ptr _ _ O
( _ _ O
char _ _ O
) _ _ O
) _ _ O
, _ _ O
name _ _ O
: _ _ O
" _ _ O
argv _ _ O
" _ _ O
} _ _ O
] _ _ O
if _ _ O
KEYWORD _ _ O
( _ _ O
"int _ _ O
" _ _ O
) _ _ O
, _ _ O
... _ _ O
< _ _ O
argc _ _ O
… _ _ O
2 _ _ O
fatal _ _ O
call _ _ O
" _ _ O
gimme _ _ O
arguments _ _ O
" _ _ O
12 _ _ O

It _ _ O
's _ _ O
just _ _ O
a _ _ O
grinder _ _ O
. _ _ O
● _ _ O
all _ _ O
that _ _ O
really _ _ O
matters _ _ O
: _ _ O
some _ _ O
compilers _ _ O
output _ _ O
assembly _ _ O
and _ _ O
rely _ _ O
on _ _ O
an _ _ O
assembler _ _ O
to _ _ O
produce _ _ O
machine _ _ O
code _ _ O
/\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
/ _ _ O
\ _ _ O
hello.c _ _ O
code _ _ O
goes _ _ O
in _ _ O
, _ _ O
sausage _ _ O
object _ _ O
files _ _ O
come _ _ O
out _ _ O
these _ _ O
days _ _ O
, _ _ O
it _ _ O
's _ _ O
common _ _ O
for _ _ O
the _ _ O
compiler _ _ O
itself _ _ O
to _ _ O
produce _ _ O
machine _ _ O
code _ _ O
, _ _ O
or _ _ O
some _ _ O
kind _ _ O
of _ _ O
platform-independent _ _ O
assembly _ _ O
code _ _ O
13 _ _ O

Jumps _ _ O
and _ _ O
Branches _ _ O
14 _ _ O

Maybe _ _ O
you _ _ O
never _ _ O
noticed _ _ O
… _ _ O
● _ _ O
the _ _ O
control _ _ O
flow _ _ O
instructions _ _ O
are _ _ O
divided _ _ O
into _ _ O
two _ _ O
groups _ _ O
. _ _ O
jumps _ _ O
make _ _ O
execution _ _ O
go _ _ O
to _ _ O
one _ _ O
specific _ _ O
place _ _ O
branches _ _ O
make _ _ O
execution _ _ O
go _ _ O
to _ _ O
one _ _ O
of _ _ O
two _ _ O
places _ _ O
j _ _ O
end _ _ O
bne _ _ O
s1 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
top _ _ O
but _ _ O
.. _ _ O
why _ _ O
? _ _ O
well _ _ O
, _ _ O
notice _ _ O
the _ _ O
operands _ _ O
of _ _ O
each _ _ O
. _ _ O
15 _ _ O

A _ _ O
matter _ _ O
of _ _ O
practicality _ _ O
● _ _ O
Each _ _ O
jump _ _ O
or _ _ O
branch _ _ O
has _ _ O
a _ _ O
target _ _ O
: _ _ O
where _ _ O
it _ _ O
goes _ _ O
to _ _ O
● _ _ O
We _ _ O
'd _ _ O
like _ _ O
to _ _ O
be _ _ O
able _ _ O
to _ _ O
encode _ _ O
any _ _ O
target _ _ O
address _ _ O
… _ _ O
● _ _ O
But _ _ O
we _ _ O
have _ _ O
a _ _ O
fixed _ _ O
number _ _ O
of _ _ O
bits _ _ O
to _ _ O
encode _ _ O
our _ _ O
instructions _ _ O
. _ _ O
think _ _ O
about _ _ O
the _ _ O
cases _ _ O
where _ _ O
jumps _ _ O
are _ _ O
used _ _ O
. _ _ O
now _ _ O
think _ _ O
about _ _ O
the _ _ O
cases _ _ O
where _ _ O
branches _ _ O
are _ _ O
used _ _ O
. _ _ O
how _ _ O
far _ _ O
away _ _ O
is _ _ O
a _ _ O
jump _ _ O
target _ _ O
likely _ _ O
to _ _ O
be _ _ O
? _ _ O
how _ _ O
far _ _ O
away _ _ O
is _ _ O
a _ _ O
branch _ _ O
target _ _ O
likely _ _ O
to _ _ O
be _ _ O
? _ _ O
16 _ _ O

Absolute _ _ O
versus _ _ O
Relative _ _ O
● _ _ O
we _ _ O
say _ _ O
that _ _ O
jumps _ _ O
are _ _ O
absolute _ _ O
and _ _ O
branches _ _ O
are _ _ O
relative _ _ O
. _ _ O
top _ _ O
: _ _ O
move _ _ O
a0 _ _ O
, _ _ O
s0 _ _ O
jal _ _ O
print_int _ _ O
add _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
1 _ _ O
blt _ _ O
s0 _ _ O
, _ _ O
5 _ _ O
, _ _ O
top _ _ O
... _ _ O
jumps _ _ O
just _ _ O
set _ _ O
the _ _ O
PC _ _ O
to _ _ O
a _ _ O
new _ _ O
value _ _ O
. _ _ O
PC _ _ O
= _ _ O
0x800400B0 _ _ O
PC _ _ O
+ _ _ O
= _ _ O
( _ _ O
-16 _ _ O
) _ _ O
branches _ _ O
either _ _ O
add _ _ O
an _ _ O
offset _ _ O
to _ _ O
the _ _ O
PC _ _ O
or _ _ O
do _ _ O
nothing _ _ O
. _ _ O
jumps _ _ O
need _ _ O
a _ _ O
long _ _ O
address _ _ O
, _ _ O
but _ _ O
branches _ _ O
only _ _ O
need _ _ O
a _ _ O
small _ _ O
offset _ _ O
. _ _ O
so _ _ O
we _ _ O
can _ _ O
fit _ _ O
them _ _ O
into _ _ O
J _ _ O
and _ _ O
I _ _ O
instructions _ _ O
! _ _ O
17 _ _ O

More _ _ O
bang _ _ O
for _ _ O
your _ _ O
buck _ _ O
● _ _ O
every _ _ O
MIPS _ _ O
instruction _ _ O
is _ _ O
4 _ _ O
bytes _ _ O
● _ _ O
what _ _ O
's _ _ O
memory _ _ O
alignment _ _ O
again _ _ O
? _ _ O
Address _ _ O
in _ _ O
hex _ _ O
and _ _ O
in _ _ O
binary _ _ O
0x78000000 _ _ O
0x78000004 _ _ O
0111 _ _ O
1000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
0111 _ _ O
1000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
0100 _ _ O
0x78000008 _ _ O
0x7800000C _ _ O
0111 _ _ O
1000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
1000 _ _ O
0111 _ _ O
1000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
0000 _ _ O
1100 _ _ O
what _ _ O
do _ _ O
you _ _ O
notice _ _ O
about _ _ O
these _ _ O
low _ _ O
2 _ _ O
bits _ _ O
? _ _ O
in _ _ O
binary _ _ O
, _ _ O
multiples _ _ O
of _ _ O
4 _ _ O
always _ _ O
end _ _ O
in _ _ O
00 _ _ O
since _ _ O
every _ _ O
instruction _ _ O
's _ _ O
address _ _ O
ends _ _ O
in _ _ O
00 _ _ O
, _ _ O
do _ _ O
we _ _ O
need _ _ O
to _ _ O
store _ _ O
it _ _ O
? _ _ O
18 _ _ O

Instruction _ _ O
Fetching _ _ O
What _ _ O
do _ _ O
we _ _ O
do _ _ O
next _ _ O
, _ _ O
boss _ _ O
? _ _ O
19 _ _ O

Remember _ _ O
this _ _ O
? _ _ O
● _ _ O
what _ _ O
order _ _ O
do _ _ O
these _ _ O
instructions _ _ O
run _ _ O
? _ _ O
most _ _ O
instructions _ _ O
change _ _ O
the _ _ O
PC _ _ O
to _ _ O
the _ _ O
print_int _ _ O
: _ _ O
next _ _ O
address _ _ O
li _ _ O
v0 _ _ O
, _ _ O
1 _ _ O
li _ _ O
s0 _ _ O
, _ _ O
0 _ _ O
top _ _ O
: _ _ O
syscall _ _ O
move _ _ O
a0 _ _ O
, _ _ O
s0 _ _ O
control _ _ O
flow _ _ O
jr _ _ O
ra _ _ O
jal _ _ O
print_int _ _ O
instructions _ _ O
can _ _ O
addi _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
1 _ _ O
change _ _ O
the _ _ O
PC _ _ O
blt _ _ O
s0 _ _ O
, _ _ O
5 _ _ O
, _ _ O
top _ _ O
to _ _ O
a _ _ O
constant _ _ O
… _ _ O
li _ _ O
v0 _ _ O
, _ _ O
10 _ _ O
… _ _ O
or _ _ O
the _ _ O
value _ _ O
from _ _ O
a _ _ O
register _ _ O
… _ _ O
syscall _ _ O
… _ _ O
or _ _ O
one _ _ O
of _ _ O
two _ _ O
choices _ _ O
, _ _ O
conditionally _ _ O
20 _ _ O

Forwarrrrrrrrd _ _ O
MARCH _ _ O
+ _ _ O
● _ _ O
moving _ _ O
ahead _ _ O
by _ _ O
1 _ _ O
instruction _ _ O
each _ _ O
cycle _ _ O
is _ _ O
easy _ _ O
enough _ _ O
o _ _ O
This _ _ O
is _ _ O
a _ _ O
FSD _ _ O
, _ _ O
the _ _ O
next _ _ O
state _ _ O
is _ _ O
the _ _ O
current _ _ O
state _ _ O
+ _ _ O
1 _ _ O
:D _ _ O
size _ _ O
of _ _ O
one _ _ O
instruction _ _ O
00100004 _ _ O
PC _ _ O
how _ _ O
big _ _ O
are _ _ O
instructions _ _ O
in _ _ O
MIPS _ _ O
? _ _ O
21 _ _ O

Arbitrary _ _ O
locatiooooon _ _ O
MARCH _ _ O
4 _ _ O
+ _ _ O
● _ _ O
jumps _ _ O
( _ _ O
j _ _ O
, _ _ O
jal _ _ O
, _ _ O
jr _ _ O
) _ _ O
put _ _ O
a _ _ O
constant _ _ O
value _ _ O
into _ _ O
the _ _ O
PC _ _ O
o _ _ O
we _ _ O
call _ _ O
this _ _ O
the _ _ O
jump _ _ O
target _ _ O
. _ _ O
● _ _ O
well _ _ O
now _ _ O
we _ _ O
have _ _ O
two _ _ O
choices _ _ O
of _ _ O
where _ _ O
to _ _ O
go _ _ O
. _ _ O
how _ _ O
do _ _ O
we _ _ O
choose _ _ O
? _ _ O
jump _ _ O
target _ _ O
PC _ _ O
Source _ _ O
00100004 _ _ O
PC _ _ O
PC _ _ O
Source _ _ O
( _ _ O
PCSrc _ _ O
for _ _ O
short _ _ O
) _ _ O
is _ _ O
a _ _ O
control _ _ O
signal _ _ O
. _ _ O
many _ _ O
control _ _ O
signals _ _ O
are _ _ O
just _ _ O
MUX _ _ O
selectors _ _ O
22 _ _ O

MIPS _ _ O
jump _ _ O
targets _ _ O
● _ _ O
in _ _ O
MIPS _ _ O
, _ _ O
j _ _ O
and _ _ O
jal _ _ O
use _ _ O
the _ _ O
J-type _ _ O
instruction _ _ O
format _ _ O
: _ _ O
31 _ _ O
26 _ _ O
25 _ _ O
0 _ _ O
opcode _ _ O
target _ _ O
00100004 _ _ O
this _ _ O
is _ _ O
26 _ _ O
bits _ _ O
… _ _ O
… _ _ O
but _ _ O
the _ _ O
PC _ _ O
is _ _ O
32 _ _ O
bits _ _ O
. _ _ O
WHAT _ _ O
DO _ _ O
? _ _ O
? _ _ O
23 _ _ O

Do _ _ O
we _ _ O
really _ _ O
need _ _ O
a _ _ O
full _ _ O
32-bit _ _ O
address _ _ O
( _ _ O
no _ _ O
) _ _ O
● _ _ O
we _ _ O
do _ _ O
n't _ _ O
need _ _ O
to _ _ O
store _ _ O
the _ _ O
lower _ _ O
2 _ _ O
bits _ _ O
because _ _ O
of _ _ O
alignment _ _ O
. _ _ O
● _ _ O
most _ _ O
programs _ _ O
are _ _ O
nowhere _ _ O
near _ _ O
big _ _ O
enough _ _ O
to _ _ O
need _ _ O
32-bit _ _ O
addrs _ _ O
. _ _ O
● _ _ O
so _ _ O
in _ _ O
MIPS _ _ O
, _ _ O
jumps _ _ O
only _ _ O
change _ _ O
the _ _ O
lower _ _ O
28 _ _ O
bits _ _ O
of _ _ O
the _ _ O
PC _ _ O
. _ _ O
here _ _ O
's _ _ O
a _ _ O
j. _ _ O
31 _ _ O
0 _ _ O
26 _ _ O
25 _ _ O
000010 _ _ O
0x243C007 _ _ O
< _ _ O
< _ _ O
2 _ _ O
0x90F001C _ _ O
what _ _ O
does _ _ O
this _ _ O
mean _ _ O
if _ _ O
the _ _ O
thing _ _ O
you _ _ O
're _ _ O
jumping _ _ O
to _ _ O
is _ _ O
too _ _ O
far _ _ O
away _ _ O
? _ _ O
78000008 _ _ O
790F001C _ _ O
PC _ _ O
put _ _ O
that _ _ O
into _ _ O
the _ _ O
low _ _ O
28 _ _ O
bits _ _ O
of _ _ O
the _ _ O
PC _ _ O
24 _ _ O

Do _ _ O
we _ _ O
really _ _ O
need _ _ O
a _ _ O
full _ _ O
32-bit _ _ O
address _ _ O
( _ _ O
no _ _ O
) _ _ O
( _ _ O
cntd _ _ O
. _ _ O
) _ _ O
● _ _ O
If _ _ O
a _ _ O
jump _ _ O
instruction _ _ O
is _ _ O
in _ _ O
address _ _ O
YXXXXXXX _ _ O
● _ _ O
It _ _ O
can _ _ O
reach _ _ O
from _ _ O
address _ _ O
: _ _ O
31 _ _ O
26 _ _ O
25 _ _ O
000010 _ _ O
● _ _ O
To _ _ O
address _ _ O
: _ _ O
31 _ _ O
Y0000000 _ _ O
0x0000000 _ _ O
< _ _ O
< _ _ O
2 _ _ O
0x0000000 _ _ O
26 _ _ O
25 _ _ O
000010 _ _ O
0 _ _ O
0 _ _ O
YFFFFFFC _ _ O
0x3FFFFFF _ _ O
< _ _ O
< _ _ O
2 _ _ O
0xFFFFFFC _ _ O
25 _ _ O

If _ _ O
jumping _ _ O
REALLY _ _ O
far _ _ O
, _ _ O
far _ _ O
away _ _ O
… _ _ O
● _ _ O
What _ _ O
if _ _ O
we _ _ O
want _ _ O
to _ _ O
jump _ _ O
too _ _ O
far _ _ O
? _ _ O
beq _ _ O
t0 _ _ O
, _ _ O
zero _ _ O
, _ _ O
a_label_far_far_away _ _ O
j _ _ O
a_label_far_far_away _ _ O
● _ _ O
There _ _ O
is _ _ O
one _ _ O
instruction _ _ O
that _ _ O
can _ _ O
jump _ _ O
into _ _ O
a _ _ O
32-bit _ _ O
address _ _ O
o _ _ O
What _ _ O
is _ _ O
that _ _ O
? _ _ O
▪ _ _ O
How _ _ O
big _ _ O
is _ _ O
register _ _ O
ra _ _ O
? _ _ O
jr _ _ O
ra _ _ O
26 _ _ O

If _ _ O
jumping _ _ O
REALLY _ _ O
far _ _ O
, _ _ O
far _ _ O
away _ _ O
… _ _ O
j _ _ O
a_label_far_far_away _ _ O
la _ _ O
jr _ _ O
beq _ _ O
t0 _ _ O
, _ _ O
a_label_far_far_away _ _ O
t0 _ _ O
t0 _ _ O
, _ _ O
zero _ _ O
, _ _ O
a_label_far_far_away _ _ O
bne _ _ O
t0 _ _ O
, _ _ O
zero _ _ O
, _ _ O
_ _ _ O
skip_jump _ _ O
la _ _ O
t0 _ _ O
, _ _ O
a_label_far_far_away _ _ O
jr _ _ O
t0 _ _ O
_ _ _ O
skip_jump _ _ O
: _ _ O
27 _ _ O

If _ _ O
jumping _ _ O
REALLY _ _ O
far _ _ O
, _ _ O
far _ _ O
away _ _ O
… _ _ O
jal _ _ O
a_label_far_far_away _ _ O
la _ _ O
jalr _ _ O
t0 _ _ O
, _ _ O
a_label_far_far_away _ _ O
t0 _ _ O
28 _ _ O

Relative _ _ O
branches _ _ O
● _ _ O
think _ _ O
about _ _ O
a _ _ O
number _ _ O
line _ _ O
. _ _ O
0 _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
7 _ _ O
you _ _ O
are _ _ O
here _ _ O
8 _ _ O
if _ _ O
you _ _ O
want _ _ O
to _ _ O
get _ _ O
here _ _ O
, _ _ O
what _ _ O
do _ _ O
you _ _ O
have _ _ O
to _ _ O
add _ _ O
to _ _ O
10 _ _ O
? _ _ O
what _ _ O
's _ _ O
the _ _ O
pattern _ _ O
? _ _ O
9 _ _ O
10 _ _ O
11 _ _ O
12 _ _ O
13 _ _ O
14 _ _ O
15 _ _ O
16 _ _ O
17 _ _ O
how _ _ O
about _ _ O
here _ _ O
? _ _ O
destination _ _ O
- _ _ O
source _ _ O
29 _ _ O

MIPS _ _ O
branch _ _ O
offsets _ _ O
● _ _ O
In _ _ O
MIPS _ _ O
the _ _ O
PC _ _ O
points _ _ O
to _ _ O
the _ _ O
next _ _ O
instruction _ _ O
to _ _ O
run _ _ O
. _ _ O
● _ _ O
let _ _ O
's _ _ O
say _ _ O
we _ _ O
're _ _ O
running _ _ O
the _ _ O
beq _ _ O
here _ _ O
. _ _ O
it _ _ O
's _ _ O
at _ _ O
address _ _ O
00 _ _ O
… _ _ O
00 _ _ O
: _ _ O
beq _ _ O
a0 _ _ O
, _ _ O
10 _ _ O
, _ _ O
else _ _ O
… _ _ O
but _ _ O
the _ _ O
PC _ _ O
is _ _ O
here _ _ O
. _ _ O
PC _ _ O
04 _ _ O
: _ _ O
li _ _ O
v0 _ _ O
, _ _ O
0 _ _ O
08 _ _ O
: _ _ O
b _ _ O
end _ _ O
we _ _ O
want _ _ O
to _ _ O
get _ _ O
to _ _ O
address _ _ O
0C. _ _ O
else _ _ O
: _ _ O
0C _ _ O
: _ _ O
li _ _ O
v0 _ _ O
, _ _ O
1 _ _ O
end _ _ O
: _ _ O
10 _ _ O
: _ _ O
... _ _ O
how _ _ O
do _ _ O
we _ _ O
get _ _ O
there _ _ O
? _ _ O
PC _ _ O
+ _ _ O
= _ _ O
8 _ _ O
the _ _ O
branch _ _ O
offset _ _ O
for _ _ O
this _ _ O
beq _ _ O
is _ _ O
: _ _ O
target _ _ O
– _ _ O
( _ _ O
branch _ _ O
address _ _ O
+ _ _ O
4 _ _ O
) _ _ O
= _ _ O
12 _ _ O
– _ _ O
( _ _ O
0 _ _ O
+ _ _ O
4 _ _ O
) _ _ O
= _ _ O
8 _ _ O
30 _ _ O

Encoding _ _ O
it _ _ O
● _ _ O
Since _ _ O
the _ _ O
branch _ _ O
's _ _ O
immediate _ _ O
is _ _ O
only _ _ O
16 _ _ O
bits _ _ O
… _ _ O
31 _ _ O
26 _ _ O
25 _ _ O
4 _ _ O
21 _ _ O
20 _ _ O
4 _ _ O
16 _ _ O
15 _ _ O
1 _ _ O
0 _ _ O
0x0002 _ _ O
0x0008 _ _ O
> _ _ O
> _ _ O
2 _ _ O
if _ _ O
the _ _ O
branch _ _ O
offset _ _ O
is _ _ O
negative _ _ O
like _ _ O
0xFFFFFFE8 _ _ O
, _ _ O
no _ _ O
big _ _ O
deal _ _ O
– _ _ O
chop _ _ O
off _ _ O
the _ _ O
top _ _ O
16 _ _ O
bits _ _ O
. _ _ O
0xFFE8 _ _ O
is _ _ O
still _ _ O
a _ _ O
negative _ _ O
number _ _ O
. _ _ O
31 _ _ O

The _ _ O
number _ _ O
stored _ _ O
is _ _ O
the _ _ O
number _ _ O
of _ _ O
instructions _ _ O
● _ _ O
To _ _ O
go _ _ O
to _ _ O
else _ _ O
, _ _ O
from _ _ O
the _ _ O
updated _ _ O
value _ _ O
of _ _ O
PC _ _ O
: _ _ O
Jump _ _ O
2 _ _ O
instructions _ _ O
down _ _ O
00 _ _ O
: _ _ O
beq _ _ O
a0 _ _ O
, _ _ O
10 _ _ O
, _ _ O
else _ _ O
PC _ _ O
04 _ _ O
: _ _ O
li _ _ O
v0 _ _ O
, _ _ O
0 _ _ O
08 _ _ O
: _ _ O
b _ _ O
end _ _ O
else _ _ O
: _ _ O
0C _ _ O
: _ _ O
li _ _ O
v0 _ _ O
, _ _ O
1 _ _ O
end _ _ O
: _ _ O
10 _ _ O
: _ _ O
... _ _ O
the _ _ O
branch _ _ O
offset _ _ O
for _ _ O
this _ _ O
beq _ _ O
is _ _ O
: _ _ O
target _ _ O
– _ _ O
( _ _ O
branch _ _ O
address _ _ O
+ _ _ O
4 _ _ O
) _ _ O
= _ _ O
12 _ _ O
– _ _ O
( _ _ O
0 _ _ O
+ _ _ O
4 _ _ O
) _ _ O
= _ _ O
8 _ _ O
31 _ _ O
26 _ _ O
25 _ _ O
4 _ _ O
21 _ _ O
20 _ _ O
4 _ _ O
16 _ _ O
15 _ _ O
1 _ _ O
0 _ _ O
0x0002 _ _ O
0x0008 _ _ O
> _ _ O
> _ _ O
2 _ _ O
32 _ _ O



