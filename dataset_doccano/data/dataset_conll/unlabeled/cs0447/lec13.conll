unlabeled|cs0447|lec13
-DOCSTART- -X- -X- O

# _ _ O
13 _ _ O
The _ _ O
Interconnect _ _ O
, _ _ O
Control _ _ O
, _ _ O
and _ _ O
Instruction _ _ O
Decoding _ _ O
Original _ _ O
slides _ _ O
by _ _ O
: _ _ O
Jarrett _ _ O
Billingsley _ _ O
Modified _ _ O
with _ _ O
bits _ _ O
from _ _ O
: _ _ O
Bruce _ _ O
Childers _ _ O
, _ _ O
David _ _ O
Wilkinson _ _ O
CS _ _ O
0447 _ _ O
Introduction _ _ O
to _ _ O
Computer _ _ O
Programming _ _ O
Luís _ _ O
Oliveira _ _ O
Fall _ _ O
2020 _ _ O

Instruction _ _ O
Execution _ _ O
2 _ _ O

Phases _ _ O
of _ _ O
instruction _ _ O
execution _ _ O
F _ _ O
D _ _ O
X _ _ O
M _ _ O
W _ _ O
1 _ _ O
. _ _ O
Fetch _ _ O
( _ _ O
IF _ _ O
or _ _ O
F _ _ O
) _ _ O
o _ _ O
use _ _ O
PC _ _ O
to _ _ O
get _ _ O
the _ _ O
next _ _ O
instruction _ _ O
from _ _ O
memory _ _ O
2 _ _ O
. _ _ O
Decode _ _ O
( _ _ O
ID _ _ O
or _ _ O
D _ _ O
) _ _ O
o _ _ O
look _ _ O
at _ _ O
the _ _ O
fetched _ _ O
instruction _ _ O
and _ _ O
set _ _ O
control _ _ O
signals _ _ O
3 _ _ O
. _ _ O
Execute _ _ O
( _ _ O
EX _ _ O
or _ _ O
X _ _ O
) _ _ O
o _ _ O
wait _ _ O
for _ _ O
data _ _ O
to _ _ O
flow _ _ O
through _ _ O
the _ _ O
datapath _ _ O
4 _ _ O
. _ _ O
Memory _ _ O
Access _ _ O
( _ _ O
MEM _ _ O
or _ _ O
M _ _ O
) _ _ O
o _ _ O
if _ _ O
it _ _ O
's _ _ O
a _ _ O
load _ _ O
or _ _ O
store _ _ O
, _ _ O
do _ _ O
that _ _ O
5 _ _ O
. _ _ O
Write-back _ _ O
( _ _ O
WB _ _ O
or _ _ O
W _ _ O
) _ _ O
o _ _ O
if _ _ O
there _ _ O
's _ _ O
a _ _ O
destination _ _ O
register _ _ O
, _ _ O
write _ _ O
the _ _ O
result _ _ O
to _ _ O
it _ _ O
often _ _ O
we _ _ O
can _ _ O
do _ _ O
multiple _ _ O
phases _ _ O
" _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
" _ _ O
3 _ _ O

Which _ _ O
parts _ _ O
do _ _ O
what _ _ O
Memory _ _ O
Control _ _ O
PC _ _ O
Register _ _ O
File _ _ O
F _ _ O
D _ _ O
W _ _ O
ALU _ _ O
X _ _ O
Memory _ _ O
again _ _ O
M _ _ O
How _ _ O
does _ _ O
lw _ _ O
work _ _ O
? _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
12 _ _ O
( _ _ O
s0 _ _ O
) _ _ O
4 _ _ O

A _ _ O
Thing _ _ O
about _ _ O
memory _ _ O
5 _ _ O

☢ _ _ O
️ _ _ O
Structural _ _ O
Hazards _ _ O
☢ _ _ O
️ _ _ O
● _ _ O
how _ _ O
many _ _ O
RAMs _ _ O
does _ _ O
your _ _ O
computer _ _ O
have _ _ O
? _ _ O
one _ _ O
or _ _ O
two _ _ O
? _ _ O
● _ _ O
if _ _ O
we _ _ O
try _ _ O
to _ _ O
do _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
( _ _ O
s0 _ _ O
) _ _ O
with _ _ O
one _ _ O
memory _ _ O
in _ _ O
a _ _ O
single _ _ O
cycle _ _ O
… _ _ O
PC _ _ O
Instruction _ _ O
Address _ _ O
Load _ _ O
word _ _ O
address _ _ O
… _ _ O
? _ _ O
Instruction _ _ O
Control _ _ O
Memory _ _ O
Loaded _ _ O
word _ _ O
… _ _ O
? _ _ O
? _ _ O
what _ _ O
about _ _ O
sw _ _ O
? _ _ O
! _ _ O
? _ _ O
we _ _ O
ca _ _ O
n't _ _ O
really _ _ O
do _ _ O
this _ _ O
… _ _ O
memory _ _ O
hardware _ _ O
ca _ _ O
n't _ _ O
read _ _ O
from _ _ O
two _ _ O
addresses _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
6 _ _ O

Von _ _ O
Neumann _ _ O
vs _ _ O
Harvard _ _ O
● _ _ O
one _ _ O
way _ _ O
to _ _ O
solve _ _ O
this _ _ O
problem _ _ O
is _ _ O
to _ _ O
have _ _ O
two _ _ O
memories _ _ O
this _ _ O
is _ _ O
a _ _ O
Harvard _ _ O
Architecture _ _ O
Instruction _ _ O
Memory _ _ O
Control _ _ O
PC _ _ O
Register _ _ O
File _ _ O
ALU _ _ O
Data _ _ O
Memory _ _ O
a _ _ O
Von _ _ O
Neumann _ _ O
Architecture _ _ O
has _ _ O
one _ _ O
memory _ _ O
for _ _ O
both _ _ O
things _ _ O
" _ _ O
Von _ _ O
Neumann _ _ O
" _ _ O
is _ _ O
2 _ _ O
words _ _ O
for _ _ O
1 _ _ O
memory _ _ O
… _ _ O
" _ _ O
Harvard _ _ O
" _ _ O
is _ _ O
1 _ _ O
word _ _ O
for _ _ O
2 _ _ O
memories _ _ O
… _ _ O
7 _ _ O

Multi-cycle _ _ O
● _ _ O
a _ _ O
Von _ _ O
Neumann _ _ O
machine _ _ O
has _ _ O
one _ _ O
memory _ _ O
, _ _ O
but _ _ O
uses _ _ O
multiple _ _ O
clock _ _ O
cycles _ _ O
to _ _ O
execute _ _ O
each _ _ O
instruction _ _ O
Cycle _ _ O
1 _ _ O
: _ _ O
Instruction _ _ O
Address _ _ O
PC _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
( _ _ O
s0 _ _ O
) _ _ O
Instruction _ _ O
Control _ _ O
Memory _ _ O
Loaded _ _ O
word _ _ O
Cycle _ _ O
2 _ _ O
: _ _ O
Load _ _ O
word _ _ O
address _ _ O
multi-cycle _ _ O
machines _ _ O
are _ _ O
by _ _ O
far _ _ O
the _ _ O
most _ _ O
common _ _ O
today _ _ O
but _ _ O
they _ _ O
're _ _ O
more _ _ O
complex _ _ O
… _ _ O
8 _ _ O

The _ _ O
Interconnect _ _ O
9 _ _ O

Got _ _ O
ta _ _ O
keep _ _ O
em _ _ O
separated _ _ O
interconnected _ _ O
● _ _ O
we _ _ O
've _ _ O
got _ _ O
pieces _ _ O
of _ _ O
a _ _ O
CPU _ _ O
, _ _ O
but _ _ O
they _ _ O
do _ _ O
n't _ _ O
operate _ _ O
in _ _ O
isolation _ _ O
● _ _ O
we _ _ O
got _ _ O
ta _ _ O
hook _ _ O
em _ _ O
together _ _ O
. _ _ O
but _ _ O
which _ _ O
parts _ _ O
hook _ _ O
to _ _ O
which _ _ O
? _ _ O
● _ _ O
the _ _ O
instructions _ _ O
in _ _ O
the _ _ O
ISA _ _ O
tell _ _ O
you _ _ O
what _ _ O
has _ _ O
to _ _ O
connect _ _ O
to _ _ O
what _ _ O
. _ _ O
PC _ _ O
that _ _ O
can _ _ O
branch _ _ O
and _ _ O
jump _ _ O
ALU _ _ O
Instruction _ _ O
Memory _ _ O
Register _ _ O
File _ _ O
Data _ _ O
Memory _ _ O
10 _ _ O

Slowly _ _ O
coming _ _ O
together _ _ O
● _ _ O
if _ _ O
we _ _ O
look _ _ O
at _ _ O
all _ _ O
the _ _ O
different _ _ O
instructions _ _ O
we _ _ O
want _ _ O
to _ _ O
support _ _ O
, _ _ O
we _ _ O
'll _ _ O
start _ _ O
to _ _ O
get _ _ O
an _ _ O
idea _ _ O
of _ _ O
what _ _ O
data _ _ O
goes _ _ O
where _ _ O
sub _ _ O
v0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
t0 _ _ O
s0 _ _ O
t1 _ _ O
Register _ _ O
File _ _ O
t3 _ _ O
v0 _ _ O
Register _ _ O
File _ _ O
sw _ _ O
s0 _ _ O
, _ _ O
4 _ _ O
( _ _ O
t3 _ _ O
) _ _ O
- _ _ O
ALU _ _ O
Data _ _ O
Data _ _ O
Memory _ _ O
+ _ _ O
4 _ _ O
jal _ _ O
move_ball _ _ O
address _ _ O
of _ _ O
move_ball _ _ O
PC _ _ O
+ _ _ O
ra _ _ O
4 _ _ O
ALU _ _ O
? _ _ O
Register _ _ O
File _ _ O
ALU _ _ O
Address _ _ O
how _ _ O
do _ _ O
we _ _ O
make _ _ O
all _ _ O
these _ _ O
different _ _ O
things _ _ O
happen _ _ O
with _ _ O
one _ _ O
set _ _ O
of _ _ O
hardware _ _ O
… _ _ O
? _ _ O
11 _ _ O

PC _ _ O
to _ _ O
the _ _ O
left _ _ O
of _ _ O
me _ _ O
, _ _ O
ALU _ _ O
to _ _ O
the _ _ O
right _ _ O
, _ _ O
here _ _ O
I _ _ O
am _ _ O
● _ _ O
the _ _ O
interconnect _ _ O
lets _ _ O
the _ _ O
CPU _ _ O
parts _ _ O
combine _ _ O
in _ _ O
many _ _ O
ways _ _ O
● _ _ O
it _ _ O
's _ _ O
like _ _ O
the _ _ O
CPU _ _ O
's _ _ O
" _ _ O
circulatory _ _ O
system _ _ O
" _ _ O
– _ _ O
it _ _ O
moves _ _ O
data _ _ O
around _ _ O
PC _ _ O
Instruction _ _ O
Memory _ _ O
jal _ _ O
jr _ _ O
stores _ _ O
Register _ _ O
File _ _ O
li _ _ O
( _ _ O
immediate _ _ O
) _ _ O
loads _ _ O
Data _ _ O
Memory _ _ O
add _ _ O
, _ _ O
sub _ _ O
, _ _ O
etc _ _ O
. _ _ O
addi _ _ O
, _ _ O
ori _ _ O
etc _ _ O
. _ _ O
ALU _ _ O
it _ _ O
's _ _ O
starting _ _ O
to _ _ O
take _ _ O
shape _ _ O
… _ _ O
12 _ _ O

A _ _ O
little _ _ O
technique _ _ O
: _ _ O
an _ _ O
interconnect _ _ O
matrix _ _ O
● _ _ O
you _ _ O
can _ _ O
make _ _ O
a _ _ O
table _ _ O
to _ _ O
keep _ _ O
track _ _ O
of _ _ O
what _ _ O
things _ _ O
connect _ _ O
to _ _ O
what _ _ O
. _ _ O
Does _ _ O
the _ _ O
data _ _ O
flow _ _ O
from _ _ O
here _ _ O
… _ _ O
ALU _ _ O
… _ _ O
to _ _ O
here _ _ O
? _ _ O
PC _ _ O
ALU _ _ O
PC _ _ O
Regs _ _ O
IM _ _ O
DM _ _ O
√ _ _ O
√ _ _ O
√ _ _ O
Regs _ _ O
√ _ _ O
√ _ _ O
√ _ _ O
√ _ _ O
IM _ _ O
DM _ _ O
√ _ _ O
now _ _ O
consider _ _ O
all _ _ O
the _ _ O
instructions _ _ O
your _ _ O
CPU _ _ O
should _ _ O
support _ _ O
, _ _ O
and _ _ O
mark _ _ O
the _ _ O
cells _ _ O
accordingly _ _ O
. _ _ O
lw _ _ O
sw _ _ O
j _ _ O
beq _ _ O
add _ _ O
, _ _ O
sub _ _ O
, _ _ O
and _ _ O
, _ _ O
or _ _ O
jr _ _ O
li _ _ O
? _ _ O
jal _ _ O
any _ _ O
component _ _ O
( _ _ O
column _ _ O
) _ _ O
with _ _ O
multiple _ _ O
things _ _ O
coming _ _ O
into _ _ O
it _ _ O
will _ _ O
need _ _ O
a _ _ O
MUX _ _ O
. _ _ O
( _ _ O
huh _ _ O
? _ _ O
next _ _ O
slide _ _ O
. _ _ O
) _ _ O
13 _ _ O

Conjunction _ _ O
junction _ _ O
● _ _ O
the _ _ O
interconnect _ _ O
makes _ _ O
choices _ _ O
about _ _ O
which _ _ O
things _ _ O
go _ _ O
where _ _ O
only _ _ O
one _ _ O
of _ _ O
these _ _ O
is _ _ O
written _ _ O
to _ _ O
the _ _ O
register _ _ O
file _ _ O
ALU _ _ O
results _ _ O
so _ _ O
how _ _ O
do _ _ O
we _ _ O
choooooose _ _ O
which _ _ O
thing _ _ O
to _ _ O
write _ _ O
? _ _ O
data _ _ O
from _ _ O
memory _ _ O
now _ _ O
we _ _ O
have _ _ O
a _ _ O
select _ _ O
pin _ _ O
. _ _ O
this _ _ O
is _ _ O
a _ _ O
control _ _ O
signal _ _ O
! _ _ O
Register _ _ O
File _ _ O
instruction _ _ O
immediates _ _ O
saved _ _ O
PC _ _ O
for _ _ O
jal _ _ O
there _ _ O
will _ _ O
be _ _ O
several _ _ O
MUXes _ _ O
in _ _ O
the _ _ O
interconnect _ _ O
, _ _ O
and _ _ O
each _ _ O
needs _ _ O
a _ _ O
control _ _ O
signal _ _ O
2 _ _ O
RegDataSrc _ _ O
the _ _ O
book _ _ O
calls _ _ O
this _ _ O
" _ _ O
MemToReg _ _ O
“ _ _ O
. _ _ O
Because _ _ O
in _ _ O
its _ _ O
model _ _ O
the _ _ O
value _ _ O
is _ _ O
1 _ _ O
when _ _ O
the _ _ O
memory _ _ O
is _ _ O
read _ _ O
into _ _ O
a _ _ O
register _ _ O
14 _ _ O

Interconnected _ _ O
( _ _ O
MIPS _ _ O
, _ _ O
not _ _ O
your _ _ O
project _ _ O
) _ _ O
● _ _ O
if _ _ O
we _ _ O
want _ _ O
to _ _ O
make _ _ O
a _ _ O
suuuuper _ _ O
simple _ _ O
version _ _ O
of _ _ O
MIPS _ _ O
, _ _ O
we _ _ O
can _ _ O
connect _ _ O
the _ _ O
pieces _ _ O
together _ _ O
into _ _ O
a _ _ O
datapath _ _ O
like _ _ O
this _ _ O
Data _ _ O
( _ _ O
this _ _ O
version _ _ O
does _ _ O
n't _ _ O
RegWrite _ _ O
MemWrite _ _ O
Data _ _ O
support _ _ O
jal _ _ O
, _ _ O
and _ _ O
… _ _ O
Memory _ _ O
but _ _ O
that _ _ O
's _ _ O
fiiiine _ _ O
) _ _ O
rd _ _ O
rs _ _ O
rt _ _ O
Address _ _ O
Register _ _ O
File _ _ O
ALU _ _ O
RegDataSrc _ _ O
imm _ _ O
field _ _ O
ALUSrc _ _ O
ALUOp _ _ O
how _ _ O
can _ _ O
we _ _ O
use _ _ O
this _ _ O
to _ _ O
implement _ _ O
add _ _ O
? _ _ O
sub _ _ O
? _ _ O
addi _ _ O
? _ _ O
lw _ _ O
? _ _ O
sw _ _ O
? _ _ O
li _ _ O
? _ _ O
but _ _ O
now _ _ O
we _ _ O
need _ _ O
to _ _ O
, _ _ O
uh _ _ O
, _ _ O
control _ _ O
the _ _ O
control _ _ O
signals _ _ O
. _ _ O
15 _ _ O

The _ _ O
Forgotten _ _ O
Phase _ _ O
: _ _ O
Operand _ _ O
Fetch _ _ O
16 _ _ O

A _ _ O
little _ _ O
extra _ _ O
step _ _ O
● _ _ O
operand _ _ O
fetch _ _ O
is _ _ O
a _ _ O
phase _ _ O
of _ _ O
instruction _ _ O
execution _ _ O
you _ _ O
might _ _ O
see _ _ O
● _ _ O
it _ _ O
fetches _ _ O
the _ _ O
values _ _ O
to _ _ O
be _ _ O
operated _ _ O
on _ _ O
F _ _ O
D _ _ O
X _ _ O
M _ _ O
W _ _ O
it _ _ O
happens _ _ O
after _ _ O
the _ _ O
instruction _ _ O
is _ _ O
decoded _ _ O
. _ _ O
where _ _ O
do _ _ O
values _ _ O
have _ _ O
to _ _ O
be _ _ O
for _ _ O
the _ _ O
CPU _ _ O
to _ _ O
operate _ _ O
on _ _ O
them _ _ O
? _ _ O
in _ _ O
the _ _ O
registers _ _ O
… _ _ O
? _ _ O
17 _ _ O

Vestigial _ _ O
● _ _ O
in _ _ O
MIPS _ _ O
( _ _ O
and _ _ O
your _ _ O
project _ _ O
) _ _ O
, _ _ O
operand _ _ O
fetch _ _ O
is _ _ O
super _ _ O
simple _ _ O
: _ _ O
this _ _ O
is _ _ O
by _ _ O
design _ _ O
: _ _ O
load-store _ _ O
architectures _ _ O
have _ _ O
very _ _ O
simple _ _ O
operand _ _ O
fetch _ _ O
phases _ _ O
. _ _ O
Register _ _ O
File _ _ O
ALU _ _ O
imm _ _ O
field _ _ O
why _ _ O
? _ _ O
well _ _ O
… _ _ O
here _ _ O
it _ _ O
is _ _ O
! _ _ O
18 _ _ O

Operand _ _ O
Fetch _ _ O
in _ _ O
x86 _ _ O
● _ _ O
as _ _ O
a _ _ O
CISC _ _ O
, _ _ O
x86 _ _ O
has _ _ O
some _ _ O
… _ _ O
crazy _ _ O
instructions _ _ O
. _ _ O
inc _ _ O
[ _ _ O
eax _ _ O
+ _ _ O
ecx*4 _ _ O
+ _ _ O
12 _ _ O
] _ _ O
this _ _ O
is _ _ O
an _ _ O
effective _ _ O
address _ _ O
calculation _ _ O
. _ _ O
( _ _ O
the _ _ O
brackets _ _ O
mean _ _ O
" _ _ O
access _ _ O
memory _ _ O
. _ _ O
" _ _ O
) _ _ O
this _ _ O
is _ _ O
operand _ _ O
fetch _ _ O
. _ _ O
be _ _ O
very _ _ O
glad _ _ O
you _ _ O
wo _ _ O
n't _ _ O
have _ _ O
to _ _ O
do _ _ O
this _ _ O
for _ _ O
your _ _ O
project _ _ O
. _ _ O
here _ _ O
's _ _ O
what _ _ O
the _ _ O
CPU _ _ O
has _ _ O
to _ _ O
do _ _ O
for _ _ O
this _ _ O
instruction _ _ O
: _ _ O
1 _ _ O
. _ _ O
multiply _ _ O
ecx _ _ O
by _ _ O
4 _ _ O
2 _ _ O
. _ _ O
add _ _ O
eax _ _ O
to _ _ O
that _ _ O
3 _ _ O
. _ _ O
add _ _ O
12 _ _ O
to _ _ O
that _ _ O
4 _ _ O
. _ _ O
load _ _ O
a _ _ O
word _ _ O
from _ _ O
that _ _ O
address _ _ O
5 _ _ O
. _ _ O
add _ _ O
1 _ _ O
to _ _ O
that _ _ O
value _ _ O
6 _ _ O
. _ _ O
store _ _ O
that _ _ O
value _ _ O
back _ _ O
into _ _ O
the _ _ O
address _ _ O
19 _ _ O

The _ _ O
Control _ _ O
20 _ _ O

Feeling _ _ O
nervous _ _ O
● _ _ O
the _ _ O
control _ _ O
is _ _ O
what _ _ O
sets _ _ O
the _ _ O
write _ _ O
enables _ _ O
and _ _ O
selects _ _ O
to _ _ O
the _ _ O
appropriate _ _ O
values _ _ O
to _ _ O
make _ _ O
each _ _ O
instruction _ _ O
happen _ _ O
● _ _ O
it _ _ O
's _ _ O
like _ _ O
the _ _ O
CPU _ _ O
's _ _ O
brain _ _ O
and _ _ O
nervous _ _ O
system _ _ O
it _ _ O
does _ _ O
this _ _ O
by _ _ O
reading _ _ O
the _ _ O
instructions _ _ O
. _ _ O
c'm _ _ O
on _ _ O
you _ _ O
lazy _ _ O
bums _ _ O
awwwww _ _ O
we _ _ O
do _ _ O
n't _ _ O
wannaaaa _ _ O
sub _ _ O
v0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
👀 _ _ O
Control _ _ O
Register _ _ O
file _ _ O
, _ _ O
read _ _ O
t0 _ _ O
and _ _ O
t1 _ _ O
, _ _ O
and _ _ O
write _ _ O
to _ _ O
v0 _ _ O
. _ _ O
ALU _ _ O
, _ _ O
do _ _ O
subtraction _ _ O
. _ _ O
Interconnect _ _ O
, _ _ O
route _ _ O
the _ _ O
data _ _ O
from _ _ O
the _ _ O
two _ _ O
registers _ _ O
into _ _ O
the _ _ O
ALU _ _ O
and _ _ O
from _ _ O
the _ _ O
ALU _ _ O
into _ _ O
the _ _ O
register _ _ O
file _ _ O
. _ _ O
Data _ _ O
memory _ _ O
, _ _ O
you _ _ O
get _ _ O
to _ _ O
take _ _ O
a _ _ O
break _ _ O
. _ _ O
ALU _ _ O
Register _ _ O
File _ _ O
Data _ _ O
Memory _ _ O
yissssss _ _ O
21 _ _ O

Two _ _ O
kinds _ _ O
of _ _ O
control _ _ O
signals _ _ O
● _ _ O
first _ _ O
there _ _ O
are _ _ O
the _ _ O
selects _ _ O
o _ _ O
these _ _ O
go _ _ O
into _ _ O
the _ _ O
select _ _ O
pins _ _ O
of _ _ O
muxes _ _ O
, _ _ O
demuxes _ _ O
, _ _ O
or _ _ O
decoders _ _ O
o _ _ O
they _ _ O
can _ _ O
be _ _ O
any _ _ O
number _ _ O
of _ _ O
bits _ _ O
● _ _ O
then _ _ O
there _ _ O
are _ _ O
the _ _ O
write _ _ O
enables _ _ O
o _ _ O
these _ _ O
tell _ _ O
registers _ _ O
and _ _ O
memory _ _ O
when _ _ O
to _ _ O
store _ _ O
data _ _ O
o _ _ O
they _ _ O
're _ _ O
Booleans _ _ O
- _ _ O
0 _ _ O
or _ _ O
1 _ _ O
● _ _ O
they _ _ O
often _ _ O
come _ _ O
in _ _ O
pairs _ _ O
! _ _ O
o _ _ O
like _ _ O
RegWrite _ _ O
and _ _ O
RegDataSrc _ _ O
. _ _ O
o _ _ O
they _ _ O
decide _ _ O
what _ _ O
to _ _ O
write _ _ O
and _ _ O
when _ _ O
to _ _ O
write _ _ O
it _ _ O
. _ _ O
RegWrite _ _ O
rd _ _ O
5 _ _ O
Register _ _ O
File _ _ O
RegDataSrc _ _ O
MemWrite _ _ O
Data _ _ O
Memory _ _ O
22 _ _ O

Got _ _ O
ta _ _ O
write _ _ O
it _ _ O
down _ _ O
● _ _ O
write _ _ O
enables _ _ O
are _ _ O
kind _ _ O
of _ _ O
the _ _ O
basis _ _ O
of _ _ O
" _ _ O
things _ _ O
happening _ _ O
in _ _ O
a _ _ O
CPU _ _ O
" _ _ O
● _ _ O
almost _ _ O
every _ _ O
instruction _ _ O
writes _ _ O
something _ _ O
somewhere _ _ O
! _ _ O
add _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
, _ _ O
t2 _ _ O
writes _ _ O
to _ _ O
t0 _ _ O
beq _ _ O
s0 _ _ O
, _ _ O
10 _ _ O
, _ _ O
end _ _ O
might _ _ O
write _ _ O
to _ _ O
the _ _ O
PC _ _ O
sw _ _ O
s0 _ _ O
, _ _ O
( _ _ O
t0 _ _ O
) _ _ O
writes _ _ O
to _ _ O
memory _ _ O
jal _ _ O
func1 _ _ O
writes _ _ O
to _ _ O
the _ _ O
PC _ _ O
and _ _ O
ra _ _ O
! _ _ O
if _ _ O
an _ _ O
instruction _ _ O
does _ _ O
n't _ _ O
write _ _ O
anything _ _ O
, _ _ O
it _ _ O
's _ _ O
a _ _ O
no-op _ _ O
( _ _ O
nop _ _ O
) _ _ O
. _ _ O
( _ _ O
if _ _ O
an _ _ O
instruction _ _ O
does _ _ O
not _ _ O
change _ _ O
anything _ _ O
, _ _ O
did _ _ O
it _ _ O
ever _ _ O
happen _ _ O
? _ _ O
) _ _ O
what _ _ O
changes _ _ O
when _ _ O
a _ _ O
conditional _ _ O
branch _ _ O
is _ _ O
n't _ _ O
taken _ _ O
? _ _ O
23 _ _ O

The _ _ O
control _ _ O
hardware _ _ O
4 _ _ O
+ _ _ O
● _ _ O
we _ _ O
connected _ _ O
the _ _ O
datapath _ _ O
together _ _ O
; _ _ O
now _ _ O
for _ _ O
the _ _ O
control _ _ O
bits _ _ O
immediate _ _ O
( _ _ O
jump _ _ O
target _ _ O
) _ _ O
PCSrc _ _ O
PC _ _ O
rt _ _ O
rd _ _ O
immediate _ _ O
address _ _ O
goes _ _ O
in _ _ O
… _ _ O
Instruction _ _ O
… _ _ O
instruction _ _ O
Memory _ _ O
comes _ _ O
out _ _ O
. _ _ O
PCSrc _ _ O
rs _ _ O
Control _ _ O
RegWrite _ _ O
MemWrite _ _ O
instruction _ _ O
goes _ _ O
in _ _ O
… _ _ O
… _ _ O
control _ _ O
signals _ _ O
come _ _ O
out _ _ O
. _ _ O
somehow _ _ O
. _ _ O
ALUSrc _ _ O
ALUOp _ _ O
RegDataSrc _ _ O
24 _ _ O

Instruction _ _ O
Decoding _ _ O
25 _ _ O

Pull _ _ O
' _ _ O
n _ _ O
' _ _ O
peel _ _ O
● _ _ O
the _ _ O
first _ _ O
step _ _ O
is _ _ O
to _ _ O
split _ _ O
the _ _ O
encoded _ _ O
instruction _ _ O
up _ _ O
● _ _ O
but _ _ O
which _ _ O
instruction _ _ O
format _ _ O
is _ _ O
it _ _ O
? _ _ O
actually _ _ O
, _ _ O
it _ _ O
does _ _ O
n't _ _ O
matter _ _ O
. _ _ O
R _ _ O
opcode _ _ O
31 _ _ O
31 _ _ O
26 _ _ O
25 _ _ O
rs _ _ O
26 _ _ O
25 _ _ O
I _ _ O
opcode _ _ O
31 _ _ O
21 _ _ O
20 _ _ O
16 _ _ O
15 _ _ O
rt _ _ O
21 _ _ O
20 _ _ O
rs _ _ O
0 _ _ O
31 _ _ O
- _ _ O
26 _ _ O
shamt _ _ O
funct _ _ O
25 _ _ O
- _ _ O
21 _ _ O
0 _ _ O
20 _ _ O
- _ _ O
16 _ _ O
11 _ _ O
10 _ _ O
rd _ _ O
6 _ _ O
5 _ _ O
16 _ _ O
15 _ _ O
rt _ _ O
immediate _ _ O
26 _ _ O
25 _ _ O
J _ _ O
opcode _ _ O
15 _ _ O
- _ _ O
11 _ _ O
0 _ _ O
target _ _ O
" _ _ O
do _ _ O
everything _ _ O
at _ _ O
once _ _ O
, _ _ O
but _ _ O
32 _ _ O
use _ _ O
only _ _ O
what _ _ O
you _ _ O
need _ _ O
. _ _ O
" _ _ O
instruction _ _ O
10 _ _ O
- _ _ O
6 _ _ O
5 _ _ O
- _ _ O
0 _ _ O
15 _ _ O
- _ _ O
0 _ _ O
25 _ _ O
- _ _ O
0 _ _ O
opcode _ _ O
rs _ _ O
rt _ _ O
rd _ _ O
shamt _ _ O
funct _ _ O
immediate _ _ O
target _ _ O
26 _ _ O

No _ _ O
, _ _ O
really _ _ O
, _ _ O
it _ _ O
's _ _ O
fine _ _ O
, _ _ O
do _ _ O
n't _ _ O
worry _ _ O
about _ _ O
it _ _ O
● _ _ O
suppose _ _ O
the _ _ O
encoded _ _ O
instruction _ _ O
was _ _ O
addi _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
-1 _ _ O
. _ _ O
op _ _ O
put _ _ O
it _ _ O
through _ _ O
the _ _ O
splitter _ _ O
and _ _ O
… _ _ O
addi _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
-1 _ _ O
32 _ _ O
0x2210FFFF _ _ O
… _ _ O
out _ _ O
come _ _ O
a _ _ O
bunch _ _ O
of _ _ O
values _ _ O
. _ _ O
31 _ _ O
26 _ _ O
25 _ _ O
21 _ _ O
20 _ _ O
16 _ _ O
15 _ _ O
0 _ _ O
rt _ _ O
immediate _ _ O
0x08 _ _ O
opcode _ _ O
rs _ _ O
rs _ _ O
addi _ _ O
is _ _ O
an _ _ O
I-type _ _ O
instruction _ _ O
. _ _ O
0x10 _ _ O
rt _ _ O
0x10 _ _ O
opcode _ _ O
, _ _ O
rs _ _ O
, _ _ O
rt _ _ O
, _ _ O
and _ _ O
immediate _ _ O
rd _ _ O
will _ _ O
be _ _ O
used _ _ O
. _ _ O
0x1F _ _ O
shamt _ _ O
the _ _ O
rest _ _ O
are _ _ O
bogus _ _ O
and _ _ O
will _ _ O
be _ _ O
0x1F _ _ O
funct _ _ O
ignored _ _ O
. _ _ O
see _ _ O
? _ _ O
it _ _ O
's _ _ O
fiiiiiine _ _ O
0x3F _ _ O
imm _ _ O
0xFFFF _ _ O
target _ _ O
0x210FFFF _ _ O
27 _ _ O

Making _ _ O
the _ _ O
control _ _ O
work _ _ O
● _ _ O
the _ _ O
control _ _ O
is _ _ O
a _ _ O
boolean _ _ O
function _ _ O
that _ _ O
takes _ _ O
the _ _ O
instruction _ _ O
opcode _ _ O
as _ _ O
its _ _ O
input _ _ O
and _ _ O
outputs _ _ O
the _ _ O
control _ _ O
signals _ _ O
. _ _ O
● _ _ O
in _ _ O
other _ _ O
words _ _ O
, _ _ O
it _ _ O
's _ _ O
a _ _ O
big _ _ O
fat _ _ O
truth _ _ O
table _ _ O
. _ _ O
opcode _ _ O
PCSrc _ _ O
RegDataSrc _ _ O
RegWrite _ _ O
ALUOp _ _ O
… _ _ O
000000 _ _ O
000001 _ _ O
000010 _ _ O
000011 _ _ O
000100 _ _ O
000101 _ _ O
… _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
… _ _ O
00 _ _ O
01 _ _ O
00 _ _ O
00 _ _ O
11 _ _ O
10 _ _ O
… _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
… _ _ O
000 _ _ O
110 _ _ O
010 _ _ O
011 _ _ O
000 _ _ O
010 _ _ O
… _ _ O
… _ _ O
… _ _ O
… _ _ O
… _ _ O
… _ _ O
… _ _ O
… _ _ O
This _ _ O
is _ _ O
not _ _ O
the _ _ O
only _ _ O
way _ _ O
of _ _ O
making _ _ O
your _ _ O
control _ _ O
unit _ _ O
. _ _ O
it _ _ O
's _ _ O
time-consuming _ _ O
, _ _ O
confusing _ _ O
, _ _ O
hard _ _ O
to _ _ O
debug _ _ O
, _ _ O
and _ _ O
hard _ _ O
to _ _ O
change _ _ O
. _ _ O
you _ _ O
will _ _ O
go _ _ O
insane _ _ O
. _ _ O
These _ _ O
are _ _ O
made _ _ O
up _ _ O
numbers _ _ O
. _ _ O
Please _ _ O
do _ _ O
n't _ _ O
try _ _ O
to _ _ O
use _ _ O
them _ _ O
! _ _ O
28 _ _ O

A _ _ O
more _ _ O
approachable _ _ O
approach _ _ O
● _ _ O
Here _ _ O
's _ _ O
a _ _ O
great _ _ O
use _ _ O
for _ _ O
a _ _ O
decoder _ _ O
: _ _ O
decoding _ _ O
. _ _ O
( _ _ O
huh _ _ O
. _ _ O
) _ _ O
opcode _ _ O
< _ _ O
r-type _ _ O
> _ _ O
exactly _ _ O
one _ _ O
of _ _ O
these _ _ O
will _ _ O
be _ _ O
on _ _ O
at _ _ O
a _ _ O
time _ _ O
. _ _ O
< _ _ O
uhh _ _ O
random _ _ O
crap _ _ O
> _ _ O
j _ _ O
jal _ _ O
now _ _ O
it _ _ O
's _ _ O
just _ _ O
a _ _ O
matter _ _ O
of _ _ O
coming _ _ O
up _ _ O
with _ _ O
the _ _ O
logic _ _ O
for _ _ O
each _ _ O
of _ _ O
the _ _ O
control _ _ O
signals _ _ O
. _ _ O
beq _ _ O
bne _ _ O
blez _ _ O
for _ _ O
that _ _ O
, _ _ O
it _ _ O
's _ _ O
good _ _ O
to _ _ O
focus _ _ O
on _ _ O
one _ _ O
control _ _ O
signal _ _ O
at _ _ O
a _ _ O
time _ _ O
. _ _ O
bgtz _ _ O
addi _ _ O
addiu _ _ O
slti _ _ O
sltiu _ _ O
29 _ _ O

< _ _ O
the _ _ O
sound _ _ O
a _ _ O
seal _ _ O
makes _ _ O
> _ _ O
● _ _ O
let _ _ O
's _ _ O
say _ _ O
we _ _ O
want _ _ O
to _ _ O
come _ _ O
up _ _ O
with _ _ O
the _ _ O
MemWrite _ _ O
control _ _ O
signal _ _ O
● _ _ O
which _ _ O
MIPS _ _ O
instructions _ _ O
write _ _ O
to _ _ O
memory _ _ O
? _ _ O
sw _ _ O
sh _ _ O
MemWrite _ _ O
pretty _ _ O
straightforward _ _ O
, _ _ O
huh _ _ O
? _ _ O
sb _ _ O
what _ _ O
about _ _ O
multi-bit _ _ O
control _ _ O
signals _ _ O
, _ _ O
like _ _ O
your _ _ O
ALU _ _ O
operation _ _ O
? _ _ O
there _ _ O
are _ _ O
a _ _ O
few _ _ O
approaches _ _ O
… _ _ O
30 _ _ O

The _ _ O
brute-force _ _ O
approach _ _ O
: _ _ O
the _ _ O
MUXtipede _ _ O
● _ _ O
in _ _ O
this _ _ O
approach _ _ O
, _ _ O
you _ _ O
use _ _ O
enormous _ _ O
MUXes _ _ O
to _ _ O
select _ _ O
constants _ _ O
. _ _ O
opcode _ _ O
ALUOp _ _ O
for _ _ O
opcode _ _ O
0 _ _ O
ALUOp _ _ O
for _ _ O
opcode _ _ O
1 _ _ O
ALUOp _ _ O
for _ _ O
opcode _ _ O
2 _ _ O
ALUOp _ _ O
for _ _ O
opcode _ _ O
3 _ _ O
ALUOp _ _ O
for _ _ O
opcode _ _ O
4 _ _ O
ALUOp _ _ O
for _ _ O
opcode _ _ O
5 _ _ O
ALUOp _ _ O
for _ _ O
opcode _ _ O
6 _ _ O
ALUOp _ _ O
for _ _ O
opcode _ _ O
7 _ _ O
ALUOp _ _ O
for _ _ O
opcode _ _ O
8 _ _ O
ALUOp _ _ O
for _ _ O
opcode _ _ O
9 _ _ O
ALUOp _ _ O
for _ _ O
opcode _ _ O
A _ _ O
ALUOp _ _ O
for _ _ O
opcode _ _ O
B _ _ O
it _ _ O
… _ _ O
works _ _ O
, _ _ O
but _ _ O
it _ _ O
's _ _ O
hard _ _ O
to _ _ O
follow _ _ O
. _ _ O
it _ _ O
's _ _ O
hard _ _ O
to _ _ O
tell _ _ O
which _ _ O
constant _ _ O
is _ _ O
used _ _ O
for _ _ O
which _ _ O
instruction _ _ O
. _ _ O
it _ _ O
's _ _ O
also _ _ O
hard _ _ O
to _ _ O
add _ _ O
new _ _ O
instructions _ _ O
. _ _ O
ALUOp _ _ O
we _ _ O
can _ _ O
make _ _ O
this _ _ O
a _ _ O
tiny _ _ O
bit _ _ O
MUCH _ _ O
MORE _ _ O
elegant _ _ O
! _ _ O
31 _ _ O

Priority _ _ O
Encoders _ _ O
● _ _ O
a _ _ O
priority _ _ O
encoder _ _ O
is _ _ O
kind _ _ O
of _ _ O
the _ _ O
opposite _ _ O
of _ _ O
a _ _ O
decoder _ _ O
. _ _ O
● _ _ O
you _ _ O
give _ _ O
it _ _ O
several _ _ O
1-bit _ _ O
inputs _ _ O
, _ _ O
and _ _ O
it _ _ O
tells _ _ O
you _ _ O
which _ _ O
one _ _ O
is _ _ O
1 _ _ O
. _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
Pri _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
Pri _ _ O
2 _ _ O
0 _ _ O
1 _ _ O
Pri _ _ O
if _ _ O
none _ _ O
of _ _ O
the _ _ O
inputs _ _ O
is _ _ O
1 _ _ O
, _ _ O
then _ _ O
it _ _ O
gives _ _ O
you _ _ O
X _ _ O
… _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
Pri _ _ O
X _ _ O
0 _ _ O
Pri _ _ O
3 _ _ O
to _ _ O
avoid _ _ O
this _ _ O
, _ _ O
put _ _ O
a _ _ O
constant _ _ O
1 _ _ O
as _ _ O
the _ _ O
first _ _ O
input _ _ O
. _ _ O
32 _ _ O

Multi-bit _ _ O
control _ _ O
signals _ _ O
● _ _ O
let _ _ O
's _ _ O
say _ _ O
we _ _ O
have _ _ O
these _ _ O
instructions _ _ O
, _ _ O
and _ _ O
these _ _ O
ALU _ _ O
operations _ _ O
. _ _ O
● _ _ O
for _ _ O
each _ _ O
input _ _ O
, _ _ O
ask _ _ O
: _ _ O
which _ _ O
instructions _ _ O
need _ _ O
this _ _ O
ALU _ _ O
operation _ _ O
? _ _ O
add _ _ O
addi _ _ O
sub _ _ O
subi _ _ O
and _ _ O
or _ _ O
0 _ _ O
: _ _ O
& _ _ O
1 _ _ O
: _ _ O
| _ _ O
2 _ _ O
: _ _ O
+ _ _ O
3 _ _ O
: _ _ O
- _ _ O
ALUOp _ _ O
0 _ _ O
is _ _ O
the _ _ O
default _ _ O
, _ _ O
so _ _ O
and _ _ O
is _ _ O
handled _ _ O
. _ _ O
1 _ _ O
which _ _ O
instruction _ _ O
( _ _ O
s _ _ O
) _ _ O
need _ _ O
OR _ _ O
( _ _ O
1 _ _ O
) _ _ O
? _ _ O
or _ _ O
what _ _ O
about _ _ O
+ _ _ O
( _ _ O
2 _ _ O
) _ _ O
? _ _ O
what _ _ O
about _ _ O
- _ _ O
( _ _ O
3 _ _ O
) _ _ O
? _ _ O
add _ _ O
addi _ _ O
sub _ _ O
subi _ _ O
Pri _ _ O
ALUOp _ _ O
think _ _ O
of _ _ O
it _ _ O
like _ _ O
an _ _ O
upside-down _ _ O
if-else-if _ _ O
… _ _ O
33 _ _ O



