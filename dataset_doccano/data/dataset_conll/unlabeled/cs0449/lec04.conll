unlabeled|cs0449|lec04
-DOCSTART- -X- -X- O

3 _ _ O
Introduction _ _ O
to _ _ O
C _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
Introduction _ _ O
to _ _ O
Systems _ _ O
Software _ _ O
Luis _ _ O
Oliveira _ _ O
( _ _ O
with _ _ O
content _ _ O
borrowed _ _ O
from _ _ O
wilkie _ _ O
and _ _ O
Vinicius _ _ O
Petrucci _ _ O
) _ _ O

Overview _ _ O
of _ _ O
C _ _ O
What _ _ O
You _ _ O
C _ _ O
is _ _ O
What _ _ O
You _ _ O
Get _ _ O
2 _ _ O

C _ _ O
: _ _ O
The _ _ O
Universal _ _ O
Assembly _ _ O
Language _ _ O
C _ _ O
is _ _ O
not _ _ O
a _ _ O
“ _ _ O
very _ _ O
high-level _ _ O
” _ _ O
language _ _ O
, _ _ O
nor _ _ O
a _ _ O
“ _ _ O
big _ _ O
” _ _ O
one _ _ O
, _ _ O
and _ _ O
is _ _ O
not _ _ O
specialized _ _ O
to _ _ O
any _ _ O
particular _ _ O
area _ _ O
of _ _ O
application _ _ O
. _ _ O
But _ _ O
its _ _ O
absence _ _ O
of _ _ O
restrictions _ _ O
and _ _ O
its _ _ O
generality _ _ O
make _ _ O
it _ _ O
more _ _ O
convenient _ _ O
and _ _ O
effective _ _ O
for _ _ O
many _ _ O
tasks _ _ O
than _ _ O
supposedly _ _ O
more _ _ O
powerful _ _ O
languages _ _ O
. _ _ O
— _ _ O
Kernighan _ _ O
and _ _ O
Ritchie _ _ O
• _ _ O
Allows _ _ O
writing _ _ O
programs _ _ O
to _ _ O
exploit _ _ O
underlying _ _ O
features _ _ O
of _ _ O
the _ _ O
architecture _ _ O
– _ _ O
memory _ _ O
management _ _ O
, _ _ O
special _ _ O
instructions _ _ O
, _ _ O
parallelism _ _ O
. _ _ O
3 _ _ O

C _ _ O
: _ _ O
Relevance _ _ O
• _ _ O
From _ _ O
IEEE _ _ O
Spectrum _ _ O
: _ _ O
• _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
spectrum.ieee.org _ _ O
/ _ _ O
static _ _ O
/ _ _ O
interacti _ _ O
ve-the-top-programming-languages-2019 _ _ O
• _ _ O
Still _ _ O
relatively _ _ O
popular _ _ O
… _ _ O
• _ _ O
Lots _ _ O
of _ _ O
legacy _ _ O
code _ _ O
. _ _ O
• _ _ O
Lots _ _ O
of _ _ O
embedded _ _ O
devices _ _ O
. _ _ O
• _ _ O
Python _ _ O
, _ _ O
Java _ _ O
, _ _ O
R _ _ O
, _ _ O
JS _ _ O
are _ _ O
all _ _ O
written _ _ O
in _ _ O
C. _ _ O
4 _ _ O

TIOBE _ _ O
index _ _ O
TIOBE _ _ O
Programming _ _ O
Community _ _ O
index _ _ O
is _ _ O
an _ _ O
indicator _ _ O
of _ _ O
the _ _ O
popularity _ _ O
of _ _ O
programming _ _ O
languages _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.tiobe.com _ _ O
/ _ _ O
tiobe-index _ _ O
/ _ _ O

Compilation _ _ O
• _ _ O
C _ _ O
is _ _ O
a _ _ O
compiled _ _ O
language _ _ O
. _ _ O
• _ _ O
Code _ _ O
is _ _ O
generally _ _ O
converted _ _ O
into _ _ O
machine _ _ O
code _ _ O
. _ _ O
• _ _ O
Java _ _ O
, _ _ O
by _ _ O
contrast _ _ O
, _ _ O
indirectly _ _ O
converts _ _ O
to _ _ O
machine _ _ O
code _ _ O
using _ _ O
a _ _ O
byte-code _ _ O
. _ _ O
• _ _ O
Python _ _ O
, _ _ O
by _ _ O
contrast _ _ O
to _ _ O
both _ _ O
, _ _ O
interprets _ _ O
the _ _ O
code _ _ O
. _ _ O
• _ _ O
The _ _ O
difference _ _ O
is _ _ O
in _ _ O
a _ _ O
trade-off _ _ O
about _ _ O
when _ _ O
and _ _ O
how _ _ O
to _ _ O
create _ _ O
a _ _ O
machine-level _ _ O
representation _ _ O
of _ _ O
the _ _ O
source _ _ O
code _ _ O
. _ _ O
• _ _ O
A _ _ O
general _ _ O
C _ _ O
compiler _ _ O
will _ _ O
typically _ _ O
convert _ _ O
* _ _ O
.c _ _ O
source _ _ O
files _ _ O
into _ _ O
an _ _ O
intermediate _ _ O
* _ _ O
.o _ _ O
object _ _ O
file _ _ O
. _ _ O
Then _ _ O
, _ _ O
it _ _ O
will _ _ O
link _ _ O
these _ _ O
together _ _ O
to _ _ O
form _ _ O
an _ _ O
executable _ _ O
. _ _ O
• _ _ O
Assembly _ _ O
is _ _ O
also _ _ O
part _ _ O
of _ _ O
this _ _ O
process _ _ O
, _ _ O
but _ _ O
it _ _ O
is _ _ O
done _ _ O
behind _ _ O
the _ _ O
scenes _ _ O
. _ _ O
• _ _ O
You _ _ O
can _ _ O
have _ _ O
gcc _ _ O
( _ _ O
a _ _ O
common _ _ O
C _ _ O
compiler _ _ O
) _ _ O
spit _ _ O
out _ _ O
the _ _ O
assembly _ _ O
if _ _ O
you _ _ O
want _ _ O
! _ _ O
6 _ _ O

Compilation _ _ O
: _ _ O
Simple _ _ O
Overview _ _ O
– _ _ O
Step _ _ O
1 _ _ O
• _ _ O
The _ _ O
compiler _ _ O
takes _ _ O
source _ _ O
code _ _ O
( _ _ O
* _ _ O
.c _ _ O
files _ _ O
) _ _ O
and _ _ O
translates _ _ O
them _ _ O
into _ _ O
machine _ _ O
code _ _ O
. _ _ O
hello.c _ _ O
hello.o _ _ O
• _ _ O
This _ _ O
file _ _ O
is _ _ O
called _ _ O
an _ _ O
“ _ _ O
object _ _ O
file _ _ O
” _ _ O
and _ _ O
is _ _ O
just _ _ O
potentially _ _ O
one _ _ O
part _ _ O
of _ _ O
your _ _ O
overall _ _ O
project _ _ O
. _ _ O
• _ _ O
The _ _ O
machine _ _ O
code _ _ O
is _ _ O
not _ _ O
quite _ _ O
an _ _ O
executable _ _ O
. _ _ O
• _ _ O
This _ _ O
object _ _ O
file _ _ O
is _ _ O
JUST _ _ O
representing _ _ O
the _ _ O
code _ _ O
for _ _ O
that _ _ O
particular _ _ O
source _ _ O
file _ _ O
. _ _ O
• _ _ O
You _ _ O
may _ _ O
require _ _ O
extra _ _ O
stuff _ _ O
provided _ _ O
by _ _ O
the _ _ O
system _ _ O
elsewhere _ _ O
. _ _ O
7 _ _ O

Compilation _ _ O
: _ _ O
Simple _ _ O
Overview _ _ O
– _ _ O
Step _ _ O
2 _ _ O
• _ _ O
You _ _ O
may _ _ O
have _ _ O
multiple _ _ O
files _ _ O
. _ _ O
• _ _ O
They _ _ O
may _ _ O
reference _ _ O
each _ _ O
other _ _ O
. _ _ O
• _ _ O
For _ _ O
instance _ _ O
, _ _ O
one _ _ O
file _ _ O
may _ _ O
contain _ _ O
certain _ _ O
common _ _ O
functionality _ _ O
and _ _ O
then _ _ O
this _ _ O
is _ _ O
invoked _ _ O
by _ _ O
your _ _ O
program _ _ O
elsewhere _ _ O
. _ _ O
hello.c _ _ O
hello.o _ _ O
• _ _ O
You _ _ O
break _ _ O
your _ _ O
project _ _ O
up _ _ O
into _ _ O
pieces _ _ O
similarly _ _ O
to _ _ O
your _ _ O
Java _ _ O
programs _ _ O
. _ _ O
• _ _ O
The _ _ O
compiler _ _ O
treats _ _ O
them _ _ O
independently _ _ O
. _ _ O
util.c _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
– _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
util.o _ _ O
8 _ _ O

Compilation _ _ O
: _ _ O
Simple _ _ O
Overview _ _ O
– _ _ O
Step _ _ O
3 _ _ O
• _ _ O
Then _ _ O
, _ _ O
each _ _ O
piece _ _ O
is _ _ O
merged _ _ O
together _ _ O
to _ _ O
form _ _ O
the _ _ O
executable _ _ O
. _ _ O
• _ _ O
This _ _ O
process _ _ O
is _ _ O
called _ _ O
linking _ _ O
. _ _ O
hello.c _ _ O
hello.o _ _ O
util.c _ _ O
util.o _ _ O
hello _ _ O
stdio.o _ _ O
External _ _ O
Libraries _ _ O
• _ _ O
The _ _ O
name _ _ O
refers _ _ O
to _ _ O
how _ _ O
the _ _ O
references _ _ O
to _ _ O
functions _ _ O
, _ _ O
etc _ _ O
, _ _ O
between _ _ O
files _ _ O
are _ _ O
now _ _ O
filled _ _ O
in _ _ O
. _ _ O
• _ _ O
Before _ _ O
this _ _ O
step _ _ O
… _ _ O
it _ _ O
is _ _ O
unclear _ _ O
where _ _ O
functions _ _ O
will _ _ O
end _ _ O
up _ _ O
in _ _ O
the _ _ O
final _ _ O
executable _ _ O
. _ _ O
• _ _ O
Keep _ _ O
this _ _ O
in _ _ O
mind _ _ O
as _ _ O
we _ _ O
look _ _ O
at _ _ O
memory _ _ O
and _ _ O
pointers _ _ O
later _ _ O
! _ _ O
9 _ _ O

It _ _ O
's _ _ O
just _ _ O
a _ _ O
grinder _ _ O
. _ _ O
• _ _ O
In _ _ O
summary _ _ O
: _ _ O
hello.c _ _ O
code _ _ O
goes _ _ O
in _ _ O
, _ _ O
sausage _ _ O
object _ _ O
files _ _ O
come _ _ O
out _ _ O
Some _ _ O
compilers _ _ O
output _ _ O
assembly _ _ O
and _ _ O
rely _ _ O
on _ _ O
an _ _ O
assembler _ _ O
to _ _ O
produce _ _ O
machine _ _ O
code _ _ O
These _ _ O
days _ _ O
, _ _ O
it _ _ O
's _ _ O
common _ _ O
for _ _ O
the _ _ O
compiler _ _ O
itself _ _ O
to _ _ O
produce _ _ O
machine _ _ O
code _ _ O
, _ _ O
or _ _ O
some _ _ O
kind _ _ O
of _ _ O
platform-independent _ _ O
assembly _ _ O
code _ _ O
( _ _ O
typically _ _ O
: _ _ O
a _ _ O
bytecode _ _ O
) _ _ O
10 _ _ O

Compilation _ _ O
vs. _ _ O
Interpretation _ _ O
C _ _ O
( _ _ O
compiled _ _ O
) _ _ O
Python _ _ O
( _ _ O
interpreted _ _ O
) _ _ O
• _ _ O
Compiler _ _ O
+ _ _ O
Linker _ _ O
translates _ _ O
code _ _ O
into _ _ O
machine _ _ O
code _ _ O
. _ _ O
• _ _ O
Interpreter _ _ O
is _ _ O
written _ _ O
in _ _ O
some _ _ O
language _ _ O
( _ _ O
e.g. _ _ O
C _ _ O
) _ _ O
that _ _ O
is _ _ O
itself _ _ O
translated _ _ O
into _ _ O
machine _ _ O
code _ _ O
. _ _ O
• _ _ O
Machine _ _ O
code _ _ O
can _ _ O
be _ _ O
directly _ _ O
loaded _ _ O
by _ _ O
the _ _ O
OS _ _ O
and _ _ O
executed _ _ O
by _ _ O
the _ _ O
hardware _ _ O
. _ _ O
Fast _ _ O
! _ _ O
! _ _ O
• _ _ O
New _ _ O
hardware _ _ O
targets _ _ O
require _ _ O
recompilation _ _ O
in _ _ O
order _ _ O
to _ _ O
execute _ _ O
on _ _ O
those _ _ O
new _ _ O
systems _ _ O
. _ _ O
• _ _ O
The _ _ O
Python _ _ O
source _ _ O
code _ _ O
is _ _ O
then _ _ O
executed _ _ O
as _ _ O
it _ _ O
is _ _ O
read _ _ O
by _ _ O
the _ _ O
interpreter _ _ O
. _ _ O
Usually _ _ O
slower _ _ O
. _ _ O
• _ _ O
Very _ _ O
portable _ _ O
! _ _ O
No _ _ O
reliance _ _ O
on _ _ O
hardware _ _ O
beyond _ _ O
the _ _ O
interpreter _ _ O
. _ _ O
11 _ _ O

Compilation _ _ O
vs. _ _ O
Virtual _ _ O
Targets _ _ O
( _ _ O
bytecode _ _ O
) _ _ O
• _ _ O
Java _ _ O
translates _ _ O
source _ _ O
to _ _ O
a _ _ O
“ _ _ O
byte _ _ O
code _ _ O
” _ _ O
which _ _ O
is _ _ O
a _ _ O
made-up _ _ O
architecture _ _ O
, _ _ O
but _ _ O
it _ _ O
resembles _ _ O
machine _ _ O
code _ _ O
somewhat _ _ O
. _ _ O
• _ _ O
Technically _ _ O
, _ _ O
architectures _ _ O
could _ _ O
execute _ _ O
this _ _ O
byte _ _ O
code _ _ O
directly _ _ O
. _ _ O
• _ _ O
But _ _ O
these _ _ O
were _ _ O
never _ _ O
successful _ _ O
or _ _ O
practical _ _ O
. _ _ O
• _ _ O
Instead _ _ O
, _ _ O
a _ _ O
type _ _ O
of _ _ O
virtual _ _ O
machine _ _ O
simulates _ _ O
that _ _ O
pseudo-architecture _ _ O
. _ _ O
( _ _ O
interpretation _ _ O
) _ _ O
• _ _ O
Periodically _ _ O
, _ _ O
the _ _ O
fake _ _ O
byte _ _ O
code _ _ O
is _ _ O
translated _ _ O
into _ _ O
machine _ _ O
code _ _ O
. _ _ O
• _ _ O
This _ _ O
is _ _ O
a _ _ O
type _ _ O
of _ _ O
delayed _ _ O
compilation _ _ O
! _ _ O
Just-In-Time _ _ O
( _ _ O
JIT _ _ O
) _ _ O
compilation _ _ O
. _ _ O
• _ _ O
This _ _ O
is _ _ O
a _ _ O
compromise _ _ O
to _ _ O
either _ _ O
approach _ _ O
. _ _ O
• _ _ O
Surprisingly _ _ O
very _ _ O
competitive _ _ O
in _ _ O
speed _ _ O
. _ _ O
• _ _ O
I _ _ O
do _ _ O
n’t _ _ O
think _ _ O
the _ _ O
JVM-style _ _ O
JIT _ _ O
is _ _ O
going _ _ O
away _ _ O
any _ _ O
time _ _ O
soon _ _ O
. _ _ O
12 _ _ O

C _ _ O
vs. _ _ O
Java _ _ O
C _ _ O
( _ _ O
C99 _ _ O
) _ _ O
Java _ _ O
Type _ _ O
of _ _ O
Language _ _ O
Function _ _ O
Oriented _ _ O
Object _ _ O
Oriented _ _ O
Programming _ _ O
Unit _ _ O
Function _ _ O
Class _ _ O
= _ _ O
Abstract _ _ O
Data _ _ O
Type _ _ O
Compilation _ _ O
gcc _ _ O
hello.c _ _ O
- _ _ O
creates _ _ O
machine _ _ O
language _ _ O
code _ _ O
javac _ _ O
Hello.java _ _ O
- _ _ O
creates _ _ O
Java _ _ O
virtual _ _ O
machine _ _ O
language _ _ O
bytecode _ _ O
Execution _ _ O
a.out _ _ O
- _ _ O
loads _ _ O
and _ _ O
executes _ _ O
program _ _ O
java _ _ O
Hello _ _ O
- _ _ O
interprets _ _ O
bytecodes _ _ O
Manual _ _ O
( _ _ O
malloc _ _ O
, _ _ O
free _ _ O
) _ _ O
Automatic _ _ O
( _ _ O
garbage _ _ O
collection _ _ O
) _ _ O
hello _ _ O
, _ _ O
world _ _ O
Storage _ _ O
From _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.cs.princeton.edu _ _ O
/ _ _ O
introcs _ _ O
/ _ _ O
faq _ _ O
/ _ _ O
c2java.html _ _ O
13 _ _ O

C _ _ O
vs. _ _ O
Java _ _ O
C _ _ O
( _ _ O
C99 _ _ O
) _ _ O
or _ _ O
Comments _ _ O
Java _ _ O
… _ _ O
end _ _ O
of _ _ O
line _ _ O
or _ _ O
… _ _ O
end _ _ O
of _ _ O
line _ _ O
Constants _ _ O
Preprocessor _ _ O
Yes _ _ O
No _ _ O
Variable _ _ O
declaration _ _ O
Before _ _ O
you _ _ O
use _ _ O
it _ _ O
At _ _ O
beginning _ _ O
of _ _ O
a _ _ O
block _ _ O
Variable _ _ O
naming _ _ O
conventions _ _ O
Accessing _ _ O
a _ _ O
library _ _ O
From _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.cs.princeton.edu _ _ O
/ _ _ O
introcs _ _ O
/ _ _ O
faq _ _ O
/ _ _ O
c2java.html _ _ O
14 _ _ O

Hello _ _ O
World _ _ O
15 _ _ O

C _ _ O
Dialects _ _ O
• _ _ O
You _ _ O
will _ _ O
see _ _ O
a _ _ O
lot _ _ O
of _ _ O
different _ _ O
styles _ _ O
of _ _ O
C _ _ O
in _ _ O
the _ _ O
world _ _ O
at _ _ O
large _ _ O
. _ _ O
• _ _ O
The _ _ O
syntax _ _ O
has _ _ O
changed _ _ O
very _ _ O
little _ _ O
. _ _ O
• _ _ O
There _ _ O
have _ _ O
been _ _ O
a _ _ O
few _ _ O
different _ _ O
standard _ _ O
revisions _ _ O
. _ _ O
• _ _ O
C89 _ _ O
– _ _ O
ANSI _ _ O
/ _ _ O
ISO _ _ O
C _ _ O
• _ _ O
– _ _ O
– _ _ O
• _ _ O
C99 _ _ O
– _ _ O
Adds _ _ O
‘ _ _ O
complex _ _ O
’ _ _ O
numbers _ _ O
and _ _ O
single-line _ _ O
comments _ _ O
• _ _ O
– _ _ O
• _ _ O
C11 _ _ O
– _ _ O
Newer _ _ O
than _ _ O
99 _ _ O
( _ _ O
laughs _ _ O
in _ _ O
Y2 _ _ O
K _ _ O
bug _ _ O
) _ _ O
starts _ _ O
to _ _ O
standardize _ _ O
Unicode _ _ O
and _ _ O
threading _ _ O
libraries _ _ O
. _ _ O
• _ _ O
– _ _ O
• _ _ O
C18 _ _ O
– _ _ O
Minor _ _ O
refinement _ _ O
of _ _ O
C11 _ _ O
. _ _ O
The _ _ O
current _ _ O
C _ _ O
standard _ _ O
. _ _ O
• _ _ O
– _ _ O
• _ _ O
We _ _ O
will _ _ O
more _ _ O
or _ _ O
less _ _ O
focus _ _ O
on _ _ O
the _ _ O
C99 _ _ O
standard _ _ O
in _ _ O
our _ _ O
course _ _ O
. _ _ O
• _ _ O
I _ _ O
’ll _ _ O
try _ _ O
to _ _ O
point _ _ O
out _ _ O
some _ _ O
newer _ _ O
things _ _ O
if _ _ O
they _ _ O
are _ _ O
relevant _ _ O
. _ _ O
16 _ _ O

The _ _ O
C _ _ O
Syntax _ _ O
Nothing _ _ O
can _ _ O
be _ _ O
said _ _ O
to _ _ O
be _ _ O
certain _ _ O
, _ _ O
except _ _ O
death _ _ O
and _ _ O
C-like _ _ O
syntaxes _ _ O
. _ _ O
17 _ _ O

The _ _ O
C _ _ O
Pre-Processor _ _ O
• _ _ O
The _ _ O
C _ _ O
language _ _ O
is _ _ O
incredibly _ _ O
simplistic _ _ O
. _ _ O
• _ _ O
To _ _ O
add _ _ O
some _ _ O
constrained _ _ O
complexity _ _ O
, _ _ O
there _ _ O
is _ _ O
a _ _ O
macro _ _ O
language _ _ O
. _ _ O
• _ _ O
This _ _ O
code _ _ O
does _ _ O
not _ _ O
get _ _ O
translated _ _ O
to _ _ O
machine _ _ O
code _ _ O
, _ _ O
but _ _ O
to _ _ O
more _ _ O
code _ _ O
! _ _ O
18 _ _ O

The _ _ O
“ _ _ O
main _ _ O
” _ _ O
function _ _ O
19 _ _ O

Declaring _ _ O
variables _ _ O
20 _ _ O

Casting _ _ O
21 _ _ O

Integer _ _ O
Sizes _ _ O
– _ _ O
Revisted _ _ O
: _ _ O
sizeof _ _ O
22 _ _ O

Integer _ _ O
Sizes _ _ O
– _ _ O
Revisted _ _ O
23 _ _ O

Integers _ _ O
: _ _ O
Python _ _ O
vs. _ _ O
Java _ _ O
vs. _ _ O
C _ _ O
Language _ _ O
Python _ _ O
Java _ _ O
C _ _ O
sizeof _ _ O
( _ _ O
int _ _ O
) _ _ O
> _ _ O
= _ _ O
32 _ _ O
bits _ _ O
( _ _ O
plain _ _ O
ints _ _ O
) _ _ O
, _ _ O
infinite _ _ O
( _ _ O
long _ _ O
ints _ _ O
) _ _ O
32 _ _ O
bits _ _ O
Depends _ _ O
on _ _ O
computer _ _ O
; _ _ O
16 _ _ O
or _ _ O
32 _ _ O
or _ _ O
64 _ _ O
• _ _ O
C _ _ O
: _ _ O
• _ _ O
integer _ _ O
type _ _ O
that _ _ O
target _ _ O
processor _ _ O
works _ _ O
with _ _ O
most _ _ O
efficiently _ _ O
• _ _ O
For _ _ O
modern _ _ O
C _ _ O
, _ _ O
this _ _ O
is _ _ O
generally _ _ O
a _ _ O
good-enough _ _ O
default _ _ O
choice _ _ O
. _ _ O
• _ _ O
Only _ _ O
guarantee _ _ O
: _ _ O
• _ _ O
≥ _ _ O
• _ _ O
Also _ _ O
, _ _ O
> _ _ O
= _ _ O
16 _ _ O
bits _ _ O
, _ _ O
• _ _ O
All _ _ O
could _ _ O
be _ _ O
64 _ _ O
bits _ _ O
≥ _ _ O
≥ _ _ O
> _ _ O
= _ _ O
32 _ _ O
bits _ _ O
• _ _ O
Impacts _ _ O
portability _ _ O
between _ _ O
architectures _ _ O
24 _ _ O

Constants _ _ O
25 _ _ O

Enumerations _ _ O
26 _ _ O

Operators _ _ O
: _ _ O
Java _ _ O
stole _ _ O
‘ _ _ O
em _ _ O
from _ _ O
here _ _ O
27 _ _ O

Augmented _ _ O
Operators _ _ O
– _ _ O
28 _ _ O

Expressions _ _ O
: _ _ O
an _ _ O
expression _ _ O
of _ _ O
frustration _ _ O
! _ _ O
! _ _ O
• _ _ O
C _ _ O
often _ _ O
coerces _ _ O
( _ _ O
implicitly _ _ O
casts _ _ O
) _ _ O
integers _ _ O
when _ _ O
operating _ _ O
on _ _ O
them _ _ O
. _ _ O
• _ _ O
To _ _ O
remove _ _ O
ambiguity _ _ O
, _ _ O
expressions _ _ O
, _ _ O
such _ _ O
as _ _ O
most _ _ O
accommodates _ _ O
that _ _ O
operation _ _ O
. _ _ O
, _ _ O
result _ _ O
in _ _ O
a _ _ O
type _ _ O
that _ _ O
• _ _ O
Specifically _ _ O
, _ _ O
C _ _ O
will _ _ O
coerce _ _ O
all _ _ O
inputs _ _ O
of _ _ O
binary _ _ O
operators _ _ O
to _ _ O
at _ _ O
least _ _ O
an _ _ O
type _ _ O
. _ _ O
• _ _ O
You _ _ O
’ll _ _ O
find _ _ O
that _ _ O
“ _ _ O
this _ _ O
is _ _ O
weird _ _ O
, _ _ O
but _ _ O
consistent _ _ O
” _ _ O
is _ _ O
C _ _ O
’s _ _ O
general _ _ O
motto _ _ O
29 _ _ O

The _ _ O
C _ _ O
Syntax _ _ O
: _ _ O
Control _ _ O
Flow _ _ O
Once _ _ O
you _ _ O
C _ _ O
the _ _ O
program _ _ O
, _ _ O
you _ _ O
can _ _ O
BE _ _ O
the _ _ O
program _ _ O
. _ _ O
30 _ _ O

Controlling _ _ O
the _ _ O
flow _ _ O
: _ _ O
an _ _ O
intro _ _ O
to _ _ O
spaghetti _ _ O
31 _ _ O

Controlling _ _ O
the _ _ O
flow _ _ O
: _ _ O
Boolean _ _ O
Expressions _ _ O
• _ _ O
C _ _ O
does _ _ O
not _ _ O
have _ _ O
a _ _ O
Boolean _ _ O
type _ _ O
! _ _ O
• _ _ O
However _ _ O
, _ _ O
the _ _ O
C99 _ _ O
and _ _ O
newer _ _ O
standard _ _ O
library _ _ O
provides _ _ O
one _ _ O
in _ _ O
• _ _ O
The _ _ O
Boolean _ _ O
expressions _ _ O
are _ _ O
actually _ _ O
just _ _ O
an _ _ O
type _ _ O
. _ _ O
• _ _ O
It _ _ O
is _ _ O
just _ _ O
the _ _ O
general _ _ O
, _ _ O
default _ _ O
type _ _ O
. _ _ O
Weird _ _ O
but _ _ O
consistent _ _ O
, _ _ O
yet _ _ O
again _ _ O
! _ _ O
32 _ _ O

Controlling _ _ O
the _ _ O
flow _ _ O
: _ _ O
Putting _ _ O
it _ _ O
Together _ _ O
• _ _ O
statements _ _ O
therefore _ _ O
take _ _ O
an _ _ O
and _ _ O
not _ _ O
a _ _ O
Boolean _ _ O
, _ _ O
as _ _ O
an _ _ O
expression _ _ O
. _ _ O
• _ _ O
If _ _ O
the _ _ O
expression _ _ O
is _ _ O
it _ _ O
is _ _ O
considered _ _ O
false _ _ O
. _ _ O
• _ _ O
Otherwise _ _ O
, _ _ O
it _ _ O
is _ _ O
considered _ _ O
true _ _ O
. _ _ O
33 _ _ O

Throwing _ _ O
us _ _ O
all _ _ O
for _ _ O
a _ _ O
loop _ _ O
• _ _ O
Most _ _ O
loops _ _ O
( _ _ O
while _ _ O
, _ _ O
do _ _ O
) _ _ O
work _ _ O
exactly _ _ O
like _ _ O
Java _ _ O
. _ _ O
• _ _ O
Except _ _ O
, _ _ O
of _ _ O
course _ _ O
, _ _ O
the _ _ O
expressions _ _ O
are _ _ O
typed _ _ O
, _ _ O
like _ _ O
statements _ _ O
. _ _ O
• _ _ O
For _ _ O
loops _ _ O
only _ _ O
come _ _ O
in _ _ O
the _ _ O
traditional _ _ O
variety _ _ O
: _ _ O
• _ _ O
• _ _ O
C89 _ _ O
does _ _ O
not _ _ O
allow _ _ O
variable _ _ O
declaration _ _ O
within _ _ O
: _ _ O
• _ _ O
ERROR _ _ O
: _ _ O
• _ _ O
However _ _ O
, _ _ O
C99 _ _ O
and _ _ O
newer _ _ O
does _ _ O
allow _ _ O
this _ _ O
. _ _ O
Please _ _ O
do _ _ O
it _ _ O
. _ _ O
• _ _ O
Loops _ _ O
have _ _ O
special _ _ O
statements _ _ O
that _ _ O
alter _ _ O
the _ _ O
flow _ _ O
: _ _ O
• _ _ O
• _ _ O
will _ _ O
end _ _ O
the _ _ O
current _ _ O
iteration _ _ O
and _ _ O
start _ _ O
the _ _ O
next _ _ O
. _ _ O
will _ _ O
exit _ _ O
the _ _ O
loop _ _ O
entirely _ _ O
. _ _ O
34 _ _ O

Loop _ _ O
Refresher _ _ O
: _ _ O
While _ _ O
, _ _ O
Do-While _ _ O
, _ _ O
For _ _ O
Loops _ _ O
35 _ _ O

Taking _ _ O
a _ _ O
break _ _ O
and _ _ O
switching _ _ O
it _ _ O
up _ _ O
• _ _ O
The _ _ O
properly _ _ O
. _ _ O
statement _ _ O
requires _ _ O
proper _ _ O
placement _ _ O
of _ _ O
• _ _ O
Starts _ _ O
at _ _ O
matching _ _ O
expression _ _ O
and _ _ O
follows _ _ O
until _ _ O
it _ _ O
sees _ _ O
a _ _ O
• _ _ O
It _ _ O
will _ _ O
“ _ _ O
fall _ _ O
through _ _ O
” _ _ O
other _ _ O
statements _ _ O
if _ _ O
there _ _ O
is _ _ O
no _ _ O
to _ _ O
work _ _ O
. _ _ O
between _ _ O
them _ _ O
. _ _ O
• _ _ O
Sometimes _ _ O
fall _ _ O
through _ _ O
is _ _ O
used _ _ O
on _ _ O
purpose _ _ O
... _ _ O
but _ _ O
it _ _ O
’s _ _ O
a _ _ O
bug _ _ O
99 _ _ O
% _ _ O
of _ _ O
the _ _ O
time _ _ O
:/ _ _ O
36 _ _ O

Control _ _ O
Flow _ _ O
: _ _ O
Summary _ _ O
• _ _ O
Conditional _ _ O
Blocks _ _ O
: _ _ O
Note _ _ O
: _ _ O
a _ _ O
can _ _ O
be _ _ O
a _ _ O
{ _ _ O
block _ _ O
} _ _ O
• _ _ O
• _ _ O
• _ _ O
The _ _ O
if _ _ O
statement _ _ O
can _ _ O
be _ _ O
chained _ _ O
: _ _ O
• _ _ O
Conventional _ _ O
Loops _ _ O
: _ _ O
• _ _ O
• _ _ O
37 _ _ O

Control _ _ O
Flow _ _ O
: _ _ O
Summary _ _ O
• _ _ O
For _ _ O
Loops _ _ O
: _ _ O
Note _ _ O
: _ _ O
a _ _ O
can _ _ O
be _ _ O
a _ _ O
{ _ _ O
block _ _ O
} _ _ O
• _ _ O
• _ _ O
• _ _ O
• _ _ O
Switch _ _ O
: _ _ O
• _ _ O
• _ _ O
38 _ _ O

What _ _ O
’s _ _ O
your _ _ O
function _ _ O
? _ _ O
• _ _ O
Familiar _ _ O
: _ _ O
Java _ _ O
is _ _ O
, _ _ O
once _ _ O
again _ _ O
, _ _ O
C-like _ _ O
• _ _ O
You _ _ O
declare _ _ O
the _ _ O
return _ _ O
type _ _ O
before _ _ O
the _ _ O
name _ _ O
. _ _ O
• _ _ O
is _ _ O
used _ _ O
when _ _ O
there _ _ O
is _ _ O
nothing _ _ O
returned _ _ O
• _ _ O
It _ _ O
is _ _ O
also _ _ O
used _ _ O
to _ _ O
explicitly _ _ O
denote _ _ O
there _ _ O
being _ _ O
no _ _ O
arguments _ _ O
. _ _ O
• _ _ O
You _ _ O
SHOULD _ _ O
specify _ _ O
instead _ _ O
of _ _ O
having _ _ O
an _ _ O
empty _ _ O
list _ _ O
. _ _ O
• _ _ O
Functions _ _ O
must _ _ O
be _ _ O
declared _ _ O
before _ _ O
they _ _ O
can _ _ O
be _ _ O
used _ _ O
. _ _ O
• _ _ O
We _ _ O
will _ _ O
look _ _ O
at _ _ O
how _ _ O
we _ _ O
divide _ _ O
functions _ _ O
up _ _ O
between _ _ O
files _ _ O
soon _ _ O
! _ _ O
39 _ _ O

This _ _ O
is _ _ O
all _ _ O
the _ _ O
structure _ _ O
you _ _ O
get _ _ O
, _ _ O
kid _ _ O
• _ _ O
C _ _ O
gives _ _ O
us _ _ O
a _ _ O
very _ _ O
simple _ _ O
method _ _ O
of _ _ O
defining _ _ O
aggregate _ _ O
data _ _ O
types _ _ O
. _ _ O
• _ _ O
The _ _ O
struct _ _ O
keyword _ _ O
can _ _ O
combine _ _ O
several _ _ O
data _ _ O
types _ _ O
together _ _ O
: _ _ O
40 _ _ O

I _ _ O
do _ _ O
n’t _ _ O
like _ _ O
all _ _ O
that _ _ O
typing _ _ O
… _ _ O
So _ _ O
I _ _ O
’ll _ _ O
… _ _ O
typedef _ _ O
it _ _ O
• _ _ O
To _ _ O
avoid _ _ O
typing _ _ O
the _ _ O
full _ _ O
name _ _ O
“ _ _ O
struct _ _ O
Song _ _ O
” _ _ O
we _ _ O
can _ _ O
create _ _ O
a _ _ O
Song _ _ O
type _ _ O
instead _ _ O
. _ _ O
• _ _ O
The _ _ O
typedef _ _ O
keyword _ _ O
defines _ _ O
new _ _ O
types _ _ O
. _ _ O
41 _ _ O

I _ _ O
do _ _ O
n’t _ _ O
like _ _ O
all _ _ O
that _ _ O
typing _ _ O
… _ _ O
So _ _ O
I _ _ O
’ll _ _ O
… _ _ O
typedef _ _ O
it _ _ O
• _ _ O
You _ _ O
can _ _ O
also _ _ O
do _ _ O
this _ _ O
with _ _ O
integer _ _ O
types _ _ O
, _ _ O
for _ _ O
instance _ _ O
to _ _ O
define _ _ O
bool _ _ O
: _ _ O
• _ _ O
And _ _ O
types _ _ O
, _ _ O
although _ _ O
it _ _ O
wo _ _ O
n’t _ _ O
complain _ _ O
if _ _ O
you _ _ O
mix _ _ O
/ _ _ O
match _ _ O
them _ _ O
: _ _ O
• _ _ O
Now _ _ O
, _ _ O
functions _ _ O
can _ _ O
better _ _ O
illustrate _ _ O
they _ _ O
take _ _ O
an _ _ O
enum _ _ O
value _ _ O
: _ _ O
• _ _ O
Though _ _ O
, _ _ O
it _ _ O
accepts _ _ O
any _ _ O
integer _ _ O
and _ _ O
, _ _ O
yikes _ _ O
, _ _ O
any _ _ O
enum _ _ O
value _ _ O
without _ _ O
complaint _ _ O
! _ _ O
42 _ _ O

That _ _ O
’s _ _ O
seriously _ _ O
all _ _ O
you _ _ O
get _ _ O
… _ _ O
• _ _ O
Unlike _ _ O
Java _ _ O
, _ _ O
C _ _ O
is _ _ O
not _ _ O
Object-Oriented _ _ O
and _ _ O
has _ _ O
no _ _ O
class _ _ O
instantiation _ _ O
. _ _ O
• _ _ O
That _ _ O
’s _ _ O
C++ _ _ O
! _ _ O
43 _ _ O

Garbage _ _ O
in _ _ O
, _ _ O
garbage _ _ O
out _ _ O
: _ _ O
initialization _ _ O
• _ _ O
As _ _ O
we _ _ O
saw _ _ O
earlier _ _ O
, _ _ O
variables _ _ O
do _ _ O
n’t _ _ O
require _ _ O
initialization _ _ O
. _ _ O
• _ _ O
However _ _ O
, _ _ O
unlike _ _ O
Java _ _ O
, _ _ O
the _ _ O
variables _ _ O
do _ _ O
not _ _ O
have _ _ O
a _ _ O
default _ _ O
value _ _ O
. _ _ O
• _ _ O
Java _ _ O
will _ _ O
initialize _ _ O
integers _ _ O
to _ _ O
0 _ _ O
if _ _ O
you _ _ O
do _ _ O
not _ _ O
specify _ _ O
. _ _ O
• _ _ O
C _ _ O
, _ _ O
on _ _ O
the _ _ O
other _ _ O
hand _ _ O
… _ _ O
• _ _ O
The _ _ O
default _ _ O
values _ _ O
for _ _ O
variables _ _ O
are _ _ O
undefined _ _ O
. _ _ O
• _ _ O
They _ _ O
could _ _ O
be _ _ O
anything _ _ O
. _ _ O
• _ _ O
The _ _ O
Operating _ _ O
System _ _ O
ultimately _ _ O
decides _ _ O
. _ _ O
• _ _ O
Generally _ _ O
, _ _ O
whatever _ _ O
memory _ _ O
is _ _ O
left _ _ O
over _ _ O
. _ _ O
Also _ _ O
known _ _ O
as _ _ O
“ _ _ O
garbage _ _ O
. _ _ O
” _ _ O
• _ _ O
ALWAYS _ _ O
INITIALIZE _ _ O
YOUR _ _ O
VARIABLES _ _ O
44 _ _ O

The _ _ O
trouble _ _ O
is _ _ O
stacking _ _ O
up _ _ O
on _ _ O
us _ _ O
! _ _ O
Q _ _ O
: _ _ O
Hmm _ _ O
. _ _ O
Where _ _ O
is _ _ O
the _ _ O
value _ _ O
for _ _ O
‘ _ _ O
x _ _ O
’ _ _ O
coming _ _ O
from _ _ O
? _ _ O
Why _ _ O
? _ _ O
45 _ _ O

Where _ _ O
’s _ _ O
that _ _ O
data _ _ O
coming _ _ O
from _ _ O
? _ _ O
? _ _ O
• _ _ O
Every _ _ O
variable _ _ O
and _ _ O
data _ _ O
in _ _ O
your _ _ O
program _ _ O
technically _ _ O
has _ _ O
a _ _ O
location _ _ O
in _ _ O
which _ _ O
it _ _ O
lives _ _ O
. _ _ O
• _ _ O
In _ _ O
the _ _ O
previous _ _ O
nonsense _ _ O
example _ _ O
, _ _ O
the _ _ O
“ _ _ O
x _ _ O
” _ _ O
variable _ _ O
was _ _ O
sharing _ _ O
the _ _ O
same _ _ O
space _ _ O
as _ _ O
the _ _ O
“ _ _ O
a _ _ O
” _ _ O
variable _ _ O
from _ _ O
the _ _ O
other _ _ O
function _ _ O
. _ _ O
• _ _ O
The _ _ O
section _ _ O
of _ _ O
incremental _ _ O
memory _ _ O
called _ _ O
the _ _ O
stack _ _ O
, _ _ O
in _ _ O
this _ _ O
specific _ _ O
case _ _ O
. _ _ O
• _ _ O
This _ _ O
is _ _ O
not _ _ O
defined _ _ O
behavior _ _ O
of _ _ O
the _ _ O
language _ _ O
, _ _ O
but _ _ O
rather _ _ O
the _ _ O
OS _ _ O
. _ _ O
• _ _ O
C _ _ O
does _ _ O
not _ _ O
impose _ _ O
many _ _ O
rules _ _ O
on _ _ O
how _ _ O
memory _ _ O
is _ _ O
laid _ _ O
out _ _ O
and _ _ O
used _ _ O
. _ _ O
• _ _ O
In _ _ O
fact _ _ O
, _ _ O
it _ _ O
gets _ _ O
right _ _ O
out _ _ O
of _ _ O
the _ _ O
way _ _ O
and _ _ O
lets _ _ O
you _ _ O
fall _ _ O
flat _ _ O
on _ _ O
your _ _ O
face _ _ O
. _ _ O
• _ _ O
Now _ _ O
, _ _ O
we _ _ O
will _ _ O
take _ _ O
a _ _ O
deeper _ _ O
dive _ _ O
into _ _ O
… _ _ O
MEMORY _ _ O
46 _ _ O



