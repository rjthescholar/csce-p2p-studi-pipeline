unlabeled|cs0449|lec07
-DOCSTART- -X- -X- O

7 _ _ O
Introduction _ _ O
to _ _ O
x86 _ _ O
asm _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
Introduction _ _ O
to _ _ O
Systems _ _ O
Software _ _ O
Luis _ _ O
Oliveira _ _ O
( _ _ O
with _ _ O
content _ _ O
borrowed _ _ O
from _ _ O
wilkie _ _ O
and _ _ O
Vinicius _ _ O
Petrucci _ _ O
) _ _ O

Assembly _ _ O
Refresher _ _ O
What _ _ O
is _ _ O
forgotten _ _ O
… _ _ O
is _ _ O
art _ _ O
. _ _ O
2 _ _ O

What _ _ O
is _ _ O
“ _ _ O
Assembly _ _ O
” _ _ O
• _ _ O
Assembly _ _ O
: _ _ O
Human-readable _ _ O
representation _ _ O
of _ _ O
machine _ _ O
code _ _ O
. _ _ O
• _ _ O
Machine _ _ O
code _ _ O
: _ _ O
what _ _ O
a _ _ O
computer _ _ O
actually _ _ O
runs _ _ O
. _ _ O
• _ _ O
The _ _ O
“ _ _ O
atoms _ _ O
” _ _ O
that _ _ O
make _ _ O
up _ _ O
a _ _ O
program _ _ O
. _ _ O
• _ _ O
CPUs _ _ O
CAN _ _ O
actually _ _ O
be _ _ O
fairly _ _ O
simple _ _ O
in _ _ O
concept _ _ O
. _ _ O
• _ _ O
Each _ _ O
CPU _ _ O
chooses _ _ O
its _ _ O
own _ _ O
machine _ _ O
code _ _ O
( _ _ O
and _ _ O
therefore _ _ O
its _ _ O
own _ _ O
style _ _ O
of _ _ O
assembly _ _ O
language _ _ O
) _ _ O
• _ _ O
We _ _ O
used _ _ O
MIPS _ _ O
in _ _ O
CS _ _ O
447 _ _ O
. _ _ O
• _ _ O
A _ _ O
RISC _ _ O
processor _ _ O
. _ _ O
• _ _ O
We _ _ O
will _ _ O
compare _ _ O
that _ _ O
to _ _ O
x86 _ _ O
today _ _ O
! _ _ O
• _ _ O
A _ _ O
CISC _ _ O
processor _ _ O
. _ _ O
3 _ _ O

What _ _ O
is _ _ O
“ _ _ O
Assembly _ _ O
” _ _ O
• _ _ O
Involves _ _ O
very _ _ O
simple _ _ O
commands _ _ O
. _ _ O
• _ _ O
This _ _ O
command _ _ O
copies _ _ O
data _ _ O
from _ _ O
one _ _ O
place _ _ O
to _ _ O
another _ _ O
. _ _ O
• _ _ O
Despite _ _ O
being _ _ O
called _ _ O
“ _ _ O
move _ _ O
” _ _ O
, _ _ O
ugh _ _ O
! _ _ O
• _ _ O
Surprise _ _ O
! _ _ O
It _ _ O
’s _ _ O
actually _ _ O
shorthand _ _ O
for _ _ O
a _ _ O
different _ _ O
set _ _ O
of _ _ O
instructions _ _ O
. _ _ O
• _ _ O
The _ _ O
processor _ _ O
can _ _ O
be _ _ O
made _ _ O
simpler _ _ O
. _ _ O
• _ _ O
This _ _ O
command _ _ O
gets _ _ O
transformed _ _ O
into _ _ O
a _ _ O
numerical _ _ O
representation _ _ O
. _ _ O
Compute _ _ O
t0+0 _ _ O
Put _ _ O
into _ _ O
“ _ _ O
a0 _ _ O
” _ _ O
• _ _ O
The _ _ O
processor _ _ O
then _ _ O
interprets _ _ O
the _ _ O
binary _ _ O
representation _ _ O
. _ _ O
• _ _ O
That _ _ O
’s _ _ O
essentially _ _ O
all _ _ O
a _ _ O
computer _ _ O
does _ _ O
! _ _ O
• _ _ O
CS _ _ O
447 _ _ O
looks _ _ O
at _ _ O
this _ _ O
in _ _ O
much _ _ O
greater _ _ O
detail _ _ O
. _ _ O
4 _ _ O

Assembly _ _ O
vs. _ _ O
Machine _ _ O
Language _ _ O
• _ _ O
Machine _ _ O
language _ _ O
instructions _ _ O
are _ _ O
the _ _ O
patterns _ _ O
of _ _ O
bits _ _ O
that _ _ O
a _ _ O
processor _ _ O
reads _ _ O
to _ _ O
know _ _ O
what _ _ O
to _ _ O
do _ _ O
• _ _ O
Assembly _ _ O
language _ _ O
( _ _ O
or _ _ O
" _ _ O
asm _ _ O
" _ _ O
) _ _ O
is _ _ O
a _ _ O
human-readable _ _ O
( _ _ O
mostly _ _ O
) _ _ O
, _ _ O
textual _ _ O
representation _ _ O
of _ _ O
machine _ _ O
language _ _ O
. _ _ O
MIPS _ _ O
asm _ _ O
MIPS _ _ O
machine _ _ O
language _ _ O
5 _ _ O

Is _ _ O
Assembly _ _ O
Useful _ _ O
? _ _ O
• _ _ O
Short _ _ O
answer _ _ O
: _ _ O
YES _ _ O
• _ _ O
Assembly _ _ O
is _ _ O
“ _ _ O
fast _ _ O
” _ _ O
, _ _ O
so _ _ O
we _ _ O
should _ _ O
use _ _ O
it _ _ O
for _ _ O
everything _ _ O
! _ _ O
--- _ _ O
NO _ _ O
! _ _ O
! _ _ O
! _ _ O
--• _ _ O
No _ _ O
type-checking _ _ O
, _ _ O
no _ _ O
control _ _ O
structures _ _ O
, _ _ O
very _ _ O
few _ _ O
abstractions _ _ O
. _ _ O
Fairly _ _ O
impractical _ _ O
for _ _ O
large _ _ O
things _ _ O
--• _ _ O
Tied _ _ O
to _ _ O
a _ _ O
particular _ _ O
CPU _ _ O
. _ _ O
--- _ _ O
• _ _ O
So _ _ O
, _ _ O
large _ _ O
programs _ _ O
have _ _ O
to _ _ O
be _ _ O
rewritten _ _ O
( _ _ O
usually _ _ O
) _ _ O
to _ _ O
work _ _ O
on _ _ O
new _ _ O
things _ _ O
. _ _ O
• _ _ O
Yet _ _ O
: _ _ O
good _ _ O
for _ _ O
specialized _ _ O
stuff _ _ O
. _ _ O
• _ _ O
Critical _ _ O
paths _ _ O
and _ _ O
“ _ _ O
boot _ _ O
” _ _ O
code _ _ O
in _ _ O
Kernels _ _ O
/ _ _ O
Operating _ _ O
Systems _ _ O
• _ _ O
HPC _ _ O
( _ _ O
simulators _ _ O
, _ _ O
supercomputer _ _ O
stuff _ _ O
) _ _ O
• _ _ O
Real-time _ _ O
programs _ _ O
( _ _ O
video _ _ O
games _ _ O
; _ _ O
tho _ _ O
increasingly _ _ O
less _ _ O
/ _ _ O
abstracted _ _ O
away _ _ O
) _ _ O
• _ _ O
And _ _ O
… _ _ O
6 _ _ O

Architecture _ _ O
Sits _ _ O
at _ _ O
the _ _ O
Hardware _ _ O
Interface _ _ O
Source _ _ O
code _ _ O
Compiler _ _ O
Architecture _ _ O
Applications _ _ O
/ _ _ O
algorithms _ _ O
Perform _ _ O
optimizations _ _ O
, _ _ O
generate _ _ O
instructions _ _ O
Instruction _ _ O
set _ _ O
Different _ _ O
implementations _ _ O
Intel _ _ O
Pentium _ _ O
4 _ _ O
C _ _ O
Language _ _ O
Program _ _ O
A _ _ O
Hardware _ _ O
Intel _ _ O
Core _ _ O
2 _ _ O
GCC _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
Intel _ _ O
Core _ _ O
i7 _ _ O
AMD _ _ O
Opteron _ _ O
Program _ _ O
B _ _ O
AMD _ _ O
Athlon _ _ O
Clang _ _ O
Your _ _ O
program _ _ O
ARMv8 _ _ O
( _ _ O
AArch64 _ _ O
/ _ _ O
A64 _ _ O
) _ _ O
ARM _ _ O
Cortex-A53 _ _ O
Apple _ _ O
A7 _ _ O

Practical _ _ O
Applications _ _ O
of _ _ O
Assembly _ _ O
: _ _ O
Modification _ _ O
• _ _ O
Modifying _ _ O
programs _ _ O
after-the-fact _ _ O
. _ _ O
( _ _ O
Or _ _ O
reverse-engineering _ _ O
them _ _ O
) _ _ O
• _ _ O
Legal _ _ O
“ _ _ O
gray-area _ _ O
, _ _ O
” _ _ O
/ _ _ O
“ _ _ O
confusing-mess _ _ O
” _ _ O
but _ _ O
generally _ _ O
modification _ _ O
/ _ _ O
reverse _ _ O
engineering _ _ O
is _ _ O
allowed _ _ O
. _ _ O
Kinda _ _ O
? _ _ O
( _ _ O
Section _ _ O
1201 _ _ O
, _ _ O
US _ _ O
Code _ _ O
17 _ _ O
§ _ _ O
108 _ _ O
, _ _ O
etc _ _ O
) _ _ O
• _ _ O
Removing _ _ O
copy _ _ O
protection _ _ O
in _ _ O
order _ _ O
to _ _ O
preserve _ _ O
/ _ _ O
backup _ _ O
. _ _ O
• _ _ O
Librarians _ _ O
and _ _ O
preservationists _ _ O
and _ _ O
“ _ _ O
pirates _ _ O
” _ _ O
alike _ _ O
may _ _ O
all _ _ O
use _ _ O
/ _ _ O
view _ _ O
/ _ _ O
write _ _ O
assembly _ _ O
for _ _ O
this _ _ O
! _ _ O
I _ _ O
’m _ _ O
not _ _ O
a _ _ O
lawyer _ _ O
• _ _ O
I _ _ O
know _ _ O
someone _ _ O
that _ _ O
patched _ _ O
( _ _ O
the _ _ O
freely _ _ O
distributed _ _ O
) _ _ O
Lost _ _ O
Vikings _ _ O
so _ _ O
it _ _ O
would _ _ O
avoid _ _ O
copy _ _ O
protection _ _ O
and _ _ O
use _ _ O
a _ _ O
different _ _ O
sound _ _ O
configuration _ _ O
( _ _ O
so _ _ O
I _ _ O
could _ _ O
run _ _ O
it _ _ O
in _ _ O
a _ _ O
browser _ _ O
emulator _ _ O
) _ _ O
x86 _ _ O
( _ _ O
NASM _ _ O
/ _ _ O
Intel _ _ O
Syntax _ _ O
, _ _ O
MS-DOS _ _ O
) _ _ O
8 _ _ O

Practical _ _ O
Applications _ _ O
of _ _ O
Assembly _ _ O
: _ _ O
Debugging _ _ O
• _ _ O
Programs _ _ O
written _ _ O
in _ _ O
C _ _ O
, _ _ O
etc _ _ O
are _ _ O
generally _ _ O
translated _ _ O
into _ _ O
assembly _ _ O
. _ _ O
• _ _ O
And _ _ O
then _ _ O
into _ _ O
machine _ _ O
code _ _ O
. _ _ O
• _ _ O
You _ _ O
can _ _ O
look _ _ O
at _ _ O
the _ _ O
machine _ _ O
code _ _ O
of _ _ O
programs _ _ O
and _ _ O
get _ _ O
an _ _ O
assembly _ _ O
code _ _ O
listing _ _ O
. _ _ O
• _ _ O
And _ _ O
step _ _ O
through _ _ O
the _ _ O
program _ _ O
one _ _ O
instruction _ _ O
at _ _ O
a _ _ O
time _ _ O
. _ _ O
• _ _ O
When _ _ O
programs _ _ O
crash _ _ O
( _ _ O
sometimes _ _ O
programs _ _ O
you _ _ O
do _ _ O
n’t _ _ O
have _ _ O
the _ _ O
code _ _ O
for _ _ O
) _ _ O
you _ _ O
can _ _ O
look _ _ O
at _ _ O
the _ _ O
assembly _ _ O
code _ _ O
and _ _ O
assess _ _ O
. _ _ O
• _ _ O
Programs _ _ O
exist _ _ O
to _ _ O
help _ _ O
you _ _ O
( _ _ O
gdb _ _ O
, _ _ O
IDA _ _ O
Pro _ _ O
, _ _ O
radare _ _ O
, _ _ O
etc _ _ O
) _ _ O
• _ _ O
We _ _ O
will _ _ O
apply _ _ O
this _ _ O
knowledge _ _ O
( _ _ O
using _ _ O
gdb _ _ O
) _ _ O
in _ _ O
a _ _ O
future _ _ O
assignment _ _ O
! _ _ O
9 _ _ O

Basics _ _ O
of _ _ O
x86 _ _ O
Assembly _ _ O
x86 _ _ O
really _ _ O
puts _ _ O
the _ _ O
… _ _ O
you _ _ O
know _ _ O
what _ _ O
… _ _ O
in _ _ O
Assembly _ _ O
10 _ _ O

Instruction _ _ O
Set _ _ O
Architecture _ _ O
( _ _ O
ISA _ _ O
) _ _ O
• _ _ O
An _ _ O
ISA _ _ O
is _ _ O
the _ _ O
interface _ _ O
that _ _ O
a _ _ O
CPU _ _ O
presents _ _ O
to _ _ O
the _ _ O
programmer _ _ O
. _ _ O
• _ _ O
When _ _ O
we _ _ O
say _ _ O
" _ _ O
architecture _ _ O
, _ _ O
" _ _ O
this _ _ O
is _ _ O
what _ _ O
we _ _ O
mean _ _ O
. _ _ O
• _ _ O
The _ _ O
ISA _ _ O
defines _ _ O
: _ _ O
• _ _ O
What _ _ O
the _ _ O
CPU _ _ O
can _ _ O
do _ _ O
( _ _ O
add _ _ O
, _ _ O
subtract _ _ O
, _ _ O
call _ _ O
functions _ _ O
, _ _ O
etc _ _ O
. _ _ O
) _ _ O
• _ _ O
What _ _ O
registers _ _ O
it _ _ O
has _ _ O
( _ _ O
we _ _ O
'll _ _ O
get _ _ O
to _ _ O
those _ _ O
) _ _ O
• _ _ O
The _ _ O
machine _ _ O
language _ _ O
• _ _ O
That _ _ O
is _ _ O
, _ _ O
the _ _ O
bit _ _ O
patterns _ _ O
used _ _ O
to _ _ O
encode _ _ O
instructions _ _ O
. _ _ O
• _ _ O
The _ _ O
ISA _ _ O
does _ _ O
not _ _ O
define _ _ O
: _ _ O
• _ _ O
How _ _ O
to _ _ O
design _ _ O
the _ _ O
hardware _ _ O
! _ _ O
• _ _ O
… _ _ O
if _ _ O
there _ _ O
's _ _ O
any _ _ O
hardware _ _ O
at _ _ O
all _ _ O
( _ _ O
think _ _ O
of _ _ O
Java _ _ O
, _ _ O
etc _ _ O
: _ _ O
virtual _ _ O
/ _ _ O
hypothetical _ _ O
ISAs _ _ O
) _ _ O
11 _ _ O

Types _ _ O
of _ _ O
ISAs _ _ O
: _ _ O
RISC _ _ O
• _ _ O
RISC _ _ O
: _ _ O
" _ _ O
Reduced _ _ O
Instruction _ _ O
Set _ _ O
Computer _ _ O
" _ _ O
• _ _ O
ISA _ _ O
designed _ _ O
to _ _ O
make _ _ O
it _ _ O
easy _ _ O
to _ _ O
: _ _ O
• _ _ O
build _ _ O
the _ _ O
CPU _ _ O
hardware _ _ O
• _ _ O
make _ _ O
that _ _ O
hardware _ _ O
run _ _ O
fast _ _ O
• _ _ O
write _ _ O
compilers _ _ O
that _ _ O
make _ _ O
machine _ _ O
code _ _ O
• _ _ O
A _ _ O
small _ _ O
number _ _ O
of _ _ O
instructions _ _ O
. _ _ O
• _ _ O
Instructions _ _ O
are _ _ O
very _ _ O
simple _ _ O
• _ _ O
MIPS _ _ O
( _ _ O
and _ _ O
RISC-V _ _ O
) _ _ O
is _ _ O
very _ _ O
RISCy _ _ O
12 _ _ O

Types _ _ O
of _ _ O
ISAs _ _ O
: _ _ O
CISC _ _ O
• _ _ O
CISC _ _ O
: _ _ O
" _ _ O
Complex _ _ O
Instruction _ _ O
Set _ _ O
Computer _ _ O
" _ _ O
• _ _ O
ISA _ _ O
designed _ _ O
for _ _ O
humans _ _ O
to _ _ O
write _ _ O
asm _ _ O
. _ _ O
• _ _ O
From _ _ O
the _ _ O
days _ _ O
before _ _ O
compilers _ _ O
! _ _ O
• _ _ O
Lots _ _ O
of _ _ O
instructions _ _ O
and _ _ O
ways _ _ O
to _ _ O
use _ _ O
them _ _ O
• _ _ O
Complex _ _ O
( _ _ O
multi-step _ _ O
) _ _ O
instructions _ _ O
to _ _ O
shorten _ _ O
and _ _ O
simplify _ _ O
programs _ _ O
. _ _ O
• _ _ O
" _ _ O
search _ _ O
a _ _ O
string _ _ O
for _ _ O
a _ _ O
character _ _ O
" _ _ O
• _ _ O
" _ _ O
copy _ _ O
memory _ _ O
blocks _ _ O
" _ _ O
• _ _ O
" _ _ O
check _ _ O
the _ _ O
bounds _ _ O
of _ _ O
an _ _ O
array _ _ O
access _ _ O
“ _ _ O
• _ _ O
Without _ _ O
these _ _ O
, _ _ O
you _ _ O
’d _ _ O
just _ _ O
write _ _ O
your _ _ O
programs _ _ O
to _ _ O
use _ _ O
the _ _ O
simpler _ _ O
instructions _ _ O
to _ _ O
build _ _ O
the _ _ O
complex _ _ O
behavior _ _ O
itself _ _ O
. _ _ O
• _ _ O
x86 _ _ O
is _ _ O
very _ _ O
CISCy _ _ O
13 _ _ O

Types _ _ O
of _ _ O
ISAs _ _ O
: _ _ O
Overview _ _ O
• _ _ O
CISC _ _ O
: _ _ O
Complex _ _ O
Instruction _ _ O
Set _ _ O
Computer _ _ O
( _ _ O
does _ _ O
a _ _ O
whole _ _ O
lot _ _ O
) _ _ O
• _ _ O
RISC _ _ O
: _ _ O
Reduced _ _ O
Instruction _ _ O
Set _ _ O
Computer _ _ O
( _ _ O
does _ _ O
enough _ _ O
) _ _ O
• _ _ O
Both _ _ O
: _ _ O
Equivalent _ _ O
! _ _ O
! _ _ O
( _ _ O
RISC _ _ O
programs _ _ O
might _ _ O
be _ _ O
longer _ _ O
) _ _ O
“ _ _ O
Hackers _ _ O
” _ _ O
( _ _ O
1995 _ _ O
) _ _ O
– _ _ O
Of _ _ O
course _ _ O
, _ _ O
they _ _ O
are _ _ O
talking _ _ O
about _ _ O
a _ _ O
Pentium _ _ O
x86 _ _ O
chip _ _ O
… _ _ O
which _ _ O
thanks _ _ O
to _ _ O
its _ _ O
backwards _ _ O
compatibility _ _ O
, _ _ O
is _ _ O
CISC _ _ O
. _ _ O
Oh _ _ O
well _ _ O
! _ _ O
Then _ _ O
again _ _ O
… _ _ O
x86 _ _ O
is _ _ O
so _ _ O
complex _ _ O
, _ _ O
modern _ _ O
designs _ _ O
translate _ _ O
the _ _ O
CISC _ _ O
instructions _ _ O
into _ _ O
RISC _ _ O
microcode _ _ O
on _ _ O
the _ _ O
fly _ _ O
… _ _ O
so _ _ O
it _ _ O
’s _ _ O
RISC _ _ O
? _ _ O
? _ _ O
It _ _ O
can _ _ O
get _ _ O
complicated _ _ O
. _ _ O
14 _ _ O

x86 _ _ O
• _ _ O
Descended _ _ O
from _ _ O
16-bit _ _ O
8086 _ _ O
CPU _ _ O
from _ _ O
1978 _ _ O
. _ _ O
• _ _ O
Extended _ _ O
to _ _ O
32 _ _ O
bits _ _ O
, _ _ O
then _ _ O
64 _ _ O
. _ _ O
• _ _ O
Each _ _ O
version _ _ O
can _ _ O
run _ _ O
most _ _ O
programs _ _ O
from _ _ O
the _ _ O
previous _ _ O
version _ _ O
. _ _ O
• _ _ O
You _ _ O
can _ _ O
( _ _ O
mostly _ _ O
) _ _ O
run _ _ O
programs _ _ O
written _ _ O
in _ _ O
‘ _ _ O
78 _ _ O
on _ _ O
your _ _ O
brand _ _ O
new _ _ O
x86 _ _ O
CPU _ _ O
! _ _ O
• _ _ O
This _ _ O
ISA _ _ O
is _ _ O
complex _ _ O
! _ _ O
• _ _ O
30 _ _ O
years _ _ O
of _ _ O
backwards-compatibility _ _ O
… _ _ O
yikes _ _ O
. _ _ O
• _ _ O
We _ _ O
wo _ _ O
n’t _ _ O
exhaustively _ _ O
go _ _ O
over _ _ O
it _ _ O
. _ _ O
• _ _ O
There _ _ O
are _ _ O
, _ _ O
however _ _ O
, _ _ O
many _ _ O
very _ _ O
common _ _ O
idioms _ _ O
and _ _ O
instructions _ _ O
. _ _ O
• _ _ O
We _ _ O
will _ _ O
focus _ _ O
on _ _ O
these _ _ O
. _ _ O
• _ _ O
And _ _ O
we _ _ O
will _ _ O
focus _ _ O
on _ _ O
READING _ _ O
x86 _ _ O
, _ _ O
not _ _ O
writing _ _ O
it _ _ O
. _ _ O
15 _ _ O

x86 _ _ O
Registers _ _ O
( _ _ O
general _ _ O
) _ _ O
• _ _ O
Like _ _ O
MIPS _ _ O
, _ _ O
there _ _ O
are _ _ O
a _ _ O
set _ _ O
of _ _ O
general-purpose _ _ O
registers _ _ O
. _ _ O
• _ _ O
There _ _ O
are _ _ O
16 _ _ O
; _ _ O
64-bits _ _ O
in _ _ O
size _ _ O
and _ _ O
hold _ _ O
integer _ _ O
values _ _ O
in _ _ O
binary _ _ O
form _ _ O
. _ _ O
• _ _ O
Unlike _ _ O
MIPS _ _ O
, _ _ O
you _ _ O
can _ _ O
refer _ _ O
to _ _ O
parts _ _ O
of _ _ O
each _ _ O
register _ _ O
. _ _ O
• _ _ O
Called _ _ O
partial _ _ O
registers _ _ O
. _ _ O
Denoted _ _ O
by _ _ O
% _ _ O
Stack _ _ O
Pointer _ _ O
16-bit _ _ O
register _ _ O
names _ _ O
32-bit _ _ O
register _ _ O
names _ _ O
16 _ _ O

general _ _ O
purpose _ _ O
32-bit _ _ O
OLD _ _ O
Registers _ _ O
– _ _ O
32 _ _ O
bits _ _ O
wide _ _ O
8 _ _ O
bits _ _ O
32 _ _ O
bits _ _ O
16 _ _ O
bits _ _ O
% _ _ O
eax _ _ O
% _ _ O
ax _ _ O
% _ _ O
ah _ _ O
% _ _ O
al _ _ O
accumulate _ _ O
% _ _ O
ecx _ _ O
% _ _ O
cx _ _ O
% _ _ O
ch _ _ O
% _ _ O
cl _ _ O
counter _ _ O
% _ _ O
edx _ _ O
% _ _ O
dx _ _ O
% _ _ O
dh _ _ O
% _ _ O
dl _ _ O
data _ _ O
% _ _ O
ebx _ _ O
% _ _ O
bx _ _ O
% _ _ O
bh _ _ O
% _ _ O
bl _ _ O
base _ _ O
% _ _ O
esi _ _ O
% _ _ O
si _ _ O
source _ _ O
index _ _ O
% _ _ O
edi _ _ O
% _ _ O
di _ _ O
destination _ _ O
index _ _ O
% _ _ O
esp _ _ O
% _ _ O
sp _ _ O
stack _ _ O
pointer _ _ O
% _ _ O
ebp _ _ O
% _ _ O
bp _ _ O
base _ _ O
pointer _ _ O
16-bit _ _ O
virtual _ _ O
registers _ _ O
( _ _ O
backwards _ _ O
compatibility _ _ O
) _ _ O
Name _ _ O
Origin _ _ O
( _ _ O
mostly _ _ O
obsolete _ _ O
) _ _ O

x86 _ _ O
Registers _ _ O
( _ _ O
specialized _ _ O
) _ _ O
• _ _ O
There _ _ O
are _ _ O
also _ _ O
registers _ _ O
that _ _ O
you _ _ O
can _ _ O
not _ _ O
directly _ _ O
interact _ _ O
with _ _ O
. _ _ O
• _ _ O
Like _ _ O
MIPS _ _ O
, _ _ O
x86 _ _ O
has _ _ O
a _ _ O
program _ _ O
counter _ _ O
( _ _ O
) _ _ O
• _ _ O
Also _ _ O
like _ _ O
MIPS _ _ O
, _ _ O
it _ _ O
can _ _ O
not _ _ O
be _ _ O
read _ _ O
directly _ _ O
. _ _ O
• _ _ O
There _ _ O
is _ _ O
also _ _ O
a _ _ O
status _ _ O
register _ _ O
, _ _ O
which _ _ O
has _ _ O
information _ _ O
about _ _ O
the _ _ O
CPU _ _ O
state _ _ O
after _ _ O
an _ _ O
instruction _ _ O
is _ _ O
completed _ _ O
. _ _ O
• _ _ O
Stuff _ _ O
like _ _ O
a _ _ O
carry _ _ O
flag _ _ O
( _ _ O
CF _ _ O
) _ _ O
that _ _ O
denotes _ _ O
if _ _ O
an _ _ O
addition _ _ O
has _ _ O
a _ _ O
final _ _ O
carry _ _ O
. _ _ O
• _ _ O
Overflow _ _ O
detection _ _ O
( _ _ O
OF _ _ O
) _ _ O
denoting _ _ O
if _ _ O
an _ _ O
operation _ _ O
overflowed _ _ O
. _ _ O
• _ _ O
And _ _ O
some _ _ O
extra _ _ O
registers _ _ O
for _ _ O
vector _ _ O
math _ _ O
, _ _ O
floating _ _ O
point _ _ O
math _ _ O
, _ _ O
and _ _ O
for _ _ O
OS _ _ O
usage _ _ O
we _ _ O
wo _ _ O
n’t _ _ O
go _ _ O
over _ _ O
. _ _ O
18 _ _ O

x86 _ _ O
Instruction _ _ O
Types _ _ O
• _ _ O
In _ _ O
MIPS _ _ O
, _ _ O
you _ _ O
had _ _ O
R-type _ _ O
, _ _ O
I-type _ _ O
and _ _ O
J-type _ _ O
instructions _ _ O
. _ _ O
• _ _ O
In _ _ O
x86 _ _ O
( _ _ O
CISC _ _ O
) _ _ O
you _ _ O
generally _ _ O
can _ _ O
have _ _ O
any _ _ O
instruction _ _ O
refer _ _ O
to _ _ O
data _ _ O
anywhere _ _ O
it _ _ O
is _ _ O
: _ _ O
• _ _ O
Registers _ _ O
, _ _ O
Immediates _ _ O
, _ _ O
Memory _ _ O
addresses _ _ O
, _ _ O
etc _ _ O
• _ _ O
Can _ _ O
not _ _ O
refer _ _ O
to _ _ O
memory _ _ O
twice _ _ O
! _ _ O
( _ _ O
not _ _ O
possible _ _ O
: _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
) _ _ O
MIPS _ _ O
Immediates _ _ O
( _ _ O
prefixed _ _ O
by _ _ O
$ _ _ O
) _ _ O
Memory _ _ O
load _ _ O
( _ _ O
within _ _ O
parens _ _ O
) _ _ O
Memory _ _ O
store _ _ O
Displacement _ _ O
( _ _ O
can _ _ O
be _ _ O
-4 _ _ O
, _ _ O
etc _ _ O
) _ _ O
19 _ _ O

Complex _ _ O
Addressing _ _ O
• _ _ O
In _ _ O
MIPS _ _ O
, _ _ O
you _ _ O
would _ _ O
carefully _ _ O
craft _ _ O
the _ _ O
set _ _ O
of _ _ O
instructions _ _ O
necessary _ _ O
to _ _ O
interface _ _ O
with _ _ O
an _ _ O
array _ _ O
. _ _ O
( _ _ O
RISC _ _ O
) _ _ O
• _ _ O
In _ _ O
x86 _ _ O
, _ _ O
you _ _ O
can _ _ O
do _ _ O
a _ _ O
lot _ _ O
with _ _ O
just _ _ O
a _ _ O
single _ _ O
instruction _ _ O
. _ _ O
( _ _ O
CISC _ _ O
) _ _ O
• _ _ O
: _ _ O
Base _ _ O
+ _ _ O
( _ _ O
Index _ _ O
Scalar _ _ O
) _ _ O
where _ _ O
Scalar _ _ O
must _ _ O
be _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
4 _ _ O
or _ _ O
8 _ _ O
• _ _ O
The _ _ O
fields _ _ O
are _ _ O
all _ _ O
optional _ _ O
; _ _ O
i.e. _ _ O
, _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
does _ _ O
just _ _ O
Index _ _ O
Scalar _ _ O
MIPS _ _ O
“ _ _ O
Load _ _ O
Effective _ _ O
Address _ _ O
” _ _ O
LEA _ _ O
simply _ _ O
computes _ _ O
address _ _ O
( _ _ O
no _ _ O
memory _ _ O
access _ _ O
) _ _ O
20 _ _ O

Complex _ _ O
Addressing _ _ O
: _ _ O
CISC _ _ O
Strikes _ _ O
Again _ _ O
! _ _ O
! _ _ O
• _ _ O
When _ _ O
we _ _ O
say _ _ O
you _ _ O
can _ _ O
do _ _ O
a _ _ O
lot _ _ O
with _ _ O
just _ _ O
a _ _ O
single _ _ O
instruction _ _ O
, _ _ O
we _ _ O
mean _ _ O
it _ _ O
! _ _ O
• _ _ O
: _ _ O
Base _ _ O
+ _ _ O
( _ _ O
Index _ _ O
Scalar _ _ O
) _ _ O
where _ _ O
Scalar _ _ O
must _ _ O
be _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
4 _ _ O
or _ _ O
8 _ _ O
• _ _ O
What _ _ O
does _ _ O
the _ _ O
following _ _ O
do _ _ O
? _ _ O
• _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
“ _ _ O
Load _ _ O
Effective _ _ O
Address _ _ O
” _ _ O
? _ _ O
? _ _ O
? _ _ O
LEA _ _ O
simply _ _ O
computes _ _ O
address _ _ O
… _ _ O
it _ _ O
’s _ _ O
just _ _ O
very _ _ O
specific _ _ O
math _ _ O
. _ _ O
21 _ _ O

x86 _ _ O
Instruction _ _ O
Qualifiers _ _ O
• _ _ O
In _ _ O
MIPS _ _ O
, _ _ O
you _ _ O
sometimes _ _ O
had _ _ O
instructions _ _ O
varying _ _ O
on _ _ O
bitsize _ _ O
. _ _ O
• _ _ O
In _ _ O
x86 _ _ O
( _ _ O
CISC _ _ O
) _ _ O
you _ _ O
can _ _ O
operate _ _ O
on _ _ O
any _ _ O
part _ _ O
of _ _ O
a _ _ O
register _ _ O
. _ _ O
• _ _ O
64-bits _ _ O
, _ _ O
32-bits _ _ O
, _ _ O
16-bits _ _ O
… _ _ O
even _ _ O
8-bit _ _ O
sections _ _ O
sometimes _ _ O
. _ _ O
• _ _ O
The _ _ O
assembler _ _ O
can _ _ O
assume _ _ O
usually _ _ O
, _ _ O
but _ _ O
explicit _ _ O
names _ _ O
also _ _ O
work _ _ O
: _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
The _ _ O
assembler _ _ O
“ _ _ O
figures _ _ O
it _ _ O
out _ _ O
” _ _ O
MIPS64 _ _ O
“ _ _ O
quad _ _ O
word _ _ O
” _ _ O
which _ _ O
is _ _ O
64-bits _ _ O
. _ _ O
“ _ _ O
long _ _ O
word _ _ O
” _ _ O
which _ _ O
is _ _ O
32-bits _ _ O
. _ _ O
 _ _ O
Ugh _ _ O
. _ _ O
In _ _ O
x86 _ _ O
a _ _ O
“ _ _ O
word _ _ O
” _ _ O
here _ _ O
is _ _ O
16-bits _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
– _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
22 _ _ O

Hello _ _ O
World _ _ O
! _ _ O
( _ _ O
x86 _ _ O
vs. _ _ O
MIPS _ _ O
) _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
MIPS _ _ O
( _ _ O
MARS _ _ O
) _ _ O
23 _ _ O

Doing _ _ O
some _ _ O
x86 _ _ O
maths _ _ O
• _ _ O
x86 _ _ O
and _ _ O
MIPS _ _ O
have _ _ O
, _ _ O
essentially _ _ O
, _ _ O
the _ _ O
same _ _ O
mathematical _ _ O
instructions _ _ O
. _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
MIPS _ _ O
24 _ _ O

However _ _ O
, _ _ O
x86 _ _ O
lets _ _ O
you _ _ O
slice _ _ O
and _ _ O
dice _ _ O
• _ _ O
Each _ _ O
math _ _ O
instruction _ _ O
in _ _ O
x86 _ _ O
has _ _ O
variants _ _ O
based _ _ O
on _ _ O
the _ _ O
bitsize _ _ O
. _ _ O
• _ _ O
( _ _ O
64-bit _ _ O
) _ _ O
, _ _ O
( _ _ O
32-bit _ _ O
) _ _ O
, _ _ O
( _ _ O
16-bit _ _ O
) _ _ O
, _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
) _ _ O
( _ _ O
8-bit _ _ O
) _ _ O
( _ _ O
rest _ _ O
of _ _ O
field _ _ O
zero _ _ O
extended _ _ O
! _ _ O
! _ _ O
) _ _ O
MIPS _ _ O
Arithmetic _ _ O
shift _ _ O
( _ _ O
sign _ _ O
extends _ _ O
) _ _ O
Logical _ _ O
shift _ _ O
( _ _ O
zero _ _ O
extends _ _ O
) _ _ O
8-bit _ _ O
register _ _ O
aliases _ _ O
are _ _ O
not _ _ O
commonly _ _ O
used _ _ O
25 _ _ O

Assembly _ _ O
Interlude _ _ O
Here _ _ O
, _ _ O
we _ _ O
take _ _ O
a _ _ O
break _ _ O
, _ _ O
and _ _ O
look _ _ O
at _ _ O
some _ _ O
existing _ _ O
code _ _ O
. _ _ O
26 _ _ O

Why _ _ O
write _ _ O
assembly _ _ O
? _ _ O
When _ _ O
you _ _ O
can _ _ O
write _ _ O
C _ _ O
• _ _ O
You _ _ O
can _ _ O
take _ _ O
any _ _ O
of _ _ O
your _ _ O
C _ _ O
programs _ _ O
and _ _ O
emit _ _ O
the _ _ O
assembly _ _ O
. _ _ O
• _ _ O
The _ _ O
compiler _ _ O
can _ _ O
do _ _ O
this _ _ O
for _ _ O
you _ _ O
: _ _ O
• _ _ O
This _ _ O
will _ _ O
create _ _ O
a _ _ O
file _ _ O
called _ _ O
which _ _ O
looks _ _ O
… _ _ O
messy _ _ O
. _ _ O
• _ _ O
It _ _ O
has _ _ O
a _ _ O
ton _ _ O
of _ _ O
messy _ _ O
specific _ _ O
stuff _ _ O
wedged _ _ O
in _ _ O
there _ _ O
. _ _ O
• _ _ O
But _ _ O
you _ _ O
can _ _ O
generally _ _ O
pull _ _ O
apart _ _ O
some _ _ O
meaning _ _ O
from _ _ O
it _ _ O
. _ _ O
27 _ _ O

Looking _ _ O
at _ _ O
C _ _ O
compilers _ _ O
… _ _ O
• _ _ O
The _ _ O
messy _ _ O
output _ _ O
of _ _ O
the _ _ O
gcc _ _ O
compilation _ _ O
to _ _ O
assembly _ _ O
: _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
, _ _ O
main _ _ O
has _ _ O
n’t _ _ O
even _ _ O
shown _ _ O
up _ _ O
yet _ _ O
… _ _ O
) _ _ O
C _ _ O
28 _ _ O

Disassembly _ _ O
– _ _ O
See _ _ O
how _ _ O
the _ _ O
sausage _ _ O
is _ _ O
made _ _ O
… _ _ O
• _ _ O
So _ _ O
, _ _ O
that _ _ O
’s _ _ O
not _ _ O
very _ _ O
useful _ _ O
. _ _ O
And _ _ O
often _ _ O
we _ _ O
do _ _ O
n’t _ _ O
have _ _ O
the _ _ O
code _ _ O
! _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
go _ _ O
backward _ _ O
? _ _ O
• _ _ O
You _ _ O
can _ _ O
take _ _ O
any _ _ O
compiled _ _ O
program _ _ O
and _ _ O
emit _ _ O
the _ _ O
assembly _ _ O
. _ _ O
• _ _ O
Many _ _ O
tools _ _ O
can _ _ O
help _ _ O
you _ _ O
do _ _ O
this _ _ O
( _ _ O
radare _ _ O
, _ _ O
objdump _ _ O
, _ _ O
gdb _ _ O
) _ _ O
• _ _ O
Using _ _ O
a _ _ O
tool _ _ O
called _ _ O
objdump _ _ O
( _ _ O
only _ _ O
disassembles _ _ O
code _ _ O
section _ _ O
) _ _ O
: _ _ O
• _ _ O
This _ _ O
will _ _ O
create _ _ O
a _ _ O
file _ _ O
called _ _ O
. _ _ O
• _ _ O
You _ _ O
can _ _ O
glance _ _ O
at _ _ O
it _ _ O
and _ _ O
notice _ _ O
that _ _ O
it _ _ O
does _ _ O
not _ _ O
have _ _ O
names _ _ O
. _ _ O
• _ _ O
And _ _ O
labels _ _ O
are _ _ O
a _ _ O
bit _ _ O
, _ _ O
well _ _ O
, _ _ O
nonexistent _ _ O
. _ _ O
29 _ _ O

And _ _ O
… _ _ O
here _ _ O
we _ _ O
are _ _ O
… _ _ O
• _ _ O
An _ _ O
objdump _ _ O
disassembly _ _ O
is _ _ O
slightly _ _ O
lacking _ _ O
context _ _ O
. _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
, _ _ O
) _ _ O
C _ _ O
Machine _ _ O
code _ _ O
( _ _ O
in _ _ O
bytes _ _ O
) _ _ O
Instruction _ _ O
address _ _ O
30 _ _ O

Looking _ _ O
deeper _ _ O
• _ _ O
Now _ _ O
we _ _ O
are _ _ O
starting _ _ O
to _ _ O
read _ _ O
the _ _ O
code _ _ O
… _ _ O
It _ _ O
does _ _ O
what _ _ O
we _ _ O
tell _ _ O
it _ _ O
to _ _ O
do _ _ O
! _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
gas _ _ O
/ _ _ O
AT _ _ O
& _ _ O
T _ _ O
syntax _ _ O
, _ _ O
) _ _ O
Preserves _ _ O
( _ _ O
caller _ _ O
activation _ _ O
frame _ _ O
) _ _ O
Allocates _ _ O
“ _ _ O
” _ _ O
on _ _ O
stack _ _ O
( _ _ O
from _ _ O
top _ _ O
) _ _ O
Move _ _ O
argument _ _ O
to _ _ O
Compares _ _ O
to _ _ O
and _ _ O
sets _ _ O
Jumps _ _ O
if _ _ O
is _ _ O
0 _ _ O
( _ _ O
is _ _ O
positive _ _ O
) _ _ O
Sets _ _ O
to _ _ O
Resets _ _ O
caller _ _ O
activation _ _ O
frame _ _ O
Returns _ _ O
( _ _ O
return _ _ O
value _ _ O
is _ _ O
in _ _ O
) _ _ O
Instructions _ _ O
have _ _ O
varying _ _ O
size _ _ O
So _ _ O
, _ _ O
the _ _ O
next _ _ O
instruction _ _ O
address _ _ O
is _ _ O
irregular _ _ O
. _ _ O
Compare _ _ O
with _ _ O
MIPS _ _ O
/ _ _ O
RISC-V. _ _ O
31 _ _ O

Brought _ _ O
to _ _ O
you _ _ O
by _ _ O
the _ _ O
letters _ _ O
: _ _ O
C _ _ O
ABI _ _ O
• _ _ O
The _ _ O
C _ _ O
Application _ _ O
Binary _ _ O
Interface _ _ O
( _ _ O
ABI _ _ O
) _ _ O
are _ _ O
assembly _ _ O
conventions _ _ O
• _ _ O
Like _ _ O
MIPS _ _ O
, _ _ O
certain _ _ O
registers _ _ O
are _ _ O
typically _ _ O
used _ _ O
for _ _ O
returns _ _ O
values _ _ O
, _ _ O
args _ _ O
, _ _ O
etc _ _ O
• _ _ O
It _ _ O
is _ _ O
not _ _ O
defined _ _ O
by _ _ O
the _ _ O
language _ _ O
, _ _ O
but _ _ O
rather _ _ O
the _ _ O
OS _ _ O
. _ _ O
• _ _ O
Windows _ _ O
and _ _ O
Linux _ _ O
( _ _ O
UNIX _ _ O
/ _ _ O
System _ _ O
V _ _ O
) _ _ O
have _ _ O
a _ _ O
different _ _ O
C _ _ O
ABI _ _ O
 _ _ O
• _ _ O
In _ _ O
our _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
Linux _ _ O
C _ _ O
ABI _ _ O
, _ _ O
registers _ _ O
are _ _ O
used _ _ O
to _ _ O
pass _ _ O
arguments _ _ O
: _ _ O
• _ _ O
, _ _ O
, _ _ O
, _ _ O
, _ _ O
, _ _ O
( _ _ O
First _ _ O
, _ _ O
second _ _ O
, _ _ O
etc _ _ O
) _ _ O
( _ _ O
Like _ _ O
MIPS _ _ O
– _ _ O
) _ _ O
• _ _ O
Remaining _ _ O
arguments _ _ O
go _ _ O
on _ _ O
the _ _ O
stack _ _ O
. _ _ O
• _ _ O
Callee _ _ O
must _ _ O
preserve _ _ O
, _ _ O
, _ _ O
, _ _ O
, _ _ O
, _ _ O
( _ _ O
Like _ _ O
MIPS _ _ O
– _ _ O
• _ _ O
Return _ _ O
value _ _ O
: _ _ O
( _ _ O
overflows _ _ O
into _ _ O
for _ _ O
128-bits _ _ O
) _ _ O
( _ _ O
MIPS _ _ O
– _ _ O
) _ _ O
• _ _ O
Lots _ _ O
of _ _ O
other _ _ O
small _ _ O
things _ _ O
not _ _ O
worth _ _ O
going _ _ O
over _ _ O
. _ _ O
) _ _ O
• _ _ O
For _ _ O
reference _ _ O
: _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
github.com _ _ O
/ _ _ O
hjl-tools _ _ O
/ _ _ O
x86-psABI _ _ O
/ _ _ O
wiki _ _ O
/ _ _ O
x86 _ _ O
- _ _ O
64-psABI-1.0.pdf _ _ O
32 _ _ O



