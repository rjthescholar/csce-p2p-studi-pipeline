unlabeled|cs0449|lec09
-DOCSTART- -X- -X- O

8 _ _ O
Buffer _ _ O
Overflow _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
Introduction _ _ O
to _ _ O
Systems _ _ O
Software _ _ O
Luis _ _ O
Oliveira _ _ O
( _ _ O
with _ _ O
content _ _ O
borrowed _ _ O
from _ _ O
wilkie _ _ O
and _ _ O
Vinicius _ _ O
Petrucci _ _ O
) _ _ O

Review _ _ O
: _ _ O
General _ _ O
Memory _ _ O
Layout _ _ O
• _ _ O
Stack _ _ O
• _ _ O
Local _ _ O
variables _ _ O
( _ _ O
procedure _ _ O
context _ _ O
) _ _ O
• _ _ O
Heap _ _ O
2N-1 _ _ O
not _ _ O
drawn _ _ O
to _ _ O
scale _ _ O
Stack _ _ O
• _ _ O
Dynamically _ _ O
allocated _ _ O
as _ _ O
needed _ _ O
• _ _ O
malloc _ _ O
( _ _ O
) _ _ O
, _ _ O
calloc _ _ O
( _ _ O
) _ _ O
, _ _ O
new _ _ O
( _ _ O
) _ _ O
, _ _ O
… _ _ O
• _ _ O
Statically _ _ O
allocated _ _ O
Data _ _ O
• _ _ O
Read _ _ O
/ _ _ O
Write _ _ O
: _ _ O
global _ _ O
variables _ _ O
• _ _ O
Read-only _ _ O
: _ _ O
string _ _ O
literals _ _ O
Heap _ _ O
Static _ _ O
Data _ _ O
• _ _ O
Code _ _ O
/ _ _ O
Instructions _ _ O
• _ _ O
Executable _ _ O
machine _ _ O
instructions _ _ O
• _ _ O
Read-only _ _ O
Literals _ _ O
0 _ _ O
Instructions _ _ O

x86 _ _ O
- _ _ O
64 _ _ O
Linux _ _ O
Memory _ _ O
Layout _ _ O
• _ _ O
Stack _ _ O
• _ _ O
Runtime _ _ O
stack _ _ O
( _ _ O
8 _ _ O
MB _ _ O
limit _ _ O
) _ _ O
• _ _ O
e.g. _ _ O
, _ _ O
local _ _ O
variables _ _ O
• _ _ O
Heap _ _ O
00007FFFFFFFFFFF _ _ O
(= _ _ O
247–1 _ _ O
) _ _ O
00007FFFF0000000 _ _ O
not _ _ O
drawn _ _ O
to _ _ O
scale _ _ O
Shared _ _ O
Libraries _ _ O
Stack _ _ O
8 _ _ O
MB _ _ O
• _ _ O
Dynamically _ _ O
allocated _ _ O
as _ _ O
needed _ _ O
• _ _ O
When _ _ O
call _ _ O
malloc _ _ O
( _ _ O
) _ _ O
, _ _ O
new _ _ O
( _ _ O
) _ _ O
• _ _ O
Data _ _ O
• _ _ O
Statically _ _ O
allocated _ _ O
data _ _ O
• _ _ O
e.g. _ _ O
, _ _ O
global _ _ O
/ _ _ O
static _ _ O
vars _ _ O
, _ _ O
string _ _ O
constants _ _ O
• _ _ O
Text _ _ O
/ _ _ O
Shared _ _ O
Libraries _ _ O
Heap _ _ O
• _ _ O
Executable _ _ O
machine _ _ O
instructions _ _ O
• _ _ O
Read-only _ _ O
Hex _ _ O
Address _ _ O
400000 _ _ O
000000 _ _ O
Data _ _ O
Text _ _ O

Memory _ _ O
Allocation _ _ O
Example _ _ O
not _ _ O
drawn _ _ O
to _ _ O
scale _ _ O
char _ _ O
big_array _ _ O
[ _ _ O
1L _ _ O
< _ _ O
< _ _ O
24 _ _ O
] _ _ O
; _ _ O
/ _ _ O
* _ _ O
16 _ _ O
MB _ _ O
* _ _ O
/ _ _ O
char _ _ O
huge_array _ _ O
[ _ _ O
1L _ _ O
< _ _ O
< _ _ O
31 _ _ O
] _ _ O
; _ _ O
/ _ _ O
* _ _ O
2 _ _ O
GB _ _ O
* _ _ O
/ _ _ O
Stack _ _ O
int _ _ O
global _ _ O
= _ _ O
0 _ _ O
; _ _ O
int _ _ O
useless _ _ O
( _ _ O
) _ _ O
{ _ _ O
return _ _ O
0 _ _ O
; _ _ O
} _ _ O
int _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
void _ _ O
* _ _ O
p1 _ _ O
, _ _ O
* _ _ O
p2 _ _ O
, _ _ O
* _ _ O
p3 _ _ O
, _ _ O
* _ _ O
p4 _ _ O
; _ _ O
int _ _ O
local _ _ O
= _ _ O
0 _ _ O
; _ _ O
p1 _ _ O
= _ _ O
malloc _ _ O
( _ _ O
1L _ _ O
< _ _ O
< _ _ O
8) _ _ O
; _ _ O
/ _ _ O
* _ _ O
256 _ _ O
B _ _ O
* _ _ O
/ _ _ O
p2 _ _ O
= _ _ O
malloc _ _ O
( _ _ O
1L _ _ O
< _ _ O
< _ _ O
8) _ _ O
; _ _ O
/ _ _ O
* _ _ O
256 _ _ O
B _ _ O
* _ _ O
/ _ _ O
p3 _ _ O
= _ _ O
malloc _ _ O
( _ _ O
1L _ _ O
< _ _ O
< _ _ O
8) _ _ O
; _ _ O
/ _ _ O
* _ _ O
256 _ _ O
B _ _ O
* _ _ O
/ _ _ O
p4 _ _ O
= _ _ O
malloc _ _ O
( _ _ O
1L _ _ O
< _ _ O
< _ _ O
8) _ _ O
; _ _ O
/ _ _ O
* _ _ O
256 _ _ O
B _ _ O
* _ _ O
/ _ _ O
/ _ _ O
* _ _ O
Some _ _ O
print _ _ O
statements _ _ O
... _ _ O
* _ _ O
/ _ _ O
} _ _ O
Where _ _ O
does _ _ O
everything _ _ O
go _ _ O
? _ _ O
Other _ _ O
stuff _ _ O
Shared _ _ O
Libraries _ _ O
Heap _ _ O
Data _ _ O
Instructions _ _ O
4 _ _ O

Memory _ _ O
Allocation _ _ O
Example _ _ O
not _ _ O
drawn _ _ O
to _ _ O
scale _ _ O
char _ _ O
big_array _ _ O
[ _ _ O
1L _ _ O
< _ _ O
< _ _ O
24 _ _ O
] _ _ O
; _ _ O
/ _ _ O
* _ _ O
16 _ _ O
MB _ _ O
* _ _ O
/ _ _ O
char _ _ O
huge_array _ _ O
[ _ _ O
1L _ _ O
< _ _ O
< _ _ O
31 _ _ O
] _ _ O
; _ _ O
/ _ _ O
* _ _ O
2 _ _ O
GB _ _ O
* _ _ O
/ _ _ O
Stack _ _ O
int _ _ O
global _ _ O
= _ _ O
0 _ _ O
; _ _ O
int _ _ O
useless _ _ O
( _ _ O
) _ _ O
{ _ _ O
return _ _ O
0 _ _ O
; _ _ O
} _ _ O
int _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
void _ _ O
* _ _ O
p1 _ _ O
, _ _ O
* _ _ O
p2 _ _ O
, _ _ O
* _ _ O
p3 _ _ O
, _ _ O
* _ _ O
p4 _ _ O
; _ _ O
int _ _ O
local _ _ O
= _ _ O
0 _ _ O
; _ _ O
p1 _ _ O
= _ _ O
malloc _ _ O
( _ _ O
1L _ _ O
< _ _ O
< _ _ O
8) _ _ O
; _ _ O
/ _ _ O
* _ _ O
256 _ _ O
B _ _ O
* _ _ O
/ _ _ O
p2 _ _ O
= _ _ O
malloc _ _ O
( _ _ O
1L _ _ O
< _ _ O
< _ _ O
8) _ _ O
; _ _ O
/ _ _ O
* _ _ O
256 _ _ O
B _ _ O
* _ _ O
/ _ _ O
p3 _ _ O
= _ _ O
malloc _ _ O
( _ _ O
1L _ _ O
< _ _ O
< _ _ O
8) _ _ O
; _ _ O
/ _ _ O
* _ _ O
256 _ _ O
B _ _ O
* _ _ O
/ _ _ O
p4 _ _ O
= _ _ O
malloc _ _ O
( _ _ O
1L _ _ O
< _ _ O
< _ _ O
8) _ _ O
; _ _ O
/ _ _ O
* _ _ O
256 _ _ O
B _ _ O
* _ _ O
/ _ _ O
/ _ _ O
* _ _ O
Some _ _ O
print _ _ O
statements _ _ O
... _ _ O
* _ _ O
/ _ _ O
} _ _ O
Where _ _ O
does _ _ O
everything _ _ O
go _ _ O
? _ _ O
Heap _ _ O
stuff _ _ O
Other _ _ O
Shared _ _ O
Libraries _ _ O
Shared _ _ O
Libraries _ _ O
Heap _ _ O
Data _ _ O
Instructions _ _ O
5 _ _ O

Reminder _ _ O
: _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
/ _ _ O
Linux _ _ O
Stack _ _ O
Frame _ _ O
Higher _ _ O
Addresses _ _ O
• _ _ O
Caller _ _ O
’s _ _ O
Stack _ _ O
Frame _ _ O
• _ _ O
Arguments _ _ O
( _ _ O
if _ _ O
> _ _ O
6 _ _ O
args _ _ O
) _ _ O
for _ _ O
this _ _ O
call _ _ O
• _ _ O
Current _ _ O
/ _ _ O
Callee _ _ O
Stack _ _ O
Frame _ _ O
• _ _ O
Return _ _ O
address _ _ O
• _ _ O
Pushed _ _ O
by _ _ O
call _ _ O
instruction _ _ O
• _ _ O
Old _ _ O
frame _ _ O
pointer _ _ O
( _ _ O
optional _ _ O
) _ _ O
• _ _ O
Saved _ _ O
register _ _ O
context _ _ O
( _ _ O
when _ _ O
reusing _ _ O
registers _ _ O
) _ _ O
• _ _ O
Local _ _ O
variables _ _ O
( _ _ O
if _ _ O
ca _ _ O
n’t _ _ O
be _ _ O
kept _ _ O
in _ _ O
registers _ _ O
) _ _ O
• _ _ O
“ _ _ O
Argument _ _ O
build _ _ O
” _ _ O
area _ _ O
( _ _ O
If _ _ O
callee _ _ O
needs _ _ O
to _ _ O
call _ _ O
another _ _ O
function _ _ O
parameters _ _ O
for _ _ O
function _ _ O
about _ _ O
to _ _ O
call _ _ O
, _ _ O
if _ _ O
needed _ _ O
) _ _ O
Caller _ _ O
Frame _ _ O
Frame _ _ O
pointer _ _ O
% _ _ O
rbp _ _ O
( _ _ O
Optional _ _ O
) _ _ O
Arguments _ _ O
7 _ _ O
+ _ _ O
Return _ _ O
Addr _ _ O
Old _ _ O
% _ _ O
rbp _ _ O
Saved _ _ O
Registers _ _ O
+ _ _ O
Local _ _ O
Variables _ _ O
Stack _ _ O
pointer _ _ O
% _ _ O
rsp _ _ O
Argument _ _ O
Build _ _ O
( _ _ O
Optional _ _ O
) _ _ O
6 _ _ O
Lower _ _ O
Addresses _ _ O

Recall _ _ O
: _ _ O
Memory _ _ O
Referencing _ _ O
Bug _ _ O
Example _ _ O
typedef _ _ O
struct _ _ O
{ _ _ O
int _ _ O
a _ _ O
[ _ _ O
2 _ _ O
] _ _ O
; _ _ O
double _ _ O
d _ _ O
; _ _ O
} _ _ O
struct_t _ _ O
; _ _ O
double _ _ O
fun _ _ O
( _ _ O
int _ _ O
i _ _ O
) _ _ O
{ _ _ O
struct_t _ _ O
s _ _ O
; _ _ O
s.d _ _ O
= _ _ O
3.14 _ _ O
; _ _ O
s.a _ _ O
[ _ _ O
i _ _ O
] _ _ O
= _ _ O
1073741824 _ _ O
; _ _ O
/ _ _ O
* _ _ O
Possibly _ _ O
out _ _ O
of _ _ O
bounds _ _ O
* _ _ O
/ _ _ O
return _ _ O
s.d _ _ O
; _ _ O
} _ _ O
fun _ _ O
( _ _ O
0 _ _ O
) _ _ O
fun _ _ O
( _ _ O
1 _ _ O
) _ _ O
fun _ _ O
( _ _ O
2 _ _ O
) _ _ O
fun _ _ O
( _ _ O
3 _ _ O
) _ _ O
fun _ _ O
( _ _ O
4 _ _ O
) _ _ O
- _ _ O
> _ _ O
3.1400000000 _ _ O
- _ _ O
> _ _ O
3.1400000000 _ _ O
- _ _ O
> _ _ O
3.1399998665 _ _ O
- _ _ O
> _ _ O
2.0000006104 _ _ O
- _ _ O
> _ _ O
Segmentation _ _ O
fault _ _ O
Result _ _ O
is _ _ O
system _ _ O
specific _ _ O
7 _ _ O

Memory _ _ O
Referencing _ _ O
Bug _ _ O
Example _ _ O
fun _ _ O
( _ _ O
0 _ _ O
) _ _ O
fun _ _ O
( _ _ O
1 _ _ O
) _ _ O
fun _ _ O
( _ _ O
2 _ _ O
) _ _ O
fun _ _ O
( _ _ O
3 _ _ O
) _ _ O
fun _ _ O
( _ _ O
4 _ _ O
) _ _ O
fun _ _ O
( _ _ O
8 _ _ O
) _ _ O
typedef _ _ O
struct _ _ O
{ _ _ O
int _ _ O
a _ _ O
[ _ _ O
2 _ _ O
] _ _ O
; _ _ O
double _ _ O
d _ _ O
; _ _ O
} _ _ O
struct_t _ _ O
; _ _ O
Memory _ _ O
: _ _ O
struct_t _ _ O
? _ _ O
? _ _ O
? _ _ O
8 _ _ O
Critical _ _ O
State _ _ O
7 _ _ O
Critical _ _ O
State _ _ O
6 _ _ O
Critical _ _ O
State _ _ O
5 _ _ O
Critical _ _ O
State _ _ O
4 _ _ O
d7 _ _ O
... _ _ O
d4 _ _ O
3 _ _ O
d3 _ _ O
... _ _ O
d0 _ _ O
2 _ _ O
a _ _ O
[ _ _ O
1 _ _ O
] _ _ O
1 _ _ O
a _ _ O
[ _ _ O
0 _ _ O
] _ _ O
0 _ _ O
- _ _ O
> _ _ O
3.1400000000 _ _ O
- _ _ O
> _ _ O
3.1400000000 _ _ O
- _ _ O
> _ _ O
3.1399998665 _ _ O
- _ _ O
> _ _ O
2.0000006104 _ _ O
- _ _ O
> _ _ O
Segmentation _ _ O
fault _ _ O
- _ _ O
> _ _ O
3.1400000000 _ _ O
Location _ _ O
accessed _ _ O
by _ _ O
fun _ _ O
( _ _ O
i _ _ O
) _ _ O
8 _ _ O

Buffer _ _ O
Overflow _ _ O
• _ _ O
Traditional _ _ O
Linux _ _ O
memory _ _ O
layout _ _ O
provide _ _ O
opportunities _ _ O
for _ _ O
malicious _ _ O
programs _ _ O
• _ _ O
Stack _ _ O
grows _ _ O
“ _ _ O
backwards _ _ O
” _ _ O
in _ _ O
memory _ _ O
• _ _ O
Data _ _ O
and _ _ O
instructions _ _ O
both _ _ O
stored _ _ O
in _ _ O
the _ _ O
same _ _ O
memory _ _ O
• _ _ O
Recall _ _ O
that _ _ O
C _ _ O
does _ _ O
not _ _ O
check _ _ O
array _ _ O
bounds _ _ O
• _ _ O
Many _ _ O
Unix _ _ O
/ _ _ O
Linux _ _ O
/ _ _ O
C _ _ O
functions _ _ O
do _ _ O
n’t _ _ O
check _ _ O
argument _ _ O
sizes _ _ O
• _ _ O
Allows _ _ O
overflowing _ _ O
( _ _ O
writing _ _ O
past _ _ O
the _ _ O
end _ _ O
) _ _ O
of _ _ O
buffers _ _ O
( _ _ O
arrays _ _ O
) _ _ O
9 _ _ O

Buffer _ _ O
Overflow _ _ O
( _ _ O
cont _ _ O
. _ _ O
) _ _ O
• _ _ O
Buffer _ _ O
overflows _ _ O
on _ _ O
the _ _ O
stack _ _ O
can _ _ O
overwrite _ _ O
“ _ _ O
interesting _ _ O
” _ _ O
data _ _ O
• _ _ O
Attackers _ _ O
just _ _ O
choose _ _ O
the _ _ O
right _ _ O
inputs _ _ O
• _ _ O
Simplest _ _ O
form _ _ O
( _ _ O
sometimes _ _ O
called _ _ O
“ _ _ O
stack _ _ O
smashing _ _ O
” _ _ O
) _ _ O
• _ _ O
Unchecked _ _ O
length _ _ O
on _ _ O
string _ _ O
input _ _ O
into _ _ O
bounded _ _ O
array _ _ O
causes _ _ O
overwriting _ _ O
of _ _ O
stack _ _ O
data _ _ O
• _ _ O
Try _ _ O
to _ _ O
change _ _ O
the _ _ O
return _ _ O
address _ _ O
of _ _ O
the _ _ O
current _ _ O
procedure _ _ O
• _ _ O
Why _ _ O
is _ _ O
this _ _ O
a _ _ O
big _ _ O
deal _ _ O
? _ _ O
• _ _ O
It _ _ O
is _ _ O
( _ _ O
was _ _ O
? _ _ O
) _ _ O
the _ _ O
# _ _ O
1 _ _ O
technical _ _ O
cause _ _ O
of _ _ O
security _ _ O
vulnerabilities _ _ O
• _ _ O
# _ _ O
1 _ _ O
overall _ _ O
cause _ _ O
is _ _ O
social _ _ O
engineering _ _ O
/ _ _ O
user _ _ O
ignorance _ _ O
10 _ _ O

String _ _ O
Library _ _ O
Code _ _ O
• _ _ O
Implementation _ _ O
of _ _ O
Unix _ _ O
function _ _ O
gets _ _ O
( _ _ O
) _ _ O
/ _ _ O
* _ _ O
Get _ _ O
string _ _ O
from _ _ O
stdin _ _ O
* _ _ O
/ _ _ O
char _ _ O
* _ _ O
gets _ _ O
( _ _ O
char _ _ O
* _ _ O
dest _ _ O
) _ _ O
{ _ _ O
int _ _ O
c _ _ O
= _ _ O
getchar _ _ O
( _ _ O
) _ _ O
; _ _ O
char _ _ O
* _ _ O
p _ _ O
= _ _ O
dest _ _ O
; _ _ O
while _ _ O
( _ _ O
c _ _ O
! _ _ O
= _ _ O
EOF _ _ O
& _ _ O
& _ _ O
c _ _ O
! _ _ O
= _ _ O
' _ _ O
\n _ _ O
' _ _ O
) _ _ O
{ _ _ O
* _ _ O
p++ _ _ O
= _ _ O
c _ _ O
; _ _ O
c _ _ O
= _ _ O
getchar _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
* _ _ O
p _ _ O
= _ _ O
' _ _ O
\0 _ _ O
' _ _ O
; _ _ O
return _ _ O
dest _ _ O
; _ _ O
} _ _ O
pointer _ _ O
to _ _ O
start _ _ O
of _ _ O
an _ _ O
array _ _ O
same _ _ O
as _ _ O
: _ _ O
* _ _ O
p _ _ O
= _ _ O
c _ _ O
; _ _ O
p++ _ _ O
; _ _ O
What _ _ O
could _ _ O
go _ _ O
wrong _ _ O
in _ _ O
this _ _ O
code _ _ O
? _ _ O
11 _ _ O

String _ _ O
Library _ _ O
Code _ _ O
• _ _ O
Implementation _ _ O
of _ _ O
Unix _ _ O
function _ _ O
gets _ _ O
( _ _ O
) _ _ O
/ _ _ O
* _ _ O
Get _ _ O
string _ _ O
from _ _ O
stdin _ _ O
* _ _ O
/ _ _ O
char _ _ O
* _ _ O
gets _ _ O
( _ _ O
char _ _ O
* _ _ O
dest _ _ O
) _ _ O
{ _ _ O
int _ _ O
c _ _ O
= _ _ O
getchar _ _ O
( _ _ O
) _ _ O
; _ _ O
char _ _ O
* _ _ O
p _ _ O
= _ _ O
dest _ _ O
; _ _ O
while _ _ O
( _ _ O
c _ _ O
! _ _ O
= _ _ O
EOF _ _ O
& _ _ O
& _ _ O
c _ _ O
! _ _ O
= _ _ O
' _ _ O
\n _ _ O
' _ _ O
) _ _ O
{ _ _ O
* _ _ O
p++ _ _ O
= _ _ O
c _ _ O
; _ _ O
c _ _ O
= _ _ O
getchar _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
* _ _ O
p _ _ O
= _ _ O
' _ _ O
\0 _ _ O
' _ _ O
; _ _ O
return _ _ O
dest _ _ O
; _ _ O
} _ _ O
• _ _ O
No _ _ O
way _ _ O
to _ _ O
specify _ _ O
limit _ _ O
on _ _ O
number _ _ O
of _ _ O
characters _ _ O
to _ _ O
read _ _ O
• _ _ O
Similar _ _ O
problems _ _ O
with _ _ O
other _ _ O
Unix _ _ O
functions _ _ O
: _ _ O
• _ _ O
strcpy _ _ O
: _ _ O
Copies _ _ O
string _ _ O
of _ _ O
arbitrary _ _ O
length _ _ O
to _ _ O
a _ _ O
dst _ _ O
• _ _ O
scanf _ _ O
, _ _ O
fscanf _ _ O
, _ _ O
sscanf _ _ O
, _ _ O
when _ _ O
given _ _ O
% _ _ O
s _ _ O
specifier _ _ O
12 _ _ O

Vulnerable _ _ O
Buffer _ _ O
Code _ _ O
/ _ _ O
* _ _ O
Echo _ _ O
Line _ _ O
* _ _ O
/ _ _ O
void _ _ O
echo _ _ O
( _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
8 _ _ O
] _ _ O
; _ _ O
gets _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
puts _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
} _ _ O
Code _ _ O
example _ _ O
to _ _ O
try _ _ O
on _ _ O
Thoth _ _ O
! _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
bit.ly _ _ O
/ _ _ O
3eWwndQ _ _ O
/ _ _ O
* _ _ O
Way _ _ O
too _ _ O
small _ _ O
! _ _ O
* _ _ O
/ _ _ O
 _ _ O
BTW _ _ O
, _ _ O
how _ _ O
big _ _ O
is _ _ O
big _ _ O
enough _ _ O
? _ _ O
void _ _ O
call_echo _ _ O
( _ _ O
) _ _ O
{ _ _ O
echo _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
unix _ _ O
> _ _ O
. _ _ O
/ _ _ O
buf-nsp _ _ O
Enter _ _ O
string _ _ O
: _ _ O
12345678901234567890123 _ _ O
12345678901234567890123 _ _ O
unix _ _ O
> _ _ O
. _ _ O
/ _ _ O
buf-nsp _ _ O
Enter _ _ O
string _ _ O
: _ _ O
123456789012345678901234 _ _ O
Segmentation _ _ O
Fault _ _ O

Buffer _ _ O
Overflow _ _ O
Disassembly _ _ O
24 _ _ O
bytes _ _ O
( _ _ O
decimal _ _ O
) _ _ O
echo _ _ O
: _ _ O
000000000040069c _ _ O
< _ _ O
echo _ _ O
> _ _ O
: _ _ O
40069c _ _ O
: _ _ O
48 _ _ O
83 _ _ O
ec _ _ O
18 _ _ O
4006a0 _ _ O
: _ _ O
48 _ _ O
89 _ _ O
e7 _ _ O
4006a3 _ _ O
: _ _ O
e8 _ _ O
a5 _ _ O
ff _ _ O
ff _ _ O
ff _ _ O
4006a8 _ _ O
: _ _ O
48 _ _ O
89 _ _ O
e7 _ _ O
4006ab _ _ O
: _ _ O
e8 _ _ O
50 _ _ O
fe _ _ O
ff _ _ O
ff _ _ O
4006b0 _ _ O
: _ _ O
48 _ _ O
83 _ _ O
c4 _ _ O
18 _ _ O
4006b4 _ _ O
: _ _ O
c3 _ _ O
$ _ _ O
0x18 _ _ O
, _ _ O
%rsp _ _ O
% _ _ O
rsp _ _ O
, _ _ O
%rdi _ _ O
40064d _ _ O
< _ _ O
gets _ _ O
> _ _ O
% _ _ O
rsp _ _ O
, _ _ O
%rdi _ _ O
400500 _ _ O
< _ _ O
puts@plt _ _ O
> _ _ O
$ _ _ O
0x18 _ _ O
, _ _ O
%rsp _ _ O
return _ _ O
address _ _ O
call_echo _ _ O
: _ _ O
4006b5 _ _ O
: _ _ O
4006b9 _ _ O
: _ _ O
4006be _ _ O
: _ _ O
4006c3 _ _ O
: _ _ O
4006c7 _ _ O
: _ _ O
sub _ _ O
mov _ _ O
callq _ _ O
mov _ _ O
callq _ _ O
add _ _ O
retq _ _ O
48 _ _ O
83 _ _ O
ec _ _ O
08 _ _ O
b8 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
e8 _ _ O
d9 _ _ O
ff _ _ O
ff _ _ O
ff _ _ O
48 _ _ O
83 _ _ O
c4 _ _ O
08 _ _ O
c3 _ _ O
sub _ _ O
mov _ _ O
callq _ _ O
add _ _ O
retq _ _ O
$ _ _ O
0x8 _ _ O
, _ _ O
%rsp _ _ O
$ _ _ O
0x0 _ _ O
, _ _ O
%eax _ _ O
40069c _ _ O
< _ _ O
echo _ _ O
> _ _ O
$ _ _ O
0x8 _ _ O
, _ _ O
%rsp _ _ O

Buffer _ _ O
Overflow _ _ O
Stack _ _ O
Example _ _ O
Before _ _ O
call _ _ O
to _ _ O
gets _ _ O
Stack _ _ O
Frame _ _ O
for _ _ O
call_echo _ _ O
Return _ _ O
Address _ _ O
( _ _ O
8 _ _ O
bytes _ _ O
) _ _ O
/ _ _ O
* _ _ O
Echo _ _ O
Line _ _ O
* _ _ O
/ _ _ O
void _ _ O
echo _ _ O
( _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
4 _ _ O
] _ _ O
; _ _ O
gets _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
puts _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
* _ _ O
Way _ _ O
too _ _ O
small _ _ O
! _ _ O
* _ _ O
/ _ _ O
20 _ _ O
bytes _ _ O
unused _ _ O
[ _ _ O
3 _ _ O
] _ _ O
[ _ _ O
2 _ _ O
] _ _ O
[ _ _ O
1 _ _ O
] _ _ O
[ _ _ O
0 _ _ O
] _ _ O
buf _ _ O
% _ _ O
rsp _ _ O
echo _ _ O
: _ _ O
subq _ _ O
$ _ _ O
0x18 _ _ O
, _ _ O
% _ _ O
rsp _ _ O
movq _ _ O
% _ _ O
rsp _ _ O
, _ _ O
% _ _ O
rdi _ _ O
call _ _ O
gets _ _ O
. _ _ O
. _ _ O
. _ _ O
15 _ _ O

Buffer _ _ O
Overflow _ _ O
Stack _ _ O
Example _ _ O
Before _ _ O
call _ _ O
to _ _ O
gets _ _ O
Stack _ _ O
Frame _ _ O
for _ _ O
call_echo _ _ O
00 _ _ O
Address _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
Return _ _ O
00 _ _ O
( _ _ O
8 _ _ O
40bytes _ _ O
) _ _ O
06 _ _ O
c3 _ _ O
20 _ _ O
bytes _ _ O
unused _ _ O
[ _ _ O
3 _ _ O
] _ _ O
[ _ _ O
2 _ _ O
] _ _ O
[ _ _ O
1 _ _ O
] _ _ O
[ _ _ O
0 _ _ O
] _ _ O
buf _ _ O
void _ _ O
echo _ _ O
( _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
4 _ _ O
] _ _ O
; _ _ O
gets _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
. _ _ O
. _ _ O
. _ _ O
} _ _ O
echo _ _ O
: _ _ O
subq _ _ O
$ _ _ O
0x18 _ _ O
, _ _ O
% _ _ O
rsp _ _ O
movq _ _ O
% _ _ O
rsp _ _ O
, _ _ O
% _ _ O
rdi _ _ O
call _ _ O
gets _ _ O
. _ _ O
. _ _ O
. _ _ O
call_echo _ _ O
: _ _ O
. _ _ O
. _ _ O
. _ _ O
4006be _ _ O
: _ _ O
4006c3 _ _ O
: _ _ O
. _ _ O
. _ _ O
. _ _ O
callq _ _ O
add _ _ O
4006cf _ _ O
< _ _ O
echo _ _ O
> _ _ O
$ _ _ O
0x8 _ _ O
, _ _ O
%rsp _ _ O
% _ _ O
rsp _ _ O
16 _ _ O

Buffer _ _ O
Overflow _ _ O
Stack _ _ O
Example _ _ O
# _ _ O
1 _ _ O
After _ _ O
call _ _ O
to _ _ O
gets _ _ O
Stack _ _ O
Frame _ _ O
for _ _ O
call_echo _ _ O
00 _ _ O
00 _ _ O
Address _ _ O
00 _ _ O
00 _ _ O
Return _ _ O
00 _ _ O
( _ _ O
8 _ _ O
40bytes _ _ O
) _ _ O
06 _ _ O
c3 _ _ O
00 _ _ O
32 _ _ O
31 _ _ O
30 _ _ O
39 _ _ O
38 _ _ O
37 _ _ O
36 _ _ O
35 _ _ O
34 _ _ O
unused _ _ O
33 _ _ O
32 _ _ O
20 _ _ O
bytes _ _ O
31 _ _ O
30 _ _ O
39 _ _ O
38 _ _ O
37 _ _ O
36 _ _ O
35 _ _ O
34 _ _ O
33 _ _ O
32 _ _ O
31 _ _ O
30 _ _ O
buf _ _ O
void _ _ O
echo _ _ O
( _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
4 _ _ O
] _ _ O
; _ _ O
gets _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
. _ _ O
. _ _ O
. _ _ O
} _ _ O
echo _ _ O
: _ _ O
subq _ _ O
$ _ _ O
0x18 _ _ O
, _ _ O
% _ _ O
rsp _ _ O
movq _ _ O
% _ _ O
rsp _ _ O
, _ _ O
% _ _ O
rdi _ _ O
call _ _ O
gets _ _ O
. _ _ O
. _ _ O
. _ _ O
call_echo _ _ O
: _ _ O
. _ _ O
. _ _ O
. _ _ O
4006be _ _ O
: _ _ O
4006c3 _ _ O
: _ _ O
. _ _ O
. _ _ O
. _ _ O
% _ _ O
rsp _ _ O
callq _ _ O
add _ _ O
4006cf _ _ O
< _ _ O
echo _ _ O
> _ _ O
$ _ _ O
0x8 _ _ O
, _ _ O
%rsp _ _ O
unix _ _ O
> _ _ O
. _ _ O
/ _ _ O
bufdemo-nsp _ _ O
Type _ _ O
a _ _ O
string _ _ O
: _ _ O
01234567890123456789012 _ _ O
01234567890123456789012 _ _ O
“ _ _ O
01234567890123456789012\0 _ _ O
” _ _ O
Overflowed _ _ O
buffer _ _ O
, _ _ O
but _ _ O
did _ _ O
not _ _ O
corrupt _ _ O
state _ _ O
17 _ _ O

Buffer _ _ O
Overflow _ _ O
Stack _ _ O
Example _ _ O
# _ _ O
2 _ _ O
After _ _ O
call _ _ O
to _ _ O
gets _ _ O
Stack _ _ O
Frame _ _ O
for _ _ O
call_echo _ _ O
00 _ _ O
00 _ _ O
Address _ _ O
00 _ _ O
00 _ _ O
Return _ _ O
00 _ _ O
( _ _ O
8 _ _ O
40bytes _ _ O
) _ _ O
06 _ _ O
00 _ _ O
33 _ _ O
32 _ _ O
31 _ _ O
30 _ _ O
39 _ _ O
38 _ _ O
37 _ _ O
36 _ _ O
35 _ _ O
34 _ _ O
unused _ _ O
33 _ _ O
32 _ _ O
20 _ _ O
bytes _ _ O
31 _ _ O
30 _ _ O
39 _ _ O
38 _ _ O
37 _ _ O
36 _ _ O
35 _ _ O
34 _ _ O
33 _ _ O
32 _ _ O
31 _ _ O
30 _ _ O
buf _ _ O
void _ _ O
echo _ _ O
( _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
4 _ _ O
] _ _ O
; _ _ O
gets _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
. _ _ O
. _ _ O
. _ _ O
} _ _ O
echo _ _ O
: _ _ O
subq _ _ O
$ _ _ O
0x18 _ _ O
, _ _ O
% _ _ O
rsp _ _ O
movq _ _ O
% _ _ O
rsp _ _ O
, _ _ O
% _ _ O
rdi _ _ O
call _ _ O
gets _ _ O
. _ _ O
. _ _ O
. _ _ O
call_echo _ _ O
: _ _ O
. _ _ O
. _ _ O
. _ _ O
4006be _ _ O
: _ _ O
4006c3 _ _ O
: _ _ O
. _ _ O
. _ _ O
. _ _ O
% _ _ O
rsp _ _ O
callq _ _ O
add _ _ O
4006cf _ _ O
< _ _ O
echo _ _ O
> _ _ O
$ _ _ O
0x8 _ _ O
, _ _ O
%rsp _ _ O
unix _ _ O
> _ _ O
. _ _ O
/ _ _ O
bufdemo-nsp _ _ O
Type _ _ O
a _ _ O
string _ _ O
: _ _ O
012345678901234567890123 _ _ O
012345678901234567890123 _ _ O
Segmentation _ _ O
fault _ _ O
Program _ _ O
“ _ _ O
returned _ _ O
” _ _ O
to _ _ O
0x0400600 _ _ O
, _ _ O
and _ _ O
then _ _ O
crashed _ _ O
. _ _ O
18 _ _ O

Buffer _ _ O
Overflow _ _ O
Example _ _ O
# _ _ O
2 _ _ O
Explained _ _ O
After _ _ O
return _ _ O
from _ _ O
echo _ _ O
0000000000400500 _ _ O
< _ _ O
deregister_tm_clones _ _ O
> _ _ O
: _ _ O
Stack _ _ O
frame _ _ O
for _ _ O
400500 _ _ O
: _ _ O
mov _ _ O
$ _ _ O
0x60104f _ _ O
, _ _ O
%eax _ _ O
call_echo _ _ O
400505 _ _ O
: _ _ O
push _ _ O
% _ _ O
rbp _ _ O
⟵%rsp _ _ O
400506 _ _ O
: _ _ O
sub _ _ O
$ _ _ O
0x601048 _ _ O
, _ _ O
%rax _ _ O
40050c _ _ O
: _ _ O
cmp _ _ O
$ _ _ O
0xe _ _ O
, _ _ O
%rax _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
400510 _ _ O
: _ _ O
mov _ _ O
% _ _ O
rsp _ _ O
, _ _ O
%rbp _ _ O
00 _ _ O
40 _ _ O
05 _ _ O
00 _ _ O
400513 _ _ O
: _ _ O
jbe _ _ O
400530 _ _ O
34 _ _ O
33 _ _ O
32 _ _ O
31 _ _ O
400515 _ _ O
: _ _ O
mov _ _ O
$ _ _ O
0x0 _ _ O
, _ _ O
%eax _ _ O
40051a _ _ O
: _ _ O
test _ _ O
% _ _ O
rax _ _ O
, _ _ O
%rax _ _ O
30 _ _ O
39 _ _ O
38 _ _ O
37 _ _ O
40051d _ _ O
: _ _ O
je _ _ O
400530 _ _ O
36 _ _ O
35 _ _ O
34 _ _ O
33 _ _ O
40051f _ _ O
: _ _ O
pop _ _ O
% _ _ O
rbp _ _ O
32 _ _ O
31 _ _ O
30 _ _ O
39 _ _ O
400520 _ _ O
: _ _ O
mov _ _ O
$ _ _ O
0x601048 _ _ O
, _ _ O
%edi _ _ O
400525 _ _ O
: _ _ O
jmpq _ _ O
* _ _ O
% _ _ O
rax _ _ O
38 _ _ O
37 _ _ O
36 _ _ O
35 _ _ O
400527 _ _ O
: _ _ O
nopw _ _ O
0x0 _ _ O
( _ _ O
%rax _ _ O
, _ _ O
%rax _ _ O
, _ _ O
1 _ _ O
) _ _ O
34 _ _ O
33 _ _ O
32 _ _ O
31 _ _ O
buf _ _ O
40052e _ _ O
: _ _ O
nop _ _ O
400530 _ _ O
: _ _ O
pop _ _ O
% _ _ O
rbp _ _ O
400531 _ _ O
: _ _ O
retq _ _ O
“ _ _ O
Returns _ _ O
” _ _ O
to _ _ O
unrelated _ _ O
code _ _ O
, _ _ O
but _ _ O
continues _ _ O
! _ _ O
Eventually _ _ O
segfaults _ _ O
on _ _ O
retq _ _ O
of _ _ O
deregister_tm_clones _ _ O
. _ _ O
19 _ _ O

Malicious _ _ O
Use _ _ O
of _ _ O
Buffer _ _ O
Overflow _ _ O
: _ _ O
Code _ _ O
Injection _ _ O
Attacks _ _ O
Stack _ _ O
after _ _ O
call _ _ O
to _ _ O
gets _ _ O
( _ _ O
) _ _ O
High _ _ O
Addresses _ _ O
void _ _ O
foo _ _ O
( _ _ O
) _ _ O
{ _ _ O
bar _ _ O
( _ _ O
) _ _ O
; _ _ O
A _ _ O
: _ _ O
... _ _ O
} _ _ O
int _ _ O
bar _ _ O
( _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
64 _ _ O
] _ _ O
; _ _ O
gets _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
... _ _ O
return _ _ O
... _ _ O
; _ _ O
} _ _ O
foo _ _ O
stack _ _ O
frame _ _ O
return _ _ O
address _ _ O
A _ _ O
AB _ _ O
( _ _ O
return _ _ O
address _ _ O
) _ _ O
data _ _ O
written _ _ O
by _ _ O
gets _ _ O
( _ _ O
) _ _ O
buf _ _ O
starts _ _ O
here _ _ O
B _ _ O
pad _ _ O
bar _ _ O
stack _ _ O
frame _ _ O
exploit _ _ O
code _ _ O
Low _ _ O
Addresses _ _ O
• _ _ O
Input _ _ O
string _ _ O
contains _ _ O
byte _ _ O
representation _ _ O
of _ _ O
executable _ _ O
code _ _ O
• _ _ O
Overwrite _ _ O
return _ _ O
address _ _ O
A _ _ O
with _ _ O
address _ _ O
of _ _ O
buffer _ _ O
B _ _ O
• _ _ O
When _ _ O
bar _ _ O
( _ _ O
) _ _ O
executes _ _ O
ret _ _ O
, _ _ O
will _ _ O
jump _ _ O
to _ _ O
exploit _ _ O
code _ _ O
20 _ _ O

Exploits _ _ O
Based _ _ O
on _ _ O
Buffer _ _ O
Overflows _ _ O
• _ _ O
Buffer _ _ O
overflow _ _ O
bugs _ _ O
can _ _ O
allow _ _ O
remote _ _ O
machines _ _ O
to _ _ O
execute _ _ O
arbitrary _ _ O
code _ _ O
on _ _ O
victim _ _ O
machines _ _ O
• _ _ O
Distressingly _ _ O
common _ _ O
in _ _ O
real _ _ O
programs _ _ O
• _ _ O
Programmers _ _ O
keep _ _ O
making _ _ O
the _ _ O
same _ _ O
mistakes _ _ O
 _ _ O
• _ _ O
Recent _ _ O
measures _ _ O
make _ _ O
these _ _ O
attacks _ _ O
much _ _ O
more _ _ O
difficult _ _ O
• _ _ O
Examples _ _ O
across _ _ O
the _ _ O
decades _ _ O
• _ _ O
Original _ _ O
“ _ _ O
Internet _ _ O
worm _ _ O
” _ _ O
( _ _ O
1988 _ _ O
) _ _ O
• _ _ O
Still _ _ O
happens _ _ O
! _ _ O
! _ _ O
• _ _ O
Heartbleed _ _ O
( _ _ O
2014 _ _ O
, _ _ O
affected _ _ O
17 _ _ O
% _ _ O
of _ _ O
servers _ _ O
) _ _ O
• _ _ O
Cloudbleed _ _ O
( _ _ O
2017 _ _ O
) _ _ O
• _ _ O
Fun _ _ O
: _ _ O
Nintendo _ _ O
hacks _ _ O
• _ _ O
Using _ _ O
glitches _ _ O
to _ _ O
rewrite _ _ O
code _ _ O
: _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.youtube.com _ _ O
/ _ _ O
watch?v=TqK-2jUQBUY _ _ O
• _ _ O
FlappyBird _ _ O
in _ _ O
Mario _ _ O
: _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.youtube.com _ _ O
/ _ _ O
watch?v=hB6eY73sLV0 _ _ O

Example _ _ O
: _ _ O
the _ _ O
original _ _ O
Internet _ _ O
worm _ _ O
( _ _ O
1988 _ _ O
) _ _ O
• _ _ O
Exploited _ _ O
a _ _ O
few _ _ O
vulnerabilities _ _ O
to _ _ O
spread _ _ O
• _ _ O
Early _ _ O
versions _ _ O
of _ _ O
the _ _ O
finger _ _ O
server _ _ O
( _ _ O
fingerd _ _ O
) _ _ O
used _ _ O
gets _ _ O
( _ _ O
) _ _ O
to _ _ O
read _ _ O
the _ _ O
argument _ _ O
sent _ _ O
by _ _ O
the _ _ O
client _ _ O
: _ _ O
• _ _ O
finger _ _ O
droh@cs.cmu.edu _ _ O
• _ _ O
Worm _ _ O
attacked _ _ O
fingerd _ _ O
server _ _ O
with _ _ O
phony _ _ O
argument _ _ O
: _ _ O
• _ _ O
finger _ _ O
“ _ _ O
exploit-code _ _ O
padding _ _ O
new-return-addr _ _ O
” _ _ O
• _ _ O
Exploit _ _ O
code _ _ O
: _ _ O
executed _ _ O
a _ _ O
root _ _ O
shell _ _ O
on _ _ O
the _ _ O
victim _ _ O
machine _ _ O
with _ _ O
a _ _ O
direct _ _ O
TCP _ _ O
connection _ _ O
to _ _ O
the _ _ O
attacker _ _ O
• _ _ O
Scanned _ _ O
for _ _ O
other _ _ O
machines _ _ O
to _ _ O
attack _ _ O
• _ _ O
Invaded _ _ O
~6000 _ _ O
computers _ _ O
in _ _ O
hours _ _ O
( _ _ O
10 _ _ O
% _ _ O
of _ _ O
the _ _ O
Internet _ _ O
) _ _ O
• _ _ O
see _ _ O
June _ _ O
1989 _ _ O
article _ _ O
in _ _ O
Comm _ _ O
. _ _ O
of _ _ O
the _ _ O
ACM _ _ O
• _ _ O
The _ _ O
young _ _ O
author _ _ O
of _ _ O
the _ _ O
worm _ _ O
was _ _ O
prosecuted _ _ O
… _ _ O
22 _ _ O

Heartbleed _ _ O
( _ _ O
2014 _ _ O
) _ _ O
• _ _ O
Buffer _ _ O
over-read _ _ O
in _ _ O
OpenSSL _ _ O
• _ _ O
Open _ _ O
source _ _ O
security _ _ O
library _ _ O
• _ _ O
Bug _ _ O
in _ _ O
a _ _ O
small _ _ O
range _ _ O
of _ _ O
versions _ _ O
• _ _ O
“ _ _ O
Heartbeat _ _ O
” _ _ O
packet _ _ O
• _ _ O
Specifies _ _ O
length _ _ O
of _ _ O
message _ _ O
• _ _ O
Server _ _ O
echoes _ _ O
it _ _ O
back _ _ O
• _ _ O
Library _ _ O
just _ _ O
“ _ _ O
trusted _ _ O
” _ _ O
this _ _ O
length _ _ O
• _ _ O
Allowed _ _ O
attackers _ _ O
to _ _ O
read _ _ O
contents _ _ O
of _ _ O
memory _ _ O
anywhere _ _ O
they _ _ O
wanted _ _ O
• _ _ O
Est _ _ O
. _ _ O
17 _ _ O
% _ _ O
of _ _ O
Internet _ _ O
affected _ _ O
• _ _ O
“ _ _ O
Catastrophic _ _ O
” _ _ O
• _ _ O
Github _ _ O
, _ _ O
Yahoo _ _ O
, _ _ O
Stack _ _ O
Overflow _ _ O
, _ _ O
Amazon _ _ O
AWS _ _ O
, _ _ O
... _ _ O
By _ _ O
FenixFeather _ _ O
- _ _ O
Own _ _ O
work _ _ O
, _ _ O
CC _ _ O
BY-SA _ _ O
3.0 _ _ O
, _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
commons.wikimedia.org _ _ O
/ _ _ O
w _ _ O
/ _ _ O
index.php?curid=32276981 _ _ O
23 _ _ O

Crafting _ _ O
Smashing _ _ O
String _ _ O
int _ _ O
echo _ _ O
( _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
4 _ _ O
] _ _ O
; _ _ O
gets _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
... _ _ O
return _ _ O
... _ _ O
; _ _ O
} _ _ O
Stack _ _ O
Frame _ _ O
for _ _ O
call_echo _ _ O
07 _ _ O
00 _ _ O
FF _ _ O
00 _ _ O
00 _ _ O
Address _ _ O
00 _ _ O
Return _ _ O
00 _ _ O
40 _ _ O
06 _ _ O
FF _ _ O
( _ _ O
8 _ _ O
FFbytes _ _ O
) _ _ O
AB _ _ O
c3 _ _ O
80 _ _ O
33 _ _ O
32 _ _ O
31 _ _ O
30 _ _ O
39 _ _ O
38 _ _ O
37 _ _ O
36 _ _ O
35 _ _ O
34 _ _ O
unused _ _ O
33 _ _ O
32 _ _ O
20 _ _ O
bytes _ _ O
31 _ _ O
30 _ _ O
39 _ _ O
38 _ _ O
37 _ _ O
36 _ _ O
35 _ _ O
34 _ _ O
33 _ _ O
32 _ _ O
31 _ _ O
30 _ _ O
Attack _ _ O
String _ _ O
( _ _ O
Hex _ _ O
) _ _ O
% _ _ O
rsp _ _ O
24 _ _ O
bytes _ _ O
Target _ _ O
Code _ _ O
void _ _ O
smash _ _ O
( _ _ O
) _ _ O
{ _ _ O
printf _ _ O
( _ _ O
"I _ _ O
' _ _ O
ve _ _ O
been _ _ O
smashed _ _ O
! _ _ O
\n _ _ O
" _ _ O
) _ _ O
; _ _ O
exit _ _ O
( _ _ O
0 _ _ O
) _ _ O
; _ _ O
} _ _ O
00000000004006c8 _ _ O
< _ _ O
smash _ _ O
> _ _ O
: _ _ O
4006c8 _ _ O
: _ _ O
48 _ _ O
83 _ _ O
ec _ _ O
08 _ _ O
30 _ _ O
31 _ _ O
32 _ _ O
33 _ _ O
34 _ _ O
35 _ _ O
36 _ _ O
37 _ _ O
38 _ _ O
39 _ _ O
30 _ _ O
31 _ _ O
32 _ _ O
33 _ _ O
34 _ _ O
35 _ _ O
36 _ _ O
37 _ _ O
38 _ _ O
39 _ _ O
30 _ _ O
31 _ _ O
32 _ _ O
33 _ _ O
c8 _ _ O
06 _ _ O
40 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O

Smashing _ _ O
String _ _ O
Effect _ _ O
Stack _ _ O
Frame _ _ O
for _ _ O
call_echo _ _ O
07 _ _ O
00 _ _ O
FF _ _ O
00 _ _ O
00 _ _ O
Address _ _ O
00 _ _ O
Return _ _ O
00 _ _ O
40 _ _ O
06 _ _ O
FF _ _ O
( _ _ O
8 _ _ O
FFbytes _ _ O
) _ _ O
AB _ _ O
c8 _ _ O
80 _ _ O
33 _ _ O
32 _ _ O
31 _ _ O
30 _ _ O
39 _ _ O
38 _ _ O
37 _ _ O
36 _ _ O
35 _ _ O
34 _ _ O
unused _ _ O
33 _ _ O
32 _ _ O
20 _ _ O
bytes _ _ O
31 _ _ O
30 _ _ O
39 _ _ O
38 _ _ O
37 _ _ O
36 _ _ O
35 _ _ O
34 _ _ O
33 _ _ O
32 _ _ O
31 _ _ O
30 _ _ O
Attack _ _ O
String _ _ O
( _ _ O
Hex _ _ O
) _ _ O
% _ _ O
rsp _ _ O
Target _ _ O
Code _ _ O
void _ _ O
smash _ _ O
( _ _ O
) _ _ O
{ _ _ O
printf _ _ O
( _ _ O
"I _ _ O
' _ _ O
ve _ _ O
been _ _ O
smashed _ _ O
! _ _ O
\n _ _ O
" _ _ O
) _ _ O
; _ _ O
exit _ _ O
( _ _ O
0 _ _ O
) _ _ O
; _ _ O
} _ _ O
00000000004006c8 _ _ O
< _ _ O
smash _ _ O
> _ _ O
: _ _ O
4006c8 _ _ O
: _ _ O
48 _ _ O
83 _ _ O
ec _ _ O
08 _ _ O
30 _ _ O
31 _ _ O
32 _ _ O
33 _ _ O
34 _ _ O
35 _ _ O
36 _ _ O
37 _ _ O
38 _ _ O
39 _ _ O
30 _ _ O
31 _ _ O
32 _ _ O
33 _ _ O
34 _ _ O
35 _ _ O
36 _ _ O
37 _ _ O
38 _ _ O
39 _ _ O
30 _ _ O
31 _ _ O
32 _ _ O
33 _ _ O
c8 _ _ O
06 _ _ O
40 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O

Performing _ _ O
Stack _ _ O
Smash _ _ O
Code _ _ O
example _ _ O
to _ _ O
try _ _ O
on _ _ O
Thoth _ _ O
! _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
bit.ly _ _ O
/ _ _ O
3eWwndQ _ _ O
• _ _ O
Put _ _ O
hex _ _ O
sequence _ _ O
in _ _ O
file _ _ O
smash-hex.txt _ _ O
• _ _ O
Use _ _ O
hexify _ _ O
program _ _ O
to _ _ O
convert _ _ O
hex _ _ O
digits _ _ O
to _ _ O
characters _ _ O
• _ _ O
Some _ _ O
of _ _ O
them _ _ O
are _ _ O
non-printing _ _ O
• _ _ O
Provide _ _ O
as _ _ O
input _ _ O
to _ _ O
vulnerable _ _ O
program _ _ O
$ _ _ O
cat _ _ O
smash-hex.txt _ _ O
30 _ _ O
31 _ _ O
32 _ _ O
33 _ _ O
34 _ _ O
35 _ _ O
36 _ _ O
37 _ _ O
38 _ _ O
39 _ _ O
30 _ _ O
31 _ _ O
32 _ _ O
33 _ _ O
34 _ _ O
35 _ _ O
36 _ _ O
37 _ _ O
38 _ _ O
39 _ _ O
30 _ _ O
31 _ _ O
32 _ _ O
33 _ _ O
c8 _ _ O
06 _ _ O
40 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
$ _ _ O
cat _ _ O
smash-hex.txt _ _ O
| _ _ O
. _ _ O
/ _ _ O
hexify _ _ O
| _ _ O
. _ _ O
/ _ _ O
bufdemo-nsp _ _ O
Type _ _ O
a _ _ O
string _ _ O
: _ _ O
012345678901234567890123?@ _ _ O
I _ _ O
've _ _ O
been _ _ O
smashed _ _ O
! _ _ O
void _ _ O
smash _ _ O
( _ _ O
) _ _ O
{ _ _ O
printf _ _ O
( _ _ O
"I _ _ O
' _ _ O
ve _ _ O
been _ _ O
smashed _ _ O
! _ _ O
\n _ _ O
" _ _ O
) _ _ O
; _ _ O
exit _ _ O
( _ _ O
0 _ _ O
) _ _ O
; _ _ O
} _ _ O
26 _ _ O

Code _ _ O
Injection _ _ O
Attacks _ _ O
Stack _ _ O
after _ _ O
call _ _ O
to _ _ O
gets _ _ O
( _ _ O
) _ _ O
void _ _ O
P _ _ O
( _ _ O
) _ _ O
{ _ _ O
Q _ _ O
( _ _ O
) _ _ O
; _ _ O
A _ _ O
: _ _ O
... _ _ O
} _ _ O
P _ _ O
stack _ _ O
frame _ _ O
Return _ _ O
address _ _ O
A _ _ O
int _ _ O
Q _ _ O
( _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
64 _ _ O
] _ _ O
; _ _ O
gets _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
... _ _ O
return _ _ O
... _ _ O
; _ _ O
} _ _ O
B _ _ O
ABA _ _ O
data _ _ O
written _ _ O
by _ _ O
gets _ _ O
( _ _ O
) _ _ O
B _ _ O
pad _ _ O
exploit _ _ O
code _ _ O
Q _ _ O
stack _ _ O
frame _ _ O
• _ _ O
Input _ _ O
string _ _ O
contains _ _ O
byte _ _ O
representation _ _ O
of _ _ O
executable _ _ O
code _ _ O
• _ _ O
Overwrite _ _ O
return _ _ O
address _ _ O
A _ _ O
with _ _ O
address _ _ O
of _ _ O
buffer _ _ O
B _ _ O
• _ _ O
When _ _ O
Q _ _ O
executes _ _ O
ret _ _ O
, _ _ O
will _ _ O
jump _ _ O
to _ _ O
exploit _ _ O
code _ _ O
27 _ _ O

How _ _ O
Does _ _ O
The _ _ O
Attack _ _ O
Code _ _ O
Execute _ _ O
? _ _ O
rip _ _ O
void _ _ O
P _ _ O
( _ _ O
) _ _ O
{ _ _ O
Q _ _ O
( _ _ O
) _ _ O
; _ _ O
... _ _ O
} _ _ O
Stack _ _ O
rsp _ _ O
rsp _ _ O
rsp _ _ O
Shared _ _ O
Libraries _ _ O
ret _ _ O
BB _ _ O
AA _ _ O
pad _ _ O
ret _ _ O
int _ _ O
Q _ _ O
( _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
64 _ _ O
] _ _ O
; _ _ O
gets _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
A- _ _ O
> _ _ O
B _ _ O
... _ _ O
return _ _ O
... _ _ O
; _ _ O
} _ _ O
… _ _ O
rip _ _ O
rip _ _ O
exploit _ _ O
code _ _ O
Heap _ _ O
rip _ _ O
rip _ _ O
Data _ _ O
Text _ _ O
28 _ _ O

Dealing _ _ O
with _ _ O
buffer _ _ O
overflow _ _ O
attacks _ _ O
1 _ _ O
) _ _ O
Avoid _ _ O
overflow _ _ O
vulnerabilities _ _ O
2 _ _ O
) _ _ O
Employ _ _ O
system-level _ _ O
protections _ _ O
3 _ _ O
) _ _ O
Have _ _ O
compiler _ _ O
use _ _ O
“ _ _ O
stack _ _ O
canaries _ _ O
” _ _ O
30 _ _ O

1 _ _ O
) _ _ O
Avoid _ _ O
Overflow _ _ O
Vulnerabilities _ _ O
in _ _ O
Code _ _ O
• _ _ O
Use _ _ O
library _ _ O
routines _ _ O
that _ _ O
limit _ _ O
string _ _ O
lengths _ _ O
• _ _ O
fgets _ _ O
instead _ _ O
of _ _ O
gets _ _ O
( _ _ O
2nd _ _ O
argument _ _ O
to _ _ O
fgets _ _ O
sets _ _ O
limit _ _ O
) _ _ O
• _ _ O
strncpy _ _ O
instead _ _ O
of _ _ O
strcpy _ _ O
• _ _ O
Do _ _ O
n’t _ _ O
use _ _ O
scanf _ _ O
with _ _ O
% _ _ O
s _ _ O
conversion _ _ O
specification _ _ O
• _ _ O
Use _ _ O
fgets _ _ O
to _ _ O
read _ _ O
the _ _ O
string _ _ O
• _ _ O
Or _ _ O
use _ _ O
% _ _ O
ns _ _ O
where _ _ O
n _ _ O
is _ _ O
a _ _ O
suitable _ _ O
integer _ _ O
/ _ _ O
* _ _ O
Echo _ _ O
Line _ _ O
* _ _ O
/ _ _ O
void _ _ O
echo _ _ O
( _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
8 _ _ O
] _ _ O
; _ _ O
/ _ _ O
* _ _ O
Way _ _ O
too _ _ O
small _ _ O
! _ _ O
* _ _ O
/ _ _ O
fgets _ _ O
( _ _ O
buf _ _ O
, _ _ O
8 _ _ O
, _ _ O
stdin _ _ O
) _ _ O
; _ _ O
puts _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
} _ _ O
31 _ _ O

2 _ _ O
) _ _ O
System-Level _ _ O
Protections _ _ O
High _ _ O
Addresses _ _ O
• _ _ O
Randomized _ _ O
stack _ _ O
offsets _ _ O
• _ _ O
At _ _ O
start _ _ O
of _ _ O
program _ _ O
, _ _ O
allocate _ _ O
random _ _ O
amount _ _ O
of _ _ O
space _ _ O
on _ _ O
stack _ _ O
• _ _ O
Shifts _ _ O
stack _ _ O
addresses _ _ O
for _ _ O
entire _ _ O
program _ _ O
Random _ _ O
allocation _ _ O
main _ _ O
’s _ _ O
stack _ _ O
frame _ _ O
• _ _ O
Addresses _ _ O
will _ _ O
vary _ _ O
from _ _ O
one _ _ O
run _ _ O
to _ _ O
another _ _ O
• _ _ O
Makes _ _ O
it _ _ O
difficult _ _ O
for _ _ O
hacker _ _ O
to _ _ O
predict _ _ O
beginning _ _ O
of _ _ O
inserted _ _ O
code _ _ O
Other _ _ O
functions _ _ O
’ _ _ O
stack _ _ O
frames _ _ O
• _ _ O
Example _ _ O
: _ _ O
Code _ _ O
from _ _ O
Slide _ _ O
6 _ _ O
executed _ _ O
5 _ _ O
times _ _ O
; _ _ O
address _ _ O
of _ _ O
variable _ _ O
local _ _ O
= _ _ O
• _ _ O
• _ _ O
• _ _ O
• _ _ O
• _ _ O
0x7ffd19d3f8ac _ _ O
0x7ffe8a462c2c _ _ O
0x7ffe927c905c _ _ O
0x7ffefd5c27dc _ _ O
0x7fffa0175afc _ _ O
• _ _ O
Stack _ _ O
repositioned _ _ O
each _ _ O
time _ _ O
program _ _ O
executes _ _ O
B _ _ O
? _ _ O
pad _ _ O
B _ _ O
? _ _ O
exploit _ _ O
code _ _ O
Low _ _ O
Addresses _ _ O
32 _ _ O

2 _ _ O
) _ _ O
System-Level _ _ O
Protections _ _ O
Stack _ _ O
after _ _ O
call _ _ O
to _ _ O
gets _ _ O
( _ _ O
) _ _ O
• _ _ O
Non-executable _ _ O
code _ _ O
segments _ _ O
foo _ _ O
stack _ _ O
frame _ _ O
• _ _ O
In _ _ O
traditional _ _ O
x86 _ _ O
, _ _ O
can _ _ O
mark _ _ O
region _ _ O
of _ _ O
memory _ _ O
as _ _ O
either _ _ O
“ _ _ O
read-only _ _ O
” _ _ O
or _ _ O
“ _ _ O
writeable _ _ O
” _ _ O
• _ _ O
Can _ _ O
execute _ _ O
anything _ _ O
readable _ _ O
• _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
added _ _ O
explicit _ _ O
“ _ _ O
execute _ _ O
” _ _ O
permission _ _ O
• _ _ O
Stack _ _ O
marked _ _ O
as _ _ O
non-executable _ _ O
• _ _ O
Do _ _ O
NOT _ _ O
execute _ _ O
code _ _ O
in _ _ O
Stack _ _ O
, _ _ O
Static _ _ O
Data _ _ O
, _ _ O
or _ _ O
Heap _ _ O
regions _ _ O
• _ _ O
Hardware _ _ O
support _ _ O
needed _ _ O
B _ _ O
data _ _ O
written _ _ O
by _ _ O
gets _ _ O
( _ _ O
) _ _ O
B _ _ O
pad _ _ O
exploit _ _ O
code _ _ O
bar _ _ O
stack _ _ O
frame _ _ O
Any _ _ O
attempt _ _ O
to _ _ O
execute _ _ O
this _ _ O
code _ _ O
will _ _ O
fail _ _ O
33 _ _ O

3 _ _ O
) _ _ O
Stack _ _ O
Canaries _ _ O
• _ _ O
Basic _ _ O
Idea _ _ O
: _ _ O
place _ _ O
special _ _ O
value _ _ O
( _ _ O
“ _ _ O
canary _ _ O
” _ _ O
) _ _ O
on _ _ O
stack _ _ O
just _ _ O
beyond _ _ O
buffer _ _ O
• _ _ O
Secret _ _ O
value _ _ O
known _ _ O
only _ _ O
to _ _ O
compiler _ _ O
• _ _ O
“ _ _ O
After _ _ O
” _ _ O
buffer _ _ O
but _ _ O
before _ _ O
return _ _ O
address _ _ O
• _ _ O
Check _ _ O
for _ _ O
corruption _ _ O
before _ _ O
exiting _ _ O
function _ _ O
• _ _ O
GCC _ _ O
implementation _ _ O
( _ _ O
now _ _ O
default _ _ O
) _ _ O
• _ _ O
-fstack-protector _ _ O
• _ _ O
Code _ _ O
back _ _ O
on _ _ O
Slide _ _ O
14 _ _ O
( _ _ O
buf-nsp _ _ O
) _ _ O
compiled _ _ O
with _ _ O
– _ _ O
fno-stack-protector _ _ O
flag _ _ O
unix _ _ O
> _ _ O
. _ _ O
/ _ _ O
buf _ _ O
Enter _ _ O
string _ _ O
: _ _ O
12345678 _ _ O
12345678 _ _ O
unix _ _ O
> _ _ O
. _ _ O
/ _ _ O
buf _ _ O
Enter _ _ O
string _ _ O
: _ _ O
123456789 _ _ O
* _ _ O
* _ _ O
* _ _ O
stack _ _ O
smashing _ _ O
detected _ _ O
* _ _ O
* _ _ O
* _ _ O
34 _ _ O

Protected _ _ O
Buffer _ _ O
Disassembly _ _ O
( _ _ O
buf _ _ O
) _ _ O
echo _ _ O
: _ _ O
400638 _ _ O
: _ _ O
40063c _ _ O
: _ _ O
400645 _ _ O
: _ _ O
40064a _ _ O
: _ _ O
... _ _ O
400656 _ _ O
: _ _ O
400659 _ _ O
: _ _ O
40065e _ _ O
: _ _ O
400661 _ _ O
: _ _ O
400666 _ _ O
: _ _ O
40066b _ _ O
: _ _ O
400674 _ _ O
: _ _ O
400676 _ _ O
: _ _ O
40067b _ _ O
: _ _ O
40067f _ _ O
: _ _ O
sub _ _ O
$ _ _ O
0x18 _ _ O
, _ _ O
%rsp _ _ O
mov _ _ O
% _ _ O
fs _ _ O
: _ _ O
0x28 _ _ O
, _ _ O
%rax _ _ O
mov _ _ O
% _ _ O
rax _ _ O
, _ _ O
0x8 _ _ O
( _ _ O
%rsp _ _ O
) _ _ O
xor _ _ O
% _ _ O
eax _ _ O
, _ _ O
%eax _ _ O
... _ _ O
call _ _ O
printf _ _ O
... _ _ O
mov _ _ O
% _ _ O
rsp _ _ O
, _ _ O
%rdi _ _ O
callq _ _ O
400530 _ _ O
< _ _ O
gets@plt _ _ O
> _ _ O
mov _ _ O
% _ _ O
rsp _ _ O
, _ _ O
%rdi _ _ O
callq _ _ O
4004e0 _ _ O
< _ _ O
puts@plt _ _ O
> _ _ O
mov _ _ O
0x8 _ _ O
( _ _ O
%rsp _ _ O
) _ _ O
, _ _ O
%rax _ _ O
xor _ _ O
% _ _ O
fs _ _ O
: _ _ O
0x28 _ _ O
, _ _ O
%rax _ _ O
je _ _ O
40067b _ _ O
< _ _ O
echo+0x43 _ _ O
> _ _ O
callq _ _ O
4004f0 _ _ O
< _ _ O
_ _ _ O
_ _ _ O
stack_chk_fail@plt _ _ O
> _ _ O
add _ _ O
$ _ _ O
0x18 _ _ O
, _ _ O
%rsp _ _ O
retq _ _ O

Setting _ _ O
Up _ _ O
Canary _ _ O
Before _ _ O
call _ _ O
to _ _ O
gets _ _ O
Stack _ _ O
frame _ _ O
for _ _ O
call_echo _ _ O
Return _ _ O
address _ _ O
( _ _ O
8 _ _ O
bytes _ _ O
) _ _ O
Canary _ _ O
( _ _ O
8 _ _ O
bytes _ _ O
) _ _ O
[ _ _ O
7 _ _ O
] _ _ O
[ _ _ O
6 _ _ O
] _ _ O
[ _ _ O
5 _ _ O
] _ _ O
[ _ _ O
4 _ _ O
] _ _ O
/ _ _ O
* _ _ O
Echo _ _ O
Line _ _ O
* _ _ O
/ _ _ O
void _ _ O
echo _ _ O
( _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
8 _ _ O
] _ _ O
; _ _ O
/ _ _ O
* _ _ O
Way _ _ O
too _ _ O
small _ _ O
! _ _ O
* _ _ O
/ _ _ O
gets _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
puts _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
} _ _ O
Segment _ _ O
register _ _ O
( _ _ O
do _ _ O
n’t _ _ O
worry _ _ O
about _ _ O
it _ _ O
) _ _ O
echo _ _ O
: _ _ O
. _ _ O
. _ _ O
. _ _ O
movq _ _ O
% _ _ O
fs _ _ O
: _ _ O
40 _ _ O
, _ _ O
% _ _ O
rax _ _ O
# _ _ O
Get _ _ O
canary _ _ O
movq _ _ O
% _ _ O
rax _ _ O
, _ _ O
8 _ _ O
( _ _ O
%rsp _ _ O
) _ _ O
# _ _ O
Place _ _ O
on _ _ O
stack _ _ O
xorl _ _ O
% _ _ O
eax _ _ O
, _ _ O
% _ _ O
eax _ _ O
# _ _ O
Erase _ _ O
canary _ _ O
. _ _ O
. _ _ O
. _ _ O
[ _ _ O
3 _ _ O
] _ _ O
[ _ _ O
2 _ _ O
] _ _ O
[ _ _ O
1 _ _ O
] _ _ O
[ _ _ O
0 _ _ O
] _ _ O
buf _ _ O
⟵%rsp _ _ O
36 _ _ O

Checking _ _ O
Canary _ _ O
After _ _ O
call _ _ O
to _ _ O
gets _ _ O
Stack _ _ O
frame _ _ O
for _ _ O
call_echo _ _ O
Return _ _ O
address _ _ O
( _ _ O
8 _ _ O
bytes _ _ O
) _ _ O
Canary _ _ O
( _ _ O
8 _ _ O
bytes _ _ O
) _ _ O
00 _ _ O
37 _ _ O
36 _ _ O
35 _ _ O
34 _ _ O
33 _ _ O
32 _ _ O
31 _ _ O
/ _ _ O
* _ _ O
Echo _ _ O
Line _ _ O
* _ _ O
/ _ _ O
void _ _ O
echo _ _ O
( _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
8 _ _ O
] _ _ O
; _ _ O
gets _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
puts _ _ O
( _ _ O
buf _ _ O
) _ _ O
; _ _ O
} _ _ O
echo _ _ O
: _ _ O
. _ _ O
. _ _ O
. _ _ O
movq _ _ O
xorq _ _ O
je _ _ O
call _ _ O
.L6 _ _ O
: _ _ O
/ _ _ O
* _ _ O
Way _ _ O
too _ _ O
small _ _ O
! _ _ O
* _ _ O
/ _ _ O
8 _ _ O
( _ _ O
%rsp _ _ O
) _ _ O
, _ _ O
% _ _ O
rax _ _ O
% _ _ O
fs _ _ O
: _ _ O
40 _ _ O
, _ _ O
% _ _ O
rax _ _ O
.L2 _ _ O
_ _ _ O
_ _ _ O
stack_chk_fail _ _ O
. _ _ O
. _ _ O
. _ _ O
# _ _ O
retrieve _ _ O
from _ _ O
Stack _ _ O
# _ _ O
compare _ _ O
to _ _ O
canary _ _ O
# _ _ O
if _ _ O
same _ _ O
, _ _ O
OK _ _ O
# _ _ O
else _ _ O
, _ _ O
FAIL _ _ O
buf _ _ O
⟵%rsp _ _ O
Input _ _ O
: _ _ O
1234567 _ _ O
37 _ _ O

Summary _ _ O
1 _ _ O
) _ _ O
Avoid _ _ O
overflow _ _ O
vulnerabilities _ _ O
• _ _ O
Use _ _ O
library _ _ O
routines _ _ O
that _ _ O
limit _ _ O
string _ _ O
lengths _ _ O
2 _ _ O
) _ _ O
Employ _ _ O
system-level _ _ O
protections _ _ O
• _ _ O
• _ _ O
Randomized _ _ O
Stack _ _ O
offsets _ _ O
Code _ _ O
on _ _ O
the _ _ O
Stack _ _ O
is _ _ O
not _ _ O
executable _ _ O
3 _ _ O
) _ _ O
Have _ _ O
compiler _ _ O
use _ _ O
“ _ _ O
stack _ _ O
canaries _ _ O
” _ _ O
38 _ _ O



