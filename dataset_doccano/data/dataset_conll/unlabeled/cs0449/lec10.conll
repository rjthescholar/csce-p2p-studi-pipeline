unlabeled|cs0449|lec10
-DOCSTART- -X- -X- O

10 _ _ O
How _ _ O
Programs _ _ O
Are _ _ O
Made _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
Introduction _ _ O
to _ _ O
Systems _ _ O
Software _ _ O
Luis _ _ O
Oliveira _ _ O
( _ _ O
with _ _ O
content _ _ O
borrowed _ _ O
from _ _ O
wilkie _ _ O
and _ _ O
Vinicius _ _ O
Petrucci _ _ O
) _ _ O

Linkers _ _ O
Filling _ _ O
in _ _ O
the _ _ O
blanks _ _ O
. _ _ O
2 _ _ O

Compilation _ _ O
: _ _ O
Simple _ _ O
Overview _ _ O
– _ _ O
Step _ _ O
1 _ _ O
• _ _ O
The _ _ O
compiler _ _ O
takes _ _ O
source _ _ O
code _ _ O
( _ _ O
files _ _ O
) _ _ O
and _ _ O
translates _ _ O
them _ _ O
into _ _ O
machine _ _ O
code _ _ O
. _ _ O
hello.c _ _ O
hello.o _ _ O
• _ _ O
This _ _ O
file _ _ O
is _ _ O
called _ _ O
an _ _ O
“ _ _ O
object _ _ O
file _ _ O
” _ _ O
and _ _ O
is _ _ O
just _ _ O
potentially _ _ O
one _ _ O
part _ _ O
of _ _ O
your _ _ O
overall _ _ O
project _ _ O
. _ _ O
• _ _ O
The _ _ O
machine _ _ O
code _ _ O
is _ _ O
not _ _ O
quite _ _ O
an _ _ O
executable _ _ O
. _ _ O
• _ _ O
This _ _ O
object _ _ O
file _ _ O
is _ _ O
JUST _ _ O
representing _ _ O
the _ _ O
code _ _ O
for _ _ O
that _ _ O
particular _ _ O
source _ _ O
file _ _ O
. _ _ O
• _ _ O
You _ _ O
may _ _ O
require _ _ O
extra _ _ O
stuff _ _ O
provided _ _ O
by _ _ O
the _ _ O
system _ _ O
elsewhere _ _ O
. _ _ O
3 _ _ O

Compilation _ _ O
: _ _ O
Simple _ _ O
Overview _ _ O
– _ _ O
Step _ _ O
2 _ _ O
• _ _ O
You _ _ O
may _ _ O
have _ _ O
multiple _ _ O
files _ _ O
. _ _ O
• _ _ O
They _ _ O
may _ _ O
reference _ _ O
each _ _ O
other _ _ O
. _ _ O
hello.c _ _ O
hello.o _ _ O
• _ _ O
For _ _ O
instance _ _ O
, _ _ O
one _ _ O
file _ _ O
may _ _ O
contain _ _ O
certain _ _ O
common _ _ O
functionality _ _ O
and _ _ O
then _ _ O
this _ _ O
is _ _ O
invoked _ _ O
by _ _ O
your _ _ O
program _ _ O
elsewhere _ _ O
. _ _ O
• _ _ O
You _ _ O
break _ _ O
your _ _ O
project _ _ O
up _ _ O
into _ _ O
pieces _ _ O
similarly _ _ O
to _ _ O
your _ _ O
Java _ _ O
programs _ _ O
. _ _ O
• _ _ O
The _ _ O
compiler _ _ O
treats _ _ O
them _ _ O
independently _ _ O
. _ _ O
util.c _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
– _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
util.o _ _ O
4 _ _ O

Compilation _ _ O
: _ _ O
Simple _ _ O
Overview _ _ O
– _ _ O
Step _ _ O
3 _ _ O
• _ _ O
Then _ _ O
, _ _ O
each _ _ O
piece _ _ O
is _ _ O
merged _ _ O
together _ _ O
to _ _ O
form _ _ O
the _ _ O
executable _ _ O
. _ _ O
• _ _ O
This _ _ O
process _ _ O
is _ _ O
done _ _ O
by _ _ O
a _ _ O
linker _ _ O
and _ _ O
is _ _ O
called _ _ O
linking _ _ O
. _ _ O
hello.c _ _ O
hello.o _ _ O
hello _ _ O
• _ _ O
The _ _ O
name _ _ O
refers _ _ O
to _ _ O
how _ _ O
the _ _ O
references _ _ O
to _ _ O
functions _ _ O
, _ _ O
etc _ _ O
, _ _ O
between _ _ O
files _ _ O
are _ _ O
now _ _ O
filled _ _ O
in _ _ O
. _ _ O
util.c _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
– _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
util.o _ _ O
stdio.o _ _ O
External _ _ O
Libraries _ _ O
• _ _ O
Before _ _ O
this _ _ O
step _ _ O
… _ _ O
it _ _ O
is _ _ O
unclear _ _ O
where _ _ O
functions _ _ O
will _ _ O
end _ _ O
up _ _ O
in _ _ O
the _ _ O
final _ _ O
executable _ _ O
. _ _ O
5 _ _ O

It _ _ O
's _ _ O
just _ _ O
a _ _ O
grinder _ _ O
. _ _ O
• _ _ O
In _ _ O
summary _ _ O
: _ _ O
hello.c _ _ O
code _ _ O
goes _ _ O
in _ _ O
, _ _ O
sausage _ _ O
object _ _ O
files _ _ O
come _ _ O
out _ _ O
The _ _ O
executable _ _ O
is _ _ O
produced _ _ O
by _ _ O
a _ _ O
linker _ _ O
, _ _ O
which _ _ O
merges _ _ O
code _ _ O
together _ _ O
. _ _ O
Some _ _ O
compilers _ _ O
output _ _ O
assembly _ _ O
and _ _ O
rely _ _ O
on _ _ O
an _ _ O
assembler _ _ O
to _ _ O
produce _ _ O
machine _ _ O
code _ _ O
These _ _ O
days _ _ O
, _ _ O
it _ _ O
's _ _ O
common _ _ O
for _ _ O
the _ _ O
compiler _ _ O
itself _ _ O
to _ _ O
produce _ _ O
machine _ _ O
code _ _ O
, _ _ O
or _ _ O
some _ _ O
kind _ _ O
of _ _ O
platform-independent _ _ O
assembly _ _ O
code _ _ O
( _ _ O
typically _ _ O
: _ _ O
a _ _ O
bytecode _ _ O
) _ _ O
6 _ _ O

Compiler _ _ O
• _ _ O
Input _ _ O
: _ _ O
Higher-level _ _ O
language _ _ O
code _ _ O
( _ _ O
e.g. _ _ O
C _ _ O
, _ _ O
Java _ _ O
) _ _ O
• _ _ O
foo.c _ _ O
• _ _ O
Output _ _ O
: _ _ O
Assembly _ _ O
language _ _ O
code _ _ O
( _ _ O
e.g. _ _ O
x86 _ _ O
, _ _ O
ARM _ _ O
, _ _ O
MIPS _ _ O
) _ _ O
• _ _ O
foo.s _ _ O
• _ _ O
First _ _ O
there _ _ O
’s _ _ O
a _ _ O
preprocessor _ _ O
step _ _ O
to _ _ O
handle _ _ O
# _ _ O
directives _ _ O
• _ _ O
Macro _ _ O
substitution _ _ O
, _ _ O
plus _ _ O
other _ _ O
specialty _ _ O
directives _ _ O
• _ _ O
If _ _ O
curious _ _ O
/ _ _ O
interested _ _ O
: _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
tigcc.ticalc.org _ _ O
/ _ _ O
doc _ _ O
/ _ _ O
cpp.html _ _ O
• _ _ O
Compiler _ _ O
optimizations _ _ O
• _ _ O
“ _ _ O
Level _ _ O
” _ _ O
of _ _ O
optimization _ _ O
specified _ _ O
by _ _ O
capital _ _ O
‘ _ _ O
O _ _ O
’ _ _ O
flag _ _ O
( _ _ O
e.g. _ _ O
-Og _ _ O
, _ _ O
-O3 _ _ O
) _ _ O
• _ _ O
Options _ _ O
: _ _ O
https _ _ O
: _ _ O
/ _ _ O
/ _ _ O
gcc.gnu.org _ _ O
/ _ _ O
onlinedocs _ _ O
/ _ _ O
gcc _ _ O
/ _ _ O
Optimize-Options.html _ _ O
7 _ _ O

Compilers _ _ O
Are _ _ O
Non-Trivial _ _ O
• _ _ O
There _ _ O
’s _ _ O
a _ _ O
whole _ _ O
course _ _ O
about _ _ O
them _ _ O
– _ _ O
CS _ _ O
1622 _ _ O
• _ _ O
We _ _ O
wo _ _ O
n’t _ _ O
go _ _ O
into _ _ O
much _ _ O
detail _ _ O
in _ _ O
this _ _ O
course _ _ O
• _ _ O
For _ _ O
the _ _ O
very _ _ O
curious _ _ O
: _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.sigbus.info _ _ O
/ _ _ O
how-i-wrote-a-self-hosting-ccompiler-in-40-days.html _ _ O
• _ _ O
Some _ _ O
examples _ _ O
of _ _ O
the _ _ O
task _ _ O
’s _ _ O
complexity _ _ O
: _ _ O
• _ _ O
Operator _ _ O
precedence _ _ O
: _ _ O
2 _ _ O
+ _ _ O
3 _ _ O
* _ _ O
4 _ _ O
• _ _ O
Operator _ _ O
associativity _ _ O
: _ _ O
a _ _ O
= _ _ O
b _ _ O
= _ _ O
c _ _ O
; _ _ O
• _ _ O
Determining _ _ O
locally _ _ O
whether _ _ O
a _ _ O
program _ _ O
is _ _ O
valid _ _ O
if _ _ O
( _ _ O
a _ _ O
) _ _ O
{ _ _ O
if _ _ O
( _ _ O
b _ _ O
) _ _ O
{ _ _ O
… _ _ O
/*long _ _ O
distance* _ _ O
/ _ _ O
… _ _ O
} _ _ O
} _ _ O
} _ _ O
/ _ _ O
/ _ _ O
extra _ _ O
bracket _ _ O
8 _ _ O

The _ _ O
need _ _ O
for _ _ O
the _ _ O
linker _ _ O
• _ _ O
A _ _ O
compiler _ _ O
converts _ _ O
source _ _ O
code _ _ O
into _ _ O
machine _ _ O
code _ _ O
. _ _ O
• _ _ O
A _ _ O
linker _ _ O
merges _ _ O
pieces _ _ O
of _ _ O
machine _ _ O
code _ _ O
into _ _ O
an _ _ O
executable _ _ O
. _ _ O
• _ _ O
Why _ _ O
have _ _ O
a _ _ O
separate _ _ O
tool _ _ O
for _ _ O
creating _ _ O
executables _ _ O
? _ _ O
• _ _ O
Mixing _ _ O
different _ _ O
languages _ _ O
together _ _ O
( _ _ O
C _ _ O
, _ _ O
C++ _ _ O
, _ _ O
Python _ _ O
, _ _ O
Rust _ _ O
, _ _ O
Go _ _ O
… _ _ O
) _ _ O
• _ _ O
Lot _ _ O
’s _ _ O
of _ _ O
complications _ _ O
we _ _ O
wo _ _ O
n’t _ _ O
get _ _ O
to _ _ O
here _ _ O
. _ _ O
• _ _ O
Assembly _ _ O
is _ _ O
the _ _ O
glue _ _ O
… _ _ O
all _ _ O
high-level _ _ O
languages _ _ O
have _ _ O
to _ _ O
get _ _ O
there _ _ O
. _ _ O
• _ _ O
Let _ _ O
’s _ _ O
us _ _ O
break _ _ O
large _ _ O
programs _ _ O
up _ _ O
into _ _ O
smaller _ _ O
pieces _ _ O
. _ _ O
• _ _ O
And _ _ O
we _ _ O
only _ _ O
have _ _ O
to _ _ O
recompile _ _ O
files _ _ O
that _ _ O
changed _ _ O
! _ _ O
( _ _ O
Faster _ _ O
) _ _ O
• _ _ O
Those _ _ O
small _ _ O
pieces _ _ O
can _ _ O
come _ _ O
from _ _ O
others _ _ O
. _ _ O
Code _ _ O
reuse _ _ O
! _ _ O
• _ _ O
We _ _ O
can _ _ O
share _ _ O
executable _ _ O
code _ _ O
among _ _ O
many _ _ O
running _ _ O
programs _ _ O
. _ _ O
( _ _ O
Shared _ _ O
Libraries _ _ O
) _ _ O
9 _ _ O

What _ _ O
is _ _ O
inside _ _ O
that _ _ O
box _ _ O
? _ _ O
• _ _ O
To _ _ O
understand _ _ O
what _ _ O
linkers _ _ O
do _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
see _ _ O
what _ _ O
an _ _ O
executable _ _ O
is _ _ O
made _ _ O
out _ _ O
of _ _ O
. _ _ O
( _ _ O
Spoilers _ _ O
: _ _ O
it _ _ O
is _ _ O
not _ _ O
just _ _ O
code _ _ O
/ _ _ O
data _ _ O
) _ _ O
• _ _ O
A _ _ O
Linux _ _ O
executable _ _ O
is _ _ O
defined _ _ O
by _ _ O
the _ _ O
Executable _ _ O
and _ _ O
Linkable _ _ O
Format _ _ O
( _ _ O
ELF _ _ O
) _ _ O
standard _ _ O
. _ _ O
• _ _ O
Used _ _ O
for _ _ O
files _ _ O
• _ _ O
And _ _ O
executables _ _ O
• _ _ O
And _ _ O
( _ _ O
shared _ _ O
objects _ _ O
; _ _ O
soon _ _ O
! _ _ O
) _ _ O
10 _ _ O

Object _ _ O
File _ _ O
Format _ _ O
1 _ _ O
. _ _ O
object _ _ O
file _ _ O
header _ _ O
: _ _ O
size _ _ O
and _ _ O
position _ _ O
of _ _ O
the _ _ O
other _ _ O
pieces _ _ O
of _ _ O
the _ _ O
object _ _ O
file _ _ O
2 _ _ O
. _ _ O
text _ _ O
segment _ _ O
: _ _ O
the _ _ O
machine _ _ O
code _ _ O
3 _ _ O
. _ _ O
data _ _ O
segment _ _ O
: _ _ O
data _ _ O
in _ _ O
the _ _ O
source _ _ O
file _ _ O
( _ _ O
binary _ _ O
) _ _ O
4 _ _ O
. _ _ O
relocation _ _ O
table _ _ O
: _ _ O
identifies _ _ O
lines _ _ O
of _ _ O
code _ _ O
that _ _ O
need _ _ O
to _ _ O
be _ _ O
“ _ _ O
handled _ _ O
” _ _ O
5 _ _ O
. _ _ O
symbol _ _ O
table _ _ O
: _ _ O
list _ _ O
of _ _ O
this _ _ O
file _ _ O
’s _ _ O
labels _ _ O
and _ _ O
data _ _ O
that _ _ O
can _ _ O
be _ _ O
referenced _ _ O
6 _ _ O
. _ _ O
debugging _ _ O
information _ _ O
• _ _ O
A _ _ O
standard _ _ O
format _ _ O
is _ _ O
ELF _ _ O
( _ _ O
except _ _ O
MS _ _ O
) _ _ O
• _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.skyfree.org _ _ O
/ _ _ O
linux _ _ O
/ _ _ O
references _ _ O
/ _ _ O
ELF_Format.pdf _ _ O

Object _ _ O
File _ _ O
Information _ _ O
Tables _ _ O
• _ _ O
Symbol _ _ O
Table _ _ O
holds _ _ O
list _ _ O
of _ _ O
“ _ _ O
items _ _ O
” _ _ O
that _ _ O
may _ _ O
be _ _ O
used _ _ O
by _ _ O
other _ _ O
files _ _ O
• _ _ O
Non-local _ _ O
labels _ _ O
– _ _ O
function _ _ O
names _ _ O
for _ _ O
call _ _ O
• _ _ O
Static _ _ O
Data _ _ O
– _ _ O
variables _ _ O
& _ _ O
literals _ _ O
that _ _ O
might _ _ O
be _ _ O
accessed _ _ O
across _ _ O
files _ _ O
• _ _ O
Relocation _ _ O
Table _ _ O
holds _ _ O
list _ _ O
of _ _ O
“ _ _ O
items _ _ O
” _ _ O
that _ _ O
this _ _ O
file _ _ O
needs _ _ O
the _ _ O
address _ _ O
of _ _ O
later _ _ O
( _ _ O
currently _ _ O
undetermined _ _ O
) _ _ O
• _ _ O
Any _ _ O
label _ _ O
or _ _ O
piece _ _ O
of _ _ O
static _ _ O
data _ _ O
referenced _ _ O
in _ _ O
an _ _ O
instruction _ _ O
in _ _ O
this _ _ O
file _ _ O
• _ _ O
Both _ _ O
internal _ _ O
and _ _ O
external _ _ O
• _ _ O
Each _ _ O
file _ _ O
has _ _ O
its _ _ O
own _ _ O
symbol _ _ O
and _ _ O
relocation _ _ O
tables _ _ O
12 _ _ O

What _ _ O
the _ _ O
ELF _ _ O
? _ _ O
? _ _ O
• _ _ O
Contains _ _ O
all _ _ O
of _ _ O
the _ _ O
segments _ _ O
and _ _ O
data _ _ O
sections _ _ O
defining _ _ O
a _ _ O
program _ _ O
. _ _ O
• _ _ O
The _ _ O
ELF _ _ O
executable _ _ O
has _ _ O
roughly _ _ O
the _ _ O
following _ _ O
structure _ _ O
: _ _ O
Offset _ _ O
Name _ _ O
Description _ _ O
Magic _ _ O
Number _ _ O
4 _ _ O
bytes _ _ O
: _ _ O
A _ _ O
Class _ _ O
1 _ _ O
byte _ _ O
: _ _ O
if _ _ O
32-bit _ _ O
, _ _ O
0x2 _ _ O
if _ _ O
64-bit _ _ O
Data _ _ O
1 _ _ O
byte _ _ O
: _ _ O
if _ _ O
little-endian _ _ O
, _ _ O
0x2 _ _ O
if _ _ O
big-endian _ _ O
Version _ _ O
1 _ _ O
byte _ _ O
: _ _ O
for _ _ O
the _ _ O
current _ _ O
version _ _ O
. _ _ O
ABI _ _ O
1 _ _ O
byte _ _ O
: _ _ O
for _ _ O
System _ _ O
V _ _ O
( _ _ O
our _ _ O
C _ _ O
ABI _ _ O
) _ _ O
Machine _ _ O
2 _ _ O
bytes _ _ O
: _ _ O
byte _ _ O
followed _ _ O
by _ _ O
“ _ _ O
is _ _ O
x86 _ _ O
, _ _ O
is _ _ O
MIPS _ _ O
, _ _ O
” _ _ O
in _ _ O
ASCII _ _ O
is _ _ O
RISC-V _ _ O
, _ _ O
etc _ _ O
13 _ _ O

What _ _ O
the _ _ O
ELF _ _ O
? _ _ O
? _ _ O
• _ _ O
The _ _ O
remaining _ _ O
fields _ _ O
indicate _ _ O
where _ _ O
certain _ _ O
sections _ _ O
start _ _ O
. _ _ O
• _ _ O
An _ _ O
ELF _ _ O
executable _ _ O
contains _ _ O
these _ _ O
sections _ _ O
: _ _ O
• _ _ O
Segment _ _ O
Headers _ _ O
( _ _ O
where _ _ O
.text _ _ O
, _ _ O
.data _ _ O
, _ _ O
.bss _ _ O
, _ _ O
etc _ _ O
, _ _ O
exist _ _ O
in _ _ O
the _ _ O
executable _ _ O
) _ _ O
• _ _ O
The _ _ O
initial _ _ O
data _ _ O
for _ _ O
each _ _ O
memory _ _ O
segment _ _ O
in _ _ O
the _ _ O
memory _ _ O
layout _ _ O
! _ _ O
• _ _ O
We _ _ O
will _ _ O
look _ _ O
at _ _ O
these _ _ O
again _ _ O
when _ _ O
we _ _ O
look _ _ O
at _ _ O
loading _ _ O
. _ _ O
• _ _ O
The _ _ O
Symbol _ _ O
Table _ _ O
• _ _ O
All _ _ O
of _ _ O
the _ _ O
“ _ _ O
names _ _ O
” _ _ O
that _ _ O
may _ _ O
be _ _ O
referenced _ _ O
by _ _ O
other _ _ O
code _ _ O
. _ _ O
• _ _ O
Symbols _ _ O
can _ _ O
consist _ _ O
of _ _ O
: _ _ O
• _ _ O
Functions _ _ O
• _ _ O
Global _ _ O
variables _ _ O
• _ _ O
Special _ _ O
sections _ _ O
( _ _ O
special _ _ O
compiler _ _ O
or _ _ O
OS _ _ O
areas _ _ O
) _ _ O
• _ _ O
We _ _ O
will _ _ O
focus _ _ O
on _ _ O
function _ _ O
/ _ _ O
variable _ _ O
symbols _ _ O
. _ _ O
14 _ _ O

– _ _ O
Viewing _ _ O
the _ _ O
symbol _ _ O
table _ _ O
• _ _ O
You _ _ O
can _ _ O
investigate _ _ O
the _ _ O
symbols _ _ O
that _ _ O
are _ _ O
part _ _ O
of _ _ O
any _ _ O
object _ _ O
file _ _ O
using _ _ O
the _ _ O
command _ _ O
on _ _ O
Linux _ _ O
/ _ _ O
UNIX _ _ O
. _ _ O
C _ _ O
( _ _ O
) _ _ O
This _ _ O
is _ _ O
a _ _ O
symbol _ _ O
. _ _ O
It _ _ O
has _ _ O
a _ _ O
location _ _ O
. _ _ O
Here _ _ O
it _ _ O
is _ _ O
! _ _ O
At _ _ O
0x27 _ _ O
( _ _ O
39 _ _ O
) _ _ O
bytes _ _ O
. _ _ O
15 _ _ O

; _ _ O
Controlling _ _ O
the _ _ O
symbols _ _ O
• _ _ O
Remember _ _ O
the _ _ O
keyword _ _ O
? _ _ O
• _ _ O
This _ _ O
forces _ _ O
any _ _ O
symbol _ _ O
to _ _ O
be _ _ O
local _ _ O
to _ _ O
the _ _ O
current _ _ O
file _ _ O
. _ _ O
That _ _ O
is _ _ O
, _ _ O
it _ _ O
can _ _ O
not _ _ O
be _ _ O
referenced _ _ O
by _ _ O
an _ _ O
outside _ _ O
function _ _ O
. _ _ O
• _ _ O
This _ _ O
is _ _ O
because _ _ O
the _ _ O
symbol _ _ O
will _ _ O
not _ _ O
be _ _ O
included _ _ O
in _ _ O
the _ _ O
symbol _ _ O
table _ _ O
! _ _ O
• _ _ O
The _ _ O
linker _ _ O
will _ _ O
not _ _ O
be _ _ O
able _ _ O
to _ _ O
see _ _ O
it _ _ O
. _ _ O
• _ _ O
This _ _ O
is _ _ O
useful _ _ O
for _ _ O
avoiding _ _ O
name _ _ O
collisions _ _ O
, _ _ O
when _ _ O
two _ _ O
functions _ _ O
have _ _ O
the _ _ O
same _ _ O
name _ _ O
. _ _ O
• _ _ O
This _ _ O
normally _ _ O
would _ _ O
make _ _ O
using _ _ O
multiple _ _ O
files _ _ O
and _ _ O
other _ _ O
people _ _ O
’s _ _ O
code _ _ O
troublesome _ _ O
. _ _ O
• _ _ O
Using _ _ O
helps _ _ O
because _ _ O
it _ _ O
will _ _ O
not _ _ O
pollute _ _ O
the _ _ O
symbol _ _ O
table _ _ O
. _ _ O
16 _ _ O

Controlled _ _ O
the _ _ O
symbols _ _ O
• _ _ O
You _ _ O
can _ _ O
investigate _ _ O
the _ _ O
impact _ _ O
of _ _ O
using _ _ O
command _ _ O
on _ _ O
Linux _ _ O
/ _ _ O
UNIX _ _ O
. _ _ O
C _ _ O
( _ _ O
by _ _ O
again _ _ O
using _ _ O
the _ _ O
) _ _ O
This _ _ O
symbol _ _ O
has _ _ O
a _ _ O
location _ _ O
… _ _ O
but _ _ O
it _ _ O
can _ _ O
only _ _ O
be _ _ O
referenced _ _ O
in _ _ O
this _ _ O
file _ _ O
. _ _ O
Our _ _ O
static _ _ O
function _ _ O
is _ _ O
now _ _ O
“ _ _ O
LOCAL _ _ O
” _ _ O
17 _ _ O

; _ _ O
when _ _ O
you _ _ O
used _ _ O
to _ _ O
be _ _ O
an _ _ O
intern _ _ O
• _ _ O
The _ _ O
other _ _ O
side _ _ O
of _ _ O
the _ _ O
coin _ _ O
is _ _ O
the _ _ O
keyword _ _ O
. _ _ O
• _ _ O
This _ _ O
tells _ _ O
the _ _ O
linker _ _ O
that _ _ O
it _ _ O
should _ _ O
expect _ _ O
the _ _ O
symbol _ _ O
to _ _ O
be _ _ O
found _ _ O
elsewhere _ _ O
. _ _ O
C _ _ O
( _ _ O
) _ _ O
C _ _ O
( _ _ O
) _ _ O
Here _ _ O
it _ _ O
is _ _ O
! _ _ O
! _ _ O
This _ _ O
symbol _ _ O
is _ _ O
… _ _ O
somewhere _ _ O
. _ _ O
18 _ _ O

Final _ _ O
thoughts _ _ O
of _ _ O
global _ _ O
variables _ _ O
• _ _ O
You _ _ O
should _ _ O
always _ _ O
avoid _ _ O
global _ _ O
variables _ _ O
. _ _ O
• _ _ O
However _ _ O
, _ _ O
if _ _ O
you _ _ O
are _ _ O
using _ _ O
them _ _ O
, _ _ O
make _ _ O
sure _ _ O
to _ _ O
liberally _ _ O
use _ _ O
• _ _ O
This _ _ O
will _ _ O
stop _ _ O
the _ _ O
names _ _ O
of _ _ O
variables _ _ O
from _ _ O
polluting _ _ O
the _ _ O
symbol _ _ O
table _ _ O
. _ _ O
• _ _ O
The _ _ O
use _ _ O
of _ _ O
is _ _ O
likely _ _ O
indicating _ _ O
a _ _ O
poor _ _ O
design _ _ O
. _ _ O
• _ _ O
This _ _ O
is _ _ O
also _ _ O
true _ _ O
for _ _ O
functions _ _ O
, _ _ O
too _ _ O
. _ _ O
• _ _ O
Generally _ _ O
declare _ _ O
them _ _ O
unless _ _ O
you _ _ O
need _ _ O
them _ _ O
from _ _ O
within _ _ O
another _ _ O
file _ _ O
. _ _ O
• _ _ O
Helps _ _ O
make _ _ O
it _ _ O
clear _ _ O
what _ _ O
functions _ _ O
are _ _ O
important _ _ O
and _ _ O
which _ _ O
can _ _ O
be _ _ O
deleted _ _ O
or _ _ O
refactored _ _ O
. _ _ O
• _ _ O
( _ _ O
Much _ _ O
like _ _ O
private _ _ O
functions _ _ O
in _ _ O
classes _ _ O
) _ _ O
• _ _ O
Always _ _ O
initialize _ _ O
your _ _ O
global _ _ O
variables _ _ O
! _ _ O
19 _ _ O

Seeing _ _ O
through _ _ O
the _ _ O
linker _ _ O
’s _ _ O
eyes _ _ O
• _ _ O
Which _ _ O
symbols _ _ O
are _ _ O
part _ _ O
of _ _ O
each _ _ O
file _ _ O
? _ _ O
• _ _ O
Which _ _ O
are _ _ O
local _ _ O
and _ _ O
which _ _ O
are _ _ O
global _ _ O
? _ _ O
• _ _ O
Which _ _ O
symbols _ _ O
are _ _ O
satisfied _ _ O
by _ _ O
the _ _ O
other _ _ O
file _ _ O
? _ _ O
C _ _ O
( _ _ O
) _ _ O
A _ _ O
local _ _ O
symbol _ _ O
. _ _ O
A _ _ O
global _ _ O
symbol _ _ O
. _ _ O
Referenced _ _ O
here _ _ O
. _ _ O
C _ _ O
( _ _ O
) _ _ O
The _ _ O
linker _ _ O
references _ _ O
“ _ _ O
main _ _ O
” _ _ O
when _ _ O
it _ _ O
compiles _ _ O
the _ _ O
executable _ _ O
. _ _ O
We _ _ O
need _ _ O
to _ _ O
tell _ _ O
the _ _ O
compiler _ _ O
that _ _ O
we _ _ O
are _ _ O
linking _ _ O
to _ _ O
a _ _ O
symbol _ _ O
. _ _ O
A _ _ O
global _ _ O
symbol _ _ O
. _ _ O
Linker _ _ O
does _ _ O
n’t _ _ O
see _ _ O
these _ _ O
temporary _ _ O
variables _ _ O
. _ _ O
Referenced _ _ O
here _ _ O
. _ _ O
20 _ _ O

Summing _ _ O
it _ _ O
up _ _ O
: _ _ O
Playing _ _ O
mad-libs _ _ O
fibonacci.c _ _ O
fibonacci.o _ _ O
fibonacci _ _ O
0x007c0e10 _ _ O
? _ _ O
? _ _ O
? _ _ O
main.c _ _ O
• _ _ O
The _ _ O
compiler _ _ O
hands _ _ O
off _ _ O
object _ _ O
files _ _ O
with _ _ O
blanks _ _ O
where _ _ O
referenced _ _ O
symbols _ _ O
reside _ _ O
. _ _ O
• _ _ O
The _ _ O
linker _ _ O
’s _ _ O
job _ _ O
is _ _ O
to _ _ O
fill _ _ O
in _ _ O
those _ _ O
blanks _ _ O
with _ _ O
the _ _ O
location _ _ O
of _ _ O
the _ _ O
symbol _ _ O
in _ _ O
the _ _ O
final _ _ O
executable _ _ O
. _ _ O
main.o _ _ O
21 _ _ O

Static _ _ O
Libraries _ _ O
( _ _ O
files _ _ O
) _ _ O
• _ _ O
If _ _ O
you _ _ O
want _ _ O
to _ _ O
share _ _ O
your _ _ O
library _ _ O
with _ _ O
others _ _ O
… _ _ O
util.c _ _ O
tree.c _ _ O
util.o _ _ O
tree.o _ _ O
my-lib.a _ _ O
• _ _ O
Instead _ _ O
of _ _ O
creating _ _ O
an _ _ O
executable _ _ O
, _ _ O
you _ _ O
can _ _ O
package _ _ O
together _ _ O
all _ _ O
of _ _ O
the _ _ O
files _ _ O
into _ _ O
a _ _ O
single _ _ O
archive _ _ O
( _ _ O
file _ _ O
) _ _ O
• _ _ O
You _ _ O
can _ _ O
use _ _ O
the _ _ O
program _ _ O
on _ _ O
Linux _ _ O
for _ _ O
this _ _ O
. _ _ O
22 _ _ O

Compilation _ _ O
: _ _ O
Simple _ _ O
Overview _ _ O
– _ _ O
Redux _ _ O
• _ _ O
We _ _ O
can _ _ O
use _ _ O
my-lib.a _ _ O
in _ _ O
place _ _ O
of _ _ O
the _ _ O
object _ _ O
files _ _ O
we _ _ O
need _ _ O
. _ _ O
hello.c _ _ O
util.c _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
– _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
hello.o _ _ O
util.o _ _ O
hello _ _ O
my-lib.a _ _ O
External _ _ O
Libraries _ _ O
• _ _ O
The _ _ O
file _ _ O
is _ _ O
just _ _ O
a _ _ O
container _ _ O
for _ _ O
a _ _ O
set _ _ O
of _ _ O
object _ _ O
files _ _ O
. _ _ O
Essentially _ _ O
, _ _ O
it _ _ O
is _ _ O
just _ _ O
a _ _ O
kind _ _ O
of _ _ O
zip _ _ O
file _ _ O
of _ _ O
object _ _ O
files _ _ O
. _ _ O
• _ _ O
These _ _ O
object _ _ O
files _ _ O
get _ _ O
copied _ _ O
into _ _ O
our _ _ O
executable _ _ O
… _ _ O
not _ _ O
very _ _ O
efficient _ _ O
! _ _ O
Hmm _ _ O
! _ _ O
23 _ _ O

Loaders _ _ O
You _ _ O
should _ _ O
always _ _ O
stretch _ _ O
before _ _ O
you _ _ O
run _ _ O
– _ _ O
OSes _ _ O
do _ _ O
this _ _ O
, _ _ O
too _ _ O
. _ _ O
24 _ _ O

The _ _ O
Operating _ _ O
System _ _ O
• _ _ O
How _ _ O
does _ _ O
your _ _ O
ELF _ _ O
executable _ _ O
actually _ _ O
run _ _ O
? _ _ O
• _ _ O
There _ _ O
needs _ _ O
to _ _ O
be _ _ O
some _ _ O
system _ _ O
software _ _ O
to _ _ O
unpack _ _ O
the _ _ O
executable _ _ O
into _ _ O
memory _ _ O
. _ _ O
• _ _ O
That _ _ O
system _ _ O
software _ _ O
is _ _ O
a _ _ O
loader _ _ O
and _ _ O
it _ _ O
is _ _ O
part _ _ O
of _ _ O
an _ _ O
operating _ _ O
system _ _ O
. _ _ O
25 _ _ O

Memory _ _ O
Segments _ _ O
– _ _ O
Deeper _ _ O
dive _ _ O
! _ _ O
• _ _ O
The _ _ O
ELF _ _ O
executable _ _ O
defines _ _ O
several _ _ O
segments _ _ O
: _ _ O
• _ _ O
• _ _ O
• _ _ O
• _ _ O
– _ _ O
The _ _ O
code _ _ O
segment _ _ O
( _ _ O
machine _ _ O
code _ _ O
) _ _ O
– _ _ O
The _ _ O
data _ _ O
segment _ _ O
( _ _ O
program _ _ O
data _ _ O
) _ _ O
– _ _ O
The _ _ O
read-only _ _ O
data _ _ O
segment _ _ O
( _ _ O
constants _ _ O
) _ _ O
– _ _ O
Uninitialized _ _ O
data _ _ O
segment _ _ O
( _ _ O
“ _ _ O
zero _ _ O
” _ _ O
data _ _ O
) _ _ O
• _ _ O
The _ _ O
segment _ _ O
is _ _ O
a _ _ O
special _ _ O
segment _ _ O
for _ _ O
all _ _ O
data _ _ O
that _ _ O
starts _ _ O
as _ _ O
or _ _ O
. _ _ O
• _ _ O
( _ _ O
Its _ _ O
name _ _ O
is _ _ O
Block _ _ O
Started _ _ O
by _ _ O
Symbol _ _ O
which _ _ O
is _ _ O
a _ _ O
historic _ _ O
name _ _ O
. _ _ O
) _ _ O
• _ _ O
It _ _ O
is _ _ O
often _ _ O
an _ _ O
optimization _ _ O
: _ _ O
the _ _ O
executable _ _ O
does _ _ O
not _ _ O
need _ _ O
to _ _ O
store _ _ O
a _ _ O
whole _ _ O
bunch _ _ O
of _ _ O
zeros _ _ O
. _ _ O
• _ _ O
Hmm _ _ O
… _ _ O
the _ _ O
operating _ _ O
system _ _ O
must _ _ O
then _ _ O
allocate _ _ O
a _ _ O
bunch _ _ O
of _ _ O
zeros _ _ O
. _ _ O
Is _ _ O
that _ _ O
fast _ _ O
? _ _ O
? _ _ O
( _ _ O
We _ _ O
’ll _ _ O
get _ _ O
there _ _ O
) _ _ O
Kernel _ _ O
Memory _ _ O
stack _ _ O
currently _ _ O
unused _ _ O
but _ _ O
available _ _ O
memory _ _ O
heap _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
26 _ _ O

Running _ _ O
a _ _ O
program _ _ O
1 _ _ O
. _ _ O
Take _ _ O
the _ _ O
ELF _ _ O
executable _ _ O
. _ _ O
Our _ _ O
lie _ _ O
starts _ _ O
to _ _ O
unravel _ _ O
! _ _ O
We _ _ O
have _ _ O
a _ _ O
kernel _ _ O
… _ _ O
• _ _ O
This _ _ O
defines _ _ O
each _ _ O
segment _ _ O
and _ _ O
where _ _ O
in _ _ O
memory _ _ O
it _ _ O
should _ _ O
go _ _ O
. _ _ O
2 _ _ O
. _ _ O
Place _ _ O
the _ _ O
segment _ _ O
into _ _ O
memory _ _ O
. _ _ O
3 _ _ O
. _ _ O
Place _ _ O
the _ _ O
segment _ _ O
into _ _ O
memory _ _ O
. _ _ O
4 _ _ O
. _ _ O
Write _ _ O
the _ _ O
number _ _ O
of _ _ O
zeroes _ _ O
specified _ _ O
to _ _ O
the _ _ O
segment _ _ O
. _ _ O
5 _ _ O
. _ _ O
Allocate _ _ O
the _ _ O
stack _ _ O
and _ _ O
assign _ _ O
the _ _ O
stack _ _ O
pointer _ _ O
( _ _ O
) _ _ O
6 _ _ O
. _ _ O
Jump _ _ O
to _ _ O
the _ _ O
entry _ _ O
point _ _ O
address _ _ O
( _ _ O
the _ _ O
location _ _ O
of _ _ O
the _ _ O
symbol _ _ O
) _ _ O
• _ _ O
will _ _ O
call _ _ O
main _ _ O
after _ _ O
initializing _ _ O
the _ _ O
C _ _ O
runtime _ _ O
and _ _ O
the _ _ O
heap _ _ O
. _ _ O
Kernel _ _ O
Memory _ _ O
stack _ _ O
currently _ _ O
unused _ _ O
but _ _ O
available _ _ O
memory _ _ O
heap _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
27 _ _ O

Some _ _ O
.bss _ _ O
BS _ _ O
I _ _ O
’ve _ _ O
dealt _ _ O
with _ _ O
… _ _ O
• _ _ O
Forgetting _ _ O
to _ _ O
zero _ _ O
the _ _ O
.bss _ _ O
segment _ _ O
is _ _ O
… _ _ O
very _ _ O
interesting _ _ O
. _ _ O
• _ _ O
If _ _ O
you _ _ O
write _ _ O
an _ _ O
OS _ _ O
, _ _ O
and _ _ O
forget _ _ O
this _ _ O
, _ _ O
then _ _ O
you _ _ O
get _ _ O
loops _ _ O
that _ _ O
do _ _ O
n’t _ _ O
work _ _ O
write _ _ O
. _ _ O
• _ _ O
Because _ _ O
now _ _ O
variables _ _ O
that _ _ O
were _ _ O
equal _ _ O
to _ _ O
are _ _ O
now _ _ O
random _ _ O
garbage _ _ O
. _ _ O
C _ _ O
( _ _ O
) _ _ O
This _ _ O
goes _ _ O
into _ _ O
the _ _ O
.bss _ _ O
because _ _ O
it _ _ O
is _ _ O
zero _ _ O
This _ _ O
does _ _ O
not _ _ O
go _ _ O
into _ _ O
the _ _ O
.bss _ _ O
because _ _ O
it _ _ O
is _ _ O
not _ _ O
a _ _ O
symbol _ _ O
. _ _ O
28 _ _ O

That _ _ O
’s _ _ O
it _ _ O
? _ _ O
? _ _ O
? _ _ O
• _ _ O
Pretty _ _ O
much _ _ O
! _ _ O
However _ _ O
, _ _ O
let _ _ O
’s _ _ O
make _ _ O
it _ _ O
more _ _ O
flexible _ _ O
. _ _ O
• _ _ O
Our _ _ O
linking _ _ O
so _ _ O
far _ _ O
is _ _ O
static _ _ O
linking _ _ O
where _ _ O
all _ _ O
of _ _ O
the _ _ O
code _ _ O
goes _ _ O
into _ _ O
the _ _ O
executable _ _ O
. _ _ O
Duplicate _ _ O
code _ _ O
from _ _ O
static _ _ O
libraries _ _ O
is _ _ O
copied _ _ O
in _ _ O
. _ _ O
• _ _ O
Not _ _ O
very _ _ O
space _ _ O
efficient _ _ O
. _ _ O
Duplicates _ _ O
code _ _ O
most _ _ O
programs _ _ O
are _ _ O
using _ _ O
! _ _ O
( _ _ O
libc _ _ O
) _ _ O
• _ _ O
What _ _ O
if _ _ O
we _ _ O
“ _ _ O
shared _ _ O
” _ _ O
the _ _ O
code _ _ O
external _ _ O
to _ _ O
the _ _ O
executable _ _ O
? _ _ O
• _ _ O
For _ _ O
dynamic _ _ O
linking _ _ O
we _ _ O
will _ _ O
think _ _ O
about _ _ O
loading _ _ O
not _ _ O
just _ _ O
the _ _ O
executable _ _ O
, _ _ O
but _ _ O
library _ _ O
code _ _ O
as _ _ O
well _ _ O
. _ _ O
A _ _ O
shared _ _ O
library _ _ O
. _ _ O
• _ _ O
The _ _ O
OS _ _ O
loader _ _ O
must _ _ O
load _ _ O
the _ _ O
program _ _ O
into _ _ O
memory _ _ O
and _ _ O
also _ _ O
take _ _ O
on _ _ O
the _ _ O
task _ _ O
of _ _ O
loading _ _ O
library _ _ O
code _ _ O
. _ _ O
• _ _ O
It _ _ O
then _ _ O
must _ _ O
do _ _ O
the _ _ O
“ _ _ O
mad-libs _ _ O
” _ _ O
replacing _ _ O
references _ _ O
in _ _ O
the _ _ O
program _ _ O
to _ _ O
point _ _ O
to _ _ O
where _ _ O
in _ _ O
memory _ _ O
the _ _ O
library _ _ O
code _ _ O
was _ _ O
loaded _ _ O
. _ _ O
Tricky _ _ O
! _ _ O
29 _ _ O

Dynamic _ _ O
Linking _ _ O
Linking _ _ O
but _ _ O
… _ _ O
yanno _ _ O
… _ _ O
animated _ _ O
. _ _ O
30 _ _ O

Code _ _ O
that _ _ O
can _ _ O
be _ _ O
loaded _ _ O
… _ _ O
anywhere _ _ O
? _ _ O
• _ _ O
The _ _ O
main _ _ O
problem _ _ O
is _ _ O
this _ _ O
: _ _ O
• _ _ O
Programs _ _ O
generally _ _ O
need _ _ O
to _ _ O
assume _ _ O
where _ _ O
in _ _ O
memory _ _ O
they _ _ O
live _ _ O
. _ _ O
• _ _ O
They _ _ O
refer _ _ O
to _ _ O
functions _ _ O
and _ _ O
data _ _ O
at _ _ O
particular _ _ O
addresses _ _ O
. _ _ O
• _ _ O
The _ _ O
linker _ _ O
decides _ _ O
where _ _ O
those _ _ O
are _ _ O
, _ _ O
but _ _ O
they _ _ O
are _ _ O
then _ _ O
hard-coded _ _ O
in _ _ O
. _ _ O
Where _ _ O
should _ _ O
this _ _ O
go _ _ O
? _ _ O
? _ _ O
• _ _ O
We _ _ O
want _ _ O
to _ _ O
provide _ _ O
a _ _ O
single _ _ O
software _ _ O
library _ _ O
to _ _ O
multiple _ _ O
executables _ _ O
… _ _ O
• _ _ O
We _ _ O
ca _ _ O
n’t _ _ O
know _ _ O
ahead _ _ O
of _ _ O
time _ _ O
where _ _ O
that _ _ O
library _ _ O
can _ _ O
go _ _ O
in _ _ O
memory _ _ O
since _ _ O
programs _ _ O
are _ _ O
different _ _ O
sizes _ _ O
… _ _ O
they _ _ O
might _ _ O
need _ _ O
multiple _ _ O
libraries _ _ O
… _ _ O
etc _ _ O
. _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
– _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
Kernel _ _ O
Memory _ _ O
stack _ _ O
libz.so _ _ O
.data _ _ O
libz.so _ _ O
.text _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
31 _ _ O

Solution _ _ O
: _ _ O
relocatable _ _ O
code _ _ O
• _ _ O
Let _ _ O
’s _ _ O
allow _ _ O
code _ _ O
to _ _ O
refer _ _ O
to _ _ O
functions _ _ O
and/or _ _ O
data _ _ O
that _ _ O
may _ _ O
move _ _ O
. _ _ O
• _ _ O
Essentially _ _ O
, _ _ O
the _ _ O
operating _ _ O
system _ _ O
plays _ _ O
the _ _ O
mad-lib _ _ O
game _ _ O
. _ _ O
• _ _ O
The _ _ O
ELF _ _ O
executable _ _ O
has _ _ O
a _ _ O
list _ _ O
of _ _ O
“ _ _ O
relocatable _ _ O
entries _ _ O
” _ _ O
• _ _ O
The _ _ O
OS _ _ O
goes _ _ O
through _ _ O
them _ _ O
and _ _ O
fills _ _ O
them _ _ O
in _ _ O
according _ _ O
to _ _ O
where _ _ O
the _ _ O
external _ _ O
symbols _ _ O
are _ _ O
. _ _ O
Linking _ _ O
to _ _ O
the _ _ O
libz.so _ _ O
dynamic _ _ O
library _ _ O
C _ _ O
( _ _ O
) _ _ O
We _ _ O
do _ _ O
n’t _ _ O
know _ _ O
where _ _ O
this _ _ O
function _ _ O
ultimately _ _ O
is _ _ O
… _ _ O
32 _ _ O

Solution _ _ O
: _ _ O
relocatable _ _ O
code _ _ O
• _ _ O
Let _ _ O
’s _ _ O
allow _ _ O
code _ _ O
to _ _ O
refer _ _ O
to _ _ O
functions _ _ O
and/or _ _ O
data _ _ O
that _ _ O
may _ _ O
move _ _ O
. _ _ O
• _ _ O
Essentially _ _ O
, _ _ O
the _ _ O
operating _ _ O
system _ _ O
plays _ _ O
the _ _ O
mad-lib _ _ O
game _ _ O
. _ _ O
• _ _ O
The _ _ O
ELF _ _ O
executable _ _ O
has _ _ O
a _ _ O
list _ _ O
of _ _ O
“ _ _ O
relocatable _ _ O
entries _ _ O
” _ _ O
• _ _ O
The _ _ O
OS _ _ O
goes _ _ O
through _ _ O
them _ _ O
and _ _ O
fills _ _ O
them _ _ O
in _ _ O
according _ _ O
to _ _ O
where _ _ O
the _ _ O
external _ _ O
symbols _ _ O
are _ _ O
. _ _ O
C _ _ O
( _ _ O
) _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
) _ _ O
33 _ _ O

Solution _ _ O
: _ _ O
relocatable _ _ O
code _ _ O
: _ _ O
Loading _ _ O
• _ _ O
When _ _ O
the _ _ O
OS _ _ O
loads _ _ O
this _ _ O
executable _ _ O
… _ _ O
it _ _ O
will _ _ O
have _ _ O
a _ _ O
relocation _ _ O
entry _ _ O
that _ _ O
tells _ _ O
it _ _ O
to _ _ O
overwrite _ _ O
at _ _ O
byte _ _ O
the _ _ O
relative _ _ O
address _ _ O
of _ _ O
“ _ _ O
compressBound _ _ O
” _ _ O
• _ _ O
With _ _ O
this _ _ O
extra _ _ O
step _ _ O
, _ _ O
the _ _ O
OS _ _ O
loader _ _ O
is _ _ O
also _ _ O
providing _ _ O
dynamic _ _ O
linking _ _ O
. _ _ O
C _ _ O
( _ _ O
) _ _ O
x86 _ _ O
- _ _ O
64 _ _ O
( _ _ O
) _ _ O
0x114b _ _ O
+ _ _ O
0x5fe _ _ O
= _ _ O
0x1749 _ _ O
( _ _ O
is _ _ O
relative _ _ O
to _ _ O
) _ _ O
In _ _ O
modern _ _ O
times _ _ O
, _ _ O
this _ _ O
makes _ _ O
use _ _ O
of _ _ O
a _ _ O
jump _ _ O
table _ _ O
called _ _ O
Procedure _ _ O
Linkage _ _ O
Table _ _ O
( _ _ O
PLT _ _ O
) _ _ O
. _ _ O
CS _ _ O
/ _ _ O
COEa _ _ O
0449 _ _ O
– _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
34 _ _ O

Taking _ _ O
a _ _ O
PIC _ _ O
, _ _ O
eating _ _ O
some _ _ O
PIE _ _ O
– _ _ O
Avoiding _ _ O
relocations _ _ O
• _ _ O
In _ _ O
order _ _ O
to _ _ O
allow _ _ O
code _ _ O
to _ _ O
be _ _ O
resident _ _ O
anywhere _ _ O
in _ _ O
memory _ _ O
, _ _ O
the _ _ O
compiler _ _ O
must _ _ O
emit _ _ O
machine _ _ O
code _ _ O
that _ _ O
always _ _ O
uses _ _ O
relative _ _ O
addresses _ _ O
! _ _ O
• _ _ O
This _ _ O
is _ _ O
called _ _ O
position _ _ O
independent _ _ O
code _ _ O
( _ _ O
or _ _ O
PIC _ _ O
) _ _ O
. _ _ O
• _ _ O
When _ _ O
your _ _ O
entire _ _ O
executable _ _ O
is _ _ O
made _ _ O
out _ _ O
of _ _ O
PIC _ _ O
, _ _ O
it _ _ O
is _ _ O
a _ _ O
position _ _ O
independent _ _ O
executable _ _ O
( _ _ O
or _ _ O
PIE _ _ O
) _ _ O
• _ _ O
will _ _ O
compile _ _ O
code _ _ O
this _ _ O
way _ _ O
when _ _ O
you _ _ O
specify _ _ O
the _ _ O
flag _ _ O
. _ _ O
Who _ _ O
does _ _ O
n’t _ _ O
like _ _ O
pie _ _ O
? _ _ O
? _ _ O
? _ _ O
• _ _ O
You _ _ O
generally _ _ O
need _ _ O
this _ _ O
when _ _ O
creating _ _ O
dynamic _ _ O
libraries _ _ O
. _ _ O
35 _ _ O

Running _ _ O
a _ _ O
program _ _ O
- _ _ O
Redux _ _ O
1 _ _ O
. _ _ O
Take _ _ O
the _ _ O
ELF _ _ O
executable _ _ O
. _ _ O
2 _ _ O
. _ _ O
Place _ _ O
and _ _ O
initially _ _ O
prepare _ _ O
the _ _ O
segments _ _ O
into _ _ O
memory _ _ O
. _ _ O
5 _ _ O
. _ _ O
Allocate _ _ O
the _ _ O
stack _ _ O
and _ _ O
assign _ _ O
the _ _ O
stack _ _ O
pointer _ _ O
( _ _ O
) _ _ O
6 _ _ O
. _ _ O
Repeatably _ _ O
load _ _ O
each _ _ O
required _ _ O
shared _ _ O
library _ _ O
. _ _ O
6a _ _ O
. _ _ O
Place _ _ O
.text _ _ O
and _ _ O
.data _ _ O
in _ _ O
memory _ _ O
6b _ _ O
. _ _ O
Rewrite _ _ O
.text _ _ O
sections _ _ O
by _ _ O
looking _ _ O
at _ _ O
the _ _ O
relocatable _ _ O
entries _ _ O
6c _ _ O
. _ _ O
Repeat _ _ O
for _ _ O
each _ _ O
library _ _ O
. _ _ O
7 _ _ O
. _ _ O
Jump _ _ O
to _ _ O
the _ _ O
entry _ _ O
point _ _ O
address _ _ O
( _ _ O
the _ _ O
location _ _ O
of _ _ O
the _ _ O
symbol _ _ O
) _ _ O
• _ _ O
will _ _ O
call _ _ O
main _ _ O
after _ _ O
initializing _ _ O
the _ _ O
C _ _ O
runtime _ _ O
and _ _ O
the _ _ O
heap _ _ O
. _ _ O
Kernel _ _ O
Memory _ _ O
stack _ _ O
libz.so _ _ O
.data _ _ O
libz.so _ _ O
.text _ _ O
heap _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
36 _ _ O

Being _ _ O
lazy _ _ O
– _ _ O
Run-time _ _ O
loading _ _ O
• _ _ O
Having _ _ O
the _ _ O
OS _ _ O
load _ _ O
every _ _ O
library _ _ O
at _ _ O
the _ _ O
start _ _ O
can _ _ O
delay _ _ O
the _ _ O
execution _ _ O
of _ _ O
a _ _ O
program _ _ O
. _ _ O
• _ _ O
What _ _ O
if _ _ O
your _ _ O
program _ _ O
rarely _ _ O
uses _ _ O
a _ _ O
library _ _ O
? _ _ O
• _ _ O
What _ _ O
if _ _ O
you _ _ O
want _ _ O
to _ _ O
expand _ _ O
the _ _ O
program _ _ O
while _ _ O
it _ _ O
is _ _ O
running _ _ O
? _ _ O
C _ _ O
( _ _ O
) _ _ O
Function _ _ O
pointers _ _ O
are _ _ O
very _ _ O
messy _ _ O
. _ _ O
• _ _ O
Plugins _ _ O
are _ _ O
a _ _ O
good _ _ O
example _ _ O
. _ _ O
• _ _ O
We _ _ O
can _ _ O
make _ _ O
use _ _ O
of _ _ O
an _ _ O
OS _ _ O
service _ _ O
to _ _ O
dynamically _ _ O
load _ _ O
libraries _ _ O
. _ _ O
• _ _ O
On _ _ O
Linux _ _ O
we _ _ O
have _ _ O
the _ _ O
and _ _ O
system _ _ O
functions _ _ O
. _ _ O
• _ _ O
Look _ _ O
at _ _ O
the _ _ O
documentation _ _ O
online _ _ O
and _ _ O
refer _ _ O
to _ _ O
examples _ _ O
. _ _ O
Prints _ _ O
to _ _ O
the _ _ O
screen _ _ O
’s _ _ O
“ _ _ O
error _ _ O
” _ _ O
buffer _ _ O
. _ _ O
Uses _ _ O
the _ _ O
lazy-loaded _ _ O
function _ _ O
. _ _ O
37 _ _ O

Investigating _ _ O
dynamic _ _ O
libraries _ _ O
• _ _ O
If _ _ O
you _ _ O
would _ _ O
like _ _ O
to _ _ O
see _ _ O
what _ _ O
dynamic _ _ O
libraries _ _ O
a _ _ O
program _ _ O
uses _ _ O
, _ _ O
you _ _ O
can _ _ O
use _ _ O
or _ _ O
the _ _ O
command _ _ O
. _ _ O
• _ _ O
Can _ _ O
not _ _ O
see _ _ O
the _ _ O
/ _ _ O
lazy _ _ O
loaded _ _ O
libraries _ _ O
. _ _ O
• _ _ O
• _ _ O
38 _ _ O

Linking _ _ O
, _ _ O
loading _ _ O
; _ _ O
static _ _ O
and _ _ O
dynamic _ _ O
… _ _ O
Whew _ _ O
! _ _ O
• _ _ O
Linking _ _ O
is _ _ O
when _ _ O
we _ _ O
merge _ _ O
multiple _ _ O
pieces _ _ O
of _ _ O
executable _ _ O
code _ _ O
into _ _ O
one _ _ O
logical _ _ O
program _ _ O
. _ _ O
• _ _ O
We _ _ O
link _ _ O
at _ _ O
various _ _ O
times _ _ O
: _ _ O
• _ _ O
At _ _ O
compile-time _ _ O
: _ _ O
using _ _ O
our _ _ O
normal _ _ O
files _ _ O
and _ _ O
static _ _ O
libraries _ _ O
( _ _ O
) _ _ O
• _ _ O
At _ _ O
load-time _ _ O
: _ _ O
our _ _ O
OS _ _ O
reads _ _ O
and _ _ O
loads _ _ O
the _ _ O
executable _ _ O
and _ _ O
loads _ _ O
dynamic _ _ O
libraries _ _ O
( _ _ O
) _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
, _ _ O
rewriting _ _ O
relocatable _ _ O
sections _ _ O
. _ _ O
• _ _ O
At _ _ O
run-time _ _ O
: _ _ O
our _ _ O
program _ _ O
uses _ _ O
system _ _ O
services _ _ O
( _ _ O
libraries _ _ O
lazily _ _ O
. _ _ O
) _ _ O
to _ _ O
load _ _ O
dynamic _ _ O
39 _ _ O

Software _ _ O
Licensing _ _ O
Combining _ _ O
code _ _ O
40 _ _ O

So _ _ O
derivative _ _ O
… _ _ O
• _ _ O
Software _ _ O
is _ _ O
generally _ _ O
built _ _ O
from _ _ O
existing _ _ O
software _ _ O
. _ _ O
• _ _ O
Only _ _ O
building _ _ O
bespoke _ _ O
programs _ _ O
would _ _ O
be _ _ O
impractical _ _ O
. _ _ O
• _ _ O
However _ _ O
, _ _ O
how _ _ O
do _ _ O
we _ _ O
negotiate _ _ O
such _ _ O
usage _ _ O
of _ _ O
software _ _ O
? _ _ O
• _ _ O
And _ _ O
how _ _ O
does _ _ O
this _ _ O
impact _ _ O
the _ _ O
design _ _ O
of _ _ O
systems _ _ O
? _ _ O
• _ _ O
Disclaimer _ _ O
: _ _ O
I _ _ O
am _ _ O
not _ _ O
a _ _ O
lawyer _ _ O
. _ _ O
• _ _ O
But _ _ O
… _ _ O
neither _ _ O
will _ _ O
you _ _ O
be _ _ O
one _ _ O
… _ _ O
• _ _ O
And _ _ O
yet _ _ O
, _ _ O
we _ _ O
often _ _ O
find _ _ O
the _ _ O
need _ _ O
to _ _ O
be _ _ O
. _ _ O
41 _ _ O

UNIX _ _ O
• _ _ O
The _ _ O
UNIX _ _ O
system _ _ O
, _ _ O
which _ _ O
Linux _ _ O
is _ _ O
somewhat _ _ O
modeled _ _ O
after _ _ O
, _ _ O
was _ _ O
originally _ _ O
from _ _ O
American _ _ O
Telephone _ _ O
& _ _ O
Telegraph _ _ O
( _ _ O
AT _ _ O
& _ _ O
T _ _ O
) _ _ O
. _ _ O
• _ _ O
Hence _ _ O
lots _ _ O
of _ _ O
AT _ _ O
& _ _ O
T _ _ O
intellectual _ _ O
residue _ _ O
• _ _ O
Because _ _ O
of _ _ O
an _ _ O
anti-trust _ _ O
case _ _ O
from _ _ O
1956 _ _ O
, _ _ O
they _ _ O
entered _ _ O
a _ _ O
“ _ _ O
consent _ _ O
decree _ _ O
” _ _ O
with _ _ O
the _ _ O
government _ _ O
. _ _ O
• _ _ O
AT _ _ O
& _ _ O
T _ _ O
could _ _ O
not _ _ O
sell _ _ O
anything _ _ O
that _ _ O
does _ _ O
not _ _ O
pertain _ _ O
to _ _ O
“ _ _ O
common _ _ O
carrier _ _ O
communications _ _ O
services _ _ O
” _ _ O
( _ _ O
telephony _ _ O
) _ _ O
• _ _ O
Therefore _ _ O
, _ _ O
UNIX _ _ O
, _ _ O
their _ _ O
product _ _ O
, _ _ O
could _ _ O
not _ _ O
be _ _ O
profitable _ _ O
• _ _ O
ANTI-TRUST _ _ O
WORKING _ _ O
? _ _ O
? _ _ O
WHAT _ _ O
A _ _ O
TIME _ _ O
! _ _ O
• _ _ O
Due _ _ O
to _ _ O
this _ _ O
, _ _ O
UNIX _ _ O
was _ _ O
shipped _ _ O
out _ _ O
mostly _ _ O
for _ _ O
a _ _ O
low _ _ O
cost _ _ O
; _ _ O
with _ _ O
source _ _ O
! _ _ O
• _ _ O
Hardware _ _ O
was _ _ O
the _ _ O
money _ _ O
maker _ _ O
. _ _ O
42 _ _ O

The _ _ O
bell _ _ O
tolls _ _ O
… _ _ O
• _ _ O
AT _ _ O
& _ _ O
T _ _ O
often _ _ O
flirted _ _ O
with _ _ O
what _ _ O
they _ _ O
could _ _ O
get _ _ O
away _ _ O
with _ _ O
, _ _ O
yet _ _ O
in _ _ O
1983 _ _ O
, _ _ O
the _ _ O
U.S. _ _ O
government _ _ O
broke _ _ O
up _ _ O
the _ _ O
“ _ _ O
Bells _ _ O
” _ _ O
that _ _ O
made _ _ O
up _ _ O
AT _ _ O
& _ _ O
T. _ _ O
• _ _ O
This _ _ O
freed _ _ O
AT _ _ O
& _ _ O
T _ _ O
from _ _ O
the _ _ O
decree _ _ O
. _ _ O
• _ _ O
And _ _ O
allowed _ _ O
them _ _ O
to _ _ O
commercialize _ _ O
UNIX _ _ O
. _ _ O
• _ _ O
The _ _ O
source _ _ O
code _ _ O
for _ _ O
UNIX _ _ O
became _ _ O
less _ _ O
and _ _ O
less _ _ O
available _ _ O
. _ _ O
▪ _ _ O
It _ _ O
came _ _ O
at _ _ O
a _ _ O
high _ _ O
cost _ _ O
… _ _ O
and _ _ O
not _ _ O
available _ _ O
to _ _ O
the _ _ O
average _ _ O
user _ _ O
. _ _ O
▪ _ _ O
This _ _ O
motivated _ _ O
many _ _ O
engineers _ _ O
/ _ _ O
researchers _ _ O
to _ _ O
organize _ _ O
. _ _ O
43 _ _ O

A _ _ O
GNU _ _ O
world _ _ O
… _ _ O
• _ _ O
Researchers _ _ O
, _ _ O
lulled _ _ O
into _ _ O
a _ _ O
world _ _ O
where _ _ O
systems _ _ O
software _ _ O
was _ _ O
opensource _ _ O
, _ _ O
felt _ _ O
disenfranchised _ _ O
by _ _ O
such _ _ O
new _ _ O
corporate _ _ O
policies _ _ O
. _ _ O
• _ _ O
Quite _ _ O
hard _ _ O
to _ _ O
research _ _ O
system _ _ O
design _ _ O
without _ _ O
easy _ _ O
access _ _ O
to _ _ O
the _ _ O
system _ _ O
. _ _ O
• _ _ O
Richard _ _ O
Stallman _ _ O
created _ _ O
the _ _ O
GNU _ _ O
( _ _ O
GNU _ _ O
is _ _ O
Not _ _ O
Unix _ _ O
) _ _ O
Project _ _ O
. _ _ O
• _ _ O
An _ _ O
effort _ _ O
to _ _ O
replace _ _ O
UNIX _ _ O
and _ _ O
other _ _ O
systems _ _ O
software _ _ O
with _ _ O
community-built _ _ O
versions _ _ O
. _ _ O
• _ _ O
He _ _ O
creates _ _ O
the _ _ O
GNU _ _ O
C _ _ O
Compiler _ _ O
( _ _ O
gcc _ _ O
) _ _ O
• _ _ O
Organized _ _ O
around _ _ O
the _ _ O
Free _ _ O
Software _ _ O
Foundation _ _ O
( _ _ O
FSF _ _ O
) _ _ O
• _ _ O
He _ _ O
licenses _ _ O
the _ _ O
work _ _ O
under _ _ O
the _ _ O
GPL _ _ O
. _ _ O
• _ _ O
GNU _ _ O
Public _ _ O
License _ _ O
later _ _ O
GNU _ _ O
General _ _ O
Public _ _ O
License _ _ O
44 _ _ O

GPL _ _ O
: _ _ O
Free _ _ O
Software _ _ O
Movement _ _ O
• _ _ O
The _ _ O
GPL _ _ O
has _ _ O
evolved _ _ O
over _ _ O
time _ _ O
to _ _ O
legally _ _ O
enforce _ _ O
several _ _ O
things _ _ O
: _ _ O
• _ _ O
The _ _ O
work _ _ O
can _ _ O
be _ _ O
freely _ _ O
studied _ _ O
. _ _ O
( _ _ O
open _ _ O
source _ _ O
) _ _ O
• _ _ O
The _ _ O
work _ _ O
can _ _ O
be _ _ O
freely _ _ O
modified _ _ O
. _ _ O
• _ _ O
The _ _ O
work _ _ O
can _ _ O
be _ _ O
freely _ _ O
copied _ _ O
/ _ _ O
distributed _ _ O
with _ _ O
/ _ _ O
without _ _ O
changes _ _ O
. _ _ O
• _ _ O
These _ _ O
rules _ _ O
apply _ _ O
to _ _ O
all _ _ O
derivative _ _ O
versions _ _ O
. _ _ O
( _ _ O
All _ _ O
modifications _ _ O
) _ _ O
• _ _ O
Your _ _ O
modifications _ _ O
require _ _ O
you _ _ O
to _ _ O
distribute _ _ O
the _ _ O
source _ _ O
with _ _ O
your _ _ O
program _ _ O
. _ _ O
• _ _ O
Prevents _ _ O
others _ _ O
from _ _ O
adding _ _ O
substantive _ _ O
changes _ _ O
to _ _ O
divide _ _ O
userbases _ _ O
. _ _ O
• _ _ O
Known _ _ O
colloquially _ _ O
as _ _ O
a _ _ O
“ _ _ O
copyleft _ _ O
” _ _ O
license _ _ O
or _ _ O
“ _ _ O
viral _ _ O
” _ _ O
license _ _ O
. _ _ O
• _ _ O
This _ _ O
contract _ _ O
is _ _ O
enforced _ _ O
by _ _ O
U.S. _ _ O
and _ _ O
international _ _ O
copyright _ _ O
law _ _ O
. _ _ O
• _ _ O
By _ _ O
not _ _ O
using _ _ O
a _ _ O
software _ _ O
license _ _ O
, _ _ O
technically _ _ O
nobody _ _ O
can _ _ O
modify _ _ O
or _ _ O
distribute _ _ O
your _ _ O
code _ _ O
! _ _ O
• _ _ O
Current _ _ O
copyright _ _ O
law _ _ O
lasts _ _ O
the _ _ O
life _ _ O
of _ _ O
the _ _ O
author _ _ O
+ _ _ O
70 _ _ O
years _ _ O
. _ _ O
• _ _ O
Yikes _ _ O
. _ _ O
45 _ _ O

What _ _ O
is _ _ O
derivative _ _ O
? _ _ O
• _ _ O
Copyright _ _ O
interacts _ _ O
heavily _ _ O
with _ _ O
systems _ _ O
software _ _ O
. _ _ O
• _ _ O
When _ _ O
your _ _ O
program _ _ O
calls _ _ O
a _ _ O
system _ _ O
call _ _ O
, _ _ O
it _ _ O
executes _ _ O
code _ _ O
written _ _ O
by _ _ O
somebody _ _ O
else _ _ O
. _ _ O
• _ _ O
Is _ _ O
this _ _ O
copyrighted _ _ O
? _ _ O
( _ _ O
Yes _ _ O
. _ _ O
Everything _ _ O
is _ _ O
. _ _ O
) _ _ O
• _ _ O
If _ _ O
it _ _ O
is _ _ O
GPL _ _ O
, _ _ O
does _ _ O
it _ _ O
make _ _ O
your _ _ O
program _ _ O
a _ _ O
derivative _ _ O
? _ _ O
• _ _ O
AHHHHH _ _ O
. _ _ O
• _ _ O
If _ _ O
your _ _ O
compiler _ _ O
, _ _ O
like _ _ O
GCC _ _ O
, _ _ O
is _ _ O
copyleft _ _ O
, _ _ O
is _ _ O
your _ _ O
program _ _ O
derivative _ _ O
? _ _ O
• _ _ O
Generally _ _ O
, _ _ O
no _ _ O
, _ _ O
but _ _ O
runtime _ _ O
code _ _ O
and _ _ O
C _ _ O
standard _ _ O
library _ _ O
are _ _ O
GPL _ _ O
. _ _ O
• _ _ O
Special _ _ O
exceptions _ _ O
must _ _ O
exist _ _ O
for _ _ O
these _ _ O
blurry _ _ O
lines _ _ O
between _ _ O
systems _ _ O
software _ _ O
and _ _ O
application _ _ O
software _ _ O
. _ _ O
Linux _ _ O
is _ _ O
licensed _ _ O
under _ _ O
the _ _ O
GPL _ _ O
46 _ _ O

Operating _ _ O
Systems _ _ O
and _ _ O
Copyright _ _ O
Law _ _ O
• _ _ O
We _ _ O
’ve _ _ O
seen _ _ O
an _ _ O
executable _ _ O
loader _ _ O
in _ _ O
this _ _ O
lecture _ _ O
. _ _ O
• _ _ O
Part _ _ O
of _ _ O
the _ _ O
OS _ _ O
! _ _ O
Obviously _ _ O
derivative _ _ O
to _ _ O
the _ _ O
OS _ _ O
. _ _ O
• _ _ O
User _ _ O
programs _ _ O
are _ _ O
not _ _ O
considered _ _ O
“ _ _ O
derivative _ _ O
” _ _ O
to _ _ O
the _ _ O
OS _ _ O
. _ _ O
• _ _ O
They _ _ O
are _ _ O
n’t _ _ O
operating _ _ O
systems _ _ O
… _ _ O
just _ _ O
enabled _ _ O
by _ _ O
them _ _ O
. _ _ O
• _ _ O
THANK _ _ O
GOODNESS _ _ O
. _ _ O
• _ _ O
Linux _ _ O
has _ _ O
a _ _ O
“ _ _ O
system _ _ O
call _ _ O
” _ _ O
exception _ _ O
. _ _ O
• _ _ O
Use _ _ O
of _ _ O
system _ _ O
calls _ _ O
is _ _ O
never _ _ O
considered _ _ O
“ _ _ O
derivative _ _ O
” _ _ O
• _ _ O
THANK _ _ O
GOODNESS _ _ O
. _ _ O
• _ _ O
But _ _ O
some _ _ O
other _ _ O
parts _ _ O
are _ _ O
left _ _ O
very _ _ O
very _ _ O
unclear _ _ O
. _ _ O
47 _ _ O

The _ _ O
Problem _ _ O
• _ _ O
What _ _ O
about _ _ O
device _ _ O
drivers _ _ O
? _ _ O
? _ _ O
• _ _ O
Device _ _ O
drivers _ _ O
are _ _ O
small _ _ O
libraries _ _ O
the _ _ O
implement _ _ O
interactions _ _ O
with _ _ O
hardware _ _ O
. _ _ O
• _ _ O
They _ _ O
typically _ _ O
run _ _ O
in _ _ O
the _ _ O
operating _ _ O
system _ _ O
’s _ _ O
space _ _ O
. _ _ O
• _ _ O
Do _ _ O
they _ _ O
“ _ _ O
derive _ _ O
” _ _ O
the _ _ O
OS _ _ O
? _ _ O
( _ _ O
They _ _ O
can _ _ O
not _ _ O
co-exist _ _ O
… _ _ O
they _ _ O
extend _ _ O
… _ _ O
) _ _ O
• _ _ O
This _ _ O
is _ _ O
a _ _ O
difficult _ _ O
problem _ _ O
that _ _ O
plagues _ _ O
Linux _ _ O
… _ _ O
• _ _ O
They _ _ O
need _ _ O
to _ _ O
support _ _ O
proprietary _ _ O
hardware _ _ O
… _ _ O
• _ _ O
At _ _ O
least _ _ O
, _ _ O
not _ _ O
allow _ _ O
large _ _ O
companies _ _ O
software _ _ O
/ _ _ O
hardware _ _ O
exclusivity _ _ O
• _ _ O
So _ _ O
they _ _ O
then _ _ O
need _ _ O
to _ _ O
wedge _ _ O
in _ _ O
proprietary _ _ O
code _ _ O
… _ _ O
• _ _ O
They _ _ O
ca _ _ O
n’t _ _ O
because _ _ O
it _ _ O
needs _ _ O
to _ _ O
be _ _ O
under _ _ O
the _ _ O
GPL _ _ O
… _ _ O
• _ _ O
This _ _ O
is _ _ O
antagonistic _ _ O
to _ _ O
culture _ _ O
… _ _ O
the _ _ O
source _ _ O
can _ _ O
not _ _ O
be _ _ O
read _ _ O
or _ _ O
modified _ _ O
. _ _ O
• _ _ O
Are _ _ O
we _ _ O
willing _ _ O
to _ _ O
wait _ _ O
70 _ _ O
- _ _ O
90 _ _ O
years _ _ O
for _ _ O
a _ _ O
device _ _ O
driver _ _ O
’s _ _ O
copyright _ _ O
to _ _ O
lapse _ _ O
? _ _ O
48 _ _ O



