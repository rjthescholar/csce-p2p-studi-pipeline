unlabeled|cs0449|lec12
-DOCSTART- -X- -X- O

12 _ _ O
How _ _ O
Programs _ _ O
Reproduce _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
Introduction _ _ O
to _ _ O
Systems _ _ O
Software _ _ O
Luis _ _ O
Oliveira _ _ O
( _ _ O
with _ _ O
content _ _ O
borrowed _ _ O
from _ _ O
wilkie _ _ O
and _ _ O
Vinicius _ _ O
Petrucci _ _ O
) _ _ O

Creating _ _ O
Processes _ _ O
Forks _ _ O
: _ _ O
what _ _ O
you _ _ O
stick _ _ O
in _ _ O
things _ _ O
that _ _ O
are _ _ O
done _ _ O
… _ _ O
and _ _ O
sometimes _ _ O
a _ _ O
system _ _ O
call _ _ O
. _ _ O
2 _ _ O

This _ _ O
is _ _ O
a _ _ O
story _ _ O
about _ _ O
a _ _ O
system _ _ O
call _ _ O
… _ _ O
• _ _ O
We _ _ O
are _ _ O
focusing _ _ O
several _ _ O
system _ _ O
calls _ _ O
starting _ _ O
with _ _ O
• _ _ O
This _ _ O
system _ _ O
call _ _ O
copies _ _ O
the _ _ O
current _ _ O
process _ _ O
. _ _ O
▪ _ _ O
This _ _ O
creates _ _ O
a _ _ O
“ _ _ O
child _ _ O
” _ _ O
process _ _ O
that _ _ O
is _ _ O
a _ _ O
duplicate _ _ O
of _ _ O
the _ _ O
memory _ _ O
and _ _ O
state _ _ O
of _ _ O
its _ _ O
parent _ _ O
. _ _ O
• _ _ O
This _ _ O
can _ _ O
be _ _ O
a _ _ O
convenient _ _ O
way _ _ O
to _ _ O
gain _ _ O
concurrency _ _ O
. _ _ O
▪ _ _ O
Copy _ _ O
the _ _ O
process _ _ O
and _ _ O
run _ _ O
each _ _ O
copy _ _ O
… _ _ O
▪ _ _ O
… _ _ O
those _ _ O
copies _ _ O
now _ _ O
run _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
. _ _ O
• _ _ O
This _ _ O
is _ _ O
the _ _ O
origin _ _ O
of _ _ O
the _ _ O
term _ _ O
“ _ _ O
fork _ _ O
” _ _ O
… _ _ O
a _ _ O
logical _ _ O
split _ _ O
in _ _ O
a _ _ O
program _ _ O
where _ _ O
there _ _ O
are _ _ O
now _ _ O
multiple _ _ O
paths _ _ O
. _ _ O
▪ _ _ O
We _ _ O
will _ _ O
see _ _ O
this _ _ O
idea _ _ O
in _ _ O
action _ _ O
soon _ _ O
. _ _ O
3 _ _ O

Here _ _ O
’s _ _ O
Dolly _ _ O
• _ _ O
The _ _ O
system _ _ O
call _ _ O
in _ _ O
action _ _ O
: _ _ O
▪ _ _ O
Copies _ _ O
the _ _ O
memory _ _ O
layout _ _ O
. _ _ O
▪ _ _ O
Copies _ _ O
the _ _ O
process _ _ O
state _ _ O
. _ _ O
( _ _ O
but _ _ O
gives _ _ O
it _ _ O
a _ _ O
unique _ _ O
ID _ _ O
) _ _ O
A _ _ O
Parent _ _ O
Child _ _ O
stack _ _ O
stack _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
CPU _ _ O
State _ _ O
A _ _ O
: _ _ O
Registers _ _ O
, _ _ O
CPU _ _ O
State _ _ O
B _ _ O
: _ _ O
Registers _ _ O
, _ _ O
PID _ _ O
: _ _ O
4356 _ _ O
PID _ _ O
: _ _ O
6567 _ _ O
B _ _ O
4 _ _ O

Here _ _ O
’s _ _ O
Dolly _ _ O
’s _ _ O
ID _ _ O
tag _ _ O
• _ _ O
The _ _ O
system _ _ O
call _ _ O
in _ _ O
action _ _ O
: _ _ O
▪ _ _ O
Updates _ _ O
the _ _ O
child _ _ O
’s _ _ O
CPU _ _ O
state _ _ O
so _ _ O
that _ _ O
it _ _ O
returns _ _ O
. _ _ O
( _ _ O
An _ _ O
invalid _ _ O
▪ _ _ O
Updates _ _ O
parent _ _ O
’s _ _ O
CPU _ _ O
state _ _ O
to _ _ O
return _ _ O
the _ _ O
child _ _ O
’s _ _ O
process _ _ O
ID _ _ O
. _ _ O
( _ _ O
A _ _ O
Parent _ _ O
Child _ _ O
stack _ _ O
stack _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
CPU _ _ O
State _ _ O
A _ _ O
: _ _ O
Registers _ _ O
CPU _ _ O
State _ _ O
B _ _ O
: _ _ O
Registers _ _ O
PID _ _ O
: _ _ O
4356 _ _ O
Ensures _ _ O
each _ _ O
process _ _ O
can _ _ O
detect _ _ O
which _ _ O
it _ _ O
is _ _ O
) _ _ O
) _ _ O
B _ _ O
PID _ _ O
: _ _ O
6567 _ _ O
5 _ _ O

A _ _ O
small _ _ O
fork _ _ O
example _ _ O
… _ _ O
a _ _ O
… _ _ O
salad _ _ O
fork _ _ O
? _ _ O
example _ _ O
? _ _ O
? _ _ O
• _ _ O
There _ _ O
is _ _ O
only _ _ O
one _ _ O
process _ _ O
when _ _ O
is _ _ O
called _ _ O
. _ _ O
C _ _ O
• _ _ O
However _ _ O
, _ _ O
when _ _ O
is _ _ O
called _ _ O
, _ _ O
the _ _ O
system _ _ O
call _ _ O
returns _ _ O
“ _ _ O
twice _ _ O
” _ _ O
The _ _ O
x _ _ O
is _ _ O
copied _ _ O
, _ _ O
so _ _ O
it _ _ O
has _ _ O
different _ _ O
values _ _ O
in _ _ O
child _ _ O
and _ _ O
parent _ _ O
. _ _ O
▪ _ _ O
Once _ _ O
in _ _ O
the _ _ O
parent _ _ O
process _ _ O
▪ _ _ O
Once _ _ O
in _ _ O
the _ _ O
child _ _ O
process _ _ O
• _ _ O
This _ _ O
starts _ _ O
two _ _ O
concurrent _ _ O
executions _ _ O
within _ _ O
the _ _ O
same _ _ O
program _ _ O
. _ _ O
▪ _ _ O
Via _ _ O
two _ _ O
processes _ _ O
. _ _ O
• _ _ O
What _ _ O
does _ _ O
this _ _ O
print _ _ O
out _ _ O
? _ _ O
6 _ _ O

Children _ _ O
first _ _ O
… _ _ O
OR _ _ O
NOT _ _ O
• _ _ O
If _ _ O
the _ _ O
child _ _ O
process _ _ O
goes _ _ O
first _ _ O
… _ _ O
C _ _ O
▪ _ _ O
Then _ _ O
it _ _ O
will _ _ O
print _ _ O
the _ _ O
child _ _ O
text _ _ O
. _ _ O
Child _ _ O
Parent _ _ O
• _ _ O
Then _ _ O
the _ _ O
scheduler _ _ O
schedules _ _ O
the _ _ O
parent _ _ O
process _ _ O
once _ _ O
more _ _ O
. _ _ O
▪ _ _ O
Then _ _ O
it _ _ O
will _ _ O
print _ _ O
the _ _ O
parent _ _ O
text _ _ O
. _ _ O
• _ _ O
However _ _ O
, _ _ O
that _ _ O
’s _ _ O
not _ _ O
the _ _ O
only _ _ O
possible _ _ O
pattern _ _ O
. _ _ O
• _ _ O
If _ _ O
the _ _ O
parent _ _ O
process _ _ O
goes _ _ O
first _ _ O
... _ _ O
▪ _ _ O
Then _ _ O
it _ _ O
prints _ _ O
the _ _ O
parent _ _ O
text _ _ O
… _ _ O
▪ _ _ O
… _ _ O
followed _ _ O
by _ _ O
the _ _ O
child _ _ O
. _ _ O
7 _ _ O

Two _ _ O
roads _ _ O
diverged _ _ O
in _ _ O
a _ _ O
yellow _ _ O
wood _ _ O
, _ _ O
AND _ _ O
I _ _ O
TOOK _ _ O
BOTH _ _ O
( _ _ O
NOT _ _ O
SORRY _ _ O
) _ _ O
C _ _ O
• _ _ O
If _ _ O
I _ _ O
were _ _ O
to _ _ O
extend _ _ O
the _ _ O
code _ _ O
to _ _ O
make _ _ O
it _ _ O
loop _ _ O
infinitely _ _ O
... _ _ O
▪ _ _ O
The _ _ O
parent _ _ O
and _ _ O
child _ _ O
will _ _ O
constantly _ _ O
race _ _ O
to _ _ O
print _ _ O
out _ _ O
their _ _ O
respective _ _ O
text _ _ O
. _ _ O
8 _ _ O

The _ _ O
good _ _ O
, _ _ O
the _ _ O
bad _ _ O
, _ _ O
and _ _ O
the _ _ O
unpredictable _ _ O
• _ _ O
Adding _ _ O
concurrency _ _ O
to _ _ O
your _ _ O
program _ _ O
makes _ _ O
things _ _ O
… _ _ O
weird _ _ O
. _ _ O
▪ _ _ O
You _ _ O
can _ _ O
not _ _ O
rely _ _ O
on _ _ O
the _ _ O
order _ _ O
processes _ _ O
will _ _ O
be _ _ O
scheduled _ _ O
. _ _ O
▪ _ _ O
Your _ _ O
operations _ _ O
will _ _ O
be _ _ O
asynchronous _ _ O
( _ _ O
not _ _ O
synchronized _ _ O
; _ _ O
no _ _ O
known _ _ O
order _ _ O
) _ _ O
• _ _ O
If _ _ O
you _ _ O
need _ _ O
to _ _ O
synchronize _ _ O
processes _ _ O
, _ _ O
you _ _ O
can _ _ O
do _ _ O
so _ _ O
with _ _ O
• _ _ O
. _ _ O
yields _ _ O
the _ _ O
process _ _ O
and _ _ O
returns _ _ O
only _ _ O
when _ _ O
a _ _ O
child _ _ O
process _ _ O
ends _ _ O
. _ _ O
▪ _ _ O
It _ _ O
returns _ _ O
when _ _ O
any _ _ O
child _ _ O
process _ _ O
exits _ _ O
. _ _ O
▪ _ _ O
Its _ _ O
return _ _ O
value _ _ O
is _ _ O
the _ _ O
pid _ _ O
of _ _ O
the _ _ O
child _ _ O
process _ _ O
that _ _ O
exited _ _ O
. _ _ O
▪ _ _ O
You _ _ O
can _ _ O
also _ _ O
use _ _ O
to _ _ O
specify _ _ O
a _ _ O
specific _ _ O
child _ _ O
process _ _ O
by _ _ O
its _ _ O
pid _ _ O
. _ _ O
9 _ _ O

Waiting _ _ O
is _ _ O
such _ _ O
sweet _ _ O
sorrow _ _ O
… _ _ O
wait _ _ O
that _ _ O
’s _ _ O
not _ _ O
right _ _ O
• _ _ O
By _ _ O
using _ _ O
the _ _ O
parent _ _ O
process _ _ O
only _ _ O
continues _ _ O
when _ _ O
the _ _ O
child _ _ O
process _ _ O
ends _ _ O
. _ _ O
Child _ _ O
Parent _ _ O
• _ _ O
Therefore _ _ O
, _ _ O
the _ _ O
output _ _ O
order _ _ O
is _ _ O
now _ _ O
known _ _ O
. _ _ O
Always _ _ O
: _ _ O
▪ _ _ O
If _ _ O
the _ _ O
parent _ _ O
goes _ _ O
first _ _ O
… _ _ O
▪ _ _ O
It _ _ O
gets _ _ O
stuck _ _ O
at _ _ O
the _ _ O
call _ _ O
. _ _ O
▪ _ _ O
Then _ _ O
the _ _ O
child _ _ O
goes _ _ O
until _ _ O
it _ _ O
hits _ _ O
▪ _ _ O
ends _ _ O
the _ _ O
process _ _ O
. _ _ O
▪ _ _ O
And _ _ O
then _ _ O
the _ _ O
parent _ _ O
continues _ _ O
. _ _ O
• _ _ O
Nice _ _ O
and _ _ O
well-known _ _ O
behavior _ _ O
! _ _ O
10 _ _ O

Notes _ _ O
on _ _ O
• _ _ O
The _ _ O
system _ _ O
call _ _ O
ends _ _ O
the _ _ O
current _ _ O
process _ _ O
. _ _ O
▪ _ _ O
The _ _ O
given _ _ O
argument _ _ O
is _ _ O
the _ _ O
process _ _ O
return _ _ O
code _ _ O
also _ _ O
known _ _ O
as _ _ O
an _ _ O
exit _ _ O
code _ _ O
. _ _ O
▪ _ _ O
Normally _ _ O
your _ _ O
program _ _ O
yields _ _ O
an _ _ O
exit _ _ O
code _ _ O
at _ _ O
the _ _ O
end _ _ O
of _ _ O
▪ _ _ O
Exit _ _ O
ends _ _ O
your _ _ O
program _ _ O
exactly _ _ O
at _ _ O
the _ _ O
point _ _ O
of _ _ O
the _ _ O
call _ _ O
. _ _ O
▪ _ _ O
Therefore _ _ O
, _ _ O
it _ _ O
has _ _ O
its _ _ O
own _ _ O
means _ _ O
of _ _ O
giving _ _ O
the _ _ O
exit _ _ O
code _ _ O
. _ _ O
• _ _ O
However _ _ O
, _ _ O
we _ _ O
can _ _ O
have _ _ O
processes _ _ O
that _ _ O
are _ _ O
no _ _ O
longer _ _ O
running _ _ O
… _ _ O
▪ _ _ O
Yet _ _ O
, _ _ O
not _ _ O
deallocated _ _ O
either _ _ O
. _ _ O
▪ _ _ O
The _ _ O
are _ _ O
not _ _ O
living _ _ O
… _ _ O
▪ _ _ O
And _ _ O
not _ _ O
dead _ _ O
! _ _ O
! _ _ O
11 _ _ O

Zombies _ _ O
• _ _ O
A _ _ O
terminated _ _ O
process _ _ O
still _ _ O
takes _ _ O
up _ _ O
space _ _ O
▪ _ _ O
All _ _ O
that _ _ O
process _ _ O
metadata _ _ O
sticks _ _ O
around _ _ O
▪ _ _ O
Until _ _ O
the _ _ O
parent _ _ O
tells _ _ O
the _ _ O
system _ _ O
it _ _ O
does _ _ O
n’t _ _ O
need _ _ O
it _ _ O
• _ _ O
As _ _ O
long _ _ O
as _ _ O
the _ _ O
parent _ _ O
stays _ _ O
alive _ _ O
… _ _ O
▪ _ _ O
The _ _ O
corpse _ _ O
of _ _ O
the _ _ O
child _ _ O
process _ _ O
sticks _ _ O
around _ _ O
, _ _ O
too _ _ O
. _ _ O
• _ _ O
These _ _ O
are _ _ O
called _ _ O
zombie _ _ O
processes _ _ O
. _ _ O
▪ _ _ O
They _ _ O
are _ _ O
processes _ _ O
that _ _ O
still _ _ O
exist _ _ O
and _ _ O
have _ _ O
an _ _ O
ID _ _ O
yet _ _ O
do _ _ O
not _ _ O
run _ _ O
and _ _ O
are _ _ O
no _ _ O
longer _ _ O
scheduled _ _ O
. _ _ O
Dancing _ _ O
Zombie _ _ O
from _ _ O
Plants _ _ O
vs. _ _ O
Zombies _ _ O
Copyright _ _ O
PopCap _ _ O
Games _ _ O
, _ _ O
a _ _ O
subsidiary _ _ O
of _ _ O
EA _ _ O
Games _ _ O
12 _ _ O

The _ _ O
night _ _ O
of _ _ O
the _ _ O
living _ _ O
dead _ _ O
C _ _ O
• _ _ O
If _ _ O
I _ _ O
added _ _ O
an _ _ O
infinite _ _ O
loop _ _ O
to _ _ O
the _ _ O
parent _ _ O
… _ _ O
▪ _ _ O
When _ _ O
the _ _ O
child _ _ O
ends _ _ O
… _ _ O
▪ _ _ O
And _ _ O
I _ _ O
list _ _ O
the _ _ O
active _ _ O
processes _ _ O
using _ _ O
the _ _ O
command _ _ O
. _ _ O
▪ _ _ O
I _ _ O
see _ _ O
a _ _ O
“ _ _ O
defunct _ _ O
” _ _ O
child _ _ O
process _ _ O
. _ _ O
A _ _ O
ZOMBIE _ _ O
! _ _ O
13 _ _ O

Just _ _ O
the _ _ O
normal _ _ O
kind _ _ O
of _ _ O
dead _ _ O
. _ _ O
C _ _ O
• _ _ O
However _ _ O
, _ _ O
if _ _ O
I _ _ O
added _ _ O
an _ _ O
infinite _ _ O
loop _ _ O
to _ _ O
the _ _ O
child _ _ O
… _ _ O
▪ _ _ O
When _ _ O
the _ _ O
parent _ _ O
ends _ _ O
… _ _ O
the _ _ O
program _ _ O
ends _ _ O
as _ _ O
well _ _ O
! _ _ O
▪ _ _ O
And _ _ O
I _ _ O
list _ _ O
the _ _ O
active _ _ O
processes _ _ O
using _ _ O
the _ _ O
command _ _ O
. _ _ O
I _ _ O
see _ _ O
only _ _ O
the _ _ O
child _ _ O
process _ _ O
No _ _ O
zombies _ _ O
here _ _ O
! _ _ O
Just _ _ O
orphans _ _ O
… _ _ O
14 _ _ O

How _ _ O
to _ _ O
run _ _ O
a _ _ O
different _ _ O
program _ _ O
? _ _ O
• _ _ O
When _ _ O
you _ _ O
process _ _ O
. _ _ O
a _ _ O
process _ _ O
, _ _ O
you _ _ O
are _ _ O
making _ _ O
an _ _ O
exact _ _ O
copy _ _ O
of _ _ O
that _ _ O
• _ _ O
However _ _ O
, _ _ O
maybe _ _ O
you _ _ O
want _ _ O
to _ _ O
create _ _ O
a _ _ O
process _ _ O
to _ _ O
run _ _ O
a _ _ O
different _ _ O
program _ _ O
altogether _ _ O
? _ _ O
▪ _ _ O
This _ _ O
is _ _ O
very _ _ O
useful _ _ O
… _ _ O
instead _ _ O
of _ _ O
using _ _ O
a _ _ O
software _ _ O
library _ _ O
▪ _ _ O
You _ _ O
could _ _ O
just _ _ O
run _ _ O
the _ _ O
existing _ _ O
program _ _ O
. _ _ O
• _ _ O
For _ _ O
this _ _ O
purpose _ _ O
, _ _ O
the _ _ O
family _ _ O
of _ _ O
system _ _ O
calls _ _ O
is _ _ O
used _ _ O
. _ _ O
▪ _ _ O
There _ _ O
are _ _ O
several _ _ O
different _ _ O
variations _ _ O
of _ _ O
exec _ _ O
calls _ _ O
… _ _ O
15 _ _ O

Invoking _ _ O
the _ _ O
OS _ _ O
loader _ _ O
… _ _ O
• _ _ O
Using _ _ O
the _ _ O
C _ _ O
system _ _ O
call _ _ O
. _ _ O
▪ _ _ O
The _ _ O
call _ _ O
takes _ _ O
the _ _ O
path _ _ O
to _ _ O
an _ _ O
executable _ _ O
▪ _ _ O
And _ _ O
an _ _ O
array _ _ O
of _ _ O
strings _ _ O
for _ _ O
the _ _ O
arguments _ _ O
. _ _ O
• _ _ O
Sentinel _ _ O
: _ _ O
must _ _ O
end _ _ O
in _ _ O
a _ _ O
▪ _ _ O
The _ _ O
first _ _ O
argument _ _ O
to _ _ O
a _ _ O
C _ _ O
program _ _ O
is _ _ O
always _ _ O
its _ _ O
own _ _ O
path _ _ O
! _ _ O
We _ _ O
ran _ _ O
“ _ _ O
” _ _ O
Add _ _ O
then _ _ O
continued _ _ O
our _ _ O
own _ _ O
process _ _ O
. _ _ O
16 _ _ O

Here _ _ O
’s _ _ O
Dolly _ _ O
’s _ _ O
brother _ _ O
Bobby _ _ O
. _ _ O
Bobby _ _ O
is _ _ O
a _ _ O
goat _ _ O
somehow _ _ O
. _ _ O
Do _ _ O
n’t _ _ O
ask _ _ O
. _ _ O
• _ _ O
The _ _ O
system _ _ O
call _ _ O
in _ _ O
action _ _ O
: _ _ O
▪ _ _ O
Copies _ _ O
the _ _ O
memory _ _ O
layout _ _ O
. _ _ O
Copies _ _ O
the _ _ O
process _ _ O
state _ _ O
. _ _ O
( _ _ O
but _ _ O
gives _ _ O
it _ _ O
a _ _ O
unique _ _ O
ID _ _ O
) _ _ O
• _ _ O
The _ _ O
system _ _ O
call _ _ O
in _ _ O
action _ _ O
: _ _ O
▪ _ _ O
It _ _ O
’s _ _ O
a _ _ O
goat _ _ O
now _ _ O
. _ _ O
A _ _ O
Parent _ _ O
Child _ _ O
stack _ _ O
new _ _ O
stack _ _ O
stack _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
new _ _ O
.bss _ _ O
.bss _ _ O
new _ _ O
.data _ _ O
.data _ _ O
new _ _ O
.text _ _ O
.text _ _ O
CPU _ _ O
State _ _ O
A _ _ O
: _ _ O
Registers _ _ O
, _ _ O
CPU _ _ O
State _ _ O
B _ _ O
: _ _ O
Registers _ _ O
, _ _ O
PID _ _ O
: _ _ O
4356 _ _ O
PID _ _ O
: _ _ O
6567 _ _ O
B _ _ O
17 _ _ O

Different _ _ O
forms _ _ O
of _ _ O
• _ _ O
You _ _ O
can _ _ O
look _ _ O
up _ _ O
the _ _ O
many _ _ O
different _ _ O
styles _ _ O
of _ _ O
exec _ _ O
▪ _ _ O
Each _ _ O
one _ _ O
has _ _ O
a _ _ O
different _ _ O
way _ _ O
of _ _ O
calling _ _ O
it _ _ O
. _ _ O
called _ _ O
with _ _ O
an _ _ O
array _ _ O
of _ _ O
strings _ _ O
terminated _ _ O
with _ _ O
a _ _ O
same _ _ O
, _ _ O
but _ _ O
can _ _ O
use _ _ O
specific _ _ O
environment _ _ O
variables _ _ O
searches _ _ O
the _ _ O
system _ _ O
paths _ _ O
for _ _ O
the _ _ O
executable _ _ O
combination _ _ O
of _ _ O
and _ _ O
• _ _ O
• _ _ O
• _ _ O
• _ _ O
• _ _ O
There _ _ O
are _ _ O
also _ _ O
functions _ _ O
that _ _ O
use _ _ O
function _ _ O
arguments _ _ O
instead _ _ O
of _ _ O
an _ _ O
array _ _ O
of _ _ O
strings _ _ O
. _ _ O
▪ _ _ O
18 _ _ O

The _ _ O
common _ _ O
ancestor _ _ O
… _ _ O
and _ _ O
the _ _ O
orphan _ _ O
. _ _ O
• _ _ O
UNIX _ _ O
/ _ _ O
Linux _ _ O
has _ _ O
an _ _ O
interesting _ _ O
design _ _ O
: _ _ O
every _ _ O
application _ _ O
is _ _ O
a _ _ O
child _ _ O
process _ _ O
. _ _ O
▪ _ _ O
The _ _ O
root _ _ O
is _ _ O
the _ _ O
task _ _ O
. _ _ O
▪ _ _ O
Your _ _ O
shell _ _ O
spawns _ _ O
child _ _ O
processes _ _ O
when _ _ O
you _ _ O
ask _ _ O
to _ _ O
run _ _ O
a _ _ O
command _ _ O
. _ _ O
▪ _ _ O
It _ _ O
uses _ _ O
/ _ _ O
! _ _ O
init _ _ O
httpd _ _ O
( _ _ O
daemon _ _ O
) _ _ O
Orphans _ _ O
get _ _ O
adopted _ _ O
by _ _ O
the _ _ O
root _ _ O
process _ _ O
. _ _ O
How _ _ O
to _ _ O
interact _ _ O
with _ _ O
this _ _ O
process _ _ O
? _ _ O
? _ _ O
( _ _ O
signals _ _ O
… _ _ O
) _ _ O
Bash _ _ O
( _ _ O
shell _ _ O
) _ _ O
GUI _ _ O
• _ _ O
When _ _ O
your _ _ O
own _ _ O
application _ _ O
spawns _ _ O
a _ _ O
process _ _ O
, _ _ O
the _ _ O
same _ _ O
thing _ _ O
happens _ _ O
. _ _ O
. _ _ O
/ _ _ O
app _ _ O
child _ _ O
▪ _ _ O
You _ _ O
use _ _ O
▪ _ _ O
If _ _ O
your _ _ O
app _ _ O
exits _ _ O
before _ _ O
the _ _ O
child _ _ O
… _ _ O
▪ _ _ O
The _ _ O
child _ _ O
is _ _ O
an _ _ O
orphan _ _ O
process _ _ O
. _ _ O
19 _ _ O

An _ _ O
extreme _ _ O
attitude _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
interact _ _ O
with _ _ O
orphaned _ _ O
processes _ _ O
? _ _ O
• _ _ O
How _ _ O
do _ _ O
we _ _ O
synchronize _ _ O
at _ _ O
a _ _ O
finer _ _ O
granularity _ _ O
? _ _ O
▪ _ _ O
Using _ _ O
is _ _ O
rather _ _ O
inflexible _ _ O
. _ _ O
▪ _ _ O
It _ _ O
can _ _ O
only _ _ O
detect _ _ O
that _ _ O
a _ _ O
child _ _ O
process _ _ O
ends _ _ O
using _ _ O
or _ _ O
via _ _ O
main _ _ O
• _ _ O
What _ _ O
if _ _ O
you _ _ O
want _ _ O
to _ _ O
synchronize _ _ O
smaller _ _ O
events _ _ O
… _ _ O
▪ _ _ O
The _ _ O
child _ _ O
process _ _ O
does _ _ O
something _ _ O
... _ _ O
The _ _ O
parent _ _ O
responds _ _ O
… _ _ O
▪ _ _ O
But _ _ O
, _ _ O
keep _ _ O
the _ _ O
child _ _ O
process _ _ O
running _ _ O
longer _ _ O
. _ _ O
• _ _ O
For _ _ O
this _ _ O
, _ _ O
we _ _ O
will _ _ O
need _ _ O
the _ _ O
parent _ _ O
and _ _ O
child _ _ O
to _ _ O
be _ _ O
able _ _ O
to _ _ O
communicate _ _ O
with _ _ O
one _ _ O
another _ _ O
. _ _ O
20 _ _ O

Inter-Process _ _ O
Communication _ _ O
IPC _ _ O
… _ _ O
not _ _ O
to _ _ O
be _ _ O
confused _ _ O
with _ _ O
the _ _ O
other _ _ O
IPC _ _ O
21 _ _ O

What _ _ O
that _ _ O
last _ _ O
slide _ _ O
said _ _ O
… _ _ O
• _ _ O
Passing _ _ O
data _ _ O
or _ _ O
messages _ _ O
from _ _ O
one _ _ O
process _ _ O
to _ _ O
another _ _ O
is _ _ O
called _ _ O
inter-process _ _ O
communication _ _ O
. _ _ O
• _ _ O
This _ _ O
is _ _ O
a _ _ O
broad _ _ O
OS _ _ O
topic _ _ O
as _ _ O
there _ _ O
are _ _ O
many _ _ O
ways _ _ O
to _ _ O
do _ _ O
this _ _ O
. _ _ O
▪ _ _ O
Shared _ _ O
memory _ _ O
( _ _ O
we _ _ O
will _ _ O
talk _ _ O
about _ _ O
this _ _ O
a _ _ O
bit _ _ O
later _ _ O
) _ _ O
▪ _ _ O
Message _ _ O
passing _ _ O
( _ _ O
we _ _ O
will _ _ O
talk _ _ O
about _ _ O
this _ _ O
NOW _ _ O
) _ _ O
• _ _ O
Simple _ _ O
messages _ _ O
( _ _ O
signals _ _ O
, _ _ O
this _ _ O
lecture _ _ O
) _ _ O
• _ _ O
More _ _ O
complex _ _ O
( _ _ O
pipes _ _ O
, _ _ O
semaphores _ _ O
, _ _ O
etc _ _ O
, _ _ O
soon _ _ O
) _ _ O
• _ _ O
Most _ _ O
complex _ _ O
( _ _ O
network _ _ O
sockets _ _ O
, _ _ O
we _ _ O
will _ _ O
look _ _ O
at _ _ O
this _ _ O
later _ _ O
) _ _ O
• _ _ O
Message _ _ O
passing _ _ O
is _ _ O
a _ _ O
fancy _ _ O
way _ _ O
of _ _ O
saying _ _ O
are _ _ O
using _ _ O
an _ _ O
API _ _ O
to _ _ O
send _ _ O
a _ _ O
small _ _ O
message _ _ O
to _ _ O
another _ _ O
process _ _ O
. _ _ O
▪ _ _ O
And _ _ O
also _ _ O
some _ _ O
means _ _ O
of _ _ O
listening _ _ O
for _ _ O
messages _ _ O
. _ _ O
22 _ _ O

All _ _ O
aboard _ _ O
the _ _ O
train _ _ O
metaphor _ _ O
• _ _ O
In _ _ O
UNIX _ _ O
/ _ _ O
Linux _ _ O
, _ _ O
tiny _ _ O
messages _ _ O
sent _ _ O
between _ _ O
processes _ _ O
are _ _ O
called _ _ O
signals _ _ O
. _ _ O
• _ _ O
They _ _ O
are _ _ O
typically _ _ O
used _ _ O
to _ _ O
send _ _ O
messages _ _ O
about _ _ O
events _ _ O
from _ _ O
the _ _ O
system _ _ O
. _ _ O
Here _ _ O
are _ _ O
a _ _ O
few _ _ O
: _ _ O
Number _ _ O
Name _ _ O
Description _ _ O
Default _ _ O
Behavior _ _ O
Interruption _ _ O
– _ _ O
Somebody _ _ O
pressed _ _ O
CTRL+C _ _ O
Terminate _ _ O
Kill _ _ O
– _ _ O
Somebody _ _ O
wants _ _ O
us _ _ O
gone _ _ O
… _ _ O
 _ _ O
Terminate _ _ O
Memory _ _ O
Violation _ _ O
– _ _ O
Oops _ _ O
! _ _ O
Seg-fault _ _ O
Terminate _ _ O
Child _ _ O
exited _ _ O
– _ _ O
Child _ _ O
process _ _ O
ended _ _ O
Ignore _ _ O
A _ _ O
signal _ _ O
that _ _ O
you _ _ O
can _ _ O
use _ _ O
for _ _ O
any _ _ O
purpose _ _ O
Ignore _ _ O
23 _ _ O

Talking _ _ O
to _ _ O
orphans _ _ O
• _ _ O
Recall _ _ O
the _ _ O
infinite _ _ O
looping _ _ O
child _ _ O
. _ _ O
• _ _ O
Orphans _ _ O
run _ _ O
in _ _ O
the _ _ O
background _ _ O
. _ _ O
• _ _ O
However _ _ O
, _ _ O
we _ _ O
can _ _ O
send _ _ O
a _ _ O
message _ _ O
( _ _ O
) _ _ O
to _ _ O
the _ _ O
process _ _ O
by _ _ O
its _ _ O
i _ _ O
d _ _ O
. _ _ O
C _ _ O
The _ _ O
parent _ _ O
ended _ _ O
. _ _ O
But _ _ O
not _ _ O
the _ _ O
child _ _ O
. _ _ O
We _ _ O
can _ _ O
send _ _ O
a _ _ O
using _ _ O
the _ _ O
message _ _ O
application _ _ O
.. _ _ O
And _ _ O
the _ _ O
child _ _ O
is _ _ O
gone _ _ O
! _ _ O
24 _ _ O

Receiving _ _ O
Signals _ _ O
C _ _ O
• _ _ O
The _ _ O
standard _ _ O
function _ _ O
will _ _ O
set _ _ O
up _ _ O
your _ _ O
application _ _ O
to _ _ O
listen _ _ O
for _ _ O
a _ _ O
particular _ _ O
signal _ _ O
. _ _ O
• _ _ O
This _ _ O
example _ _ O
hooks _ _ O
the _ _ O
empty _ _ O
function _ _ O
sigint_handler _ _ O
to _ _ O
override _ _ O
the _ _ O
default _ _ O
behavior _ _ O
of _ _ O
the _ _ O
SIGINT _ _ O
signal _ _ O
. _ _ O
• _ _ O
If _ _ O
you _ _ O
recall _ _ O
, _ _ O
that _ _ O
happens _ _ O
on _ _ O
a _ _ O
CTRL+C _ _ O
… _ _ O
which _ _ O
now _ _ O
does _ _ O
not _ _ O
terminate _ _ O
the _ _ O
foreground _ _ O
process _ _ O
! _ _ O
▪ _ _ O
Needs _ _ O
to _ _ O
be _ _ O
killed _ _ O
using _ _ O
now _ _ O
. _ _ O
25 _ _ O

Waiting _ _ O
for _ _ O
a _ _ O
signal _ _ O
… _ _ O
• _ _ O
Proper _ _ O
use _ _ O
of _ _ O
signals _ _ O
and _ _ O
waiting _ _ O
on _ _ O
the _ _ O
values _ _ O
of _ _ O
variables _ _ O
to _ _ O
change _ _ O
can _ _ O
create _ _ O
synchronization _ _ O
. _ _ O
Both _ _ O
processes _ _ O
set _ _ O
to _ _ O
0 _ _ O
on _ _ O
1 _ _ O
. _ _ O
. _ _ O
is _ _ O
initially _ _ O
2 _ _ O
. _ _ O
Which _ _ O
causes _ _ O
the _ _ O
child _ _ O
to _ _ O
wait _ _ O
… _ _ O
5 _ _ O
. _ _ O
Until _ _ O
child _ _ O
signals _ _ O
it _ _ O
back _ _ O
after _ _ O
printing _ _ O
its _ _ O
own _ _ O
message _ _ O
. _ _ O
3 _ _ O
. _ _ O
Until _ _ O
the _ _ O
parent _ _ O
process _ _ O
signals _ _ O
it _ _ O
, _ _ O
after _ _ O
it _ _ O
prints _ _ O
its _ _ O
message _ _ O
. _ _ O
6 _ _ O
. _ _ O
Repeat _ _ O
… _ _ O
for _ _ O
both _ _ O
4 _ _ O
. _ _ O
Afterward _ _ O
, _ _ O
the _ _ O
parent _ _ O
process _ _ O
waits _ _ O
26 _ _ O

Let _ _ O
’s _ _ O
look _ _ O
at _ _ O
that _ _ O
again _ _ O
. _ _ O
( _ _ O
animated _ _ O
) _ _ O
1 _ _ O
. _ _ O
Child _ _ O
waits _ _ O
2 _ _ O
. _ _ O
Parent _ _ O
prints _ _ O
Child _ _ O
0 _ _ O
1 _ _ O
. _ _ O
Sets _ _ O
its _ _ O
own _ _ O
wait _ _ O
variable _ _ O
2 _ _ O
. _ _ O
Sends _ _ O
signal _ _ O
to _ _ O
child _ _ O
3 _ _ O
. _ _ O
Waits _ _ O
Parent _ _ O
0 _ _ O
3 _ _ O
. _ _ O
Child _ _ O
prints _ _ O
1 _ _ O
. _ _ O
Sets _ _ O
its _ _ O
wait _ _ O
variable _ _ O
2 _ _ O
. _ _ O
Sends _ _ O
signal _ _ O
to _ _ O
parent _ _ O
3 _ _ O
. _ _ O
Waits _ _ O
4 _ _ O
. _ _ O
Parent _ _ O
prints _ _ O
1 _ _ O
. _ _ O
Sets _ _ O
its _ _ O
own _ _ O
wait _ _ O
variable _ _ O
2 _ _ O
. _ _ O
Sends _ _ O
signal _ _ O
to _ _ O
child _ _ O
3 _ _ O
. _ _ O
Waits _ _ O
5 _ _ O
. _ _ O
Repeat _ _ O
… _ _ O
27 _ _ O

If _ _ O
you _ _ O
are _ _ O
in _ _ O
a _ _ O
hurry _ _ O
... _ _ O
( _ _ O
animated _ _ O
) _ _ O
1 _ _ O
. _ _ O
Child _ _ O
waits _ _ O
2 _ _ O
. _ _ O
Parent _ _ O
prints _ _ O
Child _ _ O
0 _ _ O
1 _ _ O
. _ _ O
Sets _ _ O
its _ _ O
own _ _ O
wait _ _ O
variable _ _ O
2 _ _ O
. _ _ O
Sends _ _ O
signal _ _ O
to _ _ O
child _ _ O
3 _ _ O
. _ _ O
Waits _ _ O
Parent _ _ O
0 _ _ O
3 _ _ O
. _ _ O
Child _ _ O
prints _ _ O
1 _ _ O
. _ _ O
Sends _ _ O
signal _ _ O
to _ _ O
parent _ _ O
2 _ _ O
. _ _ O
Sets _ _ O
its _ _ O
wait _ _ O
variable _ _ O
3 _ _ O
. _ _ O
Waits _ _ O
Let _ _ O
’s _ _ O
Mess _ _ O
Things _ _ O
Up _ _ O
! _ _ O
! _ _ O
4 _ _ O
. _ _ O
Parent _ _ O
prints _ _ O
1 _ _ O
. _ _ O
Sets _ _ O
its _ _ O
own _ _ O
wait _ _ O
variable _ _ O
2 _ _ O
. _ _ O
Sends _ _ O
signal _ _ O
to _ _ O
child _ _ O
3 _ _ O
. _ _ O
Waits _ _ O
5 _ _ O
. _ _ O
OH _ _ O
NO _ _ O
! _ _ O
! _ _ O
! _ _ O
28 _ _ O

The _ _ O
race _ _ O
is _ _ O
on _ _ O
! _ _ O
• _ _ O
When _ _ O
you _ _ O
have _ _ O
concurrent _ _ O
tasks _ _ O
, _ _ O
they _ _ O
may _ _ O
compete _ _ O
. _ _ O
• _ _ O
A _ _ O
bug _ _ O
in _ _ O
a _ _ O
concurrent _ _ O
program _ _ O
where _ _ O
the _ _ O
logic _ _ O
breaks _ _ O
if _ _ O
one _ _ O
process _ _ O
out-paces _ _ O
another _ _ O
is _ _ O
called _ _ O
a _ _ O
race _ _ O
condition _ _ O
. _ _ O
▪ _ _ O
That _ _ O
is _ _ O
, _ _ O
if _ _ O
the _ _ O
correctness _ _ O
requires _ _ O
a _ _ O
strict _ _ O
order _ _ O
, _ _ O
but _ _ O
that _ _ O
order _ _ O
is _ _ O
not _ _ O
guaranteed _ _ O
. _ _ O
• _ _ O
When _ _ O
you _ _ O
add _ _ O
synchronization _ _ O
you _ _ O
need _ _ O
to _ _ O
be _ _ O
careful _ _ O
that _ _ O
you _ _ O
ensure _ _ O
that _ _ O
each _ _ O
synchronized _ _ O
section _ _ O
( _ _ O
called _ _ O
a _ _ O
critical _ _ O
section _ _ O
) _ _ O
is _ _ O
logically _ _ O
sound _ _ O
. _ _ O
We _ _ O
know _ _ O
we _ _ O
wo _ _ O
n’t _ _ O
be _ _ O
interrupted _ _ O
between _ _ O
the _ _ O
while _ _ O
loop _ _ O
and _ _ O
the _ _ O
signal _ _ O
. _ _ O
( _ _ O
This _ _ O
is _ _ O
our _ _ O
critical _ _ O
section _ _ O
) _ _ O
29 _ _ O

Summary _ _ O
• _ _ O
Today _ _ O
we _ _ O
learned _ _ O
the _ _ O
birds _ _ O
and _ _ O
bees _ _ O
of _ _ O
programs _ _ O
. _ _ O
▪ _ _ O
They _ _ O
start _ _ O
as _ _ O
processes _ _ O
( _ _ O
technically _ _ O
children _ _ O
of _ _ O
a _ _ O
shell _ _ O
or _ _ O
some _ _ O
root _ _ O
process _ _ O
) _ _ O
▪ _ _ O
They _ _ O
can _ _ O
spawn _ _ O
child _ _ O
processes _ _ O
using _ _ O
▪ _ _ O
They _ _ O
can _ _ O
load _ _ O
executables _ _ O
over _ _ O
top _ _ O
of _ _ O
them _ _ O
using _ _ O
system _ _ O
calls _ _ O
▪ _ _ O
And _ _ O
if _ _ O
one _ _ O
process _ _ O
ends _ _ O
before _ _ O
the _ _ O
other _ _ O
, _ _ O
we _ _ O
either _ _ O
get _ _ O
zombies _ _ O
or _ _ O
orphans _ _ O
. _ _ O
• _ _ O
We _ _ O
also _ _ O
learned _ _ O
about _ _ O
inter-process _ _ O
communication _ _ O
in _ _ O
the _ _ O
form _ _ O
of _ _ O
signals _ _ O
. _ _ O
▪ _ _ O
These _ _ O
are _ _ O
tiny _ _ O
messages _ _ O
sent _ _ O
using _ _ O
the _ _ O
function _ _ O
; _ _ O
received _ _ O
via _ _ O
. _ _ O
▪ _ _ O
We _ _ O
can _ _ O
use _ _ O
them _ _ O
to _ _ O
synchronize _ _ O
events _ _ O
between _ _ O
processes _ _ O
. _ _ O
▪ _ _ O
However _ _ O
, _ _ O
if _ _ O
we _ _ O
are _ _ O
n’t _ _ O
careful _ _ O
, _ _ O
we _ _ O
may _ _ O
introduce _ _ O
a _ _ O
bug _ _ O
called _ _ O
a _ _ O
race _ _ O
condition _ _ O
. _ _ O
▪ _ _ O
This _ _ O
is _ _ O
when _ _ O
the _ _ O
program _ _ O
requires _ _ O
a _ _ O
logical _ _ O
order _ _ O
it _ _ O
can _ _ O
not _ _ O
guarantee _ _ O
. _ _ O
30 _ _ O



