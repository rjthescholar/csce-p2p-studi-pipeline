unlabeled|cs0449|lec15
-DOCSTART- -X- -X- O

15 _ _ O
Threads _ _ O
and _ _ O
Synchronization _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
Introduction _ _ O
to _ _ O
Systems _ _ O
Software _ _ O
Luis _ _ O
Oliveira _ _ O
( _ _ O
with _ _ O
content _ _ O
borrowed _ _ O
from _ _ O
wilkie _ _ O
and _ _ O
Vinicius _ _ O
Petrucci _ _ O
) _ _ O

Threads _ _ O
Strings _ _ O
? _ _ O
Threads _ _ O
? _ _ O
? _ _ O
What _ _ O
are _ _ O
we _ _ O
building _ _ O
… _ _ O
a _ _ O
loom _ _ O
? _ _ O
? _ _ O
? _ _ O
2 _ _ O

Our _ _ O
story _ _ O
so _ _ O
far _ _ O
… _ _ O
• _ _ O
We _ _ O
looked _ _ O
at _ _ O
how _ _ O
processes _ _ O
reproduce _ _ O
with _ _ O
▪ _ _ O
This _ _ O
gave _ _ O
us _ _ O
some _ _ O
type _ _ O
of _ _ O
concurrency _ _ O
. _ _ O
▪ _ _ O
It _ _ O
is _ _ O
process-level _ _ O
, _ _ O
so _ _ O
the _ _ O
OS _ _ O
is _ _ O
scheduling _ _ O
each _ _ O
task _ _ O
. _ _ O
• _ _ O
We _ _ O
saw _ _ O
some _ _ O
issues _ _ O
with _ _ O
concurrent _ _ O
programming _ _ O
. _ _ O
▪ _ _ O
Race _ _ O
conditions _ _ O
mean _ _ O
we _ _ O
have _ _ O
to _ _ O
much _ _ O
more _ _ O
carefully _ _ O
consider _ _ O
our _ _ O
code _ _ O
. _ _ O
• _ _ O
This _ _ O
time _ _ O
… _ _ O
▪ _ _ O
We _ _ O
will _ _ O
look _ _ O
at _ _ O
other _ _ O
forms _ _ O
of _ _ O
concurrency _ _ O
. _ _ O
▪ _ _ O
Some _ _ O
new _ _ O
methods _ _ O
of _ _ O
coordinating _ _ O
the _ _ O
different _ _ O
subprograms _ _ O
. _ _ O
▪ _ _ O
And _ _ O
some _ _ O
new _ _ O
… _ _ O
dreaded _ _ O
… _ _ O
types _ _ O
of _ _ O
concurrency _ _ O
bugs _ _ O
. _ _ O
3 _ _ O

Threads _ _ O
• _ _ O
Process-level _ _ O
concurrency _ _ O
with _ _ O
powerful _ _ O
, _ _ O
but _ _ O
inflexible _ _ O
. _ _ O
is _ _ O
▪ _ _ O
The _ _ O
OS _ _ O
schedules _ _ O
the _ _ O
task _ _ O
, _ _ O
incurring _ _ O
context _ _ O
switching _ _ O
overhead _ _ O
. _ _ O
▪ _ _ O
The _ _ O
process _ _ O
memory _ _ O
is _ _ O
copied _ _ O
making _ _ O
it _ _ O
hard _ _ O
to _ _ O
share _ _ O
data _ _ O
among _ _ O
tasks _ _ O
. _ _ O
• _ _ O
A _ _ O
thread _ _ O
is _ _ O
a _ _ O
concurrency _ _ O
primitive _ _ O
that _ _ O
is _ _ O
inner-process _ _ O
. _ _ O
▪ _ _ O
The _ _ O
program _ _ O
itself _ _ O
schedules _ _ O
the _ _ O
task _ _ O
as _ _ O
part _ _ O
of _ _ O
the _ _ O
same _ _ O
process _ _ O
. _ _ O
▪ _ _ O
Process _ _ O
memory _ _ O
, _ _ O
therefore _ _ O
, _ _ O
is _ _ O
shared _ _ O
across _ _ O
all _ _ O
threads _ _ O
. _ _ O
4 _ _ O

Recall _ _ O
our _ _ O
friend _ _ O
Dolly _ _ O
… _ _ O
• _ _ O
The _ _ O
system _ _ O
call _ _ O
in _ _ O
action _ _ O
: _ _ O
▪ _ _ O
Copies _ _ O
the _ _ O
memory _ _ O
layout _ _ O
. _ _ O
▪ _ _ O
Copies _ _ O
the _ _ O
process _ _ O
state _ _ O
. _ _ O
( _ _ O
but _ _ O
gives _ _ O
it _ _ O
a _ _ O
unique _ _ O
ID _ _ O
) _ _ O
A _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
– _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
Parent _ _ O
Child _ _ O
stack _ _ O
stack _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
CPU _ _ O
State _ _ O
A _ _ O
: _ _ O
Registers _ _ O
, _ _ O
CPU _ _ O
State _ _ O
B _ _ O
: _ _ O
Registers _ _ O
, _ _ O
PID _ _ O
: _ _ O
4356 _ _ O
PID _ _ O
: _ _ O
6567 _ _ O
Page _ _ O
Table _ _ O
A _ _ O
Page _ _ O
Table _ _ O
B _ _ O
B _ _ O
5 _ _ O

Dolly _ _ O
learned _ _ O
a _ _ O
new _ _ O
trick _ _ O
! _ _ O
• _ _ O
However _ _ O
, _ _ O
with _ _ O
threads _ _ O
… _ _ O
we _ _ O
retain _ _ O
much _ _ O
of _ _ O
the _ _ O
address _ _ O
space _ _ O
. _ _ O
▪ _ _ O
Threads _ _ O
share _ _ O
code _ _ O
/ _ _ O
data _ _ O
/ _ _ O
etc _ _ O
, _ _ O
however _ _ O
they _ _ O
have _ _ O
their _ _ O
own _ _ O
stack _ _ O
and _ _ O
CPU _ _ O
state _ _ O
. _ _ O
▪ _ _ O
They _ _ O
execute _ _ O
in _ _ O
parallel _ _ O
with _ _ O
one _ _ O
another _ _ O
interacting _ _ O
directly _ _ O
with _ _ O
the _ _ O
same _ _ O
data _ _ O
. _ _ O
Process _ _ O
.bss _ _ O
.data _ _ O
.text _ _ O
A _ _ O
stack _ _ O
stack _ _ O
stack _ _ O
CPU _ _ O
State _ _ O
A _ _ O
: _ _ O
Registers _ _ O
, _ _ O
CPU _ _ O
State _ _ O
B _ _ O
: _ _ O
Registers _ _ O
, _ _ O
CPU _ _ O
State _ _ O
B _ _ O
: _ _ O
Registers _ _ O
, _ _ O
PID _ _ O
: _ _ O
4356 _ _ O
Page _ _ O
Table _ _ O
A _ _ O
6 _ _ O

• _ _ O
The _ _ O
2011 _ _ O
amendment _ _ O
to _ _ O
the _ _ O
C _ _ O
standard _ _ O
( _ _ O
C11 _ _ O
) _ _ O
added _ _ O
a _ _ O
threading _ _ O
API _ _ O
. _ _ O
▪ _ _ O
However _ _ O
, _ _ O
we _ _ O
will _ _ O
still _ _ O
be _ _ O
looking _ _ O
at _ _ O
an _ _ O
older _ _ O
, _ _ O
more _ _ O
prevalent _ _ O
standard _ _ O
. _ _ O
• _ _ O
We _ _ O
will _ _ O
be _ _ O
reviewing _ _ O
the _ _ O
standard _ _ O
. _ _ O
▪ _ _ O
The _ _ O
C11 _ _ O
API _ _ O
is _ _ O
still _ _ O
very _ _ O
similar _ _ O
. _ _ O
▪ _ _ O
There _ _ O
are _ _ O
ports _ _ O
of _ _ O
the _ _ O
interface _ _ O
to _ _ O
many _ _ O
OSes _ _ O
. _ _ O
▪ _ _ O
Lots _ _ O
of _ _ O
threading _ _ O
APIs _ _ O
in _ _ O
other _ _ O
language _ _ O
emulate _ _ O
it _ _ O
. _ _ O
• _ _ O
Still _ _ O
very _ _ O
useful _ _ O
to _ _ O
learn _ _ O
! _ _ O
7 _ _ O

POSIX _ _ O
• _ _ O
The _ _ O
“ _ _ O
p _ _ O
” _ _ O
in _ _ O
pthread _ _ O
stands _ _ O
for _ _ O
the _ _ O
Portable _ _ O
Operating _ _ O
System _ _ O
Interface _ _ O
( _ _ O
POSIX _ _ O
) _ _ O
. _ _ O
▪ _ _ O
This _ _ O
is _ _ O
a _ _ O
standard _ _ O
for _ _ O
creating _ _ O
OS _ _ O
abstractions _ _ O
. _ _ O
▪ _ _ O
Intended _ _ O
to _ _ O
lower _ _ O
the _ _ O
burden _ _ O
of _ _ O
porting _ _ O
applications _ _ O
. _ _ O
• _ _ O
Most _ _ O
OSes _ _ O
conform _ _ O
to _ _ O
most _ _ O
POSIX _ _ O
standards _ _ O
. _ _ O
• _ _ O
However _ _ O
, _ _ O
very _ _ O
few _ _ O
OSes _ _ O
fully _ _ O
implement _ _ O
POSIX _ _ O
. _ _ O
• _ _ O
POSIX _ _ O
standardizes _ _ O
threads _ _ O
, _ _ O
but _ _ O
also _ _ O
process _ _ O
creation _ _ O
and _ _ O
the _ _ O
behavior _ _ O
of _ _ O
fork _ _ O
, _ _ O
file _ _ O
abstractions _ _ O
, _ _ O
and _ _ O
how _ _ O
data _ _ O
is _ _ O
shared _ _ O
among _ _ O
processes _ _ O
. _ _ O
▪ _ _ O
Many _ _ O
OS _ _ O
interfaces _ _ O
are _ _ O
POSIX _ _ O
interfaces _ _ O
and _ _ O
remain _ _ O
( _ _ O
mostly _ _ O
) _ _ O
true _ _ O
across _ _ O
different _ _ O
platforms _ _ O
. _ _ O
8 _ _ O

Creating _ _ O
… _ _ O
hmm _ _ O
… _ _ O
no _ _ O
… _ _ O
weaving _ _ O
a _ _ O
thread _ _ O
C _ _ O
( _ _ O
) _ _ O
• _ _ O
Here _ _ O
is _ _ O
a _ _ O
basic _ _ O
threaded _ _ O
program _ _ O
. _ _ O
▪ _ _ O
This _ _ O
function _ _ O
runs _ _ O
in _ _ O
a _ _ O
thread _ _ O
Holds _ _ O
the _ _ O
thread _ _ O
ID _ _ O
. _ _ O
The _ _ O
thread _ _ O
function _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
Function _ _ O
argument _ _ O
is _ _ O
within _ _ O
the _ _ O
main _ _ O
thread _ _ O
. _ _ O
• _ _ O
The _ _ O
function _ _ O
creates _ _ O
a _ _ O
second _ _ O
thread _ _ O
, _ _ O
which _ _ O
runs _ _ O
alongside _ _ O
the _ _ O
main _ _ O
thread _ _ O
. _ _ O
▪ _ _ O
The _ _ O
first _ _ O
argument _ _ O
is _ _ O
the _ _ O
address _ _ O
of _ _ O
a _ _ O
variable _ _ O
to _ _ O
hold _ _ O
the _ _ O
thread _ _ O
ID _ _ O
. _ _ O
▪ _ _ O
The _ _ O
NULL _ _ O
is _ _ O
where _ _ O
you _ _ O
can _ _ O
add _ _ O
some _ _ O
flags _ _ O
, _ _ O
but _ _ O
the _ _ O
defaults _ _ O
are _ _ O
OK _ _ O
. _ _ O
▪ _ _ O
The _ _ O
thread _ _ O
is _ _ O
the _ _ O
function _ _ O
to _ _ O
use _ _ O
. _ _ O
▪ _ _ O
The _ _ O
last _ _ O
argument _ _ O
is _ _ O
passed _ _ O
to _ _ O
that _ _ O
function _ _ O
and _ _ O
generally _ _ O
an _ _ O
address _ _ O
. _ _ O
9 _ _ O

The _ _ O
race _ _ O
to _ _ O
the _ _ O
finish _ _ O
. _ _ O
C _ _ O
( _ _ O
) _ _ O
This _ _ O
never _ _ O
happens _ _ O
! _ _ O
• _ _ O
However _ _ O
, _ _ O
when _ _ O
the _ _ O
process _ _ O
exits _ _ O
normally _ _ O
, _ _ O
all _ _ O
threads _ _ O
are _ _ O
also _ _ O
canceled _ _ O
, _ _ O
even _ _ O
if _ _ O
they _ _ O
have _ _ O
n’t _ _ O
completed _ _ O
. _ _ O
• _ _ O
In _ _ O
this _ _ O
run _ _ O
, _ _ O
the _ _ O
second _ _ O
thread _ _ O
never _ _ O
prints _ _ O
its _ _ O
message _ _ O
. _ _ O
In _ _ O
the _ _ O
end _ _ O
of _ _ O
the _ _ O
program _ _ O
, _ _ O
threads _ _ O
are _ _ O
also _ _ O
all _ _ O
exited _ _ O
, _ _ O
potentially _ _ O
prematurely _ _ O
. _ _ O
10 _ _ O

Being _ _ O
considerate _ _ O
C _ _ O
( _ _ O
) _ _ O
• _ _ O
The _ _ O
“ _ _ O
str _ _ O
” _ _ O
argument _ _ O
. _ _ O
waits _ _ O
for _ _ O
the _ _ O
given _ _ O
thread _ _ O
to _ _ O
exit _ _ O
by _ _ O
thread _ _ O
ID _ _ O
. _ _ O
▪ _ _ O
The _ _ O
NULL _ _ O
is _ _ O
, _ _ O
again _ _ O
, _ _ O
optional _ _ O
flags _ _ O
. _ _ O
• _ _ O
Here _ _ O
, _ _ O
the _ _ O
main _ _ O
thread _ _ O
waits _ _ O
until _ _ O
the _ _ O
thread _ _ O
function _ _ O
completes _ _ O
. _ _ O
▪ _ _ O
It _ _ O
prints _ _ O
out _ _ O
the _ _ O
string _ _ O
given _ _ O
by _ _ O
the _ _ O
argument _ _ O
. _ _ O
Waits _ _ O
… _ _ O
Guaranteed _ _ O
to _ _ O
happen _ _ O
only _ _ O
after _ _ O
completes _ _ O
. _ _ O
11 _ _ O

Sharing _ _ O
is _ _ O
caring _ _ O
C _ _ O
( _ _ O
) _ _ O
Thread _ _ O
function _ _ O
increments _ _ O
• _ _ O
Unlike _ _ O
process-level _ _ O
concurrency _ _ O
using _ _ O
, _ _ O
threads _ _ O
share _ _ O
memory _ _ O
. _ _ O
• _ _ O
Each _ _ O
thread _ _ O
, _ _ O
here _ _ O
, _ _ O
shares _ _ O
access _ _ O
to _ _ O
the _ _ O
same _ _ O
global _ _ O
variable _ _ O
. _ _ O
▪ _ _ O
When _ _ O
the _ _ O
main _ _ O
thread _ _ O
updates _ _ O
, _ _ O
the _ _ O
secondary _ _ O
thread _ _ O
sees _ _ O
that _ _ O
value _ _ O
. _ _ O
• _ _ O
Threads _ _ O
share _ _ O
the _ _ O
same _ _ O
virtual _ _ O
address _ _ O
space _ _ O
( _ _ O
and _ _ O
page _ _ O
table _ _ O
. _ _ O
) _ _ O
Main _ _ O
thread _ _ O
increments _ _ O
, _ _ O
too _ _ O
! _ _ O
▪ _ _ O
They _ _ O
only _ _ O
have _ _ O
their _ _ O
own _ _ O
stack _ _ O
and _ _ O
CPU _ _ O
state _ _ O
. _ _ O
12 _ _ O

A _ _ O
problem _ _ O
returns _ _ O
with _ _ O
a _ _ O
vengeance _ _ O
C _ _ O
( _ _ O
) _ _ O
Thread _ _ O
function _ _ O
might _ _ O
get _ _ O
interrupted _ _ O
before _ _ O
the _ _ O
print _ _ O
Then _ _ O
main _ _ O
thread _ _ O
increments _ _ O
! _ _ O
:( _ _ O
Race _ _ O
Condition _ _ O
13 _ _ O

What _ _ O
happened _ _ O
? _ _ O
? _ _ O
? _ _ O
C _ _ O
( _ _ O
) _ _ O
Thread _ _ O
function _ _ O
increments _ _ O
• _ _ O
Since _ _ O
the _ _ O
threads _ _ O
share _ _ O
memory _ _ O
, _ _ O
access _ _ O
to _ _ O
a _ _ O
variable _ _ O
, _ _ O
such _ _ O
as _ _ O
this _ _ O
, _ _ O
may _ _ O
require _ _ O
extra _ _ O
care _ _ O
. _ _ O
• _ _ O
When _ _ O
the _ _ O
main _ _ O
thread _ _ O
gets _ _ O
interrupted _ _ O
just _ _ O
as _ _ O
it _ _ O
was _ _ O
printing _ _ O
the _ _ O
value _ _ O
, _ _ O
the _ _ O
thread _ _ O
is _ _ O
scheduled _ _ O
. _ _ O
▪ _ _ O
The _ _ O
thread _ _ O
prints _ _ O
the _ _ O
value _ _ O
instead _ _ O
. _ _ O
▪ _ _ O
Then _ _ O
the _ _ O
main _ _ O
thread _ _ O
, _ _ O
when _ _ O
it _ _ O
continues _ _ O
, _ _ O
prints _ _ O
it _ _ O
again _ _ O
! _ _ O
Main _ _ O
thread _ _ O
increments _ _ O
, _ _ O
too _ _ O
! _ _ O
• _ _ O
If _ _ O
only _ _ O
we _ _ O
had _ _ O
a _ _ O
way _ _ O
to _ _ O
… _ _ O
align _ _ O
them _ _ O
in _ _ O
time _ _ O
… _ _ O
what _ _ O
’s _ _ O
the _ _ O
word _ _ O
… _ _ O
14 _ _ O

Synchronization _ _ O
You _ _ O
ca _ _ O
n’t _ _ O
touch _ _ O
this _ _ O
! _ _ O
Stop _ _ O
! _ _ O
Hammer _ _ O
time _ _ O
! _ _ O
15 _ _ O

A _ _ O
story _ _ O
about _ _ O
the _ _ O
railroad _ _ O
• _ _ O
Systems _ _ O
scientists _ _ O
have _ _ O
long _ _ O
been _ _ O
inspired _ _ O
by _ _ O
the _ _ O
real-world _ _ O
for _ _ O
insight _ _ O
on _ _ O
design _ _ O
. _ _ O
• _ _ O
The _ _ O
rail _ _ O
system _ _ O
requires _ _ O
a _ _ O
lot _ _ O
of _ _ O
attention _ _ O
to _ _ O
detail _ _ O
to _ _ O
provide _ _ O
: _ _ O
▪ _ _ O
Orderly _ _ O
and _ _ O
timely _ _ O
scheduling _ _ O
of _ _ O
trains _ _ O
. _ _ O
▪ _ _ O
Shared _ _ O
use _ _ O
of _ _ O
a _ _ O
single _ _ O
resource _ _ O
: _ _ O
rail _ _ O
. _ _ O
▪ _ _ O
Coordination _ _ O
with _ _ O
trains _ _ O
and _ _ O
competing _ _ O
interests _ _ O
. _ _ O
• _ _ O
In _ _ O
order _ _ O
to _ _ O
provide _ _ O
this _ _ O
, _ _ O
trains _ _ O
make _ _ O
use _ _ O
of _ _ O
signals _ _ O
and _ _ O
switching _ _ O
areas _ _ O
. _ _ O
▪ _ _ O
Trains _ _ O
wait _ _ O
while _ _ O
others _ _ O
pass _ _ O
, _ _ O
all _ _ O
agreeing _ _ O
on _ _ O
the _ _ O
nature _ _ O
of _ _ O
signals _ _ O
. _ _ O
▪ _ _ O
The _ _ O
signals _ _ O
are _ _ O
called _ _ O
semaphores _ _ O
. _ _ O
16 _ _ O
Photo _ _ O
by _ _ O
David _ _ O
Ingham _ _ O

The _ _ O
seminal _ _ O
semaphore _ _ O
• _ _ O
A _ _ O
semaphore _ _ O
is _ _ O
a _ _ O
special _ _ O
counter _ _ O
used _ _ O
for _ _ O
synchronization _ _ O
. _ _ O
▪ _ _ O
Invented _ _ O
by _ _ O
Dutch _ _ O
systems _ _ O
scientist _ _ O
Edsger _ _ O
Dijkstra _ _ O
in _ _ O
the _ _ O
early _ _ O
1960s _ _ O
. _ _ O
• _ _ O
The _ _ O
counter _ _ O
is _ _ O
a _ _ O
signed _ _ O
integer _ _ O
that _ _ O
often _ _ O
starts _ _ O
at _ _ O
zero _ _ O
or _ _ O
one _ _ O
. _ _ O
• _ _ O
Two _ _ O
defined _ _ O
operations _ _ O
: _ _ O
▪ _ _ O
Up _ _ O
( _ _ O
signal _ _ O
/ _ _ O
release _ _ O
) _ _ O
; _ _ O
increments _ _ O
counter _ _ O
. _ _ O
▪ _ _ O
Down _ _ O
( _ _ O
wait _ _ O
/ _ _ O
acquire _ _ O
) _ _ O
; _ _ O
decrements _ _ O
counter _ _ O
but _ _ O
waits _ _ O
if _ _ O
the _ _ O
counter _ _ O
is _ _ O
0 _ _ O
. _ _ O
• _ _ O
These _ _ O
operations _ _ O
often _ _ O
have _ _ O
different _ _ O
names _ _ O
or _ _ O
are _ _ O
abbreviated _ _ O
: _ _ O
▪ _ _ O
V _ _ O
( _ _ O
Based _ _ O
on _ _ O
Dutch _ _ O
vrijgave _ _ O
“ _ _ O
to _ _ O
release _ _ O
” _ _ O
) _ _ O
▪ _ _ O
P _ _ O
( _ _ O
Based _ _ O
on _ _ O
Dutch _ _ O
passering _ _ O
“ _ _ O
to _ _ O
pass _ _ O
” _ _ O
, _ _ O
based _ _ O
around _ _ O
railroad _ _ O
terminology _ _ O
) _ _ O
17 _ _ O

Semaphores _ _ O
to _ _ O
prevent _ _ O
the _ _ O
derailing _ _ O
C _ _ O
( _ _ O
) _ _ O
• _ _ O
creates _ _ O
a _ _ O
new _ _ O
semaphore _ _ O
. _ _ O
▪ _ _ O
The _ _ O
first _ _ O
argument _ _ O
is _ _ O
an _ _ O
address _ _ O
to _ _ O
a _ _ O
variable _ _ O
that _ _ O
will _ _ O
hold _ _ O
the _ _ O
semaphore _ _ O
data _ _ O
. _ _ O
▪ _ _ O
The _ _ O
second _ _ O
argument _ _ O
, _ _ O
when _ _ O
0 _ _ O
, _ _ O
means _ _ O
that _ _ O
other _ _ O
threads _ _ O
can _ _ O
see _ _ O
the _ _ O
semaphore _ _ O
. _ _ O
Non-zero _ _ O
means _ _ O
other _ _ O
threads _ _ O
can _ _ O
not _ _ O
interact _ _ O
with _ _ O
the _ _ O
semaphore _ _ O
, _ _ O
which _ _ O
is _ _ O
a _ _ O
bit _ _ O
more _ _ O
advanced _ _ O
. _ _ O
▪ _ _ O
The _ _ O
third _ _ O
argument _ _ O
is _ _ O
the _ _ O
initial _ _ O
value _ _ O
. _ _ O
Critical _ _ O
Section _ _ O
• _ _ O
Here _ _ O
it _ _ O
is _ _ O
1 _ _ O
. _ _ O
• _ _ O
decrements _ _ O
the _ _ O
counter _ _ O
. _ _ O
▪ _ _ O
Waits _ _ O
to _ _ O
decrement _ _ O
if _ _ O
the _ _ O
counter _ _ O
is _ _ O
0 _ _ O
. _ _ O
• _ _ O
increments _ _ O
the _ _ O
counter _ _ O
. _ _ O
▪ _ _ O
May _ _ O
release _ _ O
a _ _ O
thread _ _ O
waiting _ _ O
at _ _ O
18 _ _ O

Semaphores _ _ O
to _ _ O
prevent _ _ O
the _ _ O
derailing _ _ O
C _ _ O
( _ _ O
) _ _ O
• _ _ O
When _ _ O
both _ _ O
threads _ _ O
hit _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
, _ _ O
only _ _ O
one _ _ O
continues _ _ O
. _ _ O
• _ _ O
When _ _ O
one _ _ O
sets _ _ O
the _ _ O
lock _ _ O
; _ _ O
other _ _ O
waits _ _ O
. _ _ O
Critical _ _ O
Section _ _ O
▪ _ _ O
The _ _ O
other _ _ O
thread _ _ O
relies _ _ O
on _ _ O
the _ _ O
first _ _ O
to _ _ O
eventually _ _ O
release _ _ O
the _ _ O
lock _ _ O
using _ _ O
▪ _ _ O
When _ _ O
this _ _ O
happens _ _ O
, _ _ O
the _ _ O
other _ _ O
thread _ _ O
can _ _ O
go _ _ O
. _ _ O
• _ _ O
The _ _ O
lock _ _ O
/ _ _ O
unlock _ _ O
pattern _ _ O
creates _ _ O
a _ _ O
critical _ _ O
section _ _ O
, _ _ O
a _ _ O
piece _ _ O
of _ _ O
code _ _ O
that _ _ O
has _ _ O
the _ _ O
guarantee _ _ O
that _ _ O
only _ _ O
one _ _ O
task _ _ O
can _ _ O
enter _ _ O
at _ _ O
a _ _ O
time _ _ O
. _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
▪ _ _ O
Here _ _ O
, _ _ O
the _ _ O
counter _ _ O
is _ _ O
guaranteed _ _ O
to _ _ O
update _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
as _ _ O
it _ _ O
is _ _ O
printed _ _ O
. _ _ O
19 _ _ O

Semaphores _ _ O
to _ _ O
prevent _ _ O
the _ _ O
derailing _ _ O
C _ _ O
( _ _ O
) _ _ O
Critical _ _ O
Section _ _ O
20 _ _ O

Mutex _ _ O
… _ _ O
ew _ _ O
… _ _ O
do _ _ O
n’t _ _ O
like _ _ O
the _ _ O
sound _ _ O
of _ _ O
that _ _ O
• _ _ O
As _ _ O
you _ _ O
can _ _ O
see _ _ O
, _ _ O
there _ _ O
is _ _ O
a _ _ O
common _ _ O
case _ _ O
. _ _ O
▪ _ _ O
Simple _ _ O
critical _ _ O
sections _ _ O
just _ _ O
need _ _ O
a _ _ O
counter _ _ O
that _ _ O
covers _ _ O
0 _ _ O
and _ _ O
1 _ _ O
. _ _ O
• _ _ O
A _ _ O
mutex _ _ O
is _ _ O
a _ _ O
special _ _ O
Boolean _ _ O
used _ _ O
for _ _ O
synchronization _ _ O
. _ _ O
▪ _ _ O
It _ _ O
is _ _ O
short _ _ O
for _ _ O
“ _ _ O
mutual _ _ O
exclusion _ _ O
, _ _ O
” _ _ O
a _ _ O
term _ _ O
for _ _ O
when _ _ O
two _ _ O
things _ _ O
can _ _ O
only _ _ O
have _ _ O
one _ _ O
resource _ _ O
at _ _ O
a _ _ O
time _ _ O
. _ _ O
• _ _ O
There _ _ O
are _ _ O
two _ _ O
defined _ _ O
operations _ _ O
: _ _ O
▪ _ _ O
lock _ _ O
/ _ _ O
wait _ _ O
; _ _ O
only _ _ O
proceeds _ _ O
if _ _ O
the _ _ O
mutex _ _ O
is _ _ O
unlocked _ _ O
. _ _ O
▪ _ _ O
unlock _ _ O
/ _ _ O
release _ _ O
; _ _ O
unlocks _ _ O
the _ _ O
mutex _ _ O
. _ _ O
• _ _ O
A _ _ O
mutex _ _ O
can _ _ O
be _ _ O
created _ _ O
using _ _ O
a _ _ O
semaphore _ _ O
. _ _ O
▪ _ _ O
It _ _ O
provides _ _ O
a _ _ O
subset _ _ O
of _ _ O
the _ _ O
capabilities _ _ O
of _ _ O
the _ _ O
more _ _ O
general _ _ O
semaphore _ _ O
. _ _ O
21 _ _ O

A _ _ O
mutex _ _ O
to _ _ O
prevent _ _ O
the _ _ O
derailing _ _ O
C _ _ O
( _ _ O
) _ _ O
• _ _ O
Mutexes _ _ O
are _ _ O
useful _ _ O
for _ _ O
locking _ _ O
single _ _ O
resources _ _ O
. _ _ O
▪ _ _ O
It _ _ O
follows _ _ O
much _ _ O
the _ _ O
same _ _ O
pattern _ _ O
as _ _ O
semaphores _ _ O
, _ _ O
and _ _ O
perhaps _ _ O
easier _ _ O
to _ _ O
understand _ _ O
. _ _ O
Critical _ _ O
Section _ _ O
• _ _ O
• _ _ O
mutex _ _ O
similarly _ _ O
to _ _ O
creates _ _ O
the _ _ O
. _ _ O
and _ _ O
do _ _ O
the _ _ O
locking _ _ O
and _ _ O
unlocking _ _ O
, _ _ O
as _ _ O
expected _ _ O
. _ _ O
22 _ _ O

A _ _ O
mutex _ _ O
to _ _ O
prevent _ _ O
the _ _ O
derailing _ _ O
C _ _ O
( _ _ O
) _ _ O
Critical _ _ O
Section _ _ O
23 _ _ O

Strategies _ _ O
• _ _ O
Semaphores _ _ O
and _ _ O
mutexes _ _ O
are _ _ O
both _ _ O
primitives _ _ O
to _ _ O
aid _ _ O
in _ _ O
concurrent _ _ O
programming _ _ O
. _ _ O
• _ _ O
We _ _ O
saw _ _ O
, _ _ O
here _ _ O
, _ _ O
another _ _ O
example _ _ O
of _ _ O
a _ _ O
race _ _ O
condition _ _ O
, _ _ O
a _ _ O
concurrency _ _ O
bug _ _ O
where _ _ O
the _ _ O
absence _ _ O
of _ _ O
guaranteed _ _ O
order _ _ O
can _ _ O
result _ _ O
in _ _ O
incorrect _ _ O
behavior _ _ O
. _ _ O
▪ _ _ O
Namely _ _ O
, _ _ O
threads _ _ O
being _ _ O
interrupted _ _ O
in-between _ _ O
operations _ _ O
that _ _ O
need _ _ O
to _ _ O
happen _ _ O
together _ _ O
and _ _ O
racing _ _ O
another _ _ O
thread _ _ O
that _ _ O
will _ _ O
incorrectly _ _ O
use _ _ O
that _ _ O
intermediate _ _ O
value _ _ O
. _ _ O
• _ _ O
However _ _ O
, _ _ O
that _ _ O
’s _ _ O
not _ _ O
the _ _ O
only _ _ O
type _ _ O
of _ _ O
concurrency _ _ O
bug _ _ O
we _ _ O
can _ _ O
have _ _ O
! _ _ O
▪ _ _ O
Yay _ _ O
! _ _ O
 _ _ O
24 _ _ O

Parallel _ _ O
Pitfalls _ _ O
This _ _ O
is _ _ O
like _ _ O
that _ _ O
time _ _ O
when _ _ O
a _ _ O
bird _ _ O
pooped _ _ O
on _ _ O
me _ _ O
the _ _ O
same _ _ O
time _ _ O
I _ _ O
stepped _ _ O
in _ _ O
a _ _ O
very _ _ O
muddy _ _ O
puddle _ _ O
. _ _ O
25 _ _ O

Everybody _ _ O
loves _ _ O
resources _ _ O
Resource _ _ O
contention _ _ O
: _ _ O
• _ _ O
Printer _ _ O
needs _ _ O
paper _ _ O
… _ _ O
• _ _ O
You _ _ O
need _ _ O
to _ _ O
buy _ _ O
some _ _ O
paper _ _ O
… _ _ O
• _ _ O
You _ _ O
need _ _ O
to _ _ O
print _ _ O
an _ _ O
order _ _ O
form _ _ O
for _ _ O
paper _ _ O
… _ _ O
• _ _ O
Printer _ _ O
needs _ _ O
paper _ _ O
… _ _ O
26 _ _ O

Typically _ _ O
… _ _ O
• _ _ O
Metaphor _ _ O
: _ _ O
intersection _ _ O
. _ _ O
• _ _ O
The _ _ O
intersection _ _ O
is _ _ O
a _ _ O
shared _ _ O
resource _ _ O
, _ _ O
much _ _ O
like _ _ O
a _ _ O
device _ _ O
or _ _ O
the _ _ O
CPU _ _ O
. _ _ O
It _ _ O
is _ _ O
fine _ _ O
when _ _ O
two _ _ O
tasks _ _ O
can _ _ O
share _ _ O
a _ _ O
resource _ _ O
without _ _ O
conflict _ _ O
… _ _ O
they _ _ O
do _ _ O
not _ _ O
need _ _ O
to _ _ O
coordinate _ _ O
. _ _ O
• _ _ O
Multiplexing _ _ O
the _ _ O
intersection _ _ O
is _ _ O
important _ _ O
to _ _ O
avoid _ _ O
crashes _ _ O
. _ _ O
• _ _ O
When _ _ O
the _ _ O
streets _ _ O
are _ _ O
n’t _ _ O
busy _ _ O
, _ _ O
cars _ _ O
just _ _ O
make _ _ O
it _ _ O
safely _ _ O
across _ _ O
. _ _ O
27 _ _ O

Deadlock _ _ O
: _ _ O
The _ _ O
traffic _ _ O
jam _ _ O
( _ _ O
it _ _ O
’s _ _ O
not _ _ O
very _ _ O
delicious _ _ O
) _ _ O
• _ _ O
However _ _ O
, _ _ O
in _ _ O
some _ _ O
circumstances _ _ O
, _ _ O
several _ _ O
cars _ _ O
may _ _ O
reach _ _ O
the _ _ O
intersection _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
. _ _ O
Not _ _ O
fine _ _ O
if _ _ O
tasks _ _ O
need _ _ O
a _ _ O
common _ _ O
resource _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
without _ _ O
an _ _ O
agreed _ _ O
way _ _ O
to _ _ O
proceed _ _ O
. _ _ O
• _ _ O
If _ _ O
there _ _ O
is _ _ O
no _ _ O
previously _ _ O
defined _ _ O
way _ _ O
to _ _ O
handle _ _ O
this _ _ O
, _ _ O
they _ _ O
all _ _ O
wait _ _ O
for _ _ O
the _ _ O
others _ _ O
to _ _ O
get _ _ O
out _ _ O
of _ _ O
the _ _ O
way _ _ O
. _ _ O
▪ _ _ O
Forever _ _ O
. _ _ O
• _ _ O
Deadlock _ _ O
occurs _ _ O
when _ _ O
multiple _ _ O
tasks _ _ O
are _ _ O
waiting _ _ O
for _ _ O
each _ _ O
other _ _ O
, _ _ O
making _ _ O
no _ _ O
progress _ _ O
. _ _ O
28 _ _ O

Synchronization _ _ O
solves _ _ O
deadlock _ _ O
• _ _ O
Deadlock _ _ O
is _ _ O
a _ _ O
bug _ _ O
that _ _ O
needs _ _ O
extra _ _ O
consideration _ _ O
to _ _ O
avoid _ _ O
. _ _ O
• _ _ O
In _ _ O
this _ _ O
case _ _ O
, _ _ O
you _ _ O
need _ _ O
some _ _ O
method _ _ O
of _ _ O
making _ _ O
only _ _ O
some _ _ O
of _ _ O
the _ _ O
cars _ _ O
( _ _ O
tasks _ _ O
) _ _ O
wait _ _ O
, _ _ O
while _ _ O
letting _ _ O
others _ _ O
go _ _ O
. _ _ O
With _ _ O
synchronization _ _ O
, _ _ O
▪ _ _ O
Traffic _ _ O
light _ _ O
, _ _ O
perhaps _ _ O
tasks _ _ O
can _ _ O
agree _ _ O
which _ _ O
get _ _ O
to _ _ O
go _ _ O
next _ _ O
, _ _ O
and _ _ O
which _ _ O
have _ _ O
to _ _ O
wait _ _ O
. _ _ O
• _ _ O
Beyond _ _ O
defining _ _ O
order _ _ O
, _ _ O
synchronization _ _ O
helps _ _ O
avoid _ _ O
these _ _ O
types _ _ O
of _ _ O
logical _ _ O
errors _ _ O
. _ _ O
29 _ _ O

Starved _ _ O
for _ _ O
attention _ _ O
… _ _ O
• _ _ O
Another _ _ O
issue _ _ O
, _ _ O
related _ _ O
to _ _ O
deadlock _ _ O
, _ _ O
is _ _ O
starvation _ _ O
where _ _ O
the _ _ O
system _ _ O
makes _ _ O
progress _ _ O
but _ _ O
one _ _ O
task _ _ O
is _ _ O
perpetually _ _ O
delayed _ _ O
. _ _ O
• _ _ O
When _ _ O
some _ _ O
tasks _ _ O
have _ _ O
priority _ _ O
over _ _ O
resources _ _ O
, _ _ O
they _ _ O
may _ _ O
not _ _ O
give _ _ O
them _ _ O
up _ _ O
for _ _ O
other _ _ O
tasks _ _ O
. _ _ O
When _ _ O
nobody _ _ O
yields _ _ O
to _ _ O
a _ _ O
particular _ _ O
task _ _ O
▪ _ _ O
Those _ _ O
tasks _ _ O
wait _ _ O
forever _ _ O
. _ _ O
and _ _ O
gives _ _ O
up _ _ O
a _ _ O
shared _ _ O
resource _ _ O
, _ _ O
that _ _ O
task _ _ O
can _ _ O
not _ _ O
proceed _ _ O
! _ _ O
• _ _ O
Without _ _ O
a _ _ O
traffic _ _ O
light _ _ O
, _ _ O
you _ _ O
rely _ _ O
on _ _ O
people _ _ O
being _ _ O
nice _ _ O
. _ _ O
:( _ _ O
30 _ _ O

Starvation _ _ O
: _ _ O
a _ _ O
matter _ _ O
of _ _ O
fairness _ _ O
• _ _ O
This _ _ O
can _ _ O
happen _ _ O
in _ _ O
situations _ _ O
where _ _ O
“ _ _ O
fairness _ _ O
” _ _ O
scheduling _ _ O
goes _ _ O
awry _ _ O
. _ _ O
• _ _ O
If _ _ O
you _ _ O
have _ _ O
a _ _ O
webserver _ _ O
, _ _ O
the _ _ O
OS _ _ O
might _ _ O
schedule _ _ O
that _ _ O
process _ _ O
whenever _ _ O
there _ _ O
is _ _ O
some _ _ O
incoming _ _ O
requests _ _ O
. _ _ O
▪ _ _ O
What _ _ O
if _ _ O
you _ _ O
are _ _ O
getting _ _ O
a _ _ O
lot _ _ O
of _ _ O
traffic _ _ O
! _ _ O
▪ _ _ O
The _ _ O
OS _ _ O
might _ _ O
always _ _ O
schedule _ _ O
the _ _ O
webserver _ _ O
. _ _ O
▪ _ _ O
Important _ _ O
background _ _ O
tasks _ _ O
might _ _ O
not _ _ O
run _ _ O
! _ _ O
• _ _ O
Preventing _ _ O
starvation _ _ O
might _ _ O
be _ _ O
keeping _ _ O
track _ _ O
of _ _ O
how _ _ O
much _ _ O
time _ _ O
a _ _ O
process _ _ O
has _ _ O
a _ _ O
resource _ _ O
and _ _ O
how _ _ O
long _ _ O
it _ _ O
has _ _ O
waited _ _ O
in _ _ O
line _ _ O
. _ _ O
▪ _ _ O
Low-priority _ _ O
tasks _ _ O
start _ _ O
at _ _ O
the _ _ O
back _ _ O
of _ _ O
the _ _ O
line _ _ O
and _ _ O
move _ _ O
up _ _ O
the _ _ O
queue _ _ O
the _ _ O
longer _ _ O
they _ _ O
wait _ _ O
… _ _ O
eventually _ _ O
cutting _ _ O
in _ _ O
front _ _ O
of _ _ O
high-priority _ _ O
tasks _ _ O
that _ _ O
start _ _ O
in _ _ O
the _ _ O
front _ _ O
. _ _ O
• _ _ O
That _ _ O
’s _ _ O
just _ _ O
one _ _ O
idea _ _ O
. _ _ O
Scheduling _ _ O
resources _ _ O
is _ _ O
a _ _ O
very _ _ O
difficult _ _ O
problem _ _ O
! _ _ O
31 _ _ O

Livelock _ _ O
: _ _ O
The _ _ O
hallway _ _ O
problem _ _ O
• _ _ O
There _ _ O
is _ _ O
a _ _ O
narrow _ _ O
hallway _ _ O
. _ _ O
• _ _ O
Let _ _ O
’s _ _ O
say _ _ O
you _ _ O
have _ _ O
two _ _ O
very _ _ O
polite _ _ O
people _ _ O
. _ _ O
• _ _ O
They _ _ O
walk _ _ O
toward _ _ O
each _ _ O
other _ _ O
… _ _ O
and _ _ O
try _ _ O
very _ _ O
hard _ _ O
to _ _ O
get _ _ O
out _ _ O
of _ _ O
each _ _ O
other _ _ O
’s _ _ O
way _ _ O
. _ _ O
▪ _ _ O
They _ _ O
keep _ _ O
insisting _ _ O
the _ _ O
other _ _ O
go _ _ O
ahead _ _ O
of _ _ O
them _ _ O
. _ _ O
• _ _ O
This _ _ O
is _ _ O
livelock _ _ O
, _ _ O
where _ _ O
two _ _ O
tasks _ _ O
are _ _ O
actively _ _ O
signaling _ _ O
the _ _ O
other _ _ O
to _ _ O
go _ _ O
and _ _ O
making _ _ O
no _ _ O
progress _ _ O
. _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
32 _ _ O

Careful _ _ O
design _ _ O
works _ _ O
around _ _ O
livelock _ _ O
• _ _ O
Livelock _ _ O
can _ _ O
be _ _ O
solved _ _ O
using _ _ O
a _ _ O
tiebreaking _ _ O
scheme _ _ O
. _ _ O
▪ _ _ O
Just _ _ O
find _ _ O
something _ _ O
comparable _ _ O
and _ _ O
unique _ _ O
among _ _ O
the _ _ O
tasks _ _ O
to _ _ O
create _ _ O
an _ _ O
arbitrary _ _ O
priority _ _ O
. _ _ O
• _ _ O
All _ _ O
threads _ _ O
have _ _ O
IDs _ _ O
, _ _ O
so _ _ O
one _ _ O
easy _ _ O
strategy _ _ O
is _ _ O
to _ _ O
have _ _ O
the _ _ O
largest _ _ O
ID _ _ O
yield _ _ O
to _ _ O
the _ _ O
smaller _ _ O
. _ _ O
▪ _ _ O
This _ _ O
also _ _ O
helps _ _ O
starvation _ _ O
since _ _ O
livelock _ _ O
is _ _ O
starvation _ _ O
to _ _ O
the _ _ O
extreme _ _ O
: _ _ O
where _ _ O
everybody _ _ O
is _ _ O
starving _ _ O
. _ _ O
33 _ _ O

Deadlock _ _ O
vs. _ _ O
Livelock _ _ O
• _ _ O
In _ _ O
deadlock _ _ O
, _ _ O
all _ _ O
tasks _ _ O
are _ _ O
waiting _ _ O
for _ _ O
a _ _ O
signal _ _ O
that _ _ O
will _ _ O
never _ _ O
happen _ _ O
. _ _ O
▪ _ _ O
They _ _ O
are _ _ O
inactively _ _ O
achieving _ _ O
nothing _ _ O
. _ _ O
( _ _ O
“ _ _ O
ZZZZZZZZ _ _ O
” _ _ O
, _ _ O
“ _ _ O
ZZZZZZZZ _ _ O
” _ _ O
) _ _ O
• _ _ O
In _ _ O
contrast _ _ O
, _ _ O
livelock _ _ O
occurs _ _ O
when _ _ O
each _ _ O
task _ _ O
signals _ _ O
the _ _ O
other _ _ O
, _ _ O
and _ _ O
they _ _ O
respond _ _ O
by _ _ O
signaling _ _ O
back _ _ O
. _ _ O
( _ _ O
“ _ _ O
No _ _ O
, _ _ O
you _ _ O
. _ _ O
” _ _ O
“ _ _ O
No _ _ O
… _ _ O
you _ _ O
! _ _ O
” _ _ O
) _ _ O
▪ _ _ O
They _ _ O
are _ _ O
actively _ _ O
achieving _ _ O
nothing _ _ O
. _ _ O
• _ _ O
Detecting _ _ O
that _ _ O
your _ _ O
program _ _ O
has _ _ O
a _ _ O
deadlock _ _ O
or _ _ O
livelock _ _ O
is _ _ O
tricky _ _ O
. _ _ O
▪ _ _ O
When _ _ O
it _ _ O
does _ _ O
, _ _ O
it _ _ O
may _ _ O
only _ _ O
happen _ _ O
a _ _ O
small _ _ O
percentage _ _ O
of _ _ O
the _ _ O
time _ _ O
. _ _ O
▪ _ _ O
In _ _ O
your _ _ O
OS _ _ O
course _ _ O
, _ _ O
you _ _ O
will _ _ O
learn _ _ O
more _ _ O
about _ _ O
deadlock _ _ O
detection _ _ O
and _ _ O
resolution _ _ O
. _ _ O
34 _ _ O

Solving _ _ O
things _ _ O
• _ _ O
Proper _ _ O
synchronization _ _ O
and _ _ O
planning _ _ O
can _ _ O
solve _ _ O
all _ _ O
these _ _ O
issues _ _ O
. _ _ O
▪ _ _ O
Deadlock _ _ O
: _ _ O
Avoid _ _ O
patterns _ _ O
of _ _ O
critical _ _ O
sections _ _ O
that _ _ O
depend _ _ O
on _ _ O
each _ _ O
other _ _ O
. _ _ O
▪ _ _ O
Livelock _ _ O
: _ _ O
Establish _ _ O
a _ _ O
tie-breaking _ _ O
mechanism _ _ O
( _ _ O
thread _ _ O
with _ _ O
smallest _ _ O
ID _ _ O
goes _ _ O
first _ _ O
! _ _ O
) _ _ O
▪ _ _ O
Yet _ _ O
, _ _ O
it _ _ O
takes _ _ O
a _ _ O
good _ _ O
deal _ _ O
of _ _ O
programming _ _ O
experience _ _ O
to _ _ O
handle _ _ O
them _ _ O
. _ _ O
• _ _ O
The _ _ O
wide _ _ O
prevalence _ _ O
of _ _ O
multiprocessing _ _ O
and _ _ O
multithreading _ _ O
capable _ _ O
computers _ _ O
in _ _ O
the _ _ O
hands _ _ O
of _ _ O
average _ _ O
consumers _ _ O
is _ _ O
changing _ _ O
programming _ _ O
. _ _ O
▪ _ _ O
New _ _ O
( _ _ O
and _ _ O
old _ _ O
) _ _ O
languages _ _ O
are _ _ O
being _ _ O
pushed _ _ O
for _ _ O
their _ _ O
better _ _ O
handling _ _ O
of _ _ O
concurrency _ _ O
issues _ _ O
. _ _ O
▪ _ _ O
Best-practices _ _ O
and _ _ O
frameworks _ _ O
continue _ _ O
to _ _ O
adapt _ _ O
to _ _ O
avoid _ _ O
many _ _ O
of _ _ O
the _ _ O
pitfalls _ _ O
we _ _ O
have _ _ O
discussed _ _ O
today _ _ O
. _ _ O
▪ _ _ O
Pay _ _ O
attention _ _ O
in _ _ O
your _ _ O
compilers _ _ O
and _ _ O
OS _ _ O
course _ _ O
to _ _ O
hone _ _ O
your _ _ O
own _ _ O
skill _ _ O
! _ _ O
35 _ _ O

basic _ _ O
API _ _ O
summary _ _ O
• _ _ O
Thread _ _ O
creation _ _ O
▪ _ _ O
• _ _ O
Join _ _ O
threads _ _ O
( _ _ O
wait _ _ O
until _ _ O
complete _ _ O
) _ _ O
▪ _ _ O
• _ _ O
Getting _ _ O
thread _ _ O
ID _ _ O
Waits _ _ O
for _ _ O
the _ _ O
given _ _ O
thread _ _ O
to _ _ O
end _ _ O
. _ _ O
Returns _ _ O
the _ _ O
thread _ _ O
ID _ _ O
of _ _ O
the _ _ O
current _ _ O
thread _ _ O
. _ _ O
▪ _ _ O
• _ _ O
Thread _ _ O
destruction _ _ O
( _ _ O
explicit _ _ O
) _ _ O
▪ _ _ O
▪ _ _ O
Attempts _ _ O
to _ _ O
preemptively _ _ O
exit _ _ O
the _ _ O
given _ _ O
thread _ _ O
. _ _ O
Ends _ _ O
current _ _ O
thread _ _ O
and _ _ O
returns _ _ O
the _ _ O
provided _ _ O
value _ _ O
. _ _ O
36 _ _ O

synchronization _ _ O
API _ _ O
summary _ _ O
• _ _ O
Semaphores _ _ O
▪ _ _ O
▪ _ _ O
Creates _ _ O
a _ _ O
semaphore _ _ O
with _ _ O
the _ _ O
given _ _ O
initial _ _ O
value _ _ O
. _ _ O
( _ _ O
The _ _ O
second _ _ O
argument _ _ O
means _ _ O
it _ _ O
the _ _ O
semaphore _ _ O
data _ _ O
is _ _ O
in _ _ O
shared _ _ O
memory _ _ O
. _ _ O
If _ _ O
non-zero _ _ O
, _ _ O
it _ _ O
ca _ _ O
n’t _ _ O
be _ _ O
seen _ _ O
by _ _ O
other _ _ O
threads _ _ O
. _ _ O
) _ _ O
▪ _ _ O
▪ _ _ O
Decrements _ _ O
counter _ _ O
unless _ _ O
it _ _ O
is _ _ O
0 _ _ O
in _ _ O
which _ _ O
case _ _ O
it _ _ O
waits _ _ O
. _ _ O
Increments _ _ O
counter _ _ O
. _ _ O
• _ _ O
Mutexes _ _ O
▪ _ _ O
▪ _ _ O
▪ _ _ O
▪ _ _ O
Spring _ _ O
2019 _ _ O
/ _ _ O
2020 _ _ O
Creates _ _ O
a _ _ O
mutex _ _ O
( _ _ O
unlocked _ _ O
) _ _ O
. _ _ O
Waits _ _ O
until _ _ O
it _ _ O
can _ _ O
lock _ _ O
the _ _ O
mutex _ _ O
. _ _ O
Unlocks _ _ O
the _ _ O
mutex _ _ O
. _ _ O
37 _ _ O

Summary _ _ O
• _ _ O
Threads _ _ O
are _ _ O
a _ _ O
different _ _ O
way _ _ O
to _ _ O
provide _ _ O
concurrency _ _ O
in _ _ O
a _ _ O
program _ _ O
. _ _ O
▪ _ _ O
Unlike _ _ O
process-level _ _ O
concurrency _ _ O
, _ _ O
threads _ _ O
share _ _ O
memory _ _ O
within _ _ O
the _ _ O
process _ _ O
. _ _ O
• _ _ O
Synchronization _ _ O
primitives _ _ O
such _ _ O
as _ _ O
semaphores _ _ O
allow _ _ O
for _ _ O
creation _ _ O
of _ _ O
critical _ _ O
sections _ _ O
; _ _ O
necessary _ _ O
for _ _ O
correct _ _ O
concurrent _ _ O
code _ _ O
. _ _ O
• _ _ O
Incorrect _ _ O
code _ _ O
may _ _ O
result _ _ O
in _ _ O
a _ _ O
new _ _ O
set _ _ O
of _ _ O
logical _ _ O
errors _ _ O
. _ _ O
▪ _ _ O
Race _ _ O
conditions _ _ O
– _ _ O
When _ _ O
execution _ _ O
order _ _ O
stochastically _ _ O
results _ _ O
in _ _ O
wrong _ _ O
behavior _ _ O
. _ _ O
▪ _ _ O
Deadlock _ _ O
– _ _ O
When _ _ O
resources _ _ O
are _ _ O
contended _ _ O
so _ _ O
much _ _ O
the _ _ O
program _ _ O
freezes _ _ O
. _ _ O
▪ _ _ O
Starvation _ _ O
– _ _ O
When _ _ O
a _ _ O
resource _ _ O
is _ _ O
greedily _ _ O
kept _ _ O
by _ _ O
a _ _ O
task _ _ O
, _ _ O
certain _ _ O
tasks _ _ O
freeze _ _ O
. _ _ O
▪ _ _ O
Livelock _ _ O
– _ _ O
Starvation _ _ O
happens _ _ O
at _ _ O
every _ _ O
task _ _ O
… _ _ O
they _ _ O
all _ _ O
actively _ _ O
yield _ _ O
to _ _ O
each _ _ O
other _ _ O
. _ _ O
38 _ _ O



