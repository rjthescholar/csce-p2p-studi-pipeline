unlabeled|cs0449|lec16
-DOCSTART- -X- -X- O

Network _ _ O
Programming _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
0449 _ _ O
Introduction _ _ O
to _ _ O
Systems _ _ O
Software _ _ O
Luis _ _ O
Oliveira _ _ O
( _ _ O
with _ _ O
content _ _ O
borrowed _ _ O
from _ _ O
wilkie _ _ O
and _ _ O
Vinicius _ _ O
Petrucci _ _ O
) _ _ O

A _ _ O
Client-Server _ _ O
Transaction _ _ O
• _ _ O
Most _ _ O
network _ _ O
applications _ _ O
are _ _ O
based _ _ O
on _ _ O
the _ _ O
client-server _ _ O
model _ _ O
: _ _ O
• _ _ O
A _ _ O
server _ _ O
process _ _ O
and _ _ O
one _ _ O
or _ _ O
more _ _ O
client _ _ O
processes _ _ O
• _ _ O
Server _ _ O
manages _ _ O
some _ _ O
resource _ _ O
• _ _ O
Server _ _ O
provides _ _ O
service _ _ O
by _ _ O
manipulating _ _ O
resource _ _ O
for _ _ O
clients _ _ O
• _ _ O
Server _ _ O
activated _ _ O
by _ _ O
request _ _ O
from _ _ O
client _ _ O
( _ _ O
vending _ _ O
machine _ _ O
analogy _ _ O
) _ _ O
4 _ _ O
. _ _ O
Client _ _ O
handles _ _ O
response _ _ O
Client _ _ O
process _ _ O
1 _ _ O
. _ _ O
Client _ _ O
sends _ _ O
request _ _ O
3 _ _ O
. _ _ O
Server _ _ O
sends _ _ O
response _ _ O
Server _ _ O
process _ _ O
Resource _ _ O
2 _ _ O
. _ _ O
Server _ _ O
handles _ _ O
request _ _ O
Note _ _ O
: _ _ O
clients _ _ O
and _ _ O
servers _ _ O
are _ _ O
processes _ _ O
running _ _ O
on _ _ O
hosts _ _ O
( _ _ O
can _ _ O
be _ _ O
the _ _ O
same _ _ O
or _ _ O
different _ _ O
hosts _ _ O
) _ _ O
2 _ _ O

Hardware _ _ O
Organization _ _ O
of _ _ O
a _ _ O
Network _ _ O
Host _ _ O
CPU _ _ O
chip _ _ O
register _ _ O
file _ _ O
ALU _ _ O
system _ _ O
bus _ _ O
memory _ _ O
bus _ _ O
main _ _ O
memory _ _ O
I _ _ O
/ _ _ O
O _ _ O
bridge _ _ O
MI _ _ O
Expansion _ _ O
slots _ _ O
I _ _ O
/ _ _ O
O _ _ O
bus _ _ O
USB _ _ O
controller _ _ O
graphics _ _ O
adapter _ _ O
mouse _ _ O
keyboard _ _ O
monitor _ _ O
disk _ _ O
controller _ _ O
network _ _ O
adapter _ _ O
disk _ _ O
network _ _ O
3 _ _ O

Computer _ _ O
Networks _ _ O
• _ _ O
A _ _ O
network _ _ O
is _ _ O
a _ _ O
hierarchical _ _ O
system _ _ O
of _ _ O
boxes _ _ O
and _ _ O
wires _ _ O
organized _ _ O
by _ _ O
geographical _ _ O
proximity _ _ O
• _ _ O
SAN _ _ O
* _ _ O
( _ _ O
System _ _ O
Area _ _ O
Network _ _ O
) _ _ O
spans _ _ O
cluster _ _ O
or _ _ O
machine _ _ O
room _ _ O
• _ _ O
Switched _ _ O
Ethernet _ _ O
, _ _ O
Quadrics _ _ O
QSW _ _ O
, _ _ O
… _ _ O
• _ _ O
LAN _ _ O
( _ _ O
Local _ _ O
Area _ _ O
Network _ _ O
) _ _ O
spans _ _ O
a _ _ O
building _ _ O
or _ _ O
campus _ _ O
• _ _ O
Ethernet _ _ O
is _ _ O
most _ _ O
prominent _ _ O
example _ _ O
• _ _ O
WAN _ _ O
( _ _ O
Wide _ _ O
Area _ _ O
Network _ _ O
) _ _ O
spans _ _ O
country _ _ O
or _ _ O
world _ _ O
• _ _ O
Typically _ _ O
high-speed _ _ O
point-to-point _ _ O
phone _ _ O
lines _ _ O
• _ _ O
An _ _ O
internetwork _ _ O
( _ _ O
internet _ _ O
) _ _ O
is _ _ O
an _ _ O
interconnected _ _ O
set _ _ O
of _ _ O
networks _ _ O
• _ _ O
The _ _ O
Global _ _ O
IP _ _ O
Internet _ _ O
( _ _ O
uppercase _ _ O
“ _ _ O
I _ _ O
” _ _ O
) _ _ O
is _ _ O
the _ _ O
most _ _ O
famous _ _ O
example _ _ O
of _ _ O
an _ _ O
internet _ _ O
( _ _ O
lowercase _ _ O
“ _ _ O
i _ _ O
” _ _ O
) _ _ O
4 _ _ O
* _ _ O
Not _ _ O
to _ _ O
be _ _ O
confused _ _ O
with _ _ O
a _ _ O
Storage _ _ O
Area _ _ O
Network _ _ O

Logical _ _ O
Structure _ _ O
of _ _ O
an _ _ O
internet _ _ O
host _ _ O
router _ _ O
host _ _ O
router _ _ O
router _ _ O
router _ _ O
router _ _ O
router _ _ O
• _ _ O
Ad _ _ O
hoc _ _ O
interconnection _ _ O
of _ _ O
networks _ _ O
• _ _ O
No _ _ O
particular _ _ O
topology _ _ O
• _ _ O
Vastly _ _ O
different _ _ O
router _ _ O
& _ _ O
link _ _ O
capacities _ _ O
• _ _ O
Send _ _ O
packets _ _ O
from _ _ O
source _ _ O
to _ _ O
destination _ _ O
by _ _ O
hopping _ _ O
through _ _ O
networks _ _ O
• _ _ O
Router _ _ O
forms _ _ O
bridge _ _ O
from _ _ O
one _ _ O
network _ _ O
to _ _ O
another _ _ O
• _ _ O
Different _ _ O
packets _ _ O
may _ _ O
take _ _ O
different _ _ O
routes _ _ O
5 _ _ O

The _ _ O
Notion _ _ O
of _ _ O
an _ _ O
internet _ _ O
Protocol _ _ O
• _ _ O
How _ _ O
is _ _ O
it _ _ O
possible _ _ O
to _ _ O
send _ _ O
bits _ _ O
across _ _ O
incompatible _ _ O
LANs _ _ O
and _ _ O
WANs _ _ O
? _ _ O
• _ _ O
Solution _ _ O
: _ _ O
protocol _ _ O
software _ _ O
running _ _ O
on _ _ O
each _ _ O
host _ _ O
and _ _ O
router _ _ O
• _ _ O
Protocol _ _ O
is _ _ O
a _ _ O
set _ _ O
of _ _ O
rules _ _ O
that _ _ O
governs _ _ O
how _ _ O
hosts _ _ O
and _ _ O
routers _ _ O
should _ _ O
cooperate _ _ O
when _ _ O
they _ _ O
transfer _ _ O
data _ _ O
from _ _ O
network _ _ O
to _ _ O
network _ _ O
. _ _ O
• _ _ O
Smooths _ _ O
out _ _ O
the _ _ O
differences _ _ O
between _ _ O
the _ _ O
different _ _ O
networks _ _ O
6 _ _ O

What _ _ O
Does _ _ O
an _ _ O
internet _ _ O
Protocol _ _ O
Do _ _ O
? _ _ O
• _ _ O
Provides _ _ O
a _ _ O
naming _ _ O
scheme _ _ O
• _ _ O
An _ _ O
internet _ _ O
protocol _ _ O
defines _ _ O
a _ _ O
uniform _ _ O
format _ _ O
for _ _ O
host _ _ O
addresses _ _ O
• _ _ O
Each _ _ O
host _ _ O
( _ _ O
and _ _ O
router _ _ O
) _ _ O
is _ _ O
assigned _ _ O
at _ _ O
least _ _ O
one _ _ O
of _ _ O
these _ _ O
internet _ _ O
addresses _ _ O
that _ _ O
uniquely _ _ O
identifies _ _ O
it _ _ O
• _ _ O
Provides _ _ O
a _ _ O
delivery _ _ O
mechanism _ _ O
• _ _ O
An _ _ O
internet _ _ O
protocol _ _ O
defines _ _ O
a _ _ O
standard _ _ O
transfer _ _ O
unit _ _ O
( _ _ O
packet _ _ O
) _ _ O
• _ _ O
Packet _ _ O
consists _ _ O
of _ _ O
header _ _ O
and _ _ O
payload _ _ O
• _ _ O
Header _ _ O
: _ _ O
contains _ _ O
info _ _ O
such _ _ O
as _ _ O
packet _ _ O
size _ _ O
, _ _ O
source _ _ O
and _ _ O
destination _ _ O
addresses _ _ O
• _ _ O
Payload _ _ O
: _ _ O
contains _ _ O
data _ _ O
bits _ _ O
sent _ _ O
from _ _ O
source _ _ O
host _ _ O
7 _ _ O

Global _ _ O
IP _ _ O
Internet _ _ O
( _ _ O
upper _ _ O
case _ _ O
) _ _ O
• _ _ O
Most _ _ O
famous _ _ O
example _ _ O
of _ _ O
an _ _ O
internet _ _ O
• _ _ O
Based _ _ O
on _ _ O
the _ _ O
TCP _ _ O
/ _ _ O
IP _ _ O
protocol _ _ O
family _ _ O
• _ _ O
IP _ _ O
( _ _ O
Internet _ _ O
Protocol _ _ O
) _ _ O
• _ _ O
Provides _ _ O
basic _ _ O
naming _ _ O
scheme _ _ O
and _ _ O
unreliable _ _ O
delivery _ _ O
capability _ _ O
of _ _ O
packets _ _ O
( _ _ O
datagrams _ _ O
) _ _ O
from _ _ O
host-to-host _ _ O
• _ _ O
UDP _ _ O
( _ _ O
Unreliable _ _ O
Datagram _ _ O
Protocol _ _ O
) _ _ O
• _ _ O
Uses _ _ O
IP _ _ O
to _ _ O
provide _ _ O
unreliable _ _ O
datagram _ _ O
delivery _ _ O
from _ _ O
process-to-process _ _ O
• _ _ O
TCP _ _ O
( _ _ O
Transmission _ _ O
Control _ _ O
Protocol _ _ O
) _ _ O
• _ _ O
Uses _ _ O
IP _ _ O
to _ _ O
provide _ _ O
reliable _ _ O
byte _ _ O
streams _ _ O
from _ _ O
process-to-process _ _ O
over _ _ O
connections _ _ O
• _ _ O
Accessed _ _ O
via _ _ O
a _ _ O
mix _ _ O
of _ _ O
Unix _ _ O
file _ _ O
I _ _ O
/ _ _ O
O _ _ O
and _ _ O
functions _ _ O
from _ _ O
the _ _ O
sockets _ _ O
interface _ _ O
8 _ _ O

Hardware _ _ O
and _ _ O
Software _ _ O
Organization _ _ O
of _ _ O
an _ _ O
Internet _ _ O
Application _ _ O
Internet _ _ O
client _ _ O
host _ _ O
Internet _ _ O
server _ _ O
host _ _ O
Client _ _ O
User _ _ O
code _ _ O
Server _ _ O
TCP _ _ O
/ _ _ O
IP _ _ O
Kernel _ _ O
code _ _ O
TCP _ _ O
/ _ _ O
IP _ _ O
Network _ _ O
adapter _ _ O
Hardware _ _ O
and _ _ O
firmware _ _ O
Network _ _ O
adapter _ _ O
Sockets _ _ O
interface _ _ O
( _ _ O
system _ _ O
calls _ _ O
) _ _ O
Hardware _ _ O
interface _ _ O
( _ _ O
interrupts _ _ O
) _ _ O
Global _ _ O
IP _ _ O
Internet _ _ O
9 _ _ O

A _ _ O
Programmer _ _ O
’s _ _ O
View _ _ O
of _ _ O
the _ _ O
Internet _ _ O
1 _ _ O
. _ _ O
Hosts _ _ O
are _ _ O
mapped _ _ O
to _ _ O
a _ _ O
set _ _ O
of _ _ O
32-bit _ _ O
IP _ _ O
addresses _ _ O
• _ _ O
128.2.203.179 _ _ O
2 _ _ O
. _ _ O
The _ _ O
set _ _ O
of _ _ O
IP _ _ O
addresses _ _ O
is _ _ O
mapped _ _ O
to _ _ O
a _ _ O
set _ _ O
of _ _ O
identifiers _ _ O
called _ _ O
Internet _ _ O
domain _ _ O
names _ _ O
• _ _ O
136.142.156.73 _ _ O
is _ _ O
mapped _ _ O
to _ _ O
www.cs.pitt.edu _ _ O
3 _ _ O
. _ _ O
A _ _ O
process _ _ O
on _ _ O
one _ _ O
Internet _ _ O
host _ _ O
can _ _ O
communicate _ _ O
with _ _ O
a _ _ O
process _ _ O
on _ _ O
another _ _ O
Internet _ _ O
host _ _ O
over _ _ O
a _ _ O
connection _ _ O
10 _ _ O

( _ _ O
1 _ _ O
) _ _ O
IP _ _ O
Addresses _ _ O
• _ _ O
32-bit _ _ O
IP _ _ O
addresses _ _ O
are _ _ O
stored _ _ O
in _ _ O
an _ _ O
IP _ _ O
address _ _ O
struct _ _ O
• _ _ O
IP _ _ O
addresses _ _ O
are _ _ O
always _ _ O
stored _ _ O
in _ _ O
memory _ _ O
in _ _ O
network _ _ O
byte _ _ O
order _ _ O
( _ _ O
big-endian _ _ O
byte _ _ O
order _ _ O
) _ _ O
• _ _ O
True _ _ O
in _ _ O
general _ _ O
for _ _ O
any _ _ O
integer _ _ O
transferred _ _ O
in _ _ O
a _ _ O
packet _ _ O
header _ _ O
from _ _ O
one _ _ O
machine _ _ O
to _ _ O
another _ _ O
. _ _ O
• _ _ O
E.g. _ _ O
, _ _ O
the _ _ O
port _ _ O
number _ _ O
used _ _ O
to _ _ O
identify _ _ O
an _ _ O
Internet _ _ O
connection _ _ O
. _ _ O
/ _ _ O
* _ _ O
Internet _ _ O
address _ _ O
structure _ _ O
* _ _ O
/ _ _ O
struct _ _ O
in_addr _ _ O
{ _ _ O
uint32_t _ _ O
s_addr _ _ O
; _ _ O
/ _ _ O
* _ _ O
network _ _ O
byte _ _ O
order _ _ O
( _ _ O
big-endian _ _ O
) _ _ O
* _ _ O
/ _ _ O
} _ _ O
; _ _ O

Dotted _ _ O
Decimal _ _ O
Notation _ _ O
• _ _ O
By _ _ O
convention _ _ O
, _ _ O
each _ _ O
byte _ _ O
in _ _ O
a _ _ O
32-bit _ _ O
IP _ _ O
address _ _ O
is _ _ O
represented _ _ O
by _ _ O
its _ _ O
decimal _ _ O
value _ _ O
and _ _ O
separated _ _ O
by _ _ O
a _ _ O
period _ _ O
• _ _ O
IP _ _ O
address _ _ O
: _ _ O
0x8002C2F2 _ _ O
= _ _ O
128.2.194.242 _ _ O
• _ _ O
Use _ _ O
getaddrinfo _ _ O
and _ _ O
getnameinfo _ _ O
functions _ _ O
to _ _ O
convert _ _ O
between _ _ O
IP _ _ O
addresses _ _ O
and _ _ O
dotted _ _ O
decimal _ _ O
format _ _ O
. _ _ O

( _ _ O
2 _ _ O
) _ _ O
Internet _ _ O
Domain _ _ O
Names _ _ O
unnamed _ _ O
root _ _ O
.edu _ _ O
.gov _ _ O
mit _ _ O
pitt _ _ O
berkeley _ _ O
amazon _ _ O
Second-level _ _ O
domain _ _ O
names _ _ O
sci _ _ O
www _ _ O
Third-level _ _ O
domain _ _ O
names _ _ O
cs _ _ O
.com _ _ O
54.230.48.28 _ _ O
thoth _ _ O
First-level _ _ O
domain _ _ O
names _ _ O
.net _ _ O
www _ _ O
136.142.23.51 _ _ O
136.142.156.73 _ _ O

Domain _ _ O
Naming _ _ O
System _ _ O
( _ _ O
DNS _ _ O
) _ _ O
• _ _ O
The _ _ O
Internet _ _ O
maintains _ _ O
a _ _ O
mapping _ _ O
between _ _ O
IP _ _ O
addresses _ _ O
and _ _ O
domain _ _ O
names _ _ O
in _ _ O
a _ _ O
huge _ _ O
worldwide _ _ O
distributed _ _ O
database _ _ O
called _ _ O
DNS _ _ O
• _ _ O
Conceptually _ _ O
, _ _ O
programmers _ _ O
can _ _ O
view _ _ O
the _ _ O
DNS _ _ O
database _ _ O
as _ _ O
a _ _ O
collection _ _ O
of _ _ O
millions _ _ O
of _ _ O
host _ _ O
entries _ _ O
. _ _ O
• _ _ O
Each _ _ O
host _ _ O
entry _ _ O
defines _ _ O
the _ _ O
mapping _ _ O
between _ _ O
a _ _ O
set _ _ O
of _ _ O
domain _ _ O
names _ _ O
and _ _ O
IP _ _ O
addresses _ _ O
. _ _ O

Properties _ _ O
of _ _ O
DNS _ _ O
Mappings _ _ O
• _ _ O
Can _ _ O
explore _ _ O
properties _ _ O
of _ _ O
DNS _ _ O
mappings _ _ O
using _ _ O
nslookup _ _ O
• _ _ O
( _ _ O
Output _ _ O
edited _ _ O
for _ _ O
brevity _ _ O
) _ _ O
• _ _ O
Each _ _ O
host _ _ O
has _ _ O
a _ _ O
locally _ _ O
defined _ _ O
domain _ _ O
name _ _ O
localhost _ _ O
which _ _ O
always _ _ O
maps _ _ O
to _ _ O
the _ _ O
loopback _ _ O
address _ _ O
127.0.0.1 _ _ O
linux _ _ O
> _ _ O
nslookup _ _ O
localhost _ _ O
Address _ _ O
: _ _ O
127.0.0.1 _ _ O
• _ _ O
Use _ _ O
hostname _ _ O
to _ _ O
determine _ _ O
real _ _ O
domain _ _ O
name _ _ O
of _ _ O
local _ _ O
host _ _ O
: _ _ O
linux _ _ O
> _ _ O
hostname _ _ O
thoth.cs.pitt.edu _ _ O

Properties _ _ O
of _ _ O
DNS _ _ O
Mappings _ _ O
( _ _ O
cont _ _ O
) _ _ O
• _ _ O
Simple _ _ O
case _ _ O
: _ _ O
one-to-one _ _ O
mapping _ _ O
between _ _ O
domain _ _ O
name _ _ O
and _ _ O
IP _ _ O
address _ _ O
: _ _ O
linux _ _ O
> _ _ O
nslookup _ _ O
thoth.cs.cmu.edu _ _ O
Address _ _ O
: _ _ O
136.142.23.51 _ _ O
• _ _ O
Multiple _ _ O
domain _ _ O
names _ _ O
mapped _ _ O
to _ _ O
the _ _ O
same _ _ O
IP _ _ O
address _ _ O
: _ _ O
linux _ _ O
> _ _ O
nslookup _ _ O
cs.pitt.edu _ _ O
Address _ _ O
: _ _ O
136.142.156.73 _ _ O
linux _ _ O
> _ _ O
nslookup _ _ O
sci.pitt.edu _ _ O
Address _ _ O
: _ _ O
136.142.156.73 _ _ O

Properties _ _ O
of _ _ O
DNS _ _ O
Mappings _ _ O
( _ _ O
cont _ _ O
) _ _ O
• _ _ O
Multiple _ _ O
domain _ _ O
names _ _ O
mapped _ _ O
to _ _ O
multiple _ _ O
IP _ _ O
addresses _ _ O
: _ _ O
linux _ _ O
> _ _ O
nslookup _ _ O
www.twitter.com _ _ O
Address _ _ O
: _ _ O
104.244.42.65 _ _ O
Address _ _ O
: _ _ O
104.244.42.129 _ _ O
Address _ _ O
: _ _ O
104.244.42.193 _ _ O
Address _ _ O
: _ _ O
104.244.42.1 _ _ O
linux _ _ O
> _ _ O
nslookup _ _ O
www.twitter.com _ _ O
Address _ _ O
: _ _ O
104.244.42.129 _ _ O
Address _ _ O
: _ _ O
104.244.42.65 _ _ O
Address _ _ O
: _ _ O
104.244.42.193 _ _ O
Address _ _ O
: _ _ O
104.244.42.1 _ _ O
• _ _ O
Some _ _ O
valid _ _ O
domain _ _ O
names _ _ O
do _ _ O
n’t _ _ O
map _ _ O
to _ _ O
any _ _ O
IP _ _ O
address _ _ O
: _ _ O
linux _ _ O
> _ _ O
nslookup _ _ O
bla.cs.pitt.edu _ _ O
( _ _ O
No _ _ O
Address _ _ O
given _ _ O
) _ _ O

( _ _ O
3 _ _ O
) _ _ O
Internet _ _ O
Connections _ _ O
• _ _ O
Clients _ _ O
and _ _ O
servers _ _ O
communicate _ _ O
by _ _ O
sending _ _ O
streams _ _ O
of _ _ O
bytes _ _ O
over _ _ O
connections _ _ O
. _ _ O
Each _ _ O
connection _ _ O
is _ _ O
: _ _ O
• _ _ O
Point-to-point _ _ O
: _ _ O
connects _ _ O
a _ _ O
pair _ _ O
of _ _ O
processes _ _ O
. _ _ O
• _ _ O
Full-duplex _ _ O
: _ _ O
data _ _ O
can _ _ O
flow _ _ O
in _ _ O
both _ _ O
directions _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
, _ _ O
• _ _ O
Reliable _ _ O
: _ _ O
stream _ _ O
of _ _ O
bytes _ _ O
sent _ _ O
by _ _ O
the _ _ O
source _ _ O
is _ _ O
eventually _ _ O
received _ _ O
by _ _ O
the _ _ O
destination _ _ O
in _ _ O
the _ _ O
same _ _ O
order _ _ O
it _ _ O
was _ _ O
sent _ _ O
. _ _ O
• _ _ O
A _ _ O
socket _ _ O
is _ _ O
an _ _ O
endpoint _ _ O
of _ _ O
a _ _ O
connection _ _ O
• _ _ O
Socket _ _ O
address _ _ O
is _ _ O
an _ _ O
IPaddress _ _ O
: _ _ O
port _ _ O
pair _ _ O
• _ _ O
A _ _ O
port _ _ O
is _ _ O
a _ _ O
16-bit _ _ O
integer _ _ O
that _ _ O
identifies _ _ O
a _ _ O
process _ _ O
: _ _ O
• _ _ O
Ephemeral _ _ O
port _ _ O
: _ _ O
Assigned _ _ O
automatically _ _ O
by _ _ O
client _ _ O
kernel _ _ O
when _ _ O
client _ _ O
makes _ _ O
a _ _ O
connection _ _ O
request _ _ O
. _ _ O
• _ _ O
Well-known _ _ O
port _ _ O
: _ _ O
Associated _ _ O
with _ _ O
some _ _ O
service _ _ O
provided _ _ O
by _ _ O
a _ _ O
server _ _ O
( _ _ O
e.g. _ _ O
, _ _ O
port _ _ O
80 _ _ O
is _ _ O
associated _ _ O
with _ _ O
Web _ _ O
servers _ _ O
) _ _ O

Well-known _ _ O
Service _ _ O
Names _ _ O
and _ _ O
Ports _ _ O
• _ _ O
Popular _ _ O
services _ _ O
have _ _ O
permanently _ _ O
assigned _ _ O
well-known _ _ O
ports _ _ O
and _ _ O
corresponding _ _ O
well-known _ _ O
service _ _ O
names _ _ O
: _ _ O
• _ _ O
echo _ _ O
servers _ _ O
: _ _ O
echo _ _ O
7 _ _ O
• _ _ O
ftp _ _ O
servers _ _ O
: _ _ O
ftp _ _ O
21 _ _ O
• _ _ O
ssh _ _ O
servers _ _ O
: _ _ O
ssh _ _ O
22 _ _ O
• _ _ O
email _ _ O
servers _ _ O
: _ _ O
smtp _ _ O
25 _ _ O
• _ _ O
Web _ _ O
servers _ _ O
: _ _ O
http _ _ O
80 _ _ O
• _ _ O
Mappings _ _ O
between _ _ O
well-known _ _ O
ports _ _ O
and _ _ O
service _ _ O
names _ _ O
is _ _ O
contained _ _ O
in _ _ O
the _ _ O
file _ _ O
/etc _ _ O
/ _ _ O
services _ _ O
on _ _ O
each _ _ O
Linux _ _ O
machine _ _ O
. _ _ O

Anatomy _ _ O
of _ _ O
a _ _ O
Connection _ _ O
• _ _ O
A _ _ O
connection _ _ O
is _ _ O
uniquely _ _ O
identified _ _ O
by _ _ O
the _ _ O
socket _ _ O
addresses _ _ O
of _ _ O
its _ _ O
endpoints _ _ O
( _ _ O
socket _ _ O
pair _ _ O
) _ _ O
• _ _ O
( _ _ O
cliaddr _ _ O
: _ _ O
cliport _ _ O
, _ _ O
servaddr _ _ O
: _ _ O
servport _ _ O
) _ _ O
Client _ _ O
socket _ _ O
address _ _ O
128.2.194.242 _ _ O
: _ _ O
51213 _ _ O
Client _ _ O
Server _ _ O
socket _ _ O
address _ _ O
208.216.181.15 _ _ O
: _ _ O
80 _ _ O
Connection _ _ O
socket _ _ O
pair _ _ O
( _ _ O
128.2.194.242 _ _ O
: _ _ O
51213 _ _ O
, _ _ O
208.216.181.15 _ _ O
: _ _ O
80 _ _ O
) _ _ O
Client _ _ O
host _ _ O
address _ _ O
128.2.194.242 _ _ O
51213 _ _ O
is _ _ O
an _ _ O
ephemeral _ _ O
port _ _ O
allocated _ _ O
by _ _ O
the _ _ O
kernel _ _ O
Server _ _ O
( _ _ O
port _ _ O
80 _ _ O
) _ _ O
Server _ _ O
host _ _ O
address _ _ O
208.216.181.15 _ _ O
80 _ _ O
is _ _ O
a _ _ O
well-known _ _ O
port _ _ O
associated _ _ O
with _ _ O
Web _ _ O
servers _ _ O

Using _ _ O
Ports _ _ O
to _ _ O
Identify _ _ O
Services _ _ O
Server _ _ O
host _ _ O
128.2.194.242 _ _ O
Client _ _ O
host _ _ O
Client _ _ O
Service _ _ O
request _ _ O
for _ _ O
128.2.194.242 _ _ O
: _ _ O
80 _ _ O
( _ _ O
i.e. _ _ O
, _ _ O
the _ _ O
Web _ _ O
server _ _ O
) _ _ O
Web _ _ O
server _ _ O
( _ _ O
port _ _ O
80 _ _ O
) _ _ O
Kernel _ _ O
Echo _ _ O
server _ _ O
( _ _ O
port _ _ O
7 _ _ O
) _ _ O
Client _ _ O
Service _ _ O
request _ _ O
for _ _ O
128.2.194.242 _ _ O
: _ _ O
7 _ _ O
( _ _ O
i.e. _ _ O
, _ _ O
the _ _ O
echo _ _ O
server _ _ O
) _ _ O
Web _ _ O
server _ _ O
( _ _ O
port _ _ O
80 _ _ O
) _ _ O
Kernel _ _ O
Echo _ _ O
server _ _ O
( _ _ O
port _ _ O
7 _ _ O
) _ _ O

Sockets _ _ O
Interface _ _ O
• _ _ O
Set _ _ O
of _ _ O
system-level _ _ O
functions _ _ O
used _ _ O
in _ _ O
conjunction _ _ O
with _ _ O
Unix _ _ O
I _ _ O
/ _ _ O
O _ _ O
to _ _ O
build _ _ O
network _ _ O
applications _ _ O
. _ _ O
• _ _ O
Created _ _ O
in _ _ O
the _ _ O
early _ _ O
80 _ _ O
’s _ _ O
as _ _ O
part _ _ O
of _ _ O
the _ _ O
original _ _ O
Berkeley _ _ O
distribution _ _ O
of _ _ O
Unix _ _ O
that _ _ O
contained _ _ O
an _ _ O
early _ _ O
version _ _ O
of _ _ O
the _ _ O
Internet _ _ O
protocols _ _ O
. _ _ O
• _ _ O
Available _ _ O
on _ _ O
all _ _ O
modern _ _ O
systems _ _ O
• _ _ O
Unix _ _ O
variants _ _ O
, _ _ O
Windows _ _ O
, _ _ O
OS _ _ O
X _ _ O
, _ _ O
IOS _ _ O
, _ _ O
Android _ _ O
, _ _ O
ARM _ _ O

Sockets _ _ O
• _ _ O
What _ _ O
is _ _ O
a _ _ O
socket _ _ O
? _ _ O
• _ _ O
To _ _ O
the _ _ O
kernel _ _ O
, _ _ O
a _ _ O
socket _ _ O
is _ _ O
an _ _ O
endpoint _ _ O
of _ _ O
communication _ _ O
• _ _ O
To _ _ O
an _ _ O
application _ _ O
, _ _ O
a _ _ O
socket _ _ O
is _ _ O
a _ _ O
file _ _ O
descriptor _ _ O
that _ _ O
lets _ _ O
the _ _ O
application _ _ O
read _ _ O
/ _ _ O
write _ _ O
from _ _ O
/ _ _ O
to _ _ O
the _ _ O
network _ _ O
• _ _ O
Remember _ _ O
: _ _ O
All _ _ O
Unix _ _ O
I _ _ O
/ _ _ O
O _ _ O
devices _ _ O
, _ _ O
including _ _ O
networks _ _ O
, _ _ O
are _ _ O
modeled _ _ O
as _ _ O
files _ _ O
• _ _ O
Clients _ _ O
and _ _ O
servers _ _ O
communicate _ _ O
with _ _ O
each _ _ O
other _ _ O
by _ _ O
reading _ _ O
from _ _ O
and _ _ O
writing _ _ O
to _ _ O
socket _ _ O
descriptors _ _ O
Client _ _ O
clientfd _ _ O
Server _ _ O
serverfd _ _ O
• _ _ O
The _ _ O
main _ _ O
distinction _ _ O
between _ _ O
regular _ _ O
file _ _ O
I _ _ O
/ _ _ O
O _ _ O
and _ _ O
socket _ _ O
I _ _ O
/ _ _ O
O _ _ O
is _ _ O
how _ _ O
the _ _ O
application _ _ O
“ _ _ O
opens _ _ O
” _ _ O
the _ _ O
socket _ _ O
descriptors _ _ O

Socket _ _ O
Programming _ _ O
Example _ _ O
• _ _ O
Echo _ _ O
server _ _ O
and _ _ O
client _ _ O
• _ _ O
Server _ _ O
• _ _ O
Accepts _ _ O
connection _ _ O
request _ _ O
• _ _ O
Repeats _ _ O
back _ _ O
lines _ _ O
as _ _ O
they _ _ O
are _ _ O
typed _ _ O
• _ _ O
Client _ _ O
• _ _ O
Requests _ _ O
connection _ _ O
to _ _ O
server _ _ O
• _ _ O
Repeatedly _ _ O
: _ _ O
• _ _ O
Read _ _ O
line _ _ O
from _ _ O
terminal _ _ O
• _ _ O
Send _ _ O
to _ _ O
server _ _ O
• _ _ O
Read _ _ O
reply _ _ O
from _ _ O
server _ _ O
• _ _ O
Print _ _ O
line _ _ O
to _ _ O
terminal _ _ O

Echo _ _ O
Server _ _ O
/ _ _ O
Client _ _ O
Session _ _ O
Example _ _ O
Client _ _ O
thoth _ _ O
$ _ _ O
. _ _ O
/ _ _ O
echoclient _ _ O
This _ _ O
line _ _ O
is _ _ O
being _ _ O
echoed _ _ O
This _ _ O
line _ _ O
is _ _ O
being _ _ O
echoed _ _ O
This _ _ O
one _ _ O
is _ _ O
, _ _ O
too _ _ O
This _ _ O
one _ _ O
is _ _ O
, _ _ O
too _ _ O
^D _ _ O
( _ _ O
A _ _ O
) _ _ O
( _ _ O
B _ _ O
) _ _ O
( _ _ O
C _ _ O
) _ _ O
Server _ _ O
thoth _ _ O
$ _ _ O
. _ _ O
/ _ _ O
echoserver _ _ O
Server _ _ O
connected _ _ O
to _ _ O
client _ _ O
. _ _ O
server _ _ O
received _ _ O
26 _ _ O
bytes _ _ O
server _ _ O
received _ _ O
17 _ _ O
bytes _ _ O
( _ _ O
A _ _ O
) _ _ O
( _ _ O
B _ _ O
) _ _ O
( _ _ O
C _ _ O
) _ _ O

2 _ _ O
. _ _ O
Start _ _ O
client _ _ O
Client _ _ O
1 _ _ O
. _ _ O
Start _ _ O
server _ _ O
Server _ _ O
listen _ _ O
connect _ _ O
Connection _ _ O
request _ _ O
Client _ _ O
/ _ _ O
Server _ _ O
Session _ _ O
accept _ _ O
terminal _ _ O
read _ _ O
socket _ _ O
write _ _ O
socket _ _ O
read _ _ O
socket _ _ O
read _ _ O
terminal _ _ O
write _ _ O
socket _ _ O
write _ _ O
close _ _ O
4 _ _ O
. _ _ O
Disconnect _ _ O
client _ _ O
EOF _ _ O
Echo _ _ O
Server _ _ O
+ _ _ O
Client _ _ O
Structure _ _ O
Await _ _ O
connection _ _ O
request _ _ O
from _ _ O
client _ _ O
3 _ _ O
. _ _ O
Exchange _ _ O
data _ _ O
socket _ _ O
read _ _ O
5 _ _ O
. _ _ O
Drop _ _ O
client _ _ O
close _ _ O

2 _ _ O
. _ _ O
Start _ _ O
client _ _ O
Client _ _ O
1 _ _ O
. _ _ O
Start _ _ O
server _ _ O
Server _ _ O
listen _ _ O
connect _ _ O
Connection _ _ O
request _ _ O
Client _ _ O
/ _ _ O
Server _ _ O
Session _ _ O
accept _ _ O
fgets _ _ O
write _ _ O
read _ _ O
read _ _ O
fputs _ _ O
write _ _ O
close _ _ O
4 _ _ O
. _ _ O
Disconnect _ _ O
client _ _ O
EOF _ _ O
Echo _ _ O
Server _ _ O
+ _ _ O
Client _ _ O
Structure _ _ O
Await _ _ O
connection _ _ O
request _ _ O
from _ _ O
client _ _ O
3 _ _ O
. _ _ O
Exchange _ _ O
data _ _ O
read _ _ O
5 _ _ O
. _ _ O
Drop _ _ O
client _ _ O
close _ _ O

Echo _ _ O
Server _ _ O
: _ _ O
Main _ _ O
Routine _ _ O
C _ _ O
( _ _ O
gcc _ _ O
-o _ _ O
echoserver _ _ O
echoserver.c _ _ O
) _ _ O
/ _ _ O
/ _ _ O
Listen _ _ O
for _ _ O
connections _ _ O
result _ _ O
= _ _ O
listen _ _ O
( _ _ O
server_fd _ _ O
, _ _ O
3 _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
result _ _ O
< _ _ O
0 _ _ O
) _ _ O
{ _ _ O
perror _ _ O
( _ _ O
"listen _ _ O
" _ _ O
) _ _ O
; _ _ O
exit _ _ O
( _ _ O
EXIT_FAILURE _ _ O
) _ _ O
; _ _ O
} _ _ O
# _ _ O
include _ _ O
< _ _ O
stdio.h _ _ O
> _ _ O
/ _ _ O
/ _ _ O
fgets _ _ O
, _ _ O
etc _ _ O
# _ _ O
include _ _ O
< _ _ O
sys _ _ O
/ _ _ O
socket.h _ _ O
> _ _ O
/ _ _ O
/ _ _ O
socket _ _ O
API _ _ O
# _ _ O
include _ _ O
< _ _ O
arpa _ _ O
/ _ _ O
inet.h _ _ O
> _ _ O
/ _ _ O
/ _ _ O
inet _ _ O
functions _ _ O
, _ _ O
htons _ _ O
# _ _ O
include _ _ O
< _ _ O
unistd.h _ _ O
> _ _ O
/ _ _ O
/ _ _ O
read _ _ O
/ _ _ O
close _ _ O
system _ _ O
calls _ _ O
# _ _ O
include _ _ O
< _ _ O
stdlib.h _ _ O
> _ _ O
/ _ _ O
/ _ _ O
exit _ _ O
# _ _ O
include _ _ O
< _ _ O
string.h _ _ O
> _ _ O
/ _ _ O
/ _ _ O
strlen _ _ O
# _ _ O
define _ _ O
PORT _ _ O
9997 _ _ O
/ _ _ O
/ _ _ O
Listen _ _ O
will _ _ O
return _ _ O
when _ _ O
a _ _ O
connection _ _ O
is _ _ O
requested _ _ O
... _ _ O
/ _ _ O
/ _ _ O
Accept _ _ O
that _ _ O
connection _ _ O
int _ _ O
addrlen _ _ O
= _ _ O
sizeof _ _ O
( _ _ O
address _ _ O
) _ _ O
; _ _ O
int _ _ O
new_socket _ _ O
= _ _ O
accept _ _ O
( _ _ O
server_fd _ _ O
, _ _ O
( _ _ O
struct _ _ O
sockaddr _ _ O
* _ _ O
) _ _ O
& _ _ O
address _ _ O
, _ _ O
( _ _ O
socklen_t* _ _ O
) _ _ O
& _ _ O
addrlen _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
new_socket _ _ O
< _ _ O
0 _ _ O
) _ _ O
{ _ _ O
perror _ _ O
( _ _ O
"accept _ _ O
" _ _ O
) _ _ O
; _ _ O
exit _ _ O
( _ _ O
EXIT_FAILURE _ _ O
) _ _ O
; _ _ O
} _ _ O
int _ _ O
main _ _ O
( _ _ O
void _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
Creating _ _ O
socket _ _ O
file _ _ O
descriptor _ _ O
( _ _ O
using _ _ O
internet _ _ O
protocol _ _ O
) _ _ O
int _ _ O
server_fd _ _ O
= _ _ O
socket _ _ O
( _ _ O
AF_INET _ _ O
, _ _ O
SOCK_STREAM _ _ O
, _ _ O
0 _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
server_fd _ _ O
= _ _ O
= _ _ O
0 _ _ O
) _ _ O
{ _ _ O
perror _ _ O
( _ _ O
"socket _ _ O
failed _ _ O
" _ _ O
) _ _ O
; _ _ O
We _ _ O
create _ _ O
a _ _ O
socket _ _ O
. _ _ O
exit _ _ O
( _ _ O
EXIT_FAILURE _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
/ _ _ O
We _ _ O
want _ _ O
to _ _ O
use _ _ O
the _ _ O
internet _ _ O
protocol _ _ O
struct _ _ O
sockaddr_in _ _ O
address _ _ O
; _ _ O
address.sin_family _ _ O
= _ _ O
AF_INET _ _ O
; _ _ O
address.sin_addr.s_addr _ _ O
= _ _ O
INADDR_ANY _ _ O
; _ _ O
address.sin_port _ _ O
= _ _ O
htons _ _ O
( _ _ O
PORT _ _ O
) _ _ O
; _ _ O
We _ _ O
wait _ _ O
until _ _ O
somebody _ _ O
requests _ _ O
a _ _ O
connection _ _ O
. _ _ O
We _ _ O
accept _ _ O
that _ _ O
connection _ _ O
. _ _ O
printf _ _ O
( _ _ O
"Server _ _ O
connected _ _ O
to _ _ O
client.\n _ _ O
" _ _ O
) _ _ O
; _ _ O
char _ _ O
buffer _ _ O
[ _ _ O
1024 _ _ O
] _ _ O
= _ _ O
{ _ _ O
0 _ _ O
} _ _ O
; _ _ O
int _ _ O
count _ _ O
= _ _ O
0 _ _ O
; _ _ O
do _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
Read _ _ O
data _ _ O
( _ _ O
it _ _ O
waits _ _ O
until _ _ O
data _ _ O
is _ _ O
available _ _ O
) _ _ O
count _ _ O
= _ _ O
read _ _ O
( _ _ O
new_socket _ _ O
, _ _ O
buffer _ _ O
, _ _ O
1024 _ _ O
) _ _ O
; _ _ O
printf _ _ O
( _ _ O
"Server _ _ O
received _ _ O
% _ _ O
d _ _ O
bytes.\n _ _ O
" _ _ O
, _ _ O
count _ _ O
) _ _ O
; _ _ O
buffer _ _ O
[ _ _ O
count _ _ O
] _ _ O
= _ _ O
' _ _ O
\0 _ _ O
' _ _ O
; _ _ O
write _ _ O
( _ _ O
new_socket _ _ O
, _ _ O
buffer _ _ O
, _ _ O
strlen _ _ O
( _ _ O
buffer _ _ O
) _ _ O
) _ _ O
; _ _ O
} _ _ O
while _ _ O
( _ _ O
count _ _ O
) _ _ O
; _ _ O
We _ _ O
define _ _ O
what _ _ O
port _ _ O
and _ _ O
protocol _ _ O
we _ _ O
want _ _ O
/ _ _ O
/ _ _ O
Bind _ _ O
socket _ _ O
to _ _ O
the _ _ O
port _ _ O
( _ _ O
so _ _ O
it _ _ O
listens _ _ O
to _ _ O
that _ _ O
port _ _ O
) _ _ O
int _ _ O
result _ _ O
= _ _ O
bind _ _ O
( _ _ O
server_fd _ _ O
, _ _ O
( _ _ O
struct _ _ O
sockaddr _ _ O
* _ _ O
) _ _ O
& _ _ O
address _ _ O
, _ _ O
sizeof _ _ O
( _ _ O
address _ _ O
) _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
result _ _ O
< _ _ O
0 _ _ O
) _ _ O
{ _ _ O
perror _ _ O
( _ _ O
"bind _ _ O
failed _ _ O
" _ _ O
) _ _ O
; _ _ O
We _ _ O
bind _ _ O
ourselves _ _ O
to _ _ O
that _ _ O
port _ _ O
. _ _ O
exit _ _ O
( _ _ O
EXIT_FAILURE _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
close _ _ O
( _ _ O
new_socket _ _ O
) _ _ O
; _ _ O
close _ _ O
( _ _ O
server_fd _ _ O
) _ _ O
; _ _ O
return _ _ O
0 _ _ O
; _ _ O
We _ _ O
wait _ _ O
until _ _ O
data _ _ O
arrives _ _ O
and _ _ O
read _ _ O
it _ _ O
. _ _ O
We _ _ O
write _ _ O
it _ _ O
back _ _ O
out _ _ O
. _ _ O
Stopping _ _ O
our _ _ O
loop _ _ O
when _ _ O
nothing _ _ O
was _ _ O
read _ _ O
. _ _ O
We _ _ O
close _ _ O
all _ _ O
of _ _ O
our _ _ O
connections _ _ O
. _ _ O

1 _ _ O
. _ _ O
Start _ _ O
server _ _ O
Server _ _ O
2 _ _ O
. _ _ O
Start _ _ O
client _ _ O
Client _ _ O
listen _ _ O
connect _ _ O
Connection _ _ O
request _ _ O
Client _ _ O
/ _ _ O
Server _ _ O
Session _ _ O
accept _ _ O
fgets _ _ O
write _ _ O
read _ _ O
read _ _ O
fputs _ _ O
write _ _ O
close _ _ O
EOF _ _ O
read _ _ O
close _ _ O
Echo _ _ O
Server _ _ O
+ _ _ O
Client _ _ O
Structure _ _ O
Await _ _ O
connection _ _ O
request _ _ O
from _ _ O
client _ _ O
3 _ _ O
. _ _ O
Exchange _ _ O
data _ _ O

Echo _ _ O
Client _ _ O
: _ _ O
Main _ _ O
Routine _ _ O
C _ _ O
( _ _ O
gcc _ _ O
-o _ _ O
echoclient _ _ O
echoclient.c _ _ O
) _ _ O
int _ _ O
result _ _ O
= _ _ O
connect _ _ O
( _ _ O
sock _ _ O
, _ _ O
( _ _ O
struct _ _ O
sockaddr _ _ O
* _ _ O
) _ _ O
& _ _ O
serv_addr _ _ O
, _ _ O
sizeof _ _ O
( _ _ O
serv_addr _ _ O
) _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
result _ _ O
< _ _ O
0 _ _ O
) _ _ O
{ _ _ O
printf _ _ O
( _ _ O
"\nConnection _ _ O
Failed _ _ O
\n _ _ O
" _ _ O
) _ _ O
; _ _ O
return _ _ O
-1 _ _ O
; _ _ O
If _ _ O
we _ _ O
got _ _ O
here _ _ O
, _ _ O
the _ _ O
server _ _ O
} _ _ O
accepted _ _ O
our _ _ O
connection _ _ O
! _ _ O
# _ _ O
include _ _ O
< _ _ O
stdio.h _ _ O
> _ _ O
/ _ _ O
/ _ _ O
fgets _ _ O
, _ _ O
etc _ _ O
# _ _ O
include _ _ O
< _ _ O
sys _ _ O
/ _ _ O
socket.h _ _ O
> _ _ O
/ _ _ O
/ _ _ O
socket _ _ O
API _ _ O
# _ _ O
include _ _ O
< _ _ O
arpa _ _ O
/ _ _ O
inet.h _ _ O
> _ _ O
/ _ _ O
/ _ _ O
inet _ _ O
functions _ _ O
, _ _ O
htons _ _ O
# _ _ O
include _ _ O
< _ _ O
unistd.h _ _ O
> _ _ O
/ _ _ O
/ _ _ O
read _ _ O
/ _ _ O
close _ _ O
system _ _ O
calls _ _ O
# _ _ O
include _ _ O
< _ _ O
string.h _ _ O
> _ _ O
/ _ _ O
/ _ _ O
strlen _ _ O
# _ _ O
define _ _ O
PORT _ _ O
9997 _ _ O
int _ _ O
main _ _ O
( _ _ O
void _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
Creating _ _ O
socket _ _ O
file _ _ O
descriptor _ _ O
( _ _ O
using _ _ O
internet _ _ O
protocol _ _ O
) _ _ O
int _ _ O
sock _ _ O
= _ _ O
socket _ _ O
( _ _ O
AF_INET _ _ O
, _ _ O
SOCK_STREAM _ _ O
, _ _ O
0 _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
sock _ _ O
< _ _ O
0 _ _ O
) _ _ O
{ _ _ O
We _ _ O
create _ _ O
a _ _ O
socket _ _ O
. _ _ O
printf _ _ O
( _ _ O
"\n _ _ O
Socket _ _ O
creation _ _ O
error _ _ O
\n _ _ O
" _ _ O
) _ _ O
; _ _ O
return _ _ O
-1 _ _ O
; _ _ O
} _ _ O
Using _ _ O
the _ _ O
Internet _ _ O
protocol _ _ O
. _ _ O
struct _ _ O
sockaddr_in _ _ O
serv_addr _ _ O
; _ _ O
serv_addr.sin_family _ _ O
= _ _ O
AF_INET _ _ O
; _ _ O
serv_addr.sin_port _ _ O
= _ _ O
htons _ _ O
( _ _ O
PORT _ _ O
) _ _ O
; _ _ O
Actually _ _ O
request _ _ O
a _ _ O
connection _ _ O
. _ _ O
char _ _ O
buffer _ _ O
[ _ _ O
1024 _ _ O
] _ _ O
= _ _ O
{ _ _ O
0 _ _ O
} _ _ O
; _ _ O
int _ _ O
count _ _ O
= _ _ O
0 _ _ O
; _ _ O
This _ _ O
loop _ _ O
reads _ _ O
from _ _ O
stdin _ _ O
( _ _ O
user _ _ O
input _ _ O
) _ _ O
do _ _ O
{ _ _ O
if _ _ O
( _ _ O
fgets _ _ O
( _ _ O
buffer _ _ O
, _ _ O
1024 _ _ O
, _ _ O
stdin _ _ O
) _ _ O
= _ _ O
= _ _ O
NULL _ _ O
) _ _ O
{ _ _ O
break _ _ O
; _ _ O
/ _ _ O
/ _ _ O
Exit _ _ O
when _ _ O
line _ _ O
is _ _ O
empty _ _ O
( _ _ O
CTRL+D _ _ O
is _ _ O
pressed _ _ O
) _ _ O
} _ _ O
We _ _ O
write _ _ O
everything _ _ O
to _ _ O
the _ _ O
server _ _ O
! _ _ O
write _ _ O
( _ _ O
sock _ _ O
, _ _ O
buffer _ _ O
, _ _ O
strlen _ _ O
( _ _ O
buffer _ _ O
) _ _ O
) _ _ O
; _ _ O
count _ _ O
= _ _ O
read _ _ O
( _ _ O
sock _ _ O
, _ _ O
buffer _ _ O
, _ _ O
1023 _ _ O
) _ _ O
; _ _ O
buffer _ _ O
[ _ _ O
count _ _ O
] _ _ O
= _ _ O
' _ _ O
\0 _ _ O
' _ _ O
; _ _ O
And _ _ O
print _ _ O
out _ _ O
everything _ _ O
the _ _ O
fputs _ _ O
( _ _ O
buffer _ _ O
, _ _ O
stdout _ _ O
) _ _ O
; _ _ O
server _ _ O
sends _ _ O
us _ _ O
. _ _ O
} _ _ O
while _ _ O
( _ _ O
count _ _ O
) _ _ O
; _ _ O
Connecting _ _ O
to _ _ O
localhost _ _ O
/ _ _ O
/ _ _ O
Convert _ _ O
IPv4 _ _ O
and _ _ O
IPv6 _ _ O
addresses _ _ O
from _ _ O
text _ _ O
to _ _ O
binary _ _ O
form _ _ O
if _ _ O
( _ _ O
inet_pton _ _ O
( _ _ O
AF_INET _ _ O
, _ _ O
" _ _ O
127.0.0.1 _ _ O
" _ _ O
, _ _ O
& _ _ O
serv_addr.sin_addr _ _ O
) _ _ O
< _ _ O
=0 _ _ O
) _ _ O
{ _ _ O
printf _ _ O
( _ _ O
"\nInvalid _ _ O
address _ _ O
/ _ _ O
Address _ _ O
not _ _ O
supported _ _ O
\n _ _ O
" _ _ O
) _ _ O
; _ _ O
return _ _ O
-1 _ _ O
; _ _ O
} _ _ O
close _ _ O
( _ _ O
sock _ _ O
) _ _ O
; _ _ O
return _ _ O
0 _ _ O
; _ _ O
} _ _ O
We _ _ O
clean _ _ O
up _ _ O
when _ _ O
the _ _ O
loop _ _ O
ends _ _ O
( _ _ O
when _ _ O
no _ _ O
user _ _ O
input _ _ O
via _ _ O
CTRL+D _ _ O
) _ _ O

Read _ _ O
and _ _ O
write _ _ O
system _ _ O
calls _ _ O
• _ _ O
Same _ _ O
interface _ _ O
used _ _ O
to _ _ O
read _ _ O
/ _ _ O
write _ _ O
files _ _ O
. _ _ O
• _ _ O
Because _ _ O
sockets _ _ O
are _ _ O
also _ _ O
files _ _ O
! _ _ O
Neat _ _ O
. _ _ O
# _ _ O
include _ _ O
< _ _ O
unistd.h _ _ O
> _ _ O
ssize_t _ _ O
read _ _ O
( _ _ O
int _ _ O
fd _ _ O
, _ _ O
void _ _ O
* _ _ O
usrbuf _ _ O
, _ _ O
size_t _ _ O
n _ _ O
) _ _ O
; _ _ O
ssize_t _ _ O
write _ _ O
( _ _ O
int _ _ O
fd _ _ O
, _ _ O
void _ _ O
* _ _ O
usrbuf _ _ O
, _ _ O
size_t _ _ O
n _ _ O
) _ _ O
; _ _ O
Return _ _ O
: _ _ O
number _ _ O
of _ _ O
bytes _ _ O
transferred _ _ O
if _ _ O
OK _ _ O
, _ _ O
0 _ _ O
on _ _ O
EOF _ _ O
( _ _ O
read _ _ O
only _ _ O
) _ _ O
, _ _ O
-1 _ _ O
on _ _ O
error _ _ O
• _ _ O
read _ _ O
returns _ _ O
a _ _ O
count _ _ O
of _ _ O
0 _ _ O
only _ _ O
if _ _ O
it _ _ O
encounters _ _ O
EOF _ _ O
• _ _ O
So _ _ O
, _ _ O
it _ _ O
is _ _ O
useful _ _ O
to _ _ O
notice _ _ O
if _ _ O
the _ _ O
other _ _ O
machine _ _ O
disconnected _ _ O
. _ _ O
• _ _ O
Calls _ _ O
to _ _ O
read _ _ O
and _ _ O
write _ _ O
can _ _ O
be _ _ O
interleaved _ _ O
arbitrarily _ _ O
on _ _ O
the _ _ O
same _ _ O
file _ _ O
descriptor _ _ O
( _ _ O
socket _ _ O
, _ _ O
file _ _ O
on _ _ O
disk _ _ O
, _ _ O
etc _ _ O
) _ _ O

Sockets _ _ O
Interface _ _ O
Client _ _ O
Server _ _ O
getaddrinfo _ _ O
getaddrinfo _ _ O
socket _ _ O
socket _ _ O
listen _ _ O
connect _ _ O
bind _ _ O
listen _ _ O
connect _ _ O
Client _ _ O
/ _ _ O
Server _ _ O
Session _ _ O
Connection _ _ O
request _ _ O
accept _ _ O
write _ _ O
read _ _ O
read _ _ O
write _ _ O
close _ _ O
EOF _ _ O
read _ _ O
close _ _ O
Await _ _ O
connection _ _ O
request _ _ O
from _ _ O
next _ _ O
client _ _ O

connect _ _ O
/ _ _ O
accept _ _ O
Illustrated _ _ O
listenfd _ _ O
( _ _ O
3 _ _ O
) _ _ O
Client _ _ O
Server _ _ O
clientfd _ _ O
Connection _ _ O
request _ _ O
Client _ _ O
listenfd _ _ O
( _ _ O
3 _ _ O
) _ _ O
Server _ _ O
1 _ _ O
. _ _ O
Server _ _ O
blocks _ _ O
in _ _ O
accept _ _ O
, _ _ O
waiting _ _ O
for _ _ O
connection _ _ O
request _ _ O
on _ _ O
listening _ _ O
descriptor _ _ O
listenfd _ _ O
2 _ _ O
. _ _ O
Client _ _ O
makes _ _ O
connection _ _ O
request _ _ O
by _ _ O
calling _ _ O
and _ _ O
blocking _ _ O
in _ _ O
connect _ _ O
clientfd _ _ O
listenfd _ _ O
( _ _ O
3 _ _ O
) _ _ O
Client _ _ O
clientfd _ _ O
Server _ _ O
connfd _ _ O
( _ _ O
4 _ _ O
) _ _ O
3 _ _ O
. _ _ O
Server _ _ O
returns _ _ O
connfd _ _ O
from _ _ O
accept _ _ O
. _ _ O
Client _ _ O
returns _ _ O
from _ _ O
connect _ _ O
. _ _ O
Connection _ _ O
is _ _ O
now _ _ O
established _ _ O
between _ _ O
clientfd _ _ O
and _ _ O
connfd _ _ O

Connected _ _ O
vs. _ _ O
Listening _ _ O
Descriptors _ _ O
• _ _ O
Listening _ _ O
descriptor _ _ O
• _ _ O
End _ _ O
point _ _ O
for _ _ O
client _ _ O
connection _ _ O
requests _ _ O
• _ _ O
Created _ _ O
once _ _ O
and _ _ O
exists _ _ O
for _ _ O
lifetime _ _ O
of _ _ O
the _ _ O
server _ _ O
• _ _ O
Connected _ _ O
descriptor _ _ O
• _ _ O
End _ _ O
point _ _ O
of _ _ O
the _ _ O
connection _ _ O
between _ _ O
client _ _ O
and _ _ O
server _ _ O
• _ _ O
A _ _ O
new _ _ O
descriptor _ _ O
is _ _ O
created _ _ O
each _ _ O
time _ _ O
the _ _ O
server _ _ O
accepts _ _ O
a _ _ O
connection _ _ O
request _ _ O
from _ _ O
a _ _ O
client _ _ O
• _ _ O
Exists _ _ O
only _ _ O
as _ _ O
long _ _ O
as _ _ O
it _ _ O
takes _ _ O
to _ _ O
service _ _ O
client _ _ O
• _ _ O
Why _ _ O
the _ _ O
distinction _ _ O
? _ _ O
• _ _ O
Allows _ _ O
for _ _ O
concurrent _ _ O
servers _ _ O
that _ _ O
can _ _ O
communicate _ _ O
over _ _ O
many _ _ O
client _ _ O
connections _ _ O
simultaneously _ _ O
• _ _ O
E.g. _ _ O
, _ _ O
Each _ _ O
time _ _ O
we _ _ O
receive _ _ O
a _ _ O
new _ _ O
request _ _ O
, _ _ O
we _ _ O
fork _ _ O
a _ _ O
child _ _ O
to _ _ O
handle _ _ O
the _ _ O
request _ _ O

Testing _ _ O
Servers _ _ O
Using _ _ O
telnet _ _ O
• _ _ O
The _ _ O
telnet _ _ O
program _ _ O
is _ _ O
invaluable _ _ O
for _ _ O
testing _ _ O
servers _ _ O
that _ _ O
transmit _ _ O
ASCII _ _ O
strings _ _ O
over _ _ O
Internet _ _ O
connections _ _ O
• _ _ O
Our _ _ O
simple _ _ O
echo _ _ O
server _ _ O
• _ _ O
Web _ _ O
servers _ _ O
• _ _ O
Mail _ _ O
servers _ _ O
• _ _ O
Usage _ _ O
: _ _ O
• _ _ O
linux _ _ O
> _ _ O
telnet _ _ O
< _ _ O
host _ _ O
> _ _ O
< _ _ O
portnumber _ _ O
> _ _ O
• _ _ O
Creates _ _ O
a _ _ O
connection _ _ O
with _ _ O
a _ _ O
server _ _ O
running _ _ O
on _ _ O
< _ _ O
host _ _ O
> _ _ O
and _ _ O
listening _ _ O
on _ _ O
port _ _ O
< _ _ O
portnumber _ _ O
> _ _ O

Testing _ _ O
the _ _ O
Echo _ _ O
Server _ _ O
With _ _ O
telnet _ _ O
occam.dev _ _ O
$ _ _ O
. _ _ O
/ _ _ O
echoserver _ _ O
10001 _ _ O
Server _ _ O
connected _ _ O
to _ _ O
client _ _ O
. _ _ O
Server _ _ O
received _ _ O
11 _ _ O
bytes _ _ O
Server _ _ O
received _ _ O
8 _ _ O
bytes _ _ O
thoth _ _ O
$ _ _ O
telnet _ _ O
occam.dev _ _ O
10001 _ _ O
Trying _ _ O
142.4.212.185 _ _ O
... _ _ O
Connected _ _ O
to _ _ O
occam.dev _ _ O
( _ _ O
142.4.212.185 _ _ O
) _ _ O
. _ _ O
Escape _ _ O
character _ _ O
is _ _ O
' _ _ O
^ _ _ O
] _ _ O
' _ _ O
. _ _ O
Hi _ _ O
there _ _ O
! _ _ O
Hi _ _ O
there _ _ O
! _ _ O
Howdy _ _ O
! _ _ O
Howdy _ _ O
! _ _ O
^ _ _ O
] _ _ O
ß _ _ O
This _ _ O
means _ _ O
CTRL+ _ _ O
] _ _ O
telnet _ _ O
> _ _ O
quit _ _ O
Connection _ _ O
closed _ _ O
. _ _ O
thoth _ _ O
$ _ _ O

Web _ _ O
Server _ _ O
Basics _ _ O
• _ _ O
Clients _ _ O
and _ _ O
servers _ _ O
communicate _ _ O
using _ _ O
the _ _ O
HyperText _ _ O
Transfer _ _ O
Protocol _ _ O
( _ _ O
HTTP _ _ O
) _ _ O
• _ _ O
Client _ _ O
and _ _ O
server _ _ O
establish _ _ O
TCP _ _ O
connection _ _ O
• _ _ O
Client _ _ O
requests _ _ O
content _ _ O
• _ _ O
Server _ _ O
responds _ _ O
with _ _ O
requested _ _ O
content _ _ O
• _ _ O
Client _ _ O
and _ _ O
server _ _ O
close _ _ O
connection _ _ O
( _ _ O
eventually _ _ O
) _ _ O
• _ _ O
Current _ _ O
version _ _ O
is _ _ O
HTTP _ _ O
/ _ _ O
1.1 _ _ O
Web _ _ O
client _ _ O
( _ _ O
browser _ _ O
) _ _ O
HTTP _ _ O
request _ _ O
Web _ _ O
server _ _ O
HTTP _ _ O
response _ _ O
( _ _ O
content _ _ O
) _ _ O
HTTP _ _ O
Web _ _ O
content _ _ O
TCP _ _ O
Streams _ _ O
IP _ _ O
Datagrams _ _ O
• _ _ O
RFC _ _ O
2616 _ _ O
, _ _ O
June _ _ O
, _ _ O
1999 _ _ O
. _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.w3.org _ _ O
/ _ _ O
Protocols _ _ O
/ _ _ O
rfc2616 _ _ O
/ _ _ O
rfc2616.html _ _ O

Web _ _ O
Content _ _ O
• _ _ O
Web _ _ O
servers _ _ O
return _ _ O
content _ _ O
to _ _ O
clients _ _ O
• _ _ O
content _ _ O
: _ _ O
a _ _ O
sequence _ _ O
of _ _ O
bytes _ _ O
with _ _ O
an _ _ O
associated _ _ O
MIME _ _ O
( _ _ O
Multipurpose _ _ O
Internet _ _ O
Mail _ _ O
Extensions _ _ O
) _ _ O
type _ _ O
• _ _ O
Example _ _ O
MIME _ _ O
types _ _ O
• _ _ O
text _ _ O
/ _ _ O
html _ _ O
• _ _ O
text _ _ O
/ _ _ O
plain _ _ O
• _ _ O
image _ _ O
/ _ _ O
gif _ _ O
• _ _ O
image _ _ O
/ _ _ O
png _ _ O
• _ _ O
image _ _ O
/ _ _ O
jpeg _ _ O
HTML _ _ O
document _ _ O
Unformatted _ _ O
text _ _ O
Binary _ _ O
image _ _ O
encoded _ _ O
in _ _ O
GIF _ _ O
format _ _ O
Binar _ _ O
image _ _ O
encoded _ _ O
in _ _ O
PNG _ _ O
format _ _ O
Binary _ _ O
image _ _ O
encoded _ _ O
in _ _ O
JPEG _ _ O
format _ _ O
You _ _ O
can _ _ O
find _ _ O
the _ _ O
complete _ _ O
list _ _ O
of _ _ O
MIME _ _ O
types _ _ O
at _ _ O
: _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.iana.org _ _ O
/ _ _ O
assignments _ _ O
/ _ _ O
media-types _ _ O
/ _ _ O
media-types.xhtml _ _ O

Static _ _ O
and _ _ O
Dynamic _ _ O
Content _ _ O
• _ _ O
The _ _ O
content _ _ O
returned _ _ O
in _ _ O
HTTP _ _ O
responses _ _ O
can _ _ O
be _ _ O
either _ _ O
static _ _ O
or _ _ O
dynamic _ _ O
• _ _ O
Static _ _ O
content _ _ O
: _ _ O
content _ _ O
stored _ _ O
in _ _ O
files _ _ O
and _ _ O
retrieved _ _ O
in _ _ O
response _ _ O
to _ _ O
an _ _ O
HTTP _ _ O
request _ _ O
• _ _ O
Examples _ _ O
: _ _ O
HTML _ _ O
files _ _ O
, _ _ O
images _ _ O
, _ _ O
audio _ _ O
clips _ _ O
, _ _ O
Javascript _ _ O
programs _ _ O
• _ _ O
Request _ _ O
identifies _ _ O
which _ _ O
content _ _ O
file _ _ O
• _ _ O
Dynamic _ _ O
content _ _ O
: _ _ O
content _ _ O
produced _ _ O
on-the-fly _ _ O
in _ _ O
response _ _ O
to _ _ O
an _ _ O
HTTP _ _ O
request _ _ O
• _ _ O
Example _ _ O
: _ _ O
content _ _ O
produced _ _ O
by _ _ O
a _ _ O
program _ _ O
executed _ _ O
by _ _ O
the _ _ O
server _ _ O
on _ _ O
behalf _ _ O
of _ _ O
the _ _ O
client _ _ O
• _ _ O
Request _ _ O
identifies _ _ O
file _ _ O
containing _ _ O
executable _ _ O
code _ _ O
• _ _ O
Bottom _ _ O
line _ _ O
: _ _ O
Web _ _ O
content _ _ O
is _ _ O
associated _ _ O
with _ _ O
a _ _ O
file _ _ O
that _ _ O
is _ _ O
managed _ _ O
by _ _ O
the _ _ O
server _ _ O

URLs _ _ O
and _ _ O
how _ _ O
clients _ _ O
and _ _ O
servers _ _ O
use _ _ O
them _ _ O
• _ _ O
Unique _ _ O
name _ _ O
for _ _ O
a _ _ O
file _ _ O
: _ _ O
URL _ _ O
( _ _ O
Universal _ _ O
Resource _ _ O
Locator _ _ O
) _ _ O
• _ _ O
Example _ _ O
URL _ _ O
: _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.google.edu _ _ O
: _ _ O
80 _ _ O
/ _ _ O
index.html _ _ O
• _ _ O
Clients _ _ O
use _ _ O
prefix _ _ O
( _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.google.edu _ _ O
: _ _ O
80 _ _ O
) _ _ O
to _ _ O
infer _ _ O
: _ _ O
• _ _ O
What _ _ O
kind _ _ O
( _ _ O
protocol _ _ O
) _ _ O
of _ _ O
server _ _ O
to _ _ O
contact _ _ O
( _ _ O
HTTP _ _ O
) _ _ O
• _ _ O
Where _ _ O
the _ _ O
server _ _ O
is _ _ O
( _ _ O
www.google.com _ _ O
) _ _ O
• _ _ O
What _ _ O
port _ _ O
it _ _ O
is _ _ O
listening _ _ O
on _ _ O
( _ _ O
80 _ _ O
) _ _ O
• _ _ O
Servers _ _ O
use _ _ O
suffix _ _ O
( _ _ O
/index.html _ _ O
) _ _ O
to _ _ O
: _ _ O
• _ _ O
Determine _ _ O
if _ _ O
request _ _ O
is _ _ O
for _ _ O
static _ _ O
or _ _ O
dynamic _ _ O
content _ _ O
. _ _ O
• _ _ O
No _ _ O
hard _ _ O
and _ _ O
fast _ _ O
rules _ _ O
for _ _ O
this _ _ O
• _ _ O
One _ _ O
convention _ _ O
: _ _ O
executables _ _ O
reside _ _ O
in _ _ O
cgi-bin _ _ O
directory _ _ O
• _ _ O
Find _ _ O
file _ _ O
on _ _ O
file _ _ O
system _ _ O
• _ _ O
Initial _ _ O
“ _ _ O
/ _ _ O
” _ _ O
in _ _ O
suffix _ _ O
denotes _ _ O
home _ _ O
directory _ _ O
for _ _ O
requested _ _ O
content _ _ O
. _ _ O
• _ _ O
Minimal _ _ O
suffix _ _ O
is _ _ O
“ _ _ O
/ _ _ O
” _ _ O
, _ _ O
which _ _ O
server _ _ O
expands _ _ O
to _ _ O
configured _ _ O
default _ _ O
filename _ _ O
( _ _ O
usually _ _ O
, _ _ O
index.html _ _ O
) _ _ O

HTTP _ _ O
Requests _ _ O
• _ _ O
HTTP _ _ O
request _ _ O
is _ _ O
a _ _ O
request _ _ O
line _ _ O
, _ _ O
followed _ _ O
by _ _ O
zero _ _ O
or _ _ O
more _ _ O
request _ _ O
headers _ _ O
• _ _ O
Request _ _ O
line _ _ O
: _ _ O
< _ _ O
method _ _ O
> _ _ O
< _ _ O
uri _ _ O
> _ _ O
< _ _ O
version _ _ O
> _ _ O
• _ _ O
< _ _ O
method _ _ O
> _ _ O
is _ _ O
one _ _ O
of _ _ O
GET _ _ O
, _ _ O
POST _ _ O
, _ _ O
OPTIONS _ _ O
, _ _ O
HEAD _ _ O
, _ _ O
PUT _ _ O
, _ _ O
DELETE _ _ O
, _ _ O
or _ _ O
TRACE _ _ O
• _ _ O
< _ _ O
uri _ _ O
> _ _ O
is _ _ O
typically _ _ O
URL _ _ O
for _ _ O
proxies _ _ O
, _ _ O
URL _ _ O
suffix _ _ O
for _ _ O
servers _ _ O
• _ _ O
A _ _ O
URL _ _ O
is _ _ O
a _ _ O
type _ _ O
of _ _ O
URI _ _ O
( _ _ O
Uniform _ _ O
Resource _ _ O
Identifier _ _ O
) _ _ O
• _ _ O
See _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.ietf.org _ _ O
/ _ _ O
rfc _ _ O
/ _ _ O
rfc2396.txt _ _ O
• _ _ O
< _ _ O
version _ _ O
> _ _ O
is _ _ O
HTTP _ _ O
version _ _ O
of _ _ O
request _ _ O
( _ _ O
HTTP _ _ O
/ _ _ O
1.0 _ _ O
or _ _ O
HTTP _ _ O
/ _ _ O
1.1 _ _ O
) _ _ O
• _ _ O
Request _ _ O
headers _ _ O
: _ _ O
< _ _ O
header _ _ O
name _ _ O
> _ _ O
: _ _ O
< _ _ O
header _ _ O
data _ _ O
> _ _ O
• _ _ O
Provide _ _ O
additional _ _ O
information _ _ O
to _ _ O
the _ _ O
server _ _ O

HTTP _ _ O
Responses _ _ O
• _ _ O
HTTP _ _ O
response _ _ O
is _ _ O
a _ _ O
response _ _ O
line _ _ O
followed _ _ O
by _ _ O
zero _ _ O
or _ _ O
more _ _ O
response _ _ O
headers _ _ O
, _ _ O
possibly _ _ O
followed _ _ O
by _ _ O
content _ _ O
, _ _ O
with _ _ O
blank _ _ O
line _ _ O
( _ _ O
“ _ _ O
\r\n _ _ O
” _ _ O
) _ _ O
separating _ _ O
headers _ _ O
from _ _ O
content _ _ O
. _ _ O
• _ _ O
Response _ _ O
line _ _ O
: _ _ O
< _ _ O
version _ _ O
> _ _ O
< _ _ O
status _ _ O
code _ _ O
> _ _ O
< _ _ O
status _ _ O
msg _ _ O
> _ _ O
• _ _ O
< _ _ O
version _ _ O
> _ _ O
is _ _ O
HTTP _ _ O
version _ _ O
of _ _ O
the _ _ O
response _ _ O
• _ _ O
< _ _ O
status _ _ O
code _ _ O
> _ _ O
is _ _ O
numeric _ _ O
status _ _ O
• _ _ O
< _ _ O
status _ _ O
msg _ _ O
> _ _ O
is _ _ O
corresponding _ _ O
English _ _ O
text _ _ O
• _ _ O
200 _ _ O
OK _ _ O
Request _ _ O
was _ _ O
handled _ _ O
without _ _ O
error _ _ O
• _ _ O
301 _ _ O
Moved _ _ O
Provide _ _ O
alternate _ _ O
URL _ _ O
• _ _ O
404 _ _ O
Not _ _ O
found _ _ O
Server _ _ O
could _ _ O
n’t _ _ O
find _ _ O
the _ _ O
file _ _ O
• _ _ O
Response _ _ O
headers _ _ O
: _ _ O
< _ _ O
header _ _ O
name _ _ O
> _ _ O
: _ _ O
< _ _ O
header _ _ O
data _ _ O
> _ _ O
• _ _ O
Provide _ _ O
additional _ _ O
information _ _ O
about _ _ O
response _ _ O
• _ _ O
Content-Type _ _ O
: _ _ O
MIME _ _ O
type _ _ O
of _ _ O
content _ _ O
in _ _ O
response _ _ O
body _ _ O
• _ _ O
Content-Length _ _ O
: _ _ O
Length _ _ O
of _ _ O
content _ _ O
in _ _ O
response _ _ O
body _ _ O

Example _ _ O
HTTP _ _ O
Transaction _ _ O
whaleshark _ _ O
> _ _ O
telnet _ _ O
www.cmu.edu _ _ O
80 _ _ O
Client _ _ O
: _ _ O
open _ _ O
connection _ _ O
to _ _ O
server _ _ O
Trying _ _ O
128.2.42.52 _ _ O
... _ _ O
Telnet _ _ O
prints _ _ O
3 _ _ O
lines _ _ O
to _ _ O
terminal _ _ O
Connected _ _ O
to _ _ O
WWW-CMU-PROD-VIP.ANDREW.cmu.edu _ _ O
. _ _ O
Escape _ _ O
character _ _ O
is _ _ O
' _ _ O
^ _ _ O
] _ _ O
' _ _ O
. _ _ O
GET _ _ O
/ _ _ O
HTTP _ _ O
/ _ _ O
1.1 _ _ O
Client _ _ O
: _ _ O
request _ _ O
line _ _ O
Host _ _ O
: _ _ O
www.cmu.edu _ _ O
Client _ _ O
: _ _ O
required _ _ O
HTTP _ _ O
/ _ _ O
1.1 _ _ O
header _ _ O
Client _ _ O
: _ _ O
empty _ _ O
line _ _ O
terminates _ _ O
headers _ _ O
HTTP _ _ O
/ _ _ O
1.1 _ _ O
301 _ _ O
Moved _ _ O
Permanently _ _ O
Server _ _ O
: _ _ O
response _ _ O
line _ _ O
Date _ _ O
: _ _ O
We _ _ O
d _ _ O
, _ _ O
05 _ _ O
Nov _ _ O
2014 _ _ O
17 _ _ O
: _ _ O
05 _ _ O
: _ _ O
11 _ _ O
GMT _ _ O
Server _ _ O
: _ _ O
followed _ _ O
by _ _ O
5 _ _ O
response _ _ O
headers _ _ O
Server _ _ O
: _ _ O
Apache _ _ O
/ _ _ O
1.3.42 _ _ O
( _ _ O
Unix _ _ O
) _ _ O
Server _ _ O
: _ _ O
this _ _ O
is _ _ O
an _ _ O
Apache _ _ O
server _ _ O
Location _ _ O
: _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
www.cmu.edu _ _ O
/ _ _ O
index.shtml _ _ O
Server _ _ O
: _ _ O
page _ _ O
has _ _ O
moved _ _ O
here _ _ O
Transfer-Encoding _ _ O
: _ _ O
chunked _ _ O
Server _ _ O
: _ _ O
response _ _ O
body _ _ O
will _ _ O
be _ _ O
chunked _ _ O
Content-Type _ _ O
: _ _ O
text _ _ O
/ _ _ O
html _ _ O
; _ _ O
charset= _ _ O
... _ _ O
Server _ _ O
: _ _ O
expect _ _ O
HTML _ _ O
in _ _ O
response _ _ O
body _ _ O
Server _ _ O
: _ _ O
empty _ _ O
line _ _ O
terminates _ _ O
headers _ _ O
15c _ _ O
Server _ _ O
: _ _ O
first _ _ O
line _ _ O
in _ _ O
response _ _ O
body _ _ O
< _ _ O
HTML _ _ O
> _ _ O
< _ _ O
HEAD _ _ O
> _ _ O
Server _ _ O
: _ _ O
start _ _ O
of _ _ O
HTML _ _ O
content _ _ O
… _ _ O
< _ _ O
/BODY _ _ O
> _ _ O
< _ _ O
/ _ _ O
HTML _ _ O
> _ _ O
Server _ _ O
: _ _ O
end _ _ O
of _ _ O
HTML _ _ O
content _ _ O
0 _ _ O
Server _ _ O
: _ _ O
last _ _ O
line _ _ O
in _ _ O
response _ _ O
body _ _ O
Connection _ _ O
closed _ _ O
by _ _ O
foreign _ _ O
host _ _ O
. _ _ O
Server _ _ O
: _ _ O
closes _ _ O
connection _ _ O
HTTP _ _ O
standard _ _ O
requires _ _ O
that _ _ O
each _ _ O
text _ _ O
line _ _ O
end _ _ O
with _ _ O
“ _ _ O
\r\n _ _ O
” _ _ O
¢ _ _ O
Blank _ _ O
line _ _ O
( _ _ O
“ _ _ O
\r\n _ _ O
” _ _ O
) _ _ O
terminates _ _ O
request _ _ O
and _ _ O
response _ _ O
headers _ _ O
¢ _ _ O

Example _ _ O
HTTP _ _ O
Transaction _ _ O
, _ _ O
Take _ _ O
2 _ _ O
whaleshark _ _ O
> _ _ O
telnet _ _ O
www.cmu.edu _ _ O
80 _ _ O
Client _ _ O
: _ _ O
open _ _ O
connection _ _ O
to _ _ O
server _ _ O
Trying _ _ O
128.2.42.52 _ _ O
... _ _ O
Telnet _ _ O
prints _ _ O
3 _ _ O
lines _ _ O
to _ _ O
terminal _ _ O
Connected _ _ O
to _ _ O
WWW-CMU-PROD-VIP.ANDREW.cmu.edu _ _ O
. _ _ O
Escape _ _ O
character _ _ O
is _ _ O
' _ _ O
^ _ _ O
] _ _ O
' _ _ O
. _ _ O
GET _ _ O
/index.shtml _ _ O
HTTP _ _ O
/ _ _ O
1.1 _ _ O
Client _ _ O
: _ _ O
request _ _ O
line _ _ O
Host _ _ O
: _ _ O
www.cmu.edu _ _ O
Client _ _ O
: _ _ O
required _ _ O
HTTP _ _ O
/ _ _ O
1.1 _ _ O
header _ _ O
Client _ _ O
: _ _ O
empty _ _ O
line _ _ O
terminates _ _ O
headers _ _ O
HTTP _ _ O
/ _ _ O
1.1 _ _ O
200 _ _ O
OK _ _ O
Server _ _ O
: _ _ O
response _ _ O
line _ _ O
Date _ _ O
: _ _ O
We _ _ O
d _ _ O
, _ _ O
05 _ _ O
Nov _ _ O
2014 _ _ O
17 _ _ O
: _ _ O
37 _ _ O
: _ _ O
26 _ _ O
GMT _ _ O
Server _ _ O
: _ _ O
followed _ _ O
by _ _ O
4 _ _ O
response _ _ O
headers _ _ O
Server _ _ O
: _ _ O
Apache _ _ O
/ _ _ O
1.3.42 _ _ O
( _ _ O
Unix _ _ O
) _ _ O
Transfer-Encoding _ _ O
: _ _ O
chunked _ _ O
Content-Type _ _ O
: _ _ O
text _ _ O
/ _ _ O
html _ _ O
; _ _ O
charset= _ _ O
... _ _ O
Server _ _ O
: _ _ O
empty _ _ O
line _ _ O
terminates _ _ O
headers _ _ O
1000 _ _ O
Server _ _ O
: _ _ O
begin _ _ O
response _ _ O
body _ _ O
< _ _ O
html _ _ O
.. _ _ O
> _ _ O
Server _ _ O
: _ _ O
first _ _ O
line _ _ O
of _ _ O
HTML _ _ O
content _ _ O
… _ _ O
< _ _ O
/html _ _ O
> _ _ O
0 _ _ O
Server _ _ O
: _ _ O
end _ _ O
response _ _ O
body _ _ O
Connection _ _ O
closed _ _ O
by _ _ O
foreign _ _ O
host _ _ O
. _ _ O
Server _ _ O
: _ _ O
close _ _ O
connection _ _ O

Proxies _ _ O
• _ _ O
A _ _ O
proxy _ _ O
is _ _ O
an _ _ O
intermediary _ _ O
between _ _ O
a _ _ O
client _ _ O
and _ _ O
an _ _ O
origin _ _ O
server _ _ O
• _ _ O
To _ _ O
the _ _ O
client _ _ O
, _ _ O
the _ _ O
proxy _ _ O
acts _ _ O
like _ _ O
a _ _ O
server _ _ O
• _ _ O
To _ _ O
the _ _ O
server _ _ O
, _ _ O
the _ _ O
proxy _ _ O
acts _ _ O
like _ _ O
a _ _ O
client _ _ O
1 _ _ O
. _ _ O
Client _ _ O
request _ _ O
Client _ _ O
2 _ _ O
. _ _ O
Proxy _ _ O
request _ _ O
Origin _ _ O
Server _ _ O
Proxy _ _ O
4 _ _ O
. _ _ O
Proxy _ _ O
response _ _ O
3 _ _ O
. _ _ O
Server _ _ O
response _ _ O
• _ _ O
This _ _ O
is _ _ O
what _ _ O
you _ _ O
will _ _ O
be _ _ O
implementing _ _ O
in _ _ O
Proxy _ _ O
Lab _ _ O

Why _ _ O
Proxies _ _ O
? _ _ O
• _ _ O
Can _ _ O
perform _ _ O
useful _ _ O
functions _ _ O
as _ _ O
requests _ _ O
and _ _ O
responses _ _ O
pass _ _ O
by _ _ O
• _ _ O
Examples _ _ O
: _ _ O
Caching _ _ O
, _ _ O
logging _ _ O
, _ _ O
anonymization _ _ O
, _ _ O
filtering _ _ O
, _ _ O
transcoding _ _ O
Client _ _ O
A _ _ O
Request _ _ O
foo.html _ _ O
Proxy _ _ O
cache _ _ O
Request _ _ O
foo.html _ _ O
Client _ _ O
B _ _ O
Request _ _ O
foo.html _ _ O
foo.html _ _ O
foo.html _ _ O
Fast _ _ O
inexpensive _ _ O
local _ _ O
network _ _ O
foo.html _ _ O
Origin _ _ O
Server _ _ O
Slower _ _ O
more _ _ O
expensive _ _ O
global _ _ O
network _ _ O

Sockets _ _ O
Interface _ _ O
Client _ _ O
Server _ _ O
getaddrinfo _ _ O
getaddrinfo _ _ O
SA _ _ O
list _ _ O
SA _ _ O
list _ _ O
socket _ _ O
socket _ _ O
open_listenfd _ _ O
open_clientfd _ _ O
bind _ _ O
listen _ _ O
connect _ _ O
Client _ _ O
/ _ _ O
Server _ _ O
Session _ _ O
Connection _ _ O
request _ _ O
accept _ _ O
rio_writen _ _ O
rio_readlineb _ _ O
rio_readlineb _ _ O
rio_writen _ _ O
close _ _ O
EOF _ _ O
rio_readlineb _ _ O
close _ _ O
Await _ _ O
connection _ _ O
request _ _ O
from _ _ O
next _ _ O
client _ _ O

Sockets _ _ O
Interface _ _ O
: _ _ O
socket _ _ O
• _ _ O
Clients _ _ O
and _ _ O
servers _ _ O
use _ _ O
the _ _ O
socket _ _ O
function _ _ O
to _ _ O
create _ _ O
a _ _ O
socket _ _ O
descriptor _ _ O
: _ _ O
int _ _ O
socket _ _ O
( _ _ O
int _ _ O
domain _ _ O
, _ _ O
int _ _ O
type _ _ O
, _ _ O
int _ _ O
protocol _ _ O
) _ _ O
• _ _ O
Example _ _ O
: _ _ O
int _ _ O
clientfd _ _ O
= _ _ O
socket _ _ O
( _ _ O
AF_INET _ _ O
, _ _ O
SOCK_STREAM _ _ O
, _ _ O
0 _ _ O
) _ _ O
; _ _ O
Indicates _ _ O
that _ _ O
we _ _ O
are _ _ O
using _ _ O
32-bit _ _ O
IPV4 _ _ O
addresses _ _ O
Indicates _ _ O
that _ _ O
the _ _ O
socket _ _ O
will _ _ O
be _ _ O
the _ _ O
end _ _ O
point _ _ O
of _ _ O
a _ _ O
connection _ _ O
Protocol _ _ O
specific _ _ O
! _ _ O
Best _ _ O
practice _ _ O
is _ _ O
to _ _ O
use _ _ O
getaddrinfo _ _ O
to _ _ O
generate _ _ O
the _ _ O
parameters _ _ O
automatically _ _ O
, _ _ O
so _ _ O
that _ _ O
code _ _ O
is _ _ O
protocol _ _ O
independent _ _ O
. _ _ O

Sockets _ _ O
Interface _ _ O
Client _ _ O
Server _ _ O
getaddrinfo _ _ O
getaddrinfo _ _ O
SA _ _ O
list _ _ O
SA _ _ O
list _ _ O
socket _ _ O
socket _ _ O
open_listenfd _ _ O
listenfd _ _ O
clientfd _ _ O
open_clientfd _ _ O
bind _ _ O
listen _ _ O
connect _ _ O
Client _ _ O
/ _ _ O
Server _ _ O
Session _ _ O
Connection _ _ O
request _ _ O
accept _ _ O
write _ _ O
read _ _ O
read _ _ O
write _ _ O
close _ _ O
EOF _ _ O
read _ _ O
close _ _ O
Await _ _ O
connection _ _ O
request _ _ O
from _ _ O
next _ _ O
client _ _ O

Sockets _ _ O
Interface _ _ O
: _ _ O
bind _ _ O
• _ _ O
A _ _ O
server _ _ O
uses _ _ O
bind _ _ O
to _ _ O
ask _ _ O
the _ _ O
kernel _ _ O
to _ _ O
associate _ _ O
the _ _ O
server _ _ O
’s _ _ O
socket _ _ O
address _ _ O
with _ _ O
a _ _ O
socket _ _ O
descriptor _ _ O
: _ _ O
int _ _ O
bind _ _ O
( _ _ O
int _ _ O
sockfd _ _ O
, _ _ O
SA _ _ O
* _ _ O
addr _ _ O
, _ _ O
socklen_t _ _ O
addrlen _ _ O
) _ _ O
; _ _ O
Recall _ _ O
: _ _ O
typedef _ _ O
struct _ _ O
sockaddr _ _ O
SA _ _ O
; _ _ O
• _ _ O
Process _ _ O
can _ _ O
read _ _ O
bytes _ _ O
that _ _ O
arrive _ _ O
on _ _ O
the _ _ O
connection _ _ O
whose _ _ O
endpoint _ _ O
is _ _ O
addr _ _ O
by _ _ O
reading _ _ O
from _ _ O
descriptor _ _ O
sockfd _ _ O
• _ _ O
Similarly _ _ O
, _ _ O
writes _ _ O
to _ _ O
sockfd _ _ O
are _ _ O
transferred _ _ O
along _ _ O
connection _ _ O
whose _ _ O
endpoint _ _ O
is _ _ O
addr _ _ O
Best _ _ O
practice _ _ O
is _ _ O
to _ _ O
use _ _ O
getaddrinfo _ _ O
to _ _ O
supply _ _ O
the _ _ O
arguments _ _ O
addr _ _ O
and _ _ O
addrlen _ _ O
. _ _ O

Sockets _ _ O
Interface _ _ O
Client _ _ O
Server _ _ O
getaddrinfo _ _ O
getaddrinfo _ _ O
SA _ _ O
list _ _ O
SA _ _ O
list _ _ O
socket _ _ O
socket _ _ O
open_listenfd _ _ O
listenfd _ _ O
clientfd _ _ O
open_clientfd _ _ O
bind _ _ O
listenfd _ _ O
< _ _ O
- _ _ O
> _ _ O
SA _ _ O
listen _ _ O
connect _ _ O
Client _ _ O
/ _ _ O
Server _ _ O
Session _ _ O
Connection _ _ O
request _ _ O
accept _ _ O
write _ _ O
read _ _ O
read _ _ O
write _ _ O
close _ _ O
EOF _ _ O
read _ _ O
close _ _ O
Await _ _ O
connection _ _ O
request _ _ O
from _ _ O
next _ _ O
client _ _ O

Sockets _ _ O
Interface _ _ O
: _ _ O
listen _ _ O
• _ _ O
By _ _ O
default _ _ O
, _ _ O
kernel _ _ O
assumes _ _ O
that _ _ O
descriptor _ _ O
from _ _ O
socket _ _ O
function _ _ O
is _ _ O
an _ _ O
active _ _ O
socket _ _ O
that _ _ O
will _ _ O
be _ _ O
on _ _ O
the _ _ O
client _ _ O
end _ _ O
of _ _ O
a _ _ O
connection _ _ O
. _ _ O
• _ _ O
A _ _ O
server _ _ O
calls _ _ O
the _ _ O
listen _ _ O
function _ _ O
to _ _ O
tell _ _ O
the _ _ O
kernel _ _ O
that _ _ O
a _ _ O
descriptor _ _ O
will _ _ O
be _ _ O
used _ _ O
by _ _ O
a _ _ O
server _ _ O
rather _ _ O
than _ _ O
a _ _ O
client _ _ O
: _ _ O
int _ _ O
listen _ _ O
( _ _ O
int _ _ O
sockfd _ _ O
, _ _ O
int _ _ O
backlog _ _ O
) _ _ O
; _ _ O
• _ _ O
Converts _ _ O
sockfd _ _ O
from _ _ O
an _ _ O
active _ _ O
socket _ _ O
to _ _ O
a _ _ O
listening _ _ O
socket _ _ O
that _ _ O
can _ _ O
accept _ _ O
connection _ _ O
requests _ _ O
from _ _ O
clients _ _ O
. _ _ O
• _ _ O
backlog _ _ O
is _ _ O
a _ _ O
hint _ _ O
about _ _ O
the _ _ O
number _ _ O
of _ _ O
outstanding _ _ O
connection _ _ O
requests _ _ O
that _ _ O
the _ _ O
kernel _ _ O
should _ _ O
queue _ _ O
up _ _ O
before _ _ O
starting _ _ O
to _ _ O
refuse _ _ O
requests _ _ O
. _ _ O

Sockets _ _ O
Interface _ _ O
Client _ _ O
Server _ _ O
getaddrinfo _ _ O
getaddrinfo _ _ O
SA _ _ O
list _ _ O
SA _ _ O
list _ _ O
socket _ _ O
socket _ _ O
open_listenfd _ _ O
listenfd _ _ O
clientfd _ _ O
open_clientfd _ _ O
bind _ _ O
listenfd _ _ O
< _ _ O
- _ _ O
> _ _ O
SA _ _ O
listen _ _ O
connect _ _ O
Client _ _ O
/ _ _ O
Server _ _ O
Session _ _ O
Connection _ _ O
request _ _ O
listening _ _ O
listenfd _ _ O
accept _ _ O
write _ _ O
read _ _ O
read _ _ O
write _ _ O
close _ _ O
EOF _ _ O
rio_readlineb _ _ O
close _ _ O
Await _ _ O
connection _ _ O
request _ _ O
from _ _ O
next _ _ O
client _ _ O

Sockets _ _ O
Interface _ _ O
: _ _ O
accept _ _ O
• _ _ O
Servers _ _ O
wait _ _ O
for _ _ O
connection _ _ O
requests _ _ O
from _ _ O
clients _ _ O
by _ _ O
calling _ _ O
accept _ _ O
: _ _ O
int _ _ O
accept _ _ O
( _ _ O
int _ _ O
listenfd _ _ O
, _ _ O
SA _ _ O
* _ _ O
addr _ _ O
, _ _ O
int _ _ O
* _ _ O
addrlen _ _ O
) _ _ O
; _ _ O
• _ _ O
Waits _ _ O
for _ _ O
connection _ _ O
request _ _ O
to _ _ O
arrive _ _ O
on _ _ O
the _ _ O
connection _ _ O
bound _ _ O
to _ _ O
listenfd _ _ O
, _ _ O
then _ _ O
fills _ _ O
in _ _ O
client _ _ O
’s _ _ O
socket _ _ O
address _ _ O
in _ _ O
addr _ _ O
and _ _ O
size _ _ O
of _ _ O
the _ _ O
socket _ _ O
address _ _ O
in _ _ O
addrlen _ _ O
. _ _ O
• _ _ O
Returns _ _ O
a _ _ O
connected _ _ O
descriptor _ _ O
that _ _ O
can _ _ O
be _ _ O
used _ _ O
to _ _ O
communicate _ _ O
with _ _ O
the _ _ O
client _ _ O
via _ _ O
Unix _ _ O
I _ _ O
/ _ _ O
O _ _ O
routines _ _ O
. _ _ O

Sockets _ _ O
Interface _ _ O
Client _ _ O
Server _ _ O
getaddrinfo _ _ O
getaddrinfo _ _ O
SA _ _ O
list _ _ O
SA _ _ O
list _ _ O
socket _ _ O
socket _ _ O
open_listenfd _ _ O
listenfd _ _ O
clientfd _ _ O
open_clientfd _ _ O
bind _ _ O
listenfd _ _ O
< _ _ O
- _ _ O
> _ _ O
SA _ _ O
listen _ _ O
connect _ _ O
Client _ _ O
/ _ _ O
Server _ _ O
Session _ _ O
Connection _ _ O
request _ _ O
listening _ _ O
listenfd _ _ O
accept _ _ O
write _ _ O
read _ _ O
read _ _ O
write _ _ O
close _ _ O
EOF _ _ O
read _ _ O
close _ _ O
Await _ _ O
connection _ _ O
request _ _ O
from _ _ O
next _ _ O
client _ _ O

Sockets _ _ O
Interface _ _ O
: _ _ O
connect _ _ O
• _ _ O
A _ _ O
client _ _ O
establishes _ _ O
a _ _ O
connection _ _ O
with _ _ O
a _ _ O
server _ _ O
by _ _ O
calling _ _ O
connect _ _ O
: _ _ O
int _ _ O
connect _ _ O
( _ _ O
int _ _ O
clientfd _ _ O
, _ _ O
SA _ _ O
* _ _ O
addr _ _ O
, _ _ O
socklen_t _ _ O
addrlen _ _ O
) _ _ O
; _ _ O
• _ _ O
Attempts _ _ O
to _ _ O
establish _ _ O
a _ _ O
connection _ _ O
with _ _ O
server _ _ O
at _ _ O
socket _ _ O
address _ _ O
addr _ _ O
• _ _ O
If _ _ O
successful _ _ O
, _ _ O
then _ _ O
clientfd _ _ O
is _ _ O
now _ _ O
ready _ _ O
for _ _ O
reading _ _ O
and _ _ O
writing _ _ O
. _ _ O
• _ _ O
Resulting _ _ O
connection _ _ O
is _ _ O
characterized _ _ O
by _ _ O
socket _ _ O
pair _ _ O
( _ _ O
x _ _ O
: _ _ O
y _ _ O
, _ _ O
addr.sin_addr _ _ O
: _ _ O
addr.sin_port _ _ O
) _ _ O
• _ _ O
x _ _ O
is _ _ O
client _ _ O
address _ _ O
• _ _ O
y _ _ O
is _ _ O
ephemeral _ _ O
port _ _ O
that _ _ O
uniquely _ _ O
identifies _ _ O
client _ _ O
process _ _ O
on _ _ O
client _ _ O
host _ _ O
Best _ _ O
practice _ _ O
is _ _ O
to _ _ O
use _ _ O
getaddrinfo _ _ O
to _ _ O
supply _ _ O
the _ _ O

Sockets _ _ O
Interface _ _ O
Client _ _ O
Server _ _ O
getaddrinfo _ _ O
getaddrinfo _ _ O
SA _ _ O
list _ _ O
SA _ _ O
list _ _ O
socket _ _ O
socket _ _ O
open_listenfd _ _ O
listenfd _ _ O
clientfd _ _ O
open_clientfd _ _ O
bind _ _ O
listenfd _ _ O
< _ _ O
- _ _ O
> _ _ O
SA _ _ O
listen _ _ O
connect _ _ O
Connection _ _ O
request _ _ O
listening _ _ O
listenfd _ _ O
accept _ _ O
connected _ _ O
( _ _ O
to _ _ O
SA _ _ O
) _ _ O
clientfd _ _ O
Client _ _ O
/ _ _ O
Server _ _ O
Session _ _ O
connected _ _ O
connfd _ _ O
write _ _ O
read _ _ O
read _ _ O
write _ _ O
close _ _ O
EOF _ _ O
rio_readlineb _ _ O
close _ _ O
Await _ _ O
connection _ _ O
request _ _ O
from _ _ O
next _ _ O
client _ _ O

Sockets _ _ O
Interface _ _ O
Client _ _ O
Server _ _ O
getaddrinfo _ _ O
getaddrinfo _ _ O
socket _ _ O
socket _ _ O
open_listenfd _ _ O
open_clientfd _ _ O
bind _ _ O
listen _ _ O
Connection _ _ O
request _ _ O
Client _ _ O
/ _ _ O
Server _ _ O
Session _ _ O
connect _ _ O
accept _ _ O
write _ _ O
read _ _ O
read _ _ O
write _ _ O
close _ _ O
EOF _ _ O
read _ _ O
close _ _ O
Await _ _ O
connection _ _ O
request _ _ O
from _ _ O
next _ _ O
client _ _ O

Sockets _ _ O
Helper _ _ O
: _ _ O
open_clientfd _ _ O
• _ _ O
Establish _ _ O
a _ _ O
connection _ _ O
with _ _ O
a _ _ O
server _ _ O
int _ _ O
open_clientfd _ _ O
( _ _ O
char _ _ O
* _ _ O
hostname _ _ O
, _ _ O
char _ _ O
* _ _ O
port _ _ O
) _ _ O
{ _ _ O
int _ _ O
clientfd _ _ O
; _ _ O
struct _ _ O
addrinfo _ _ O
hints _ _ O
, _ _ O
* _ _ O
listp _ _ O
, _ _ O
* _ _ O
p _ _ O
; _ _ O
/ _ _ O
* _ _ O
Get _ _ O
a _ _ O
list _ _ O
of _ _ O
potential _ _ O
server _ _ O
addresses _ _ O
* _ _ O
/ _ _ O
memset _ _ O
( _ _ O
& _ _ O
hints _ _ O
, _ _ O
0 _ _ O
, _ _ O
sizeof _ _ O
( _ _ O
struct _ _ O
addrinfo _ _ O
) _ _ O
) _ _ O
; _ _ O
hints.ai_socktype _ _ O
= _ _ O
SOCK_STREAM _ _ O
; _ _ O
/ _ _ O
* _ _ O
Open _ _ O
a _ _ O
connection _ _ O
* _ _ O
/ _ _ O
hints.ai_flags _ _ O
= _ _ O
AI_NUMERICSERV _ _ O
; _ _ O
/ _ _ O
* _ _ O
… _ _ O
using _ _ O
numeric _ _ O
port _ _ O
arg _ _ O
. _ _ O
* _ _ O
/ _ _ O
hints.ai_flags _ _ O
|= _ _ O
AI_ADDRCONFIG _ _ O
; _ _ O
/ _ _ O
* _ _ O
Recommended _ _ O
for _ _ O
connections _ _ O
* _ _ O
/ _ _ O
getaddrinfo _ _ O
( _ _ O
hostname _ _ O
, _ _ O
port _ _ O
, _ _ O
& _ _ O
hints _ _ O
, _ _ O
& _ _ O
listp _ _ O
) _ _ O
; _ _ O
csapp.c _ _ O

getaddrinfo _ _ O
Linked _ _ O
List _ _ O
result _ _ O
addrinfo _ _ O
structs _ _ O
ai_canonname _ _ O
ai_addr _ _ O
ai_next _ _ O
Socket _ _ O
address _ _ O
structs _ _ O
NULL _ _ O
ai_addr _ _ O
ai_next _ _ O
NULL _ _ O
ai_addr _ _ O
NULL _ _ O
• _ _ O
Clients _ _ O
: _ _ O
walk _ _ O
this _ _ O
list _ _ O
, _ _ O
trying _ _ O
each _ _ O
socket _ _ O
address _ _ O
in _ _ O
turn _ _ O
, _ _ O
until _ _ O
the _ _ O
calls _ _ O
to _ _ O
socket _ _ O
and _ _ O
connect _ _ O
succeed _ _ O
. _ _ O
• _ _ O
Servers _ _ O
: _ _ O
walk _ _ O
the _ _ O
list _ _ O
until _ _ O
calls _ _ O
to _ _ O
socket _ _ O
and _ _ O
bind _ _ O
succeed _ _ O
. _ _ O

Sockets _ _ O
Helper _ _ O
: _ _ O
open_clientfd _ _ O
( _ _ O
cont _ _ O
) _ _ O
/ _ _ O
* _ _ O
Walk _ _ O
the _ _ O
list _ _ O
for _ _ O
one _ _ O
that _ _ O
we _ _ O
can _ _ O
successfully _ _ O
connect _ _ O
to _ _ O
* _ _ O
/ _ _ O
for _ _ O
( _ _ O
p _ _ O
= _ _ O
listp _ _ O
; _ _ O
p _ _ O
; _ _ O
p _ _ O
= _ _ O
p- _ _ O
> _ _ O
ai_next _ _ O
) _ _ O
{ _ _ O
/ _ _ O
* _ _ O
Create _ _ O
a _ _ O
socket _ _ O
descriptor _ _ O
* _ _ O
/ _ _ O
if _ _ O
( _ _ O
( _ _ O
clientfd _ _ O
= _ _ O
socket _ _ O
( _ _ O
p- _ _ O
> _ _ O
ai_family _ _ O
, _ _ O
p- _ _ O
> _ _ O
ai_socktype _ _ O
, _ _ O
p- _ _ O
> _ _ O
ai_protocol _ _ O
) _ _ O
) _ _ O
< _ _ O
0 _ _ O
) _ _ O
continue _ _ O
; _ _ O
/ _ _ O
* _ _ O
Socket _ _ O
failed _ _ O
, _ _ O
try _ _ O
the _ _ O
next _ _ O
* _ _ O
/ _ _ O
/ _ _ O
* _ _ O
Connect _ _ O
to _ _ O
the _ _ O
server _ _ O
* _ _ O
/ _ _ O
if _ _ O
( _ _ O
connect _ _ O
( _ _ O
clientfd _ _ O
, _ _ O
p- _ _ O
> _ _ O
ai_addr _ _ O
, _ _ O
p- _ _ O
> _ _ O
ai_addrlen _ _ O
) _ _ O
! _ _ O
= _ _ O
-1 _ _ O
) _ _ O
break _ _ O
; _ _ O
/ _ _ O
* _ _ O
Success _ _ O
* _ _ O
/ _ _ O
close _ _ O
( _ _ O
clientfd _ _ O
) _ _ O
; _ _ O
/ _ _ O
* _ _ O
Connect _ _ O
failed _ _ O
, _ _ O
try _ _ O
another _ _ O
* _ _ O
/ _ _ O
} _ _ O
/ _ _ O
* _ _ O
Clean _ _ O
up _ _ O
* _ _ O
/ _ _ O
freeaddrinfo _ _ O
( _ _ O
listp _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
! _ _ O
p _ _ O
) _ _ O
/ _ _ O
* _ _ O
All _ _ O
connects _ _ O
failed _ _ O
* _ _ O
/ _ _ O
return _ _ O
-1 _ _ O
; _ _ O
else _ _ O
/ _ _ O
* _ _ O
The _ _ O
last _ _ O
connect _ _ O
succeeded _ _ O
* _ _ O
/ _ _ O
return _ _ O
clientfd _ _ O
; _ _ O
} _ _ O
csapp.c _ _ O

Sockets _ _ O
Interface _ _ O
Client _ _ O
Server _ _ O
getaddrinfo _ _ O
getaddrinfo _ _ O
socket _ _ O
socket _ _ O
open_listenfd _ _ O
open_clientfd _ _ O
bind _ _ O
listen _ _ O
connect _ _ O
Client _ _ O
/ _ _ O
Server _ _ O
Session _ _ O
Connection _ _ O
request _ _ O
accept _ _ O
write _ _ O
read _ _ O
read _ _ O
write _ _ O
close _ _ O
EOF _ _ O
read _ _ O
close _ _ O
Await _ _ O
connection _ _ O
request _ _ O
from _ _ O
next _ _ O
client _ _ O

Sockets _ _ O
Helper _ _ O
: _ _ O
open_listenfd _ _ O
• _ _ O
Create _ _ O
a _ _ O
listening _ _ O
descriptor _ _ O
that _ _ O
can _ _ O
be _ _ O
used _ _ O
to _ _ O
accept _ _ O
connection _ _ O
requests _ _ O
from _ _ O
clients _ _ O
. _ _ O
int _ _ O
open_listenfd _ _ O
( _ _ O
char _ _ O
* _ _ O
port _ _ O
) _ _ O
{ _ _ O
struct _ _ O
addrinfo _ _ O
hints _ _ O
, _ _ O
* _ _ O
listp _ _ O
, _ _ O
* _ _ O
p _ _ O
; _ _ O
int _ _ O
listenfd _ _ O
, _ _ O
optval=1 _ _ O
; _ _ O
/ _ _ O
* _ _ O
Get _ _ O
a _ _ O
list _ _ O
of _ _ O
potential _ _ O
server _ _ O
addresses _ _ O
* _ _ O
/ _ _ O
memset _ _ O
( _ _ O
& _ _ O
hints _ _ O
, _ _ O
0 _ _ O
, _ _ O
sizeof _ _ O
( _ _ O
struct _ _ O
addrinfo _ _ O
) _ _ O
) _ _ O
; _ _ O
hints.ai_socktype _ _ O
= _ _ O
SOCK_STREAM _ _ O
; _ _ O
/ _ _ O
* _ _ O
Accept _ _ O
connect _ _ O
. _ _ O
* _ _ O
/ _ _ O
hints.ai_flags _ _ O
= _ _ O
AI_PASSIVE _ _ O
| _ _ O
AI_ADDRCONFIG _ _ O
; _ _ O
/ _ _ O
* _ _ O
… _ _ O
on _ _ O
any _ _ O
IP _ _ O
addr _ _ O
* _ _ O
/ _ _ O
hints.ai_flags _ _ O
|= _ _ O
AI_NUMERICSERV _ _ O
; _ _ O
/ _ _ O
* _ _ O
… _ _ O
using _ _ O
port _ _ O
no _ _ O
. _ _ O
* _ _ O
/ _ _ O
getaddrinfo _ _ O
( _ _ O
NULL _ _ O
, _ _ O
port _ _ O
, _ _ O
& _ _ O
hints _ _ O
, _ _ O
& _ _ O
listp _ _ O
) _ _ O
; _ _ O
csapp.c _ _ O

Sockets _ _ O
Helper _ _ O
: _ _ O
open_listenfd _ _ O
( _ _ O
cont _ _ O
) _ _ O
/ _ _ O
* _ _ O
Walk _ _ O
the _ _ O
list _ _ O
for _ _ O
one _ _ O
that _ _ O
we _ _ O
can _ _ O
bind _ _ O
to _ _ O
* _ _ O
/ _ _ O
for _ _ O
( _ _ O
p _ _ O
= _ _ O
listp _ _ O
; _ _ O
p _ _ O
; _ _ O
p _ _ O
= _ _ O
p- _ _ O
> _ _ O
ai_next _ _ O
) _ _ O
{ _ _ O
/ _ _ O
* _ _ O
Create _ _ O
a _ _ O
socket _ _ O
descriptor _ _ O
* _ _ O
/ _ _ O
if _ _ O
( _ _ O
( _ _ O
listenfd _ _ O
= _ _ O
socket _ _ O
( _ _ O
p- _ _ O
> _ _ O
ai_family _ _ O
, _ _ O
p- _ _ O
> _ _ O
ai_socktype _ _ O
, _ _ O
p- _ _ O
> _ _ O
ai_protocol _ _ O
) _ _ O
) _ _ O
< _ _ O
0 _ _ O
) _ _ O
continue _ _ O
; _ _ O
/ _ _ O
* _ _ O
Socket _ _ O
failed _ _ O
, _ _ O
try _ _ O
the _ _ O
next _ _ O
* _ _ O
/ _ _ O
/ _ _ O
* _ _ O
Eliminates _ _ O
" _ _ O
Address _ _ O
already _ _ O
in _ _ O
use _ _ O
" _ _ O
error _ _ O
from _ _ O
bind _ _ O
* _ _ O
/ _ _ O
setsockopt _ _ O
( _ _ O
listenfd _ _ O
, _ _ O
SOL_SOCKET _ _ O
, _ _ O
SO_REUSEADDR _ _ O
, _ _ O
( _ _ O
const _ _ O
void _ _ O
* _ _ O
) _ _ O
& _ _ O
optval _ _ O
, _ _ O
sizeof _ _ O
( _ _ O
int _ _ O
) _ _ O
) _ _ O
; _ _ O
/ _ _ O
* _ _ O
Bind _ _ O
the _ _ O
descriptor _ _ O
to _ _ O
the _ _ O
address _ _ O
* _ _ O
/ _ _ O
if _ _ O
( _ _ O
bind _ _ O
( _ _ O
listenfd _ _ O
, _ _ O
p- _ _ O
> _ _ O
ai_addr _ _ O
, _ _ O
p- _ _ O
> _ _ O
ai_addrlen _ _ O
) _ _ O
= _ _ O
= _ _ O
0 _ _ O
) _ _ O
break _ _ O
; _ _ O
/ _ _ O
* _ _ O
Success _ _ O
* _ _ O
/ _ _ O
close _ _ O
( _ _ O
listenfd _ _ O
) _ _ O
; _ _ O
/ _ _ O
* _ _ O
Bind _ _ O
failed _ _ O
, _ _ O
try _ _ O
the _ _ O
next _ _ O
* _ _ O
/ _ _ O
} _ _ O
csapp.c _ _ O

Sockets _ _ O
Helper _ _ O
: _ _ O
open_listenfd _ _ O
( _ _ O
cont _ _ O
) _ _ O
/ _ _ O
* _ _ O
Clean _ _ O
up _ _ O
* _ _ O
/ _ _ O
freeaddrinfo _ _ O
( _ _ O
listp _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
! _ _ O
p _ _ O
) _ _ O
/ _ _ O
* _ _ O
No _ _ O
address _ _ O
worked _ _ O
* _ _ O
/ _ _ O
return _ _ O
-1 _ _ O
; _ _ O
/ _ _ O
* _ _ O
Make _ _ O
it _ _ O
a _ _ O
listening _ _ O
socket _ _ O
ready _ _ O
to _ _ O
accept _ _ O
conn _ _ O
. _ _ O
requests _ _ O
* _ _ O
/ _ _ O
if _ _ O
( _ _ O
listen _ _ O
( _ _ O
listenfd _ _ O
, _ _ O
LISTENQ _ _ O
) _ _ O
< _ _ O
0 _ _ O
) _ _ O
{ _ _ O
close _ _ O
( _ _ O
listenfd _ _ O
) _ _ O
; _ _ O
return _ _ O
-1 _ _ O
; _ _ O
} _ _ O
return _ _ O
listenfd _ _ O
; _ _ O
csapp.c _ _ O
} _ _ O
¢ _ _ O
Key _ _ O
point _ _ O
: _ _ O
open_clientfd _ _ O
and _ _ O
open_listenfd _ _ O
are _ _ O
both _ _ O
independent _ _ O
of _ _ O
any _ _ O
particular _ _ O
version _ _ O
of _ _ O
IP _ _ O
. _ _ O

Case _ _ O
Study _ _ O
Tiny _ _ O
Web _ _ O
Server _ _ O

Tiny _ _ O
Web _ _ O
Server _ _ O
• _ _ O
Tiny _ _ O
Web _ _ O
server _ _ O
described _ _ O
in _ _ O
textbook _ _ O
( _ _ O
CS _ _ O
: _ _ O
APP _ _ O
) _ _ O
• _ _ O
Tiny _ _ O
is _ _ O
a _ _ O
sequential _ _ O
Web _ _ O
server _ _ O
• _ _ O
Serves _ _ O
static _ _ O
and _ _ O
dynamic _ _ O
content _ _ O
to _ _ O
real _ _ O
browsers _ _ O
• _ _ O
text _ _ O
files _ _ O
, _ _ O
HTML _ _ O
files _ _ O
, _ _ O
GIF _ _ O
, _ _ O
PNG _ _ O
, _ _ O
and _ _ O
JPEG _ _ O
images _ _ O
• _ _ O
239 _ _ O
lines _ _ O
of _ _ O
commented _ _ O
C _ _ O
code _ _ O
• _ _ O
Not _ _ O
as _ _ O
complete _ _ O
or _ _ O
robust _ _ O
as _ _ O
a _ _ O
real _ _ O
Web _ _ O
server _ _ O
• _ _ O
You _ _ O
can _ _ O
break _ _ O
it _ _ O
with _ _ O
poorly-formed _ _ O
HTTP _ _ O
requests _ _ O
( _ _ O
e.g. _ _ O
, _ _ O
terminate _ _ O
lines _ _ O
with _ _ O
“ _ _ O
\n _ _ O
” _ _ O
instead _ _ O
of _ _ O
“ _ _ O
\r\n _ _ O
” _ _ O
) _ _ O

Tiny _ _ O
Operation _ _ O
• _ _ O
Accept _ _ O
connection _ _ O
from _ _ O
client _ _ O
• _ _ O
Read _ _ O
request _ _ O
from _ _ O
client _ _ O
( _ _ O
via _ _ O
connected _ _ O
socket _ _ O
) _ _ O
• _ _ O
Split _ _ O
into _ _ O
< _ _ O
method _ _ O
> _ _ O
< _ _ O
uri _ _ O
> _ _ O
< _ _ O
version _ _ O
> _ _ O
• _ _ O
If _ _ O
method _ _ O
not _ _ O
GET _ _ O
, _ _ O
then _ _ O
return _ _ O
error _ _ O
• _ _ O
If _ _ O
URI _ _ O
contains _ _ O
“ _ _ O
cgi-bin _ _ O
” _ _ O
then _ _ O
serve _ _ O
dynamic _ _ O
content _ _ O
• _ _ O
( _ _ O
Would _ _ O
do _ _ O
wrong _ _ O
thing _ _ O
if _ _ O
had _ _ O
file _ _ O
“ _ _ O
abcgi-bingo.html _ _ O
” _ _ O
) _ _ O
• _ _ O
Fork _ _ O
process _ _ O
to _ _ O
execute _ _ O
program _ _ O
• _ _ O
Otherwise _ _ O
serve _ _ O
static _ _ O
content _ _ O
• _ _ O
Copy _ _ O
file _ _ O
to _ _ O
output _ _ O

Tiny _ _ O
Serving _ _ O
Static _ _ O
Content _ _ O
void _ _ O
serve_static _ _ O
( _ _ O
int _ _ O
fd _ _ O
, _ _ O
char _ _ O
* _ _ O
filename _ _ O
, _ _ O
int _ _ O
filesize _ _ O
) _ _ O
{ _ _ O
int _ _ O
srcfd _ _ O
; _ _ O
char _ _ O
* _ _ O
srcp _ _ O
, _ _ O
filetype _ _ O
[ _ _ O
MAXLINE _ _ O
] _ _ O
, _ _ O
buf _ _ O
[ _ _ O
MAXBUF _ _ O
] _ _ O
; _ _ O
/ _ _ O
* _ _ O
Send _ _ O
response _ _ O
headers _ _ O
to _ _ O
client _ _ O
* _ _ O
/ _ _ O
get_filetype _ _ O
( _ _ O
filename _ _ O
, _ _ O
filetype _ _ O
) _ _ O
; _ _ O
sprintf _ _ O
( _ _ O
buf _ _ O
, _ _ O
" _ _ O
HTTP _ _ O
/ _ _ O
1.0 _ _ O
200 _ _ O
OK\r\n _ _ O
" _ _ O
) _ _ O
; _ _ O
sprintf _ _ O
( _ _ O
buf _ _ O
, _ _ O
" _ _ O
% _ _ O
sServer _ _ O
: _ _ O
Tiny _ _ O
Web _ _ O
Server\r\n _ _ O
" _ _ O
, _ _ O
buf _ _ O
) _ _ O
; _ _ O
sprintf _ _ O
( _ _ O
buf _ _ O
, _ _ O
" _ _ O
% _ _ O
sConnection _ _ O
: _ _ O
close\r\n _ _ O
" _ _ O
, _ _ O
buf _ _ O
) _ _ O
; _ _ O
sprintf _ _ O
( _ _ O
buf _ _ O
, _ _ O
" _ _ O
% _ _ O
sContent-length _ _ O
: _ _ O
% _ _ O
d\r\n _ _ O
" _ _ O
, _ _ O
buf _ _ O
, _ _ O
filesize _ _ O
) _ _ O
; _ _ O
sprintf _ _ O
( _ _ O
buf _ _ O
, _ _ O
" _ _ O
% _ _ O
sContent-type _ _ O
: _ _ O
% _ _ O
s\r\n\r\n _ _ O
" _ _ O
, _ _ O
buf _ _ O
, _ _ O
filetype _ _ O
) _ _ O
; _ _ O
write _ _ O
( _ _ O
fd _ _ O
, _ _ O
buf _ _ O
, _ _ O
strlen _ _ O
( _ _ O
buf _ _ O
) _ _ O
) _ _ O
; _ _ O
/ _ _ O
* _ _ O
Send _ _ O
response _ _ O
body _ _ O
to _ _ O
client _ _ O
* _ _ O
/ _ _ O
srcfd _ _ O
= _ _ O
open _ _ O
( _ _ O
filename _ _ O
, _ _ O
O_RDONLY _ _ O
, _ _ O
0 _ _ O
) _ _ O
; _ _ O
srcp _ _ O
= _ _ O
mmap _ _ O
( _ _ O
0 _ _ O
, _ _ O
filesize _ _ O
, _ _ O
PROT_READ _ _ O
, _ _ O
MAP_PRIVATE _ _ O
, _ _ O
srcfd _ _ O
, _ _ O
0 _ _ O
) _ _ O
; _ _ O
close _ _ O
( _ _ O
srcfd _ _ O
) _ _ O
; _ _ O
write _ _ O
( _ _ O
fd _ _ O
, _ _ O
srcp _ _ O
, _ _ O
filesize _ _ O
) _ _ O
; _ _ O
munmap _ _ O
( _ _ O
srcp _ _ O
, _ _ O
filesize _ _ O
) _ _ O
; _ _ O
} _ _ O
tiny.c _ _ O

Serving _ _ O
Dynamic _ _ O
Content _ _ O
• _ _ O
Client _ _ O
sends _ _ O
request _ _ O
to _ _ O
server _ _ O
GET _ _ O
/cgi-bin _ _ O
/ _ _ O
env.pl _ _ O
HTTP _ _ O
/ _ _ O
1.1 _ _ O
Client _ _ O
• _ _ O
If _ _ O
request _ _ O
URI _ _ O
contains _ _ O
the _ _ O
string _ _ O
“ _ _ O
/cgi-bin _ _ O
” _ _ O
, _ _ O
the _ _ O
Tiny _ _ O
server _ _ O
assumes _ _ O
that _ _ O
the _ _ O
request _ _ O
is _ _ O
for _ _ O
dynamic _ _ O
content _ _ O
Server _ _ O

Serving _ _ O
Dynamic _ _ O
Content _ _ O
( _ _ O
cont _ _ O
) _ _ O
• _ _ O
The _ _ O
server _ _ O
creates _ _ O
a _ _ O
child _ _ O
process _ _ O
and _ _ O
runs _ _ O
the _ _ O
program _ _ O
identified _ _ O
by _ _ O
the _ _ O
URI _ _ O
in _ _ O
that _ _ O
process _ _ O
Client _ _ O
Server _ _ O
fork _ _ O
/ _ _ O
exec _ _ O
env.pl _ _ O

Serving _ _ O
Dynamic _ _ O
Content _ _ O
( _ _ O
cont _ _ O
) _ _ O
• _ _ O
The _ _ O
child _ _ O
runs _ _ O
and _ _ O
generates _ _ O
the _ _ O
dynamic _ _ O
content _ _ O
• _ _ O
The _ _ O
server _ _ O
captures _ _ O
the _ _ O
content _ _ O
of _ _ O
the _ _ O
child _ _ O
and _ _ O
forwards _ _ O
it _ _ O
without _ _ O
modification _ _ O
to _ _ O
the _ _ O
client _ _ O
Client _ _ O
Content _ _ O
Server _ _ O
Content _ _ O
env.pl _ _ O

Issues _ _ O
in _ _ O
Serving _ _ O
Dynamic _ _ O
Content _ _ O
• _ _ O
How _ _ O
does _ _ O
the _ _ O
client _ _ O
pass _ _ O
program _ _ O
arguments _ _ O
to _ _ O
the _ _ O
server _ _ O
? _ _ O
Client _ _ O
• _ _ O
How _ _ O
does _ _ O
the _ _ O
server _ _ O
pass _ _ O
these _ _ O
arguments _ _ O
to _ _ O
the _ _ O
child _ _ O
? _ _ O
• _ _ O
How _ _ O
does _ _ O
the _ _ O
server _ _ O
pass _ _ O
other _ _ O
info _ _ O
relevant _ _ O
to _ _ O
the _ _ O
request _ _ O
to _ _ O
the _ _ O
child _ _ O
? _ _ O
• _ _ O
How _ _ O
does _ _ O
the _ _ O
server _ _ O
capture _ _ O
the _ _ O
content _ _ O
produced _ _ O
by _ _ O
the _ _ O
child _ _ O
? _ _ O
• _ _ O
These _ _ O
issues _ _ O
are _ _ O
addressed _ _ O
by _ _ O
the _ _ O
Common _ _ O
Gateway _ _ O
Interface _ _ O
( _ _ O
CGI _ _ O
) _ _ O
specification _ _ O
. _ _ O
Request _ _ O
Content _ _ O
Content _ _ O
Server _ _ O
Create _ _ O
env.pl _ _ O

CGI _ _ O
• _ _ O
Because _ _ O
the _ _ O
children _ _ O
are _ _ O
written _ _ O
according _ _ O
to _ _ O
the _ _ O
CGI _ _ O
spec _ _ O
, _ _ O
they _ _ O
are _ _ O
often _ _ O
called _ _ O
CGI _ _ O
programs _ _ O
. _ _ O
• _ _ O
However _ _ O
, _ _ O
CGI _ _ O
really _ _ O
defines _ _ O
a _ _ O
simple _ _ O
standard _ _ O
for _ _ O
transferring _ _ O
information _ _ O
between _ _ O
the _ _ O
client _ _ O
( _ _ O
browser _ _ O
) _ _ O
, _ _ O
the _ _ O
server _ _ O
, _ _ O
and _ _ O
the _ _ O
child _ _ O
process _ _ O
. _ _ O
• _ _ O
CGI _ _ O
is _ _ O
the _ _ O
original _ _ O
standard _ _ O
for _ _ O
generating _ _ O
dynamic _ _ O
content _ _ O
. _ _ O
Has _ _ O
been _ _ O
largely _ _ O
replaced _ _ O
by _ _ O
other _ _ O
, _ _ O
faster _ _ O
techniques _ _ O
: _ _ O
• _ _ O
E.g. _ _ O
, _ _ O
fastCGI _ _ O
, _ _ O
Apache _ _ O
modules _ _ O
, _ _ O
Java _ _ O
servlets _ _ O
, _ _ O
Rails _ _ O
controllers _ _ O
• _ _ O
Avoid _ _ O
having _ _ O
to _ _ O
create _ _ O
process _ _ O
on _ _ O
the _ _ O
fly _ _ O
( _ _ O
expensive _ _ O
and _ _ O
slow _ _ O
) _ _ O
. _ _ O

The _ _ O
add.com _ _ O
Experience _ _ O
host _ _ O
port _ _ O
CGI _ _ O
program _ _ O
arguments _ _ O
Output _ _ O
page _ _ O

Serving _ _ O
Dynamic _ _ O
Content _ _ O
With _ _ O
GET _ _ O
• _ _ O
Question _ _ O
: _ _ O
How _ _ O
does _ _ O
the _ _ O
client _ _ O
pass _ _ O
arguments _ _ O
to _ _ O
the _ _ O
server _ _ O
? _ _ O
• _ _ O
Answer _ _ O
: _ _ O
The _ _ O
arguments _ _ O
are _ _ O
appended _ _ O
to _ _ O
the _ _ O
URI _ _ O
• _ _ O
Can _ _ O
be _ _ O
encoded _ _ O
directly _ _ O
in _ _ O
a _ _ O
URL _ _ O
typed _ _ O
to _ _ O
a _ _ O
browser _ _ O
or _ _ O
a _ _ O
URL _ _ O
in _ _ O
an _ _ O
HTML _ _ O
link _ _ O
• _ _ O
http _ _ O
: _ _ O
/ _ _ O
/ _ _ O
add.com _ _ O
/ _ _ O
cgi-bin _ _ O
/ _ _ O
adder?15213 _ _ O
& _ _ O
18213 _ _ O
• _ _ O
adder _ _ O
is _ _ O
the _ _ O
CGI _ _ O
program _ _ O
on _ _ O
the _ _ O
server _ _ O
that _ _ O
will _ _ O
do _ _ O
the _ _ O
addition _ _ O
. _ _ O
• _ _ O
argument _ _ O
list _ _ O
starts _ _ O
with _ _ O
“ _ _ O
? _ _ O
” _ _ O
• _ _ O
arguments _ _ O
separated _ _ O
by _ _ O
“ _ _ O
& _ _ O
” _ _ O
• _ _ O
spaces _ _ O
represented _ _ O
by _ _ O
“ _ _ O
+ _ _ O
” _ _ O
or _ _ O
“ _ _ O
% _ _ O
20 _ _ O
” _ _ O

Serving _ _ O
Dynamic _ _ O
Content _ _ O
With _ _ O
GET _ _ O
• _ _ O
URL _ _ O
suffix _ _ O
: _ _ O
• _ _ O
cgi-bin _ _ O
/ _ _ O
adder?15213 _ _ O
& _ _ O
18213 _ _ O
• _ _ O
Result _ _ O
displayed _ _ O
on _ _ O
browser _ _ O
: _ _ O
Welcome _ _ O
to _ _ O
add.com _ _ O
: _ _ O
THE _ _ O
Internet _ _ O
addition _ _ O
portal _ _ O
. _ _ O
The _ _ O
answer _ _ O
is _ _ O
: _ _ O
15213 _ _ O
+ _ _ O
18213 _ _ O
= _ _ O
33426 _ _ O
Thanks _ _ O
for _ _ O
visiting _ _ O
! _ _ O

Serving _ _ O
Dynamic _ _ O
Content _ _ O
With _ _ O
GET _ _ O
• _ _ O
Question _ _ O
: _ _ O
How _ _ O
does _ _ O
the _ _ O
server _ _ O
pass _ _ O
these _ _ O
arguments _ _ O
to _ _ O
the _ _ O
child _ _ O
? _ _ O
• _ _ O
Answer _ _ O
: _ _ O
In _ _ O
environment _ _ O
variable _ _ O
QUERY_STRING _ _ O
• _ _ O
A _ _ O
single _ _ O
string _ _ O
containing _ _ O
everything _ _ O
after _ _ O
the _ _ O
“ _ _ O
? _ _ O
” _ _ O
• _ _ O
For _ _ O
add _ _ O
: _ _ O
QUERY_STRING _ _ O
= _ _ O
“ _ _ O
15213 _ _ O
& _ _ O
18213 _ _ O
” _ _ O
/ _ _ O
* _ _ O
Extract _ _ O
the _ _ O
two _ _ O
arguments _ _ O
* _ _ O
/ _ _ O
if _ _ O
( _ _ O
( _ _ O
buf _ _ O
= _ _ O
getenv _ _ O
( _ _ O
"QUERY_STRING _ _ O
" _ _ O
) _ _ O
) _ _ O
! _ _ O
= _ _ O
NULL _ _ O
) _ _ O
{ _ _ O
p _ _ O
= _ _ O
strchr _ _ O
( _ _ O
buf _ _ O
, _ _ O
' _ _ O
& _ _ O
' _ _ O
) _ _ O
; _ _ O
* _ _ O
p _ _ O
= _ _ O
' _ _ O
\0 _ _ O
' _ _ O
; _ _ O
strcpy _ _ O
( _ _ O
arg1 _ _ O
, _ _ O
buf _ _ O
) _ _ O
; _ _ O
strcpy _ _ O
( _ _ O
arg2 _ _ O
, _ _ O
p+1 _ _ O
) _ _ O
; _ _ O
n1 _ _ O
= _ _ O
atoi _ _ O
( _ _ O
arg1 _ _ O
) _ _ O
; _ _ O
n2 _ _ O
= _ _ O
atoi _ _ O
( _ _ O
arg2 _ _ O
) _ _ O
; _ _ O
} _ _ O
adder.c _ _ O

Serving _ _ O
Dynamic _ _ O
Content _ _ O
with _ _ O
GET _ _ O
• _ _ O
Question _ _ O
: _ _ O
How _ _ O
does _ _ O
the _ _ O
server _ _ O
capture _ _ O
the _ _ O
content _ _ O
produced _ _ O
by _ _ O
the _ _ O
child _ _ O
? _ _ O
• _ _ O
Answer _ _ O
: _ _ O
The _ _ O
child _ _ O
generates _ _ O
its _ _ O
output _ _ O
on _ _ O
stdout _ _ O
. _ _ O
Server _ _ O
uses _ _ O
dup2 _ _ O
to _ _ O
redirect _ _ O
stdout _ _ O
to _ _ O
its _ _ O
connected _ _ O
socket _ _ O
. _ _ O
void _ _ O
serve_dynamic _ _ O
( _ _ O
int _ _ O
fd _ _ O
, _ _ O
char _ _ O
* _ _ O
filename _ _ O
, _ _ O
char _ _ O
* _ _ O
cgiargs _ _ O
) _ _ O
{ _ _ O
char _ _ O
buf _ _ O
[ _ _ O
MAXLINE _ _ O
] _ _ O
, _ _ O
* _ _ O
emptylist _ _ O
[ _ _ O
] _ _ O
= _ _ O
{ _ _ O
NULL _ _ O
} _ _ O
; _ _ O
/ _ _ O
* _ _ O
Return _ _ O
first _ _ O
part _ _ O
of _ _ O
HTTP _ _ O
response _ _ O
* _ _ O
/ _ _ O
sprintf _ _ O
( _ _ O
buf _ _ O
, _ _ O
" _ _ O
HTTP _ _ O
/ _ _ O
1.0 _ _ O
200 _ _ O
OK\r\n _ _ O
" _ _ O
) _ _ O
; _ _ O
Rio_writen _ _ O
( _ _ O
fd _ _ O
, _ _ O
buf _ _ O
, _ _ O
strlen _ _ O
( _ _ O
buf _ _ O
) _ _ O
) _ _ O
; _ _ O
sprintf _ _ O
( _ _ O
buf _ _ O
, _ _ O
" _ _ O
Server _ _ O
: _ _ O
Tiny _ _ O
Web _ _ O
Server\r\n _ _ O
" _ _ O
) _ _ O
; _ _ O
Rio_writen _ _ O
( _ _ O
fd _ _ O
, _ _ O
buf _ _ O
, _ _ O
strlen _ _ O
( _ _ O
buf _ _ O
) _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
Fork _ _ O
( _ _ O
) _ _ O
= _ _ O
= _ _ O
0 _ _ O
) _ _ O
{ _ _ O
/ _ _ O
* _ _ O
Child _ _ O
* _ _ O
/ _ _ O
/ _ _ O
* _ _ O
Real _ _ O
server _ _ O
would _ _ O
set _ _ O
all _ _ O
CGI _ _ O
vars _ _ O
here _ _ O
* _ _ O
/ _ _ O
setenv _ _ O
( _ _ O
"QUERY_STRING _ _ O
" _ _ O
, _ _ O
cgiargs _ _ O
, _ _ O
1 _ _ O
) _ _ O
; _ _ O
Dup2 _ _ O
( _ _ O
fd _ _ O
, _ _ O
STDOUT_FILENO _ _ O
) _ _ O
; _ _ O
/ _ _ O
* _ _ O
Redirect _ _ O
stdout _ _ O
to _ _ O
client _ _ O
* _ _ O
/ _ _ O
Execve _ _ O
( _ _ O
filename _ _ O
, _ _ O
emptylist _ _ O
, _ _ O
environ _ _ O
) _ _ O
; _ _ O
/ _ _ O
* _ _ O
Run _ _ O
CGI _ _ O
program _ _ O
* _ _ O
/ _ _ O
} _ _ O
Wait _ _ O
( _ _ O
NULL _ _ O
) _ _ O
; _ _ O
/ _ _ O
* _ _ O
Parent _ _ O
waits _ _ O
for _ _ O
and _ _ O
reaps _ _ O
child _ _ O
* _ _ O
/ _ _ O
} _ _ O
tiny.c _ _ O

Serving _ _ O
Dynamic _ _ O
Content _ _ O
with _ _ O
GET _ _ O
¢ _ _ O
Notice _ _ O
that _ _ O
only _ _ O
the _ _ O
CGI _ _ O
child _ _ O
process _ _ O
knows _ _ O
the _ _ O
content _ _ O
type _ _ O
and _ _ O
length _ _ O
, _ _ O
so _ _ O
it _ _ O
must _ _ O
generate _ _ O
those _ _ O
headers _ _ O
. _ _ O
/ _ _ O
* _ _ O
Make _ _ O
the _ _ O
response _ _ O
body _ _ O
* _ _ O
/ _ _ O
sprintf _ _ O
( _ _ O
content _ _ O
, _ _ O
" _ _ O
Welcome _ _ O
to _ _ O
add.com _ _ O
: _ _ O
") _ _ O
; _ _ O
sprintf _ _ O
( _ _ O
content _ _ O
, _ _ O
" _ _ O
% _ _ O
sTHE _ _ O
Internet _ _ O
addition _ _ O
portal.\r\n _ _ O
< _ _ O
p _ _ O
> _ _ O
" _ _ O
, _ _ O
content _ _ O
) _ _ O
; _ _ O
sprintf _ _ O
( _ _ O
content _ _ O
, _ _ O
" _ _ O
% _ _ O
sThe _ _ O
answer _ _ O
is _ _ O
: _ _ O
% _ _ O
d _ _ O
+ _ _ O
% _ _ O
d _ _ O
= _ _ O
% _ _ O
d\r\n _ _ O
< _ _ O
p _ _ O
> _ _ O
" _ _ O
, _ _ O
content _ _ O
, _ _ O
n1 _ _ O
, _ _ O
n2 _ _ O
, _ _ O
n1 _ _ O
+ _ _ O
n2 _ _ O
) _ _ O
; _ _ O
sprintf _ _ O
( _ _ O
content _ _ O
, _ _ O
" _ _ O
% _ _ O
sThanks _ _ O
for _ _ O
visiting _ _ O
! _ _ O
\r\n _ _ O
" _ _ O
, _ _ O
content _ _ O
) _ _ O
; _ _ O
/ _ _ O
* _ _ O
Generate _ _ O
the _ _ O
HTTP _ _ O
response _ _ O
* _ _ O
/ _ _ O
printf _ _ O
( _ _ O
"Content-length _ _ O
: _ _ O
% _ _ O
d\r\n _ _ O
" _ _ O
, _ _ O
( _ _ O
int _ _ O
) _ _ O
strlen _ _ O
( _ _ O
content _ _ O
) _ _ O
) _ _ O
; _ _ O
printf _ _ O
( _ _ O
"Content-type _ _ O
: _ _ O
text _ _ O
/ _ _ O
html\r\n\r\n _ _ O
" _ _ O
) _ _ O
; _ _ O
printf _ _ O
( _ _ O
"%s _ _ O
" _ _ O
, _ _ O
content _ _ O
) _ _ O
; _ _ O
fflush _ _ O
( _ _ O
stdout _ _ O
) _ _ O
; _ _ O
exit _ _ O
( _ _ O
0 _ _ O
) _ _ O
; _ _ O
adder.c _ _ O

Serving _ _ O
Dynamic _ _ O
Content _ _ O
With _ _ O
GET _ _ O
bash _ _ O
: _ _ O
makoshark _ _ O
> _ _ O
telnet _ _ O
whaleshark.ics.cs.cmu.edu _ _ O
15213 _ _ O
Trying _ _ O
128.2.210.175 _ _ O
... _ _ O
Connected _ _ O
to _ _ O
whaleshark.ics.cs.cmu.edu _ _ O
( _ _ O
128.2.210.175 _ _ O
) _ _ O
. _ _ O
Escape _ _ O
character _ _ O
is _ _ O
' _ _ O
^ _ _ O
] _ _ O
' _ _ O
. _ _ O
GET _ _ O
/cgi-bin _ _ O
/ _ _ O
adder?15213 _ _ O
& _ _ O
18213 _ _ O
HTTP _ _ O
/ _ _ O
1.0 _ _ O
HTTP _ _ O
request _ _ O
sent _ _ O
by _ _ O
client _ _ O
HTTP _ _ O
/ _ _ O
1.0 _ _ O
200 _ _ O
OK _ _ O
Server _ _ O
: _ _ O
Tiny _ _ O
Web _ _ O
Server _ _ O
Connection _ _ O
: _ _ O
close _ _ O
Content-length _ _ O
: _ _ O
117 _ _ O
Content-type _ _ O
: _ _ O
text _ _ O
/ _ _ O
html _ _ O
HTTP _ _ O
response _ _ O
generated _ _ O
by _ _ O
the _ _ O
server _ _ O
HTTP _ _ O
response _ _ O
generated _ _ O
Welcome _ _ O
to _ _ O
add.com _ _ O
: _ _ O
THE _ _ O
Internet _ _ O
addition _ _ O
portal _ _ O
. _ _ O
by _ _ O
the _ _ O
CGI _ _ O
program _ _ O
< _ _ O
p _ _ O
> _ _ O
The _ _ O
answer _ _ O
is _ _ O
: _ _ O
15213 _ _ O
+ _ _ O
18213 _ _ O
= _ _ O
33426 _ _ O
< _ _ O
p _ _ O
> _ _ O
Thanks _ _ O
for _ _ O
visiting _ _ O
! _ _ O
Connection _ _ O
closed _ _ O
by _ _ O
foreign _ _ O
host _ _ O
. _ _ O
bash _ _ O
: _ _ O
makoshark _ _ O
> _ _ O

For _ _ O
More _ _ O
Information _ _ O
• _ _ O
W. _ _ O
Richard _ _ O
Stevens _ _ O
et _ _ O
. _ _ O
al _ _ O
. _ _ O
“ _ _ O
Unix _ _ O
Network _ _ O
Programming _ _ O
: _ _ O
The _ _ O
Sockets _ _ O
Networking _ _ O
API _ _ O
” _ _ O
, _ _ O
Volume _ _ O
1 _ _ O
, _ _ O
Third _ _ O
Edition _ _ O
, _ _ O
Prentice _ _ O
Hall _ _ O
, _ _ O
2003 _ _ O
• _ _ O
THE _ _ O
network _ _ O
programming _ _ O
bible _ _ O
. _ _ O
• _ _ O
Michael _ _ O
Kerrisk _ _ O
, _ _ O
“ _ _ O
The _ _ O
Linux _ _ O
Programming _ _ O
Interface _ _ O
” _ _ O
, _ _ O
No _ _ O
Starch _ _ O
Press _ _ O
, _ _ O
2010 _ _ O
• _ _ O
THE _ _ O
Linux _ _ O
programming _ _ O
bible _ _ O
. _ _ O
• _ _ O
Code _ _ O
examples _ _ O
• _ _ O
csapp.{.c _ _ O
, _ _ O
h _ _ O
} _ _ O
, _ _ O
hostinfo.c _ _ O
, _ _ O
echoclient.c _ _ O
, _ _ O
echoserveri.c _ _ O
, _ _ O
tiny.c _ _ O
, _ _ O
adder.c _ _ O
• _ _ O
You _ _ O
can _ _ O
use _ _ O
any _ _ O
of _ _ O
this _ _ O
code _ _ O
in _ _ O
your _ _ O
assignments _ _ O
. _ _ O

BONUS _ _ O
SLIDES _ _ O
The _ _ O
following _ _ O
slides _ _ O
are _ _ O
for _ _ O
those _ _ O
curious _ _ O
. _ _ O
You _ _ O
will _ _ O
NOT _ _ O
be _ _ O
expected _ _ O
to _ _ O
know _ _ O
this _ _ O
material _ _ O
. _ _ O

Lowest _ _ O
Level _ _ O
: _ _ O
Ethernet _ _ O
Segment _ _ O
host _ _ O
100 _ _ O
Mb _ _ O
/ _ _ O
s _ _ O
host _ _ O
hub _ _ O
host _ _ O
100 _ _ O
Mb _ _ O
/ _ _ O
s _ _ O
port _ _ O
• _ _ O
Ethernet _ _ O
segment _ _ O
consists _ _ O
of _ _ O
a _ _ O
collection _ _ O
of _ _ O
hosts _ _ O
connected _ _ O
by _ _ O
wires _ _ O
( _ _ O
twisted _ _ O
pairs _ _ O
) _ _ O
to _ _ O
a _ _ O
hub _ _ O
• _ _ O
Spans _ _ O
room _ _ O
or _ _ O
floor _ _ O
in _ _ O
a _ _ O
building _ _ O
• _ _ O
Operation _ _ O
• _ _ O
Each _ _ O
Ethernet _ _ O
adapter _ _ O
has _ _ O
a _ _ O
unique _ _ O
48-bit _ _ O
address _ _ O
( _ _ O
MAC _ _ O
address _ _ O
) _ _ O
• _ _ O
E.g. _ _ O
, _ _ O
00 _ _ O
: _ _ O
16 _ _ O
: _ _ O
ea _ _ O
: _ _ O
e3 _ _ O
: _ _ O
54 _ _ O
: _ _ O
e6 _ _ O
• _ _ O
Hosts _ _ O
send _ _ O
bits _ _ O
to _ _ O
any _ _ O
other _ _ O
host _ _ O
in _ _ O
chunks _ _ O
called _ _ O
frames _ _ O
• _ _ O
Hub _ _ O
slavishly _ _ O
copies _ _ O
each _ _ O
bit _ _ O
from _ _ O
each _ _ O
port _ _ O
to _ _ O
every _ _ O
other _ _ O
port _ _ O
• _ _ O
Every _ _ O
host _ _ O
sees _ _ O
every _ _ O
bit _ _ O
[ _ _ O
Note _ _ O
: _ _ O
Hubs _ _ O
are _ _ O
obsolete _ _ O
. _ _ O
Bridges _ _ O
( _ _ O
switches _ _ O
, _ _ O
routers _ _ O
) _ _ O
became _ _ O
cheap _ _ O
enough _ _ O
to _ _ O
replace _ _ O
them _ _ O
] _ _ O

Next _ _ O
Level _ _ O
: _ _ O
Bridged _ _ O
Ethernet _ _ O
Segment _ _ O
A _ _ O
host _ _ O
host _ _ O
hub _ _ O
B _ _ O
host _ _ O
100 _ _ O
Mb _ _ O
/ _ _ O
s _ _ O
host _ _ O
X _ _ O
bridge _ _ O
100 _ _ O
Mb _ _ O
/ _ _ O
s _ _ O
1 _ _ O
Gb _ _ O
/ _ _ O
s _ _ O
hub _ _ O
host _ _ O
host _ _ O
100 _ _ O
Mb _ _ O
/ _ _ O
s _ _ O
bridge _ _ O
100 _ _ O
Mb _ _ O
/ _ _ O
s _ _ O
Y _ _ O
host _ _ O
host _ _ O
hub _ _ O
host _ _ O
host _ _ O
hub _ _ O
host _ _ O
host _ _ O
C _ _ O
• _ _ O
Spans _ _ O
building _ _ O
or _ _ O
campus _ _ O
• _ _ O
Bridges _ _ O
cleverly _ _ O
learn _ _ O
which _ _ O
hosts _ _ O
are _ _ O
reachable _ _ O
from _ _ O
which _ _ O
ports _ _ O
and _ _ O
then _ _ O
selectively _ _ O
copy _ _ O
frames _ _ O
from _ _ O
port _ _ O
to _ _ O
port _ _ O

Conceptual _ _ O
View _ _ O
of _ _ O
LANs _ _ O
• _ _ O
For _ _ O
simplicity _ _ O
, _ _ O
hubs _ _ O
, _ _ O
bridges _ _ O
, _ _ O
and _ _ O
wires _ _ O
are _ _ O
often _ _ O
shown _ _ O
as _ _ O
a _ _ O
collection _ _ O
of _ _ O
hosts _ _ O
attached _ _ O
to _ _ O
a _ _ O
single _ _ O
wire _ _ O
: _ _ O
host _ _ O
host _ _ O
... _ _ O
host _ _ O

Next _ _ O
Level _ _ O
: _ _ O
internets _ _ O
• _ _ O
Multiple _ _ O
incompatible _ _ O
LANs _ _ O
can _ _ O
be _ _ O
physically _ _ O
connected _ _ O
by _ _ O
specialized _ _ O
computers _ _ O
called _ _ O
routers _ _ O
• _ _ O
The _ _ O
connected _ _ O
networks _ _ O
are _ _ O
called _ _ O
an _ _ O
internet _ _ O
( _ _ O
lower _ _ O
case _ _ O
) _ _ O
host _ _ O
host _ _ O
... _ _ O
host _ _ O
host _ _ O
... _ _ O
host _ _ O
LAN _ _ O
1 _ _ O
host _ _ O
LAN _ _ O
2 _ _ O
router _ _ O
WAN _ _ O
router _ _ O
WAN _ _ O
router _ _ O
LAN _ _ O
1 _ _ O
and _ _ O
LAN _ _ O
2 _ _ O
might _ _ O
be _ _ O
completely _ _ O
different _ _ O
, _ _ O
totally _ _ O
incompatible _ _ O
( _ _ O
e.g. _ _ O
, _ _ O
Ethernet _ _ O
, _ _ O
Fibre _ _ O
Channel _ _ O
, _ _ O
802.11 _ _ O
* _ _ O
, _ _ O
T1-links _ _ O
, _ _ O
DSL _ _ O
, _ _ O
… _ _ O
) _ _ O

Transferring _ _ O
internet _ _ O
Data _ _ O
Via _ _ O
Encapsulation _ _ O
LAN1 _ _ O
( _ _ O
1 _ _ O
) _ _ O
client _ _ O
server _ _ O
protocol _ _ O
software _ _ O
data _ _ O
PH _ _ O
data _ _ O
PH _ _ O
LAN1 _ _ O
adapter _ _ O
PH _ _ O
: _ _ O
internet _ _ O
packet _ _ O
header _ _ O
FH _ _ O
: _ _ O
LAN _ _ O
frame _ _ O
header _ _ O
LAN1 _ _ O
adapter _ _ O
data _ _ O
( _ _ O
8) _ _ O
data _ _ O
( _ _ O
7 _ _ O
) _ _ O
data _ _ O
PH _ _ O
FH2 _ _ O
( _ _ O
6 _ _ O
) _ _ O
data _ _ O
PH _ _ O
FH2 _ _ O
FH2 _ _ O
( _ _ O
5 _ _ O
) _ _ O
LAN2 _ _ O
adapter _ _ O
Router _ _ O
FH1 _ _ O
( _ _ O
4 _ _ O
) _ _ O
LAN2 _ _ O
protocol _ _ O
software _ _ O
FH1 _ _ O
LAN1 _ _ O
frame _ _ O
( _ _ O
3 _ _ O
) _ _ O
Host _ _ O
B _ _ O
data _ _ O
internet _ _ O
packet _ _ O
( _ _ O
2 _ _ O
) _ _ O
Host _ _ O
A _ _ O
PH _ _ O
LAN2 _ _ O
adapter _ _ O
FH1 _ _ O
LAN2 _ _ O
frame _ _ O
data _ _ O
protocol _ _ O
software _ _ O
PH _ _ O

Aside _ _ O
: _ _ O
IPv4 _ _ O
and _ _ O
IPv6 _ _ O
• _ _ O
The _ _ O
original _ _ O
Internet _ _ O
Protocol _ _ O
, _ _ O
with _ _ O
its _ _ O
32-bit _ _ O
addresses _ _ O
, _ _ O
is _ _ O
known _ _ O
as _ _ O
Internet _ _ O
Protocol _ _ O
Version _ _ O
4 _ _ O
( _ _ O
IPv4 _ _ O
) _ _ O
• _ _ O
1996 _ _ O
: _ _ O
Internet _ _ O
Engineering _ _ O
Task _ _ O
Force _ _ O
( _ _ O
IETF _ _ O
) _ _ O
introduced _ _ O
Internet _ _ O
Protocol _ _ O
Version _ _ O
6 _ _ O
( _ _ O
IPv6 _ _ O
) _ _ O
with _ _ O
128-bit _ _ O
addresses _ _ O
• _ _ O
Intended _ _ O
as _ _ O
the _ _ O
successor _ _ O
to _ _ O
IPv4 _ _ O
• _ _ O
Majority _ _ O
of _ _ O
Internet _ _ O
traffic _ _ O
still _ _ O
carried _ _ O
by _ _ O
IPv4 _ _ O
IPv6 _ _ O
traffic _ _ O
at _ _ O
Google _ _ O
• _ _ O
We _ _ O
will _ _ O
focus _ _ O
on _ _ O
IPv4 _ _ O
, _ _ O
but _ _ O
will _ _ O
show _ _ O
you _ _ O
how _ _ O
to _ _ O
write _ _ O
networking _ _ O
code _ _ O
that _ _ O
is _ _ O
protocol-independent _ _ O
. _ _ O

Socket _ _ O
Address _ _ O
Structures _ _ O
• _ _ O
Generic _ _ O
socket _ _ O
address _ _ O
: _ _ O
• _ _ O
For _ _ O
address _ _ O
arguments _ _ O
to _ _ O
connect _ _ O
, _ _ O
bind _ _ O
, _ _ O
and _ _ O
accept _ _ O
• _ _ O
Necessary _ _ O
only _ _ O
because _ _ O
C _ _ O
did _ _ O
not _ _ O
have _ _ O
generic _ _ O
( _ _ O
void _ _ O
* _ _ O
) _ _ O
pointers _ _ O
when _ _ O
the _ _ O
sockets _ _ O
interface _ _ O
was _ _ O
designed _ _ O
• _ _ O
For _ _ O
casting _ _ O
convenience _ _ O
, _ _ O
we _ _ O
adopt _ _ O
the _ _ O
Stevens _ _ O
convention _ _ O
: _ _ O
typedef _ _ O
struct _ _ O
sockaddr _ _ O
SA _ _ O
; _ _ O
struct _ _ O
sockaddr _ _ O
{ _ _ O
uint16_t _ _ O
sa_family _ _ O
; _ _ O
char _ _ O
sa_data _ _ O
[ _ _ O
14 _ _ O
] _ _ O
; _ _ O
} _ _ O
; _ _ O
/ _ _ O
* _ _ O
Protocol _ _ O
family _ _ O
* _ _ O
/ _ _ O
/ _ _ O
* _ _ O
Address _ _ O
data _ _ O
* _ _ O
/ _ _ O
sa_family _ _ O
Family _ _ O
Specific _ _ O

Socket _ _ O
Address _ _ O
Structures _ _ O
• _ _ O
Internet _ _ O
( _ _ O
IPv4 _ _ O
) _ _ O
specific _ _ O
socket _ _ O
address _ _ O
: _ _ O
• _ _ O
Must _ _ O
cast _ _ O
( _ _ O
struct _ _ O
sockaddr_in _ _ O
* _ _ O
) _ _ O
to _ _ O
( _ _ O
struct _ _ O
sockaddr _ _ O
* _ _ O
) _ _ O
for _ _ O
functions _ _ O
that _ _ O
take _ _ O
socket _ _ O
address _ _ O
arguments _ _ O
. _ _ O
struct _ _ O
sockaddr_in _ _ O
{ _ _ O
uint16_t _ _ O
sin_family _ _ O
; _ _ O
/ _ _ O
* _ _ O
Protocol _ _ O
family _ _ O
( _ _ O
always _ _ O
AF_INET _ _ O
) _ _ O
* _ _ O
/ _ _ O
uint16_t _ _ O
sin_port _ _ O
; _ _ O
/ _ _ O
* _ _ O
Port _ _ O
num _ _ O
in _ _ O
network _ _ O
byte _ _ O
order _ _ O
* _ _ O
/ _ _ O
struct _ _ O
in_addr _ _ O
sin_addr _ _ O
; _ _ O
/ _ _ O
* _ _ O
IP _ _ O
addr _ _ O
in _ _ O
network _ _ O
byte _ _ O
order _ _ O
* _ _ O
/ _ _ O
unsigned _ _ O
char _ _ O
sin_zero _ _ O
[ _ _ O
8 _ _ O
] _ _ O
; _ _ O
/ _ _ O
* _ _ O
Pad _ _ O
to _ _ O
sizeof _ _ O
( _ _ O
struct _ _ O
sockaddr _ _ O
) _ _ O
* _ _ O
/ _ _ O
} _ _ O
; _ _ O
sin_port _ _ O
AF_INET _ _ O
sin_addr _ _ O
0 _ _ O
0 _ _ O
sa_family _ _ O
sin_family _ _ O
Family _ _ O
Specific _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O

Host _ _ O
and _ _ O
Service _ _ O
Conversion _ _ O
: _ _ O
getaddrinfo _ _ O
• _ _ O
getaddrinfo _ _ O
is _ _ O
the _ _ O
modern _ _ O
way _ _ O
to _ _ O
convert _ _ O
string _ _ O
representations _ _ O
of _ _ O
hostnames _ _ O
, _ _ O
host _ _ O
addresses _ _ O
, _ _ O
ports _ _ O
, _ _ O
and _ _ O
service _ _ O
names _ _ O
to _ _ O
socket _ _ O
address _ _ O
structures _ _ O
. _ _ O
• _ _ O
Replaces _ _ O
obsolete _ _ O
gethostbyname _ _ O
and _ _ O
getservbyname _ _ O
funcs _ _ O
. _ _ O
• _ _ O
Advantages _ _ O
: _ _ O
• _ _ O
Reentrant _ _ O
( _ _ O
can _ _ O
be _ _ O
safely _ _ O
used _ _ O
by _ _ O
threaded _ _ O
programs _ _ O
) _ _ O
. _ _ O
• _ _ O
Allows _ _ O
us _ _ O
to _ _ O
write _ _ O
portable _ _ O
protocol-independent _ _ O
code _ _ O
• _ _ O
Works _ _ O
with _ _ O
both _ _ O
IPv4 _ _ O
and _ _ O
IPv6 _ _ O
• _ _ O
Disadvantages _ _ O
• _ _ O
Somewhat _ _ O
complex _ _ O
• _ _ O
Fortunately _ _ O
, _ _ O
a _ _ O
small _ _ O
number _ _ O
of _ _ O
usage _ _ O
patterns _ _ O
suffice _ _ O
in _ _ O
most _ _ O
cases _ _ O
. _ _ O

Host _ _ O
and _ _ O
Service _ _ O
Conversion _ _ O
: _ _ O
getaddrinfo _ _ O
int _ _ O
getaddrinfo _ _ O
( _ _ O
const _ _ O
char _ _ O
* _ _ O
host _ _ O
, _ _ O
/ _ _ O
* _ _ O
Hostname _ _ O
or _ _ O
address _ _ O
* _ _ O
/ _ _ O
const _ _ O
char _ _ O
* _ _ O
service _ _ O
, _ _ O
/ _ _ O
* _ _ O
Port _ _ O
or _ _ O
service _ _ O
name _ _ O
* _ _ O
/ _ _ O
const _ _ O
struct _ _ O
addrinfo _ _ O
* _ _ O
hints _ _ O
, _ _ O
/ _ _ O
* _ _ O
Input _ _ O
parameters _ _ O
* _ _ O
/ _ _ O
struct _ _ O
addrinfo _ _ O
* _ _ O
* _ _ O
result _ _ O
) _ _ O
; _ _ O
/ _ _ O
* _ _ O
Output _ _ O
linked _ _ O
list _ _ O
* _ _ O
/ _ _ O
void _ _ O
freeaddrinfo _ _ O
( _ _ O
struct _ _ O
addrinfo _ _ O
* _ _ O
result _ _ O
) _ _ O
; _ _ O
/ _ _ O
* _ _ O
Free _ _ O
linked _ _ O
list _ _ O
* _ _ O
/ _ _ O
const _ _ O
char _ _ O
* _ _ O
gai_strerror _ _ O
( _ _ O
int _ _ O
errcode _ _ O
) _ _ O
; _ _ O
/ _ _ O
* _ _ O
Return _ _ O
error _ _ O
msg _ _ O
* _ _ O
/ _ _ O
• _ _ O
Given _ _ O
host _ _ O
and _ _ O
service _ _ O
, _ _ O
getaddrinfo _ _ O
returns _ _ O
result _ _ O
that _ _ O
points _ _ O
to _ _ O
a _ _ O
linked _ _ O
list _ _ O
of _ _ O
addrinfo _ _ O
structs _ _ O
, _ _ O
each _ _ O
of _ _ O
which _ _ O
points _ _ O
to _ _ O
a _ _ O
corresponding _ _ O
socket _ _ O
address _ _ O
struct _ _ O
, _ _ O
and _ _ O
which _ _ O
contains _ _ O
arguments _ _ O
for _ _ O
the _ _ O
sockets _ _ O
interface _ _ O
functions _ _ O
. _ _ O
• _ _ O
Helper _ _ O
functions _ _ O
: _ _ O
• _ _ O
freeadderinfo _ _ O
frees _ _ O
the _ _ O
entire _ _ O
linked _ _ O
list _ _ O
. _ _ O
• _ _ O
gai_strerror _ _ O
converts _ _ O
error _ _ O
code _ _ O
to _ _ O
an _ _ O
error _ _ O
message _ _ O
. _ _ O

Linked _ _ O
List _ _ O
Returned _ _ O
by _ _ O
getaddrinfo _ _ O
result _ _ O
addrinfo _ _ O
structs _ _ O
ai_canonname _ _ O
ai_addr _ _ O
ai_next _ _ O
Socket _ _ O
address _ _ O
structs _ _ O
NULL _ _ O
ai_addr _ _ O
ai_next _ _ O
NULL _ _ O
ai_addr _ _ O
NULL _ _ O
• _ _ O
Clients _ _ O
: _ _ O
walk _ _ O
this _ _ O
list _ _ O
, _ _ O
trying _ _ O
each _ _ O
socket _ _ O
address _ _ O
in _ _ O
turn _ _ O
, _ _ O
until _ _ O
the _ _ O
calls _ _ O
to _ _ O
socket _ _ O
and _ _ O
connect _ _ O
succeed _ _ O
. _ _ O
• _ _ O
Servers _ _ O
: _ _ O
walk _ _ O
the _ _ O
list _ _ O
until _ _ O
calls _ _ O
to _ _ O
socket _ _ O
and _ _ O
bind _ _ O
succeed _ _ O
. _ _ O

addrinfo _ _ O
Struct _ _ O
struct _ _ O
addrinfo _ _ O
{ _ _ O
int _ _ O
ai_flags _ _ O
; _ _ O
/ _ _ O
* _ _ O
Hints _ _ O
argument _ _ O
flags _ _ O
* _ _ O
/ _ _ O
int _ _ O
ai_family _ _ O
; _ _ O
/ _ _ O
* _ _ O
First _ _ O
arg _ _ O
to _ _ O
socket _ _ O
function _ _ O
* _ _ O
/ _ _ O
int _ _ O
ai_socktype _ _ O
; _ _ O
/ _ _ O
* _ _ O
Second _ _ O
arg _ _ O
to _ _ O
socket _ _ O
function _ _ O
* _ _ O
/ _ _ O
int _ _ O
ai_protocol _ _ O
; _ _ O
/ _ _ O
* _ _ O
Third _ _ O
arg _ _ O
to _ _ O
socket _ _ O
function _ _ O
* _ _ O
/ _ _ O
char _ _ O
* _ _ O
ai_canonname _ _ O
; _ _ O
/ _ _ O
* _ _ O
Canonical _ _ O
host _ _ O
name _ _ O
* _ _ O
/ _ _ O
size_t _ _ O
ai_addrlen _ _ O
; _ _ O
/ _ _ O
* _ _ O
Size _ _ O
of _ _ O
ai_addr _ _ O
struct _ _ O
* _ _ O
/ _ _ O
struct _ _ O
sockaddr _ _ O
* _ _ O
ai_addr _ _ O
; _ _ O
/ _ _ O
* _ _ O
Ptr _ _ O
to _ _ O
socket _ _ O
address _ _ O
structure _ _ O
* _ _ O
/ _ _ O
struct _ _ O
addrinfo _ _ O
* _ _ O
ai_next _ _ O
; _ _ O
/ _ _ O
* _ _ O
Ptr _ _ O
to _ _ O
next _ _ O
item _ _ O
in _ _ O
linked _ _ O
list _ _ O
* _ _ O
/ _ _ O
} _ _ O
; _ _ O
• _ _ O
Each _ _ O
addrinfo _ _ O
struct _ _ O
returned _ _ O
by _ _ O
getaddrinfo _ _ O
contains _ _ O
arguments _ _ O
that _ _ O
can _ _ O
be _ _ O
passed _ _ O
directly _ _ O
to _ _ O
socket _ _ O
function _ _ O
. _ _ O
• _ _ O
Also _ _ O
points _ _ O
to _ _ O
a _ _ O
socket _ _ O
address _ _ O
struct _ _ O
that _ _ O
can _ _ O
be _ _ O
passed _ _ O
directly _ _ O
to _ _ O
connect _ _ O
and _ _ O
bind _ _ O
functions _ _ O
. _ _ O

Host _ _ O
and _ _ O
Service _ _ O
Conversion _ _ O
: _ _ O
getnameinfo _ _ O
• _ _ O
getnameinfo _ _ O
is _ _ O
the _ _ O
inverse _ _ O
of _ _ O
getaddrinfo _ _ O
, _ _ O
converting _ _ O
a _ _ O
socket _ _ O
address _ _ O
to _ _ O
the _ _ O
corresponding _ _ O
host _ _ O
and _ _ O
service _ _ O
. _ _ O
• _ _ O
Replaces _ _ O
obsolete _ _ O
gethostbyaddr _ _ O
and _ _ O
getservbyport _ _ O
funcs _ _ O
. _ _ O
• _ _ O
Reentrant _ _ O
and _ _ O
protocol _ _ O
independent _ _ O
. _ _ O
int _ _ O
getnameinfo _ _ O
( _ _ O
const _ _ O
SA _ _ O
* _ _ O
sa _ _ O
, _ _ O
socklen_t _ _ O
salen _ _ O
, _ _ O
/ _ _ O
* _ _ O
In _ _ O
: _ _ O
socket _ _ O
addr _ _ O
* _ _ O
/ _ _ O
char _ _ O
* _ _ O
host _ _ O
, _ _ O
size_t _ _ O
hostlen _ _ O
, _ _ O
/ _ _ O
* _ _ O
Out _ _ O
: _ _ O
host _ _ O
* _ _ O
/ _ _ O
char _ _ O
* _ _ O
serv _ _ O
, _ _ O
size_t _ _ O
servlen _ _ O
, _ _ O
/ _ _ O
* _ _ O
Out _ _ O
: _ _ O
service _ _ O
* _ _ O
/ _ _ O
int _ _ O
flags _ _ O
) _ _ O
; _ _ O
/ _ _ O
* _ _ O
optional _ _ O
flags _ _ O
* _ _ O
/ _ _ O

Conversion _ _ O
Example _ _ O
( _ _ O
writing _ _ O
our _ _ O
own _ _ O
nslookup _ _ O
) _ _ O
int _ _ O
main _ _ O
( _ _ O
int _ _ O
argc _ _ O
, _ _ O
char _ _ O
* _ _ O
* _ _ O
argv _ _ O
) _ _ O
{ _ _ O
struct _ _ O
addrinfo _ _ O
* _ _ O
p _ _ O
, _ _ O
* _ _ O
listp _ _ O
, _ _ O
hints _ _ O
; _ _ O
char _ _ O
buf _ _ O
[ _ _ O
MAXLINE _ _ O
] _ _ O
; _ _ O
int _ _ O
rc _ _ O
, _ _ O
flags _ _ O
; _ _ O
/ _ _ O
* _ _ O
Get _ _ O
a _ _ O
list _ _ O
of _ _ O
addrinfo _ _ O
records _ _ O
* _ _ O
/ _ _ O
memset _ _ O
( _ _ O
& _ _ O
hints _ _ O
, _ _ O
0 _ _ O
, _ _ O
sizeof _ _ O
( _ _ O
struct _ _ O
addrinfo _ _ O
) _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
hints.ai_family _ _ O
= _ _ O
AF_INET _ _ O
; _ _ O
/ _ _ O
* _ _ O
IPv4 _ _ O
only _ _ O
* _ _ O
/ _ _ O
hints.ai_socktype _ _ O
= _ _ O
SOCK_STREAM _ _ O
; _ _ O
/ _ _ O
* _ _ O
Connections _ _ O
only _ _ O
* _ _ O
/ _ _ O
if _ _ O
( _ _ O
( _ _ O
rc _ _ O
= _ _ O
getaddrinfo _ _ O
( _ _ O
argv _ _ O
[ _ _ O
1 _ _ O
] _ _ O
, _ _ O
NULL _ _ O
, _ _ O
& _ _ O
hints _ _ O
, _ _ O
& _ _ O
listp _ _ O
) _ _ O
) _ _ O
! _ _ O
= _ _ O
0 _ _ O
) _ _ O
{ _ _ O
fprintf _ _ O
( _ _ O
stderr _ _ O
, _ _ O
" _ _ O
getaddrinfo _ _ O
error _ _ O
: _ _ O
% _ _ O
s\n _ _ O
" _ _ O
, _ _ O
gai_strerror _ _ O
( _ _ O
rc _ _ O
) _ _ O
) _ _ O
; _ _ O
exit _ _ O
( _ _ O
1 _ _ O
) _ _ O
; _ _ O
} _ _ O
hostinfo.c _ _ O

Conversion _ _ O
Example _ _ O
( _ _ O
cont _ _ O
) _ _ O
/ _ _ O
* _ _ O
Walk _ _ O
the _ _ O
list _ _ O
and _ _ O
display _ _ O
each _ _ O
IP _ _ O
address _ _ O
* _ _ O
/ _ _ O
flags _ _ O
= _ _ O
NI_NUMERICHOST _ _ O
; _ _ O
/ _ _ O
* _ _ O
Display _ _ O
address _ _ O
instead _ _ O
of _ _ O
name _ _ O
* _ _ O
/ _ _ O
for _ _ O
( _ _ O
p _ _ O
= _ _ O
listp _ _ O
; _ _ O
p _ _ O
; _ _ O
p _ _ O
= _ _ O
p- _ _ O
> _ _ O
ai_next _ _ O
) _ _ O
{ _ _ O
getnameinfo _ _ O
( _ _ O
p- _ _ O
> _ _ O
ai_addr _ _ O
, _ _ O
p- _ _ O
> _ _ O
ai_addrlen _ _ O
, _ _ O
buf _ _ O
, _ _ O
MAXLINE _ _ O
, _ _ O
NULL _ _ O
, _ _ O
0 _ _ O
, _ _ O
flags _ _ O
) _ _ O
; _ _ O
printf _ _ O
( _ _ O
"%s\n _ _ O
" _ _ O
, _ _ O
buf _ _ O
) _ _ O
; _ _ O
} _ _ O
/ _ _ O
* _ _ O
Clean _ _ O
up _ _ O
* _ _ O
/ _ _ O
freeaddrinfo _ _ O
( _ _ O
listp _ _ O
) _ _ O
; _ _ O
exit _ _ O
( _ _ O
0 _ _ O
) _ _ O
; _ _ O
} _ _ O
hostinfo.c _ _ O

Running _ _ O
hostinfo _ _ O
whaleshark _ _ O
> _ _ O
. _ _ O
/ _ _ O
hostinfo _ _ O
localhost _ _ O
127.0.0.1 _ _ O
whaleshark _ _ O
> _ _ O
. _ _ O
/ _ _ O
hostinfo _ _ O
whaleshark.ics.cs.cmu.edu _ _ O
128.2.210.175 _ _ O
whaleshark _ _ O
> _ _ O
. _ _ O
/ _ _ O
hostinfo _ _ O
twitter.com _ _ O
199.16.156.230 _ _ O
199.16.156.38 _ _ O
199.16.156.102 _ _ O
199.16.156.198 _ _ O
whaleshark _ _ O
> _ _ O
. _ _ O
/ _ _ O
hostinfo _ _ O
google.com _ _ O
172.217.15.110 _ _ O
2607 _ _ O
: _ _ O
f8b0 _ _ O
: _ _ O
4004 _ _ O
: _ _ O
802 _ _ O
: _ _ O
: _ _ O
200e _ _ O



