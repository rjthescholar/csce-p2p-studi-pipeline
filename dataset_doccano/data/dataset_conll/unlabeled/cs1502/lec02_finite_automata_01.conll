unlabeled|cs1502|lec02_finite_automata_01
-DOCSTART- -X- -X- O

Finite _ _ O
Automata _ _ O
01 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Finite _ _ O
Automata _ _ O
Suppose _ _ O
you _ _ O
are _ _ O
asked _ _ O
to _ _ O
write _ _ O
a _ _ O
software _ _ O
to _ _ O
control _ _ O
an _ _ O
automatic _ _ O
door _ _ O
as _ _ O
shown _ _ O
below _ _ O
: _ _ O
front _ _ O
pad _ _ O
rear _ _ O
pad _ _ O
door _ _ O
Assume _ _ O
we _ _ O
have _ _ O
the _ _ O
following _ _ O
methods _ _ O
: _ _ O
getFrontPad _ _ O
( _ _ O
) _ _ O
: _ _ O
returns _ _ O
true _ _ O
if _ _ O
there _ _ O
is _ _ O
a _ _ O
person _ _ O
standing _ _ O
on _ _ O
the _ _ O
front _ _ O
pad _ _ O
. _ _ O
Otherwise _ _ O
, _ _ O
it _ _ O
returns _ _ O
false _ _ O
. _ _ O
getRearPad _ _ O
( _ _ O
) _ _ O
: _ _ O
returns _ _ O
true _ _ O
if _ _ O
there _ _ O
is _ _ O
a _ _ O
person _ _ O
standing _ _ O
on _ _ O
the _ _ O
rear _ _ O
pad _ _ O
. _ _ O
Otherwise _ _ O
, _ _ O
it _ _ O
returns _ _ O
false _ _ O
. _ _ O
openDoor _ _ O
( _ _ O
) _ _ O
: _ _ O
when _ _ O
called _ _ O
it _ _ O
will _ _ O
open _ _ O
the _ _ O
door _ _ O
. _ _ O
closeDoor _ _ O
( _ _ O
) _ _ O
: _ _ O
when _ _ O
called _ _ O
it _ _ O
will _ _ O
close _ _ O
the _ _ O
door _ _ O
. _ _ O
How _ _ O
the _ _ O
write _ _ O
the _ _ O
program _ _ O
in _ _ O
Java _ _ O
? _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Finite _ _ O
Automata _ _ O
Program _ _ O
to _ _ O
control _ _ O
the _ _ O
automatic _ _ O
door _ _ O
: _ _ O
public _ _ O
class _ _ O
DoorController _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
args _ _ O
) _ _ O
{ _ _ O
boolean _ _ O
isDoorOpen _ _ O
= _ _ O
false _ _ O
; _ _ O
while _ _ O
( _ _ O
true _ _ O
) _ _ O
{ _ _ O
if _ _ O
( _ _ O
getFrontPad _ _ O
( _ _ O
) _ _ O
& _ _ O
& _ _ O
! _ _ O
getRearPad _ _ O
( _ _ O
) _ _ O
& _ _ O
& _ _ O
! _ _ O
isDoorOpen _ _ O
) _ _ O
{ _ _ O
openDoor _ _ O
( _ _ O
) _ _ O
; _ _ O
isDoorOpen _ _ O
= _ _ O
true _ _ O
; _ _ O
} _ _ O
if _ _ O
( _ _ O
! _ _ O
getFrontPad _ _ O
( _ _ O
) _ _ O
& _ _ O
& _ _ O
! _ _ O
getRearPad _ _ O
( _ _ O
) _ _ O
& _ _ O
& _ _ O
isDoorOpen _ _ O
) _ _ O
{ _ _ O
closeDoor _ _ O
( _ _ O
) _ _ O
; _ _ O
isDoorOpen _ _ O
= _ _ O
false _ _ O
; _ _ O
} _ _ O
} _ _ O
} _ _ O
} _ _ O
The _ _ O
variable _ _ O
isDoorOpen _ _ O
of _ _ O
type _ _ O
boolean _ _ O
is _ _ O
used _ _ O
to _ _ O
record _ _ O
the _ _ O
status _ _ O
of _ _ O
the _ _ O
door _ _ O
( _ _ O
1 _ _ O
bit _ _ O
of _ _ O
memory _ _ O
is _ _ O
required _ _ O
) _ _ O
. _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Finite _ _ O
Automata _ _ O
getFrontPad _ _ O
( _ _ O
) _ _ O
and _ _ O
getRearPad _ _ O
( _ _ O
) _ _ O
together _ _ O
acts _ _ O
as _ _ O
external _ _ O
input _ _ O
to _ _ O
the _ _ O
program _ _ O
: _ _ O
getFrontPad _ _ O
( _ _ O
) _ _ O
getRearPad _ _ O
( _ _ O
) _ _ O
Input _ _ O
true _ _ O
true _ _ O
Both _ _ O
true _ _ O
false _ _ O
Front _ _ O
false _ _ O
true _ _ O
Rear _ _ O
false _ _ O
false _ _ O
Neither _ _ O
We _ _ O
can _ _ O
define _ _ O
the _ _ O
behavior _ _ O
of _ _ O
our _ _ O
program _ _ O
based _ _ O
on _ _ O
its _ _ O
input _ _ O
as _ _ O
well _ _ O
as _ _ O
the _ _ O
status _ _ O
of _ _ O
the _ _ O
door _ _ O
whether _ _ O
it _ _ O
is _ _ O
current _ _ O
open _ _ O
or _ _ O
close _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Representations _ _ O
The _ _ O
program _ _ O
can _ _ O
be _ _ O
represented _ _ O
in _ _ O
two _ _ O
standard _ _ O
ways _ _ O
State _ _ O
Diagram _ _ O
: _ _ O
Rear _ _ O
Rear _ _ O
Front _ _ O
Both _ _ O
Open _ _ O
Closed _ _ O
Both _ _ O
Neither _ _ O
Neither _ _ O
State _ _ O
Transition _ _ O
Table _ _ O
: _ _ O
Neither _ _ O
Closed _ _ O
Closed _ _ O
Open _ _ O
Closed _ _ O
Front _ _ O
Front _ _ O
Open _ _ O
Open _ _ O
Rear _ _ O
Closed _ _ O
Open _ _ O
Both _ _ O
Closed _ _ O
Open _ _ O
But _ _ O
how _ _ O
to _ _ O
represent _ _ O
these _ _ O
in _ _ O
a _ _ O
mathematical _ _ O
way _ _ O
? _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Finite _ _ O
State _ _ O
Machine _ _ O
Consider _ _ O
the _ _ O
following _ _ O
finite _ _ O
state _ _ O
machine _ _ O
M1 _ _ O
: _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
q0 _ _ O
q1 _ _ O
q2 _ _ O
0 _ _ O
, _ _ O
1 _ _ O
Machine _ _ O
M1 _ _ O
consists _ _ O
of _ _ O
: _ _ O
Three _ _ O
states _ _ O
: _ _ O
q0 _ _ O
, _ _ O
q1 _ _ O
, _ _ O
and _ _ O
q2 _ _ O
The _ _ O
start _ _ O
state _ _ O
q0 _ _ O
( _ _ O
arrow _ _ O
pointing _ _ O
to _ _ O
it _ _ O
from _ _ O
nowhere _ _ O
) _ _ O
An _ _ O
accept _ _ O
state _ _ O
q1 _ _ O
( _ _ O
double _ _ O
circle _ _ O
) _ _ O
All _ _ O
single _ _ O
circle _ _ O
states _ _ O
are _ _ O
called _ _ O
non-accept _ _ O
state _ _ O
Arrows _ _ O
represent _ _ O
transition _ _ O
functions _ _ O
The _ _ O
label _ _ O
0 _ _ O
, _ _ O
1 _ _ O
represents _ _ O
two _ _ O
transitions _ _ O
q1 _ _ O
q2 _ _ O
0 _ _ O
1 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Finite _ _ O
State _ _ O
Machine _ _ O
Consider _ _ O
the _ _ O
following _ _ O
finite _ _ O
state _ _ O
machine _ _ O
M1 _ _ O
: _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
q0 _ _ O
q1 _ _ O
q2 _ _ O
0 _ _ O
, _ _ O
1 _ _ O
When _ _ O
an _ _ O
input _ _ O
string _ _ O
is _ _ O
given _ _ O
to _ _ O
this _ _ O
machine _ _ O
, _ _ O
it _ _ O
returns _ _ O
either _ _ O
accept _ _ O
or _ _ O
reject _ _ O
. _ _ O
1101 _ _ O
: _ _ O
accept _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
q0 _ _ O
→ _ _ O
q1 _ _ O
→ _ _ O
q1 _ _ O
→ _ _ O
q2 _ _ O
→ _ _ O
q1 _ _ O
( _ _ O
an _ _ O
accept _ _ O
state _ _ O
) _ _ O
0010 _ _ O
: _ _ O
reject _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
q0 _ _ O
→ _ _ O
q0 _ _ O
→ _ _ O
q0 _ _ O
→ _ _ O
q1 _ _ O
→ _ _ O
q2 _ _ O
( _ _ O
a _ _ O
non-accept _ _ O
state _ _ O
) _ _ O
0100 _ _ O
: _ _ O
accept _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
q0 _ _ O
→ _ _ O
q0 _ _ O
→ _ _ O
q1 _ _ O
→ _ _ O
q2 _ _ O
→ _ _ O
q1 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
( _ _ O
an _ _ O
accept _ _ O
state _ _ O
) _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Finite _ _ O
State _ _ O
Machine _ _ O
Consider _ _ O
the _ _ O
following _ _ O
finite _ _ O
state _ _ O
machine _ _ O
M1 _ _ O
: _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
q0 _ _ O
q1 _ _ O
q2 _ _ O
0 _ _ O
, _ _ O
1 _ _ O
Can _ _ O
we _ _ O
define _ _ O
the _ _ O
set _ _ O
of _ _ O
inputs _ _ O
that _ _ O
is _ _ O
accepted _ _ O
by _ _ O
the _ _ O
above _ _ O
machine _ _ O
? _ _ O
M1 _ _ O
accepts _ _ O
any _ _ O
strings _ _ O
that _ _ O
end _ _ O
with _ _ O
a _ _ O
1 _ _ O
M1 _ _ O
also _ _ O
accepts _ _ O
a _ _ O
string _ _ O
that _ _ O
ends _ _ O
with _ _ O
a _ _ O
0 _ _ O
but _ _ O
it _ _ O
needs _ _ O
to _ _ O
have _ _ O
even _ _ O
number _ _ O
of _ _ O
0s _ _ O
after _ _ O
the _ _ O
last _ _ O
1 _ _ O
The _ _ O
set _ _ O
of _ _ O
all _ _ O
strings _ _ O
accepted _ _ O
by _ _ O
this _ _ O
machine _ _ O
is _ _ O
{ _ _ O
x _ _ O
| _ _ O
x _ _ O
ends _ _ O
with _ _ O
a _ _ O
1 _ _ O
and _ _ O
x _ _ O
is _ _ O
a _ _ O
string _ _ O
that _ _ O
ends _ _ O
with _ _ O
an _ _ O
even _ _ O
number _ _ O
of _ _ O
0s _ _ O
following _ _ O
the _ _ O
last _ _ O
1 _ _ O
} _ _ O
The _ _ O
above _ _ O
set _ _ O
is _ _ O
called _ _ O
the _ _ O
language _ _ O
of _ _ O
the _ _ O
machine _ _ O
M1 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Finite-State _ _ O
Automaton _ _ O
A _ _ O
finite _ _ O
state _ _ O
machine _ _ O
M _ _ O
can _ _ O
be _ _ O
defined _ _ O
as _ _ O
five _ _ O
tuple _ _ O
M _ _ O
= _ _ O
( _ _ O
Q _ _ O
, _ _ O
Σ _ _ O
, _ _ O
δ _ _ O
, _ _ O
q0 _ _ O
, _ _ O
F _ _ O
) _ _ O
Q _ _ O
is _ _ O
a _ _ O
non-empty _ _ O
finite _ _ O
set _ _ O
of _ _ O
states _ _ O
M _ _ O
must _ _ O
have _ _ O
at _ _ O
least _ _ O
one _ _ O
state _ _ O
Σ _ _ O
is _ _ O
an _ _ O
alphabet _ _ O
( _ _ O
a _ _ O
finite _ _ O
set _ _ O
of _ _ O
symbols _ _ O
) _ _ O
δ _ _ O
: _ _ O
Q _ _ O
× _ _ O
Σ _ _ O
→ _ _ O
Q _ _ O
is _ _ O
the _ _ O
transition _ _ O
functions _ _ O
We _ _ O
generally _ _ O
use _ _ O
a _ _ O
table _ _ O
to _ _ O
represent _ _ O
δ _ _ O
q0 _ _ O
∈ _ _ O
Q _ _ O
is _ _ O
the _ _ O
starting _ _ O
state _ _ O
A _ _ O
finite _ _ O
automata _ _ O
can _ _ O
only _ _ O
have _ _ O
exactly _ _ O
one _ _ O
start _ _ O
state _ _ O
F _ _ O
⊆ _ _ O
Q _ _ O
is _ _ O
the _ _ O
set _ _ O
of _ _ O
accept _ _ O
states _ _ O
F _ _ O
can _ _ O
be _ _ O
∅ _ _ O
M _ _ O
can _ _ O
have _ _ O
no _ _ O
accept _ _ O
state _ _ O
( _ _ O
rejects _ _ O
all _ _ O
strings _ _ O
) _ _ O
|F _ _ O
| _ _ O
can _ _ O
be _ _ O
more _ _ O
than _ _ O
1 _ _ O
M _ _ O
has _ _ O
more _ _ O
than _ _ O
one _ _ O
accept _ _ O
states _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Example _ _ O
: _ _ O
Machine _ _ O
M1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
q0 _ _ O
q1 _ _ O
q2 _ _ O
0 _ _ O
, _ _ O
1 _ _ O
M1 _ _ O
= _ _ O
( _ _ O
Q _ _ O
, _ _ O
Σ _ _ O
, _ _ O
δ _ _ O
, _ _ O
q0 _ _ O
, _ _ O
F _ _ O
) _ _ O
Q _ _ O
= _ _ O
{ _ _ O
q0 _ _ O
, _ _ O
q1 _ _ O
, _ _ O
q2 _ _ O
} _ _ O
Σ _ _ O
= _ _ O
{ _ _ O
0 _ _ O
, _ _ O
1 _ _ O
} _ _ O
δ _ _ O
can _ _ O
be _ _ O
defined _ _ O
using _ _ O
the _ _ O
table _ _ O
below _ _ O
: _ _ O
δ _ _ O
0 _ _ O
1 _ _ O
q0 _ _ O
q0 _ _ O
q1 _ _ O
q1 _ _ O
q2 _ _ O
q1 _ _ O
q2 _ _ O
q1 _ _ O
q1 _ _ O
q0 _ _ O
is _ _ O
the _ _ O
start _ _ O
state _ _ O
F _ _ O
= _ _ O
{ _ _ O
q1 _ _ O
} _ _ O
The _ _ O
state _ _ O
diagram _ _ O
and _ _ O
its _ _ O
formal _ _ O
definition _ _ O
are _ _ O
equivalent _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Formal _ _ O
Definition _ _ O
of _ _ O
Machine _ _ O
M1 _ _ O
M1 _ _ O
= _ _ O
( _ _ O
{ _ _ O
q0 _ _ O
, _ _ O
q1 _ _ O
, _ _ O
q2 _ _ O
} _ _ O
, _ _ O
{ _ _ O
0 _ _ O
, _ _ O
1 _ _ O
} _ _ O
, _ _ O
δ _ _ O
, _ _ O
q0 _ _ O
, _ _ O
{ _ _ O
q1 _ _ O
} _ _ O
) _ _ O
where _ _ O
δ _ _ O
is _ _ O
as _ _ O
follows _ _ O
: _ _ O
δ _ _ O
0 _ _ O
1 _ _ O
q0 _ _ O
q0 _ _ O
q1 _ _ O
q1 _ _ O
q2 _ _ O
q1 _ _ O
q2 _ _ O
q1 _ _ O
q1 _ _ O
The _ _ O
above _ _ O
formal _ _ O
definition _ _ O
allows _ _ O
use _ _ O
to _ _ O
precisely _ _ O
answer _ _ O
questions _ _ O
about _ _ O
M1 _ _ O
: _ _ O
Is _ _ O
0101 _ _ O
is _ _ O
a _ _ O
valid _ _ O
input _ _ O
for _ _ O
this _ _ O
machine _ _ O
? _ _ O
Yes _ _ O
. _ _ O
0 _ _ O
∈ _ _ O
{ _ _ O
0 _ _ O
, _ _ O
1 _ _ O
} _ _ O
and _ _ O
1 _ _ O
∈ _ _ O
{ _ _ O
0 _ _ O
, _ _ O
1 _ _ O
} _ _ O
. _ _ O
Is _ _ O
01a0 _ _ O
is _ _ O
a _ _ O
valid _ _ O
input _ _ O
for _ _ O
this _ _ O
machine _ _ O
? _ _ O
No _ _ O
. _ _ O
a _ _ O
6∈ _ _ O
{ _ _ O
0 _ _ O
, _ _ O
1 _ _ O
} _ _ O
Is _ _ O
input _ _ O
010 _ _ O
accepted _ _ O
by _ _ O
this _ _ O
machine _ _ O
? _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
No _ _ O
. _ _ O
q0 _ _ O
→ _ _ O
q0 _ _ O
→ _ _ O
q1 _ _ O
→ _ _ O
q2 _ _ O
and _ _ O
q2 _ _ O
6∈ _ _ O
{ _ _ O
q1 _ _ O
} _ _ O
. _ _ O
Is _ _ O
input _ _ O
101 _ _ O
accepted _ _ O
by _ _ O
this _ _ O
machine _ _ O
? _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
Yes _ _ O
. _ _ O
q0 _ _ O
→ _ _ O
q1 _ _ O
→ _ _ O
q2 _ _ O
→ _ _ O
q1 _ _ O
and _ _ O
q1 _ _ O
∈ _ _ O
{ _ _ O
q1 _ _ O
} _ _ O
. _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Language _ _ O
Recognized _ _ O
A _ _ O
string _ _ O
w _ _ O
= _ _ O
w1 _ _ O
w2 _ _ O
. _ _ O
. _ _ O
. _ _ O
wn _ _ O
is _ _ O
accepted _ _ O
by _ _ O
M _ _ O
if _ _ O
and _ _ O
only _ _ O
if _ _ O
after _ _ O
processing _ _ O
each _ _ O
symbol _ _ O
wi _ _ O
of _ _ O
w _ _ O
, _ _ O
where _ _ O
1 _ _ O
≤ _ _ O
i _ _ O
≤ _ _ O
n _ _ O
, _ _ O
M _ _ O
finds _ _ O
itself _ _ O
in _ _ O
an _ _ O
accept _ _ O
state _ _ O
( _ _ O
a _ _ O
state _ _ O
belonging _ _ O
to _ _ O
F _ _ O
) _ _ O
. _ _ O
Otherwise _ _ O
, _ _ O
we _ _ O
say _ _ O
w _ _ O
is _ _ O
rejected _ _ O
by _ _ O
M _ _ O
. _ _ O
If _ _ O
A _ _ O
is _ _ O
the _ _ O
set _ _ O
of _ _ O
all _ _ O
strings _ _ O
accepted _ _ O
by _ _ O
M _ _ O
, _ _ O
we _ _ O
say _ _ O
A _ _ O
is _ _ O
the _ _ O
language _ _ O
of _ _ O
finite-state _ _ O
machine _ _ O
M _ _ O
, _ _ O
denoted _ _ O
by _ _ O
L _ _ O
( _ _ O
M _ _ O
) _ _ O
= _ _ O
A _ _ O
We _ _ O
say _ _ O
that _ _ O
M _ _ O
recognizes _ _ O
A _ _ O
A _ _ O
machine _ _ O
may _ _ O
accept _ _ O
several _ _ O
strings _ _ O
but _ _ O
it _ _ O
always _ _ O
recognizes _ _ O
only _ _ O
one _ _ O
language _ _ O
. _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Example _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
q1 _ _ O
q2 _ _ O
0 _ _ O
M2 _ _ O
= _ _ O
( _ _ O
Q _ _ O
, _ _ O
Σ _ _ O
, _ _ O
δ _ _ O
, _ _ O
start _ _ O
state _ _ O
, _ _ O
F _ _ O
) _ _ O
What _ _ O
is _ _ O
the _ _ O
formal _ _ O
definition _ _ O
of _ _ O
the _ _ O
above _ _ O
machine _ _ O
and _ _ O
the _ _ O
language _ _ O
that _ _ O
it _ _ O
recognises _ _ O
? _ _ O
Q _ _ O
= _ _ O
{ _ _ O
q1 _ _ O
, _ _ O
q2 _ _ O
} _ _ O
Σ _ _ O
= _ _ O
{ _ _ O
0 _ _ O
, _ _ O
1 _ _ O
} _ _ O
δ _ _ O
0 _ _ O
1 _ _ O
q1 _ _ O
q1 _ _ O
q2 _ _ O
q2 _ _ O
q1 _ _ O
q2 _ _ O
The _ _ O
start _ _ O
state _ _ O
is _ _ O
q1 _ _ O
F _ _ O
= _ _ O
{ _ _ O
q2 _ _ O
} _ _ O
L _ _ O
( _ _ O
M2 _ _ O
) _ _ O
= _ _ O
{ _ _ O
w _ _ O
| _ _ O
w _ _ O
ends _ _ O
in _ _ O
a _ _ O
1 _ _ O
} _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Example _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
q1 _ _ O
q2 _ _ O
0 _ _ O
M3 _ _ O
= _ _ O
( _ _ O
Q _ _ O
, _ _ O
Σ _ _ O
, _ _ O
δ _ _ O
, _ _ O
start _ _ O
state _ _ O
, _ _ O
F _ _ O
) _ _ O
What _ _ O
is _ _ O
the _ _ O
formal _ _ O
definition _ _ O
of _ _ O
the _ _ O
above _ _ O
machine _ _ O
and _ _ O
the _ _ O
language _ _ O
that _ _ O
it _ _ O
recognises _ _ O
? _ _ O
Q _ _ O
= _ _ O
{ _ _ O
q1 _ _ O
, _ _ O
q2 _ _ O
} _ _ O
Σ _ _ O
= _ _ O
{ _ _ O
0 _ _ O
, _ _ O
1 _ _ O
} _ _ O
δ _ _ O
0 _ _ O
1 _ _ O
q1 _ _ O
q1 _ _ O
q2 _ _ O
q2 _ _ O
q1 _ _ O
q2 _ _ O
Start _ _ O
state _ _ O
is _ _ O
q1 _ _ O
F _ _ O
= _ _ O
{ _ _ O
q1 _ _ O
} _ _ O
L _ _ O
( _ _ O
M2 _ _ O
) _ _ O
= _ _ O
{ _ _ O
w _ _ O
| _ _ O
w _ _ O
is _ _ O
the _ _ O
empty _ _ O
string _ _ O
ε _ _ O
or _ _ O
ends _ _ O
in _ _ O
a _ _ O
0 _ _ O
} _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Example _ _ O
Q _ _ O
= _ _ O
{ _ _ O
s _ _ O
, _ _ O
q1 _ _ O
, _ _ O
q2 _ _ O
, _ _ O
r1 _ _ O
, _ _ O
r2 _ _ O
} _ _ O
Σ _ _ O
= _ _ O
{ _ _ O
a _ _ O
, _ _ O
b _ _ O
} _ _ O
a _ _ O
b _ _ O
r1 _ _ O
q1 _ _ O
a _ _ O
b _ _ O
b _ _ O
s _ _ O
a _ _ O
q2 _ _ O
a _ _ O
b _ _ O
b _ _ O
r2 _ _ O
M4 _ _ O
= _ _ O
( _ _ O
Q _ _ O
, _ _ O
Σ _ _ O
, _ _ O
δ _ _ O
, _ _ O
start _ _ O
state _ _ O
, _ _ O
F _ _ O
) _ _ O
a _ _ O
Transition _ _ O
Functions _ _ O
: _ _ O
δ _ _ O
a _ _ O
b _ _ O
s _ _ O
q1 _ _ O
r1 _ _ O
q1 _ _ O
q1 _ _ O
q2 _ _ O
q2 _ _ O
q1 _ _ O
q2 _ _ O
r1 _ _ O
r2 _ _ O
r1 _ _ O
r2 _ _ O
r2 _ _ O
r1 _ _ O
Start _ _ O
state _ _ O
is _ _ O
s _ _ O
F _ _ O
= _ _ O
{ _ _ O
q1 _ _ O
, _ _ O
r1 _ _ O
} _ _ O
What _ _ O
is _ _ O
the _ _ O
formal _ _ O
definition _ _ O
of _ _ O
the _ _ O
above _ _ O
machine _ _ O
and _ _ O
the _ _ O
language _ _ O
that _ _ O
it _ _ O
recognises _ _ O
? _ _ O
L _ _ O
( _ _ O
M2 _ _ O
) _ _ O
= _ _ O
{ _ _ O
w _ _ O
| _ _ O
w _ _ O
starts _ _ O
and _ _ O
ends _ _ O
with _ _ O
the _ _ O
same _ _ O
symbol _ _ O
} _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Example _ _ O
Q _ _ O
= _ _ O
{ _ _ O
q0 _ _ O
, _ _ O
q1 _ _ O
, _ _ O
q2 _ _ O
} _ _ O
0 _ _ O
Σ _ _ O
= _ _ O
{ _ _ O
0 _ _ O
, _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
< _ _ O
RESET _ _ O
> _ _ O
} _ _ O
q1 _ _ O
< _ _ O
RESET _ _ O
> _ _ O
1 _ _ O
2 _ _ O
0 _ _ O
2 _ _ O
1 _ _ O
2 _ _ O
q0 _ _ O
1 _ _ O
q2 _ _ O
0 _ _ O
< _ _ O
RESET _ _ O
> _ _ O
< _ _ O
RESET _ _ O
> _ _ O
M5 _ _ O
= _ _ O
( _ _ O
Q _ _ O
, _ _ O
Σ _ _ O
, _ _ O
δ _ _ O
, _ _ O
start _ _ O
state _ _ O
, _ _ O
F _ _ O
) _ _ O
What _ _ O
is _ _ O
the _ _ O
formal _ _ O
definition _ _ O
of _ _ O
the _ _ O
above _ _ O
machine _ _ O
and _ _ O
the _ _ O
language _ _ O
that _ _ O
it _ _ O
recognises _ _ O
? _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Transition _ _ O
Functions _ _ O
: _ _ O
δ _ _ O
0 _ _ O
1 _ _ O
2 _ _ O
< _ _ O
RESET _ _ O
> _ _ O
q0 _ _ O
q0 _ _ O
q1 _ _ O
q2 _ _ O
q0 _ _ O
q1 _ _ O
q1 _ _ O
q2 _ _ O
q0 _ _ O
q0 _ _ O
q2 _ _ O
q2 _ _ O
q0 _ _ O
q1 _ _ O
q0 _ _ O
Start _ _ O
state _ _ O
is _ _ O
q0 _ _ O
F _ _ O
= _ _ O
{ _ _ O
q0 _ _ O
} _ _ O
L _ _ O
( _ _ O
M2 _ _ O
) _ _ O
= _ _ O
{ _ _ O
w _ _ O
| _ _ O
w _ _ O
is _ _ O
the _ _ O
empty _ _ O
string _ _ O
ε _ _ O
or _ _ O
ends _ _ O
with _ _ O
< _ _ O
RESET _ _ O
> _ _ O
or _ _ O
sum _ _ O
of _ _ O
input _ _ O
is _ _ O
multiple _ _ O
of _ _ O
3 _ _ O
after _ _ O
the _ _ O
last _ _ O
< _ _ O
RESET _ _ O
> _ _ O
} _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Designing _ _ O
a _ _ O
Finite-State _ _ O
Machine _ _ O
A _ _ O
computation _ _ O
model _ _ O
simulates _ _ O
a _ _ O
set _ _ O
of _ _ O
algorithms _ _ O
Designing _ _ O
a _ _ O
finite-state _ _ O
machine _ _ O
is _ _ O
the _ _ O
same _ _ O
as _ _ O
writing _ _ O
a _ _ O
program _ _ O
Use _ _ O
states _ _ O
to _ _ O
capture _ _ O
state-of-minds _ _ O
I _ _ O
just _ _ O
see _ _ O
a _ _ O
1 _ _ O
I _ _ O
just _ _ O
see _ _ O
two _ _ O
consecutive _ _ O
0s _ _ O
I _ _ O
already _ _ O
saw _ _ O
00 _ _ O
or _ _ O
11 _ _ O
Do _ _ O
not _ _ O
force _ _ O
yourself _ _ O
to _ _ O
use _ _ O
the _ _ O
least _ _ O
number _ _ O
of _ _ O
states _ _ O
Nobody _ _ O
asks _ _ O
you _ _ O
to _ _ O
write _ _ O
a _ _ O
shortest _ _ O
possible _ _ O
program _ _ O
Unless _ _ O
you _ _ O
are _ _ O
asked _ _ O
to _ _ O
do _ _ O
so _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Designing _ _ O
Finite _ _ O
Automata _ _ O
Suppose _ _ O
the _ _ O
alphabet _ _ O
Σ _ _ O
is _ _ O
{ _ _ O
0 _ _ O
, _ _ O
1 _ _ O
} _ _ O
. _ _ O
Create _ _ O
a _ _ O
machine _ _ O
such _ _ O
that _ _ O
its _ _ O
language _ _ O
is _ _ O
the _ _ O
set _ _ O
of _ _ O
all _ _ O
strings _ _ O
that _ _ O
contain _ _ O
either _ _ O
11 _ _ O
or _ _ O
00 _ _ O
as _ _ O
a _ _ O
substring _ _ O
. _ _ O
q1 _ _ O
1 _ _ O
q0 _ _ O
1 _ _ O
1 _ _ O
q3 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
q2 _ _ O
Common _ _ O
mistakes _ _ O
: _ _ O
δ _ _ O
( _ _ O
q1 _ _ O
, _ _ O
0 _ _ O
) _ _ O
= _ _ O
q0 _ _ O
δ _ _ O
( _ _ O
q2 _ _ O
, _ _ O
1 _ _ O
) _ _ O
= _ _ O
q0 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O
0 _ _ O
, _ _ O
1 _ _ O

Designing _ _ O
Finite _ _ O
Automata _ _ O
Suppose _ _ O
the _ _ O
alphabet _ _ O
Σ _ _ O
is _ _ O
{ _ _ O
0 _ _ O
, _ _ O
1 _ _ O
} _ _ O
. _ _ O
Create _ _ O
a _ _ O
machine _ _ O
such _ _ O
that _ _ O
its _ _ O
language _ _ O
is _ _ O
the _ _ O
set _ _ O
of _ _ O
all _ _ O
strings _ _ O
that _ _ O
contain _ _ O
011 _ _ O
as _ _ O
a _ _ O
substring _ _ O
. _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
qs _ _ O
1 _ _ O
q0 _ _ O
q01 _ _ O
q011 _ _ O
1 _ _ O
0 _ _ O
Common _ _ O
mistakes _ _ O
: _ _ O
δ _ _ O
( _ _ O
q0 _ _ O
, _ _ O
0 _ _ O
) _ _ O
= _ _ O
qs _ _ O
δ _ _ O
( _ _ O
q01 _ _ O
, _ _ O
0 _ _ O
) _ _ O
= _ _ O
qs _ _ O
Hint _ _ O
: _ _ O
Name _ _ O
of _ _ O
a _ _ O
state _ _ O
can _ _ O
be _ _ O
used _ _ O
to _ _ O
indicate _ _ O
a _ _ O
state-of-mind _ _ O
q01 _ _ O
means _ _ O
“ _ _ O
I _ _ O
just _ _ O
see _ _ O
a _ _ O
0 _ _ O
immediately _ _ O
followed _ _ O
by _ _ O
a _ _ O
1 _ _ O
” _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O

Designing _ _ O
Finite _ _ O
Automata _ _ O
Suppose _ _ O
the _ _ O
alphabet _ _ O
Σ _ _ O
is _ _ O
{ _ _ O
0 _ _ O
, _ _ O
1 _ _ O
} _ _ O
. _ _ O
Create _ _ O
a _ _ O
machine _ _ O
such _ _ O
that _ _ O
its _ _ O
language _ _ O
is _ _ O
the _ _ O
set _ _ O
of _ _ O
all _ _ O
strings _ _ O
that _ _ O
ends _ _ O
with _ _ O
0110 _ _ O
. _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
q0 _ _ O
1 _ _ O
q1 _ _ O
q2 _ _ O
0 _ _ O
q3 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
Common _ _ O
mistakes _ _ O
: _ _ O
δ _ _ O
( _ _ O
q2 _ _ O
, _ _ O
0 _ _ O
) _ _ O
= _ _ O
q0 _ _ O
δ _ _ O
( _ _ O
q4 _ _ O
, _ _ O
0 _ _ O
) _ _ O
= _ _ O
q0 _ _ O
δ _ _ O
( _ _ O
q4 _ _ O
, _ _ O
1 _ _ O
) _ _ O
= _ _ O
q0 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
tkosiyat@cs.pitt.edu _ _ O
Finite _ _ O
Automata _ _ O
01 _ _ O
q4 _ _ O



