unlabeled|cs1541|lec3.3_cache_design2
-DOCSTART- -X- -X- O

Cache _ _ O
Design _ _ O
2 _ _ O
CS _ _ O
1541 _ _ O
Wonsun _ _ O
Ahn _ _ O

Cache _ _ O
Design _ _ O
Parameter _ _ O
6 _ _ O
: _ _ O
Write-Through _ _ O
vs. _ _ O
Write-Back _ _ O
2 _ _ O

Writes _ _ O
and _ _ O
Cache _ _ O
Consistency _ _ O
● _ _ O
Assume _ _ O
& _ _ O
x _ _ O
is _ _ O
1110102 _ _ O
, _ _ O
and _ _ O
x _ _ O
= _ _ O
= _ _ O
24 _ _ O
initially _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
& _ _ O
x _ _ O
addi _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
1 _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
& _ _ O
x _ _ O
# _ _ O
x++ _ _ O
● _ _ O
How _ _ O
will _ _ O
the _ _ O
lw _ _ O
change _ _ O
the _ _ O
cache _ _ O
? _ _ O
● _ _ O
How _ _ O
will _ _ O
the _ _ O
sw _ _ O
change _ _ O
the _ _ O
cache _ _ O
? _ _ O
o _ _ O
Uh _ _ O
oh _ _ O
, _ _ O
now _ _ O
the _ _ O
cache _ _ O
is _ _ O
inconsistent _ _ O
. _ _ O
( _ _ O
Memory _ _ O
still _ _ O
has _ _ O
the _ _ O
old _ _ O
value _ _ O
24 _ _ O
. _ _ O
) _ _ O
V _ _ O
000 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
011 _ _ O
0 _ _ O
100 _ _ O
0 _ _ O
101 _ _ O
0 _ _ O
110 _ _ O
0 _ _ O
111 _ _ O
0 _ _ O
Tag _ _ O
Data _ _ O
111 _ _ O
25 _ _ O
24 _ _ O
● _ _ O
How _ _ O
can _ _ O
we _ _ O
solve _ _ O
this _ _ O
? _ _ O
Two _ _ O
policies _ _ O
: _ _ O
o _ _ O
Write-through _ _ O
: _ _ O
Propagate _ _ O
write _ _ O
all _ _ O
the _ _ O
way _ _ O
through _ _ O
memory _ _ O
o _ _ O
Write-back _ _ O
: _ _ O
Write _ _ O
back _ _ O
cache _ _ O
block _ _ O
when _ _ O
it _ _ O
is _ _ O
evicted _ _ O
from _ _ O
cache _ _ O
3 _ _ O

Write-Through _ _ O
Policy _ _ O
4 _ _ O

Policy _ _ O
1 _ _ O
: _ _ O
Write-through _ _ O
● _ _ O
Write-through _ _ O
: _ _ O
o _ _ O
On _ _ O
hit _ _ O
, _ _ O
write _ _ O
to _ _ O
cache _ _ O
block _ _ O
and _ _ O
propagate _ _ O
write _ _ O
to _ _ O
lower _ _ O
memory _ _ O
o _ _ O
On _ _ O
miss _ _ O
, _ _ O
keep _ _ O
on _ _ O
propagating _ _ O
the _ _ O
write _ _ O
to _ _ O
lower _ _ O
memory _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
write _ _ O
25 _ _ O
to _ _ O
address _ _ O
1110102 _ _ O
? _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
write _ _ O
94 _ _ O
to _ _ O
address _ _ O
0000102 _ _ O
? _ _ O
→ _ _ O
Caches _ _ O
are _ _ O
kept _ _ O
consistent _ _ O
at _ _ O
all _ _ O
points _ _ O
in _ _ O
time _ _ O
! _ _ O
Memory _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
Address _ _ O
Data _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
000 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
000010 _ _ O
94 _ _ O
93 _ _ O
001 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
... _ _ O
... _ _ O
010 _ _ O
1 _ _ O
111 _ _ O
24 _ _ O
25 _ _ O
010 _ _ O
1 _ _ O
000 _ _ O
93 _ _ O
94 _ _ O
111010 _ _ O
25 _ _ O
24 _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
5 _ _ O

Write-through _ _ O
: _ _ O
Reads _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
read _ _ O
from _ _ O
address _ _ O
0000102 _ _ O
? _ _ O
o _ _ O
We _ _ O
can _ _ O
just _ _ O
discard _ _ O
the _ _ O
conflicting _ _ O
cache _ _ O
block _ _ O
1110102 _ _ O
o _ _ O
It _ _ O
’s _ _ O
just _ _ O
an _ _ O
extra _ _ O
copy _ _ O
of _ _ O
the _ _ O
same _ _ O
data _ _ O
● _ _ O
Note _ _ O
how _ _ O
we _ _ O
allocate _ _ O
blocks _ _ O
only _ _ O
on _ _ O
read _ _ O
misses _ _ O
o _ _ O
Write _ _ O
misses _ _ O
do _ _ O
n’t _ _ O
allocate _ _ O
blocks _ _ O
because _ _ O
it _ _ O
does _ _ O
n’t _ _ O
help _ _ O
anyway _ _ O
--- _ _ O
writes _ _ O
are _ _ O
propagated _ _ O
to _ _ O
lower _ _ O
memory _ _ O
even _ _ O
on _ _ O
write _ _ O
hits _ _ O
o _ _ O
This _ _ O
policy _ _ O
is _ _ O
called _ _ O
no _ _ O
write _ _ O
allocate _ _ O
Memory _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
Address _ _ O
Data _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
000 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
000010 _ _ O
94 _ _ O
93 _ _ O
001 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
... _ _ O
... _ _ O
010 _ _ O
1 _ _ O
000 _ _ O
111 _ _ O
24 _ _ O
94 _ _ O
25 _ _ O
010 _ _ O
1 _ _ O
000 _ _ O
93 _ _ O
94 _ _ O
111010 _ _ O
25 _ _ O
24 _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
6 _ _ O

Write-through _ _ O
: _ _ O
Drawbacks _ _ O
● _ _ O
Drawback _ _ O
: _ _ O
Long _ _ O
write _ _ O
delays _ _ O
regardless _ _ O
of _ _ O
hit _ _ O
or _ _ O
miss _ _ O
o _ _ O
Must _ _ O
always _ _ O
propagate _ _ O
writes _ _ O
all _ _ O
the _ _ O
way _ _ O
to _ _ O
DRAM _ _ O
● _ _ O
Solution _ _ O
: _ _ O
Write _ _ O
buffer _ _ O
maintaining _ _ O
pending _ _ O
writes _ _ O
o _ _ O
CPU _ _ O
gets _ _ O
on _ _ O
with _ _ O
work _ _ O
after _ _ O
moving _ _ O
pending _ _ O
write _ _ O
to _ _ O
write _ _ O
buffer _ _ O
o _ _ O
But _ _ O
does _ _ O
the _ _ O
write _ _ O
buffer _ _ O
solve _ _ O
all _ _ O
problems _ _ O
? _ _ O
Memory _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
Address _ _ O
Data _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
000 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
000010 _ _ O
94 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
001 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
... _ _ O
... _ _ O
010 _ _ O
1 _ _ O
111 _ _ O
24 _ _ O
25 _ _ O
010 _ _ O
1 _ _ O
000 _ _ O
93 _ _ O
94 _ _ O
111010 _ _ O
25 _ _ O
24 _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
7 _ _ O

Write-through _ _ O
: _ _ O
Drawbacks _ _ O
● _ _ O
The _ _ O
write _ _ O
buffer _ _ O
does _ _ O
not _ _ O
solve _ _ O
all _ _ O
problems _ _ O
. _ _ O
1 _ _ O
. _ _ O
Write _ _ O
buffer _ _ O
must _ _ O
be _ _ O
very _ _ O
big _ _ O
to _ _ O
store _ _ O
all _ _ O
pending _ _ O
writes _ _ O
o _ _ O
May _ _ O
take _ _ O
more _ _ O
than _ _ O
100 _ _ O
cycles _ _ O
for _ _ O
write _ _ O
to _ _ O
propagate _ _ O
to _ _ O
memory _ _ O
o _ _ O
Write _ _ O
buffer _ _ O
is _ _ O
always _ _ O
checked _ _ O
before _ _ O
L1 _ _ O
$ _ _ O
→ _ _ O
adds _ _ O
to _ _ O
hit _ _ O
time _ _ O
2 _ _ O
. _ _ O
Write _ _ O
buffer _ _ O
does _ _ O
not _ _ O
solve _ _ O
bandwidth _ _ O
problems _ _ O
o _ _ O
If _ _ O
memory _ _ O
bandwidth _ _ O
< _ _ O
rate _ _ O
of _ _ O
writes _ _ O
in _ _ O
program _ _ O
, _ _ O
write _ _ O
buffer _ _ O
will _ _ O
fill _ _ O
up _ _ O
quickly _ _ O
, _ _ O
no _ _ O
matter _ _ O
how _ _ O
big _ _ O
it _ _ O
is _ _ O
● _ _ O
Impractical _ _ O
to _ _ O
write-through _ _ O
all _ _ O
the _ _ O
way _ _ O
to _ _ O
memory _ _ O
o _ _ O
Typically _ _ O
only _ _ O
L1 _ _ O
caches _ _ O
are _ _ O
write-through _ _ O
, _ _ O
if _ _ O
any _ _ O
● _ _ O
We _ _ O
need _ _ O
another _ _ O
strategy _ _ O
that _ _ O
is _ _ O
not _ _ O
so _ _ O
bandwidth-intensive _ _ O
8 _ _ O

Write-Back _ _ O
Policy _ _ O
9 _ _ O

Policy _ _ O
2 _ _ O
: _ _ O
Write-back _ _ O
● _ _ O
Dirty _ _ O
block _ _ O
: _ _ O
a _ _ O
block _ _ O
that _ _ O
is _ _ O
temporarily _ _ O
inconsistent _ _ O
with _ _ O
memory _ _ O
o _ _ O
On _ _ O
a _ _ O
hit _ _ O
, _ _ O
write _ _ O
to _ _ O
cache _ _ O
block _ _ O
, _ _ O
marking _ _ O
it _ _ O
dirty _ _ O
. _ _ O
No _ _ O
propagation _ _ O
. _ _ O
o _ _ O
Write _ _ O
back _ _ O
dirty _ _ O
block _ _ O
to _ _ O
lower _ _ O
memory _ _ O
only _ _ O
when _ _ O
it _ _ O
is _ _ O
evicted _ _ O
→ _ _ O
Saves _ _ O
bandwidth _ _ O
since _ _ O
write _ _ O
hits _ _ O
no _ _ O
longer _ _ O
access _ _ O
memory _ _ O
● _ _ O
A _ _ O
dirty _ _ O
bit _ _ O
is _ _ O
added _ _ O
to _ _ O
the _ _ O
cache _ _ O
block _ _ O
metadata _ _ O
( _ _ O
marked _ _ O
“ _ _ O
D _ _ O
” _ _ O
) _ _ O
o _ _ O
Block _ _ O
0000012 _ _ O
is _ _ O
clean _ _ O
→ _ _ O
can _ _ O
be _ _ O
discarded _ _ O
on _ _ O
eviction _ _ O
o _ _ O
Block _ _ O
1110102 _ _ O
is _ _ O
dirty _ _ O
→ _ _ O
needs _ _ O
to _ _ O
be _ _ O
written _ _ O
back _ _ O
on _ _ O
eviction _ _ O
Memory _ _ O
Cache _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
93 _ _ O
010 _ _ O
1 _ _ O
1 _ _ O
111 _ _ O
25 _ _ O
... _ _ O
... _ _ O
... _ _ O
Address _ _ O
Data _ _ O
... _ _ O
... _ _ O
000001 _ _ O
93 _ _ O
... _ _ O
... _ _ O
111010 _ _ O
24 _ _ O
... _ _ O
... _ _ O
10 _ _ O

Write-back _ _ O
: _ _ O
Write _ _ O
allocate _ _ O
● _ _ O
What _ _ O
happens _ _ O
on _ _ O
a _ _ O
write _ _ O
miss _ _ O
? _ _ O
o _ _ O
If _ _ O
no _ _ O
write _ _ O
allocate _ _ O
like _ _ O
write-through _ _ O
, _ _ O
will _ _ O
miss _ _ O
again _ _ O
on _ _ O
next _ _ O
write _ _ O
o _ _ O
And _ _ O
on _ _ O
the _ _ O
next _ _ O
write _ _ O
, _ _ O
and _ _ O
on _ _ O
the _ _ O
next _ _ O
write _ _ O
, _ _ O
… _ _ O
o _ _ O
No _ _ O
bandwidth _ _ O
savings _ _ O
from _ _ O
hitting _ _ O
in _ _ O
cache _ _ O
● _ _ O
Unlike _ _ O
write-through _ _ O
, _ _ O
write-back _ _ O
has _ _ O
a _ _ O
write _ _ O
allocate _ _ O
policy _ _ O
o _ _ O
On _ _ O
write _ _ O
miss _ _ O
, _ _ O
block _ _ O
is _ _ O
allocated _ _ O
in _ _ O
cache _ _ O
to _ _ O
stop _ _ O
further _ _ O
misses _ _ O
o _ _ O
On _ _ O
allocation _ _ O
, _ _ O
the _ _ O
block _ _ O
is _ _ O
read _ _ O
in _ _ O
from _ _ O
lower _ _ O
memory _ _ O
● _ _ O
Q _ _ O
: _ _ O
Why _ _ O
the _ _ O
wasted _ _ O
effort _ _ O
? _ _ O
o _ _ O
Are _ _ O
n’t _ _ O
we _ _ O
going _ _ O
to _ _ O
overwrite _ _ O
the _ _ O
block _ _ O
anyway _ _ O
with _ _ O
new _ _ O
data _ _ O
? _ _ O
o _ _ O
Why _ _ O
read _ _ O
in _ _ O
data _ _ O
that _ _ O
is _ _ O
going _ _ O
be _ _ O
overwritten _ _ O
? _ _ O
11 _ _ O

Write-back _ _ O
: _ _ O
Write _ _ O
allocate _ _ O
● _ _ O
Because _ _ O
a _ _ O
block _ _ O
is _ _ O
multiple _ _ O
bytes _ _ O
, _ _ O
and _ _ O
you _ _ O
are _ _ O
updating _ _ O
just _ _ O
a _ _ O
few _ _ O
o _ _ O
Suppose _ _ O
a _ _ O
cache _ _ O
block _ _ O
is _ _ O
8 _ _ O
bytes _ _ O
( _ _ O
2 _ _ O
words _ _ O
) _ _ O
o _ _ O
Suppose _ _ O
you _ _ O
are _ _ O
writing _ _ O
to _ _ O
only _ _ O
the _ _ O
first _ _ O
word _ _ O
V _ _ O
D _ _ O
1 _ _ O
1 _ _ O
Tag _ _ O
Data _ _ O
first _ _ O
word _ _ O
( _ _ O
written _ _ O
) _ _ O
second _ _ O
word _ _ O
( _ _ O
not _ _ O
written _ _ O
) _ _ O
o _ _ O
After _ _ O
allocate _ _ O
, _ _ O
the _ _ O
entire _ _ O
cache _ _ O
block _ _ O
is _ _ O
marked _ _ O
valid _ _ O
▪ _ _ O
That _ _ O
means _ _ O
second _ _ O
word _ _ O
as _ _ O
well _ _ O
as _ _ O
first _ _ O
word _ _ O
must _ _ O
be _ _ O
valid _ _ O
▪ _ _ O
That _ _ O
means _ _ O
second _ _ O
word _ _ O
must _ _ O
be _ _ O
fetched _ _ O
from _ _ O
lower _ _ O
memory _ _ O
▪ _ _ O
Otherwise _ _ O
if _ _ O
later _ _ O
second _ _ O
word _ _ O
is _ _ O
read _ _ O
, _ _ O
it _ _ O
will _ _ O
contain _ _ O
junk _ _ O
data _ _ O
▪ _ _ O
Unavoidable _ _ O
, _ _ O
unless _ _ O
you _ _ O
have _ _ O
a _ _ O
valid _ _ O
bit _ _ O
for _ _ O
each _ _ O
byte _ _ O
– _ _ O
That _ _ O
means _ _ O
spending _ _ O
1 _ _ O
bit _ _ O
for _ _ O
every _ _ O
8 _ _ O
bits _ _ O
of _ _ O
data _ _ O
– _ _ O
That _ _ O
’s _ _ O
just _ _ O
too _ _ O
much _ _ O
metadata _ _ O
overhead _ _ O
12 _ _ O

Policy _ _ O
2 _ _ O
: _ _ O
Write-back _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
write _ _ O
25 _ _ O
to _ _ O
address _ _ O
1110102 _ _ O
? _ _ O
Memory _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
Address _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
111 _ _ O
24 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
93 _ _ O
111010 _ _ O
24 _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
13 _ _ O

Policy _ _ O
2 _ _ O
: _ _ O
Write-back _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
write _ _ O
25 _ _ O
to _ _ O
address _ _ O
1110102 _ _ O
? _ _ O
o _ _ O
L1 _ _ O
Cache _ _ O
hit _ _ O
! _ _ O
Update _ _ O
cache _ _ O
block _ _ O
and _ _ O
mark _ _ O
it _ _ O
dirty _ _ O
. _ _ O
o _ _ O
That _ _ O
’s _ _ O
it _ _ O
! _ _ O
How _ _ O
quick _ _ O
is _ _ O
that _ _ O
compared _ _ O
to _ _ O
write-through _ _ O
? _ _ O
Memory _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
Address _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
111 _ _ O
24 _ _ O
25 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
93 _ _ O
111010 _ _ O
24 _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
14 _ _ O

Policy _ _ O
2 _ _ O
: _ _ O
Write-back _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
write _ _ O
94 _ _ O
to _ _ O
address _ _ O
0000102 _ _ O
? _ _ O
o _ _ O
L1 _ _ O
Cache _ _ O
miss _ _ O
! _ _ O
First _ _ O
thing _ _ O
we _ _ O
will _ _ O
do _ _ O
is _ _ O
add _ _ O
store _ _ O
to _ _ O
Write _ _ O
Buffer _ _ O
. _ _ O
( _ _ O
So _ _ O
that _ _ O
the _ _ O
CPU _ _ O
can _ _ O
continue _ _ O
executing _ _ O
past _ _ O
the _ _ O
store _ _ O
) _ _ O
Memory _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
Address _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
1 _ _ O
94 _ _ O
010 _ _ O
1 _ _ O
1 _ _ O
111 _ _ O
25 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
93 _ _ O
111010 _ _ O
24 _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
15 _ _ O

Policy _ _ O
2 _ _ O
: _ _ O
Write-back _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
write _ _ O
94 _ _ O
to _ _ O
address _ _ O
0000102 _ _ O
? _ _ O
( _ _ O
cont’d _ _ O
) _ _ O
o _ _ O
Next _ _ O
the _ _ O
L2 _ _ O
Cache _ _ O
is _ _ O
searched _ _ O
and _ _ O
it _ _ O
’s _ _ O
a _ _ O
hit _ _ O
! _ _ O
o _ _ O
To _ _ O
bring _ _ O
in _ _ O
block _ _ O
to _ _ O
L1 _ _ O
Cache _ _ O
, _ _ O
we _ _ O
first _ _ O
need _ _ O
to _ _ O
evict _ _ O
block _ _ O
25 _ _ O
. _ _ O
o _ _ O
It _ _ O
’s _ _ O
a _ _ O
dirty _ _ O
block _ _ O
, _ _ O
so _ _ O
we _ _ O
ca _ _ O
n’t _ _ O
just _ _ O
discard _ _ O
it _ _ O
. _ _ O
Need _ _ O
to _ _ O
write _ _ O
it _ _ O
back _ _ O
! _ _ O
o _ _ O
Since _ _ O
block _ _ O
25 _ _ O
misses _ _ O
in _ _ O
L2 _ _ O
, _ _ O
it _ _ O
will _ _ O
take _ _ O
the _ _ O
long _ _ O
trip _ _ O
to _ _ O
Memory _ _ O
o _ _ O
Is _ _ O
there _ _ O
a _ _ O
way _ _ O
to _ _ O
put _ _ O
it _ _ O
aside _ _ O
and _ _ O
get _ _ O
to _ _ O
it _ _ O
later _ _ O
? _ _ O
Memory _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
Address _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
1 _ _ O
94 _ _ O
010 _ _ O
1 _ _ O
1 _ _ O
111 _ _ O
25 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
93 _ _ O
111010 _ _ O
24 _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
... _ _ O
16 _ _ O

Policy _ _ O
2 _ _ O
: _ _ O
Write-back _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
write _ _ O
94 _ _ O
to _ _ O
address _ _ O
0000102 _ _ O
? _ _ O
( _ _ O
cont’d _ _ O
) _ _ O
o _ _ O
Yes _ _ O
! _ _ O
Add _ _ O
Write _ _ O
Buffers _ _ O
to _ _ O
caches _ _ O
, _ _ O
just _ _ O
like _ _ O
we _ _ O
did _ _ O
for _ _ O
the _ _ O
pipeline _ _ O
! _ _ O
o _ _ O
Move _ _ O
block _ _ O
to _ _ O
L1 _ _ O
Write _ _ O
Buffer _ _ O
so _ _ O
L1 _ _ O
Cache _ _ O
can _ _ O
continue _ _ O
working _ _ O
o _ _ O
Pending _ _ O
block _ _ O
will _ _ O
get _ _ O
written _ _ O
back _ _ O
to _ _ O
Memory _ _ O
eventually _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
111 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
25 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
Memory _ _ O
93 _ _ O
Address _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
111010 _ _ O
24 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
94 _ _ O
17 _ _ O

Policy _ _ O
2 _ _ O
: _ _ O
Write-back _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
write _ _ O
94 _ _ O
to _ _ O
address _ _ O
0000102 _ _ O
? _ _ O
( _ _ O
cont’d _ _ O
) _ _ O
o _ _ O
Now _ _ O
we _ _ O
can _ _ O
finally _ _ O
read _ _ O
in _ _ O
block _ _ O
93 _ _ O
to _ _ O
the _ _ O
L1 _ _ O
Cache _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
010 _ _ O
0 _ _ O
0 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
Memory _ _ O
93 _ _ O
Address _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
111 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
111010 _ _ O
24 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
94 _ _ O
25 _ _ O
18 _ _ O

Policy _ _ O
2 _ _ O
: _ _ O
Write-back _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
write _ _ O
94 _ _ O
to _ _ O
address _ _ O
0000102 _ _ O
? _ _ O
( _ _ O
cont’d _ _ O
) _ _ O
o _ _ O
Now _ _ O
we _ _ O
can _ _ O
finally _ _ O
read _ _ O
in _ _ O
block _ _ O
93 _ _ O
to _ _ O
the _ _ O
L1 _ _ O
Cache _ _ O
o _ _ O
And _ _ O
write _ _ O
94 _ _ O
into _ _ O
the _ _ O
cache _ _ O
block _ _ O
, _ _ O
also _ _ O
marking _ _ O
it _ _ O
dirty _ _ O
o _ _ O
Store _ _ O
is _ _ O
finished _ _ O
, _ _ O
so _ _ O
now _ _ O
remove _ _ O
it _ _ O
from _ _ O
pipeline _ _ O
Write _ _ O
Buffer _ _ O
! _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
94 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
Memory _ _ O
93 _ _ O
Address _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
111 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
111010 _ _ O
24 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
94 _ _ O
25 _ _ O
19 _ _ O

Policy _ _ O
2 _ _ O
: _ _ O
Write-back _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
write _ _ O
94 _ _ O
to _ _ O
address _ _ O
0000102 _ _ O
? _ _ O
( _ _ O
cont’d _ _ O
) _ _ O
o _ _ O
Eventually _ _ O
, _ _ O
the _ _ O
pending _ _ O
block _ _ O
in _ _ O
L1 _ _ O
Write _ _ O
Buffer _ _ O
will _ _ O
write _ _ O
back _ _ O
o _ _ O
But _ _ O
this _ _ O
did _ _ O
n’t _ _ O
affect _ _ O
the _ _ O
original _ _ O
store _ _ O
latency _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
94 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
Memory _ _ O
93 _ _ O
Address _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
111 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
111010 _ _ O
24 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
25 _ _ O
20 _ _ O

Write-back _ _ O
: _ _ O
Reads _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
read _ _ O
25 _ _ O
from _ _ O
address _ _ O
1110102 _ _ O
? _ _ O
o _ _ O
Misses _ _ O
in _ _ O
L1 _ _ O
and _ _ O
L2 _ _ O
caches _ _ O
and _ _ O
must _ _ O
go _ _ O
all _ _ O
the _ _ O
way _ _ O
to _ _ O
Memory _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
94 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
Memory _ _ O
93 _ _ O
Address _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
111010 _ _ O
25 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
21 _ _ O

Write-back _ _ O
: _ _ O
Reads _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
read _ _ O
25 _ _ O
from _ _ O
address _ _ O
1110102 _ _ O
? _ _ O
o _ _ O
Misses _ _ O
in _ _ O
L1 _ _ O
and _ _ O
L2 _ _ O
caches _ _ O
and _ _ O
must _ _ O
go _ _ O
all _ _ O
the _ _ O
way _ _ O
to _ _ O
Memory _ _ O
o _ _ O
Fills _ _ O
the _ _ O
L2 _ _ O
Cache _ _ O
with _ _ O
25 _ _ O
on _ _ O
the _ _ O
way _ _ O
back _ _ O
after _ _ O
evicting _ _ O
block _ _ O
93 _ _ O
( _ _ O
Note _ _ O
that _ _ O
block _ _ O
93 _ _ O
can _ _ O
simply _ _ O
be _ _ O
discarded _ _ O
since _ _ O
it _ _ O
’s _ _ O
clean _ _ O
) _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
94 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
111 _ _ O
000 _ _ O
Memory _ _ O
25 _ _ O
93 _ _ O
Address _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
111010 _ _ O
25 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
22 _ _ O

Write-back _ _ O
: _ _ O
Reads _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
read _ _ O
25 _ _ O
from _ _ O
address _ _ O
1110102 _ _ O
? _ _ O
( _ _ O
cont’d _ _ O
) _ _ O
o _ _ O
Now _ _ O
it _ _ O
needs _ _ O
to _ _ O
evict _ _ O
block _ _ O
94 _ _ O
in _ _ O
L1 _ _ O
Cache _ _ O
before _ _ O
filling _ _ O
with _ _ O
25 _ _ O
o _ _ O
But _ _ O
block _ _ O
94 _ _ O
needs _ _ O
to _ _ O
be _ _ O
written _ _ O
back _ _ O
since _ _ O
it _ _ O
’s _ _ O
dirty _ _ O
! _ _ O
o _ _ O
So _ _ O
move _ _ O
to _ _ O
Write _ _ O
Buffer _ _ O
temporarily _ _ O
to _ _ O
make _ _ O
space _ _ O
. _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
94 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
111 _ _ O
000 _ _ O
Memory _ _ O
25 _ _ O
93 _ _ O
Address _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
111010 _ _ O
25 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
23 _ _ O

Write-back _ _ O
: _ _ O
Reads _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
read _ _ O
25 _ _ O
from _ _ O
address _ _ O
1110102 _ _ O
? _ _ O
( _ _ O
cont’d _ _ O
) _ _ O
o _ _ O
Now _ _ O
L1 _ _ O
Cache _ _ O
can _ _ O
be _ _ O
filled _ _ O
with _ _ O
block _ _ O
25 _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
111 _ _ O
010 _ _ O
0 _ _ O
0 _ _ O
Memory _ _ O
25 _ _ O
Address _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
111010 _ _ O
25 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
94 _ _ O
24 _ _ O

Write-back _ _ O
: _ _ O
Reads _ _ O
● _ _ O
What _ _ O
happens _ _ O
if _ _ O
we _ _ O
read _ _ O
25 _ _ O
from _ _ O
address _ _ O
1110102 _ _ O
? _ _ O
( _ _ O
cont’d _ _ O
) _ _ O
o _ _ O
Now _ _ O
L1 _ _ O
Cache _ _ O
can _ _ O
be _ _ O
filled _ _ O
with _ _ O
block _ _ O
25 _ _ O
o _ _ O
Block _ _ O
94 _ _ O
will _ _ O
eventually _ _ O
be _ _ O
written _ _ O
back _ _ O
to _ _ O
Memory _ _ O
o _ _ O
Write _ _ O
buffers _ _ O
in _ _ O
this _ _ O
context _ _ O
are _ _ O
also _ _ O
called _ _ O
victim _ _ O
caches _ _ O
L1 _ _ O
Cache _ _ O
L2 _ _ O
Cache _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
000 _ _ O
0 _ _ O
0 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
010 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
111 _ _ O
001 _ _ O
0 _ _ O
0 _ _ O
25 _ _ O
010 _ _ O
1 _ _ O
1 _ _ O
111 _ _ O
Memory _ _ O
25 _ _ O
Address _ _ O
Data _ _ O
... _ _ O
... _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
Write _ _ O
Buffer _ _ O
000010 _ _ O
93 _ _ O
V _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
V _ _ O
D _ _ O
Tag _ _ O
Data _ _ O
... _ _ O
... _ _ O
0 _ _ O
1 _ _ O
0 _ _ O
000 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
0 _ _ O
111010 _ _ O
25 _ _ O
0 _ _ O
0 _ _ O
... _ _ O
... _ _ O
94 _ _ O
25 _ _ O

Impact _ _ O
of _ _ O
Write _ _ O
Policy _ _ O
on _ _ O
AMAT _ _ O
● _ _ O
AMAT _ _ O
= _ _ O
hit _ _ O
time _ _ O
+ _ _ O
( _ _ O
miss _ _ O
rate _ _ O
× _ _ O
miss _ _ O
penalty _ _ O
) _ _ O
● _ _ O
Write-through _ _ O
caches _ _ O
can _ _ O
have _ _ O
a _ _ O
larger _ _ O
write _ _ O
hit _ _ O
time _ _ O
o _ _ O
With _ _ O
write-back _ _ O
, _ _ O
a _ _ O
read _ _ O
hit _ _ O
and _ _ O
write _ _ O
hit _ _ O
take _ _ O
the _ _ O
same _ _ O
amount _ _ O
of _ _ O
time _ _ O
o _ _ O
With _ _ O
write-through _ _ O
, _ _ O
a _ _ O
write _ _ O
hit _ _ O
takes _ _ O
the _ _ O
same _ _ O
time _ _ O
as _ _ O
a _ _ O
write _ _ O
miss _ _ O
● _ _ O
Write-back _ _ O
caches _ _ O
can _ _ O
have _ _ O
a _ _ O
larger _ _ O
miss _ _ O
penalty _ _ O
o _ _ O
Due _ _ O
to _ _ O
write _ _ O
allocate _ _ O
policy _ _ O
on _ _ O
write _ _ O
misses _ _ O
o _ _ O
Due _ _ O
to _ _ O
write-backs _ _ O
of _ _ O
dirty _ _ O
blocks _ _ O
when _ _ O
making _ _ O
space _ _ O
for _ _ O
new _ _ O
block _ _ O
● _ _ O
Both _ _ O
issues _ _ O
can _ _ O
be _ _ O
mitigated _ _ O
using _ _ O
write _ _ O
buffers _ _ O
to _ _ O
varying _ _ O
degrees _ _ O
● _ _ O
All _ _ O
in _ _ O
all _ _ O
, _ _ O
write-back _ _ O
caches _ _ O
usually _ _ O
outperform _ _ O
write-through _ _ O
caches _ _ O
o _ _ O
Because _ _ O
write _ _ O
hits _ _ O
are _ _ O
much _ _ O
more _ _ O
frequent _ _ O
compared _ _ O
to _ _ O
misses _ _ O
● _ _ O
But _ _ O
write-through _ _ O
sometimes _ _ O
used _ _ O
in _ _ O
L1 _ _ O
cache _ _ O
due _ _ O
to _ _ O
simplicity _ _ O
o _ _ O
Plenty _ _ O
of _ _ O
L1 _ _ O
→ _ _ O
L2 _ _ O
( _ _ O
intra-chip _ _ O
) _ _ O
bandwidth _ _ O
to _ _ O
handle _ _ O
write _ _ O
propagation _ _ O
o _ _ O
For _ _ O
L3 _ _ O
, _ _ O
L3 _ _ O
→ _ _ O
DRAM _ _ O
bandwidth _ _ O
can _ _ O
not _ _ O
support _ _ O
write _ _ O
propagation _ _ O
26 _ _ O

Cache _ _ O
Design _ _ O
Parameter _ _ O
7 _ _ O
: _ _ O
Blocking _ _ O
vs. _ _ O
Non-blocking _ _ O
27 _ _ O

Blocking _ _ O
Cache _ _ O
FSM _ _ O
for _ _ O
Write _ _ O
Back _ _ O
Caches _ _ O
● _ _ O
FSM _ _ O
must _ _ O
be _ _ O
in _ _ O
Idle _ _ O
state _ _ O
for _ _ O
cache _ _ O
to _ _ O
receive _ _ O
new _ _ O
requests _ _ O
● _ _ O
While _ _ O
“ _ _ O
Memory _ _ O
not _ _ O
Ready _ _ O
” _ _ O
, _ _ O
blocks _ _ O
subsequent _ _ O
requests _ _ O
→ _ _ O
Called _ _ O
Blocking _ _ O
Cache _ _ O
● _ _ O
Write _ _ O
buffer _ _ O
allows _ _ O
cache _ _ O
to _ _ O
defer _ _ O
write-back _ _ O
until _ _ O
later _ _ O
o _ _ O
Allows _ _ O
quickly _ _ O
return _ _ O
to _ _ O
Idle _ _ O
● _ _ O
But _ _ O
how _ _ O
about _ _ O
“ _ _ O
Memory _ _ O
not _ _ O
Ready _ _ O
” _ _ O
on _ _ O
Allocate _ _ O
? _ _ O
28 _ _ O

Non-blocking _ _ O
caches _ _ O
service _ _ O
requests _ _ O
concurrently _ _ O
Cache _ _ O
Miss _ _ O
● _ _ O
Blocking _ _ O
caches _ _ O
: _ _ O
CPU _ _ O
Compute _ _ O
CPU _ _ O
Compute _ _ O
Memory _ _ O
Stall _ _ O
Cache _ _ O
Cache _ _ O
Stall _ _ O
on _ _ O
Miss _ _ O
Hit _ _ O
Use _ _ O
● _ _ O
Hit _ _ O
under _ _ O
miss _ _ O
: _ _ O
CPU _ _ O
Compute _ _ O
CPU _ _ O
Compute _ _ O
Memory _ _ O
Stall _ _ O
Cache _ _ O
Cache _ _ O
Stall _ _ O
on _ _ O
Miss _ _ O
Miss _ _ O
Use _ _ O
● _ _ O
Miss _ _ O
under _ _ O
miss _ _ O
: _ _ O
CPU _ _ O
Compute _ _ O
CPU _ _ O
Compute _ _ O
Memory _ _ O
Stall _ _ O
Memory _ _ O
Stall _ _ O
29 _ _ O

Non-blocking _ _ O
caches _ _ O
service _ _ O
requests _ _ O
concurrently _ _ O
Cache _ _ O
Cache _ _ O
Stall _ _ O
on _ _ O
Miss _ _ O
Hit _ _ O
Use _ _ O
● _ _ O
Hit _ _ O
under _ _ O
miss _ _ O
: _ _ O
CPU _ _ O
Compute _ _ O
CPU _ _ O
Compute _ _ O
Memory _ _ O
Stall _ _ O
Cache _ _ O
Cache _ _ O
Stall _ _ O
on _ _ O
Miss _ _ O
Miss _ _ O
Use _ _ O
● _ _ O
Miss _ _ O
under _ _ O
miss _ _ O
: _ _ O
CPU _ _ O
Compute _ _ O
CPU _ _ O
Compute _ _ O
Memory _ _ O
Stall _ _ O
Memory _ _ O
Stall _ _ O
● _ _ O
Non-blocking _ _ O
cache _ _ O
allows _ _ O
both _ _ O
to _ _ O
happen _ _ O
o _ _ O
Allows _ _ O
Memory _ _ O
Level _ _ O
Parallelism _ _ O
( _ _ O
MLP _ _ O
) _ _ O
o _ _ O
As _ _ O
important _ _ O
to _ _ O
performance _ _ O
as _ _ O
Instruction _ _ O
Level _ _ O
Parallelism _ _ O
( _ _ O
ILP _ _ O
) _ _ O
● _ _ O
Miss _ _ O
Status _ _ O
Handling _ _ O
Register _ _ O
( _ _ O
MSHR _ _ O
) _ _ O
table _ _ O
tracks _ _ O
pending _ _ O
requests _ _ O
30 _ _ O

Impact _ _ O
of _ _ O
non-blocking _ _ O
caches _ _ O
● _ _ O
Non-blocking _ _ O
caches _ _ O
do _ _ O
not _ _ O
impact _ _ O
our _ _ O
three _ _ O
cache _ _ O
metrics _ _ O
o _ _ O
Hit _ _ O
time _ _ O
, _ _ O
miss _ _ O
rate _ _ O
, _ _ O
and _ _ O
miss _ _ O
penalty _ _ O
remain _ _ O
mostly _ _ O
the _ _ O
same _ _ O
● _ _ O
Impact _ _ O
is _ _ O
that _ _ O
miss _ _ O
penalty _ _ O
can _ _ O
be _ _ O
overlapped _ _ O
with _ _ O
: _ _ O
o _ _ O
Computation _ _ O
of _ _ O
instructions _ _ O
not _ _ O
dependent _ _ O
on _ _ O
the _ _ O
miss _ _ O
o _ _ O
Miss _ _ O
penalties _ _ O
of _ _ O
other _ _ O
memory _ _ O
requests _ _ O
● _ _ O
Out-of-order _ _ O
processors _ _ O
are _ _ O
always _ _ O
coupled _ _ O
with _ _ O
a _ _ O
non-blocking _ _ O
cache _ _ O
o _ _ O
Otherwise _ _ O
, _ _ O
the _ _ O
ability _ _ O
to _ _ O
do _ _ O
out-of-order _ _ O
execution _ _ O
is _ _ O
severely _ _ O
stymied _ _ O
31 _ _ O

Cache _ _ O
Design _ _ O
Parameter _ _ O
8 _ _ O
: _ _ O
Unified _ _ O
vs. _ _ O
Split _ _ O
32 _ _ O

Problem _ _ O
with _ _ O
Split _ _ O
Caches _ _ O
● _ _ O
If _ _ O
cache _ _ O
is _ _ O
split _ _ O
into _ _ O
two _ _ O
( _ _ O
i-cache _ _ O
and _ _ O
d-cache _ _ O
) _ _ O
o _ _ O
Space _ _ O
can _ _ O
not _ _ O
be _ _ O
flexibly _ _ O
allocated _ _ O
between _ _ O
data _ _ O
and _ _ O
code _ _ O
Code _ _ O
I-Cache _ _ O
Data _ _ O
D-Cache _ _ O
If _ _ O
our _ _ O
working _ _ O
set _ _ O
looks _ _ O
like _ _ O
this _ _ O
– _ _ O
say _ _ O
, _ _ O
in _ _ O
a _ _ O
small _ _ O
loop _ _ O
that _ _ O
's _ _ O
accessing _ _ O
a _ _ O
large _ _ O
array _ _ O
– _ _ O
then _ _ O
we _ _ O
run _ _ O
out _ _ O
of _ _ O
data _ _ O
space _ _ O
. _ _ O
Code _ _ O
If _ _ O
our _ _ O
working _ _ O
set _ _ O
looks _ _ O
like _ _ O
this _ _ O
– _ _ O
say _ _ O
, _ _ O
in _ _ O
a _ _ O
large _ _ O
function _ _ O
that _ _ O
's _ _ O
only _ _ O
using _ _ O
stack _ _ O
variables _ _ O
– _ _ O
then _ _ O
we _ _ O
run _ _ O
out _ _ O
of _ _ O
code _ _ O
space _ _ O
. _ _ O
Data _ _ O
33 _ _ O

Impact _ _ O
of _ _ O
Unifying _ _ O
Cache _ _ O
● _ _ O
The _ _ O
answer _ _ O
to _ _ O
the _ _ O
problem _ _ O
is _ _ O
to _ _ O
simply _ _ O
unify _ _ O
the _ _ O
cache _ _ O
into _ _ O
one _ _ O
● _ _ O
AMAT _ _ O
= _ _ O
hit _ _ O
time _ _ O
+ _ _ O
( _ _ O
miss _ _ O
rate _ _ O
× _ _ O
miss _ _ O
penalty _ _ O
) _ _ O
● _ _ O
Impact _ _ O
of _ _ O
unifying _ _ O
cache _ _ O
on _ _ O
miss _ _ O
rate _ _ O
: _ _ O
o _ _ O
Smaller _ _ O
miss _ _ O
rate _ _ O
due _ _ O
to _ _ O
more _ _ O
flexible _ _ O
use _ _ O
of _ _ O
space _ _ O
● _ _ O
Impact _ _ O
of _ _ O
unifying _ _ O
cache _ _ O
on _ _ O
hit _ _ O
time _ _ O
: _ _ O
o _ _ O
Potentially _ _ O
longer _ _ O
hit _ _ O
time _ _ O
due _ _ O
to _ _ O
structural _ _ O
hazard _ _ O
o _ _ O
With _ _ O
split _ _ O
caches _ _ O
, _ _ O
i-cache _ _ O
and _ _ O
d-cache _ _ O
can _ _ O
be _ _ O
accessed _ _ O
simultaneously _ _ O
o _ _ O
With _ _ O
unified _ _ O
cache _ _ O
, _ _ O
access _ _ O
request _ _ O
must _ _ O
wait _ _ O
until _ _ O
port _ _ O
is _ _ O
available _ _ O
● _ _ O
L1 _ _ O
cache _ _ O
is _ _ O
almost _ _ O
always _ _ O
split _ _ O
o _ _ O
Frequent _ _ O
accesses _ _ O
directly _ _ O
from _ _ O
pipeline _ _ O
trigger _ _ O
structural _ _ O
hazard _ _ O
often _ _ O
● _ _ O
Lower _ _ O
level _ _ O
caches _ _ O
are _ _ O
almost _ _ O
always _ _ O
unified _ _ O
o _ _ O
Accesses _ _ O
are _ _ O
infrequent _ _ O
( _ _ O
filtered _ _ O
by _ _ O
L1 _ _ O
) _ _ O
, _ _ O
so _ _ O
structural _ _ O
hazards _ _ O
are _ _ O
rare _ _ O
34 _ _ O

Cache _ _ O
Design _ _ O
Parameter _ _ O
9 _ _ O
: _ _ O
Private _ _ O
vs. _ _ O
Shared _ _ O
35 _ _ O

Private _ _ O
vs. _ _ O
Shared _ _ O
Cache _ _ O
● _ _ O
On _ _ O
a _ _ O
multi-core _ _ O
system _ _ O
, _ _ O
there _ _ O
are _ _ O
two _ _ O
ways _ _ O
to _ _ O
organize _ _ O
the _ _ O
cache _ _ O
● _ _ O
Private _ _ O
caches _ _ O
: _ _ O
each _ _ O
core _ _ O
( _ _ O
processor _ _ O
) _ _ O
uses _ _ O
its _ _ O
own _ _ O
cache _ _ O
L1 _ _ O
$ _ _ O
L1 _ _ O
$ _ _ O
L1 _ _ O
$ _ _ O
L1 _ _ O
$ _ _ O
● _ _ O
Shared _ _ O
cache _ _ O
: _ _ O
all _ _ O
the _ _ O
cores _ _ O
share _ _ O
one _ _ O
big _ _ O
cache _ _ O
Shared _ _ O
L1 _ _ O
$ _ _ O
36 _ _ O

Shared _ _ O
Cache _ _ O
can _ _ O
Use _ _ O
Space _ _ O
More _ _ O
Flexibly _ _ O
● _ _ O
Suppose _ _ O
only _ _ O
1st _ _ O
core _ _ O
is _ _ O
active _ _ O
and _ _ O
other _ _ O
cores _ _ O
are _ _ O
idle _ _ O
o _ _ O
How _ _ O
much _ _ O
cache _ _ O
space _ _ O
is _ _ O
available _ _ O
to _ _ O
1st _ _ O
core _ _ O
? _ _ O
( _ _ O
Shown _ _ O
in _ _ O
red _ _ O
) _ _ O
● _ _ O
Private _ _ O
caches _ _ O
: _ _ O
1st _ _ O
core _ _ O
can _ _ O
only _ _ O
use _ _ O
its _ _ O
own _ _ O
private _ _ O
cache _ _ O
L1 _ _ O
$ _ _ O
L1 _ _ O
$ _ _ O
L1 _ _ O
$ _ _ O
L1 _ _ O
$ _ _ O
● _ _ O
Shared _ _ O
cache _ _ O
: _ _ O
1st _ _ O
core _ _ O
can _ _ O
use _ _ O
entire _ _ O
shared _ _ O
cache _ _ O
! _ _ O
Shared _ _ O
L1 _ _ O
$ _ _ O
37 _ _ O

Banking _ _ O
: _ _ O
Solution _ _ O
to _ _ O
Structural _ _ O
Hazards _ _ O
● _ _ O
Now _ _ O
what _ _ O
if _ _ O
all _ _ O
the _ _ O
cores _ _ O
are _ _ O
active _ _ O
at _ _ O
the _ _ O
same _ _ O
time _ _ O
? _ _ O
o _ _ O
Wo _ _ O
n’t _ _ O
that _ _ O
cause _ _ O
structural _ _ O
hazards _ _ O
due _ _ O
to _ _ O
simultaneous _ _ O
access _ _ O
? _ _ O
Shared _ _ O
L1 _ _ O
$ _ _ O
o _ _ O
Could _ _ O
add _ _ O
more _ _ O
ports _ _ O
, _ _ O
but _ _ O
adding _ _ O
banks _ _ O
is _ _ O
more _ _ O
cost _ _ O
effective _ _ O
Bank _ _ O
0 _ _ O
Bank _ _ O
1 _ _ O
Bank _ _ O
2 _ _ O
Bank _ _ O
3 _ _ O
Shared _ _ O
L1 _ _ O
$ _ _ O
▪ _ _ O
Each _ _ O
bank _ _ O
has _ _ O
its _ _ O
own _ _ O
read _ _ O
/ _ _ O
write _ _ O
port _ _ O
▪ _ _ O
As _ _ O
long _ _ O
as _ _ O
two _ _ O
cores _ _ O
do _ _ O
not _ _ O
access _ _ O
same _ _ O
bank _ _ O
, _ _ O
no _ _ O
hazard _ _ O
! _ _ O
38 _ _ O

Banking _ _ O
: _ _ O
Solution _ _ O
to _ _ O
Structural _ _ O
Hazards _ _ O
● _ _ O
Cache _ _ O
blocks _ _ O
are _ _ O
interleaved _ _ O
between _ _ O
banks _ _ O
Bank _ _ O
0 _ _ O
Bank _ _ O
1 _ _ O
Bank _ _ O
2 _ _ O
Bank _ _ O
3 _ _ O
Shared _ _ O
L1 _ _ O
$ _ _ O
o _ _ O
Blocks _ _ O
0 _ _ O
, _ _ O
4 _ _ O
, _ _ O
8 _ _ O
… _ _ O
→ _ _ O
Bank _ _ O
0 _ _ O
o _ _ O
Blocks _ _ O
1 _ _ O
, _ _ O
5 _ _ O
, _ _ O
9 _ _ O
… _ _ O
→ _ _ O
Bank _ _ O
1 _ _ O
o _ _ O
Blocks _ _ O
2 _ _ O
, _ _ O
6 _ _ O
, _ _ O
10 _ _ O
… _ _ O
→ _ _ O
Bank _ _ O
2 _ _ O
o _ _ O
Blocks _ _ O
3 _ _ O
, _ _ O
7 _ _ O
, _ _ O
11 _ _ O
… _ _ O
→ _ _ O
Bank _ _ O
3 _ _ O
o _ _ O
That _ _ O
way _ _ O
, _ _ O
blocks _ _ O
are _ _ O
evenly _ _ O
distributed _ _ O
across _ _ O
banks _ _ O
▪ _ _ O
Causes _ _ O
cache _ _ O
accesses _ _ O
to _ _ O
also _ _ O
be _ _ O
distributed _ _ O
→ _ _ O
less _ _ O
hazards _ _ O
39 _ _ O

Shared _ _ O
Cache _ _ O
have _ _ O
Longer _ _ O
Access _ _ O
Times _ _ O
● _ _ O
Again _ _ O
, _ _ O
suppose _ _ O
only _ _ O
1st _ _ O
core _ _ O
is _ _ O
active _ _ O
and _ _ O
other _ _ O
cores _ _ O
are _ _ O
idle _ _ O
o _ _ O
The _ _ O
working _ _ O
set _ _ O
data _ _ O
is _ _ O
shown _ _ O
in _ _ O
red _ _ O
● _ _ O
Private _ _ O
caches _ _ O
: _ _ O
entire _ _ O
working _ _ O
set _ _ O
data _ _ O
in _ _ O
nearby _ _ O
private _ _ O
cache _ _ O
L1 _ _ O
$ _ _ O
L1 _ _ O
$ _ _ O
L1 _ _ O
$ _ _ O
L1 _ _ O
$ _ _ O
● _ _ O
Shared _ _ O
cache _ _ O
: _ _ O
data _ _ O
sometimes _ _ O
distributed _ _ O
to _ _ O
remote _ _ O
banks _ _ O
Bank _ _ O
0 _ _ O
Bank _ _ O
1 _ _ O
Bank _ _ O
2 _ _ O
Bank _ _ O
3 _ _ O
Shared _ _ O
L1 _ _ O
$ _ _ O
40 _ _ O

Shared _ _ O
Cache _ _ O
have _ _ O
Longer _ _ O
Access _ _ O
Times _ _ O
● _ _ O
Remember _ _ O
this _ _ O
picture _ _ O
? _ _ O
2 _ _ O
/ _ _ O
20 _ _ O
/ _ _ O
2017 _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1541 _ _ O
term _ _ O
2174 _ _ O
41 _ _ O

Impact _ _ O
of _ _ O
Shared _ _ O
Cache _ _ O
● _ _ O
AMAT _ _ O
= _ _ O
hit _ _ O
time _ _ O
+ _ _ O
( _ _ O
miss _ _ O
rate _ _ O
× _ _ O
miss _ _ O
penalty _ _ O
) _ _ O
● _ _ O
Impact _ _ O
of _ _ O
shared _ _ O
cache _ _ O
on _ _ O
miss _ _ O
rate _ _ O
: _ _ O
o _ _ O
Smaller _ _ O
miss _ _ O
rate _ _ O
due _ _ O
to _ _ O
more _ _ O
flexible _ _ O
use _ _ O
of _ _ O
space _ _ O
● _ _ O
Impact _ _ O
of _ _ O
shared _ _ O
cache _ _ O
on _ _ O
hit _ _ O
time _ _ O
: _ _ O
o _ _ O
Longer _ _ O
hit _ _ O
time _ _ O
due _ _ O
to _ _ O
sometimes _ _ O
having _ _ O
to _ _ O
access _ _ O
remote _ _ O
banks _ _ O
● _ _ O
L1 _ _ O
caches _ _ O
are _ _ O
almost _ _ O
always _ _ O
private _ _ O
o _ _ O
Hit _ _ O
time _ _ O
is _ _ O
important _ _ O
for _ _ O
L1 _ _ O
. _ _ O
Can _ _ O
not _ _ O
afford _ _ O
access _ _ O
to _ _ O
remote _ _ O
banks _ _ O
. _ _ O
● _ _ O
L3 _ _ O
( _ _ O
last _ _ O
level _ _ O
) _ _ O
caches _ _ O
are _ _ O
almost _ _ O
always _ _ O
shared _ _ O
o _ _ O
Reducing _ _ O
miss _ _ O
rate _ _ O
is _ _ O
top _ _ O
priority _ _ O
to _ _ O
avoid _ _ O
DRAM _ _ O
access _ _ O
. _ _ O
42 _ _ O

Cache _ _ O
Organization _ _ O
of _ _ O
Broadwell _ _ O
CPU _ _ O
● _ _ O
This _ _ O
is _ _ O
the _ _ O
cache _ _ O
organization _ _ O
of _ _ O
Broadwell _ _ O
used _ _ O
in _ _ O
our _ _ O
Linux _ _ O
server _ _ O
L1 _ _ O
$ _ _ O
L1 _ _ O
$ _ _ O
L1 _ _ O
$ _ _ O
L1 _ _ O
$ _ _ O
Private _ _ O
L1 _ _ O
$ _ _ O
L2 _ _ O
$ _ _ O
L2 _ _ O
$ _ _ O
L2 _ _ O
$ _ _ O
L2 _ _ O
$ _ _ O
Private _ _ O
L2 _ _ O
$ _ _ O
Bank _ _ O
0 _ _ O
Bank _ _ O
1 _ _ O
Bank _ _ O
2 _ _ O
Bank _ _ O
3 _ _ O
Shared _ _ O
L3 _ _ O
$ _ _ O
● _ _ O
Intel _ _ O
rebrands _ _ O
the _ _ O
shared _ _ O
cache _ _ O
as _ _ O
the _ _ O
“ _ _ O
Smart _ _ O
Cache _ _ O
” _ _ O
43 _ _ O

Cache _ _ O
Design _ _ O
Parameter _ _ O
10 _ _ O
: _ _ O
Prefetching _ _ O
44 _ _ O

Prefetching _ _ O
● _ _ O
Prefetching _ _ O
: _ _ O
fetching _ _ O
data _ _ O
that _ _ O
is _ _ O
expected _ _ O
to _ _ O
be _ _ O
needed _ _ O
soon _ _ O
o _ _ O
Allows _ _ O
you _ _ O
to _ _ O
hide _ _ O
the _ _ O
latency _ _ O
of _ _ O
fetching _ _ O
that _ _ O
data _ _ O
o _ _ O
E.g. _ _ O
Web _ _ O
browsers _ _ O
prefetch _ _ O
resources _ _ O
from _ _ O
not-yet-clicked _ _ O
links _ _ O
→ _ _ O
when _ _ O
user _ _ O
later _ _ O
clicks _ _ O
on _ _ O
link _ _ O
, _ _ O
response _ _ O
is _ _ O
almost _ _ O
instantaneous _ _ O
o _ _ O
Caches _ _ O
also _ _ O
prefetch _ _ O
data _ _ O
that _ _ O
is _ _ O
expected _ _ O
to _ _ O
be _ _ O
used _ _ O
soon _ _ O
▪ _ _ O
Can _ _ O
be _ _ O
used _ _ O
to _ _ O
avoid _ _ O
even _ _ O
cold _ _ O
misses _ _ O
● _ _ O
Two _ _ O
ways _ _ O
prefetching _ _ O
can _ _ O
happen _ _ O
: _ _ O
o _ _ O
Compiler-driven _ _ O
: _ _ O
compiler _ _ O
emits _ _ O
prefetch _ _ O
instructions _ _ O
▪ _ _ O
Can _ _ O
manually _ _ O
insert _ _ O
one _ _ O
in _ _ O
C _ _ O
program _ _ O
: _ _ O
_ _ _ O
_ _ _ O
builtin_prefetch _ _ O
( _ _ O
addr _ _ O
) _ _ O
▪ _ _ O
Or _ _ O
rely _ _ O
on _ _ O
compiler _ _ O
to _ _ O
insert _ _ O
them _ _ O
using _ _ O
heuristics _ _ O
o _ _ O
Hardware-driven _ _ O
: _ _ O
CPU _ _ O
prefetcher _ _ O
emits _ _ O
prefetches _ _ O
dynamically _ _ O
▪ _ _ O
Relies _ _ O
on _ _ O
prefetcher _ _ O
to _ _ O
detect _ _ O
a _ _ O
pattern _ _ O
in _ _ O
memory _ _ O
accesses _ _ O
45 _ _ O

Hardware _ _ O
Prefetching _ _ O
● _ _ O
What _ _ O
do _ _ O
you _ _ O
notice _ _ O
about _ _ O
both _ _ O
these _ _ O
snippets _ _ O
of _ _ O
code _ _ O
? _ _ O
● _ _ O
They _ _ O
both _ _ O
access _ _ O
memory _ _ O
sequentially _ _ O
. _ _ O
for _ _ O
( _ _ O
i _ _ O
= _ _ O
0 _ _ O
.. _ _ O
100000 _ _ O
) _ _ O
o _ _ O
The _ _ O
first _ _ O
one _ _ O
data _ _ O
, _ _ O
the _ _ O
next _ _ O
instructions _ _ O
. _ _ O
A _ _ O
[ _ _ O
i _ _ O
] _ _ O
++ _ _ O
; _ _ O
00 _ _ O
lw _ _ O
● _ _ O
These _ _ O
kinds _ _ O
of _ _ O
access _ _ O
patterns _ _ O
are _ _ O
very _ _ O
common _ _ O
. _ _ O
00 _ _ O
04 _ _ O
08 _ _ O
0C _ _ O
10 _ _ O
14 _ _ O
18 _ _ O
1C _ _ O
Sequential _ _ O
00 _ _ O
04 _ _ O
08 _ _ O
0C _ _ O
10 _ _ O
14 _ _ O
18 _ _ O
1C _ _ O
Reverse _ _ O
sequential _ _ O
00 _ _ O
04 _ _ O
08 _ _ O
0C _ _ O
10 _ _ O
14 _ _ O
18 _ _ O
1C _ _ O
Strided _ _ O
sequential _ _ O
( _ _ O
think _ _ O
" _ _ O
accessing _ _ O
one _ _ O
field _ _ O
from _ _ O
each _ _ O
item _ _ O
in _ _ O
an _ _ O
array _ _ O
of _ _ O
structs _ _ O
" _ _ O
) _ _ O
04 _ _ O
lw _ _ O
08 _ _ O
lw _ _ O
0C _ _ O
addi _ _ O
10 _ _ O
sub _ _ O
14 _ _ O
mul _ _ O
18 _ _ O
sw _ _ O
1C _ _ O
sw _ _ O
20 _ _ O
sw _ _ O
46 _ _ O

Hardware _ _ O
Prefetching _ _ O
Stride _ _ O
Detection _ _ O
● _ _ O
What _ _ O
kinds _ _ O
of _ _ O
things _ _ O
would _ _ O
you _ _ O
need _ _ O
? _ _ O
● _ _ O
A _ _ O
table _ _ O
of _ _ O
the _ _ O
last _ _ O
n _ _ O
memory _ _ O
accesses _ _ O
would _ _ O
be _ _ O
a _ _ O
good _ _ O
start _ _ O
. _ _ O
n-7 _ _ O
n-6 _ _ O
n-5 _ _ O
n-4 _ _ O
n-3 _ _ O
n-2 _ _ O
n-1 _ _ O
n _ _ O
40C0 _ _ O
40C4 _ _ O
40C8 _ _ O
40CC _ _ O
40D0 _ _ O
40D4 _ _ O
40D8 _ _ O
40DC _ _ O
● _ _ O
Some _ _ O
subtractors _ _ O
to _ _ O
calculate _ _ O
the _ _ O
stride _ _ O
● _ _ O
Some _ _ O
comparators _ _ O
to _ _ O
see _ _ O
if _ _ O
strides _ _ O
are _ _ O
the _ _ O
same _ _ O
● _ _ O
Some _ _ O
detection _ _ O
logic _ _ O
- _ _ O
- _ _ O
= _ _ O
- _ _ O
= _ _ O
- _ _ O
= _ _ O
- _ _ O
= _ _ O
- _ _ O
= _ _ O
- _ _ O
= _ _ O
Stride _ _ O
Detector _ _ O
47 _ _ O

Where _ _ O
Hardware _ _ O
Prefetching _ _ O
Does _ _ O
n’t _ _ O
Work _ _ O
● _ _ O
Sequential _ _ O
accesses _ _ O
are _ _ O
where _ _ O
prefetcher _ _ O
works _ _ O
best _ _ O
o _ _ O
E.g. _ _ O
Iterating _ _ O
over _ _ O
elements _ _ O
of _ _ O
an _ _ O
array _ _ O
● _ _ O
Some _ _ O
accesses _ _ O
do _ _ O
n’t _ _ O
have _ _ O
a _ _ O
pattern _ _ O
or _ _ O
is _ _ O
too _ _ O
complex _ _ O
to _ _ O
detect _ _ O
o _ _ O
At _ _ O
below _ _ O
is _ _ O
how _ _ O
a _ _ O
typical _ _ O
linked-list _ _ O
traversal _ _ O
looks _ _ O
like _ _ O
00 _ _ O
04 _ _ O
08 _ _ O
0C _ _ O
10 _ _ O
14 _ _ O
18 _ _ O
1C _ _ O
20 _ _ O
24 _ _ O
28 _ _ O
2C _ _ O
30 _ _ O
34 _ _ O
38 _ _ O
3C _ _ O
( _ _ O
colors _ _ O
are _ _ O
different _ _ O
cache _ _ O
blocks _ _ O
) _ _ O
o _ _ O
Other _ _ O
pointer-chasing _ _ O
data _ _ O
structures _ _ O
( _ _ O
graphs _ _ O
, _ _ O
trees _ _ O
) _ _ O
look _ _ O
similar _ _ O
o _ _ O
Can _ _ O
only _ _ O
rely _ _ O
on _ _ O
naturally _ _ O
occurring _ _ O
locality _ _ O
to _ _ O
avoid _ _ O
misses _ _ O
o _ _ O
Or _ _ O
, _ _ O
have _ _ O
compiler _ _ O
insert _ _ O
prefetch _ _ O
instructions _ _ O
in _ _ O
middle _ _ O
of _ _ O
traversal _ _ O
48 _ _ O

Mystery _ _ O
Solved _ _ O
● _ _ O
How _ _ O
come _ _ O
Array _ _ O
performed _ _ O
well _ _ O
for _ _ O
even _ _ O
an _ _ O
array _ _ O
1.28 _ _ O
GB _ _ O
large _ _ O
? _ _ O
o _ _ O
No _ _ O
spatial _ _ O
locality _ _ O
since _ _ O
each _ _ O
node _ _ O
takes _ _ O
up _ _ O
two _ _ O
64-byte _ _ O
cache _ _ O
blocks _ _ O
o _ _ O
No _ _ O
temporal _ _ O
locality _ _ O
since _ _ O
working _ _ O
set _ _ O
of _ _ O
1.28 _ _ O
GB _ _ O
exceeds _ _ O
any _ _ O
cache _ _ O
● _ _ O
The _ _ O
answer _ _ O
is _ _ O
: _ _ O
Array _ _ O
had _ _ O
the _ _ O
benefit _ _ O
of _ _ O
a _ _ O
strided _ _ O
prefetcher _ _ O
! _ _ O
o _ _ O
Access _ _ O
pattern _ _ O
of _ _ O
Linked _ _ O
List _ _ O
was _ _ O
too _ _ O
complex _ _ O
for _ _ O
prefetcher _ _ O
to _ _ O
detect _ _ O
49 _ _ O

Impact _ _ O
of _ _ O
Prefetching _ _ O
● _ _ O
Prefetcher _ _ O
runs _ _ O
in _ _ O
parallel _ _ O
with _ _ O
the _ _ O
rest _ _ O
of _ _ O
the _ _ O
cache _ _ O
hardware _ _ O
o _ _ O
Does _ _ O
not _ _ O
slow _ _ O
down _ _ O
any _ _ O
on-demand _ _ O
reads _ _ O
or _ _ O
writes _ _ O
● _ _ O
What _ _ O
if _ _ O
prefetcher _ _ O
is _ _ O
wrong _ _ O
? _ _ O
It _ _ O
can _ _ O
be _ _ O
wrong _ _ O
in _ _ O
two _ _ O
ways _ _ O
: _ _ O
o _ _ O
It _ _ O
fetched _ _ O
a _ _ O
block _ _ O
that _ _ O
was _ _ O
never _ _ O
going _ _ O
to _ _ O
be _ _ O
used _ _ O
o _ _ O
It _ _ O
fetched _ _ O
a _ _ O
useful _ _ O
block _ _ O
but _ _ O
fetched _ _ O
it _ _ O
too _ _ O
soon _ _ O
or _ _ O
too _ _ O
late _ _ O
▪ _ _ O
Too _ _ O
soon _ _ O
: _ _ O
the _ _ O
block _ _ O
gets _ _ O
evicted _ _ O
before _ _ O
it _ _ O
can _ _ O
be _ _ O
used _ _ O
▪ _ _ O
Too _ _ O
late _ _ O
: _ _ O
the _ _ O
prefetch _ _ O
does _ _ O
n’t _ _ O
happen _ _ O
in _ _ O
time _ _ O
for _ _ O
the _ _ O
access _ _ O
● _ _ O
A _ _ O
bad _ _ O
prefetch _ _ O
results _ _ O
in _ _ O
cache _ _ O
pollution _ _ O
o _ _ O
Unused _ _ O
data _ _ O
is _ _ O
fetched _ _ O
, _ _ O
potentially _ _ O
pushing _ _ O
out _ _ O
other _ _ O
useful _ _ O
data _ _ O
● _ _ O
On _ _ O
the _ _ O
other _ _ O
hand _ _ O
, _ _ O
good _ _ O
prefetches _ _ O
can _ _ O
reduce _ _ O
misses _ _ O
drastically _ _ O
! _ _ O
50 _ _ O



