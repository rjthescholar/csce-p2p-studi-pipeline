unlabeled|cs1541|lec3.4_virtual_memory
-DOCSTART- -X- -X- O

Virtual _ _ O
Memory _ _ O
and _ _ O
Caching _ _ O
CS _ _ O
1541 _ _ O
Wonsun _ _ O
Ahn _ _ O

Virtual _ _ O
Memory _ _ O
and _ _ O
Caching _ _ O
● _ _ O
So _ _ O
what _ _ O
does _ _ O
virtual _ _ O
memory _ _ O
have _ _ O
to _ _ O
do _ _ O
with _ _ O
caching _ _ O
? _ _ O
● _ _ O
A _ _ O
lot _ _ O
actually _ _ O
. _ _ O
● _ _ O
But _ _ O
first _ _ O
let _ _ O
’s _ _ O
do _ _ O
a _ _ O
quick _ _ O
review _ _ O
of _ _ O
virtual _ _ O
memory _ _ O
o _ _ O
To _ _ O
warm _ _ O
up _ _ O
your _ _ O
cache _ _ O
with _ _ O
CS _ _ O
449 _ _ O
info _ _ O
2 _ _ O

Virtual _ _ O
Memory _ _ O
Review _ _ O
3 _ _ O

Virtual _ _ O
Memory _ _ O
: _ _ O
Type _ _ O
of _ _ O
Virtualization _ _ O
● _ _ O
Virtualization _ _ O
: _ _ O
hiding _ _ O
the _ _ O
complexities _ _ O
of _ _ O
hardware _ _ O
to _ _ O
software _ _ O
● _ _ O
Virtual _ _ O
Memory _ _ O
: _ _ O
hides _ _ O
the _ _ O
fact _ _ O
that _ _ O
physical _ _ O
memory _ _ O
( _ _ O
DRAM _ _ O
) _ _ O
is _ _ O
limited _ _ O
and _ _ O
shared _ _ O
by _ _ O
multiple _ _ O
processes _ _ O
Physical _ _ O
Memory _ _ O
Process _ _ O
1 _ _ O
0xFFFF _ _ O
0xFFFF _ _ O
Memory _ _ O
0x8000 _ _ O
Code _ _ O
... _ _ O
Process _ _ O
2 _ _ O
0xFFFF _ _ O
Process _ _ O
1 _ _ O
’s _ _ O
and _ _ O
Process _ _ O
2 _ _ O
’s _ _ O
memory _ _ O
? _ _ O
Memory _ _ O
0x8000 _ _ O
Code _ _ O
Clearly _ _ O
this _ _ O
is _ _ O
impossible _ _ O
. _ _ O
But _ _ O
programs _ _ O
see _ _ O
this _ _ O
view _ _ O
of _ _ O
memory _ _ O
. _ _ O
0x8000 _ _ O
... _ _ O
4 _ _ O

Virtual _ _ O
Memory _ _ O
: _ _ O
Behind _ _ O
the _ _ O
Scenes _ _ O
● _ _ O
Pages _ _ O
of _ _ O
memory _ _ O
are _ _ O
mapped _ _ O
to _ _ O
either _ _ O
physical _ _ O
memory _ _ O
or _ _ O
disk _ _ O
o _ _ O
Look _ _ O
familiar _ _ O
? _ _ O
Physical _ _ O
memory _ _ O
acts _ _ O
as _ _ O
a _ _ O
cache _ _ O
for _ _ O
disk _ _ O
storage _ _ O
Valid _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
Page _ _ O
table _ _ O
Physical _ _ O
memory _ _ O
Virtual _ _ O
memory _ _ O
Disk _ _ O
storage _ _ O
( _ _ O
swap _ _ O
space _ _ O
) _ _ O
5 _ _ O

How _ _ O
virtual _ _ O
to _ _ O
physical _ _ O
address _ _ O
translation _ _ O
happens _ _ O
1 _ _ O
. _ _ O
CPU _ _ O
extracts _ _ O
virtual _ _ O
page _ _ O
number _ _ O
from _ _ O
virtual _ _ O
address _ _ O
2 _ _ O
. _ _ O
CPU _ _ O
locates _ _ O
page _ _ O
table _ _ O
pointed _ _ O
to _ _ O
by _ _ O
page _ _ O
table _ _ O
register _ _ O
3 _ _ O
. _ _ O
Page _ _ O
table _ _ O
is _ _ O
indexed _ _ O
using _ _ O
virtual _ _ O
page _ _ O
number _ _ O
Page _ _ O
table _ _ O
register _ _ O
Virtual _ _ O
address _ _ O
31 _ _ O
30 _ _ O
29 _ _ O
28 _ _ O
27 _ _ O
15 _ _ O
14 _ _ O
13 _ _ O
12 _ _ O
11 _ _ O
10 _ _ O
9 _ _ O
8 _ _ O
Virtual _ _ O
page _ _ O
number _ _ O
Virtual _ _ O
address _ _ O
31 _ _ O
30 _ _ O
29 _ _ O
28 _ _ O
27 _ _ O
15 _ _ O
14 _ _ O
13 _ _ O
12 _ _ O
11 _ _ O
10 _ _ O
9 _ _ O
8 _ _ O
Virtual _ _ O
page _ _ O
number _ _ O
page _ _ O
offset _ _ O
20 _ _ O
3210 _ _ O
Valid _ _ O
page _ _ O
offset _ _ O
3 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
12 _ _ O
Physical _ _ O
page _ _ O
number _ _ O
Page _ _ O
table _ _ O
29 _ _ O
28 _ _ O
27 _ _ O
15 _ _ O
14 _ _ O
13 _ _ O
12 _ _ O
11 _ _ O
10 _ _ O
9 _ _ O
8 _ _ O
Physical _ _ O
page _ _ O
number _ _ O
Physical _ _ O
address _ _ O
3210 _ _ O
page _ _ O
table _ _ O
page _ _ O
offset _ _ O
If _ _ O
0 _ _ O
then _ _ O
page _ _ O
is _ _ O
not _ _ O
in _ _ O
memory _ _ O
29 _ _ O
28 _ _ O
27 _ _ O
18 _ _ O
15 _ _ O
14 _ _ O
13 _ _ O
12 _ _ O
11 _ _ O
10 _ _ O
9 _ _ O
8 _ _ O
Physical _ _ O
page _ _ O
number _ _ O
3 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
page _ _ O
offset _ _ O
Physical _ _ O
address _ _ O
6 _ _ O

DRAM _ _ O
as _ _ O
Cache _ _ O
7 _ _ O

Physical _ _ O
Memory _ _ O
as _ _ O
a _ _ O
Cache _ _ O
● _ _ O
Relationship _ _ O
between _ _ O
DRAM _ _ O
« _ _ O
Disk _ _ O
is _ _ O
same _ _ O
as _ _ O
Cache _ _ O
« _ _ O
DRAM _ _ O
o _ _ O
DRAM _ _ O
is _ _ O
fast _ _ O
but _ _ O
small _ _ O
and _ _ O
expensive _ _ O
o _ _ O
Disk _ _ O
is _ _ O
slow _ _ O
but _ _ O
big _ _ O
and _ _ O
cheap _ _ O
● _ _ O
If _ _ O
you _ _ O
view _ _ O
DRAM _ _ O
as _ _ O
cache _ _ O
, _ _ O
some _ _ O
design _ _ O
decisions _ _ O
become _ _ O
obvious _ _ O
o _ _ O
Size _ _ O
of _ _ O
block _ _ O
: _ _ O
4 _ _ O
KB _ _ O
pages _ _ O
. _ _ O
Why _ _ O
? _ _ O
§ _ _ O
For _ _ O
spatial _ _ O
locality _ _ O
. _ _ O
Capacity _ _ O
is _ _ O
less _ _ O
of _ _ O
a _ _ O
problem _ _ O
for _ _ O
DRAM _ _ O
. _ _ O
o _ _ O
Associativity _ _ O
: _ _ O
Fully-associative _ _ O
( _ _ O
can _ _ O
map _ _ O
page _ _ O
anywhere _ _ O
) _ _ O
. _ _ O
Why _ _ O
? _ _ O
§ _ _ O
A _ _ O
miss _ _ O
( _ _ O
page _ _ O
fault _ _ O
) _ _ O
is _ _ O
expensive _ _ O
. _ _ O
You _ _ O
need _ _ O
to _ _ O
read _ _ O
from _ _ O
disk _ _ O
! _ _ O
§ _ _ O
But _ _ O
now _ _ O
page _ _ O
hits _ _ O
become _ _ O
expensive _ _ O
due _ _ O
to _ _ O
lookup _ _ O
cost _ _ O
o _ _ O
Block _ _ O
replacement _ _ O
scheme _ _ O
: _ _ O
LRU _ _ O
, _ _ O
or _ _ O
some _ _ O
approximation _ _ O
. _ _ O
Why _ _ O
? _ _ O
§ _ _ O
Did _ _ O
I _ _ O
say _ _ O
a _ _ O
page _ _ O
fault _ _ O
is _ _ O
expensive _ _ O
? _ _ O
o _ _ O
Write _ _ O
policy _ _ O
: _ _ O
Write-back _ _ O
( _ _ O
a.k.a _ _ O
. _ _ O
page _ _ O
swapping _ _ O
) _ _ O
. _ _ O
Why _ _ O
? _ _ O
§ _ _ O
Bandwidth _ _ O
for _ _ O
write-through _ _ O
to _ _ O
disk _ _ O
is _ _ O
too _ _ O
much _ _ O
for _ _ O
I _ _ O
/ _ _ O
O _ _ O
bus _ _ O
8 _ _ O

Physical _ _ O
Memory _ _ O
as _ _ O
a _ _ O
Cache _ _ O
● _ _ O
If _ _ O
you _ _ O
treated _ _ O
each _ _ O
page _ _ O
as _ _ O
a _ _ O
cache _ _ O
block _ _ O
, _ _ O
what _ _ O
would _ _ O
be _ _ O
the _ _ O
tag _ _ O
? _ _ O
Page _ _ O
offset _ _ O
( _ _ O
12 _ _ O
bits _ _ O
) _ _ O
o _ _ O
32-bit _ _ O
address _ _ O
: _ _ O
Tag _ _ O
( _ _ O
20 _ _ O
bits _ _ O
) _ _ O
: _ _ O
page _ _ O
number _ _ O
o _ _ O
Fully-associative _ _ O
, _ _ O
so _ _ O
row _ _ O
bits _ _ O
and _ _ O
4 _ _ O
KB _ _ O
pages _ _ O
, _ _ O
so _ _ O
12 _ _ O
bits _ _ O
for _ _ O
offset _ _ O
● _ _ O
How _ _ O
would _ _ O
the _ _ O
page _ _ O
table _ _ O
for _ _ O
searching _ _ O
physical _ _ O
memory _ _ O
look _ _ O
? _ _ O
CPU _ _ O
( _ _ O
PID _ _ O
1 _ _ O
) _ _ O
CPU _ _ O
( _ _ O
PID _ _ O
2 _ _ O
) _ _ O
. _ _ O
. _ _ O
. _ _ O
Access _ _ O
PID _ _ O
20-bit _ _ O
tag _ _ O
( _ _ O
page _ _ O
number _ _ O
) _ _ O
1 _ _ O
10110…111 _ _ O
2 _ _ O
10010…001 _ _ O
1 _ _ O
01010…100 _ _ O
… _ _ O
… _ _ O
[ _ _ O
Page _ _ O
Table _ _ O
] _ _ O
Physical _ _ O
Memory _ _ O
[ _ _ O
Pages _ _ O
] _ _ O
Miss _ _ O
Disk _ _ O
storage _ _ O
( _ _ O
swap _ _ O
space _ _ O
) _ _ O
[ _ _ O
Disk _ _ O
] _ _ O
9 _ _ O

Inverted _ _ O
Page _ _ O
Table _ _ O
: _ _ O
tags _ _ O
for _ _ O
physical _ _ O
pages _ _ O
● _ _ O
This _ _ O
type _ _ O
of _ _ O
page _ _ O
table _ _ O
is _ _ O
called _ _ O
an _ _ O
inverted _ _ O
page _ _ O
table _ _ O
. _ _ O
Associative _ _ O
search _ _ O
Virtual _ _ O
Page _ _ O
Number _ _ O
PID _ _ O
20-bit _ _ O
tag _ _ O
( _ _ O
page _ _ O
number _ _ O
) _ _ O
1 _ _ O
Virtual _ _ O
Page _ _ O
42 _ _ O
2 _ _ O
Virtual _ _ O
Page _ _ O
100 _ _ O
1 _ _ O
Virtual _ _ O
Page _ _ O
123 _ _ O
… _ _ O
… _ _ O
[ _ _ O
Page _ _ O
Table _ _ O
] _ _ O
Physical _ _ O
Memory _ _ O
[ _ _ O
Pages _ _ O
] _ _ O
Miss _ _ O
Disk _ _ O
storage _ _ O
( _ _ O
swap _ _ O
space _ _ O
) _ _ O
[ _ _ O
Disk _ _ O
] _ _ O
● _ _ O
Called _ _ O
inverted _ _ O
because _ _ O
table _ _ O
contains _ _ O
virtual _ _ O
page _ _ O
numbers _ _ O
( _ _ O
Unlike _ _ O
regular _ _ O
page _ _ O
tables _ _ O
which _ _ O
contains _ _ O
physical _ _ O
page _ _ O
numbers _ _ O
) _ _ O
● _ _ O
Pro _ _ O
: _ _ O
Page _ _ O
table _ _ O
only _ _ O
as _ _ O
big _ _ O
as _ _ O
physical _ _ O
mem _ _ O
( _ _ O
low _ _ O
space _ _ O
complexity _ _ O
) _ _ O
● _ _ O
Con _ _ O
: _ _ O
Associative _ _ O
search _ _ O
of _ _ O
page _ _ O
table _ _ O
( _ _ O
high _ _ O
time _ _ O
complexity _ _ O
) _ _ O
→ _ _ O
Often _ _ O
hashing _ _ O
used _ _ O
to _ _ O
direct _ _ O
map _ _ O
pages _ _ O
. _ _ O
Causes _ _ O
conflict _ _ O
misses _ _ O
. _ _ O
10 _ _ O

How _ _ O
Often _ _ O
do _ _ O
Lookups _ _ O
Happen _ _ O
? _ _ O
● _ _ O
Programs _ _ O
use _ _ O
virtual _ _ O
addresses _ _ O
to _ _ O
refer _ _ O
to _ _ O
code _ _ O
and _ _ O
data _ _ O
o _ _ O
E.g. _ _ O
If _ _ O
program _ _ O
has _ _ O
jump _ _ O
to _ _ O
method _ _ O
address _ _ O
, _ _ O
it _ _ O
’s _ _ O
a _ _ O
virtual _ _ O
address _ _ O
● _ _ O
DRAM _ _ O
and _ _ O
Caches _ _ O
use _ _ O
physical _ _ O
addresses _ _ O
● _ _ O
At _ _ O
every _ _ O
lw _ _ O
or _ _ O
sw _ _ O
MEM _ _ O
stage _ _ O
a _ _ O
lookup _ _ O
needs _ _ O
to _ _ O
happen _ _ O
● _ _ O
At _ _ O
FETCH _ _ O
stage _ _ O
of _ _ O
every _ _ O
instruction _ _ O
a _ _ O
lookup _ _ O
needs _ _ O
to _ _ O
happen _ _ O
! _ _ O
Process _ _ O
Virtual _ _ O
Memory _ _ O
Code _ _ O
Virtual _ _ O
Addresses _ _ O
? _ _ O
CPU _ _ O
? _ _ O
Cache _ _ O
? _ _ O
Physical _ _ O
Addresses _ _ O
Physical _ _ O
Memory _ _ O
11 _ _ O

Address _ _ O
Lookup _ _ O
Using _ _ O
( _ _ O
Regular _ _ O
) _ _ O
Page _ _ O
Table _ _ O
● _ _ O
Lookup _ _ O
is _ _ O
done _ _ O
by _ _ O
indexing _ _ O
page _ _ O
table _ _ O
using _ _ O
virtual _ _ O
page _ _ O
number _ _ O
. _ _ O
● _ _ O
Every _ _ O
memory _ _ O
access _ _ O
requires _ _ O
one _ _ O
extra _ _ O
access _ _ O
to _ _ O
read _ _ O
page _ _ O
table _ _ O
. _ _ O
Now _ _ O
table _ _ O
must _ _ O
cover _ _ O
entire _ _ O
virtual _ _ O
memory _ _ O
! _ _ O
Virtual _ _ O
Address _ _ O
CPU _ _ O
Valid _ _ O
Physical _ _ O
Page _ _ O
Number _ _ O
( _ _ O
20 _ _ O
bits _ _ O
) _ _ O
1 _ _ O
Physical _ _ O
Page _ _ O
42 _ _ O
0 _ _ O
Physical _ _ O
Page _ _ O
10 _ _ O
0 _ _ O
Physical _ _ O
Page _ _ O
7 _ _ O
1 _ _ O
Physical _ _ O
Page _ _ O
1337 _ _ O
… _ _ O
… _ _ O
Physical _ _ O
Address _ _ O
DRAM _ _ O
12 _ _ O

How _ _ O
big _ _ O
is _ _ O
the _ _ O
Page _ _ O
Table _ _ O
? _ _ O
● _ _ O
32-bit _ _ O
addresses _ _ O
with _ _ O
4KiB _ _ O
( _ _ O
212 _ _ O
B _ _ O
) _ _ O
pages _ _ O
means _ _ O
220 _ _ O
( _ _ O
1 _ _ O
M _ _ O
) _ _ O
PTEs _ _ O
. _ _ O
● _ _ O
64-bit _ _ O
addresses _ _ O
with _ _ O
4KiB _ _ O
pages _ _ O
means _ _ O
252 _ _ O
( _ _ O
4 _ _ O
quadrillion _ _ O
) _ _ O
PTEs _ _ O
. _ _ O
● _ _ O
We _ _ O
can _ _ O
use _ _ O
hierarchical _ _ O
page _ _ O
tables _ _ O
as _ _ O
a _ _ O
sparse _ _ O
data _ _ O
structure _ _ O
. _ _ O
Address _ _ O
PTR _ _ O
10 _ _ O
bits _ _ O
( _ _ O
“ _ _ O
directory _ _ O
” _ _ O
) _ _ O
10 _ _ O
bits _ _ O
( _ _ O
“ _ _ O
table _ _ O
” _ _ O
) _ _ O
12 _ _ O
bits _ _ O
( _ _ O
“ _ _ O
offset _ _ O
” _ _ O
) _ _ O
00 _ _ O
0010 _ _ O
11 _ _ O
10 _ _ O
0011 _ _ O
00 _ _ O
0010 _ _ O
0001 _ _ O
0000 _ _ O
index _ _ O
... _ _ O
index _ _ O
... _ _ O
V _ _ O
Table _ _ O
Addr _ _ O
V _ _ O
D _ _ O
R _ _ O
Page _ _ O
Addr _ _ O
P _ _ O
… _ _ O
... _ _ O
… _ _ O
… _ _ O
… _ _ O
... _ _ O
... _ _ O
1 _ _ O
0004C000 _ _ O
10 _ _ O
1 _ _ O
03BFA000 _ _ O
RX _ _ O
… _ _ O
... _ _ O
… _ _ O
… _ _ O
… _ _ O
... _ _ O
... _ _ O
PA _ _ O
! _ _ O
13 _ _ O

Page _ _ O
Table _ _ O
Lookup _ _ O
Cost _ _ O
● _ _ O
Let _ _ O
’s _ _ O
say _ _ O
we _ _ O
have _ _ O
a _ _ O
lw _ _ O
$ _ _ O
t0 _ _ O
, _ _ O
16 _ _ O
( _ _ O
$s0 _ _ O
) _ _ O
PTR _ _ O
CPU _ _ O
V _ _ O
Table _ _ O
Addr _ _ O
V _ _ O
D _ _ O
R _ _ O
Page _ _ O
Addr _ _ O
P _ _ O
… _ _ O
... _ _ O
… _ _ O
… _ _ O
… _ _ O
... _ _ O
... _ _ O
1 _ _ O
0004C000 _ _ O
10 _ _ O
1 _ _ O
03BFA000 _ _ O
RX _ _ O
… _ _ O
... _ _ O
… _ _ O
… _ _ O
… _ _ O
... _ _ O
... _ _ O
hit _ _ O
! _ _ O
PA _ _ O
! _ _ O
Cache _ _ O
● _ _ O
Must _ _ O
perform _ _ O
two _ _ O
memory _ _ O
accesses _ _ O
to _ _ O
hierarchical _ _ O
page _ _ O
table _ _ O
o _ _ O
May _ _ O
miss _ _ O
in _ _ O
cache _ _ O
and _ _ O
even _ _ O
cause _ _ O
page _ _ O
faults _ _ O
themselves _ _ O
! _ _ O
14 _ _ O

The _ _ O
real _ _ O
picture _ _ O
looks _ _ O
more _ _ O
like _ _ O
this _ _ O
● _ _ O
Alpha _ _ O
21264 _ _ O
CPU _ _ O
with _ _ O
3-level _ _ O
page _ _ O
table _ _ O
: _ _ O
In _ _ O
the _ _ O
end _ _ O
, _ _ O
the _ _ O
PTE _ _ O
( _ _ O
Page _ _ O
Table _ _ O
Entry _ _ O
) _ _ O
is _ _ O
all _ _ O
you _ _ O
need _ _ O
for _ _ O
a _ _ O
translation _ _ O
. _ _ O
Ptr _ _ O
to _ _ O
level _ _ O
2 _ _ O
Ptr _ _ O
to _ _ O
level _ _ O
3 _ _ O
How _ _ O
can _ _ O
I _ _ O
make _ _ O
access _ _ O
to _ _ O
it _ _ O
faster _ _ O
? _ _ O
Where _ _ O
have _ _ O
I _ _ O
heard _ _ O
that _ _ O
before _ _ O
... _ _ O
making _ _ O
accesses _ _ O
faster _ _ O
… _ _ O
I _ _ O
wonder _ _ O
… _ _ O
15 _ _ O

The _ _ O
TLB _ _ O
: _ _ O
A _ _ O
Cache _ _ O
for _ _ O
Page _ _ O
Tables _ _ O

TLB _ _ O
( _ _ O
Translation _ _ O
Lookaside _ _ O
Buffer _ _ O
● _ _ O
TLB _ _ O
: _ _ O
A _ _ O
cache _ _ O
that _ _ O
contains _ _ O
frequently _ _ O
accessed _ _ O
page _ _ O
table _ _ O
entries _ _ O
● _ _ O
TLB _ _ O
just _ _ O
like _ _ O
other _ _ O
caches _ _ O
resides _ _ O
within _ _ O
the _ _ O
CPU _ _ O
● _ _ O
On _ _ O
a _ _ O
TLB _ _ O
hit _ _ O
: _ _ O
o _ _ O
No _ _ O
need _ _ O
to _ _ O
access _ _ O
page _ _ O
table _ _ O
in _ _ O
memory _ _ O
● _ _ O
On _ _ O
a _ _ O
TBL _ _ O
miss _ _ O
: _ _ O
o _ _ O
Load _ _ O
PTE _ _ O
from _ _ O
page _ _ O
table _ _ O
o _ _ O
That _ _ O
means _ _ O
“ _ _ O
walking _ _ O
” _ _ O
the _ _ O
hierarchical _ _ O
page _ _ O
table _ _ O
17 _ _ O

Page _ _ O
Table _ _ O
Walking _ _ O
● _ _ O
On _ _ O
a _ _ O
TLB _ _ O
miss _ _ O
, _ _ O
the _ _ O
CPU _ _ O
must _ _ O
“ _ _ O
walk _ _ O
” _ _ O
the _ _ O
page _ _ O
table _ _ O
: _ _ O
● _ _ O
Two _ _ O
options _ _ O
: _ _ O
1 _ _ O
. _ _ O
Software _ _ O
option _ _ O
o _ _ O
Miss _ _ O
raises _ _ O
OS _ _ O
exception _ _ O
o _ _ O
OS _ _ O
exception _ _ O
handler _ _ O
fills _ _ O
the _ _ O
TLB _ _ O
with _ _ O
PTE _ _ O
Ptr _ _ O
to _ _ O
level _ _ O
2 _ _ O
Ptr _ _ O
to _ _ O
level _ _ O
3 _ _ O
2 _ _ O
. _ _ O
Hardware _ _ O
option _ _ O
o _ _ O
CPU _ _ O
has _ _ O
special _ _ O
circuitry _ _ O
to _ _ O
walk _ _ O
page _ _ O
table _ _ O
( _ _ O
the _ _ O
page _ _ O
table _ _ O
walker _ _ O
) _ _ O
→ _ _ O
Faster _ _ O
than _ _ O
SW _ _ O
option _ _ O
18 _ _ O

Memory _ _ O
Access _ _ O
Flowchart _ _ O
Virtual _ _ O
page _ _ O
number _ _ O
Page _ _ O
offset _ _ O
TLB _ _ O
• _ _ O
Page _ _ O
table _ _ O
walk _ _ O
to _ _ O
get _ _ O
the _ _ O
PT _ _ O
entry _ _ O
into _ _ O
the _ _ O
TLB _ _ O
( _ _ O
SW _ _ O
or _ _ O
HW _ _ O
) _ _ O
• _ _ O
If _ _ O
PT _ _ O
walk _ _ O
indicates _ _ O
page _ _ O
is _ _ O
not _ _ O
in _ _ O
memory _ _ O
, _ _ O
then _ _ O
service _ _ O
page _ _ O
fault _ _ O
( _ _ O
OS _ _ O
handler _ _ O
) _ _ O
Physical _ _ O
address _ _ O
Cache _ _ O
To _ _ O
memory _ _ O
Note _ _ O
that _ _ O
there _ _ O
can _ _ O
not _ _ O
be _ _ O
a _ _ O
page _ _ O
fault _ _ O
in _ _ O
case _ _ O
of _ _ O
a _ _ O
TLB _ _ O
hit _ _ O
– _ _ O
when _ _ O
page _ _ O
is _ _ O
swapped _ _ O
to _ _ O
disk _ _ O
, _ _ O
the _ _ O
TLB _ _ O
is _ _ O
flushed _ _ O
May _ _ O
need _ _ O
to _ _ O
write _ _ O
back _ _ O
a _ _ O
dirty _ _ O
block _ _ O
or _ _ O
, _ _ O
depending _ _ O
on _ _ O
being _ _ O
write _ _ O
back _ _ O
or _ _ O
write _ _ O
through _ _ O
19 _ _ O

Close-up _ _ O
on _ _ O
the _ _ O
TLB _ _ O
● _ _ O
The _ _ O
TLB _ _ O
holds _ _ O
PTEs _ _ O
– _ _ O
mappings _ _ O
from _ _ O
VAs _ _ O
to _ _ O
PAs _ _ O
, _ _ O
along _ _ O
with _ _ O
other _ _ O
info _ _ O
used _ _ O
for _ _ O
protection _ _ O
and _ _ O
paging _ _ O
. _ _ O
VA _ _ O
VA _ _ O
Page _ _ O
( _ _ O
Tag _ _ O
) _ _ O
V _ _ O
D _ _ O
Pres _ _ O
Ref _ _ O
Prot _ _ O
PA _ _ O
Page _ _ O
00008 _ _ O
1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
RX _ _ O
03BFA _ _ O
FFFF3 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
1 _ _ O
RW _ _ O
19400 _ _ O
… _ _ O
… _ _ O
… _ _ O
… _ _ O
… _ _ O
… _ _ O
… _ _ O
PA _ _ O
0 _ _ O
valid _ _ O
bit _ _ O
triggers _ _ O
TLB _ _ O
Miss. _ _ O
0 _ _ O
present _ _ O
bit _ _ O
triggers _ _ O
Page _ _ O
Fault _ _ O
. _ _ O
D-Read _ _ O
, _ _ O
D-Write _ _ O
, _ _ O
or _ _ O
I-Fetch _ _ O
? _ _ O
Exception _ _ O
if _ _ O
invalid _ _ O
! _ _ O
20 _ _ O

TLBs _ _ O
in _ _ O
Real _ _ O
Processors _ _ O
21 _ _ O

Caching _ _ O
Makes _ _ O
Everything _ _ O
Faster _ _ O
CPU _ _ O
Virtual _ _ O
address _ _ O
from _ _ O
lw _ _ O
/ _ _ O
sw _ _ O
instructions _ _ O
or _ _ O
from _ _ O
program _ _ O
counter _ _ O
( _ _ O
PC _ _ O
) _ _ O
VA _ _ O
Page _ _ O
# _ _ O
page _ _ O
page _ _ O
Page _ _ O
offset _ _ O
page _ _ O
Block _ _ O
of _ _ O
a _ _ O
page _ _ O
TLB _ _ O
Physical _ _ O
address _ _ O
Physical _ _ O
Memory _ _ O
Cache _ _ O
PTE _ _ O
TLB _ _ O
miss _ _ O
PT _ _ O
walker _ _ O
Page _ _ O
fault _ _ O
PTE _ _ O
into _ _ O
TLB _ _ O
Virtual _ _ O
Address _ _ O
space _ _ O
HDD _ _ O
/ _ _ O
SSD _ _ O
Page _ _ O
table _ _ O
Oh _ _ O
no _ _ O
! _ _ O
OS _ _ O
Page _ _ O
Fault _ _ O
Handler _ _ O
22 _ _ O

Overall _ _ O
Memory _ _ O
System _ _ O
Design _ _ O
● _ _ O
Fast _ _ O
memory _ _ O
access _ _ O
is _ _ O
possible _ _ O
through _ _ O
SW _ _ O
/ _ _ O
HW _ _ O
collaboration _ _ O
: _ _ O
Address _ _ O
Translation _ _ O
( _ _ O
HW _ _ O
/ _ _ O
SW _ _ O
) _ _ O
VA _ _ O
TLB _ _ O
Caching _ _ O
( _ _ O
HW _ _ O
) _ _ O
PA _ _ O
Datapath _ _ O
PA _ _ O
Caches _ _ O
Words _ _ O
/bytes _ _ O
Paging _ _ O
( _ _ O
SW _ _ O
) _ _ O
DRAM _ _ O
Blocks _ _ O
PT _ _ O
Pages _ _ O
HDD _ _ O
/ _ _ O
SSD _ _ O
23 _ _ O



