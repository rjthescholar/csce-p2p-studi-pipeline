unlabeled|cs1550|lec01
-DOCSTART- -X- -X- O

Introduction _ _ O
to _ _ O
Operating _ _ O
Systems _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
Spring _ _ O
2022 _ _ O
Sherif _ _ O
Khattab _ _ O
ksm73@pitt.edu _ _ O
( _ _ O
Some _ _ O
slides _ _ O
are _ _ O
from _ _ O
Silberschatz _ _ O
, _ _ O
Galvin _ _ O
and _ _ O
Gagne _ _ O
© _ _ O
2013 _ _ O
) _ _ O

Announcements _ _ O
• _ _ O
Lab _ _ O
0 _ _ O
due _ _ O
this _ _ O
Friday _ _ O
( _ _ O
soft _ _ O
deadline _ _ O
; _ _ O
not _ _ O
graded _ _ O
) _ _ O
• _ _ O
Homework _ _ O
1 _ _ O
will _ _ O
be _ _ O
posted _ _ O
this _ _ O
Friday _ _ O
• _ _ O
Recitations _ _ O
start _ _ O
this _ _ O
week _ _ O
• _ _ O
VS _ _ O
Code _ _ O
setup _ _ O
tutorial _ _ O
on _ _ O
Piazza _ _ O
( _ _ O
also _ _ O
linked _ _ O
from _ _ O
Canvas _ _ O
) _ _ O
• _ _ O
Draft _ _ O
Slides _ _ O
linked _ _ O
from _ _ O
Canvas _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

Agenda _ _ O
• _ _ O
Main _ _ O
tasks _ _ O
of _ _ O
an _ _ O
operating _ _ O
system _ _ O
• _ _ O
System _ _ O
Calls _ _ O
• _ _ O
What _ _ O
an _ _ O
interrupt _ _ O
is _ _ O
• _ _ O
What _ _ O
happens _ _ O
when _ _ O
an _ _ O
interrupt _ _ O
occurs _ _ O
• _ _ O
What _ _ O
a _ _ O
system _ _ O
call _ _ O
is _ _ O
• _ _ O
How _ _ O
system _ _ O
calls _ _ O
implemented _ _ O
• _ _ O
Effect _ _ O
of _ _ O
OS _ _ O
structure _ _ O
on _ _ O
system _ _ O
calls _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

What _ _ O
is _ _ O
an _ _ O
Operating _ _ O
System _ _ O
? _ _ O
A _ _ O
program _ _ O
that _ _ O
acts _ _ O
as _ _ O
an _ _ O
intermediary _ _ O
between _ _ O
a _ _ O
user _ _ O
of _ _ O
a _ _ O
computer _ _ O
and _ _ O
the _ _ O
computer _ _ O
hardware _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

What _ _ O
does _ _ O
an _ _ O
OS _ _ O
do _ _ O
? _ _ O
• _ _ O
Manages _ _ O
( _ _ O
controls _ _ O
and _ _ O
arbitrates _ _ O
) _ _ O
resources _ _ O
• _ _ O
Processors _ _ O
, _ _ O
Memory _ _ O
, _ _ O
Input _ _ O
/ _ _ O
output _ _ O
devices _ _ O
, _ _ O
Communication _ _ O
devices _ _ O
, _ _ O
Storage _ _ O
, _ _ O
Software _ _ O
applications _ _ O
• _ _ O
Conflicting _ _ O
goals _ _ O
: _ _ O
• _ _ O
e.g. _ _ O
, _ _ O
performance _ _ O
vs. _ _ O
utilization _ _ O
• _ _ O
Separation _ _ O
of _ _ O
policy _ _ O
and _ _ O
mechansim _ _ O
• _ _ O
Provides _ _ O
abstractions _ _ O
to _ _ O
application _ _ O
programs _ _ O
• _ _ O
Ease _ _ O
of _ _ O
use _ _ O
• _ _ O
Virtualization _ _ O
• _ _ O
Protects _ _ O
resources _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

Interrupts _ _ O
Hardware _ _ O
or _ _ O
software _ _ O
: _ _ O
• _ _ O
Hardware _ _ O
interrupt _ _ O
by _ _ O
one _ _ O
of _ _ O
the _ _ O
devices _ _ O
• _ _ O
Software _ _ O
interrupt _ _ O
( _ _ O
exception _ _ O
or _ _ O
trap _ _ O
) _ _ O
: _ _ O
• _ _ O
Software _ _ O
error _ _ O
( _ _ O
e.g. _ _ O
, _ _ O
division _ _ O
by _ _ O
zero _ _ O
) _ _ O
• _ _ O
Other _ _ O
process _ _ O
problems _ _ O
include _ _ O
processes _ _ O
trying _ _ O
to _ _ O
modify _ _ O
each _ _ O
other _ _ O
’s _ _ O
or _ _ O
the _ _ O
operating _ _ O
system _ _ O
’s _ _ O
memory _ _ O
( _ _ O
e.g. _ _ O
, _ _ O
segmentation _ _ O
fault _ _ O
) _ _ O
• _ _ O
Request _ _ O
for _ _ O
operating _ _ O
system _ _ O
service _ _ O
( _ _ O
i.e. _ _ O
, _ _ O
system _ _ O
call _ _ O
) _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

Interrupt _ _ O
Descriptor _ _ O
Table _ _ O
• _ _ O
Interrupt _ _ O
transfers _ _ O
control _ _ O
to _ _ O
the _ _ O
interrupt _ _ O
service _ _ O
routine _ _ O
( _ _ O
ISR _ _ O
) _ _ O
• _ _ O
ISRs _ _ O
are _ _ O
segments _ _ O
of _ _ O
code _ _ O
that _ _ O
determine _ _ O
what _ _ O
action _ _ O
should _ _ O
be _ _ O
taken _ _ O
for _ _ O
each _ _ O
type _ _ O
of _ _ O
interrupt _ _ O
• _ _ O
part _ _ O
of _ _ O
the _ _ O
OS _ _ O
kernel _ _ O
• _ _ O
An _ _ O
interrupt _ _ O
vector _ _ O
contains _ _ O
the _ _ O
address _ _ O
of _ _ O
the _ _ O
ISR _ _ O
for _ _ O
one _ _ O
interrupt _ _ O
• _ _ O
An _ _ O
interrupt _ _ O
vector _ _ O
table _ _ O
is _ _ O
an _ _ O
array _ _ O
of _ _ O
interrupt _ _ O
vectors _ _ O
• _ _ O
also _ _ O
known _ _ O
as _ _ O
interrupt _ _ O
descriptor _ _ O
table _ _ O
( _ _ O
IDT _ _ O
) _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

Dual-mode _ _ O
Operation _ _ O
• _ _ O
Dual-mode _ _ O
operation _ _ O
allows _ _ O
OS _ _ O
to _ _ O
protect _ _ O
itself _ _ O
and _ _ O
other _ _ O
system _ _ O
components _ _ O
• _ _ O
At _ _ O
least _ _ O
two _ _ O
modes _ _ O
: _ _ O
user _ _ O
mode _ _ O
and _ _ O
kernel _ _ O
mode _ _ O
• _ _ O
Mode _ _ O
bit _ _ O
( _ _ O
s _ _ O
) _ _ O
provided _ _ O
by _ _ O
hardware _ _ O
( _ _ O
inside _ _ O
CPU _ _ O
registers _ _ O
) _ _ O
• _ _ O
Provides _ _ O
ability _ _ O
to _ _ O
distinguish _ _ O
when _ _ O
system _ _ O
is _ _ O
running _ _ O
user _ _ O
code _ _ O
or _ _ O
kernel _ _ O
code _ _ O
• _ _ O
Some _ _ O
instructions _ _ O
designated _ _ O
as _ _ O
privileged _ _ O
, _ _ O
only _ _ O
executable _ _ O
in _ _ O
kernel _ _ O
mode _ _ O
• _ _ O
Some _ _ O
memory _ _ O
addresses _ _ O
designated _ _ O
as _ _ O
privileged _ _ O
, _ _ O
only _ _ O
accessible _ _ O
in _ _ O
kernel _ _ O
mode _ _ O
• _ _ O
Therefore _ _ O
, _ _ O
we _ _ O
get _ _ O
segmentation _ _ O
fault _ _ O
on _ _ O
null _ _ O
( _ _ O
i.e. _ _ O
, _ _ O
0 _ _ O
) _ _ O
pointer _ _ O
dereference _ _ O
• _ _ O
Interrupts _ _ O
change _ _ O
mode _ _ O
to _ _ O
kernel _ _ O
• _ _ O
return _ _ O
from _ _ O
interrupt _ _ O
resets _ _ O
mode _ _ O
back _ _ O
to _ _ O
user _ _ O
• _ _ O
Increasingly _ _ O
CPUs _ _ O
support _ _ O
multi-mode _ _ O
operations _ _ O
• _ _ O
virtual _ _ O
machine _ _ O
manager _ _ O
( _ _ O
VMM _ _ O
) _ _ O
mode _ _ O
for _ _ O
guest _ _ O
VMs _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

What _ _ O
happens _ _ O
when _ _ O
an _ _ O
interrupt _ _ O
occurs _ _ O
? _ _ O
The _ _ O
CPU _ _ O
transitions _ _ O
from _ _ O
User _ _ O
Mode _ _ O
to _ _ O
Kernel _ _ O
Mode _ _ O
an _ _ O
interrupt _ _ O
occurs _ _ O
return _ _ O
from _ _ O
ISR _ _ O
execute _ _ O
ISR _ _ O
Time _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

How _ _ O
does _ _ O
an _ _ O
OS _ _ O
( _ _ O
roughly _ _ O
) _ _ O
work _ _ O
? _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

What _ _ O
happens _ _ O
on _ _ O
a _ _ O
hardware _ _ O
interrupt _ _ O
? _ _ O
6 _ _ O
1 _ _ O
4 _ _ O
5 _ _ O
9 _ _ O
3 _ _ O
8 _ _ O
2 _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
7 _ _ O

System _ _ O
Calls _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

System _ _ O
Calls _ _ O
• _ _ O
Programming _ _ O
interface _ _ O
to _ _ O
OS _ _ O
services _ _ O
• _ _ O
Typically _ _ O
written _ _ O
in _ _ O
a _ _ O
high-level _ _ O
language _ _ O
( _ _ O
C _ _ O
or _ _ O
C++ _ _ O
) _ _ O
• _ _ O
Mostly _ _ O
accessed _ _ O
by _ _ O
programs _ _ O
via _ _ O
a _ _ O
high-level _ _ O
Application _ _ O
Programming _ _ O
Interface _ _ O
( _ _ O
API _ _ O
) _ _ O
rather _ _ O
than _ _ O
direct _ _ O
system _ _ O
call _ _ O
use _ _ O
• _ _ O
Win32 _ _ O
API _ _ O
for _ _ O
Windows _ _ O
• _ _ O
POSIX _ _ O
API _ _ O
for _ _ O
POSIX-based _ _ O
systems _ _ O
( _ _ O
including _ _ O
virtually _ _ O
all _ _ O
versions _ _ O
of _ _ O
UNIX _ _ O
, _ _ O
Linux _ _ O
, _ _ O
and _ _ O
Mac _ _ O
OS _ _ O
X _ _ O
) _ _ O
, _ _ O
and _ _ O
• _ _ O
Java _ _ O
API _ _ O
for _ _ O
the _ _ O
Java _ _ O
virtual _ _ O
machine _ _ O
( _ _ O
JVM _ _ O
) _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

System _ _ O
Call _ _ O
Implementation _ _ O
• _ _ O
Typically _ _ O
, _ _ O
there _ _ O
is _ _ O
a _ _ O
number _ _ O
associated _ _ O
with _ _ O
each _ _ O
system _ _ O
call _ _ O
• _ _ O
Each _ _ O
system _ _ O
call _ _ O
has _ _ O
a _ _ O
corresponding _ _ O
system _ _ O
call _ _ O
implementation _ _ O
function _ _ O
( _ _ O
part _ _ O
of _ _ O
the _ _ O
OS _ _ O
kernel _ _ O
) _ _ O
• _ _ O
System-call _ _ O
table _ _ O
indexed _ _ O
according _ _ O
to _ _ O
these _ _ O
numbers _ _ O
• _ _ O
Each _ _ O
entry _ _ O
in _ _ O
the _ _ O
table _ _ O
contains _ _ O
the _ _ O
address _ _ O
of _ _ O
the _ _ O
corresponding _ _ O
system _ _ O
call _ _ O
implementation _ _ O
function _ _ O
• _ _ O
The _ _ O
system _ _ O
call _ _ O
interface _ _ O
is _ _ O
the _ _ O
ISR _ _ O
corresponding _ _ O
to _ _ O
the _ _ O
syscall _ _ O
software _ _ O
interrupt _ _ O
• _ _ O
• _ _ O
• _ _ O
invokes _ _ O
the _ _ O
intended _ _ O
system _ _ O
call _ _ O
in _ _ O
OS _ _ O
kernel _ _ O
, _ _ O
passes _ _ O
arguments _ _ O
if _ _ O
needed _ _ O
, _ _ O
and _ _ O
returns _ _ O
status _ _ O
of _ _ O
the _ _ O
system _ _ O
call _ _ O
and _ _ O
any _ _ O
return _ _ O
values _ _ O
• _ _ O
The _ _ O
caller _ _ O
need _ _ O
know _ _ O
nothing _ _ O
about _ _ O
how _ _ O
the _ _ O
system _ _ O
call _ _ O
is _ _ O
implemented _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

API _ _ O
– _ _ O
System _ _ O
Call _ _ O
– _ _ O
OS _ _ O
Relationship _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

Standard _ _ O
C _ _ O
Library _ _ O
Example _ _ O
• _ _ O
C _ _ O
program _ _ O
invoking _ _ O
printf _ _ O
( _ _ O
) _ _ O
library _ _ O
call _ _ O
, _ _ O
which _ _ O
calls _ _ O
write _ _ O
( _ _ O
) _ _ O
system _ _ O
call _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

What _ _ O
happens _ _ O
on _ _ O
a _ _ O
syscall _ _ O
? _ _ O
2 _ _ O
1 _ _ O
6 _ _ O
7 _ _ O
12 _ _ O
1 _ _ O
eax _ _ O
< _ _ O
-- _ _ O
1 _ _ O
int _ _ O
64 _ _ O
10 _ _ O
3 _ _ O
4 _ _ O
11 _ _ O
5 _ _ O
8 _ _ O
9 _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

System _ _ O
Call _ _ O
Parameter _ _ O
Passing _ _ O
• _ _ O
Three _ _ O
general _ _ O
methods _ _ O
used _ _ O
to _ _ O
pass _ _ O
parameters _ _ O
to _ _ O
the _ _ O
OS _ _ O
• _ _ O
Simplest _ _ O
: _ _ O
pass _ _ O
the _ _ O
parameters _ _ O
in _ _ O
registers _ _ O
• _ _ O
In _ _ O
some _ _ O
cases _ _ O
, _ _ O
may _ _ O
be _ _ O
more _ _ O
parameters _ _ O
than _ _ O
registers _ _ O
• _ _ O
Parameters _ _ O
stored _ _ O
in _ _ O
a _ _ O
block _ _ O
, _ _ O
or _ _ O
table _ _ O
, _ _ O
in _ _ O
memory _ _ O
, _ _ O
and _ _ O
address _ _ O
of _ _ O
block _ _ O
passed _ _ O
as _ _ O
a _ _ O
parameter _ _ O
in _ _ O
a _ _ O
register _ _ O
• _ _ O
This _ _ O
approach _ _ O
taken _ _ O
by _ _ O
Linux _ _ O
and _ _ O
Solaris _ _ O
• _ _ O
Parameters _ _ O
placed _ _ O
, _ _ O
or _ _ O
pushed _ _ O
, _ _ O
onto _ _ O
the _ _ O
stack _ _ O
by _ _ O
the _ _ O
program _ _ O
and _ _ O
popped _ _ O
off _ _ O
the _ _ O
stack _ _ O
by _ _ O
the _ _ O
operating _ _ O
system _ _ O
• _ _ O
XV6 _ _ O
• _ _ O
Block _ _ O
and _ _ O
stack _ _ O
methods _ _ O
do _ _ O
not _ _ O
limit _ _ O
the _ _ O
number _ _ O
or _ _ O
length _ _ O
of _ _ O
parameters _ _ O
being _ _ O
passed _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

How _ _ O
to _ _ O
add _ _ O
a _ _ O
system _ _ O
call _ _ O
to _ _ O
an _ _ O
OS _ _ O
? _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

Xv6 _ _ O
Code _ _ O
Walkthrough _ _ O
• _ _ O
IDT _ _ O
table _ _ O
initialization _ _ O
• _ _ O
Syscall _ _ O
table _ _ O
• _ _ O
How _ _ O
a _ _ O
syscall _ _ O
is _ _ O
invoked _ _ O
• _ _ O
Syscall _ _ O
implementation _ _ O
• _ _ O
Parameter _ _ O
passing _ _ O
into _ _ O
a _ _ O
syscall _ _ O
• _ _ O
In _ _ O
Lab _ _ O
1 _ _ O
you _ _ O
will _ _ O
add _ _ O
a _ _ O
system _ _ O
call _ _ O
to _ _ O
Xv6 _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

Traditional _ _ O
UNIX _ _ O
System _ _ O
Structure _ _ O
Beyond _ _ O
simple _ _ O
but _ _ O
not _ _ O
fully _ _ O
layered _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O

Microkernel _ _ O
System _ _ O
Structure _ _ O
Application _ _ O
Program _ _ O
File _ _ O
System _ _ O
messages _ _ O
Interprocess _ _ O
Communication _ _ O
Device _ _ O
Driver _ _ O
user _ _ O
mode _ _ O
CPU _ _ O
scheduling _ _ O
kernel _ _ O
mode _ _ O
messages _ _ O
memory _ _ O
managment _ _ O
microkernel _ _ O
hardware _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O



