unlabeled|cs1550|lec03
-DOCSTART- -X- -X- O

Introduction _ _ O
to _ _ O
Operating _ _ O
Systems _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
Spring _ _ O
2022 _ _ O
Sherif _ _ O
Khattab _ _ O
ksm73@pitt.edu _ _ O
( _ _ O
Some _ _ O
slides _ _ O
are _ _ O
from _ _ O
Silberschatz _ _ O
, _ _ O
Galvin _ _ O
and _ _ O
Gagne _ _ O
© _ _ O
2013 _ _ O
) _ _ O

Announcements _ _ O
• _ _ O
Homework _ _ O
1 _ _ O
is _ _ O
due _ _ O
next _ _ O
Monday _ _ O
at _ _ O
11 _ _ O
: _ _ O
59 _ _ O
pm _ _ O
• _ _ O
Lab _ _ O
1 _ _ O
is _ _ O
due _ _ O
on _ _ O
2 _ _ O
/ _ _ O
4 _ _ O
at _ _ O
11 _ _ O
: _ _ O
59 _ _ O
pm _ _ O
• _ _ O
Distributed _ _ O
using _ _ O
GitHub _ _ O
Classroom _ _ O
• _ _ O
Explained _ _ O
in _ _ O
this _ _ O
week _ _ O
’s _ _ O
recitations _ _ O
• _ _ O
TA _ _ O
Office _ _ O
hours _ _ O
available _ _ O
on _ _ O
the _ _ O
syllabus _ _ O
page _ _ O
• _ _ O
Project _ _ O
1 _ _ O
will _ _ O
be _ _ O
up _ _ O
on _ _ O
Canvas _ _ O
this _ _ O
Friday _ _ O
• _ _ O
Docker _ _ O
images _ _ O
are _ _ O
available _ _ O
on _ _ O
Canvas _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
2 _ _ O

Muddiest _ _ O
Points _ _ O
• _ _ O
the _ _ O
while _ _ O
( _ _ O
1 _ _ O
) _ _ O
loop _ _ O
in _ _ O
the _ _ O
spinlocks _ _ O
example _ _ O
( _ _ O
just _ _ O
a _ _ O
placeholder _ _ O
I _ _ O
assume _ _ O
? _ _ O
) _ _ O
• _ _ O
It _ _ O
would _ _ O
be _ _ O
helpful _ _ O
to _ _ O
have _ _ O
a _ _ O
step-by-step _ _ O
written _ _ O
out _ _ O
representation _ _ O
of _ _ O
Context _ _ O
Switching _ _ O
in _ _ O
Xv6 _ _ O
to _ _ O
accompany _ _ O
the _ _ O
graphic _ _ O
• _ _ O
Why _ _ O
only _ _ O
certain _ _ O
registers _ _ O
were _ _ O
pushed _ _ O
/ _ _ O
popped _ _ O
in _ _ O
the _ _ O
context _ _ O
switches _ _ O
. _ _ O
Is _ _ O
it _ _ O
just _ _ O
because _ _ O
these _ _ O
are _ _ O
the _ _ O
only _ _ O
registers _ _ O
the _ _ O
processes _ _ O
could _ _ O
be _ _ O
using _ _ O
? _ _ O
• _ _ O
How _ _ O
can _ _ O
hardware _ _ O
be _ _ O
directly _ _ O
accessed _ _ O
by _ _ O
user _ _ O
tasks _ _ O
, _ _ O
like _ _ O
the _ _ O
first _ _ O
two _ _ O
options _ _ O
in _ _ O
the _ _ O
spin _ _ O
lock _ _ O
slide _ _ O
? _ _ O
My _ _ O
thought _ _ O
was _ _ O
that _ _ O
something _ _ O
like _ _ O
an _ _ O
atomic _ _ O
swap _ _ O
would _ _ O
need _ _ O
hard _ _ O
wiring _ _ O
, _ _ O
not _ _ O
software _ _ O
• _ _ O
Are _ _ O
race _ _ O
condition _ _ O
prevention _ _ O
methods _ _ O
implemented _ _ O
by _ _ O
the _ _ O
programmer _ _ O
or _ _ O
the _ _ O
operating _ _ O
system _ _ O
? _ _ O
• _ _ O
What _ _ O
exactly _ _ O
is _ _ O
a _ _ O
critical _ _ O
region _ _ O
again _ _ O
? _ _ O
• _ _ O
Are _ _ O
context _ _ O
switching _ _ O
done _ _ O
by _ _ O
the _ _ O
kernel _ _ O
? _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
3 _ _ O

Agenda _ _ O
• _ _ O
Busy _ _ O
Waiting _ _ O
Problem _ _ O
• _ _ O
Why _ _ O
does _ _ O
it _ _ O
happen _ _ O
? _ _ O
• _ _ O
What _ _ O
are _ _ O
its _ _ O
implications _ _ O
? _ _ O
• _ _ O
How _ _ O
to _ _ O
solve _ _ O
it _ _ O
? _ _ O
• _ _ O
Sempahores _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
4 _ _ O

Today _ _ O
’s _ _ O
problem _ _ O
: _ _ O
Busy _ _ O
Waiting _ _ O
• _ _ O
A _ _ O
process _ _ O
that _ _ O
is _ _ O
trying _ _ O
to _ _ O
acquire _ _ O
a _ _ O
locked _ _ O
spinlock _ _ O
is _ _ O
running _ _ O
! _ _ O
• _ _ O
It _ _ O
continuously _ _ O
checks _ _ O
: _ _ O
• _ _ O
can _ _ O
I _ _ O
get _ _ O
the _ _ O
lock _ _ O
? _ _ O
No _ _ O
, _ _ O
lock _ _ O
is _ _ O
held _ _ O
by _ _ O
another _ _ O
process _ _ O
• _ _ O
can _ _ O
I _ _ O
get _ _ O
the _ _ O
lock _ _ O
? _ _ O
No _ _ O
, _ _ O
lock _ _ O
is _ _ O
held _ _ O
by _ _ O
another _ _ O
process _ _ O
• _ _ O
… _ _ O
• _ _ O
This _ _ O
continuous _ _ O
check _ _ O
is _ _ O
called _ _ O
spinning _ _ O
or _ _ O
busy _ _ O
waiting _ _ O
• _ _ O
But _ _ O
what _ _ O
is _ _ O
wrong _ _ O
with _ _ O
that _ _ O
? _ _ O
• _ _ O
Busy _ _ O
waiting _ _ O
wastes _ _ O
CPU _ _ O
cycles _ _ O
• _ _ O
on _ _ O
a _ _ O
single-core _ _ O
system _ _ O
it _ _ O
delays _ _ O
the _ _ O
process _ _ O
that _ _ O
is _ _ O
holding _ _ O
the _ _ O
lock _ _ O
from _ _ O
releasing _ _ O
it _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
5 _ _ O

Today _ _ O
’s _ _ O
problem _ _ O
: _ _ O
Busy _ _ O
Waiting _ _ O
While _ _ O
P1 _ _ O
is _ _ O
in _ _ O
the _ _ O
critical _ _ O
region _ _ O
, _ _ O
P2 _ _ O
is _ _ O
busy _ _ O
waiting _ _ O
Shared _ _ O
Data _ _ O
Spinlock _ _ O
lk _ _ O
; _ _ O
int _ _ O
x _ _ O
; _ _ O
Process _ _ O
P1 _ _ O
lock _ _ O
( _ _ O
lk _ _ O
) _ _ O
; _ _ O
Process _ _ O
P2 _ _ O
lock _ _ O
( _ _ O
lk _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
critical _ _ O
region _ _ O
( _ _ O
e.g. _ _ O
, _ _ O
x++ _ _ O
) _ _ O
/ _ _ O
/ _ _ O
critical _ _ O
region _ _ O
( _ _ O
e.g. _ _ O
, _ _ O
x++ _ _ O
) _ _ O
unlock _ _ O
( _ _ O
lk _ _ O
) _ _ O
; _ _ O
unlock _ _ O
( _ _ O
lk _ _ O
) _ _ O
; _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
6 _ _ O

But _ _ O
why _ _ O
? _ _ O
Why _ _ O
does _ _ O
busy _ _ O
waiting _ _ O
happen _ _ O
with _ _ O
spinlocks _ _ O
? _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
7 _ _ O

Atomic _ _ O
TestAndSet _ _ O
• _ _ O
TestAndSet _ _ O
is _ _ O
an _ _ O
atomic _ _ O
instruction _ _ O
int _ _ O
TestAndSet _ _ O
( _ _ O
int _ _ O
& _ _ O
x _ _ O
) _ _ O
{ _ _ O
• _ _ O
Works _ _ O
for _ _ O
singlecore _ _ O
and _ _ O
multicore _ _ O
Symmetric _ _ O
Multi-Processing _ _ O
( _ _ O
SMP _ _ O
) _ _ O
lock _ _ O
memory _ _ O
access _ _ O
to _ _ O
x _ _ O
int _ _ O
temp _ _ O
= _ _ O
* _ _ O
x _ _ O
; _ _ O
* _ _ O
x _ _ O
= _ _ O
1 _ _ O
; _ _ O
unlock _ _ O
memory _ _ O
access _ _ O
to _ _ O
x _ _ O
return _ _ O
temp _ _ O
; _ _ O
} _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
8 _ _ O

Spinlock _ _ O
implementation _ _ O
using _ _ O
TestAndSet _ _ O
• _ _ O
Single _ _ O
shared _ _ O
variable _ _ O
: _ _ O
lock _ _ O
• _ _ O
Works _ _ O
for _ _ O
any _ _ O
number _ _ O
of _ _ O
processes _ _ O
int _ _ O
lock _ _ O
= _ _ O
0 _ _ O
; _ _ O
Lock _ _ O
( _ _ O
) _ _ O
{ _ _ O
while _ _ O
( _ _ O
TestAndSet _ _ O
( _ _ O
& _ _ O
lock _ _ O
) _ _ O
) _ _ O
; _ _ O
} _ _ O
Unlock _ _ O
( _ _ O
) _ _ O
{ _ _ O
lock _ _ O
= _ _ O
0 _ _ O
; _ _ O
} _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
9 _ _ O

Atomic _ _ O
Swap _ _ O
• _ _ O
Swap _ _ O
is _ _ O
an _ _ O
atomic _ _ O
instruction _ _ O
int _ _ O
Swap _ _ O
( _ _ O
int _ _ O
& _ _ O
x _ _ O
, _ _ O
int _ _ O
y _ _ O
) _ _ O
{ _ _ O
• _ _ O
Works _ _ O
for _ _ O
singlecore _ _ O
and _ _ O
multicore _ _ O
Symmetric _ _ O
Multi-Processing _ _ O
( _ _ O
SMP _ _ O
) _ _ O
lock _ _ O
memory _ _ O
access _ _ O
to _ _ O
x _ _ O
int _ _ O
temp _ _ O
= _ _ O
* _ _ O
x _ _ O
; _ _ O
* _ _ O
x _ _ O
= _ _ O
y _ _ O
; _ _ O
unlock _ _ O
memory _ _ O
access _ _ O
to _ _ O
x _ _ O
return _ _ O
temp _ _ O
; _ _ O
} _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
10 _ _ O

Spinlock _ _ O
implementation _ _ O
using _ _ O
Swap _ _ O
• _ _ O
Single _ _ O
shared _ _ O
variable _ _ O
: _ _ O
lock _ _ O
• _ _ O
Works _ _ O
for _ _ O
any _ _ O
number _ _ O
of _ _ O
processes _ _ O
int _ _ O
lock _ _ O
= _ _ O
0 _ _ O
; _ _ O
Lock _ _ O
( _ _ O
) _ _ O
{ _ _ O
while _ _ O
( _ _ O
Swap _ _ O
( _ _ O
& _ _ O
lock _ _ O
, _ _ O
1 _ _ O
) _ _ O
) _ _ O
; _ _ O
} _ _ O
Unlock _ _ O
( _ _ O
) _ _ O
{ _ _ O
lock _ _ O
= _ _ O
0 _ _ O
; _ _ O
} _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
11 _ _ O

Implication _ _ O
of _ _ O
Busy _ _ O
Waiting _ _ O
Subproblem _ _ O
: _ _ O
priority _ _ O
inversion _ _ O
( _ _ O
higher _ _ O
priority _ _ O
process _ _ O
busy _ _ O
waits _ _ O
for _ _ O
lower _ _ O
priority _ _ O
process _ _ O
) _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
12 _ _ O

Implementation _ _ O
Detail _ _ O
compiler _ _ O
and/or _ _ O
hardware _ _ O
may _ _ O
reorder _ _ O
instructions _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
13 _ _ O

Xv6 _ _ O
Walkthrough _ _ O
• _ _ O
Spinlocks _ _ O
• _ _ O
_ _ _ O
_ _ _ O
sync_synchronize _ _ O
( _ _ O
) _ _ O
is _ _ O
a _ _ O
memory _ _ O
barrier _ _ O
instruction _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
14 _ _ O

• _ _ O
• _ _ O
Semaphores _ _ O
Solution _ _ O
: _ _ O
use _ _ O
semaphores _ _ O
• _ _ O
Synchronization _ _ O
mechanism _ _ O
that _ _ O
does _ _ O
n’t _ _ O
require _ _ O
busy _ _ O
waiting _ _ O
Implementation _ _ O
• _ _ O
Semaphore _ _ O
S _ _ O
accessed _ _ O
by _ _ O
two _ _ O
atomic _ _ O
operations _ _ O
• _ _ O
Down _ _ O
( _ _ O
S _ _ O
) _ _ O
: _ _ O
decrement _ _ O
the _ _ O
semaphore _ _ O
if _ _ O
> _ _ O
0 _ _ O
; _ _ O
block _ _ O
otherwise _ _ O
• _ _ O
Up _ _ O
( _ _ O
S _ _ O
) _ _ O
: _ _ O
increment _ _ O
the _ _ O
semaphore _ _ O
and _ _ O
wakeup _ _ O
one _ _ O
blocked _ _ O
process _ _ O
if _ _ O
any _ _ O
• _ _ O
Down _ _ O
( _ _ O
) _ _ O
is _ _ O
another _ _ O
name _ _ O
for _ _ O
P _ _ O
( _ _ O
) _ _ O
• _ _ O
Up _ _ O
( _ _ O
) _ _ O
is _ _ O
another _ _ O
name _ _ O
for _ _ O
V _ _ O
( _ _ O
) _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
15 _ _ O

Busy _ _ O
waiting _ _ O
vs. _ _ O
Blocking _ _ O
Blocking _ _ O
involves _ _ O
2 _ _ O
context _ _ O
switches _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
16 _ _ O

Critical _ _ O
sections _ _ O
using _ _ O
semaphores _ _ O
Shared _ _ O
variables _ _ O
Semaphore _ _ O
sem _ _ O
( _ _ O
1 _ _ O
) _ _ O
; _ _ O
Code _ _ O
for _ _ O
process _ _ O
Pi _ _ O
while _ _ O
( _ _ O
1 _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
non-critical _ _ O
section _ _ O
down _ _ O
( _ _ O
sem _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
critical _ _ O
section _ _ O
up _ _ O
( _ _ O
sem _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
non-critical _ _ O
section _ _ O
} _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
17 _ _ O

Types _ _ O
of _ _ O
semaphores _ _ O
• _ _ O
Two _ _ O
different _ _ O
types _ _ O
of _ _ O
semaphores _ _ O
• _ _ O
Counting _ _ O
semaphores _ _ O
• _ _ O
Binary _ _ O
semaphores _ _ O
• _ _ O
Counting _ _ O
semaphore _ _ O
• _ _ O
Value _ _ O
can _ _ O
range _ _ O
over _ _ O
an _ _ O
unrestricted _ _ O
range _ _ O
• _ _ O
Binary _ _ O
semaphore _ _ O
• _ _ O
Only _ _ O
two _ _ O
values _ _ O
possible _ _ O
• _ _ O
1 _ _ O
means _ _ O
the _ _ O
semaphore _ _ O
is _ _ O
available _ _ O
• _ _ O
0 _ _ O
means _ _ O
a _ _ O
process _ _ O
has _ _ O
acquired _ _ O
the _ _ O
semaphore _ _ O
• _ _ O
May _ _ O
be _ _ O
simpler _ _ O
to _ _ O
implement _ _ O
• _ _ O
Possible _ _ O
to _ _ O
implement _ _ O
one _ _ O
type _ _ O
using _ _ O
the _ _ O
other _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
18 _ _ O

Semaphore _ _ O
Implementation _ _ O
But _ _ O
how _ _ O
do _ _ O
semaphores _ _ O
avoid _ _ O
busy _ _ O
waiting _ _ O
? _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
19 _ _ O

• _ _ O
• _ _ O
Implementing _ _ O
semaphores _ _ O
with _ _ O
blocking _ _ O
Assume _ _ O
two _ _ O
operations _ _ O
: _ _ O
• _ _ O
Sleep _ _ O
( _ _ O
) _ _ O
: _ _ O
suspends _ _ O
current _ _ O
process _ _ O
• _ _ O
Wakeup _ _ O
( _ _ O
P _ _ O
) _ _ O
: _ _ O
allows _ _ O
process _ _ O
P _ _ O
to _ _ O
resume _ _ O
execution _ _ O
Semaphore _ _ O
data _ _ O
structure _ _ O
• _ _ O
Tracks _ _ O
value _ _ O
of _ _ O
semaphore _ _ O
• _ _ O
Keeps _ _ O
a _ _ O
list _ _ O
of _ _ O
processes _ _ O
waiting _ _ O
for _ _ O
the _ _ O
semaphore _ _ O
struct _ _ O
Semaphore _ _ O
{ _ _ O
int _ _ O
value _ _ O
; _ _ O
ProcessList _ _ O
pl _ _ O
; _ _ O
} _ _ O
; _ _ O
down _ _ O
( _ _ O
) _ _ O
{ _ _ O
value _ _ O
-= _ _ O
1 _ _ O
; _ _ O
if _ _ O
( _ _ O
value _ _ O
< _ _ O
0 _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
add _ _ O
this _ _ O
process _ _ O
to _ _ O
pl _ _ O
Sleep _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
up _ _ O
( _ _ O
) _ _ O
{ _ _ O
Process _ _ O
P _ _ O
; _ _ O
value _ _ O
+ _ _ O
= _ _ O
1 _ _ O
; _ _ O
if _ _ O
( _ _ O
value _ _ O
< _ _ O
= _ _ O
0 _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
remove _ _ O
a _ _ O
process _ _ O
P _ _ O
/ _ _ O
/ _ _ O
from _ _ O
pl _ _ O
Wakeup _ _ O
( _ _ O
P _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
How _ _ O
to _ _ O
protect _ _ O
these _ _ O
shared _ _ O
variables _ _ O
? _ _ O
? _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
20 _ _ O

Spinlocks _ _ O
in _ _ O
Semaphores _ _ O
down _ _ O
( _ _ O
) _ _ O
{ _ _ O
value _ _ O
-= _ _ O
1 _ _ O
; _ _ O
if _ _ O
( _ _ O
value _ _ O
< _ _ O
0 _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
add _ _ O
this _ _ O
process _ _ O
to _ _ O
pl _ _ O
Sleep _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
struct _ _ O
Semaphore _ _ O
{ _ _ O
int _ _ O
value _ _ O
; _ _ O
ProcessList _ _ O
pl _ _ O
; _ _ O
} _ _ O
; _ _ O
} _ _ O
up _ _ O
( _ _ O
) _ _ O
{ _ _ O
Process _ _ O
P _ _ O
; _ _ O
value _ _ O
+ _ _ O
= _ _ O
1 _ _ O
; _ _ O
if _ _ O
( _ _ O
value _ _ O
< _ _ O
= _ _ O
0 _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
remove _ _ O
a _ _ O
process _ _ O
P _ _ O
/ _ _ O
/ _ _ O
from _ _ O
pl _ _ O
Wakeup _ _ O
( _ _ O
P _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
21 _ _ O

Spinlocks _ _ O
are _ _ O
sometimes _ _ O
better _ _ O
than _ _ O
Semaphores _ _ O
• _ _ O
Very _ _ O
( _ _ O
very _ _ O
) _ _ O
short _ _ O
waiting _ _ O
time _ _ O
to _ _ O
enter _ _ O
the _ _ O
critical _ _ O
section _ _ O
< _ _ O
the _ _ O
2 _ _ O
context _ _ O
switches _ _ O
needed _ _ O
for _ _ O
blocking _ _ O
• _ _ O
Multi-core _ _ O
• _ _ O
so _ _ O
that _ _ O
the _ _ O
spinlock _ _ O
can _ _ O
be _ _ O
unlocked _ _ O
while _ _ O
the _ _ O
process _ _ O
is _ _ O
busy _ _ O
waiting _ _ O
• _ _ O
Few _ _ O
contending _ _ O
processes _ _ O
for _ _ O
the _ _ O
critical _ _ O
section _ _ O
• _ _ O
Short _ _ O
critical _ _ O
section _ _ O
code _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
22 _ _ O



