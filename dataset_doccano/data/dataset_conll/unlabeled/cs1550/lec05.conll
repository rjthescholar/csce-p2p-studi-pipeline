unlabeled|cs1550|lec05
-DOCSTART- -X- -X- O

Introduction _ _ O
to _ _ O
Operating _ _ O
Systems _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
Spring _ _ O
2022 _ _ O
Sherif _ _ O
Khattab _ _ O
ksm73@pitt.edu _ _ O
( _ _ O
Some _ _ O
slides _ _ O
are _ _ O
from _ _ O
Silberschatz _ _ O
, _ _ O
Galvin _ _ O
and _ _ O
Gagne _ _ O
© _ _ O
2013 _ _ O
) _ _ O

Announcements _ _ O
• _ _ O
Lectures _ _ O
and _ _ O
recitations _ _ O
are _ _ O
back _ _ O
in-person _ _ O
• _ _ O
Upcoming _ _ O
deadlines _ _ O
• _ _ O
Homework _ _ O
2 _ _ O
is _ _ O
due _ _ O
next _ _ O
Monday _ _ O
at _ _ O
11 _ _ O
: _ _ O
59 _ _ O
pm _ _ O
• _ _ O
Lab _ _ O
1 _ _ O
is _ _ O
due _ _ O
on _ _ O
2 _ _ O
/ _ _ O
4 _ _ O
at _ _ O
11 _ _ O
: _ _ O
59 _ _ O
pm _ _ O
• _ _ O
Project _ _ O
1 _ _ O
is _ _ O
due _ _ O
on _ _ O
2 _ _ O
/ _ _ O
18 _ _ O
at _ _ O
11 _ _ O
: _ _ O
59 _ _ O
pm _ _ O
• _ _ O
Explained _ _ O
in _ _ O
this _ _ O
week _ _ O
’s _ _ O
recitations _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
2 _ _ O

Previous _ _ O
Lecture _ _ O
… _ _ O
Three-usage _ _ O
problems _ _ O
of _ _ O
Semaphores _ _ O
• _ _ O
compromising _ _ O
mutual _ _ O
exclusion _ _ O
• _ _ O
Solution _ _ O
: _ _ O
Mutex _ _ O
• _ _ O
deadlock _ _ O
• _ _ O
Solution _ _ O
: _ _ O
Not _ _ O
yet _ _ O
discussed _ _ O
• _ _ O
priority _ _ O
inversion _ _ O
• _ _ O
Solution _ _ O
: _ _ O
priority _ _ O
inheritance _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
3 _ _ O

Muddiest _ _ O
Points _ _ O
( _ _ O
basic _ _ O
concepts _ _ O
) _ _ O
• _ _ O
Deadlock _ _ O
• _ _ O
mutual _ _ O
exclusion _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
4 _ _ O

Muddiest _ _ O
Points _ _ O
( _ _ O
semaphore _ _ O
) _ _ O
• _ _ O
What _ _ O
the _ _ O
semaphore _ _ O
value _ _ O
means _ _ O
. _ _ O
• _ _ O
Can _ _ O
we _ _ O
see _ _ O
a _ _ O
process _ _ O
that _ _ O
utilizes _ _ O
a _ _ O
semaphore _ _ O
/ _ _ O
spinlock _ _ O
and _ _ O
trace _ _ O
it _ _ O
? _ _ O
• _ _ O
Where _ _ O
we _ _ O
move _ _ O
after _ _ O
down _ _ O
is _ _ O
called _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
5 _ _ O

Muddiest _ _ O
Points _ _ O
( _ _ O
Mutex _ _ O
) _ _ O
• _ _ O
With _ _ O
mutex _ _ O
, _ _ O
what _ _ O
happens _ _ O
when _ _ O
a _ _ O
process _ _ O
tries _ _ O
to _ _ O
up _ _ O
( _ _ O
) _ _ O
when _ _ O
it _ _ O
has _ _ O
n't _ _ O
down _ _ O
( _ _ O
) _ _ O
' _ _ O
d _ _ O
, _ _ O
does _ _ O
it _ _ O
skip _ _ O
over _ _ O
the _ _ O
instruction _ _ O
or _ _ O
does _ _ O
it _ _ O
do _ _ O
something _ _ O
else _ _ O
? _ _ O
• _ _ O
how _ _ O
does _ _ O
a _ _ O
mutex _ _ O
semaphore _ _ O
verify _ _ O
that _ _ O
the _ _ O
same _ _ O
process _ _ O
that _ _ O
called _ _ O
down _ _ O
on _ _ O
it _ _ O
in _ _ O
the _ _ O
first _ _ O
place _ _ O
is _ _ O
the _ _ O
one _ _ O
that _ _ O
called _ _ O
up _ _ O
on _ _ O
it _ _ O
? _ _ O
• _ _ O
Can _ _ O
a _ _ O
mutex _ _ O
have _ _ O
a _ _ O
negative _ _ O
value _ _ O
or _ _ O
is _ _ O
it _ _ O
only _ _ O
0 _ _ O
or _ _ O
1 _ _ O
? _ _ O
• _ _ O
Advantages _ _ O
/ _ _ O
disadvantages _ _ O
of _ _ O
Mutex _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
6 _ _ O

Muddiest _ _ O
Points _ _ O
( _ _ O
priority _ _ O
inheritance _ _ O
) _ _ O
• _ _ O
What _ _ O
is _ _ O
priority _ _ O
inheritance _ _ O
? _ _ O
• _ _ O
I _ _ O
'm _ _ O
confused _ _ O
on _ _ O
what _ _ O
the _ _ O
solution _ _ O
for _ _ O
priority _ _ O
inversion _ _ O
is _ _ O
or _ _ O
did _ _ O
we _ _ O
not _ _ O
mention _ _ O
it _ _ O
yet _ _ O
? _ _ O
• _ _ O
Does _ _ O
Priority _ _ O
Inheritance _ _ O
solve _ _ O
the _ _ O
Deadlock _ _ O
and _ _ O
Starvation _ _ O
problems _ _ O
along _ _ O
with _ _ O
the _ _ O
Priority _ _ O
Inversion _ _ O
problem _ _ O
? _ _ O
• _ _ O
Why _ _ O
running _ _ O
P1 _ _ O
in _ _ O
the _ _ O
priority _ _ O
inversion _ _ O
question _ _ O
not _ _ O
down _ _ O
the _ _ O
semaphore _ _ O
? _ _ O
• _ _ O
Does _ _ O
priority _ _ O
inversion _ _ O
( _ _ O
of _ _ O
semaphores _ _ O
) _ _ O
cause _ _ O
the _ _ O
lower _ _ O
process _ _ O
to _ _ O
run _ _ O
instead _ _ O
of _ _ O
the _ _ O
higher _ _ O
priority _ _ O
process _ _ O
indefinitely _ _ O
or _ _ O
does _ _ O
this _ _ O
resolve _ _ O
itself _ _ O
? _ _ O
If _ _ O
so _ _ O
how _ _ O
? _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
7 _ _ O

Semaphore _ _ O
Usage _ _ O
Problem _ _ O
: _ _ O
Priority _ _ O
Inversion _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
8 _ _ O

Muddiest _ _ O
Points _ _ O
( _ _ O
forking _ _ O
1 _ _ O
) _ _ O
• _ _ O
if _ _ O
fork _ _ O
creates _ _ O
copies _ _ O
of _ _ O
the _ _ O
process _ _ O
that _ _ O
called _ _ O
it _ _ O
, _ _ O
how _ _ O
can _ _ O
you _ _ O
tell _ _ O
which _ _ O
copy _ _ O
has _ _ O
priority _ _ O
to _ _ O
run _ _ O
first _ _ O
? _ _ O
• _ _ O
child _ _ O
processes _ _ O
& _ _ O
where _ _ O
they _ _ O
pick _ _ O
up _ _ O
in _ _ O
the _ _ O
code _ _ O
• _ _ O
Not _ _ O
exactly _ _ O
sure _ _ O
how _ _ O
semaphores _ _ O
are _ _ O
inherited _ _ O
between _ _ O
processes _ _ O
• _ _ O
In _ _ O
the _ _ O
last _ _ O
example _ _ O
, _ _ O
when _ _ O
p1 _ _ O
calls _ _ O
fork _ _ O
and _ _ O
creates _ _ O
the _ _ O
child _ _ O
p3 _ _ O
, _ _ O
will _ _ O
p1 _ _ O
’s _ _ O
PCB _ _ O
be _ _ O
copied _ _ O
to _ _ O
p3 _ _ O
, _ _ O
which _ _ O
means _ _ O
the _ _ O
content _ _ O
of _ _ O
p0 _ _ O
’s _ _ O
pcb _ _ O
will _ _ O
be _ _ O
in _ _ O
p3 _ _ O
too _ _ O
? _ _ O
• _ _ O
What _ _ O
is _ _ O
a _ _ O
PID _ _ O
and _ _ O
how _ _ O
is _ _ O
it _ _ O
related _ _ O
to _ _ O
the _ _ O
return _ _ O
value _ _ O
of _ _ O
fork _ _ O
( _ _ O
) _ _ O
? _ _ O
• _ _ O
P3 _ _ O
is _ _ O
forked _ _ O
and _ _ O
created _ _ O
before _ _ O
P2 _ _ O
so _ _ O
why _ _ O
is _ _ O
it _ _ O
named _ _ O
P2 _ _ O
? _ _ O
Is _ _ O
it _ _ O
simply _ _ O
renamed _ _ O
after _ _ O
P1 _ _ O
gets _ _ O
forked _ _ O
again _ _ O
? _ _ O
• _ _ O
Is _ _ O
the _ _ O
order _ _ O
of _ _ O
possible _ _ O
outcomes _ _ O
from _ _ O
a _ _ O
forking _ _ O
program _ _ O
the _ _ O
permutation _ _ O
of _ _ O
any _ _ O
of _ _ O
the _ _ O
leaf _ _ O
nodes _ _ O
from _ _ O
a _ _ O
forking _ _ O
tree _ _ O
? _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
9 _ _ O

fork _ _ O
( _ _ O
) _ _ O
’s _ _ O
of _ _ O
fork _ _ O
( _ _ O
) _ _ O
’s _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
10 _ _ O

Muddiest _ _ O
Points _ _ O
( _ _ O
forking _ _ O
2 _ _ O
) _ _ O
• _ _ O
does _ _ O
the _ _ O
fork _ _ O
return _ _ O
zero _ _ O
for _ _ O
all _ _ O
children _ _ O
? _ _ O
• _ _ O
Somewhat _ _ O
confused _ _ O
about _ _ O
what _ _ O
order _ _ O
the _ _ O
various _ _ O
forks _ _ O
will _ _ O
actually _ _ O
form _ _ O
. _ _ O
I _ _ O
see _ _ O
why _ _ O
and _ _ O
from _ _ O
where _ _ O
they _ _ O
form _ _ O
, _ _ O
but _ _ O
not _ _ O
how _ _ O
it _ _ O
decides _ _ O
which _ _ O
one _ _ O
to _ _ O
run _ _ O
• _ _ O
how _ _ O
are _ _ O
all _ _ O
processes _ _ O
a _ _ O
fork _ _ O
of _ _ O
another _ _ O
process _ _ O
? _ _ O
i _ _ O
know _ _ O
the _ _ O
root _ _ O
of _ _ O
the _ _ O
tree _ _ O
is _ _ O
another _ _ O
process _ _ O
in _ _ O
the _ _ O
OS _ _ O
, _ _ O
but _ _ O
i _ _ O
do _ _ O
n't _ _ O
get _ _ O
how _ _ O
for _ _ O
example _ _ O
a _ _ O
program _ _ O
you _ _ O
create _ _ O
and _ _ O
execute _ _ O
is _ _ O
a _ _ O
fork _ _ O
of _ _ O
something _ _ O
else _ _ O
. _ _ O
• _ _ O
the _ _ O
forking _ _ O
process _ _ O
with _ _ O
child _ _ O
processes _ _ O
. _ _ O
The _ _ O
relationship _ _ O
between _ _ O
the _ _ O
number _ _ O
of _ _ O
child _ _ O
processes _ _ O
created _ _ O
and _ _ O
the _ _ O
number _ _ O
of _ _ O
times _ _ O
fork _ _ O
( _ _ O
) _ _ O
is _ _ O
called _ _ O
by _ _ O
the _ _ O
parent _ _ O
process _ _ O
• _ _ O
what _ _ O
int _ _ O
fork _ _ O
returns _ _ O
for _ _ O
the _ _ O
child _ _ O
and _ _ O
parent _ _ O
process _ _ O
• _ _ O
practical _ _ O
uses _ _ O
of _ _ O
forking _ _ O
? _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
11 _ _ O

Today _ _ O
’s _ _ O
Problem _ _ O
/ _ _ O
Question _ _ O
How _ _ O
are _ _ O
processes _ _ O
created _ _ O
and _ _ O
terminated _ _ O
? _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
12 _ _ O

Process _ _ O
Lifecycle _ _ O
( _ _ O
AKA _ _ O
Process _ _ O
States _ _ O
) _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
13 _ _ O

Process _ _ O
Creation _ _ O
• _ _ O
Via _ _ O
fork _ _ O
( _ _ O
) _ _ O
syscall _ _ O
• _ _ O
Parent _ _ O
process _ _ O
: _ _ O
the _ _ O
process _ _ O
that _ _ O
calls _ _ O
fork _ _ O
( _ _ O
) _ _ O
• _ _ O
Child _ _ O
process _ _ O
: _ _ O
the _ _ O
process _ _ O
that _ _ O
gets _ _ O
created _ _ O
• _ _ O
Memory _ _ O
of _ _ O
parent _ _ O
process _ _ O
copied _ _ O
to _ _ O
child _ _ O
process _ _ O
• _ _ O
Too _ _ O
much _ _ O
copying _ _ O
• _ _ O
Even _ _ O
not _ _ O
necessary _ _ O
sometimes _ _ O
• _ _ O
e.g. _ _ O
, _ _ O
fork _ _ O
( _ _ O
) _ _ O
followed _ _ O
by _ _ O
exec _ _ O
( _ _ O
) _ _ O
to _ _ O
run _ _ O
a _ _ O
different _ _ O
program _ _ O
• _ _ O
Optimization _ _ O
trick _ _ O
: _ _ O
• _ _ O
copy-on-write _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
14 _ _ O

fork _ _ O
( _ _ O
) _ _ O
example _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
15 _ _ O

Process _ _ O
Termination _ _ O
• _ _ O
Via _ _ O
exit _ _ O
( _ _ O
) _ _ O
, _ _ O
abort _ _ O
( _ _ O
) _ _ O
, _ _ O
or _ _ O
kill _ _ O
( _ _ O
) _ _ O
syscalls _ _ O
• _ _ O
The _ _ O
parent _ _ O
process _ _ O
may _ _ O
wait _ _ O
for _ _ O
termination _ _ O
of _ _ O
a _ _ O
child _ _ O
process _ _ O
by _ _ O
using _ _ O
the _ _ O
wait _ _ O
( _ _ O
) _ _ O
system _ _ O
call.The _ _ O
call _ _ O
returns _ _ O
status _ _ O
information _ _ O
and _ _ O
the _ _ O
pid _ _ O
of _ _ O
the _ _ O
terminated _ _ O
process _ _ O
pid _ _ O
= _ _ O
wait _ _ O
( _ _ O
& _ _ O
status _ _ O
) _ _ O
; _ _ O
• _ _ O
When _ _ O
a _ _ O
process _ _ O
terminates _ _ O
• _ _ O
If _ _ O
no _ _ O
parent _ _ O
waiting _ _ O
( _ _ O
did _ _ O
not _ _ O
invoke _ _ O
wait _ _ O
( _ _ O
) _ _ O
) _ _ O
process _ _ O
is _ _ O
a _ _ O
zombie _ _ O
• _ _ O
If _ _ O
parent _ _ O
terminated _ _ O
without _ _ O
invoking _ _ O
wait _ _ O
, _ _ O
process _ _ O
is _ _ O
an _ _ O
orphan _ _ O
• _ _ O
adopted _ _ O
by _ _ O
the _ _ O
init _ _ O
process _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
16 _ _ O

Orphan _ _ O
vs. _ _ O
Zombie _ _ O
Processes _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
17 _ _ O

Benefits _ _ O
of _ _ O
Orphan _ _ O
Processes _ _ O
• _ _ O
Allow _ _ O
a _ _ O
long-running _ _ O
job _ _ O
to _ _ O
continue _ _ O
running _ _ O
even _ _ O
after _ _ O
session _ _ O
( _ _ O
e.g. _ _ O
, _ _ O
ssh _ _ O
connection _ _ O
) _ _ O
ends _ _ O
. _ _ O
• _ _ O
The _ _ O
nohup _ _ O
command _ _ O
does _ _ O
that _ _ O
• _ _ O
Create _ _ O
daemon _ _ O
processes _ _ O
• _ _ O
Long-running _ _ O
background _ _ O
processes _ _ O
adopted _ _ O
by _ _ O
the _ _ O
init _ _ O
process _ _ O
. _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
18 _ _ O

Thread _ _ O
Synchronization _ _ O
Synchronization _ _ O
issues _ _ O
apply _ _ O
to _ _ O
threads _ _ O
as _ _ O
well _ _ O
• _ _ O
Threads _ _ O
can _ _ O
share _ _ O
data _ _ O
easily _ _ O
( _ _ O
same _ _ O
address _ _ O
space _ _ O
) _ _ O
• _ _ O
Other _ _ O
two _ _ O
issues _ _ O
apply _ _ O
to _ _ O
threads _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
19 _ _ O

Process _ _ O
vs. _ _ O
Thread _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
20 _ _ O



