unlabeled|cs1550|lec09
-DOCSTART- -X- -X- O

Introduction _ _ O
to _ _ O
Operating _ _ O
Systems _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
Spring _ _ O
2022 _ _ O
Sherif _ _ O
Khattab _ _ O
ksm73@pitt.edu _ _ O
( _ _ O
Some _ _ O
slides _ _ O
are _ _ O
from _ _ O
Silberschatz _ _ O
, _ _ O
Galvin _ _ O
and _ _ O
Gagne _ _ O
© _ _ O
2013 _ _ O
) _ _ O

Announcements _ _ O
• _ _ O
Upcoming _ _ O
deadlines _ _ O
• _ _ O
Homework _ _ O
4 _ _ O
is _ _ O
due _ _ O
next _ _ O
Monday _ _ O
2 _ _ O
/ _ _ O
14 _ _ O
• _ _ O
Project _ _ O
1 _ _ O
due _ _ O
on _ _ O
2 _ _ O
/ _ _ O
18 _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
2 _ _ O

Previous _ _ O
lecture _ _ O
… _ _ O
• _ _ O
Readers-Writers _ _ O
problem _ _ O
• _ _ O
Semaphore _ _ O
solution _ _ O
• _ _ O
Condition _ _ O
Variable _ _ O
solution _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
3 _ _ O

Muddiest _ _ O
Points _ _ O
( _ _ O
Semaphores _ _ O
solution _ _ O
) _ _ O
• _ _ O
reader _ _ O
writer _ _ O
queue _ _ O
• _ _ O
Why _ _ O
the _ _ O
read _ _ O
section _ _ O
of _ _ O
the _ _ O
Reader _ _ O
code _ _ O
includes _ _ O
mutex.down _ _ O
( _ _ O
) _ _ O
. _ _ O
Why _ _ O
is _ _ O
it _ _ O
not _ _ O
included _ _ O
in _ _ O
the _ _ O
ReaderDone _ _ O
section _ _ O
? _ _ O
• _ _ O
Why _ _ O
mutex _ _ O
need _ _ O
to _ _ O
up _ _ O
and _ _ O
down _ _ O
two _ _ O
times _ _ O
? _ _ O
• _ _ O
I _ _ O
confused _ _ O
about _ _ O
finally _ _ O
which _ _ O
of _ _ O
writing _ _ O
or _ _ O
reading _ _ O
has _ _ O
priority _ _ O
? _ _ O
• _ _ O
Starting _ _ O
off _ _ O
the _ _ O
readers _ _ O
writers _ _ O
problem _ _ O
how _ _ O
do _ _ O
you _ _ O
know _ _ O
the _ _ O
amount _ _ O
of _ _ O
m _ _ O
, _ _ O
w _ _ O
, _ _ O
and _ _ O
nr _ _ O
? _ _ O
• _ _ O
could _ _ O
you _ _ O
reiterate _ _ O
the _ _ O
reasoning _ _ O
for _ _ O
why _ _ O
a _ _ O
mutex _ _ O
does _ _ O
n't _ _ O
work _ _ O
for _ _ O
the _ _ O
writing _ _ O
semaphore _ _ O
? _ _ O
I _ _ O
think _ _ O
I _ _ O
understood _ _ O
it _ _ O
but _ _ O
I _ _ O
just _ _ O
want _ _ O
to _ _ O
be _ _ O
sure _ _ O
• _ _ O
does _ _ O
writing _ _ O
start _ _ O
at _ _ O
0 _ _ O
or _ _ O
1 _ _ O
? _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
4 _ _ O

Muddiest _ _ O
Points _ _ O
( _ _ O
Condition _ _ O
Variable _ _ O
Solution _ _ O
) _ _ O
• _ _ O
Which _ _ O
solution _ _ O
is _ _ O
more _ _ O
optimal _ _ O
for _ _ O
the _ _ O
readers _ _ O
and _ _ O
writers _ _ O
problem _ _ O
... _ _ O
CV _ _ O
or _ _ O
semaphores _ _ O
? _ _ O
• _ _ O
Ideas _ _ O
for _ _ O
more _ _ O
efficient _ _ O
implementation _ _ O
of _ _ O
condition _ _ O
variable _ _ O
/ _ _ O
mutex _ _ O
code _ _ O
for _ _ O
reader _ _ O
/ _ _ O
writer _ _ O
problem _ _ O
• _ _ O
In _ _ O
the _ _ O
" _ _ O
real _ _ O
world _ _ O
" _ _ O
what _ _ O
is _ _ O
more _ _ O
commonly _ _ O
used _ _ O
, _ _ O
CV _ _ O
or _ _ O
semaphore _ _ O
? _ _ O
• _ _ O
can _ _ O
you _ _ O
post _ _ O
the _ _ O
cv _ _ O
example _ _ O
? _ _ O
• _ _ O
Why _ _ O
was _ _ O
the _ _ O
code _ _ O
at _ _ O
the _ _ O
end _ _ O
different _ _ O
from _ _ O
the _ _ O
code _ _ O
we _ _ O
went _ _ O
over _ _ O
during _ _ O
lecture _ _ O
? _ _ O
• _ _ O
Understanding _ _ O
when _ _ O
a _ _ O
reader _ _ O
or _ _ O
writer _ _ O
is _ _ O
asked _ _ O
to _ _ O
wait _ _ O
! _ _ O
• _ _ O
Does _ _ O
the _ _ O
last _ _ O
example _ _ O
of _ _ O
the _ _ O
code _ _ O
in _ _ O
class _ _ O
prevent _ _ O
starvation _ _ O
of _ _ O
writers _ _ O
? _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
5 _ _ O

Muddiest _ _ O
Points _ _ O
( _ _ O
misc _ _ O
. _ _ O
) _ _ O
• _ _ O
Can _ _ O
you _ _ O
expand _ _ O
on _ _ O
project _ _ O
1 _ _ O
's _ _ O
writeup _ _ O
? _ _ O
• _ _ O
I _ _ O
was _ _ O
confused _ _ O
on _ _ O
the _ _ O
producer _ _ O
consumer _ _ O
buffer _ _ O
and _ _ O
how _ _ O
the _ _ O
producers _ _ O
go _ _ O
to _ _ O
sleep _ _ O
when _ _ O
waiting _ _ O
to _ _ O
enter _ _ O
. _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
6 _ _ O

Problem _ _ O
of _ _ O
the _ _ O
Day _ _ O
• _ _ O
• _ _ O
Dining _ _ O
Philosophers _ _ O
N _ _ O
philosophers _ _ O
around _ _ O
a _ _ O
table _ _ O
• _ _ O
All _ _ O
are _ _ O
hungry _ _ O
• _ _ O
All _ _ O
like _ _ O
to _ _ O
think _ _ O
N _ _ O
chopsticks _ _ O
available _ _ O
• _ _ O
1 _ _ O
between _ _ O
each _ _ O
pair _ _ O
of _ _ O
philosophers _ _ O
• _ _ O
Philosophers _ _ O
need _ _ O
two _ _ O
chopsticks _ _ O
to _ _ O
eat _ _ O
• _ _ O
Philosophers _ _ O
alternate _ _ O
between _ _ O
eating _ _ O
and _ _ O
thinking _ _ O
• _ _ O
Goal _ _ O
: _ _ O
coordinate _ _ O
use _ _ O
of _ _ O
chopsticks _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
7 _ _ O

Dining _ _ O
Philosophers _ _ O
: _ _ O
solution _ _ O
1 _ _ O
• _ _ O
Use _ _ O
a _ _ O
semaphore _ _ O
for _ _ O
each _ _ O
chopstick _ _ O
• _ _ O
A _ _ O
hungry _ _ O
philosopher _ _ O
• _ _ O
Gets _ _ O
the _ _ O
chopstick _ _ O
to _ _ O
his _ _ O
left _ _ O
Shared _ _ O
variables _ _ O
• _ _ O
Gets _ _ O
the _ _ O
chopstick _ _ O
to _ _ O
his _ _ O
right _ _ O
• _ _ O
Eats _ _ O
const _ _ O
int _ _ O
n _ _ O
; _ _ O
/ _ _ O
/ _ _ O
initialize _ _ O
to _ _ O
1 _ _ O
Semaphore _ _ O
chopstick _ _ O
[ _ _ O
n _ _ O
] _ _ O
; _ _ O
• _ _ O
Puts _ _ O
down _ _ O
the _ _ O
chopsticks _ _ O
• _ _ O
Potential _ _ O
problems _ _ O
? _ _ O
• _ _ O
Deadlock _ _ O
• _ _ O
Fairness _ _ O
Code _ _ O
for _ _ O
philosopher _ _ O
i _ _ O
while _ _ O
( _ _ O
1 _ _ O
) _ _ O
{ _ _ O
chopstick _ _ O
[ _ _ O
i _ _ O
] _ _ O
.down _ _ O
( _ _ O
) _ _ O
; _ _ O
chopstick _ _ O
[ _ _ O
( _ _ O
i+1 _ _ O
) _ _ O
%n _ _ O
] _ _ O
.down _ _ O
( _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
eat _ _ O
chopstick _ _ O
[ _ _ O
i _ _ O
] _ _ O
.up _ _ O
( _ _ O
) _ _ O
; _ _ O
chopstick _ _ O
[ _ _ O
( _ _ O
i+1 _ _ O
) _ _ O
%n _ _ O
] _ _ O
.up _ _ O
( _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
think _ _ O
} _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
8 _ _ O

Tracing _ _ O
: _ _ O
Sequence _ _ O
1 _ _ O
• _ _ O
P0 _ _ O
picks _ _ O
left _ _ O
• _ _ O
P0 _ _ O
picks _ _ O
right _ _ O
• _ _ O
P3 _ _ O
picks _ _ O
left _ _ O
• _ _ O
P3 _ _ O
picks _ _ O
right _ _ O
• _ _ O
P3 _ _ O
eats _ _ O
• _ _ O
P0 _ _ O
eats _ _ O
• _ _ O
P3 _ _ O
puts _ _ O
down _ _ O
• _ _ O
P0 _ _ O
puts _ _ O
down _ _ O
Shared _ _ O
variables _ _ O
const _ _ O
int _ _ O
n _ _ O
; _ _ O
/ _ _ O
/ _ _ O
initialize _ _ O
to _ _ O
1 _ _ O
Semaphore _ _ O
chopstick _ _ O
[ _ _ O
n _ _ O
] _ _ O
; _ _ O
Code _ _ O
for _ _ O
philosopher _ _ O
i _ _ O
while _ _ O
( _ _ O
1 _ _ O
) _ _ O
{ _ _ O
chopstick _ _ O
[ _ _ O
i _ _ O
] _ _ O
.down _ _ O
( _ _ O
) _ _ O
; _ _ O
chopstick _ _ O
[ _ _ O
( _ _ O
i+1 _ _ O
) _ _ O
%n _ _ O
] _ _ O
.down _ _ O
( _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
eat _ _ O
chopstick _ _ O
[ _ _ O
i _ _ O
] _ _ O
.up _ _ O
( _ _ O
) _ _ O
; _ _ O
chopstick _ _ O
[ _ _ O
( _ _ O
i+1 _ _ O
) _ _ O
%n _ _ O
] _ _ O
.up _ _ O
( _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
think _ _ O
} _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
9 _ _ O

Tracing _ _ O
: _ _ O
Sequence _ _ O
2 _ _ O
• _ _ O
for _ _ O
( _ _ O
i=0 _ _ O
; _ _ O
i _ _ O
< _ _ O
6 _ _ O
; _ _ O
i++ _ _ O
) _ _ O
• _ _ O
Pi _ _ O
picks _ _ O
left _ _ O
• _ _ O
P3 _ _ O
eats _ _ O
• _ _ O
P0 _ _ O
eats _ _ O
• _ _ O
P3 _ _ O
puts _ _ O
down _ _ O
• _ _ O
P0 _ _ O
puts _ _ O
down _ _ O
Shared _ _ O
variables _ _ O
const _ _ O
int _ _ O
n _ _ O
; _ _ O
/ _ _ O
/ _ _ O
initialize _ _ O
to _ _ O
1 _ _ O
Semaphore _ _ O
chopstick _ _ O
[ _ _ O
n _ _ O
] _ _ O
; _ _ O
Code _ _ O
for _ _ O
philosopher _ _ O
i _ _ O
while _ _ O
( _ _ O
1 _ _ O
) _ _ O
{ _ _ O
chopstick _ _ O
[ _ _ O
i _ _ O
] _ _ O
.down _ _ O
( _ _ O
) _ _ O
; _ _ O
chopstick _ _ O
[ _ _ O
( _ _ O
i+1 _ _ O
) _ _ O
%n _ _ O
] _ _ O
.down _ _ O
( _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
eat _ _ O
chopstick _ _ O
[ _ _ O
i _ _ O
] _ _ O
.up _ _ O
( _ _ O
) _ _ O
; _ _ O
chopstick _ _ O
[ _ _ O
( _ _ O
i+1 _ _ O
) _ _ O
%n _ _ O
] _ _ O
.up _ _ O
( _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
think _ _ O
} _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
10 _ _ O

What _ _ O
is _ _ O
a _ _ O
deadlock _ _ O
? _ _ O
• _ _ O
Formal _ _ O
definition _ _ O
: _ _ O
“ _ _ O
A _ _ O
set _ _ O
of _ _ O
processes _ _ O
is _ _ O
deadlocked _ _ O
if _ _ O
each _ _ O
process _ _ O
in _ _ O
the _ _ O
set _ _ O
is _ _ O
waiting _ _ O
for _ _ O
an _ _ O
event _ _ O
that _ _ O
only _ _ O
another _ _ O
process _ _ O
in _ _ O
the _ _ O
set _ _ O
can _ _ O
cause _ _ O
. _ _ O
” _ _ O
• _ _ O
Usually _ _ O
, _ _ O
the _ _ O
event _ _ O
is _ _ O
release _ _ O
of _ _ O
a _ _ O
currently _ _ O
held _ _ O
resource _ _ O
• _ _ O
In _ _ O
deadlock _ _ O
, _ _ O
none _ _ O
of _ _ O
the _ _ O
processes _ _ O
can _ _ O
• _ _ O
Run _ _ O
• _ _ O
Release _ _ O
resources _ _ O
• _ _ O
Be _ _ O
awakened _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
11 _ _ O

How _ _ O
to _ _ O
solve _ _ O
the _ _ O
Deadlock _ _ O
problem _ _ O
? _ _ O
• _ _ O
Ignore _ _ O
the _ _ O
problem _ _ O
• _ _ O
Detect _ _ O
and _ _ O
react _ _ O
• _ _ O
Prevent _ _ O
( _ _ O
intervene _ _ O
at _ _ O
design-time _ _ O
) _ _ O
• _ _ O
Avoid _ _ O
( _ _ O
intervene _ _ O
at _ _ O
run-time _ _ O
) _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
12 _ _ O

The _ _ O
Ostrich _ _ O
Algorithm _ _ O
• _ _ O
Pretend _ _ O
there _ _ O
’s _ _ O
no _ _ O
problem _ _ O
• _ _ O
Reasonable _ _ O
if _ _ O
• _ _ O
Deadlocks _ _ O
occur _ _ O
very _ _ O
rarely _ _ O
• _ _ O
Cost _ _ O
of _ _ O
prevention _ _ O
is _ _ O
high _ _ O
• _ _ O
UNIX _ _ O
and _ _ O
Windows _ _ O
take _ _ O
this _ _ O
approach _ _ O
• _ _ O
Resources _ _ O
( _ _ O
memory _ _ O
, _ _ O
CPU _ _ O
, _ _ O
disk _ _ O
space _ _ O
) _ _ O
are _ _ O
plentiful _ _ O
• _ _ O
Deadlocks _ _ O
over _ _ O
such _ _ O
resources _ _ O
rarely _ _ O
occur _ _ O
• _ _ O
Deadlocks _ _ O
typically _ _ O
handled _ _ O
by _ _ O
rebooting _ _ O
• _ _ O
Trade _ _ O
off _ _ O
between _ _ O
convenience _ _ O
and _ _ O
correctness _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
13 _ _ O

Deadlock _ _ O
Detection _ _ O
How _ _ O
can _ _ O
the _ _ O
OS _ _ O
detect _ _ O
a _ _ O
deadlock _ _ O
? _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
14 _ _ O

• _ _ O
• _ _ O
• _ _ O
• _ _ O
Resource _ _ O
allocation _ _ O
graphs _ _ O
Resource _ _ O
allocation _ _ O
modeled _ _ O
by _ _ O
directed _ _ O
graphs _ _ O
A _ _ O
Example _ _ O
1 _ _ O
: _ _ O
• _ _ O
R _ _ O
Resource _ _ O
R _ _ O
assigned _ _ O
to _ _ O
process _ _ O
A _ _ O
B _ _ O
Example _ _ O
2 _ _ O
: _ _ O
• _ _ O
Process _ _ O
B _ _ O
is _ _ O
requesting _ _ O
/ _ _ O
waiting _ _ O
for _ _ O
resource _ _ O
S _ _ O
S _ _ O
Example _ _ O
3 _ _ O
: _ _ O
• _ _ O
Process _ _ O
C _ _ O
holds _ _ O
T _ _ O
, _ _ O
waiting _ _ O
for _ _ O
U _ _ O
• _ _ O
Process _ _ O
D _ _ O
holds _ _ O
U _ _ O
, _ _ O
waiting _ _ O
for _ _ O
T _ _ O
• _ _ O
C _ _ O
and _ _ O
D _ _ O
are _ _ O
in _ _ O
deadlock _ _ O
! _ _ O
T _ _ O
C _ _ O
D _ _ O
U _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
15 _ _ O

Deadlock _ _ O
Prevention _ _ O
How _ _ O
an _ _ O
application _ _ O
/ _ _ O
system _ _ O
designer _ _ O
prevent _ _ O
deadlocks _ _ O
? _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
16 _ _ O

Dining _ _ O
Philosophers _ _ O
: _ _ O
solution _ _ O
2 _ _ O
• _ _ O
Use _ _ O
a _ _ O
semaphore _ _ O
for _ _ O
each _ _ O
chopstick _ _ O
• _ _ O
A _ _ O
hungry _ _ O
philosopher _ _ O
Code _ _ O
for _ _ O
philosopher _ _ O
i _ _ O
• _ _ O
Gets _ _ O
lower _ _ O
, _ _ O
then _ _ O
higher _ _ O
numbered _ _ O
chopstick _ _ O
• _ _ O
Eats _ _ O
• _ _ O
Puts _ _ O
down _ _ O
the _ _ O
chopsticks _ _ O
int _ _ O
i1 _ _ O
, _ _ O
i2 _ _ O
; _ _ O
while _ _ O
( _ _ O
1 _ _ O
) _ _ O
{ _ _ O
if _ _ O
( _ _ O
i _ _ O
! _ _ O
= _ _ O
( _ _ O
n-1 _ _ O
) _ _ O
) _ _ O
{ _ _ O
i1 _ _ O
= _ _ O
i _ _ O
; _ _ O
i2 _ _ O
= _ _ O
i+1 _ _ O
; _ _ O
} _ _ O
else _ _ O
{ _ _ O
i1 _ _ O
= _ _ O
0 _ _ O
; _ _ O
i2 _ _ O
= _ _ O
n-1 _ _ O
; _ _ O
} _ _ O
chopstick _ _ O
[ _ _ O
i1 _ _ O
] _ _ O
.down _ _ O
( _ _ O
) _ _ O
; _ _ O
chopstick _ _ O
[ _ _ O
i2 _ _ O
] _ _ O
.down _ _ O
( _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
eat _ _ O
chopstick _ _ O
[ _ _ O
i1 _ _ O
] _ _ O
.up _ _ O
( _ _ O
) _ _ O
; _ _ O
chopstick _ _ O
[ _ _ O
i2 _ _ O
] _ _ O
.up _ _ O
( _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
think _ _ O
} _ _ O
• _ _ O
Potential _ _ O
problems _ _ O
? _ _ O
• _ _ O
Deadlock _ _ O
• _ _ O
Fairness _ _ O
Shared _ _ O
variables _ _ O
const _ _ O
int _ _ O
n _ _ O
; _ _ O
/ _ _ O
/ _ _ O
initialize _ _ O
to _ _ O
1 _ _ O
Semaphore _ _ O
chopstick _ _ O
[ _ _ O
n _ _ O
] _ _ O
; _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
17 _ _ O

Deadlock _ _ O
Avoidance _ _ O
How _ _ O
can _ _ O
the _ _ O
OS _ _ O
intervene _ _ O
at _ _ O
run-time _ _ O
to _ _ O
avoid _ _ O
deadlocks _ _ O
? _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
18 _ _ O

Deadlock _ _ O
detection _ _ O
algorithm _ _ O
1 _ _ O
3 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
2 _ _ O
2 _ _ O
2 _ _ O
0 _ _ O
0 _ _ O
3 _ _ O
3 _ _ O
5 _ _ O
3 _ _ O
1 _ _ O
current=avail _ _ O
; _ _ O
for _ _ O
( _ _ O
j _ _ O
= _ _ O
0 _ _ O
; _ _ O
j _ _ O
< _ _ O
N _ _ O
; _ _ O
j++ _ _ O
) _ _ O
{ _ _ O
for _ _ O
( _ _ O
k=0 _ _ O
; _ _ O
k _ _ O
< _ _ O
N _ _ O
; _ _ O
k++ _ _ O
) _ _ O
{ _ _ O
if _ _ O
( _ _ O
finished _ _ O
[ _ _ O
k _ _ O
] _ _ O
) _ _ O
continue _ _ O
; _ _ O
if _ _ O
( _ _ O
want _ _ O
[ _ _ O
k _ _ O
] _ _ O
< _ _ O
= _ _ O
current _ _ O
) _ _ O
{ _ _ O
finished _ _ O
[ _ _ O
k _ _ O
] _ _ O
= _ _ O
1 _ _ O
; _ _ O
current _ _ O
+ _ _ O
= _ _ O
hold _ _ O
[ _ _ O
k _ _ O
] _ _ O
; _ _ O
break _ _ O
; _ _ O
} _ _ O
} _ _ O
if _ _ O
( _ _ O
k==N _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
reached _ _ O
end _ _ O
of _ _ O
loop _ _ O
printf _ _ O
“ _ _ O
Deadlock _ _ O
! _ _ O
\n _ _ O
” _ _ O
; _ _ O
/ _ _ O
/ _ _ O
finished _ _ O
[ _ _ O
k _ _ O
] _ _ O
==0 _ _ O
means _ _ O
process _ _ O
is _ _ O
in _ _ O
/ _ _ O
/ _ _ O
the _ _ O
deadlock _ _ O
break _ _ O
; _ _ O
} _ _ O
} _ _ O
4 _ _ O
0 _ _ O
4 _ _ O
1 _ _ O
1 _ _ O
Note _ _ O
: _ _ O
want _ _ O
[ _ _ O
j _ _ O
] _ _ O
, _ _ O
hold _ _ O
[ _ _ O
j _ _ O
] _ _ O
, _ _ O
current _ _ O
, _ _ O
avail _ _ O
are _ _ O
arrays _ _ O
! _ _ O
A _ _ O
B _ _ O
C _ _ O
D _ _ O
Avail _ _ O
2 _ _ O
3 _ _ O
0 _ _ O
1 _ _ O
Hold _ _ O
Process _ _ O
A _ _ O
B _ _ O
C _ _ O
D _ _ O
1 _ _ O
0 _ _ O
3 _ _ O
0 _ _ O
0 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
1 _ _ O
1 _ _ O
3 _ _ O
0 _ _ O
2 _ _ O
1 _ _ O
0 _ _ O
4 _ _ O
2 _ _ O
2 _ _ O
3 _ _ O
0 _ _ O
Want _ _ O
Process _ _ O
A _ _ O
B _ _ O
C _ _ O
D _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O



