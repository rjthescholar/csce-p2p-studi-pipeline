unlabeled|cs1550|lec14
-DOCSTART- -X- -X- O

Introduction _ _ O
to _ _ O
Operating _ _ O
Systems _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
Fall _ _ O
2021 _ _ O
Sherif _ _ O
Khattab _ _ O
ksm73@pitt.edu _ _ O
( _ _ O
Some _ _ O
slides _ _ O
are _ _ O
from _ _ O
Silberschatz _ _ O
, _ _ O
Galvin _ _ O
and _ _ O
Gagne _ _ O
© _ _ O
2013 _ _ O
) _ _ O

Announcements _ _ O
• _ _ O
Upcoming _ _ O
deadlines _ _ O
: _ _ O
• _ _ O
Homework _ _ O
7 _ _ O
: _ _ O
due _ _ O
on _ _ O
3 _ _ O
/ _ _ O
14 _ _ O
• _ _ O
Homework _ _ O
8 _ _ O
: _ _ O
due _ _ O
on _ _ O
3 _ _ O
/ _ _ O
21 _ _ O
• _ _ O
Project _ _ O
2 _ _ O
: _ _ O
due _ _ O
on _ _ O
3 _ _ O
/ _ _ O
18 _ _ O
• _ _ O
Midterm _ _ O
exam _ _ O
on _ _ O
Thursday _ _ O
3 _ _ O
/ _ _ O
3 _ _ O
• _ _ O
In-person _ _ O
, _ _ O
on _ _ O
paper _ _ O
, _ _ O
closed _ _ O
book _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
2 _ _ O

Previous _ _ O
lecture _ _ O
… _ _ O
• _ _ O
CPU _ _ O
scheduling _ _ O
• _ _ O
Multi-level _ _ O
Feedback _ _ O
Queues _ _ O
• _ _ O
Service _ _ O
time _ _ O
estimation _ _ O
for _ _ O
SJF _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
3 _ _ O

Muddiest _ _ O
Points _ _ O
( _ _ O
multi-level _ _ O
feedback _ _ O
queue _ _ O
) _ _ O
• _ _ O
in _ _ O
multilevel _ _ O
scheduling _ _ O
, _ _ O
do _ _ O
processes _ _ O
in _ _ O
the _ _ O
lower _ _ O
priority _ _ O
ready _ _ O
queues _ _ O
need _ _ O
to _ _ O
wait _ _ O
for _ _ O
every _ _ O
higher _ _ O
priority _ _ O
ready _ _ O
queue _ _ O
to _ _ O
be _ _ O
empty _ _ O
? _ _ O
• _ _ O
How _ _ O
many _ _ O
queues _ _ O
would _ _ O
there _ _ O
realistically _ _ O
be _ _ O
using _ _ O
Multilevel _ _ O
feedback _ _ O
scheduling _ _ O
? _ _ O
• _ _ O
I _ _ O
need _ _ O
some _ _ O
time _ _ O
to _ _ O
build _ _ O
an _ _ O
intuition _ _ O
for _ _ O
why _ _ O
the _ _ O
Multilevel _ _ O
Feedback _ _ O
Scheduling _ _ O
is _ _ O
good _ _ O
. _ _ O
• _ _ O
The _ _ O
most _ _ O
muddy _ _ O
was _ _ O
how _ _ O
the _ _ O
MFS _ _ O
has _ _ O
absolute _ _ O
priority _ _ O
. _ _ O
• _ _ O
In _ _ O
multilevel _ _ O
feedback _ _ O
scheduling _ _ O
, _ _ O
is _ _ O
the _ _ O
number _ _ O
of _ _ O
priority _ _ O
queues _ _ O
pre-set _ _ O
or _ _ O
is _ _ O
each _ _ O
queue _ _ O
generated _ _ O
dynamically _ _ O
? _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
4 _ _ O

Muddiest _ _ O
Points _ _ O
( _ _ O
exponential _ _ O
averaging _ _ O
) _ _ O
• _ _ O
The _ _ O
graphs _ _ O
for _ _ O
CPU _ _ O
Burst _ _ O
Exponential _ _ O
estimation _ _ O
• _ _ O
Could _ _ O
you _ _ O
please _ _ O
explain _ _ O
why _ _ O
changing _ _ O
the _ _ O
value _ _ O
of _ _ O
alpha _ _ O
weights _ _ O
more _ _ O
recent _ _ O
/ _ _ O
older _ _ O
observations _ _ O
? _ _ O
• _ _ O
determining _ _ O
or _ _ O
choosing _ _ O
the _ _ O
alpha _ _ O
value _ _ O
• _ _ O
what _ _ O
does _ _ O
exponential _ _ O
average _ _ O
reflect _ _ O
• _ _ O
Does _ _ O
S _ _ O
mean _ _ O
the _ _ O
all _ _ O
previous _ _ O
estimate _ _ O
? _ _ O
What _ _ O
is _ _ O
the _ _ O
difference _ _ O
between _ _ O
the _ _ O
most _ _ O
recent _ _ O
and _ _ O
S _ _ O
[ _ _ O
n _ _ O
] _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
5 _ _ O

Muddiest _ _ O
Points _ _ O
( _ _ O
misc _ _ O
. _ _ O
) _ _ O
• _ _ O
CPU _ _ O
Burst _ _ O
vs _ _ O
Quantum _ _ O
vs _ _ O
Time _ _ O
Slice _ _ O
? _ _ O
• _ _ O
The _ _ O
whole _ _ O
lecture _ _ O
• _ _ O
active _ _ O
time _ _ O
in _ _ O
the _ _ O
scheduler _ _ O
• _ _ O
Everything _ _ O
is _ _ O
clear _ _ O
• _ _ O
Nothing _ _ O
felt _ _ O
good _ _ O
. _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
6 _ _ O

In _ _ O
an _ _ O
ideal _ _ O
world _ _ O
… _ _ O
◼ _ _ O
The _ _ O
ideal _ _ O
world _ _ O
has _ _ O
memory _ _ O
that _ _ O
is _ _ O
Very _ _ O
large _ _ O
◼ _ _ O
Very _ _ O
fast _ _ O
◼ _ _ O
Non-volatile _ _ O
( _ _ O
does _ _ O
n’t _ _ O
go _ _ O
away _ _ O
when _ _ O
power _ _ O
is _ _ O
turned _ _ O
off _ _ O
) _ _ O
◼ _ _ O
◼ _ _ O
The _ _ O
real _ _ O
world _ _ O
has _ _ O
memory _ _ O
that _ _ O
is _ _ O
: _ _ O
Very _ _ O
large _ _ O
◼ _ _ O
Very _ _ O
fast _ _ O
◼ _ _ O
Affordable _ _ O
! _ _ O
Pick _ _ O
any _ _ O
two _ _ O
… _ _ O
◼ _ _ O
◼ _ _ O
Memory _ _ O
management _ _ O
goal _ _ O
: _ _ O
make _ _ O
the _ _ O
real _ _ O
world _ _ O
look _ _ O
as _ _ O
much _ _ O
like _ _ O
the _ _ O
ideal _ _ O
world _ _ O
as _ _ O
possible _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
7 _ _ O

Memory _ _ O
hierarchy _ _ O
◼ _ _ O
What _ _ O
is _ _ O
the _ _ O
memory _ _ O
hierarchy _ _ O
? _ _ O
Different _ _ O
levels _ _ O
of _ _ O
memory _ _ O
◼ _ _ O
Some _ _ O
are _ _ O
small _ _ O
& _ _ O
fast _ _ O
◼ _ _ O
Others _ _ O
are _ _ O
large _ _ O
& _ _ O
slow _ _ O
◼ _ _ O
◼ _ _ O
What _ _ O
levels _ _ O
are _ _ O
usually _ _ O
included _ _ O
? _ _ O
◼ _ _ O
Cache _ _ O
: _ _ O
small _ _ O
amount _ _ O
of _ _ O
fast _ _ O
, _ _ O
expensive _ _ O
memory _ _ O
L1 _ _ O
( _ _ O
level _ _ O
1 _ _ O
) _ _ O
cache _ _ O
: _ _ O
usually _ _ O
on _ _ O
the _ _ O
CPU _ _ O
chip _ _ O
◼ _ _ O
L2 _ _ O
& _ _ O
L3 _ _ O
cache _ _ O
: _ _ O
off-chip _ _ O
, _ _ O
made _ _ O
of _ _ O
SRAM _ _ O
◼ _ _ O
Main _ _ O
memory _ _ O
: _ _ O
medium-speed _ _ O
, _ _ O
medium _ _ O
price _ _ O
memory _ _ O
( _ _ O
DRAM _ _ O
) _ _ O
◼ _ _ O
Disk _ _ O
: _ _ O
many _ _ O
gigabytes _ _ O
of _ _ O
slow _ _ O
, _ _ O
cheap _ _ O
, _ _ O
non-volatile _ _ O
storage _ _ O
◼ _ _ O
◼ _ _ O
Memory _ _ O
manager _ _ O
handles _ _ O
the _ _ O
memory _ _ O
hierarchy _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
8 _ _ O

Problem _ _ O
of _ _ O
the _ _ O
Day _ _ O
How _ _ O
can _ _ O
we _ _ O
share _ _ O
computer _ _ O
’s _ _ O
memory _ _ O
between _ _ O
multiple _ _ O
processes _ _ O
? _ _ O
How _ _ O
can _ _ O
we _ _ O
protect _ _ O
each _ _ O
process _ _ O
’s _ _ O
memory _ _ O
partition _ _ O
from _ _ O
other _ _ O
processes _ _ O
? _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
9 _ _ O

How _ _ O
many _ _ O
programs _ _ O
is _ _ O
enough _ _ O
? _ _ O
Several _ _ O
memory _ _ O
partitions _ _ O
( _ _ O
fixed _ _ O
or _ _ O
variable _ _ O
size _ _ O
) _ _ O
◼ _ _ O
Lots _ _ O
of _ _ O
processes _ _ O
wanting _ _ O
to _ _ O
use _ _ O
the _ _ O
CPU _ _ O
◼ _ _ O
Tradeoff _ _ O
◼ _ _ O
More _ _ O
processes _ _ O
utilize _ _ O
the _ _ O
CPU _ _ O
better _ _ O
◼ _ _ O
Fewer _ _ O
processes _ _ O
use _ _ O
less _ _ O
memory _ _ O
( _ _ O
cheaper _ _ O
! _ _ O
) _ _ O
◼ _ _ O
◼ _ _ O
How _ _ O
many _ _ O
processes _ _ O
do _ _ O
we _ _ O
need _ _ O
to _ _ O
keep _ _ O
the _ _ O
CPU _ _ O
fully _ _ O
utilized _ _ O
? _ _ O
This _ _ O
will _ _ O
help _ _ O
determine _ _ O
how _ _ O
much _ _ O
memory _ _ O
we _ _ O
need _ _ O
◼ _ _ O
Is _ _ O
this _ _ O
still _ _ O
relevant _ _ O
with _ _ O
memory _ _ O
costing _ _ O
$ _ _ O
10 _ _ O
/ _ _ O
GB _ _ O
? _ _ O
◼ _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
10 _ _ O

Why _ _ O
do _ _ O
we _ _ O
need _ _ O
more _ _ O
processes _ _ O
? _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
11 _ _ O

Modeling _ _ O
multiprogramming _ _ O
◼ _ _ O
More _ _ O
I _ _ O
/ _ _ O
O _ _ O
wait _ _ O
means _ _ O
less _ _ O
processor _ _ O
utilization _ _ O
At _ _ O
20 _ _ O
% _ _ O
I _ _ O
/ _ _ O
O _ _ O
wait _ _ O
, _ _ O
3–4 _ _ O
processes _ _ O
fully _ _ O
utilize _ _ O
CPU _ _ O
◼ _ _ O
At _ _ O
80 _ _ O
% _ _ O
I _ _ O
/ _ _ O
O _ _ O
wait _ _ O
, _ _ O
even _ _ O
10 _ _ O
processes _ _ O
are _ _ O
n’t _ _ O
enough _ _ O
1 _ _ O
0.9 _ _ O
◼ _ _ O
0.7 _ _ O
CPU _ _ O
Utilization _ _ O
This _ _ O
means _ _ O
that _ _ O
the _ _ O
OS _ _ O
should _ _ O
have _ _ O
more _ _ O
processes _ _ O
if _ _ O
they _ _ O
’re _ _ O
I _ _ O
/ _ _ O
O _ _ O
bound _ _ O
◼ _ _ O
More _ _ O
processes _ _ O
= _ _ O
> _ _ O
memory _ _ O
management _ _ O
& _ _ O
protection _ _ O
more _ _ O
important _ _ O
! _ _ O
◼ _ _ O
0.8 _ _ O
0.6 _ _ O
0.5 _ _ O
0.4 _ _ O
0.3 _ _ O
0.2 _ _ O
0.1 _ _ O
0 _ _ O
0 _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
7 _ _ O
8 _ _ O
9 _ _ O
10 _ _ O
Degree _ _ O
of _ _ O
Multiprogramming _ _ O
80 _ _ O
% _ _ O
I _ _ O
/ _ _ O
O _ _ O
Wait _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
50 _ _ O
% _ _ O
I _ _ O
/ _ _ O
O _ _ O
Wait _ _ O
20 _ _ O
% _ _ O
I _ _ O
/ _ _ O
O _ _ O
Wait _ _ O
12 _ _ O

Basic _ _ O
memory _ _ O
management _ _ O
◼ _ _ O
Components _ _ O
include _ _ O
Operating _ _ O
system _ _ O
( _ _ O
perhaps _ _ O
with _ _ O
device _ _ O
drivers _ _ O
) _ _ O
◼ _ _ O
Single _ _ O
process _ _ O
◼ _ _ O
◼ _ _ O
Goal _ _ O
: _ _ O
lay _ _ O
these _ _ O
out _ _ O
in _ _ O
memory _ _ O
Memory _ _ O
protection _ _ O
may _ _ O
not _ _ O
be _ _ O
an _ _ O
issue _ _ O
( _ _ O
only _ _ O
one _ _ O
program _ _ O
) _ _ O
◼ _ _ O
Flexibility _ _ O
may _ _ O
still _ _ O
be _ _ O
useful _ _ O
( _ _ O
allow _ _ O
OS _ _ O
changes _ _ O
, _ _ O
etc _ _ O
. _ _ O
) _ _ O
◼ _ _ O
◼ _ _ O
No _ _ O
swapping _ _ O
or _ _ O
paging _ _ O
0xFFFF _ _ O
0xFFFF _ _ O
User _ _ O
program _ _ O
( _ _ O
RAM _ _ O
) _ _ O
0 _ _ O
Operating _ _ O
system _ _ O
( _ _ O
RAM _ _ O
) _ _ O
Operating _ _ O
system _ _ O
( _ _ O
ROM _ _ O
) _ _ O
User _ _ O
program _ _ O
( _ _ O
RAM _ _ O
) _ _ O
Device _ _ O
drivers _ _ O
( _ _ O
ROM _ _ O
) _ _ O
User _ _ O
program _ _ O
( _ _ O
RAM _ _ O
) _ _ O
Operating _ _ O
system _ _ O
( _ _ O
RAM _ _ O
) _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
0 _ _ O
13 _ _ O

Memory _ _ O
Management _ _ O
for _ _ O
Embedded _ _ O
Systems _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
14 _ _ O

Fixed _ _ O
partitions _ _ O
: _ _ O
multiple _ _ O
programs _ _ O
◼ _ _ O
Fixed _ _ O
memory _ _ O
partitions _ _ O
Divide _ _ O
memory _ _ O
into _ _ O
fixed _ _ O
spaces _ _ O
◼ _ _ O
Assign _ _ O
a _ _ O
process _ _ O
to _ _ O
a _ _ O
space _ _ O
when _ _ O
it _ _ O
’s _ _ O
free _ _ O
◼ _ _ O
◼ _ _ O
Mechanisms _ _ O
Separate _ _ O
input _ _ O
queues _ _ O
for _ _ O
each _ _ O
partition _ _ O
◼ _ _ O
Single _ _ O
input _ _ O
queue _ _ O
: _ _ O
better _ _ O
ability _ _ O
to _ _ O
optimize _ _ O
CPU _ _ O
usage _ _ O
◼ _ _ O
900 _ _ O
K _ _ O
Partition _ _ O
4 _ _ O
Partition _ _ O
3 _ _ O
Partition _ _ O
2 _ _ O
Partition _ _ O
4 _ _ O
700 _ _ O
K _ _ O
600 _ _ O
K _ _ O
500 _ _ O
K _ _ O
Partition _ _ O
1 _ _ O
OS _ _ O
900 _ _ O
K _ _ O
Partition _ _ O
3 _ _ O
Partition _ _ O
2 _ _ O
700 _ _ O
K _ _ O
600 _ _ O
K _ _ O
500 _ _ O
K _ _ O
Partition _ _ O
1 _ _ O
100 _ _ O
K _ _ O
0 _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
OS _ _ O
100 _ _ O
K _ _ O
0 _ _ O
15 _ _ O

Problem _ _ O
of _ _ O
the _ _ O
Day _ _ O
How _ _ O
can _ _ O
we _ _ O
share _ _ O
computer _ _ O
’s _ _ O
memory _ _ O
between _ _ O
multiple _ _ O
processes _ _ O
? _ _ O
How _ _ O
can _ _ O
we _ _ O
protect _ _ O
each _ _ O
process _ _ O
’s _ _ O
memory _ _ O
partition _ _ O
from _ _ O
other _ _ O
processes _ _ O
? _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
16 _ _ O

Base _ _ O
and _ _ O
limit _ _ O
registers _ _ O
◼ _ _ O
Special _ _ O
CPU _ _ O
registers _ _ O
: _ _ O
base _ _ O
& _ _ O
limit _ _ O
0xFFFF _ _ O
Access _ _ O
to _ _ O
the _ _ O
registers _ _ O
limited _ _ O
to _ _ O
kernel _ _ O
( _ _ O
privileged _ _ O
) _ _ O
mode _ _ O
◼ _ _ O
Registers _ _ O
contain _ _ O
0x2000 _ _ O
◼ _ _ O
Limit _ _ O
Process _ _ O
partition _ _ O
Base _ _ O
: _ _ O
start _ _ O
of _ _ O
the _ _ O
process _ _ O
’s _ _ O
memory _ _ O
partition _ _ O
◼ _ _ O
Limit _ _ O
: _ _ O
length _ _ O
of _ _ O
the _ _ O
process _ _ O
’s _ _ O
memory _ _ O
partition _ _ O
◼ _ _ O
◼ _ _ O
Base _ _ O
0x9000 _ _ O
Address _ _ O
generation _ _ O
Physical _ _ O
address _ _ O
: _ _ O
location _ _ O
in _ _ O
actual _ _ O
memory _ _ O
◼ _ _ O
Logical _ _ O
address _ _ O
: _ _ O
location _ _ O
from _ _ O
the _ _ O
process _ _ O
’s _ _ O
point _ _ O
of _ _ O
view _ _ O
◼ _ _ O
Physical _ _ O
address _ _ O
= _ _ O
base _ _ O
+ _ _ O
logical _ _ O
address _ _ O
◼ _ _ O
Logical _ _ O
address _ _ O
larger _ _ O
than _ _ O
limit _ _ O
= _ _ O
> _ _ O
error _ _ O
◼ _ _ O
OS _ _ O
0 _ _ O
Logical _ _ O
address _ _ O
: _ _ O
0x1204 _ _ O
Physical _ _ O
address _ _ O
: _ _ O
0x1204+0x9000 _ _ O
= _ _ O
0xa204 _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
17 _ _ O

Virtual _ _ O
and _ _ O
physical _ _ O
addresses _ _ O
◼ _ _ O
Addresses _ _ O
local _ _ O
to _ _ O
the _ _ O
process _ _ O
◼ _ _ O
Hardware _ _ O
translates _ _ O
virtual _ _ O
address _ _ O
to _ _ O
physical _ _ O
address _ _ O
◼ _ _ O
CPU _ _ O
chip _ _ O
CPU _ _ O
Program _ _ O
uses _ _ O
virtual _ _ O
addresses _ _ O
MMU _ _ O
◼ _ _ O
Virtual _ _ O
addresses _ _ O
from _ _ O
CPU _ _ O
to _ _ O
MMU _ _ O
Translation _ _ O
done _ _ O
by _ _ O
the _ _ O
Memory _ _ O
Management _ _ O
Unit _ _ O
Usually _ _ O
on _ _ O
the _ _ O
same _ _ O
chip _ _ O
as _ _ O
the _ _ O
CPU _ _ O
◼ _ _ O
Only _ _ O
physical _ _ O
addresses _ _ O
leave _ _ O
the _ _ O
CPU _ _ O
/ _ _ O
MMU _ _ O
chip _ _ O
◼ _ _ O
Memory _ _ O
◼ _ _ O
Physical _ _ O
addresses _ _ O
on _ _ O
bus _ _ O
, _ _ O
in _ _ O
memory _ _ O
Physical _ _ O
memory _ _ O
indexed _ _ O
by _ _ O
physical _ _ O
addresses _ _ O
Disk _ _ O
controller _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
18 _ _ O

Address _ _ O
Translation _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
19 _ _ O

Virtual _ _ O
memory _ _ O
Basic _ _ O
idea _ _ O
: _ _ O
allow _ _ O
the _ _ O
OS _ _ O
to _ _ O
hand _ _ O
out _ _ O
more _ _ O
memory _ _ O
than _ _ O
exists _ _ O
on _ _ O
the _ _ O
system _ _ O
◼ _ _ O
Keep _ _ O
recently _ _ O
used _ _ O
stuff _ _ O
in _ _ O
physical _ _ O
memory _ _ O
◼ _ _ O
Move _ _ O
less _ _ O
recently _ _ O
used _ _ O
stuff _ _ O
to _ _ O
disk _ _ O
◼ _ _ O
Keep _ _ O
all _ _ O
of _ _ O
this _ _ O
hidden _ _ O
from _ _ O
processes _ _ O
◼ _ _ O
Processes _ _ O
still _ _ O
see _ _ O
an _ _ O
address _ _ O
space _ _ O
from _ _ O
0 _ _ O
– _ _ O
max _ _ O
address _ _ O
◼ _ _ O
Movement _ _ O
of _ _ O
information _ _ O
to _ _ O
and _ _ O
from _ _ O
disk _ _ O
handled _ _ O
by _ _ O
the _ _ O
OS _ _ O
without _ _ O
process _ _ O
help _ _ O
◼ _ _ O
◼ _ _ O
Virtual _ _ O
memory _ _ O
( _ _ O
VM _ _ O
) _ _ O
especially _ _ O
helpful _ _ O
in _ _ O
multiprogrammed _ _ O
system _ _ O
◼ _ _ O
CPU _ _ O
schedules _ _ O
process _ _ O
B _ _ O
while _ _ O
process _ _ O
A _ _ O
waits _ _ O
for _ _ O
its _ _ O
memory _ _ O
to _ _ O
be _ _ O
retrieved _ _ O
from _ _ O
disk _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
20 _ _ O

Paging _ _ O
and _ _ O
page _ _ O
tables _ _ O
◼ _ _ O
Virtual _ _ O
addresses _ _ O
mapped _ _ O
to _ _ O
physical _ _ O
addresses _ _ O
◼ _ _ O
◼ _ _ O
◼ _ _ O
◼ _ _ O
Table _ _ O
translates _ _ O
virtual _ _ O
page _ _ O
number _ _ O
to _ _ O
physical _ _ O
page _ _ O
number _ _ O
◼ _ _ O
◼ _ _ O
◼ _ _ O
Unit _ _ O
of _ _ O
mapping _ _ O
is _ _ O
called _ _ O
a _ _ O
page _ _ O
All _ _ O
addresses _ _ O
in _ _ O
the _ _ O
same _ _ O
virtual _ _ O
page _ _ O
are _ _ O
in _ _ O
the _ _ O
same _ _ O
physical _ _ O
page _ _ O
Page _ _ O
table _ _ O
entry _ _ O
( _ _ O
PTE _ _ O
) _ _ O
contains _ _ O
translation _ _ O
for _ _ O
a _ _ O
single _ _ O
page _ _ O
Not _ _ O
all _ _ O
virtual _ _ O
memory _ _ O
has _ _ O
a _ _ O
physical _ _ O
page _ _ O
Not _ _ O
every _ _ O
physical _ _ O
page _ _ O
need _ _ O
be _ _ O
used _ _ O
Example _ _ O
: _ _ O
◼ _ _ O
◼ _ _ O
64 _ _ O
KB _ _ O
virtual _ _ O
memory _ _ O
32 _ _ O
KB _ _ O
physical _ _ O
memory _ _ O
60–64 _ _ O
K _ _ O
56–60 _ _ O
K _ _ O
52–56 _ _ O
K _ _ O
48–52 _ _ O
K _ _ O
44–48 _ _ O
K _ _ O
40–44 _ _ O
K _ _ O
36–40 _ _ O
K _ _ O
32–36 _ _ O
K _ _ O
28–32 _ _ O
K _ _ O
24–28 _ _ O
K _ _ O
20–24 _ _ O
K _ _ O
16–20 _ _ O
K _ _ O
12–16 _ _ O
K _ _ O
8–12 _ _ O
K _ _ O
4–8 _ _ O
K _ _ O
0–4 _ _ O
K _ _ O
- _ _ O
6 _ _ O
5 _ _ O
1 _ _ O
- _ _ O
3 _ _ O
0 _ _ O
4 _ _ O
7 _ _ O
Virtual _ _ O
address _ _ O
space _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
28–32 _ _ O
K _ _ O
24–28 _ _ O
K _ _ O
20–24 _ _ O
K _ _ O
16–20 _ _ O
K _ _ O
12–16 _ _ O
K _ _ O
8–12 _ _ O
K _ _ O
4–8 _ _ O
K _ _ O
0–4 _ _ O
K _ _ O
Physical _ _ O
memory _ _ O
21 _ _ O

What _ _ O
’s _ _ O
in _ _ O
a _ _ O
page _ _ O
table _ _ O
entry _ _ O
? _ _ O
◼ _ _ O
Each _ _ O
entry _ _ O
in _ _ O
the _ _ O
page _ _ O
table _ _ O
contains _ _ O
◼ _ _ O
Valid _ _ O
bit _ _ O
: _ _ O
set _ _ O
if _ _ O
this _ _ O
logical _ _ O
page _ _ O
number _ _ O
has _ _ O
a _ _ O
corresponding _ _ O
physical _ _ O
frame _ _ O
in _ _ O
memory _ _ O
◼ _ _ O
◼ _ _ O
◼ _ _ O
◼ _ _ O
◼ _ _ O
If _ _ O
not _ _ O
valid _ _ O
, _ _ O
remainder _ _ O
of _ _ O
PTE _ _ O
is _ _ O
irrelevant _ _ O
Page _ _ O
frame _ _ O
number _ _ O
: _ _ O
page _ _ O
in _ _ O
physical _ _ O
memory _ _ O
Referenced _ _ O
bit _ _ O
: _ _ O
set _ _ O
if _ _ O
data _ _ O
on _ _ O
the _ _ O
page _ _ O
has _ _ O
been _ _ O
accessed _ _ O
Dirty _ _ O
( _ _ O
modified _ _ O
) _ _ O
bit _ _ O
: _ _ O
set _ _ O
if _ _ O
data _ _ O
on _ _ O
the _ _ O
page _ _ O
has _ _ O
been _ _ O
modified _ _ O
Protection _ _ O
information _ _ O
Protection _ _ O
Dirty _ _ O
bit _ _ O
D _ _ O
R _ _ O
V _ _ O
Referenced _ _ O
bit _ _ O
Page _ _ O
frame _ _ O
number _ _ O
Valid _ _ O
bit _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
22 _ _ O

Implementing _ _ O
page _ _ O
tables _ _ O
in _ _ O
hardware _ _ O
Page _ _ O
table _ _ O
resides _ _ O
in _ _ O
main _ _ O
( _ _ O
physical _ _ O
) _ _ O
memory _ _ O
◼ _ _ O
CPU _ _ O
uses _ _ O
special _ _ O
registers _ _ O
for _ _ O
paging _ _ O
◼ _ _ O
Page _ _ O
table _ _ O
base _ _ O
register _ _ O
( _ _ O
PTBR _ _ O
) _ _ O
points _ _ O
to _ _ O
the _ _ O
page _ _ O
table _ _ O
◼ _ _ O
Page _ _ O
table _ _ O
length _ _ O
register _ _ O
( _ _ O
PTLR _ _ O
) _ _ O
contains _ _ O
length _ _ O
of _ _ O
page _ _ O
table _ _ O
: _ _ O
restricts _ _ O
maximum _ _ O
legal _ _ O
logical _ _ O
address _ _ O
◼ _ _ O
◼ _ _ O
Translating _ _ O
an _ _ O
address _ _ O
requires _ _ O
two _ _ O
memory _ _ O
accesses _ _ O
First _ _ O
access _ _ O
reads _ _ O
page _ _ O
table _ _ O
entry _ _ O
( _ _ O
PTE _ _ O
) _ _ O
◼ _ _ O
Second _ _ O
access _ _ O
reads _ _ O
the _ _ O
data _ _ O
/ _ _ O
instruction _ _ O
from _ _ O
memory _ _ O
◼ _ _ O
◼ _ _ O
Reduce _ _ O
number _ _ O
of _ _ O
memory _ _ O
accesses _ _ O
Ca _ _ O
n’t _ _ O
avoid _ _ O
second _ _ O
access _ _ O
( _ _ O
we _ _ O
need _ _ O
the _ _ O
value _ _ O
from _ _ O
memory _ _ O
) _ _ O
◼ _ _ O
Eliminate _ _ O
first _ _ O
access _ _ O
by _ _ O
keeping _ _ O
a _ _ O
hardware _ _ O
cache _ _ O
( _ _ O
called _ _ O
a _ _ O
translation _ _ O
lookaside _ _ O
buffer _ _ O
or _ _ O
TLB _ _ O
) _ _ O
of _ _ O
recently _ _ O
used _ _ O
page _ _ O
table _ _ O
entries _ _ O
◼ _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
23 _ _ O



