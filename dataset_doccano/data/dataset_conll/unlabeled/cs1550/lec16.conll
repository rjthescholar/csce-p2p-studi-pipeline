unlabeled|cs1550|lec16
-DOCSTART- -X- -X- O

Introduction _ _ O
to _ _ O
Operating _ _ O
Systems _ _ O
CS _ _ O
1550 _ _ O
Spring _ _ O
2022 _ _ O
Sherif _ _ O
Khattab _ _ O
ksm73@pitt.edu _ _ O
( _ _ O
Some _ _ O
slides _ _ O
are _ _ O
from _ _ O
Silberschatz _ _ O
, _ _ O
Galvin _ _ O
and _ _ O
Gagne _ _ O
© _ _ O
2013 _ _ O
) _ _ O

Announcements _ _ O
• _ _ O
Upcoming _ _ O
deadlines _ _ O
: _ _ O
• _ _ O
Project _ _ O
2 _ _ O
: _ _ O
due _ _ O
on _ _ O
3 _ _ O
/ _ _ O
18 _ _ O
• _ _ O
Homework _ _ O
8 _ _ O
: _ _ O
due _ _ O
on _ _ O
3 _ _ O
/ _ _ O
21 _ _ O
• _ _ O
Quiz _ _ O
2 _ _ O
: _ _ O
due _ _ O
on _ _ O
3 _ _ O
/ _ _ O
25 _ _ O
• _ _ O
Lab _ _ O
3 _ _ O
: _ _ O
due _ _ O
on _ _ O
4 _ _ O
/ _ _ O
1 _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
2 _ _ O

Previous _ _ O
Lecture _ _ O
… _ _ O
• _ _ O
Memory _ _ O
allocation _ _ O
and _ _ O
protection _ _ O
( _ _ O
Take _ _ O
II _ _ O
) _ _ O
• _ _ O
Virtual _ _ O
memory _ _ O
• _ _ O
Fixed-size _ _ O
pages _ _ O
, _ _ O
on-demand _ _ O
, _ _ O
appear _ _ O
as _ _ O
if _ _ O
having _ _ O
more _ _ O
memory _ _ O
that _ _ O
physically _ _ O
in _ _ O
the _ _ O
system _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
3 _ _ O

Problem _ _ O
of _ _ O
the _ _ O
Day _ _ O
• _ _ O
Page _ _ O
fault _ _ O
forces _ _ O
a _ _ O
choice _ _ O
• _ _ O
No _ _ O
room _ _ O
for _ _ O
new _ _ O
page _ _ O
( _ _ O
steady _ _ O
state _ _ O
) _ _ O
• _ _ O
A _ _ O
page _ _ O
must _ _ O
be _ _ O
removed _ _ O
to _ _ O
make _ _ O
room _ _ O
for _ _ O
an _ _ O
incoming _ _ O
page _ _ O
. _ _ O
• _ _ O
Which _ _ O
page _ _ O
to _ _ O
select _ _ O
? _ _ O
• _ _ O
Victim _ _ O
page _ _ O
• _ _ O
Evicted _ _ O
/ _ _ O
purged _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
4 _ _ O

Page _ _ O
replacement _ _ O
algorithms _ _ O
◼ _ _ O
How _ _ O
is _ _ O
a _ _ O
page _ _ O
removed _ _ O
from _ _ O
physical _ _ O
memory _ _ O
? _ _ O
If _ _ O
the _ _ O
page _ _ O
is _ _ O
unmodified _ _ O
, _ _ O
simply _ _ O
overwrite _ _ O
it _ _ O
: _ _ O
a _ _ O
copy _ _ O
already _ _ O
exists _ _ O
on _ _ O
disk _ _ O
◼ _ _ O
If _ _ O
the _ _ O
page _ _ O
has _ _ O
been _ _ O
modified _ _ O
, _ _ O
it _ _ O
must _ _ O
be _ _ O
written _ _ O
back _ _ O
to _ _ O
disk _ _ O
: _ _ O
prefer _ _ O
unmodified _ _ O
pages _ _ O
? _ _ O
◼ _ _ O
◼ _ _ O
Better _ _ O
not _ _ O
to _ _ O
choose _ _ O
an _ _ O
often _ _ O
used _ _ O
page _ _ O
◼ _ _ O
It _ _ O
’ll _ _ O
probably _ _ O
need _ _ O
to _ _ O
be _ _ O
brought _ _ O
back _ _ O
in _ _ O
soon _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
5 _ _ O

Optimal _ _ O
page _ _ O
replacement _ _ O
algorithm _ _ O
◼ _ _ O
What _ _ O
’s _ _ O
the _ _ O
best _ _ O
we _ _ O
can _ _ O
possibly _ _ O
do _ _ O
? _ _ O
Assume _ _ O
perfect _ _ O
knowledge _ _ O
of _ _ O
the _ _ O
future _ _ O
◼ _ _ O
Not _ _ O
realizable _ _ O
in _ _ O
practice _ _ O
( _ _ O
usually _ _ O
) _ _ O
◼ _ _ O
Useful _ _ O
for _ _ O
comparison _ _ O
: _ _ O
if _ _ O
another _ _ O
algorithm _ _ O
is _ _ O
within _ _ O
5 _ _ O
% _ _ O
of _ _ O
optimal _ _ O
, _ _ O
not _ _ O
much _ _ O
more _ _ O
can _ _ O
be _ _ O
done _ _ O
… _ _ O
◼ _ _ O
◼ _ _ O
Algorithm _ _ O
: _ _ O
replace _ _ O
the _ _ O
page _ _ O
that _ _ O
will _ _ O
be _ _ O
used _ _ O
furthest _ _ O
in _ _ O
the _ _ O
future _ _ O
Only _ _ O
works _ _ O
if _ _ O
we _ _ O
know _ _ O
the _ _ O
whole _ _ O
sequence _ _ O
! _ _ O
◼ _ _ O
Can _ _ O
be _ _ O
approximated _ _ O
by _ _ O
running _ _ O
the _ _ O
program _ _ O
twice _ _ O
◼ _ _ O
Once _ _ O
to _ _ O
generate _ _ O
the _ _ O
reference _ _ O
trace _ _ O
◼ _ _ O
Once _ _ O
( _ _ O
or _ _ O
more _ _ O
) _ _ O
to _ _ O
apply _ _ O
the _ _ O
optimal _ _ O
algorithm _ _ O
◼ _ _ O
◼ _ _ O
Nice _ _ O
, _ _ O
but _ _ O
not _ _ O
achievable _ _ O
in _ _ O
real _ _ O
systems _ _ O
! _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
6 _ _ O

OPT _ _ O
Examples _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
7 _ _ O

Not-recently-used _ _ O
( _ _ O
NRU _ _ O
) _ _ O
algorithm _ _ O
◼ _ _ O
Each _ _ O
page _ _ O
has _ _ O
reference _ _ O
bit _ _ O
and _ _ O
dirty _ _ O
bit _ _ O
◼ _ _ O
◼ _ _ O
Bits _ _ O
are _ _ O
set _ _ O
when _ _ O
page _ _ O
is _ _ O
referenced _ _ O
and/or _ _ O
modified _ _ O
Pages _ _ O
are _ _ O
classified _ _ O
into _ _ O
four _ _ O
classes _ _ O
0 _ _ O
: _ _ O
not _ _ O
referenced _ _ O
, _ _ O
not _ _ O
dirty _ _ O
◼ _ _ O
1 _ _ O
: _ _ O
not _ _ O
referenced _ _ O
, _ _ O
dirty _ _ O
◼ _ _ O
2 _ _ O
: _ _ O
referenced _ _ O
, _ _ O
not _ _ O
dirty _ _ O
◼ _ _ O
3 _ _ O
: _ _ O
referenced _ _ O
, _ _ O
dirty _ _ O
◼ _ _ O
◼ _ _ O
Clear _ _ O
reference _ _ O
bit _ _ O
for _ _ O
all _ _ O
pages _ _ O
periodically _ _ O
Ca _ _ O
n’t _ _ O
clear _ _ O
dirty _ _ O
bit _ _ O
: _ _ O
needed _ _ O
to _ _ O
indicate _ _ O
which _ _ O
pages _ _ O
need _ _ O
to _ _ O
be _ _ O
flushed _ _ O
to _ _ O
disk _ _ O
◼ _ _ O
Class _ _ O
1 _ _ O
contains _ _ O
dirty _ _ O
pages _ _ O
where _ _ O
reference _ _ O
bit _ _ O
has _ _ O
been _ _ O
cleared _ _ O
◼ _ _ O
◼ _ _ O
Algorithm _ _ O
: _ _ O
remove _ _ O
a _ _ O
page _ _ O
from _ _ O
the _ _ O
lowest _ _ O
non-empty _ _ O
class _ _ O
◼ _ _ O
Select _ _ O
a _ _ O
page _ _ O
at _ _ O
random _ _ O
from _ _ O
that _ _ O
class _ _ O
Easy _ _ O
to _ _ O
understand _ _ O
and _ _ O
implement _ _ O
◼ _ _ O
Performance _ _ O
adequate _ _ O
( _ _ O
though _ _ O
not _ _ O
optimal _ _ O
) _ _ O
◼ _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
8 _ _ O

NRU _ _ O
Operation _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
9 _ _ O

First-In _ _ O
, _ _ O
First-Out _ _ O
( _ _ O
FIFO _ _ O
) _ _ O
algorithm _ _ O
◼ _ _ O
Maintain _ _ O
a _ _ O
linked _ _ O
list _ _ O
of _ _ O
all _ _ O
pages _ _ O
◼ _ _ O
Maintain _ _ O
the _ _ O
order _ _ O
in _ _ O
which _ _ O
they _ _ O
entered _ _ O
memory _ _ O
Page _ _ O
at _ _ O
front _ _ O
of _ _ O
list _ _ O
replaced _ _ O
◼ _ _ O
Advantage _ _ O
: _ _ O
( _ _ O
really _ _ O
) _ _ O
easy _ _ O
to _ _ O
implement _ _ O
◼ _ _ O
Disadvantage _ _ O
: _ _ O
page _ _ O
in _ _ O
memory _ _ O
the _ _ O
longest _ _ O
may _ _ O
be _ _ O
often _ _ O
used _ _ O
◼ _ _ O
This _ _ O
algorithm _ _ O
forces _ _ O
pages _ _ O
out _ _ O
regardless _ _ O
of _ _ O
usage _ _ O
◼ _ _ O
Usage _ _ O
may _ _ O
be _ _ O
helpful _ _ O
in _ _ O
determining _ _ O
which _ _ O
pages _ _ O
to _ _ O
keep _ _ O
◼ _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
10 _ _ O

Page _ _ O
Replacement _ _ O
Algorithms _ _ O
Components _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
11 _ _ O

• _ _ O
• _ _ O
Second _ _ O
chance _ _ O
page _ _ O
replacement _ _ O
Modify _ _ O
FIFO _ _ O
to _ _ O
avoid _ _ O
throwing _ _ O
out _ _ O
heavily _ _ O
used _ _ O
pages _ _ O
• _ _ O
If _ _ O
reference _ _ O
bit _ _ O
is _ _ O
0 _ _ O
, _ _ O
throw _ _ O
the _ _ O
page _ _ O
out _ _ O
• _ _ O
If _ _ O
reference _ _ O
bit _ _ O
is _ _ O
1 _ _ O
• _ _ O
Reset _ _ O
the _ _ O
reference _ _ O
bit _ _ O
to _ _ O
0 _ _ O
• _ _ O
Move _ _ O
page _ _ O
to _ _ O
the _ _ O
tail _ _ O
of _ _ O
the _ _ O
list _ _ O
• _ _ O
Continue _ _ O
search _ _ O
for _ _ O
a _ _ O
free _ _ O
page _ _ O
Still _ _ O
easy _ _ O
to _ _ O
implement _ _ O
, _ _ O
and _ _ O
better _ _ O
than _ _ O
plain _ _ O
FIFO _ _ O
referenced _ _ O
unreferenced _ _ O
A _ _ O
t=0 _ _ O
B _ _ O
t=4 _ _ O
C _ _ O
t=8 _ _ O
D _ _ O
t=15 _ _ O
E _ _ O
t=21 _ _ O
F _ _ O
t=22 _ _ O
G _ _ O
t=29 _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
12 _ _ O
H _ _ O
t=30 _ _ O
A _ _ O
t=32 _ _ O

Clock _ _ O
algorithm _ _ O
• _ _ O
Same _ _ O
functionality _ _ O
as _ _ O
second _ _ O
chance _ _ O
• _ _ O
Simpler _ _ O
implementation _ _ O
• _ _ O
• _ _ O
“ _ _ O
Clock _ _ O
” _ _ O
hand _ _ O
points _ _ O
to _ _ O
next _ _ O
page _ _ O
to _ _ O
replace _ _ O
• _ _ O
If _ _ O
R=0 _ _ O
, _ _ O
replace _ _ O
page _ _ O
• _ _ O
If _ _ O
R=1 _ _ O
, _ _ O
set _ _ O
R=0 _ _ O
and _ _ O
advance _ _ O
the _ _ O
clock _ _ O
hand _ _ O
Continue _ _ O
until _ _ O
page _ _ O
with _ _ O
R=0 _ _ O
is _ _ O
found _ _ O
• _ _ O
H _ _ O
t=30 _ _ O
A _ _ O
t=32 _ _ O
t=0 _ _ O
B _ _ O
t=32 _ _ O
t=4 _ _ O
G _ _ O
t=29 _ _ O
F _ _ O
t=22 _ _ O
This _ _ O
may _ _ O
involve _ _ O
going _ _ O
all _ _ O
the _ _ O
way _ _ O
around _ _ O
the _ _ O
clock _ _ O
… _ _ O
C _ _ O
t=32 _ _ O
t=8 _ _ O
E _ _ O
t=21 _ _ O
D _ _ O
J _ _ O
t=15 _ _ O
t=32 _ _ O
referenced _ _ O
unreferenced _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
13 _ _ O

Least _ _ O
Recently _ _ O
Used _ _ O
( _ _ O
LRU _ _ O
) _ _ O
• _ _ O
Assume _ _ O
pages _ _ O
used _ _ O
recently _ _ O
will _ _ O
be _ _ O
used _ _ O
again _ _ O
soon _ _ O
• _ _ O
Throw _ _ O
out _ _ O
page _ _ O
that _ _ O
has _ _ O
been _ _ O
unused _ _ O
for _ _ O
longest _ _ O
time _ _ O
• _ _ O
Must _ _ O
keep _ _ O
a _ _ O
linked _ _ O
list _ _ O
of _ _ O
pages _ _ O
• _ _ O
Most _ _ O
recently _ _ O
used _ _ O
at _ _ O
front _ _ O
, _ _ O
least _ _ O
at _ _ O
rear _ _ O
• _ _ O
Update _ _ O
this _ _ O
list _ _ O
every _ _ O
memory _ _ O
reference _ _ O
! _ _ O
• _ _ O
This _ _ O
can _ _ O
be _ _ O
somewhat _ _ O
slow _ _ O
: _ _ O
hardware _ _ O
has _ _ O
to _ _ O
update _ _ O
a _ _ O
linked _ _ O
list _ _ O
on _ _ O
every _ _ O
reference _ _ O
! _ _ O
• _ _ O
Alternatively _ _ O
, _ _ O
keep _ _ O
counter _ _ O
in _ _ O
each _ _ O
page _ _ O
table _ _ O
entry _ _ O
• _ _ O
Global _ _ O
counter _ _ O
increments _ _ O
with _ _ O
each _ _ O
CPU _ _ O
cycle _ _ O
• _ _ O
Copy _ _ O
global _ _ O
counter _ _ O
to _ _ O
PTE _ _ O
counter _ _ O
on _ _ O
a _ _ O
reference _ _ O
to _ _ O
the _ _ O
page _ _ O
• _ _ O
For _ _ O
replacement _ _ O
, _ _ O
evict _ _ O
page _ _ O
with _ _ O
lowest _ _ O
counter _ _ O
value _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
14 _ _ O

Simulating _ _ O
LRU _ _ O
in _ _ O
software _ _ O
• _ _ O
Few _ _ O
computers _ _ O
have _ _ O
the _ _ O
necessary _ _ O
hardware _ _ O
to _ _ O
implement _ _ O
full _ _ O
LRU _ _ O
• _ _ O
Linked-list _ _ O
method _ _ O
impractical _ _ O
in _ _ O
hardware _ _ O
• _ _ O
Counter-based _ _ O
method _ _ O
could _ _ O
be _ _ O
done _ _ O
, _ _ O
but _ _ O
it _ _ O
’s _ _ O
slow _ _ O
to _ _ O
find _ _ O
the _ _ O
desired _ _ O
page _ _ O
• _ _ O
Approximate _ _ O
LRU _ _ O
with _ _ O
Not _ _ O
Frequently _ _ O
Used _ _ O
( _ _ O
NFU _ _ O
) _ _ O
algorithm _ _ O
• _ _ O
At _ _ O
each _ _ O
clock _ _ O
interrupt _ _ O
, _ _ O
scan _ _ O
through _ _ O
page _ _ O
table _ _ O
• _ _ O
If _ _ O
R=1 _ _ O
for _ _ O
a _ _ O
page _ _ O
, _ _ O
add _ _ O
one _ _ O
to _ _ O
its _ _ O
counter _ _ O
value _ _ O
• _ _ O
On _ _ O
replacement _ _ O
, _ _ O
pick _ _ O
the _ _ O
page _ _ O
with _ _ O
the _ _ O
lowest _ _ O
counter _ _ O
value _ _ O
• _ _ O
Problem _ _ O
: _ _ O
no _ _ O
notion _ _ O
of _ _ O
age—pages _ _ O
with _ _ O
high _ _ O
counter _ _ O
values _ _ O
will _ _ O
tend _ _ O
to _ _ O
keep _ _ O
them _ _ O
! _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
15 _ _ O

• _ _ O
Aging _ _ O
replacement _ _ O
algorithm _ _ O
Reduce _ _ O
counter _ _ O
values _ _ O
over _ _ O
time _ _ O
• _ _ O
Divide _ _ O
by _ _ O
two _ _ O
every _ _ O
clock _ _ O
cycle _ _ O
( _ _ O
use _ _ O
right _ _ O
shift _ _ O
) _ _ O
• _ _ O
More _ _ O
weight _ _ O
given _ _ O
to _ _ O
more _ _ O
recent _ _ O
references _ _ O
! _ _ O
• _ _ O
Select _ _ O
page _ _ O
to _ _ O
be _ _ O
evicted _ _ O
by _ _ O
finding _ _ O
the _ _ O
lowest _ _ O
counter _ _ O
value _ _ O
• _ _ O
Algorithm _ _ O
is _ _ O
: _ _ O
• _ _ O
Every _ _ O
clock _ _ O
tick _ _ O
, _ _ O
shift _ _ O
all _ _ O
counters _ _ O
right _ _ O
by _ _ O
1 _ _ O
bit _ _ O
• _ _ O
On _ _ O
reference _ _ O
, _ _ O
set _ _ O
leftmost _ _ O
bit _ _ O
of _ _ O
a _ _ O
counter _ _ O
( _ _ O
can _ _ O
be _ _ O
done _ _ O
by _ _ O
copying _ _ O
the _ _ O
reference _ _ O
bit _ _ O
to _ _ O
the _ _ O
counter _ _ O
at _ _ O
the _ _ O
clock _ _ O
tick _ _ O
) _ _ O
Referenced _ _ O
this _ _ O
tick _ _ O
Page _ _ O
0 _ _ O
Page _ _ O
1 _ _ O
Page _ _ O
2 _ _ O
Page _ _ O
3 _ _ O
Page _ _ O
4 _ _ O
Page _ _ O
5 _ _ O
Tick _ _ O
0 _ _ O
Tick _ _ O
1 _ _ O
Tick _ _ O
2 _ _ O
Tick _ _ O
3 _ _ O
Tick _ _ O
4 _ _ O
10000000 _ _ O
11000000 _ _ O
11100000 _ _ O
01110000 _ _ O
10111000 _ _ O
00000000 _ _ O
10000000 _ _ O
00000000 _ _ O
10000000 _ _ O
01000000 _ _ O
00000000 _ _ O
01000000 _ _ O
00100000 _ _ O
00000000 _ _ O
00100000 _ _ O
10010000 _ _ O
10000000 _ _ O
00010000 _ _ O
01001000 _ _ O
01000000 _ _ O
10000000 _ _ O
10000000 _ _ O
01000000 _ _ O
11000000 _ _ O
10100000 _ _ O
01100000 _ _ O
11010000 _ _ O
10110000 _ _ O
01101000 _ _ O
11011000 _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
16 _ _ O

Working _ _ O
set _ _ O
• _ _ O
Demand _ _ O
paging _ _ O
: _ _ O
bring _ _ O
a _ _ O
page _ _ O
into _ _ O
memory _ _ O
when _ _ O
it _ _ O
’s _ _ O
requested _ _ O
by _ _ O
the _ _ O
process _ _ O
• _ _ O
How _ _ O
many _ _ O
pages _ _ O
are _ _ O
needed _ _ O
? _ _ O
• _ _ O
Could _ _ O
be _ _ O
all _ _ O
of _ _ O
them _ _ O
, _ _ O
but _ _ O
not _ _ O
likely _ _ O
• _ _ O
Instead _ _ O
, _ _ O
processes _ _ O
reference _ _ O
a _ _ O
small _ _ O
set _ _ O
of _ _ O
pages _ _ O
at _ _ O
any _ _ O
given _ _ O
time—locality _ _ O
of _ _ O
reference _ _ O
• _ _ O
Set _ _ O
of _ _ O
pages _ _ O
can _ _ O
be _ _ O
different _ _ O
for _ _ O
different _ _ O
processes _ _ O
or _ _ O
even _ _ O
different _ _ O
times _ _ O
in _ _ O
the _ _ O
running _ _ O
of _ _ O
a _ _ O
single _ _ O
process _ _ O
• _ _ O
Set _ _ O
of _ _ O
pages _ _ O
used _ _ O
by _ _ O
a _ _ O
process _ _ O
in _ _ O
a _ _ O
given _ _ O
interval _ _ O
of _ _ O
time _ _ O
is _ _ O
called _ _ O
the _ _ O
working _ _ O
set _ _ O
• _ _ O
If _ _ O
entire _ _ O
working _ _ O
set _ _ O
is _ _ O
in _ _ O
memory _ _ O
, _ _ O
no _ _ O
page _ _ O
faults _ _ O
! _ _ O
• _ _ O
If _ _ O
insufficient _ _ O
space _ _ O
for _ _ O
working _ _ O
set _ _ O
, _ _ O
thrashing _ _ O
may _ _ O
occur _ _ O
• _ _ O
Goal _ _ O
: _ _ O
keep _ _ O
most _ _ O
of _ _ O
working _ _ O
set _ _ O
in _ _ O
memory _ _ O
to _ _ O
minimize _ _ O
the _ _ O
number _ _ O
of _ _ O
page _ _ O
faults _ _ O
suffered _ _ O
by _ _ O
a _ _ O
process _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
17 _ _ O

How _ _ O
big _ _ O
is _ _ O
the _ _ O
working _ _ O
set _ _ O
? _ _ O
w _ _ O
( _ _ O
k _ _ O
, _ _ O
t _ _ O
) _ _ O
k _ _ O
• _ _ O
Working _ _ O
set _ _ O
is _ _ O
the _ _ O
set _ _ O
of _ _ O
pages _ _ O
used _ _ O
by _ _ O
the _ _ O
k _ _ O
most _ _ O
recent _ _ O
memory _ _ O
references _ _ O
• _ _ O
w _ _ O
( _ _ O
k _ _ O
, _ _ O
t _ _ O
) _ _ O
is _ _ O
the _ _ O
size _ _ O
of _ _ O
the _ _ O
working _ _ O
set _ _ O
at _ _ O
time _ _ O
t _ _ O
• _ _ O
Working _ _ O
set _ _ O
may _ _ O
change _ _ O
over _ _ O
time _ _ O
• _ _ O
Size _ _ O
of _ _ O
working _ _ O
set _ _ O
can _ _ O
change _ _ O
over _ _ O
time _ _ O
as _ _ O
well _ _ O
… _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
18 _ _ O

Keeping _ _ O
track _ _ O
of _ _ O
the _ _ O
Working _ _ O
Set _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
19 _ _ O

Working _ _ O
set _ _ O
page _ _ O
replacement _ _ O
algorithm _ _ O
CS _ _ O
1550 _ _ O
– _ _ O
Operating _ _ O
Systems _ _ O
– _ _ O
Sherif _ _ O
Khattab _ _ O
20 _ _ O



