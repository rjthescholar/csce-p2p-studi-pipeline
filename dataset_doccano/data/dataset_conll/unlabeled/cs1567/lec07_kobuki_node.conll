unlabeled|cs1567|lec07_kobuki_node
-DOCSTART- -X- -X- O

Kobuki _ _ O
Node _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

Kobuki _ _ O
Node _ _ O
The _ _ O
kobuki _ _ O
node _ _ O
communicates _ _ O
with _ _ O
a _ _ O
Kobuki _ _ O
robot _ _ O
via _ _ O
USB _ _ O
Provide _ _ O
hardware _ _ O
abstractions _ _ O
Motors _ _ O
with _ _ O
synchronization _ _ O
Bumper _ _ O
switches _ _ O
Buttons _ _ O
LEDs _ _ O
To _ _ O
control _ _ O
a _ _ O
robot _ _ O
, _ _ O
simply _ _ O
communicate _ _ O
with _ _ O
the _ _ O
kobuki _ _ O
node _ _ O
Publish _ _ O
commands _ _ O
to _ _ O
the _ _ O
kobuki _ _ O
node _ _ O
Subscribe _ _ O
for _ _ O
information _ _ O
about _ _ O
the _ _ O
robot _ _ O
To _ _ O
start _ _ O
a _ _ O
kobuki _ _ O
node _ _ O
, _ _ O
use _ _ O
the _ _ O
following _ _ O
command _ _ O
: _ _ O
roslaunch _ _ O
kobuki_node _ _ O
minimal.launch _ _ O
To _ _ O
ensure _ _ O
the _ _ O
stability _ _ O
of _ _ O
the _ _ O
robot _ _ O
’s _ _ O
odometry _ _ O
, _ _ O
the _ _ O
robot _ _ O
should _ _ O
be _ _ O
on _ _ O
the _ _ O
ground _ _ O
/ _ _ O
table _ _ O
before _ _ O
executing _ _ O
the _ _ O
above _ _ O
command _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

Kobuki _ _ O
’s _ _ O
Subscriptions _ _ O
and _ _ O
Publications _ _ O
By _ _ O
default _ _ O
the _ _ O
kobuki _ _ O
node _ _ O
subscribes _ _ O
to _ _ O
the _ _ O
following _ _ O
topic _ _ O
: _ _ O
/mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
reset_odometry _ _ O
/mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
sound _ _ O
/mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
led1 _ _ O
/mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
led2 _ _ O
/mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
velocity _ _ O
We _ _ O
simply _ _ O
publish _ _ O
data _ _ O
to _ _ O
the _ _ O
above _ _ O
topics _ _ O
to _ _ O
control _ _ O
the _ _ O
robot _ _ O
The _ _ O
kobuki _ _ O
node _ _ O
publishes _ _ O
to _ _ O
the _ _ O
following _ _ O
topic _ _ O
: _ _ O
/odom _ _ O
/mobile_base _ _ O
/ _ _ O
events _ _ O
/ _ _ O
bumper _ _ O
/mobile_base _ _ O
/ _ _ O
events _ _ O
/ _ _ O
button _ _ O
We _ _ O
simply _ _ O
subscribe _ _ O
to _ _ O
the _ _ O
above _ _ O
topics _ _ O
to _ _ O
receive _ _ O
data _ _ O
from _ _ O
the _ _ O
robot _ _ O
There _ _ O
are _ _ O
more _ _ O
topics _ _ O
related _ _ O
to _ _ O
kobuki _ _ O
node _ _ O
but _ _ O
we _ _ O
will _ _ O
only _ _ O
focus _ _ O
on _ _ O
topics _ _ O
listed _ _ O
above _ _ O
. _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

Sounds _ _ O
A _ _ O
Kobuki _ _ O
robot _ _ O
has _ _ O
an _ _ O
ability _ _ O
to _ _ O
make _ _ O
sounds _ _ O
Simply _ _ O
publish _ _ O
a _ _ O
message _ _ O
of _ _ O
type _ _ O
Sound _ _ O
to _ _ O
the _ _ O
topic _ _ O
named _ _ O
/mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
sound _ _ O
To _ _ O
recognize _ _ O
a _ _ O
message _ _ O
of _ _ O
type _ _ O
Sound _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
import _ _ O
it _ _ O
from _ _ O
kobuki_msgs.msg _ _ O
import _ _ O
Sound _ _ O
Sound _ _ O
message _ _ O
consists _ _ O
of _ _ O
only _ _ O
one _ _ O
component _ _ O
named _ _ O
value _ _ O
Simply _ _ O
set _ _ O
the _ _ O
value _ _ O
between _ _ O
0 _ _ O
and _ _ O
6 _ _ O
and _ _ O
publish _ _ O
Values _ _ O
: _ _ O
0 _ _ O
- _ _ O
turn _ _ O
on _ _ O
1 _ _ O
- _ _ O
turn _ _ O
off _ _ O
2 _ _ O
- _ _ O
recharge _ _ O
start _ _ O
3 _ _ O
- _ _ O
press _ _ O
button _ _ O
4 _ _ O
- _ _ O
error _ _ O
sound _ _ O
5 _ _ O
- _ _ O
start _ _ O
cleaning _ _ O
6 _ _ O
- _ _ O
cleaning _ _ O
end _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

Sounds _ _ O
# _ _ O
! _ _ O
/usr _ _ O
/ _ _ O
bin _ _ O
/ _ _ O
env _ _ O
python _ _ O
import _ _ O
rospy _ _ O
from _ _ O
kobuki_msgs.msg _ _ O
import _ _ O
Sound _ _ O
def _ _ O
sendSounds _ _ O
( _ _ O
) _ _ O
: _ _ O
rospy.init_node _ _ O
( _ _ O
' _ _ O
sound_sender _ _ O
' _ _ O
, _ _ O
anonymous=True _ _ O
) _ _ O
pub _ _ O
= _ _ O
rospy.Publisher _ _ O
( _ _ O
' _ _ O
/ _ _ O
mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
sound _ _ O
' _ _ O
, _ _ O
Sound _ _ O
, _ _ O
queue_size=10 _ _ O
) _ _ O
while _ _ O
pub.get_num_connections _ _ O
( _ _ O
) _ _ O
= _ _ O
= _ _ O
0 _ _ O
: _ _ O
pass _ _ O
s _ _ O
= _ _ O
Sound _ _ O
( _ _ O
) _ _ O
for _ _ O
x _ _ O
in _ _ O
range _ _ O
( _ _ O
0 _ _ O
, _ _ O
7 _ _ O
) _ _ O
: _ _ O
s.value _ _ O
= _ _ O
x _ _ O
pub.publish _ _ O
( _ _ O
s _ _ O
) _ _ O
rospy.sleep _ _ O
( _ _ O
1.5 _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
try _ _ O
: _ _ O
sendSounds _ _ O
( _ _ O
) _ _ O
except _ _ O
rospy.ROSInterruptException _ _ O
: _ _ O
pass _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

LEDs _ _ O
There _ _ O
are _ _ O
two _ _ O
LEDs _ _ O
on _ _ O
a _ _ O
Kobuki _ _ O
robot _ _ O
named _ _ O
LED1 _ _ O
and _ _ O
LED2 _ _ O
To _ _ O
control _ _ O
an _ _ O
LED _ _ O
, _ _ O
simply _ _ O
publish _ _ O
a _ _ O
message _ _ O
type _ _ O
Led _ _ O
to _ _ O
its _ _ O
associate _ _ O
topic _ _ O
: _ _ O
LED1 _ _ O
: _ _ O
/mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
led1 _ _ O
LED2 _ _ O
: _ _ O
/mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
led2 _ _ O
To _ _ O
recognize _ _ O
a _ _ O
message _ _ O
of _ _ O
type _ _ O
Led _ _ O
, _ _ O
we _ _ O
need _ _ O
to _ _ O
import _ _ O
it _ _ O
from _ _ O
kobuki_msgs.msg _ _ O
import _ _ O
Led _ _ O
Led _ _ O
message _ _ O
consists _ _ O
of _ _ O
only _ _ O
one _ _ O
component _ _ O
named _ _ O
value _ _ O
Simply _ _ O
set _ _ O
the _ _ O
value _ _ O
and _ _ O
publish _ _ O
Values _ _ O
: _ _ O
0 _ _ O
- _ _ O
Black _ _ O
( _ _ O
Off _ _ O
) _ _ O
1 _ _ O
- _ _ O
Green _ _ O
2 _ _ O
- _ _ O
Orange _ _ O
3 _ _ O
- _ _ O
Red _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

LEDs _ _ O
# _ _ O
! _ _ O
/usr _ _ O
/ _ _ O
bin _ _ O
/ _ _ O
env _ _ O
python _ _ O
import _ _ O
rospy _ _ O
from _ _ O
kobuki_msgs.msg _ _ O
import _ _ O
Led _ _ O
def _ _ O
sendLEDs _ _ O
( _ _ O
) _ _ O
: _ _ O
rospy.init_node _ _ O
( _ _ O
' _ _ O
leds_sender _ _ O
' _ _ O
, _ _ O
anonymous=True _ _ O
) _ _ O
pub1 _ _ O
= _ _ O
rospy.Publisher _ _ O
( _ _ O
' _ _ O
/ _ _ O
mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
led1 _ _ O
' _ _ O
, _ _ O
Led _ _ O
, _ _ O
queue_size=10 _ _ O
) _ _ O
pub2 _ _ O
= _ _ O
rospy.Publisher _ _ O
( _ _ O
' _ _ O
/ _ _ O
mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
led2 _ _ O
' _ _ O
, _ _ O
Led _ _ O
, _ _ O
queue_size=10 _ _ O
) _ _ O
while _ _ O
pub1.get_num_connections _ _ O
( _ _ O
) _ _ O
= _ _ O
= _ _ O
0 _ _ O
or _ _ O
pub2.get_num_connections _ _ O
( _ _ O
) _ _ O
= _ _ O
= _ _ O
0 _ _ O
: _ _ O
pass _ _ O
led _ _ O
= _ _ O
Led _ _ O
( _ _ O
) _ _ O
x _ _ O
= _ _ O
3 _ _ O
while _ _ O
x _ _ O
! _ _ O
= _ _ O
-1 _ _ O
: _ _ O
led.value _ _ O
= _ _ O
x _ _ O
pub1.publish _ _ O
( _ _ O
led _ _ O
) _ _ O
x _ _ O
= _ _ O
x _ _ O
- _ _ O
1 _ _ O
rospy.sleep _ _ O
( _ _ O
1 _ _ O
) _ _ O
x _ _ O
= _ _ O
3 _ _ O
while _ _ O
x _ _ O
! _ _ O
= _ _ O
-1 _ _ O
: _ _ O
led.value _ _ O
= _ _ O
x _ _ O
pub2.publish _ _ O
( _ _ O
led _ _ O
) _ _ O
x _ _ O
= _ _ O
x _ _ O
- _ _ O
1 _ _ O
rospy.sleep _ _ O
( _ _ O
1 _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
try _ _ O
: _ _ O
sendLEDs _ _ O
( _ _ O
) _ _ O
except _ _ O
rospy.ROSInterruptException _ _ O
: _ _ O
pass _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

Bumpers _ _ O
There _ _ O
are _ _ O
three _ _ O
bumpers _ _ O
on _ _ O
a _ _ O
Kobuki _ _ O
robot _ _ O
, _ _ O
left _ _ O
, _ _ O
center _ _ O
, _ _ O
and _ _ O
right _ _ O
If _ _ O
a _ _ O
bumper _ _ O
is _ _ O
pressed _ _ O
or _ _ O
release _ _ O
, _ _ O
it _ _ O
will _ _ O
publish _ _ O
a _ _ O
message _ _ O
of _ _ O
type _ _ O
BumperEvent _ _ O
to _ _ O
the _ _ O
topic _ _ O
: _ _ O
/mobile_base _ _ O
/ _ _ O
events _ _ O
/ _ _ O
bumper _ _ O
Need _ _ O
to _ _ O
import _ _ O
the _ _ O
message _ _ O
of _ _ O
type _ _ O
BumperEvent _ _ O
as _ _ O
usual _ _ O
: _ _ O
from _ _ O
kobuki_msgs.msg _ _ O
import _ _ O
BumperEvent _ _ O
BumperEvent _ _ O
consists _ _ O
of _ _ O
two _ _ O
components _ _ O
: _ _ O
bumper _ _ O
with _ _ O
the _ _ O
following _ _ O
possible _ _ O
values _ _ O
: _ _ O
0 _ _ O
- _ _ O
Left _ _ O
1 _ _ O
- _ _ O
Center _ _ O
2 _ _ O
- _ _ O
Right _ _ O
state _ _ O
with _ _ O
the _ _ O
following _ _ O
possible _ _ O
values _ _ O
: _ _ O
0 _ _ O
- _ _ O
Released _ _ O
1 _ _ O
- _ _ O
Pressed _ _ O
Simply _ _ O
subscribe _ _ O
to _ _ O
the _ _ O
topic _ _ O
to _ _ O
receive _ _ O
the _ _ O
message _ _ O
: _ _ O
rospy.Subscriber _ _ O
( _ _ O
' _ _ O
/ _ _ O
mobile_base _ _ O
/ _ _ O
events _ _ O
/ _ _ O
bumper _ _ O
' _ _ O
, _ _ O
BumperEvent _ _ O
, _ _ O
bumperCallback _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

Bumpers _ _ O
# _ _ O
! _ _ O
/usr _ _ O
/ _ _ O
bin _ _ O
/ _ _ O
env _ _ O
python _ _ O
import _ _ O
rospy _ _ O
from _ _ O
kobuki_msgs.msg _ _ O
import _ _ O
BumperEvent _ _ O
def _ _ O
bumperCallback _ _ O
( _ _ O
data _ _ O
) _ _ O
: _ _ O
str _ _ O
= _ _ O
" _ _ O
" _ _ O
if _ _ O
data.bumper _ _ O
= _ _ O
= _ _ O
0 _ _ O
: _ _ O
str _ _ O
= _ _ O
str _ _ O
+ _ _ O
" _ _ O
Left _ _ O
bumper _ _ O
is _ _ O
" _ _ O
elif _ _ O
data.bumper _ _ O
= _ _ O
= _ _ O
1 _ _ O
: _ _ O
str _ _ O
= _ _ O
str _ _ O
+ _ _ O
" _ _ O
Center _ _ O
bumper _ _ O
is _ _ O
" _ _ O
else _ _ O
: _ _ O
str _ _ O
= _ _ O
str _ _ O
+ _ _ O
" _ _ O
Right _ _ O
bumper _ _ O
is _ _ O
" _ _ O
if _ _ O
data.state _ _ O
= _ _ O
= _ _ O
0 _ _ O
: _ _ O
str _ _ O
= _ _ O
str _ _ O
+ _ _ O
" _ _ O
released _ _ O
. _ _ O
" _ _ O
else _ _ O
: _ _ O
str _ _ O
= _ _ O
str _ _ O
+ _ _ O
" _ _ O
pressed _ _ O
. _ _ O
" _ _ O
rospy.loginfo _ _ O
( _ _ O
str _ _ O
) _ _ O
def _ _ O
bumperExample _ _ O
( _ _ O
) _ _ O
: _ _ O
rospy.init_node _ _ O
( _ _ O
' _ _ O
bumper_example _ _ O
' _ _ O
, _ _ O
anonymous=True _ _ O
) _ _ O
rospy.Subscriber _ _ O
( _ _ O
' _ _ O
/ _ _ O
mobile_base _ _ O
/ _ _ O
events _ _ O
/ _ _ O
bumper _ _ O
' _ _ O
, _ _ O
BumperEvent _ _ O
, _ _ O
bumperCallback _ _ O
) _ _ O
rospy.spin _ _ O
( _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
bumperExample _ _ O
( _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

Buttons _ _ O
Kobuki _ _ O
robot _ _ O
consists _ _ O
of _ _ O
three _ _ O
buttons _ _ O
, _ _ O
B0 _ _ O
, _ _ O
B1 _ _ O
, _ _ O
and _ _ O
B2 _ _ O
If _ _ O
a _ _ O
button _ _ O
is _ _ O
pressed _ _ O
or _ _ O
released _ _ O
, _ _ O
a _ _ O
message _ _ O
of _ _ O
type _ _ O
ButtonEvent _ _ O
will _ _ O
be _ _ O
published _ _ O
into _ _ O
the _ _ O
topic _ _ O
/mobile_base _ _ O
/ _ _ O
events _ _ O
/ _ _ O
button _ _ O
Your _ _ O
program _ _ O
must _ _ O
import _ _ O
the _ _ O
message _ _ O
type _ _ O
ButtonEvent _ _ O
as _ _ O
shown _ _ O
below _ _ O
: _ _ O
from _ _ O
kobuki_msgs.msg _ _ O
import _ _ O
ButtonEvent _ _ O
The _ _ O
message _ _ O
of _ _ O
type _ _ O
ButtonEvent _ _ O
consists _ _ O
of _ _ O
two _ _ O
components _ _ O
: _ _ O
button _ _ O
with _ _ O
the _ _ O
following _ _ O
possible _ _ O
values _ _ O
: _ _ O
0 _ _ O
- _ _ O
B0 _ _ O
1 _ _ O
- _ _ O
B1 _ _ O
2 _ _ O
- _ _ O
B2 _ _ O
state _ _ O
with _ _ O
the _ _ O
following _ _ O
possible _ _ O
values _ _ O
: _ _ O
0 _ _ O
- _ _ O
released _ _ O
1 _ _ O
- _ _ O
pressed _ _ O
Simply _ _ O
subscribe _ _ O
to _ _ O
the _ _ O
topic _ _ O
as _ _ O
usual _ _ O
: _ _ O
rospy.Subscriber _ _ O
( _ _ O
' _ _ O
/ _ _ O
mobile_base _ _ O
/ _ _ O
events _ _ O
/ _ _ O
button _ _ O
' _ _ O
, _ _ O
ButtonEvent _ _ O
, _ _ O
bumperCallback _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

Button _ _ O
# _ _ O
! _ _ O
/usr _ _ O
/ _ _ O
bin _ _ O
/ _ _ O
env _ _ O
python _ _ O
import _ _ O
rospy _ _ O
from _ _ O
kobuki_msgs.msg _ _ O
import _ _ O
ButtonEvent _ _ O
def _ _ O
buttonCallback _ _ O
( _ _ O
data _ _ O
) _ _ O
: _ _ O
str _ _ O
= _ _ O
" _ _ O
" _ _ O
if _ _ O
data.button _ _ O
= _ _ O
= _ _ O
0 _ _ O
: _ _ O
str _ _ O
= _ _ O
str _ _ O
+ _ _ O
" _ _ O
B0 _ _ O
is _ _ O
" _ _ O
elif _ _ O
data.button _ _ O
= _ _ O
= _ _ O
1 _ _ O
: _ _ O
str _ _ O
= _ _ O
str _ _ O
+ _ _ O
" _ _ O
B1 _ _ O
is _ _ O
" _ _ O
else _ _ O
: _ _ O
str _ _ O
= _ _ O
str _ _ O
+ _ _ O
" _ _ O
B2 _ _ O
is _ _ O
" _ _ O
if _ _ O
data.state _ _ O
= _ _ O
= _ _ O
0 _ _ O
: _ _ O
str _ _ O
= _ _ O
str _ _ O
+ _ _ O
" _ _ O
released _ _ O
. _ _ O
" _ _ O
else _ _ O
: _ _ O
str _ _ O
= _ _ O
str _ _ O
+ _ _ O
" _ _ O
pressed _ _ O
. _ _ O
" _ _ O
rospy.loginfo _ _ O
( _ _ O
str _ _ O
) _ _ O
def _ _ O
bumperExample _ _ O
( _ _ O
) _ _ O
: _ _ O
rospy.init_node _ _ O
( _ _ O
' _ _ O
button_example _ _ O
' _ _ O
, _ _ O
anonymous=True _ _ O
) _ _ O
rospy.Subscriber _ _ O
( _ _ O
' _ _ O
/ _ _ O
mobile_base _ _ O
/ _ _ O
events _ _ O
/ _ _ O
button _ _ O
' _ _ O
, _ _ O
ButtonEvent _ _ O
, _ _ O
buttonCallback _ _ O
) _ _ O
rospy.spin _ _ O
( _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
bumperExample _ _ O
( _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

Odometry _ _ O
Represents _ _ O
an _ _ O
estimate _ _ O
of _ _ O
a _ _ O
robot _ _ O
position _ _ O
in _ _ O
free _ _ O
space _ _ O
A _ _ O
Kobuki _ _ O
robot _ _ O
has _ _ O
three _ _ O
main _ _ O
information _ _ O
related _ _ O
to _ _ O
position _ _ O
and _ _ O
orientation _ _ O
: _ _ O
position.x _ _ O
orientation.z _ _ O
position.y _ _ O
Kobuki _ _ O
Information _ _ O
from _ _ O
an _ _ O
odometry _ _ O
allows _ _ O
us _ _ O
to _ _ O
move _ _ O
the _ _ O
robot _ _ O
with _ _ O
better _ _ O
precision _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

Odometry _ _ O
Type _ _ O
: _ _ O
nav_mags _ _ O
/ _ _ O
Odometry.msg _ _ O
The _ _ O
component _ _ O
that _ _ O
we _ _ O
will _ _ O
focus _ _ O
on _ _ O
in _ _ O
Odometry _ _ O
message _ _ O
is _ _ O
pose _ _ O
The _ _ O
pose _ _ O
component _ _ O
contains _ _ O
two _ _ O
components _ _ O
and _ _ O
one _ _ O
of _ _ O
them _ _ O
is _ _ O
named _ _ O
pose _ _ O
( _ _ O
again _ _ O
) _ _ O
The _ _ O
inner _ _ O
pose _ _ O
component _ _ O
consists _ _ O
of _ _ O
two _ _ O
components _ _ O
: _ _ O
position _ _ O
( _ _ O
in _ _ O
meter _ _ O
) _ _ O
consists _ _ O
of _ _ O
3 _ _ O
components _ _ O
of _ _ O
type _ _ O
float _ _ O
named _ _ O
x _ _ O
, _ _ O
y _ _ O
, _ _ O
and _ _ O
z _ _ O
orientation _ _ O
( _ _ O
in _ _ O
quaternion _ _ O
) _ _ O
consists _ _ O
of _ _ O
4 _ _ O
components _ _ O
of _ _ O
type _ _ O
float _ _ O
named _ _ O
x _ _ O
, _ _ O
y _ _ O
, _ _ O
z _ _ O
, _ _ O
and _ _ O
w _ _ O
For _ _ O
a _ _ O
Kobuki _ _ O
robot _ _ O
: _ _ O
pose.pose.position.z _ _ O
is _ _ O
always _ _ O
0 _ _ O
pose.pose.orientation.x _ _ O
is _ _ O
always _ _ O
0 _ _ O
pose.pose.orientation.y _ _ O
is _ _ O
always _ _ O
0 _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

Odometry _ _ O
Note _ _ O
that _ _ O
the _ _ O
orientation _ _ O
from _ _ O
Kobuki _ _ O
’s _ _ O
odometry _ _ O
is _ _ O
in _ _ O
quaternion _ _ O
Quaternion _ _ O
is _ _ O
a _ _ O
unit _ _ O
suitable _ _ O
for _ _ O
rotating _ _ O
objects _ _ O
in _ _ O
3D _ _ O
A _ _ O
quaternion _ _ O
value _ _ O
consists _ _ O
of _ _ O
four _ _ O
values _ _ O
, _ _ O
x _ _ O
, _ _ O
y _ _ O
, _ _ O
z _ _ O
, _ _ O
and _ _ O
w _ _ O
We _ _ O
generally _ _ O
familiar _ _ O
with _ _ O
roll _ _ O
, _ _ O
pitch _ _ O
, _ _ O
and _ _ O
yaw _ _ O
Since _ _ O
a _ _ O
Kobuki _ _ O
can _ _ O
only _ _ O
turn _ _ O
about _ _ O
the _ _ O
Z-axis _ _ O
, _ _ O
only _ _ O
yaw _ _ O
is _ _ O
applicable _ _ O
We _ _ O
can _ _ O
calculate _ _ O
yaw _ _ O
( _ _ O
in _ _ O
radian _ _ O
) _ _ O
using _ _ O
the _ _ O
following _ _ O
formula _ _ O
: _ _ O
yaw _ _ O
= _ _ O
arcsin _ _ O
( _ _ O
2 _ _ O
∗ _ _ O
𝑥 _ _ O
∗ _ _ O
𝑦 _ _ O
+ _ _ O
2 _ _ O
∗ _ _ O
𝑧 _ _ O
∗ _ _ O
𝑤 _ _ O
) _ _ O
Because _ _ O
𝑥 _ _ O
and _ _ O
𝑦 _ _ O
orientations _ _ O
of _ _ O
a _ _ O
Kobuki _ _ O
robot _ _ O
are _ _ O
always _ _ O
0 _ _ O
, _ _ O
yaw _ _ O
= _ _ O
arcsin _ _ O
( _ _ O
2 _ _ O
∗ _ _ O
𝑧 _ _ O
∗ _ _ O
𝑤 _ _ O
) _ _ O
To _ _ O
convert _ _ O
radian _ _ O
to _ _ O
degree _ _ O
simply _ _ O
multiply _ _ O
by _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O
180 _ _ O
𝜋 _ _ O

Reset _ _ O
Kobuki _ _ O
’s _ _ O
Odometry _ _ O
Often _ _ O
time _ _ O
, _ _ O
we _ _ O
may _ _ O
want _ _ O
to _ _ O
reset _ _ O
the _ _ O
odometry _ _ O
to _ _ O
0 _ _ O
This _ _ O
can _ _ O
be _ _ O
done _ _ O
by _ _ O
publishing _ _ O
an _ _ O
Empty _ _ O
message _ _ O
to _ _ O
/mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
reset_odometry _ _ O
You _ _ O
must _ _ O
make _ _ O
sure _ _ O
that _ _ O
your _ _ O
program _ _ O
already _ _ O
establish _ _ O
a _ _ O
connection _ _ O
with _ _ O
the _ _ O
robot _ _ O
first _ _ O
Example _ _ O
: _ _ O
# _ _ O
! _ _ O
/usr _ _ O
/ _ _ O
bin _ _ O
/ _ _ O
env _ _ O
python _ _ O
import _ _ O
rospy _ _ O
from _ _ O
std_msgs.msg _ _ O
import _ _ O
Empty _ _ O
def _ _ O
resetter _ _ O
( _ _ O
) _ _ O
: _ _ O
pub _ _ O
= _ _ O
rospy.Publisher _ _ O
( _ _ O
' _ _ O
/ _ _ O
mobile_base _ _ O
/ _ _ O
commands _ _ O
/ _ _ O
reset_odometry _ _ O
' _ _ O
, _ _ O
Empty _ _ O
, _ _ O
queue_size=10 _ _ O
) _ _ O
rospy.init_node _ _ O
( _ _ O
' _ _ O
resetter _ _ O
' _ _ O
, _ _ O
anonymous=True _ _ O
) _ _ O
while _ _ O
pub.get_num_connections _ _ O
( _ _ O
) _ _ O
= _ _ O
= _ _ O
0 _ _ O
: _ _ O
pass _ _ O
pub.publish _ _ O
( _ _ O
Empty _ _ O
( _ _ O
) _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
resetter _ _ O
( _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

Odometry _ _ O
Topic _ _ O
: _ _ O
/odom _ _ O
Purpose _ _ O
: _ _ O
Information _ _ O
about _ _ O
robot _ _ O
’s _ _ O
where _ _ O
about _ _ O
Type _ _ O
: _ _ O
nav_msgs _ _ O
/ _ _ O
Odometry.msg _ _ O
If _ _ O
you _ _ O
create _ _ O
a _ _ O
function _ _ O
named _ _ O
odomCallback _ _ O
that _ _ O
will _ _ O
be _ _ O
called _ _ O
every _ _ O
the _ _ O
program _ _ O
receive _ _ O
message _ _ O
from _ _ O
the _ _ O
topic _ _ O
/odom _ _ O
as _ _ O
follows _ _ O
: _ _ O
def _ _ O
odomCallback _ _ O
( _ _ O
data _ _ O
) _ _ O
: _ _ O
data.pose.pose.position.x _ _ O
is _ _ O
the _ _ O
position _ _ O
of _ _ O
the _ _ O
robot _ _ O
from _ _ O
the _ _ O
origin _ _ O
along _ _ O
the _ _ O
x-axis _ _ O
data.pose.pose.position.y _ _ O
is _ _ O
the _ _ O
position _ _ O
of _ _ O
the _ _ O
robot _ _ O
from _ _ O
the _ _ O
origin _ _ O
along _ _ O
the _ _ O
y-axis _ _ O
data.pose.pose.orientation.z _ _ O
together _ _ O
with _ _ O
data.pose.pose.orientation.w _ _ O
is _ _ O
the _ _ O
direction _ _ O
where _ _ O
the _ _ O
robot _ _ O
is _ _ O
facing _ _ O
( _ _ O
quaternion _ _ O
) _ _ O
. _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O

odom _ _ O
# _ _ O
! _ _ O
/usr _ _ O
/ _ _ O
bin _ _ O
/ _ _ O
env _ _ O
python _ _ O
import _ _ O
rospy _ _ O
import _ _ O
math _ _ O
from _ _ O
nav_msgs.msg _ _ O
import _ _ O
Odometry _ _ O
from _ _ O
tf.transformations _ _ O
import _ _ O
euler_from_quaternion _ _ O
def _ _ O
odomCallback _ _ O
( _ _ O
data _ _ O
) _ _ O
: _ _ O
# _ _ O
Convert _ _ O
quaternion _ _ O
to _ _ O
degree _ _ O
q _ _ O
= _ _ O
[ _ _ O
data.pose.pose.orientation.x _ _ O
, _ _ O
data.pose.pose.orientation.y _ _ O
, _ _ O
data.pose.pose.orientation.z _ _ O
, _ _ O
data.pose.pose.orientation.w _ _ O
] _ _ O
roll _ _ O
, _ _ O
pitch _ _ O
, _ _ O
yaw _ _ O
= _ _ O
euler_from_quaternion _ _ O
( _ _ O
q _ _ O
) _ _ O
# _ _ O
roll _ _ O
, _ _ O
pitch _ _ O
, _ _ O
and _ _ O
yaw _ _ O
are _ _ O
in _ _ O
radian _ _ O
degree _ _ O
= _ _ O
yaw _ _ O
* _ _ O
180 _ _ O
/ _ _ O
math.pi _ _ O
x _ _ O
= _ _ O
data.pose.pose.position.x _ _ O
y _ _ O
= _ _ O
data.pose.pose.position.y _ _ O
msg _ _ O
= _ _ O
" _ _ O
( _ _ O
% _ _ O
.6f _ _ O
, _ _ O
%.6f _ _ O
) _ _ O
at _ _ O
% _ _ O
.6f _ _ O
degree _ _ O
. _ _ O
" _ _ O
% _ _ O
( _ _ O
x _ _ O
, _ _ O
y _ _ O
, _ _ O
degree _ _ O
) _ _ O
rospy.loginfo _ _ O
( _ _ O
msg _ _ O
) _ _ O
def _ _ O
odomExample _ _ O
( _ _ O
) _ _ O
: _ _ O
rospy.init_node _ _ O
( _ _ O
' _ _ O
odom_example _ _ O
' _ _ O
, _ _ O
anonymous=True _ _ O
) _ _ O
rospy.Subscriber _ _ O
( _ _ O
' _ _ O
/ _ _ O
odom _ _ O
' _ _ O
, _ _ O
Odometry _ _ O
, _ _ O
odomCallback _ _ O
) _ _ O
rospy.spin _ _ O
( _ _ O
) _ _ O
if _ _ O
_ _ _ O
_ _ _ O
name _ _ O
_ _ _ O
_ _ _ O
= _ _ O
= _ _ O
' _ _ O
_ _ _ O
_ _ _ O
main _ _ O
_ _ _ O
_ _ _ O
' _ _ O
: _ _ O
odomExample _ _ O
( _ _ O
) _ _ O
Thumrongsak _ _ O
Kosiyatrakul _ _ O
Kobuki _ _ O
Node _ _ O



