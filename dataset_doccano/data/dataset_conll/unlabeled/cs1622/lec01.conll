unlabeled|cs1622|lec01
-DOCSTART- -X- -X- O

Intro _ _ O
and _ _ O
Rust _ _ O
CS _ _ O
1622 _ _ O
Jarrett _ _ O
Billingsley _ _ O

Class _ _ O
announcements _ _ O
● _ _ O
be _ _ O
sure _ _ O
to _ _ O
check _ _ O
the _ _ O
notes _ _ O
on _ _ O
each _ _ O
of _ _ O
my _ _ O
slides _ _ O
o _ _ O
for _ _ O
extra _ _ O
explanations _ _ O
, _ _ O
examples _ _ O
, _ _ O
snarky _ _ O
comments _ _ O
etc _ _ O
. _ _ O
o _ _ O
as _ _ O
well _ _ O
as _ _ O
answers _ _ O
to _ _ O
the _ _ O
questions _ _ O
on _ _ O
the _ _ O
slides _ _ O
so _ _ O
you _ _ O
can _ _ O
study _ _ O
. _ _ O
● _ _ O
also _ _ O
, _ _ O
be _ _ O
sure _ _ O
to _ _ O
use _ _ O
Powerpoint _ _ O
to _ _ O
view _ _ O
my _ _ O
slides _ _ O
o _ _ O
not _ _ O
Keynote _ _ O
, _ _ O
not _ _ O
Google _ _ O
Drive _ _ O
; _ _ O
they _ _ O
absolutely _ _ O
butcher _ _ O
alignment _ _ O
and _ _ O
diagrams _ _ O
and _ _ O
arrows _ _ O
and _ _ O
I _ _ O
use _ _ O
a _ _ O
lot _ _ O
of _ _ O
those _ _ O
. _ _ O
it _ _ O
’s _ _ O
bad _ _ O
enough _ _ O
that _ _ O
diagrams _ _ O
can _ _ O
become _ _ O
incorrect _ _ O
/ _ _ O
misleading _ _ O
. _ _ O
o _ _ O
if _ _ O
you _ _ O
use _ _ O
a _ _ O
note-taking _ _ O
app _ _ O
, _ _ O
open _ _ O
the _ _ O
pptx _ _ O
in _ _ O
Powerpoint _ _ O
and _ _ O
export _ _ O
it _ _ O
as _ _ O
PDF _ _ O
, _ _ O
then _ _ O
use _ _ O
that _ _ O
. _ _ O
it _ _ O
will _ _ O
look _ _ O
much _ _ O
better _ _ O
than _ _ O
opening _ _ O
the _ _ O
pptx _ _ O
directly _ _ O
in _ _ O
your _ _ O
note-taking _ _ O
app _ _ O
. _ _ O
2 _ _ O

Administrivia _ _ O
3 _ _ O

hi _ _ O
● _ _ O
you _ _ O
can _ _ O
just _ _ O
call _ _ O
me _ _ O
Jarrett _ _ O
● _ _ O
jarrett@cs.pitt.edu _ _ O
● _ _ O
sites.pitt.edu _ _ O
/ _ _ O
~jfb42 _ _ O
● _ _ O
Office _ _ O
hours _ _ O
: _ _ O
Mon _ _ O
/ _ _ O
Wed _ _ O
1 _ _ O
: _ _ O
15 _ _ O
- _ _ O
3 _ _ O
: _ _ O
30 _ _ O
in _ _ O
6509 _ _ O
SENSQ _ _ O
● _ _ O
Religious _ _ O
absences _ _ O
: _ _ O
contact _ _ O
me _ _ O
ASAP _ _ O
● _ _ O
Students _ _ O
with _ _ O
disabilities _ _ O
: _ _ O
contact _ _ O
the _ _ O
DRS _ _ O
ASAP _ _ O
● _ _ O
Everything _ _ O
in _ _ O
this _ _ O
section _ _ O
is _ _ O
also _ _ O
on _ _ O
my _ _ O
site _ _ O
in _ _ O
" _ _ O
course _ _ O
info _ _ O
" _ _ O
! _ _ O
o _ _ O
I _ _ O
use _ _ O
red _ _ O
on _ _ O
the _ _ O
slides _ _ O
for _ _ O
really _ _ O
important _ _ O
things _ _ O
4 _ _ O

Communication _ _ O
● _ _ O
I _ _ O
send _ _ O
announcements _ _ O
through _ _ O
Canvas _ _ O
which _ _ O
come _ _ O
thru _ _ O
email _ _ O
o _ _ O
it _ _ O
is _ _ O
not _ _ O
my _ _ O
responsibility _ _ O
to _ _ O
make _ _ O
sure _ _ O
you _ _ O
get _ _ O
them _ _ O
, _ _ O
it _ _ O
’s _ _ O
yours _ _ O
● _ _ O
announcements _ _ O
/ _ _ O
grades _ _ O
are _ _ O
the _ _ O
only _ _ O
things _ _ O
I _ _ O
use _ _ O
Canvas _ _ O
for _ _ O
o _ _ O
( _ _ O
well _ _ O
recording _ _ O
class _ _ O
too _ _ O
) _ _ O
o _ _ O
everything _ _ O
else _ _ O
is _ _ O
on _ _ O
my _ _ O
site _ _ O
. _ _ O
o _ _ O
including _ _ O
the _ _ O
course _ _ O
schedule _ _ O
/ _ _ O
syllabus _ _ O
. _ _ O
● _ _ O
Discord _ _ O
hours _ _ O
: _ _ O
most _ _ O
days _ _ O
after _ _ O
12PM _ _ O
and _ _ O
before _ _ O
9PM _ _ O
EDT _ _ O
o _ _ O
but _ _ O
I _ _ O
do _ _ O
n't _ _ O
really _ _ O
have _ _ O
a _ _ O
healthy _ _ O
work _ _ O
/ _ _ O
life _ _ O
separation _ _ O
so _ _ O
● _ _ O
For _ _ O
more _ _ O
" _ _ O
official _ _ O
" _ _ O
communications _ _ O
, _ _ O
or _ _ O
if _ _ O
you _ _ O
need _ _ O
my _ _ O
attention _ _ O
immediately _ _ O
, _ _ O
use _ _ O
email _ _ O
. _ _ O
o _ _ O
otherwise _ _ O
, _ _ O
Discord _ _ O
is _ _ O
preferred _ _ O
– _ _ O
much _ _ O
better _ _ O
for _ _ O
sharing _ _ O
code _ _ O
, _ _ O
screenshots _ _ O
, _ _ O
etc _ _ O
. _ _ O
in _ _ O
a _ _ O
much _ _ O
quicker _ _ O
way _ _ O
. _ _ O
5 _ _ O

Textbooks _ _ O
? _ _ O
? _ _ O
? _ _ O
● _ _ O
I _ _ O
'm _ _ O
not _ _ O
really _ _ O
a _ _ O
book _ _ O
person _ _ O
. _ _ O
● _ _ O
none _ _ O
of _ _ O
these _ _ O
are _ _ O
required _ _ O
and _ _ O
the _ _ O
first _ _ O
two _ _ O
are _ _ O
free _ _ O
( _ _ O
see _ _ O
course _ _ O
info _ _ O
) _ _ O
6 _ _ O

Grading _ _ O
● _ _ O
Projects _ _ O
( _ _ O
x4 _ _ O
) _ _ O
: _ _ O
60 _ _ O
% _ _ O
o _ _ O
each _ _ O
is _ _ O
worth _ _ O
15 _ _ O
% _ _ O
o _ _ O
there _ _ O
is _ _ O
a _ _ O
late _ _ O
submission _ _ O
policy _ _ O
, _ _ O
see _ _ O
the _ _ O
course _ _ O
info _ _ O
page _ _ O
● _ _ O
Exams _ _ O
( _ _ O
x2 _ _ O
) _ _ O
: _ _ O
40 _ _ O
% _ _ O
o _ _ O
each _ _ O
worth _ _ O
20 _ _ O
% _ _ O
o _ _ O
exam _ _ O
2 _ _ O
is _ _ O
not _ _ O
cumulative _ _ O
! _ _ O
it _ _ O
’s _ _ O
just _ _ O
on _ _ O
the _ _ O
stuff _ _ O
after _ _ O
exam _ _ O
1 _ _ O
. _ _ O
o _ _ O
on _ _ O
both _ _ O
exam _ _ O
days _ _ O
, _ _ O
we _ _ O
will _ _ O
do _ _ O
a _ _ O
short _ _ O
review _ _ O
session _ _ O
beforehand _ _ O
. _ _ O
● _ _ O
There _ _ O
are _ _ O
no _ _ O
labs _ _ O
or _ _ O
recitations _ _ O
or _ _ O
anything _ _ O
. _ _ O
● _ _ O
Attendance _ _ O
is _ _ O
not _ _ O
graded _ _ O
for _ _ O
lectures _ _ O
… _ _ O
o _ _ O
but _ _ O
people _ _ O
who _ _ O
do _ _ O
n't _ _ O
come _ _ O
and _ _ O
interact _ _ O
do _ _ O
n't _ _ O
do _ _ O
well _ _ O
. _ _ O
7 _ _ O

Teaching _ _ O
philosophy _ _ O
● _ _ O
I _ _ O
'm _ _ O
more _ _ O
of _ _ O
a _ _ O
" _ _ O
big _ _ O
picture _ _ O
" _ _ O
teacher _ _ O
o _ _ O
I _ _ O
care _ _ O
about _ _ O
high-level _ _ O
concepts _ _ O
and _ _ O
problem-solving _ _ O
o _ _ O
you _ _ O
wo _ _ O
n't _ _ O
get _ _ O
exam _ _ O
questions _ _ O
about _ _ O
function _ _ O
parameters _ _ O
● _ _ O
You _ _ O
are _ _ O
a _ _ O
student _ _ O
. _ _ O
you _ _ O
are _ _ O
supposed _ _ O
to _ _ O
be _ _ O
confused _ _ O
. _ _ O
o _ _ O
I _ _ O
wanna _ _ O
help _ _ O
you _ _ O
understand _ _ O
! _ _ O
o _ _ O
never _ _ O
say _ _ O
" _ _ O
this _ _ O
is _ _ O
a _ _ O
dumb _ _ O
question _ _ O
" _ _ O
cause _ _ O
there _ _ O
are _ _ O
n't _ _ O
any _ _ O
! _ _ O
oDON’T _ _ O
STRUGGLE _ _ O
IN _ _ O
SILENCE _ _ O
! _ _ O
! _ _ O
! _ _ O
! _ _ O
EVER _ _ O
! _ _ O
! _ _ O
● _ _ O
What _ _ O
is _ _ O
a _ _ O
university _ _ O
setting _ _ O
good _ _ O
for _ _ O
today _ _ O
? _ _ O
o _ _ O
focus _ _ O
, _ _ O
practice _ _ O
, _ _ O
and _ _ O
access _ _ O
to _ _ O
people _ _ O
who _ _ O
know _ _ O
stuff _ _ O
o _ _ O
your _ _ O
friends _ _ O
do _ _ O
not _ _ O
know _ _ O
as _ _ O
much _ _ O
about _ _ O
this _ _ O
stuff _ _ O
as _ _ O
I _ _ O
do _ _ O
o _ _ O
but _ _ O
also _ _ O
… _ _ O
your _ _ O
friends _ _ O
can _ _ O
be _ _ O
very _ _ O
helpful _ _ O
when _ _ O
studying _ _ O
or _ _ O
in _ _ O
practical _ _ O
matters _ _ O
( _ _ O
installing _ _ O
stuff _ _ O
etc _ _ O
) _ _ O
! _ _ O
o _ _ O
studying _ _ O
together _ _ O
is _ _ O
not _ _ O
cheating _ _ O
! _ _ O
do _ _ O
it _ _ O
! _ _ O
8 _ _ O

I _ _ O
can _ _ O
tell _ _ O
when _ _ O
you _ _ O
cheat _ _ O
: _ _ O
^ _ _ O
) _ _ O
● _ _ O
If _ _ O
you _ _ O
cheat _ _ O
, _ _ O
you _ _ O
fail _ _ O
the _ _ O
course _ _ O
. _ _ O
Period _ _ O
. _ _ O
● _ _ O
Do _ _ O
n't _ _ O
post _ _ O
your _ _ O
code _ _ O
on _ _ O
github _ _ O
, _ _ O
baidu _ _ O
etc _ _ O
. _ _ O
● _ _ O
Do _ _ O
n't _ _ O
" _ _ O
help _ _ O
" _ _ O
your _ _ O
friends _ _ O
by _ _ O
giving _ _ O
them _ _ O
code _ _ O
. _ _ O
9 _ _ O

Academic _ _ O
Integrity _ _ O
● _ _ O
If _ _ O
you _ _ O
" _ _ O
help _ _ O
" _ _ O
a _ _ O
friend _ _ O
, _ _ O
you _ _ O
are _ _ O
only _ _ O
delaying _ _ O
their _ _ O
failure _ _ O
until _ _ O
a _ _ O
later _ _ O
point _ _ O
when _ _ O
it _ _ O
will _ _ O
be _ _ O
too _ _ O
late _ _ O
to _ _ O
fix _ _ O
the _ _ O
problems _ _ O
. _ _ O
o _ _ O
a _ _ O
0 _ _ O
will _ _ O
hurt _ _ O
way _ _ O
, _ _ O
way _ _ O
more _ _ O
than _ _ O
a _ _ O
60 _ _ O
, _ _ O
and _ _ O
it _ _ O
'll _ _ O
hurt _ _ O
you _ _ O
both _ _ O
. _ _ O
● _ _ O
Do _ _ O
n't _ _ O
cheat _ _ O
if _ _ O
your _ _ O
enrollment _ _ O
is _ _ O
contingent _ _ O
upon _ _ O
your _ _ O
GPA _ _ O
. _ _ O
o _ _ O
or _ _ O
your _ _ O
ROTC _ _ O
or _ _ O
your _ _ O
student _ _ O
visa _ _ O
or _ _ O
your _ _ O
graduation _ _ O
or _ _ O
whatever _ _ O
. _ _ O
● _ _ O
Generally _ _ O
speaking _ _ O
, _ _ O
I _ _ O
trust _ _ O
you _ _ O
! _ _ O
o _ _ O
I _ _ O
try _ _ O
to _ _ O
be _ _ O
accommodating _ _ O
about _ _ O
extensions _ _ O
and _ _ O
such _ _ O
o _ _ O
I _ _ O
do _ _ O
n’t _ _ O
think _ _ O
most _ _ O
cheaters _ _ O
are _ _ O
being _ _ O
lazy _ _ O
● _ _ O
But _ _ O
you _ _ O
’re _ _ O
an _ _ O
adult _ _ O
, _ _ O
and _ _ O
are _ _ O
responsible _ _ O
for _ _ O
your _ _ O
actions _ _ O
. _ _ O
o _ _ O
I _ _ O
hate _ _ O
being _ _ O
in _ _ O
a _ _ O
position _ _ O
where _ _ O
I _ _ O
have _ _ O
your _ _ O
future _ _ O
in _ _ O
my _ _ O
hands _ _ O
… _ _ O
o _ _ O
especially _ _ O
when _ _ O
you _ _ O
're _ _ O
the _ _ O
one _ _ O
who _ _ O
put _ _ O
it _ _ O
there _ _ O
. _ _ O
o _ _ O
Do _ _ O
not _ _ O
take _ _ O
advantage _ _ O
of _ _ O
my _ _ O
trust _ _ O
. _ _ O
● _ _ O
If _ _ O
you _ _ O
're _ _ O
confused _ _ O
, _ _ O
do _ _ O
n't _ _ O
cheat _ _ O
, _ _ O
ask _ _ O
for _ _ O
help _ _ O
. _ _ O
yes _ _ O
, _ _ O
even _ _ O
on _ _ O
the _ _ O
exams _ _ O
. _ _ O
yes _ _ O
, _ _ O
even _ _ O
an _ _ O
hour _ _ O
before _ _ O
the _ _ O
project _ _ O
is _ _ O
due _ _ O
. _ _ O
10 _ _ O

Intro _ _ O
11 _ _ O

What _ _ O
, _ _ O
Why _ _ O
, _ _ O
and _ _ O
How _ _ O
● _ _ O
for _ _ O
every _ _ O
topic _ _ O
, _ _ O
ask _ _ O
yourself _ _ O
( _ _ O
and _ _ O
me _ _ O
! _ _ O
) _ _ O
these _ _ O
questions _ _ O
: _ _ O
Why _ _ O
do _ _ O
we _ _ O
use _ _ O
it _ _ O
? _ _ O
" _ _ O
splitting _ _ O
code _ _ O
into _ _ O
functions _ _ O
makes _ _ O
it _ _ O
easier _ _ O
to _ _ O
read _ _ O
, _ _ O
understand _ _ O
, _ _ O
and _ _ O
reuse _ _ O
. _ _ O
" _ _ O
What _ _ O
is _ _ O
it _ _ O
? _ _ O
" _ _ O
a _ _ O
function _ _ O
is _ _ O
a _ _ O
named _ _ O
piece _ _ O
of _ _ O
code _ _ O
. _ _ O
" _ _ O
" _ _ O
in _ _ O
Java _ _ O
, _ _ O
you _ _ O
write _ _ O
the _ _ O
return _ _ O
type _ _ O
, _ _ O
How _ _ O
do _ _ O
we _ _ O
do _ _ O
it _ _ O
? _ _ O
then _ _ O
the _ _ O
name _ _ O
, _ _ O
then _ _ O
a _ _ O
left _ _ O
parenthesis _ _ O
, _ _ O
then _ _ O
any _ _ O
arguments _ _ O
, _ _ O
with _ _ O
the _ _ O
type _ _ O
and _ _ O
name _ _ O
, _ _ O
separated _ _ O
by _ _ O
commas _ _ O
, _ _ O
then _ _ O
a _ _ O
right _ _ O
parenthesis _ _ O
, _ _ O
then _ _ O
… _ _ O
what _ _ O
and _ _ O
why _ _ O
are _ _ O
almost _ _ O
always _ _ O
more _ _ O
important _ _ O
than _ _ O
how _ _ O
. _ _ O
on _ _ O
the _ _ O
exams _ _ O
, _ _ O
be _ _ O
sure _ _ O
you _ _ O
are _ _ O
answering _ _ O
the _ _ O
right _ _ O
question _ _ O
. _ _ O
if _ _ O
I _ _ O
ask _ _ O
" _ _ O
what _ _ O
is _ _ O
X _ _ O
, _ _ O
" _ _ O
do _ _ O
n't _ _ O
explain _ _ O
how _ _ O
to _ _ O
X. _ _ O
12 _ _ O

What _ _ O
is _ _ O
language _ _ O
? _ _ O
● _ _ O
a _ _ O
system _ _ O
of _ _ O
encoding _ _ O
information _ _ O
by _ _ O
using _ _ O
arbitrary _ _ O
symbols _ _ O
o _ _ O
" _ _ O
symbols _ _ O
" _ _ O
can _ _ O
also _ _ O
include _ _ O
sounds _ _ O
, _ _ O
objects _ _ O
, _ _ O
actions _ _ O
, _ _ O
etc _ _ O
. _ _ O
human _ _ O
languages _ _ O
are _ _ O
massively _ _ O
complex _ _ O
, _ _ O
like _ _ O
anything _ _ O
involving _ _ O
brains _ _ O
. _ _ O
within _ _ O
the _ _ O
mess _ _ O
, _ _ O
there _ _ O
are _ _ O
kernels _ _ O
of _ _ O
mathematical _ _ O
and _ _ O
logical _ _ O
truth _ _ O
… _ _ O
∃𝑥∈𝑆 _ _ O
∀𝑦≠𝑥 _ _ O
𝑃 _ _ O
𝑦 _ _ O
→ _ _ O
𝑄 _ _ O
( _ _ O
𝑥 _ _ O
) _ _ O
… _ _ O
upon _ _ O
which _ _ O
computer _ _ O
languages _ _ O
were _ _ O
designed _ _ O
. _ _ O
13 _ _ O

Computer _ _ O
languages _ _ O
● _ _ O
modeled _ _ O
after _ _ O
human _ _ O
languages _ _ O
, _ _ O
these _ _ O
are _ _ O
much _ _ O
simpler _ _ O
languages _ _ O
used _ _ O
to _ _ O
encode _ _ O
information _ _ O
in _ _ O
a _ _ O
way _ _ O
that _ _ O
is _ _ O
useful _ _ O
for _ _ O
computing _ _ O
. _ _ O
declarative _ _ O
languages _ _ O
encode _ _ O
data _ _ O
and _ _ O
rules _ _ O
. _ _ O
programming _ _ O
languages _ _ O
encode _ _ O
instructions _ _ O
for _ _ O
the _ _ O
computer _ _ O
to _ _ O
execute _ _ O
. _ _ O
interchange _ _ O
and _ _ O
binary _ _ O
file _ _ O
formats _ _ O
encode _ _ O
domain- _ _ O
or _ _ O
application-specific _ _ O
data _ _ O
. _ _ O
even _ _ O
things _ _ O
like _ _ O
network _ _ O
protocols _ _ O
are _ _ O
a _ _ O
kind _ _ O
of _ _ O
language _ _ O
! _ _ O
14 _ _ O

Programming _ _ O
languages _ _ O
● _ _ O
one _ _ O
definition _ _ O
is _ _ O
that _ _ O
programs _ _ O
are _ _ O
sequences _ _ O
of _ _ O
instructions _ _ O
… _ _ O
● _ _ O
but _ _ O
programs _ _ O
are _ _ O
also _ _ O
proofs _ _ O
. _ _ O
fn _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
for _ _ O
i _ _ O
in _ _ O
0 _ _ O
.. _ _ O
10 _ _ O
{ _ _ O
println _ _ O
! _ _ O
( _ _ O
"i _ _ O
= _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
i _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
the _ _ O
Curry-Howard _ _ O
correspondence _ _ O
shows _ _ O
that _ _ O
programs _ _ O
and _ _ O
proofs _ _ O
are _ _ O
two _ _ O
ways _ _ O
of _ _ O
expressing _ _ O
the _ _ O
same _ _ O
mathematical _ _ O
objects _ _ O
. _ _ O
there _ _ O
are _ _ O
proof _ _ O
languages _ _ O
and _ _ O
proof _ _ O
assistants _ _ O
which _ _ O
can _ _ O
function _ _ O
as _ _ O
both _ _ O
programming _ _ O
languages _ _ O
and _ _ O
proof _ _ O
checkers _ _ O
. _ _ O
15 _ _ O

The _ _ O
Origin _ _ O
of _ _ O
( _ _ O
high-level _ _ O
programming _ _ O
) _ _ O
Languages _ _ O
● _ _ O
as _ _ O
you _ _ O
learned _ _ O
in _ _ O
447 _ _ O
, _ _ O
CPUs _ _ O
execute _ _ O
machine _ _ O
code _ _ O
… _ _ O
o _ _ O
and _ _ O
assembly _ _ O
language _ _ O
is _ _ O
a _ _ O
textual _ _ O
representation _ _ O
of _ _ O
that _ _ O
. _ _ O
main _ _ O
: _ _ O
but _ _ O
even _ _ O
the _ _ O
simplest _ _ O
tasks _ _ O
take _ _ O
a _ _ O
lot _ _ O
of _ _ O
code _ _ O
in _ _ O
li _ _ O
s0 _ _ O
, _ _ O
0 _ _ O
assembly _ _ O
, _ _ O
and _ _ O
more _ _ O
code _ _ O
= _ _ O
more _ _ O
mistakes _ _ O
. _ _ O
_ _ _ O
loop _ _ O
: _ _ O
la _ _ O
a0 _ _ O
, _ _ O
msg _ _ O
li _ _ O
v0 _ _ O
, _ _ O
4 _ _ O
we _ _ O
invented _ _ O
high-level _ _ O
languages _ _ O
( _ _ O
HLLs _ _ O
) _ _ O
to _ _ O
let _ _ O
syscall _ _ O
us _ _ O
write _ _ O
programs _ _ O
in _ _ O
shorter _ _ O
, _ _ O
human-friendly _ _ O
ways _ _ O
. _ _ O
move _ _ O
a0 _ _ O
, _ _ O
s0 _ _ O
li _ _ O
v0 _ _ O
, _ _ O
1 _ _ O
fn _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
syscall _ _ O
for _ _ O
i _ _ O
in _ _ O
0 _ _ O
.. _ _ O
10 _ _ O
{ _ _ O
li _ _ O
a0 _ _ O
, _ _ O
' _ _ O
\n _ _ O
' _ _ O
li _ _ O
v0 _ _ O
, _ _ O
11 _ _ O
println _ _ O
! _ _ O
( _ _ O
"i _ _ O
= _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
i _ _ O
) _ _ O
; _ _ O
syscall _ _ O
} _ _ O
add _ _ O
s0 _ _ O
, _ _ O
s0 _ _ O
, _ _ O
1 _ _ O
} _ _ O
blt _ _ O
s0 _ _ O
, _ _ O
10 _ _ O
, _ _ O
_ _ _ O
loop _ _ O
16 _ _ O

Performance _ _ O
∝ _ _ O
1 _ _ O
/ _ _ O
Abstraction _ _ O
● _ _ O
HLLs _ _ O
allow _ _ O
us _ _ O
to _ _ O
focus _ _ O
more _ _ O
on _ _ O
solving _ _ O
problems _ _ O
than _ _ O
on _ _ O
holding _ _ O
the _ _ O
CPU _ _ O
's _ _ O
hand _ _ O
through _ _ O
every _ _ O
step _ _ O
of _ _ O
computation _ _ O
● _ _ O
but _ _ O
most _ _ O
abstractions _ _ O
come _ _ O
at _ _ O
a _ _ O
performance _ _ O
cost _ _ O
for _ _ O
( _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
n _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
A _ _ O
[ _ _ O
i _ _ O
] _ _ O
= _ _ O
B _ _ O
[ _ _ O
i _ _ O
] _ _ O
+ _ _ O
C _ _ O
[ _ _ O
i _ _ O
] _ _ O
; _ _ O
} _ _ O
A _ _ O
= _ _ O
B _ _ O
+ _ _ O
C _ _ O
lower-level _ _ O
languages _ _ O
like _ _ O
C _ _ O
provide _ _ O
abstractions _ _ O
that _ _ O
better _ _ O
match _ _ O
* _ _ O
what _ _ O
the _ _ O
underlying _ _ O
hardware _ _ O
provides _ _ O
. _ _ O
higher-level _ _ O
languages _ _ O
like _ _ O
Python _ _ O
give _ _ O
you _ _ O
more _ _ O
powerful _ _ O
abstractions _ _ O
, _ _ O
at _ _ O
the _ _ O
cost _ _ O
of _ _ O
lower _ _ O
performance _ _ O
( _ _ O
usually _ _ O
) _ _ O
. _ _ O
but _ _ O
it _ _ O
all _ _ O
depends _ _ O
on _ _ O
the _ _ O
CPU _ _ O
design _ _ O
and _ _ O
the _ _ O
quality _ _ O
of _ _ O
the _ _ O
language _ _ O
implementation _ _ O
. _ _ O
17 _ _ O

Compilers _ _ O
18 _ _ O

What _ _ O
's _ _ O
a _ _ O
compiler _ _ O
? _ _ O
● _ _ O
it _ _ O
's _ _ O
a _ _ O
program _ _ O
that _ _ O
translates _ _ O
one _ _ O
programming _ _ O
language _ _ O
( _ _ O
the _ _ O
source _ _ O
language _ _ O
) _ _ O
to _ _ O
another _ _ O
( _ _ O
the _ _ O
target _ _ O
language _ _ O
) _ _ O
. _ _ O
● _ _ O
typically _ _ O
this _ _ O
is _ _ O
from _ _ O
an _ _ O
HLL _ _ O
to _ _ O
a _ _ O
machine _ _ O
language _ _ O
. _ _ O
Java _ _ O
transpilers _ _ O
convert _ _ O
between _ _ O
HLLs _ _ O
. _ _ O
javac _ _ O
C _ _ O
gcc _ _ O
recompilers _ _ O
convert _ _ O
between _ _ O
machine _ _ O
languages _ _ O
. _ _ O
JVM _ _ O
Bytecode _ _ O
and _ _ O
decompilers _ _ O
attempt _ _ O
to _ _ O
reconstruct _ _ O
HLL _ _ O
code _ _ O
from _ _ O
machine _ _ O
language _ _ O
! _ _ O
e.g. _ _ O
ghidra _ _ O
, _ _ O
hex-rays _ _ O
x86 _ _ O
Machine _ _ O
Code _ _ O
java _ _ O
19 _ _ O

Ahead-of-time _ _ O
vs. _ _ O
Just-in-time _ _ O
( _ _ O
AOT _ _ O
vs _ _ O
JIT _ _ O
) _ _ O
● _ _ O
AOT _ _ O
compilers _ _ O
produce _ _ O
a _ _ O
file _ _ O
that _ _ O
contains _ _ O
the _ _ O
native _ _ O
machine _ _ O
code _ _ O
. _ _ O
● _ _ O
JIT _ _ O
compilers _ _ O
produce _ _ O
native _ _ O
machine _ _ O
code _ _ O
right _ _ O
before _ _ O
it _ _ O
's _ _ O
needed _ _ O
. _ _ O
C _ _ O
Java _ _ O
gcc _ _ O
CPU _ _ O
hello.exe _ _ O
JVM _ _ O
javac _ _ O
hello.class _ _ O
java _ _ O
… _ _ O
can _ _ O
use _ _ O
an _ _ O
interpreter _ _ O
to _ _ O
run _ _ O
the _ _ O
bytecode _ _ O
, _ _ O
or _ _ O
JIT _ _ O
it _ _ O
to _ _ O
native _ _ O
code _ _ O
. _ _ O
20 _ _ O

Okay _ _ O
, _ _ O
okay _ _ O
: _ _ O
HOW _ _ O
does _ _ O
a _ _ O
compiler _ _ O
WORK _ _ O
● _ _ O
there _ _ O
are _ _ O
kind _ _ O
of _ _ O
two _ _ O
broad _ _ O
stages _ _ O
: _ _ O
the _ _ O
frontend _ _ O
reads _ _ O
the _ _ O
source _ _ O
code _ _ O
and _ _ O
checks _ _ O
it _ _ O
for _ _ O
" _ _ O
correctness _ _ O
. _ _ O
" _ _ O
the _ _ O
backend _ _ O
produces _ _ O
target _ _ O
code _ _ O
from _ _ O
the _ _ O
compiler _ _ O
's _ _ O
" _ _ O
idea _ _ O
" _ _ O
of _ _ O
your _ _ O
program _ _ O
. _ _ O
Frontend _ _ O
Backend _ _ O
hello.exe _ _ O
hello.c _ _ O
this _ _ O
" _ _ O
idea _ _ O
" _ _ O
is _ _ O
the _ _ O
intermediate _ _ O
representation _ _ O
( _ _ O
IR _ _ O
) _ _ O
: _ _ O
a _ _ O
sort _ _ O
of _ _ O
third _ _ O
language _ _ O
which _ _ O
" _ _ O
bridges _ _ O
the _ _ O
gap _ _ O
. _ _ O
" _ _ O
21 _ _ O

Frontend _ _ O
step _ _ O
1 _ _ O
: _ _ O
Lexical _ _ O
Analysis _ _ O
( _ _ O
Lexing _ _ O
( _ _ O
or _ _ O
Scanning _ _ O
) _ _ O
) _ _ O
● _ _ O
lexing _ _ O
splits _ _ O
the _ _ O
source _ _ O
text _ _ O
into _ _ O
tokens _ _ O
: _ _ O
words _ _ O
, _ _ O
symbols _ _ O
, _ _ O
etc _ _ O
. _ _ O
● _ _ O
it _ _ O
's _ _ O
a _ _ O
straightforward _ _ O
string _ _ O
processing _ _ O
algorithm _ _ O
. _ _ O
This _ _ O
is _ _ O
English _ _ O
. _ _ O
This _ _ O
, _ _ O
is _ _ O
, _ _ O
English _ _ O
, _ _ O
. _ _ O
void _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
} _ _ O
void _ _ O
, _ _ O
main _ _ O
, _ _ O
( _ _ O
, _ _ O
) _ _ O
, _ _ O
{ _ _ O
, _ _ O
} _ _ O
" _ _ O
hello _ _ O
! _ _ O
error _ _ O
: _ _ O
unclosed _ _ O
string _ _ O
literal _ _ O
if _ _ O
< _ _ O
class _ _ O
) _ _ O
++ _ _ O
if _ _ O
, _ _ O
< _ _ O
, _ _ O
class _ _ O
, _ _ O
) _ _ O
, _ _ O
+ _ _ O
+ _ _ O
this _ _ O
last _ _ O
one _ _ O
is _ _ O
nonsense _ _ O
, _ _ O
but _ _ O
the _ _ O
lexer _ _ O
does _ _ O
n't _ _ O
know _ _ O
that _ _ O
. _ _ O
that _ _ O
's _ _ O
the _ _ O
responsibility _ _ O
of _ _ O
… _ _ O
22 _ _ O

Frontend _ _ O
step _ _ O
2 _ _ O
: _ _ O
Syntactic _ _ O
Analysis _ _ O
( _ _ O
Parsing _ _ O
) _ _ O
● _ _ O
parsing _ _ O
takes _ _ O
the _ _ O
lexed _ _ O
tokens _ _ O
and _ _ O
extracts _ _ O
structure _ _ O
from _ _ O
them _ _ O
. _ _ O
● _ _ O
a _ _ O
language _ _ O
's _ _ O
grammar _ _ O
defines _ _ O
the _ _ O
rules _ _ O
of _ _ O
these _ _ O
structures _ _ O
. _ _ O
IF-ELSE _ _ O
S _ _ O
VP _ _ O
NP _ _ O
ART _ _ O
CALL _ _ O
PP _ _ O
N _ _ O
V _ _ O
PREP _ _ O
PRN _ _ O
The _ _ O
cat _ _ O
stares _ _ O
at _ _ O
me _ _ O
. _ _ O
ID _ _ O
ID _ _ O
[ _ _ O
] _ _ O
CALL _ _ O
ID _ _ O
[ _ _ O
] _ _ O
if _ _ O
( _ _ O
x _ _ O
) _ _ O
y _ _ O
( _ _ O
) _ _ O
; _ _ O
else _ _ O
z _ _ O
( _ _ O
) _ _ O
; _ _ O
this _ _ O
is _ _ O
where _ _ O
you _ _ O
get _ _ O
syntactic _ _ O
errors _ _ O
, _ _ O
like _ _ O
" _ _ O
missing _ _ O
semicolon _ _ O
" _ _ O
or _ _ O
" _ _ O
unexpected _ _ O
closing _ _ O
paren _ _ O
" _ _ O
or _ _ O
whatever _ _ O
. _ _ O
the _ _ O
result _ _ O
is _ _ O
an _ _ O
AST _ _ O
: _ _ O
Abstract _ _ O
Syntax _ _ O
Tree _ _ O
. _ _ O
but _ _ O
this _ _ O
just _ _ O
looks _ _ O
like _ _ O
a _ _ O
program _ _ O
. _ _ O
is _ _ O
it _ _ O
one _ _ O
? _ _ O
23 _ _ O

Frontend _ _ O
step _ _ O
3 _ _ O
: _ _ O
Semantic _ _ O
Analysis _ _ O
● _ _ O
this _ _ O
checks _ _ O
for _ _ O
" _ _ O
correctness _ _ O
" _ _ O
according _ _ O
to _ _ O
the _ _ O
rules _ _ O
of _ _ O
the _ _ O
language _ _ O
. _ _ O
o _ _ O
things _ _ O
like _ _ O
type _ _ O
checking _ _ O
, _ _ O
name _ _ O
usage _ _ O
, _ _ O
privacy _ _ O
… _ _ O
Colorless _ _ O
green _ _ O
dreams _ _ O
sleep _ _ O
furiously _ _ O
. _ _ O
( _ _ O
syntactically _ _ O
correct _ _ O
, _ _ O
but _ _ O
nonsense _ _ O
. _ _ O
) _ _ O
x _ _ O
= _ _ O
10 _ _ O
; _ _ O
error _ _ O
: _ _ O
undefined _ _ O
reference _ _ O
to _ _ O
' _ _ O
x _ _ O
' _ _ O
int _ _ O
x _ _ O
= _ _ O
1.0 _ _ O
; _ _ O
error _ _ O
: _ _ O
possible _ _ O
loss _ _ O
of _ _ O
precision _ _ O
int _ _ O
x _ _ O
= _ _ O
1 _ _ O
; _ _ O
👍 _ _ O
I _ _ O
keep _ _ O
quoting _ _ O
" _ _ O
correctness _ _ O
" _ _ O
because _ _ O
it _ _ O
's _ _ O
absolutely _ _ O
possible _ _ O
to _ _ O
write _ _ O
incorrect _ _ O
programs _ _ O
that _ _ O
pass _ _ O
these _ _ O
checks _ _ O
. _ _ O
much _ _ O
PL _ _ O
research _ _ O
is _ _ O
about _ _ O
making _ _ O
these _ _ O
checks _ _ O
better _ _ O
! _ _ O
24 _ _ O

Backend _ _ O
: _ _ O
optimization _ _ O
and _ _ O
code _ _ O
generation _ _ O
● _ _ O
optimization _ _ O
rewrites _ _ O
the _ _ O
program _ _ O
to _ _ O
do _ _ O
the _ _ O
same _ _ O
things _ _ O
but _ _ O
faster _ _ O
. _ _ O
● _ _ O
codegen _ _ O
produces _ _ O
the _ _ O
target _ _ O
language _ _ O
code _ _ O
from _ _ O
the _ _ O
IR _ _ O
. _ _ O
for _ _ O
( _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
4 _ _ O
; _ _ O
i++ _ _ O
) _ _ O
A _ _ O
[ _ _ O
i _ _ O
] _ _ O
= _ _ O
B _ _ O
[ _ _ O
i _ _ O
] _ _ O
+ _ _ O
C _ _ O
[ _ _ O
i _ _ O
] _ _ O
; _ _ O
A _ _ O
[ _ _ O
0 _ _ O
] _ _ O
= _ _ O
B _ _ O
[ _ _ O
0 _ _ O
] _ _ O
+ _ _ O
C _ _ O
[ _ _ O
0 _ _ O
] _ _ O
; _ _ O
A _ _ O
[ _ _ O
1 _ _ O
] _ _ O
= _ _ O
B _ _ O
[ _ _ O
1 _ _ O
] _ _ O
+ _ _ O
C _ _ O
[ _ _ O
1 _ _ O
] _ _ O
; _ _ O
A _ _ O
[ _ _ O
2 _ _ O
] _ _ O
= _ _ O
B _ _ O
[ _ _ O
2 _ _ O
] _ _ O
+ _ _ O
C _ _ O
[ _ _ O
2 _ _ O
] _ _ O
; _ _ O
A _ _ O
[ _ _ O
3 _ _ O
] _ _ O
= _ _ O
B _ _ O
[ _ _ O
3 _ _ O
] _ _ O
+ _ _ O
C _ _ O
[ _ _ O
3 _ _ O
] _ _ O
; _ _ O
la _ _ O
la _ _ O
la _ _ O
lw _ _ O
lw _ _ O
add _ _ O
sw _ _ O
lw _ _ O
lw _ _ O
add _ _ O
sw _ _ O
lw _ _ O
lw _ _ O
add _ _ O
sw _ _ O
lw _ _ O
lw _ _ O
add _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
A _ _ O
t1 _ _ O
, _ _ O
B _ _ O
t2 _ _ O
, _ _ O
C _ _ O
t3 _ _ O
, _ _ O
0 _ _ O
( _ _ O
t1 _ _ O
) _ _ O
t4 _ _ O
, _ _ O
0 _ _ O
( _ _ O
t2 _ _ O
) _ _ O
t3 _ _ O
, _ _ O
t3 _ _ O
, _ _ O
t4 _ _ O
t3 _ _ O
, _ _ O
0 _ _ O
( _ _ O
t0 _ _ O
) _ _ O
t3 _ _ O
, _ _ O
4 _ _ O
( _ _ O
t1 _ _ O
) _ _ O
t4 _ _ O
, _ _ O
4 _ _ O
( _ _ O
t2 _ _ O
) _ _ O
t3 _ _ O
, _ _ O
t3 _ _ O
, _ _ O
t4 _ _ O
t3 _ _ O
, _ _ O
4 _ _ O
( _ _ O
t0 _ _ O
) _ _ O
t3 _ _ O
, _ _ O
8 _ _ O
( _ _ O
t1 _ _ O
) _ _ O
t4 _ _ O
, _ _ O
8 _ _ O
( _ _ O
t2 _ _ O
) _ _ O
t3 _ _ O
, _ _ O
t3 _ _ O
, _ _ O
t4 _ _ O
t3 _ _ O
, _ _ O
12 _ _ O
( _ _ O
t0 _ _ O
) _ _ O
t3 _ _ O
, _ _ O
12 _ _ O
( _ _ O
t1 _ _ O
) _ _ O
t4 _ _ O
, _ _ O
12 _ _ O
( _ _ O
t2 _ _ O
) _ _ O
t3 _ _ O
, _ _ O
t3 _ _ O
, _ _ O
t4 _ _ O
t3 _ _ O
, _ _ O
12 _ _ O
( _ _ O
t0 _ _ O
) _ _ O
and _ _ O
boom _ _ O
... _ _ O
we _ _ O
have _ _ O
a _ _ O
program _ _ O
! _ _ O
25 _ _ O

What _ _ O
we _ _ O
'll _ _ O
talk _ _ O
about _ _ O
along _ _ O
the _ _ O
way _ _ O
● _ _ O
grammars _ _ O
and _ _ O
abstract _ _ O
syntax _ _ O
trees _ _ O
! _ _ O
● _ _ O
type _ _ O
theory _ _ O
and _ _ O
type _ _ O
systems _ _ O
! _ _ O
o _ _ O
static _ _ O
and _ _ O
dynamic _ _ O
typing _ _ O
! _ _ O
o _ _ O
strong _ _ O
and _ _ O
weak _ _ O
typing _ _ O
! _ _ O
o _ _ O
parametric _ _ O
types _ _ O
and _ _ O
generics _ _ O
! _ _ O
● _ _ O
runtime _ _ O
representation _ _ O
! _ _ O
● _ _ O
memory _ _ O
management _ _ O
! _ _ O
● _ _ O
ABIs _ _ O
and _ _ O
linking _ _ O
! _ _ O
● _ _ O
and _ _ O
more _ _ O
! _ _ O
26 _ _ O

Rust _ _ O
27 _ _ O

If _ _ O
you _ _ O
want _ _ O
to _ _ O
write _ _ O
a _ _ O
compiler _ _ O
… _ _ O
● _ _ O
different _ _ O
problems _ _ O
require _ _ O
different _ _ O
tools _ _ O
. _ _ O
● _ _ O
when _ _ O
writing _ _ O
compilers _ _ O
, _ _ O
some _ _ O
language _ _ O
features _ _ O
will _ _ O
be _ _ O
very _ _ O
useful _ _ O
: _ _ O
Java _ _ O
C _ _ O
Rust _ _ O
Good _ _ O
string _ _ O
manipulation _ _ O
4 _ _ O
/ _ _ O
5 _ _ O
0 _ _ O
/ _ _ O
5 _ _ O
5 _ _ O
/ _ _ O
5 _ _ O
Automatic _ _ O
memory _ _ O
management _ _ O
5 _ _ O
/ _ _ O
5 _ _ O
0 _ _ O
/ _ _ O
5 _ _ O
5 _ _ O
/ _ _ O
5 _ _ O
Generics _ _ O
( _ _ O
types _ _ O
and _ _ O
code _ _ O
) _ _ O
4 _ _ O
/ _ _ O
5 _ _ O
1 _ _ O
/ _ _ O
5 _ _ O
4 _ _ O
/ _ _ O
5 _ _ O
Functional _ _ O
programming _ _ O
style _ _ O
3 _ _ O
/ _ _ O
5 _ _ O
0 _ _ O
/ _ _ O
5 _ _ O
4 _ _ O
/ _ _ O
5 _ _ O
Algebraic _ _ O
data _ _ O
types _ _ O
1 _ _ O
/ _ _ O
5 _ _ O
1 _ _ O
/ _ _ O
5 _ _ O
5 _ _ O
/ _ _ O
5 _ _ O
Less _ _ O
repetitive _ _ O
boilerplate _ _ O
0 _ _ O
/ _ _ O
5 _ _ O
0 _ _ O
/ _ _ O
5 _ _ O
4 _ _ O
/ _ _ O
5 _ _ O
Strong _ _ O
, _ _ O
expressive _ _ O
type _ _ O
system _ _ O
2 _ _ O
/ _ _ O
5 _ _ O
0 _ _ O
/ _ _ O
5 _ _ O
5 _ _ O
/ _ _ O
5 _ _ O
ratings _ _ O
are _ _ O
my _ _ O
opinion _ _ O
based _ _ O
on _ _ O
experience _ _ O
. _ _ O
this _ _ O
is _ _ O
a _ _ O
limited _ _ O
view _ _ O
of _ _ O
their _ _ O
strengths _ _ O
/ _ _ O
weaknesses _ _ O
. _ _ O
28 _ _ O

What _ _ O
is _ _ O
Rust _ _ O
? _ _ O
● _ _ O
it _ _ O
's _ _ O
a _ _ O
systems _ _ O
language _ _ O
like _ _ O
C _ _ O
, _ _ O
but _ _ O
designed _ _ O
to _ _ O
not _ _ O
be _ _ O
terrible _ _ O
. _ _ O
● _ _ O
it _ _ O
's _ _ O
rigorously _ _ O
defined _ _ O
and _ _ O
borrows _ _ O
many _ _ O
features _ _ O
from _ _ O
PL _ _ O
theory _ _ O
… _ _ O
● _ _ O
… _ _ O
but _ _ O
also _ _ O
tries _ _ O
to _ _ O
be _ _ O
a _ _ O
practical _ _ O
language _ _ O
for _ _ O
writing _ _ O
real _ _ O
programs _ _ O
. _ _ O
you _ _ O
might _ _ O
have _ _ O
heard _ _ O
that _ _ O
it _ _ O
's _ _ O
complex _ _ O
and _ _ O
confusing _ _ O
. _ _ O
and _ _ O
it _ _ O
sure _ _ O
can _ _ O
be _ _ O
! _ _ O
fn _ _ O
err_context _ _ O
< _ _ O
' _ _ O
a _ _ O
, _ _ O
O _ _ O
, _ _ O
F _ _ O
> _ _ O
( _ _ O
kind _ _ O
: _ _ O
LexErrorKind _ _ O
, _ _ O
parser _ _ O
: _ _ O
F _ _ O
) _ _ O
- _ _ O
> _ _ O
impl _ _ O
Fn _ _ O
( _ _ O
Span _ _ O
< _ _ O
' _ _ O
a _ _ O
> _ _ O
) _ _ O
- _ _ O
> _ _ O
LResult _ _ O
< _ _ O
' _ _ O
a _ _ O
, _ _ O
O _ _ O
> _ _ O
where _ _ O
F _ _ O
: _ _ O
Fn _ _ O
( _ _ O
Span _ _ O
< _ _ O
' _ _ O
a _ _ O
> _ _ O
) _ _ O
- _ _ O
> _ _ O
IResult _ _ O
< _ _ O
Span _ _ O
< _ _ O
' _ _ O
a _ _ O
> _ _ O
, _ _ O
O _ _ O
, _ _ O
LexError _ _ O
> _ _ O
, _ _ O
fn _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
let _ _ O
nums _ _ O
= _ _ O
vec _ _ O
! _ _ O
[ _ _ O
1 _ _ O
, _ _ O
3 _ _ O
, _ _ O
5 _ _ O
, _ _ O
7 _ _ O
, _ _ O
10 _ _ O
] _ _ O
; _ _ O
for _ _ O
( _ _ O
i _ _ O
, _ _ O
n _ _ O
) _ _ O
in _ _ O
nums.iter _ _ O
( _ _ O
) _ _ O
.enumerate _ _ O
( _ _ O
) _ _ O
{ _ _ O
println _ _ O
! _ _ O
( _ _ O
"nums _ _ O
[ _ _ O
{ _ _ O
} _ _ O
] _ _ O
= _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
i _ _ O
, _ _ O
n _ _ O
) _ _ O
; _ _ O
} _ _ O
but _ _ O
it _ _ O
can _ _ O
also _ _ O
be _ _ O
simple _ _ O
, _ _ O
elegant _ _ O
, _ _ O
and _ _ O
readable _ _ O
. _ _ O
let _ _ O
sum _ _ O
: _ _ O
i32 _ _ O
= _ _ O
nums.iter _ _ O
( _ _ O
) _ _ O
.sum _ _ O
( _ _ O
) _ _ O
; _ _ O
println _ _ O
! _ _ O
( _ _ O
"sum _ _ O
of _ _ O
nums _ _ O
= _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
sum _ _ O
) _ _ O
; _ _ O
} _ _ O
29 _ _ O

Basic _ _ O
tools _ _ O
and _ _ O
vocabulary _ _ O
● _ _ O
rustup _ _ O
is _ _ O
the _ _ O
tool _ _ O
to _ _ O
install _ _ O
the _ _ O
Rust _ _ O
toolchain _ _ O
. _ _ O
● _ _ O
cargo _ _ O
is _ _ O
the _ _ O
" _ _ O
swiss _ _ O
army _ _ O
knife _ _ O
" _ _ O
for _ _ O
creating _ _ O
and _ _ O
building _ _ O
programs _ _ O
. _ _ O
o _ _ O
it _ _ O
lets _ _ O
you _ _ O
create _ _ O
new _ _ O
Rust _ _ O
projects _ _ O
with _ _ O
some _ _ O
basic _ _ O
features _ _ O
. _ _ O
o _ _ O
it _ _ O
acts _ _ O
as _ _ O
a _ _ O
build _ _ O
tool _ _ O
like _ _ O
make _ _ O
. _ _ O
o _ _ O
it _ _ O
lets _ _ O
you _ _ O
run _ _ O
tests _ _ O
, _ _ O
build _ _ O
documentation _ _ O
, _ _ O
and _ _ O
so _ _ O
on _ _ O
. _ _ O
o _ _ O
it _ _ O
lets _ _ O
you _ _ O
specify _ _ O
dependencies _ _ O
on _ _ O
external _ _ O
libraries _ _ O
( _ _ O
crates _ _ O
) _ _ O
. _ _ O
o _ _ O
it _ _ O
automatically _ _ O
downloads _ _ O
, _ _ O
builds _ _ O
, _ _ O
and _ _ O
installs _ _ O
those _ _ O
libraries _ _ O
. _ _ O
● _ _ O
a _ _ O
crate _ _ O
is _ _ O
like _ _ O
a _ _ O
Java _ _ O
package _ _ O
: _ _ O
a _ _ O
self-contained _ _ O
program _ _ O
or _ _ O
library _ _ O
. _ _ O
o _ _ O
crates.io _ _ O
is _ _ O
the _ _ O
website _ _ O
where _ _ O
you _ _ O
can _ _ O
search _ _ O
for _ _ O
crates _ _ O
. _ _ O
o _ _ O
each _ _ O
Rust _ _ O
program _ _ O
you _ _ O
make _ _ O
is _ _ O
its _ _ O
own _ _ O
crate _ _ O
. _ _ O
30 _ _ O

Rust _ _ O
by _ _ O
Comparison _ _ O
● _ _ O
here _ _ O
is _ _ O
a _ _ O
simple _ _ O
program _ _ O
written _ _ O
in _ _ O
Java _ _ O
and _ _ O
Rust _ _ O
. _ _ O
public _ _ O
class _ _ O
Code _ _ O
{ _ _ O
public _ _ O
static _ _ O
void _ _ O
main _ _ O
( _ _ O
String _ _ O
[ _ _ O
] _ _ O
a _ _ O
) _ _ O
{ _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
1 _ _ O
; _ _ O
i _ _ O
< _ _ O
= _ _ O
100 _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
if _ _ O
( _ _ O
( _ _ O
i _ _ O
% _ _ O
3 _ _ O
) _ _ O
= _ _ O
= _ _ O
0 _ _ O
) _ _ O
System.out.print _ _ O
( _ _ O
"Fizz _ _ O
" _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
( _ _ O
i _ _ O
% _ _ O
5 _ _ O
) _ _ O
= _ _ O
= _ _ O
0 _ _ O
) _ _ O
System.out.print _ _ O
( _ _ O
"Buzz _ _ O
" _ _ O
) _ _ O
; _ _ O
if _ _ O
( _ _ O
( _ _ O
i _ _ O
% _ _ O
3 _ _ O
) _ _ O
! _ _ O
= _ _ O
0 _ _ O
& _ _ O
& _ _ O
( _ _ O
i _ _ O
% _ _ O
5 _ _ O
) _ _ O
! _ _ O
= _ _ O
0 _ _ O
) _ _ O
System.out.print _ _ O
( _ _ O
i _ _ O
) _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
} _ _ O
fn _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
for _ _ O
i _ _ O
in _ _ O
1 _ _ O
.. _ _ O
= _ _ O
100 _ _ O
{ _ _ O
if _ _ O
( _ _ O
i _ _ O
% _ _ O
3 _ _ O
) _ _ O
= _ _ O
= _ _ O
0 _ _ O
{ _ _ O
print _ _ O
! _ _ O
( _ _ O
"Fizz _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
if _ _ O
( _ _ O
i _ _ O
% _ _ O
5 _ _ O
) _ _ O
= _ _ O
= _ _ O
0 _ _ O
{ _ _ O
print _ _ O
! _ _ O
( _ _ O
"Buzz _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
if _ _ O
( _ _ O
i _ _ O
% _ _ O
3 _ _ O
) _ _ O
! _ _ O
= _ _ O
0 _ _ O
& _ _ O
& _ _ O
( _ _ O
i _ _ O
% _ _ O
5 _ _ O
) _ _ O
! _ _ O
= _ _ O
0 _ _ O
{ _ _ O
print _ _ O
! _ _ O
( _ _ O
" _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
i _ _ O
) _ _ O
; _ _ O
} _ _ O
println _ _ O
! _ _ O
( _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
what _ _ O
are _ _ O
some _ _ O
differences _ _ O
? _ _ O
( _ _ O
see _ _ O
slide _ _ O
notes _ _ O
for _ _ O
some _ _ O
answers _ _ O
) _ _ O
31 _ _ O

More _ _ O
Comparison _ _ O
● _ _ O
it _ _ O
really _ _ O
is _ _ O
n't _ _ O
THAT _ _ O
scary _ _ O
. _ _ O
( _ _ O
class _ _ O
/ _ _ O
main _ _ O
/ _ _ O
System.out _ _ O
omitted _ _ O
for _ _ O
space _ _ O
) _ _ O
int _ _ O
[ _ _ O
] _ _ O
nums _ _ O
= _ _ O
new _ _ O
int _ _ O
[ _ _ O
] _ _ O
{1 _ _ O
, _ _ O
3 _ _ O
, _ _ O
5 _ _ O
, _ _ O
7 _ _ O
, _ _ O
10 _ _ O
} _ _ O
; _ _ O
let _ _ O
nums _ _ O
= _ _ O
vec _ _ O
! _ _ O
[ _ _ O
1 _ _ O
, _ _ O
3 _ _ O
, _ _ O
5 _ _ O
, _ _ O
7 _ _ O
, _ _ O
10 _ _ O
] _ _ O
; _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
nums.length _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
for _ _ O
( _ _ O
i _ _ O
, _ _ O
n _ _ O
) _ _ O
in _ _ O
nums.iter _ _ O
( _ _ O
) _ _ O
.enumerate _ _ O
( _ _ O
) _ _ O
{ _ _ O
printf _ _ O
( _ _ O
"nums _ _ O
[ _ _ O
%d _ _ O
] _ _ O
= _ _ O
% _ _ O
d\n _ _ O
" _ _ O
, _ _ O
i _ _ O
, _ _ O
nums _ _ O
[ _ _ O
i _ _ O
] _ _ O
) _ _ O
; _ _ O
println _ _ O
! _ _ O
( _ _ O
"nums _ _ O
[ _ _ O
{ _ _ O
} _ _ O
] _ _ O
= _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
i _ _ O
, _ _ O
n _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
int _ _ O
sum _ _ O
= _ _ O
Arrays.stream _ _ O
( _ _ O
nums _ _ O
) _ _ O
.sum _ _ O
( _ _ O
) _ _ O
; _ _ O
printf _ _ O
( _ _ O
"sum _ _ O
of _ _ O
nums _ _ O
= _ _ O
% _ _ O
d _ _ O
" _ _ O
, _ _ O
sum _ _ O
) _ _ O
; _ _ O
let _ _ O
sum _ _ O
: _ _ O
i32 _ _ O
= _ _ O
nums.iter _ _ O
( _ _ O
) _ _ O
.sum _ _ O
( _ _ O
) _ _ O
; _ _ O
println _ _ O
! _ _ O
( _ _ O
"sum _ _ O
of _ _ O
nums _ _ O
= _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
sum _ _ O
) _ _ O
; _ _ O
takeaways _ _ O
: _ _ O
- _ _ O
variables _ _ O
declared _ _ O
with _ _ O
let _ _ O
- _ _ O
arrays _ _ O
called _ _ O
" _ _ O
vectors _ _ O
" _ _ O
* _ _ O
- _ _ O
.iter _ _ O
( _ _ O
) _ _ O
seems _ _ O
to _ _ O
do _ _ O
Fun _ _ O
Iteration _ _ O
Things _ _ O
- _ _ O
i32 _ _ O
instead _ _ O
of _ _ O
int _ _ O
- _ _ O
print _ _ O
formatting _ _ O
done _ _ O
with _ _ O
{ _ _ O
} _ _ O
32 _ _ O

oh _ _ O
no _ _ O
I _ _ O
'm _ _ O
not _ _ O
good _ _ O
with _ _ O
computer _ _ O
what _ _ O
does _ _ O
this _ _ O
me _ _ O
● _ _ O
let _ _ O
's _ _ O
try _ _ O
something _ _ O
. _ _ O
let _ _ O
nums _ _ O
= _ _ O
vec _ _ O
! _ _ O
[ _ _ O
1 _ _ O
, _ _ O
3 _ _ O
, _ _ O
5 _ _ O
, _ _ O
7 _ _ O
, _ _ O
10 _ _ O
] _ _ O
; _ _ O
for _ _ O
n _ _ O
in _ _ O
nums _ _ O
{ _ _ O
println _ _ O
! _ _ O
( _ _ O
" _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
n _ _ O
) _ _ O
; _ _ O
} _ _ O
for _ _ O
( _ _ O
i _ _ O
, _ _ O
n _ _ O
) _ _ O
in _ _ O
nums.iter _ _ O
( _ _ O
) _ _ O
.enumerate _ _ O
( _ _ O
) _ _ O
{ _ _ O
println _ _ O
! _ _ O
( _ _ O
"nums _ _ O
[ _ _ O
{ _ _ O
} _ _ O
] _ _ O
= _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
i _ _ O
, _ _ O
n _ _ O
) _ _ O
; _ _ O
} _ _ O
Rust _ _ O
's _ _ O
compiler _ _ O
errors _ _ O
tend _ _ O
to _ _ O
be _ _ O
very _ _ O
verbose _ _ O
, _ _ O
but _ _ O
it _ _ O
's _ _ O
because _ _ O
it _ _ O
actually _ _ O
tries _ _ O
to _ _ O
help _ _ O
you _ _ O
fix _ _ O
the _ _ O
error _ _ O
! _ _ O
following _ _ O
its _ _ O
help _ _ O
works _ _ O
here _ _ O
, _ _ O
and _ _ O
often _ _ O
does _ _ O
! _ _ O
33 _ _ O

What _ _ O
I _ _ O
want _ _ O
you _ _ O
to _ _ O
do _ _ O
! _ _ O
34 _ _ O

For _ _ O
next _ _ O
class _ _ O
… _ _ O
● _ _ O
On _ _ O
the _ _ O
course _ _ O
info _ _ O
page _ _ O
, _ _ O
find _ _ O
the _ _ O
Rust _ _ O
Programming _ _ O
Language _ _ O
book _ _ O
. _ _ O
● _ _ O
follow _ _ O
along _ _ O
with _ _ O
chapters _ _ O
1 _ _ O
- _ _ O
3 _ _ O
to _ _ O
install _ _ O
and _ _ O
play _ _ O
around _ _ O
with _ _ O
Rust _ _ O
. _ _ O
o _ _ O
Windows _ _ O
users _ _ O
, _ _ O
use _ _ O
PowerShell _ _ O
or _ _ O
WSL _ _ O
. _ _ O
cmd.exe _ _ O
is _ _ O
dead _ _ O
. _ _ O
● _ _ O
you _ _ O
're _ _ O
already _ _ O
programmers _ _ O
so _ _ O
a _ _ O
lot _ _ O
of _ _ O
things _ _ O
will _ _ O
be _ _ O
obvious _ _ O
to _ _ O
you _ _ O
! _ _ O
● _ _ O
try _ _ O
this _ _ O
: _ _ O
just _ _ O
read _ _ O
the _ _ O
code _ _ O
examples _ _ O
and _ _ O
if _ _ O
you _ _ O
're _ _ O
confused _ _ O
, _ _ O
read _ _ O
the _ _ O
text _ _ O
before _ _ O
it _ _ O
. _ _ O
that _ _ O
way _ _ O
you _ _ O
can _ _ O
skip _ _ O
the _ _ O
easy _ _ O
stuff _ _ O
. _ _ O
35 _ _ O



