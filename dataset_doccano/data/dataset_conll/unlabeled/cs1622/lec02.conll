unlabeled|cs1622|lec02
-DOCSTART- -X- -X- O

Rust _ _ O
, _ _ O
Strings _ _ O
, _ _ O
and _ _ O
Text _ _ O
CS _ _ O
/ _ _ O
COE _ _ O
1622 _ _ O
Jarrett _ _ O
Billingsley _ _ O

Class _ _ O
Announcements _ _ O
● _ _ O
I _ _ O
'm _ _ O
assuming _ _ O
, _ _ O
for _ _ O
this _ _ O
lecture _ _ O
, _ _ O
that _ _ O
you _ _ O
really _ _ O
did _ _ O
follow _ _ O
along _ _ O
with _ _ O
chapters _ _ O
1 _ _ O
- _ _ O
3 _ _ O
of _ _ O
the _ _ O
Rust _ _ O
book _ _ O
● _ _ O
also _ _ O
, _ _ O
if _ _ O
you _ _ O
did _ _ O
n’t _ _ O
see _ _ O
the _ _ O
announcement _ _ O
yesterday _ _ O
… _ _ O
o _ _ O
go _ _ O
look _ _ O
: _ _ O
^ _ _ O
) _ _ O
● _ _ O
the _ _ O
examples _ _ O
from _ _ O
today _ _ O
are _ _ O
in _ _ O
the _ _ O
examples _ _ O
repo _ _ O
o _ _ O
see _ _ O
the _ _ O
materials _ _ O
page _ _ O
! _ _ O
2 _ _ O

Vectors _ _ O
3 _ _ O

Vectors _ _ O
! _ _ O
● _ _ O
Rust _ _ O
's _ _ O
Vec _ _ O
< _ _ O
T _ _ O
> _ _ O
can _ _ O
work _ _ O
like _ _ O
a _ _ O
Java _ _ O
T _ _ O
[ _ _ O
] _ _ O
or _ _ O
ArrayList _ _ O
< _ _ O
T _ _ O
> _ _ O
. _ _ O
let _ _ O
v _ _ O
= _ _ O
vec _ _ O
! _ _ O
[ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
4 _ _ O
, _ _ O
5 _ _ O
] _ _ O
; _ _ O
this _ _ O
creates _ _ O
a _ _ O
new _ _ O
, _ _ O
immutable _ _ O
( _ _ O
unchangeable _ _ O
) _ _ O
Vec _ _ O
. _ _ O
let _ _ O
mut _ _ O
v _ _ O
= _ _ O
vec _ _ O
! _ _ O
[ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
4 _ _ O
, _ _ O
5 _ _ O
] _ _ O
; _ _ O
this _ _ O
one _ _ O
can _ _ O
be _ _ O
modified _ _ O
, _ _ O
appended _ _ O
, _ _ O
etc _ _ O
. _ _ O
for _ _ O
the _ _ O
most _ _ O
part _ _ O
, _ _ O
they _ _ O
work _ _ O
like _ _ O
Java _ _ O
arrays _ _ O
/ _ _ O
ArrayLists _ _ O
: _ _ O
let _ _ O
x _ _ O
= _ _ O
v _ _ O
[ _ _ O
3 _ _ O
] _ _ O
; _ _ O
/ _ _ O
/ _ _ O
indexing _ _ O
let _ _ O
l _ _ O
= _ _ O
v.len _ _ O
( _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
length _ _ O
v.push _ _ O
( _ _ O
6 _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
appends _ _ O
a _ _ O
6 _ _ O
4 _ _ O

Iteration _ _ O
● _ _ O
Rust _ _ O
has _ _ O
a _ _ O
system _ _ O
similar _ _ O
to _ _ O
Java _ _ O
's _ _ O
Iterable _ _ O
/ _ _ O
Iterator _ _ O
interfaces _ _ O
. _ _ O
o _ _ O
.iter _ _ O
( _ _ O
) _ _ O
is _ _ O
like _ _ O
Java _ _ O
's _ _ O
.iterator _ _ O
( _ _ O
) _ _ O
method _ _ O
. _ _ O
● _ _ O
the _ _ O
for-in _ _ O
loop _ _ O
iterates _ _ O
over _ _ O
iterators _ _ O
. _ _ O
for _ _ O
i _ _ O
in _ _ O
0 _ _ O
.. _ _ O
10 _ _ O
{ _ _ O
} _ _ O
for _ _ O
i _ _ O
in _ _ O
1 _ _ O
.. _ _ O
= _ _ O
10 _ _ O
{ _ _ O
} _ _ O
/ _ _ O
/ _ _ O
i _ _ O
= _ _ O
0 _ _ O
, _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
… _ _ O
, _ _ O
8 _ _ O
, _ _ O
9 _ _ O
/ _ _ O
/ _ _ O
i _ _ O
= _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
… _ _ O
, _ _ O
9 _ _ O
, _ _ O
10 _ _ O
let _ _ O
v _ _ O
= _ _ O
vec _ _ O
! _ _ O
[ _ _ O
1 _ _ O
, _ _ O
2 _ _ O
, _ _ O
3 _ _ O
] _ _ O
; _ _ O
for _ _ O
val _ _ O
in _ _ O
v.iter _ _ O
( _ _ O
) _ _ O
{ _ _ O
} _ _ O
/ _ _ O
/ _ _ O
iterate _ _ O
over _ _ O
values _ _ O
in _ _ O
v _ _ O
for _ _ O
val _ _ O
in _ _ O
& _ _ O
v _ _ O
{ _ _ O
} _ _ O
/ _ _ O
/ _ _ O
same _ _ O
as _ _ O
above _ _ O
, _ _ O
but _ _ O
shorter _ _ O
for _ _ O
( _ _ O
i _ _ O
, _ _ O
val _ _ O
) _ _ O
in _ _ O
v.iter _ _ O
( _ _ O
) _ _ O
.enumerate _ _ O
( _ _ O
) _ _ O
{ _ _ O
} _ _ O
the _ _ O
last _ _ O
one _ _ O
shows _ _ O
calling _ _ O
a _ _ O
method _ _ O
on _ _ O
an _ _ O
iterator _ _ O
object _ _ O
to _ _ O
get _ _ O
a _ _ O
new _ _ O
iterator _ _ O
– _ _ O
this _ _ O
one _ _ O
gives _ _ O
the _ _ O
index _ _ O
and _ _ O
value _ _ O
. _ _ O
5 _ _ O

an _ _ O
Extremely _ _ O
Common _ _ O
Pattern _ _ O
: _ _ O
Mapping _ _ O
● _ _ O
you _ _ O
have _ _ O
an _ _ O
array _ _ O
A. _ _ O
● _ _ O
you _ _ O
want _ _ O
to _ _ O
perform _ _ O
some _ _ O
transformation _ _ O
on _ _ O
each _ _ O
item _ _ O
in _ _ O
A. _ _ O
● _ _ O
you _ _ O
want _ _ O
to _ _ O
put _ _ O
the _ _ O
results _ _ O
of _ _ O
those _ _ O
transformations _ _ O
into _ _ O
an _ _ O
array _ _ O
B. _ _ O
int _ _ O
[ _ _ O
] _ _ O
B _ _ O
= _ _ O
new _ _ O
int _ _ O
[ _ _ O
A.length _ _ O
( _ _ O
) _ _ O
] _ _ O
; _ _ O
for _ _ O
( _ _ O
int _ _ O
i _ _ O
= _ _ O
0 _ _ O
; _ _ O
i _ _ O
< _ _ O
A.length _ _ O
( _ _ O
) _ _ O
; _ _ O
i++ _ _ O
) _ _ O
{ _ _ O
B _ _ O
[ _ _ O
i _ _ O
] _ _ O
= _ _ O
A _ _ O
[ _ _ O
i _ _ O
] _ _ O
* _ _ O
2 _ _ O
; _ _ O
} _ _ O
this _ _ O
operation _ _ O
is _ _ O
called _ _ O
mapping _ _ O
, _ _ O
and _ _ O
it _ _ O
's _ _ O
so _ _ O
, _ _ O
so _ _ O
common _ _ O
. _ _ O
in _ _ O
Rust _ _ O
, _ _ O
it _ _ O
looks _ _ O
like _ _ O
this _ _ O
: _ _ O
let _ _ O
B _ _ O
= _ _ O
A.iter _ _ O
( _ _ O
) _ _ O
.map _ _ O
( _ _ O
|x| _ _ O
x _ _ O
* _ _ O
2 _ _ O
) _ _ O
.collect _ _ O
( _ _ O
) _ _ O
; _ _ O
this _ _ O
is _ _ O
a _ _ O
function _ _ O
literal _ _ O
, _ _ O
or _ _ O
anonymous _ _ O
function _ _ O
, _ _ O
or _ _ O
" _ _ O
lambda _ _ O
. _ _ O
" _ _ O
6 _ _ O

Algebraic _ _ O
Data _ _ O
Types _ _ O
and _ _ O
Structs _ _ O
time _ _ O
check _ _ O
: _ _ O
≤ _ _ O
35 _ _ O
min _ _ O
7 _ _ O

Not _ _ O
the _ _ O
same _ _ O
as _ _ O
ADTs _ _ O
( _ _ O
abstract _ _ O
data _ _ O
types _ _ O
) _ _ O
● _ _ O
primitive _ _ O
types _ _ O
contain _ _ O
a _ _ O
single _ _ O
value _ _ O
, _ _ O
e.g. _ _ O
i32 _ _ O
, _ _ O
f32 _ _ O
, _ _ O
bool _ _ O
, _ _ O
char _ _ O
… _ _ O
● _ _ O
algebraic _ _ O
types _ _ O
let _ _ O
us _ _ O
combine _ _ O
types _ _ O
into _ _ O
larger _ _ O
ones _ _ O
. _ _ O
Product _ _ O
Types _ _ O
bundle _ _ O
values _ _ O
" _ _ O
side-by-side _ _ O
" _ _ O
. _ _ O
Sum _ _ O
Types _ _ O
hold _ _ O
one _ _ O
of _ _ O
several _ _ O
choices _ _ O
or _ _ O
variants _ _ O
. _ _ O
class _ _ O
Point _ _ O
{ _ _ O
int _ _ O
x _ _ O
; _ _ O
int _ _ O
y _ _ O
; _ _ O
} _ _ O
boolean _ _ O
b _ _ O
; _ _ O
b _ _ O
= _ _ O
true _ _ O
; _ _ O
b _ _ O
= _ _ O
false _ _ O
; _ _ O
/ _ _ O
/ _ _ O
that _ _ O
's _ _ O
it _ _ O
. _ _ O
Java _ _ O
classes _ _ O
are _ _ O
product _ _ O
types _ _ O
. _ _ O
each _ _ O
Point _ _ O
can _ _ O
hold _ _ O
any _ _ O
combination _ _ O
of _ _ O
two _ _ O
integers _ _ O
. _ _ O
Java _ _ O
's _ _ O
boolean _ _ O
can _ _ O
only _ _ O
be _ _ O
one _ _ O
of _ _ O
two _ _ O
possibilities _ _ O
, _ _ O
but _ _ O
that _ _ O
's _ _ O
built _ _ O
into _ _ O
the _ _ O
language _ _ O
for _ _ O
you _ _ O
. _ _ O
8 _ _ O

Rust _ _ O
's _ _ O
product _ _ O
types _ _ O
: _ _ O
Structs _ _ O
● _ _ O
structs _ _ O
are _ _ O
the _ _ O
main _ _ O
kind _ _ O
. _ _ O
( _ _ O
there _ _ O
are _ _ O
also _ _ O
" _ _ O
tuples _ _ O
. _ _ O
" _ _ O
) _ _ O
struct _ _ O
Point _ _ O
{ _ _ O
x _ _ O
: _ _ O
i32 _ _ O
, _ _ O
y _ _ O
: _ _ O
i32 _ _ O
, _ _ O
} _ _ O
they _ _ O
're _ _ O
like _ _ O
Java _ _ O
classes _ _ O
, _ _ O
but _ _ O
no _ _ O
inheritance _ _ O
, _ _ O
no _ _ O
interfaces _ _ O
, _ _ O
no _ _ O
methods _ _ O
, _ _ O
just _ _ O
fields _ _ O
. _ _ O
let _ _ O
p _ _ O
= _ _ O
Point _ _ O
{ _ _ O
x _ _ O
: _ _ O
10 _ _ O
, _ _ O
y _ _ O
: _ _ O
20 _ _ O
} _ _ O
; _ _ O
you _ _ O
construct _ _ O
a _ _ O
struct _ _ O
by _ _ O
listing _ _ O
the _ _ O
values _ _ O
for _ _ O
each _ _ O
field _ _ O
. _ _ O
println _ _ O
! _ _ O
( _ _ O
" _ _ O
{ _ _ O
} _ _ O
, _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
p.x _ _ O
, _ _ O
p.y _ _ O
) _ _ O
; _ _ O
and _ _ O
you _ _ O
access _ _ O
fields _ _ O
with _ _ O
. _ _ O
just _ _ O
like _ _ O
in _ _ O
Java _ _ O
, _ _ O
C _ _ O
, _ _ O
etc _ _ O
. _ _ O
other _ _ O
than _ _ O
privacy _ _ O
( _ _ O
put _ _ O
pub _ _ O
on _ _ O
a _ _ O
field _ _ O
to _ _ O
make _ _ O
it _ _ O
public _ _ O
) _ _ O
, _ _ O
that _ _ O
's _ _ O
it _ _ O
. _ _ O
9 _ _ O

" _ _ O
Constructors _ _ O
" _ _ O
and _ _ O
" _ _ O
methods _ _ O
" _ _ O
● _ _ O
Rust _ _ O
does _ _ O
not _ _ O
have _ _ O
classes _ _ O
and _ _ O
is _ _ O
not _ _ O
an _ _ O
OOP _ _ O
language _ _ O
. _ _ O
● _ _ O
but _ _ O
it _ _ O
does _ _ O
let _ _ O
us _ _ O
add _ _ O
methods _ _ O
to _ _ O
any _ _ O
type _ _ O
, _ _ O
with _ _ O
impl _ _ O
. _ _ O
impl _ _ O
Point _ _ O
{ _ _ O
fn _ _ O
new _ _ O
( _ _ O
x _ _ O
: _ _ O
i32 _ _ O
, _ _ O
y _ _ O
: _ _ O
i32 _ _ O
) _ _ O
- _ _ O
> _ _ O
Point _ _ O
{ _ _ O
Point _ _ O
{ _ _ O
x _ _ O
, _ _ O
y _ _ O
} _ _ O
} _ _ O
fn _ _ O
flip_x _ _ O
( _ _ O
& _ _ O
self _ _ O
) _ _ O
- _ _ O
> _ _ O
Point _ _ O
{ _ _ O
Point _ _ O
{ _ _ O
x _ _ O
: _ _ O
-self.x _ _ O
, _ _ O
y _ _ O
: _ _ O
self.y _ _ O
} _ _ O
} _ _ O
} _ _ O
a _ _ O
Rust _ _ O
convention _ _ O
is _ _ O
to _ _ O
have _ _ O
a _ _ O
constructor _ _ O
function _ _ O
named _ _ O
new _ _ O
. _ _ O
methods _ _ O
are _ _ O
made _ _ O
by _ _ O
writing _ _ O
& _ _ O
self _ _ O
as _ _ O
the _ _ O
first _ _ O
argument _ _ O
. _ _ O
now _ _ O
we _ _ O
can _ _ O
access _ _ O
these _ _ O
as _ _ O
Point _ _ O
: _ _ O
: _ _ O
new _ _ O
( _ _ O
) _ _ O
and _ _ O
p.flip_x _ _ O
( _ _ O
) _ _ O
. _ _ O
10 _ _ O

A _ _ O
side _ _ O
note _ _ O
- _ _ O
: _ _ O
: _ _ O
vs _ _ O
. _ _ O
● _ _ O
in _ _ O
Java _ _ O
, _ _ O
you _ _ O
use _ _ O
. _ _ O
to _ _ O
access _ _ O
all _ _ O
" _ _ O
things _ _ O
inside _ _ O
other _ _ O
things _ _ O
" _ _ O
. _ _ O
o _ _ O
e.g. _ _ O
java.util.Arrays _ _ O
, _ _ O
Integer.parseInt _ _ O
( _ _ O
) _ _ O
● _ _ O
in _ _ O
Rust _ _ O
, _ _ O
the _ _ O
. _ _ O
operator _ _ O
is _ _ O
only _ _ O
used _ _ O
on _ _ O
objects _ _ O
. _ _ O
o _ _ O
when _ _ O
you _ _ O
see _ _ O
. _ _ O
it _ _ O
always _ _ O
means _ _ O
" _ _ O
get _ _ O
a _ _ O
field _ _ O
from _ _ O
a _ _ O
struct _ _ O
" _ _ O
or _ _ O
" _ _ O
call _ _ O
a _ _ O
method _ _ O
on _ _ O
some _ _ O
value _ _ O
. _ _ O
" _ _ O
● _ _ O
for _ _ O
anything _ _ O
else _ _ O
, _ _ O
you _ _ O
use _ _ O
: _ _ O
: _ _ O
o _ _ O
e.g. _ _ O
std _ _ O
: _ _ O
: _ _ O
cmp _ _ O
: _ _ O
: _ _ O
Ordering _ _ O
, _ _ O
Point _ _ O
: _ _ O
: _ _ O
new _ _ O
( _ _ O
) _ _ O
o _ _ O
I _ _ O
like _ _ O
to _ _ O
think _ _ O
of _ _ O
: _ _ O
: _ _ O
as _ _ O
being _ _ O
like _ _ O
the _ _ O
( _ _ O
back _ _ O
) _ _ O
slashes _ _ O
in _ _ O
file _ _ O
paths _ _ O
▪ _ _ O
C _ _ O
: _ _ O
\Windows\system32 _ _ O
▪ _ _ O
/bin _ _ O
/ _ _ O
sh _ _ O
11 _ _ O

Flavors _ _ O
of _ _ O
' _ _ O
self _ _ O
' _ _ O
● _ _ O
inside _ _ O
an _ _ O
impl _ _ O
there _ _ O
are _ _ O
a _ _ O
few _ _ O
kinds _ _ O
of _ _ O
functions _ _ O
: _ _ O
impl _ _ O
MyStruct _ _ O
{ _ _ O
fn _ _ O
new _ _ O
( _ _ O
) _ _ O
- _ _ O
> _ _ O
MyStruct _ _ O
with _ _ O
no _ _ O
self _ _ O
argument _ _ O
, _ _ O
it _ _ O
's _ _ O
an _ _ O
associated _ _ O
function _ _ O
. _ _ O
constructors _ _ O
are _ _ O
the _ _ O
most _ _ O
common _ _ O
example _ _ O
. _ _ O
fn _ _ O
method _ _ O
( _ _ O
& _ _ O
self _ _ O
) _ _ O
with _ _ O
a _ _ O
& _ _ O
self _ _ O
, _ _ O
it _ _ O
's _ _ O
a _ _ O
method _ _ O
, _ _ O
but _ _ O
can _ _ O
not _ _ O
change _ _ O
any _ _ O
fields _ _ O
in _ _ O
the _ _ O
object _ _ O
it _ _ O
's _ _ O
called _ _ O
on _ _ O
. _ _ O
fn _ _ O
mutator _ _ O
( _ _ O
& _ _ O
mut _ _ O
self _ _ O
) _ _ O
with _ _ O
a _ _ O
& _ _ O
mut _ _ O
self _ _ O
, _ _ O
it _ _ O
's _ _ O
a _ _ O
method _ _ O
that _ _ O
can _ _ O
change _ _ O
the _ _ O
object _ _ O
, _ _ O
but _ _ O
can _ _ O
only _ _ O
be _ _ O
called _ _ O
on _ _ O
mut _ _ O
variables _ _ O
. _ _ O
12 _ _ O

Sum _ _ O
Types _ _ O
time _ _ O
check _ _ O
: _ _ O
≤ _ _ O
65 _ _ O
min _ _ O
13 _ _ O

A _ _ O
motivating _ _ O
example _ _ O
● _ _ O
the _ _ O
classic _ _ O
Animal _ _ O
class _ _ O
hierarchy _ _ O
might _ _ O
look _ _ O
like _ _ O
this _ _ O
in _ _ O
Java _ _ O
: _ _ O
abstract _ _ O
class _ _ O
Animal _ _ O
{ _ _ O
an _ _ O
Animal _ _ O
variable _ _ O
abstract _ _ O
void _ _ O
speak _ _ O
( _ _ O
) _ _ O
; _ _ O
would _ _ O
be _ _ O
able _ _ O
to _ _ O
hold _ _ O
an _ _ O
} _ _ O
instance _ _ O
of _ _ O
any _ _ O
of _ _ O
these _ _ O
. _ _ O
class _ _ O
Cat _ _ O
extends _ _ O
Animal _ _ O
{ _ _ O
void _ _ O
speak _ _ O
( _ _ O
) _ _ O
{ _ _ O
println _ _ O
( _ _ O
"meow _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
common _ _ O
fields _ _ O
and _ _ O
} _ _ O
methods _ _ O
go _ _ O
in _ _ O
Animal _ _ O
; _ _ O
class _ _ O
Dog _ _ O
extends _ _ O
Animal _ _ O
{ _ _ O
unique _ _ O
things _ _ O
go _ _ O
in _ _ O
the _ _ O
void _ _ O
speak _ _ O
( _ _ O
) _ _ O
{ _ _ O
println _ _ O
( _ _ O
"woof _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
subclasses _ _ O
. _ _ O
} _ _ O
class _ _ O
Camel _ _ O
extends _ _ O
Animal _ _ O
{ _ _ O
void _ _ O
speak _ _ O
( _ _ O
) _ _ O
{ _ _ O
println _ _ O
( _ _ O
"ghhghhg _ _ O
! _ _ O
" _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
14 _ _ O

The _ _ O
equivalent _ _ O
( _ _ O
? _ _ O
) _ _ O
Rust _ _ O
● _ _ O
when _ _ O
you _ _ O
want _ _ O
to _ _ O
have _ _ O
a _ _ O
choice _ _ O
of _ _ O
types _ _ O
, _ _ O
you _ _ O
use _ _ O
an _ _ O
enum _ _ O
. _ _ O
enum _ _ O
Animal _ _ O
{ _ _ O
Cat _ _ O
, _ _ O
Dog _ _ O
, _ _ O
Camel _ _ O
} _ _ O
what _ _ O
's _ _ O
happening _ _ O
here _ _ O
is _ _ O
not _ _ O
really _ _ O
like _ _ O
the _ _ O
Java _ _ O
code _ _ O
, _ _ O
though _ _ O
. _ _ O
it _ _ O
's _ _ O
much _ _ O
more _ _ O
like _ _ O
a _ _ O
boolean _ _ O
: _ _ O
a _ _ O
fixed _ _ O
set _ _ O
impl _ _ O
Animal _ _ O
{ _ _ O
of _ _ O
possible _ _ O
values _ _ O
, _ _ O
and _ _ O
an _ _ O
Animal _ _ O
fn _ _ O
speak _ _ O
( _ _ O
& _ _ O
self _ _ O
) _ _ O
{ _ _ O
use _ _ O
Animal _ _ O
: _ _ O
: _ _ O
* _ _ O
; _ _ O
variable _ _ O
can _ _ O
only _ _ O
take _ _ O
on _ _ O
those _ _ O
values _ _ O
. _ _ O
match _ _ O
self _ _ O
{ _ _ O
Cat _ _ O
= _ _ O
> _ _ O
println _ _ O
! _ _ O
( _ _ O
"meow _ _ O
! _ _ O
" _ _ O
) _ _ O
, _ _ O
but _ _ O
unlike _ _ O
Java _ _ O
, _ _ O
we _ _ O
get _ _ O
Dog _ _ O
= _ _ O
> _ _ O
println _ _ O
! _ _ O
( _ _ O
"woof _ _ O
! _ _ O
" _ _ O
) _ _ O
, _ _ O
to _ _ O
define _ _ O
our _ _ O
own _ _ O
types _ _ O
Camel _ _ O
= _ _ O
> _ _ O
println _ _ O
! _ _ O
( _ _ O
"ghhghhg _ _ O
! _ _ O
" _ _ O
) _ _ O
, _ _ O
like _ _ O
this _ _ O
in _ _ O
Rust _ _ O
. _ _ O
} _ _ O
} _ _ O
} _ _ O
15 _ _ O

Commonalities _ _ O
and _ _ O
differences _ _ O
● _ _ O
in _ _ O
OOP _ _ O
, _ _ O
we _ _ O
can _ _ O
reuse _ _ O
code _ _ O
/ _ _ O
fields _ _ O
by _ _ O
putting _ _ O
them _ _ O
in _ _ O
the _ _ O
base _ _ O
class _ _ O
… _ _ O
o _ _ O
and _ _ O
we _ _ O
can _ _ O
specialize _ _ O
code _ _ O
/ _ _ O
fields _ _ O
in _ _ O
the _ _ O
subclasses _ _ O
. _ _ O
abstract _ _ O
class _ _ O
Animal _ _ O
{ _ _ O
float _ _ O
weight _ _ O
; _ _ O
Animal _ _ O
( _ _ O
float _ _ O
w _ _ O
) _ _ O
{ _ _ O
weight _ _ O
= _ _ O
w _ _ O
; _ _ O
} _ _ O
void _ _ O
printWeight _ _ O
( _ _ O
) _ _ O
{ _ _ O
println _ _ O
( _ _ O
weight _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
class _ _ O
Cat _ _ O
extends _ _ O
Animal _ _ O
{ _ _ O
here _ _ O
, _ _ O
weight _ _ O
is _ _ O
common _ _ O
to _ _ O
String _ _ O
pattern _ _ O
; _ _ O
all _ _ O
Animals _ _ O
, _ _ O
but _ _ O
pattern _ _ O
is _ _ O
Cat _ _ O
( _ _ O
float _ _ O
w _ _ O
, _ _ O
String _ _ O
p _ _ O
) _ _ O
{ _ _ O
unique _ _ O
to _ _ O
Cats _ _ O
. _ _ O
super _ _ O
( _ _ O
w _ _ O
) _ _ O
; _ _ O
pattern _ _ O
= _ _ O
p _ _ O
; _ _ O
} _ _ O
void _ _ O
printPattern _ _ O
( _ _ O
) _ _ O
{ _ _ O
println _ _ O
( _ _ O
pattern _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
16 _ _ O

When _ _ O
a _ _ O
struct _ _ O
and _ _ O
an _ _ O
enum _ _ O
love _ _ O
each _ _ O
other _ _ O
very _ _ O
much _ _ O
● _ _ O
in _ _ O
Rust _ _ O
, _ _ O
this _ _ O
can _ _ O
be _ _ O
represented _ _ O
with _ _ O
this _ _ O
pattern _ _ O
that _ _ O
has _ _ O
no _ _ O
name _ _ O
: _ _ O
struct _ _ O
Animal _ _ O
{ _ _ O
weight _ _ O
: _ _ O
f32 _ _ O
, _ _ O
kind _ _ O
: _ _ O
AnimalKind _ _ O
, _ _ O
} _ _ O
common _ _ O
fields _ _ O
appear _ _ O
in _ _ O
this _ _ O
Animal _ _ O
struct _ _ O
. _ _ O
but _ _ O
it _ _ O
also _ _ O
has _ _ O
a _ _ O
kind _ _ O
field _ _ O
which _ _ O
is _ _ O
an _ _ O
enum _ _ O
. _ _ O
enum _ _ O
AnimalKind _ _ O
{ _ _ O
Cat _ _ O
{ _ _ O
pattern _ _ O
: _ _ O
String _ _ O
} _ _ O
, _ _ O
Dog _ _ O
{ _ _ O
loudness _ _ O
: _ _ O
i32 _ _ O
} _ _ O
, _ _ O
Camel _ _ O
{ _ _ O
num_humps _ _ O
: _ _ O
i32 _ _ O
} _ _ O
, _ _ O
} _ _ O
unique _ _ O
fields _ _ O
appear _ _ O
in _ _ O
the _ _ O
enum _ _ O
variants _ _ O
. _ _ O
this _ _ O
pattern _ _ O
is _ _ O
going _ _ O
to _ _ O
show _ _ O
up _ _ O
over _ _ O
and _ _ O
over _ _ O
! _ _ O
it _ _ O
definitely _ _ O
looks _ _ O
different _ _ O
than _ _ O
the _ _ O
Java _ _ O
code _ _ O
, _ _ O
but _ _ O
the _ _ O
same _ _ O
concepts _ _ O
are _ _ O
coming _ _ O
into _ _ O
play _ _ O
. _ _ O
17 _ _ O

Looking _ _ O
inside _ _ O
enums _ _ O
● _ _ O
there _ _ O
are _ _ O
two _ _ O
ways _ _ O
to _ _ O
see _ _ O
what _ _ O
's _ _ O
inside _ _ O
the _ _ O
enum _ _ O
: _ _ O
/ _ _ O
/ _ _ O
" _ _ O
if _ _ O
k _ _ O
is _ _ O
an _ _ O
AnimalKind _ _ O
: _ _ O
: _ _ O
Cat _ _ O
, _ _ O
/ _ _ O
/ _ _ O
extract _ _ O
its _ _ O
data _ _ O
and _ _ O
assign _ _ O
it _ _ O
to _ _ O
' _ _ O
pattern _ _ O
' _ _ O
. _ _ O
" _ _ O
if _ _ O
let _ _ O
AnimalKind _ _ O
: _ _ O
: _ _ O
Cat _ _ O
{ _ _ O
pattern _ _ O
} _ _ O
= _ _ O
& _ _ O
self.kind _ _ O
{ _ _ O
println _ _ O
! _ _ O
( _ _ O
"cat _ _ O
with _ _ O
pattern _ _ O
: _ _ O
' _ _ O
{ _ _ O
} _ _ O
' _ _ O
" _ _ O
, _ _ O
pattern _ _ O
) _ _ O
; _ _ O
} _ _ O
match _ _ O
& _ _ O
self.kind _ _ O
{ _ _ O
.. _ _ O
means _ _ O
" _ _ O
throw _ _ O
away _ _ O
" _ _ O
or _ _ O
" _ _ O
I _ _ O
do _ _ O
n't _ _ O
care _ _ O
" _ _ O
AnimalKind _ _ O
: _ _ O
: _ _ O
Cat _ _ O
{ _ _ O
.. _ _ O
} _ _ O
= _ _ O
> _ _ O
println _ _ O
! _ _ O
( _ _ O
"meow _ _ O
! _ _ O
" _ _ O
) _ _ O
, _ _ O
AnimalKind _ _ O
: _ _ O
: _ _ O
Dog _ _ O
{ _ _ O
.. _ _ O
} _ _ O
= _ _ O
> _ _ O
println _ _ O
! _ _ O
( _ _ O
"woof _ _ O
! _ _ O
" _ _ O
) _ _ O
, _ _ O
_ _ _ O
= _ _ O
> _ _ O
println _ _ O
! _ _ O
( _ _ O
" _ _ O
? _ _ O
? _ _ O
? _ _ O
" _ _ O
) _ _ O
, _ _ O
} _ _ O
18 _ _ O

NullPointerException _ _ O
? _ _ O
Never _ _ O
heard _ _ O
of _ _ O
it _ _ O
● _ _ O
there _ _ O
is _ _ O
no _ _ O
such _ _ O
thing _ _ O
as _ _ O
null _ _ O
in _ _ O
Rust _ _ O
! _ _ O
🎉 _ _ O
🎉 _ _ O
🎉 _ _ O
🎉 _ _ O
● _ _ O
well _ _ O
, _ _ O
there _ _ O
's _ _ O
something _ _ O
like _ _ O
it _ _ O
, _ _ O
but _ _ O
it _ _ O
's _ _ O
opt-in _ _ O
, _ _ O
not _ _ O
forced _ _ O
on _ _ O
you _ _ O
. _ _ O
● _ _ O
it _ _ O
's _ _ O
an _ _ O
enum _ _ O
called _ _ O
Option _ _ O
. _ _ O
let _ _ O
nullable_ints _ _ O
: _ _ O
Vec _ _ O
< _ _ O
Option _ _ O
< _ _ O
i32 _ _ O
> _ _ O
> _ _ O
= _ _ O
vec _ _ O
! _ _ O
[ _ _ O
Some _ _ O
( _ _ O
1 _ _ O
) _ _ O
, _ _ O
Some _ _ O
( _ _ O
45 _ _ O
) _ _ O
, _ _ O
None _ _ O
, _ _ O
Some _ _ O
( _ _ O
7 _ _ O
) _ _ O
] _ _ O
; _ _ O
for _ _ O
i _ _ O
in _ _ O
nullable_ints _ _ O
{ _ _ O
if _ _ O
let _ _ O
Some _ _ O
( _ _ O
v _ _ O
) _ _ O
= _ _ O
i _ _ O
{ _ _ O
println _ _ O
! _ _ O
( _ _ O
" _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
v _ _ O
) _ _ O
; _ _ O
} _ _ O
} _ _ O
Option _ _ O
is _ _ O
so _ _ O
widely _ _ O
used _ _ O
that _ _ O
it _ _ O
's _ _ O
built _ _ O
into _ _ O
the _ _ O
compiler _ _ O
. _ _ O
you _ _ O
do _ _ O
n't _ _ O
have _ _ O
to _ _ O
write _ _ O
Option _ _ O
: _ _ O
: _ _ O
None _ _ O
, _ _ O
for _ _ O
instance _ _ O
. _ _ O
19 _ _ O

Strings _ _ O
and _ _ O
Unicode _ _ O
time _ _ O
check _ _ O
: _ _ O
≤ _ _ O
90 _ _ O
min _ _ O
20 _ _ O

Soooo _ _ O
easy _ _ O
● _ _ O
lexing _ _ O
is _ _ O
the _ _ O
process _ _ O
of _ _ O
splitting _ _ O
the _ _ O
source _ _ O
text _ _ O
into _ _ O
tokens _ _ O
. _ _ O
● _ _ O
that _ _ O
means _ _ O
we _ _ O
'll _ _ O
have _ _ O
to _ _ O
deal _ _ O
with _ _ O
strings _ _ O
as _ _ O
the _ _ O
input _ _ O
to _ _ O
our _ _ O
lexer _ _ O
. _ _ O
if _ _ O
you _ _ O
're _ _ O
a _ _ O
native _ _ O
English _ _ O
speaker _ _ O
, _ _ O
you _ _ O
're _ _ O
probably _ _ O
used _ _ O
to _ _ O
thinking _ _ O
of _ _ O
strings _ _ O
as _ _ O
working _ _ O
like _ _ O
this _ _ O
: _ _ O
0 _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
h _ _ O
e _ _ O
l _ _ O
l _ _ O
o _ _ O
! _ _ O
\n _ _ O
: _ _ O
) _ _ O
\n _ _ O
104 _ _ O
101 _ _ O
108 _ _ O
108 _ _ O
111 _ _ O
33 _ _ O
41 _ _ O
10 _ _ O
7 _ _ O
58 _ _ O
8 _ _ O
9 _ _ O
10 _ _ O
a _ _ O
string _ _ O
is _ _ O
an _ _ O
array _ _ O
of _ _ O
characters _ _ O
, _ _ O
where _ _ O
each _ _ O
character _ _ O
is _ _ O
encoded _ _ O
as _ _ O
a _ _ O
small _ _ O
integer _ _ O
. _ _ O
easy _ _ O
, _ _ O
right _ _ O
? _ _ O
21 _ _ O

Those _ _ O
dang _ _ O
human _ _ O
languages _ _ O
● _ _ O
the _ _ O
reality _ _ O
is _ _ O
: _ _ O
it _ _ O
's _ _ O
way _ _ O
more _ _ O
complicated _ _ O
than _ _ O
that _ _ O
. _ _ O
● _ _ O
see _ _ O
StringWeirdness.java _ _ O
for _ _ O
some _ _ O
… _ _ O
string _ _ O
weirdness _ _ O
. _ _ O
String _ _ O
s _ _ O
= _ _ O
" _ _ O
tést _ _ O
" _ _ O
; _ _ O
String _ _ O
t _ _ O
= _ _ O
" _ _ O
tést _ _ O
" _ _ O
; _ _ O
System.out.println _ _ O
( _ _ O
s.length _ _ O
( _ _ O
) _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
4 _ _ O
System.out.println _ _ O
( _ _ O
s.charAt _ _ O
( _ _ O
1 _ _ O
) _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
é _ _ O
System.out.println _ _ O
( _ _ O
t.length _ _ O
( _ _ O
) _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
5 _ _ O
? _ _ O
? _ _ O
System.out.println _ _ O
( _ _ O
t.charAt _ _ O
( _ _ O
1 _ _ O
) _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
e _ _ O
? _ _ O
? _ _ O
welcome _ _ O
to _ _ O
the _ _ O
wonderful _ _ O
world _ _ O
of _ _ O
Unicode _ _ O
! _ _ O
! _ _ O
! _ _ O
22 _ _ O

Unicode _ _ O
● _ _ O
Unicode _ _ O
is _ _ O
The _ _ O
String _ _ O
Encoding _ _ O
that _ _ O
the _ _ O
whole _ _ O
world _ _ O
* _ _ O
uses _ _ O
now _ _ O
. _ _ O
● _ _ O
it _ _ O
attempts _ _ O
to _ _ O
map _ _ O
every _ _ O
written _ _ O
character _ _ O
in _ _ O
every _ _ O
human _ _ O
language _ _ O
to _ _ O
a _ _ O
number _ _ O
, _ _ O
its _ _ O
codepoint _ _ O
. _ _ O
● _ _ O
but _ _ O
it _ _ O
's _ _ O
more _ _ O
complicated _ _ O
than _ _ O
that _ _ O
, _ _ O
because _ _ O
human _ _ O
writing _ _ O
systems _ _ O
. _ _ O
é _ _ O
= _ _ O
[ _ _ O
U+00E9 _ _ O
] _ _ O
é _ _ O
= _ _ O
[ _ _ O
U+0065 _ _ O
, _ _ O
U+0301 _ _ O
] _ _ O
e _ _ O
+ _ _ O
´ _ _ O
this _ _ O
is _ _ O
a _ _ O
combining _ _ O
mark _ _ O
: _ _ O
it _ _ O
modifies _ _ O
the _ _ O
previous _ _ O
glyph _ _ O
. _ _ O
23 _ _ O

UTF-8 _ _ O
? _ _ O
UTF-16 _ _ O
? _ _ O
UTF-32 _ _ O
? _ _ O
BE _ _ O
? _ _ O
LE _ _ O
? _ _ O
● _ _ O
each _ _ O
codepoint _ _ O
is _ _ O
conceptually _ _ O
a _ _ O
21-bit _ _ O
number _ _ O
. _ _ O
● _ _ O
Unicode _ _ O
text _ _ O
is _ _ O
encoded _ _ O
into _ _ O
one _ _ O
of _ _ O
a _ _ O
few _ _ O
transformation _ _ O
formats _ _ O
. _ _ O
● _ _ O
the _ _ O
encodings _ _ O
of _ _ O
[ _ _ O
U+0074 _ _ O
, _ _ O
U+00E9 _ _ O
, _ _ O
U+0073 _ _ O
, _ _ O
U+0074 _ _ O
] _ _ O
: _ _ O
UTF-32 _ _ O
: _ _ O
each _ _ O
codepoint _ _ O
is _ _ O
a _ _ O
32-bit _ _ O
int _ _ O
. _ _ O
simple _ _ O
, _ _ O
but _ _ O
wastes _ _ O
space _ _ O
. _ _ O
LE _ _ O
74 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
e9 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
73 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
74 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
BE _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
74 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
e9 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
73 _ _ O
00 _ _ O
00 _ _ O
00 _ _ O
74 _ _ O
UTF-16 _ _ O
: _ _ O
each _ _ O
is _ _ O
a _ _ O
16-bit _ _ O
int _ _ O
… _ _ O
unless _ _ O
it _ _ O
's _ _ O
in _ _ O
a _ _ O
certain _ _ O
range _ _ O
, _ _ O
in _ _ O
which _ _ O
case _ _ O
it _ _ O
's _ _ O
two _ _ O
16-bit _ _ O
ints _ _ O
. _ _ O
UTF-8 _ _ O
: _ _ O
ASCII _ _ O
characters _ _ O
are _ _ O
1 _ _ O
byte _ _ O
; _ _ O
all _ _ O
others _ _ O
are _ _ O
2 _ _ O
, _ _ O
3 _ _ O
, _ _ O
or _ _ O
4 _ _ O
bytes _ _ O
long _ _ O
. _ _ O
LE _ _ O
74 _ _ O
00 _ _ O
e9 _ _ O
00 _ _ O
73 _ _ O
00 _ _ O
74 _ _ O
00 _ _ O
BE _ _ O
00 _ _ O
74 _ _ O
00 _ _ O
e9 _ _ O
00 _ _ O
73 _ _ O
00 _ _ O
74 _ _ O
74 _ _ O
c3 _ _ O
a9 _ _ O
73 _ _ O
74 _ _ O
UTF-8 _ _ O
has _ _ O
become _ _ O
the _ _ O
dominant _ _ O
encoding _ _ O
. _ _ O
24 _ _ O

Such _ _ O
sights _ _ O
to _ _ O
show _ _ O
you _ _ O
● _ _ O
Rust _ _ O
uses _ _ O
UTF-8 _ _ O
strings _ _ O
( _ _ O
and _ _ O
so _ _ O
do _ _ O
many _ _ O
other _ _ O
languages _ _ O
) _ _ O
. _ _ O
● _ _ O
Unicode _ _ O
and _ _ O
UTF-8 _ _ O
mean _ _ O
you _ _ O
have _ _ O
to _ _ O
abandon _ _ O
many _ _ O
of _ _ O
your _ _ O
assumptions _ _ O
about _ _ O
how _ _ O
strings _ _ O
work _ _ O
. _ _ O
what _ _ O
is _ _ O
this _ _ O
string _ _ O
's _ _ O
length _ _ O
? _ _ O
tあ̊st _ _ O
74 _ _ O
e3 _ _ O
81 _ _ O
82 _ _ O
cc _ _ O
8a _ _ O
73 _ _ O
74 _ _ O
in _ _ O
bytes _ _ O
? _ _ O
0 _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
5 _ _ O
6 _ _ O
7 _ _ O
len=8 _ _ O
in _ _ O
codepoints _ _ O
? _ _ O
0 _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
4 _ _ O
len=5 _ _ O
in _ _ O
" _ _ O
grapheme _ _ O
0 _ _ O
len=4 _ _ O
1 _ _ O
2 _ _ O
3 _ _ O
clusters _ _ O
? _ _ O
" _ _ O
also _ _ O
, _ _ O
because _ _ O
each _ _ O
codepoint _ _ O
is _ _ O
a _ _ O
different _ _ O
number _ _ O
of _ _ O
bytes _ _ O
, _ _ O
indexing _ _ O
by _ _ O
codepoints _ _ O
is _ _ O
not _ _ O
necessarily _ _ O
O _ _ O
( _ _ O
1 _ _ O
) _ _ O
! _ _ O
25 _ _ O

Oh _ _ O
god _ _ O
● _ _ O
what _ _ O
about _ _ O
getting _ _ O
a _ _ O
substring _ _ O
? _ _ O
● _ _ O
what _ _ O
about _ _ O
reversing _ _ O
strings _ _ O
? _ _ O
● _ _ O
what _ _ O
about _ _ O
toUpper _ _ O
/ _ _ O
toLower _ _ O
? _ _ O
● _ _ O
if _ _ O
we _ _ O
loop _ _ O
over _ _ O
a _ _ O
string _ _ O
, _ _ O
do _ _ O
we _ _ O
see _ _ O
bytes _ _ O
, _ _ O
codepoints _ _ O
, _ _ O
or _ _ O
clusters _ _ O
? _ _ O
● _ _ O
should _ _ O
the _ _ O
" _ _ O
e _ _ O
with _ _ O
acute _ _ O
" _ _ O
precomposed _ _ O
character _ _ O
compare _ _ O
equal _ _ O
to _ _ O
the _ _ O
" _ _ O
e _ _ O
followed _ _ O
by _ _ O
combining _ _ O
acute _ _ O
" _ _ O
character _ _ O
pair _ _ O
? _ _ O
● _ _ O
what _ _ O
about _ _ O
collating _ _ O
( _ _ O
" _ _ O
alphabetizing _ _ O
" _ _ O
) _ _ O
? _ _ O
● _ _ O
what _ _ O
if _ _ O
there _ _ O
are _ _ O
multiple _ _ O
combining _ _ O
marks _ _ O
on _ _ O
a _ _ O
character _ _ O
? _ _ O
does _ _ O
the _ _ O
order _ _ O
of _ _ O
those _ _ O
marks _ _ O
affect _ _ O
its _ _ O
display _ _ O
or _ _ O
meaning _ _ O
? _ _ O
it _ _ O
's _ _ O
not _ _ O
Unicode _ _ O
's _ _ O
fault _ _ O
, _ _ O
it _ _ O
's _ _ O
ours _ _ O
. _ _ O
26 _ _ O

What _ _ O
about _ _ O
Java _ _ O
? _ _ O
● _ _ O
Java _ _ O
adopted _ _ O
Unicode _ _ O
early _ _ O
! _ _ O
… _ _ O
maybe _ _ O
a _ _ O
little _ _ O
too _ _ O
early _ _ O
. _ _ O
● _ _ O
in _ _ O
Java _ _ O
, _ _ O
String _ _ O
is _ _ O
UTF-16 _ _ O
, _ _ O
and _ _ O
char _ _ O
is _ _ O
16 _ _ O
bits _ _ O
( _ _ O
2 _ _ O
bytes _ _ O
) _ _ O
. _ _ O
o _ _ O
at _ _ O
the _ _ O
time _ _ O
Java _ _ O
was _ _ O
created _ _ O
, _ _ O
that _ _ O
's _ _ O
what _ _ O
Unicode _ _ O
was _ _ O
. _ _ O
● _ _ O
but _ _ O
Unicode _ _ O
was _ _ O
extended _ _ O
to _ _ O
21 _ _ O
bits _ _ O
after _ _ O
Java _ _ O
adopted _ _ O
it _ _ O
. _ _ O
so _ _ O
… _ _ O
o _ _ O
.charAt _ _ O
( _ _ O
) _ _ O
is _ _ O
O _ _ O
( _ _ O
1 _ _ O
) _ _ O
, _ _ O
nice _ _ O
! _ _ O
o _ _ O
… _ _ O
but _ _ O
you _ _ O
might _ _ O
only _ _ O
get _ _ O
half _ _ O
a _ _ O
character _ _ O
? _ _ O
? _ _ O
● _ _ O
see _ _ O
, _ _ O
codepoints _ _ O
above _ _ O
U+FFFF _ _ O
are _ _ O
encoded _ _ O
as _ _ O
two _ _ O
Java _ _ O
chars _ _ O
o _ _ O
e.g. _ _ O
many _ _ O
emoji _ _ O
are _ _ O
in _ _ O
this _ _ O
range _ _ O
● _ _ O
so _ _ O
, _ _ O
" _ _ O
proper _ _ O
" _ _ O
codepoint _ _ O
indexing _ _ O
is _ _ O
O _ _ O
( _ _ O
n _ _ O
) _ _ O
in _ _ O
Java _ _ O
too _ _ O
o _ _ O
there _ _ O
is _ _ O
a _ _ O
.codePointAt _ _ O
( _ _ O
) _ _ O
method _ _ O
to _ _ O
help _ _ O
, _ _ O
at _ _ O
least _ _ O
o _ _ O
and _ _ O
a _ _ O
.codePoints _ _ O
( _ _ O
) _ _ O
iterator _ _ O
27 _ _ O

Living _ _ O
in _ _ O
a _ _ O
post-ASCII _ _ O
world _ _ O
● _ _ O
do _ _ O
not _ _ O
assume _ _ O
: _ _ O
o _ _ O
… _ _ O
that _ _ O
your _ _ O
program _ _ O
will _ _ O
only _ _ O
be _ _ O
used _ _ O
by _ _ O
English _ _ O
speakers _ _ O
. _ _ O
o _ _ O
… _ _ O
that _ _ O
your _ _ O
program _ _ O
will _ _ O
only _ _ O
be _ _ O
fed _ _ O
ASCII _ _ O
text _ _ O
. _ _ O
o _ _ O
… _ _ O
that _ _ O
there _ _ O
is _ _ O
one _ _ O
definition _ _ O
of _ _ O
" _ _ O
string _ _ O
length _ _ O
. _ _ O
" _ _ O
o _ _ O
… _ _ O
that _ _ O
string _ _ O
indexing _ _ O
/ _ _ O
substring _ _ O
is _ _ O
a _ _ O
constant-time _ _ O
operation _ _ O
. _ _ O
● _ _ O
do _ _ O
: _ _ O
o _ _ O
trust _ _ O
the _ _ O
people _ _ O
who _ _ O
do _ _ O
this _ _ O
stuff _ _ O
for _ _ O
a _ _ O
living _ _ O
. _ _ O
o _ _ O
read _ _ O
about _ _ O
how _ _ O
your _ _ O
programming _ _ O
language _ _ O
handles _ _ O
text _ _ O
. _ _ O
o _ _ O
write _ _ O
your _ _ O
text _ _ O
processing _ _ O
to _ _ O
be _ _ O
language-agnostic _ _ O
. _ _ O
o _ _ O
prefer _ _ O
iterating _ _ O
over _ _ O
strings _ _ O
instead _ _ O
of _ _ O
indexing _ _ O
them _ _ O
, _ _ O
if _ _ O
possible _ _ O
. _ _ O
o _ _ O
look _ _ O
into _ _ O
canonicalization _ _ O
if _ _ O
you _ _ O
're _ _ O
dealing _ _ O
with _ _ O
thorny _ _ O
issues _ _ O
. _ _ O
o _ _ O
accept _ _ O
that _ _ O
some _ _ O
Rust _ _ O
string _ _ O
stuff _ _ O
looks _ _ O
weird _ _ O
/ _ _ O
complicated _ _ O
for _ _ O
a _ _ O
very _ _ O
good _ _ O
reason _ _ O
: _ _ O
text _ _ O
is _ _ O
weird _ _ O
/ _ _ O
complicated _ _ O
. _ _ O
28 _ _ O



