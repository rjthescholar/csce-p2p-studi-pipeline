unlabeled|cs1622|lec10
-DOCSTART- -X- -X- O

Advanced _ _ O
Typing _ _ O
CS _ _ O
1622 _ _ O
Jarrett _ _ O
Billingsley _ _ O

Class _ _ O
Announcements _ _ O
● _ _ O
the _ _ O
exam _ _ O
is _ _ O
on _ _ O
Monday _ _ O
, _ _ O
do _ _ O
n’t _ _ O
forget _ _ O
! _ _ O
o _ _ O
we _ _ O
’ll _ _ O
do _ _ O
a _ _ O
little _ _ O
review _ _ O
before _ _ O
we _ _ O
start _ _ O
. _ _ O
o _ _ O
it _ _ O
will _ _ O
be _ _ O
taken _ _ O
on _ _ O
Canvas _ _ O
, _ _ O
but _ _ O
in _ _ O
person _ _ O
, _ _ O
so _ _ O
bring _ _ O
a _ _ O
computer _ _ O
. _ _ O
o _ _ O
also _ _ O
do _ _ O
not _ _ O
use _ _ O
Safari _ _ O
, _ _ O
mac _ _ O
users _ _ O
! _ _ O
issues _ _ O
with _ _ O
Canvas _ _ O
exams _ _ O
! _ _ O
● _ _ O
now _ _ O
let _ _ O
’s _ _ O
do _ _ O
some _ _ O
ADVANCED _ _ O
TYPING _ _ O
2 _ _ O

Polymorphism _ _ O
3 _ _ O

Poly _ _ O
= _ _ O
Many _ _ O
, _ _ O
Morph _ _ O
= _ _ O
Shape _ _ O
● _ _ O
abstraction _ _ O
is _ _ O
about _ _ O
ignoring _ _ O
concrete _ _ O
details _ _ O
. _ _ O
● _ _ O
polymorphism _ _ O
lets _ _ O
us _ _ O
write _ _ O
abstract _ _ O
code _ _ O
once _ _ O
, _ _ O
that _ _ O
can _ _ O
work _ _ O
on _ _ O
many _ _ O
types _ _ O
of _ _ O
values _ _ O
, _ _ O
without _ _ O
having _ _ O
to _ _ O
change _ _ O
the _ _ O
code _ _ O
. _ _ O
● _ _ O
it _ _ O
covers _ _ O
a _ _ O
wide _ _ O
range _ _ O
of _ _ O
techniques _ _ O
and _ _ O
language _ _ O
features _ _ O
, _ _ O
like _ _ O
… _ _ O
o _ _ O
subclasses _ _ O
in _ _ O
Java _ _ O
, _ _ O
C++ _ _ O
, _ _ O
Python _ _ O
o _ _ O
interfaces _ _ O
in _ _ O
Java _ _ O
, _ _ O
Go _ _ O
and _ _ O
traits _ _ O
in _ _ O
Rust _ _ O
o _ _ O
generics _ _ O
in _ _ O
Java _ _ O
, _ _ O
Rust _ _ O
o _ _ O
templates _ _ O
in _ _ O
C++ _ _ O
o _ _ O
function _ _ O
name _ _ O
overloading _ _ O
in _ _ O
Java _ _ O
, _ _ O
C++ _ _ O
o _ _ O
operator _ _ O
overloading _ _ O
in _ _ O
C++ _ _ O
, _ _ O
Rust _ _ O
, _ _ O
Python _ _ O
o _ _ O
unions _ _ O
and _ _ O
void _ _ O
pointers _ _ O
in _ _ O
C _ _ O
o _ _ O
duck _ _ O
typing _ _ O
in _ _ O
most _ _ O
dynamically-typed _ _ O
languages _ _ O
o _ _ O
anything _ _ O
with _ _ O
" _ _ O
late _ _ O
binding _ _ O
" _ _ O
in _ _ O
the _ _ O
name _ _ O
4 _ _ O

Do _ _ O
n't _ _ O
repeat _ _ O
yourself _ _ O
. _ _ O
● _ _ O
repeating _ _ O
code _ _ O
is _ _ O
a _ _ O
cardinal _ _ O
sin _ _ O
. _ _ O
encode _ _ O
your _ _ O
thoughts _ _ O
once _ _ O
. _ _ O
● _ _ O
polymorphism _ _ O
lets _ _ O
us _ _ O
avoid _ _ O
repeating _ _ O
code _ _ O
. _ _ O
ArrayList _ _ O
< _ _ O
Integer _ _ O
> _ _ O
i _ _ O
= _ _ O
new _ _ O
ArrayList _ _ O
< _ _ O
> _ _ O
( _ _ O
) _ _ O
; _ _ O
ArrayList _ _ O
< _ _ O
String _ _ O
> _ _ O
s _ _ O
= _ _ O
new _ _ O
ArrayList _ _ O
< _ _ O
> _ _ O
( _ _ O
) _ _ O
; _ _ O
the _ _ O
task _ _ O
of _ _ O
keeping _ _ O
an _ _ O
array-based _ _ O
list _ _ O
of _ _ O
things _ _ O
does _ _ O
n't _ _ O
change _ _ O
depending _ _ O
on _ _ O
what _ _ O
type _ _ O
of _ _ O
things _ _ O
are _ _ O
in _ _ O
the _ _ O
array _ _ O
. _ _ O
we _ _ O
do _ _ O
n’t _ _ O
have _ _ O
to _ _ O
make _ _ O
a _ _ O
new _ _ O
ArrayList _ _ O
class _ _ O
for _ _ O
every _ _ O
type _ _ O
of _ _ O
value _ _ O
we _ _ O
want _ _ O
to _ _ O
store _ _ O
. _ _ O
we _ _ O
wrote _ _ O
it _ _ O
once _ _ O
, _ _ O
and _ _ O
now _ _ O
it _ _ O
will _ _ O
work _ _ O
for _ _ O
any _ _ O
type _ _ O
of _ _ O
value _ _ O
. _ _ O
we _ _ O
can _ _ O
even _ _ O
make _ _ O
functions _ _ O
which _ _ O
operate _ _ O
on _ _ O
any _ _ O
type _ _ O
of _ _ O
ArrayList _ _ O
: _ _ O
< _ _ O
T _ _ O
> _ _ O
void _ _ O
foo _ _ O
( _ _ O
ArrayList _ _ O
< _ _ O
T _ _ O
> _ _ O
list _ _ O
) _ _ O
5 _ _ O

What _ _ O
type _ _ O
is _ _ O
it _ _ O
? _ _ O
● _ _ O
the _ _ O
basic _ _ O
idea _ _ O
is _ _ O
that _ _ O
polymorphism _ _ O
lets _ _ O
us _ _ O
make _ _ O
values _ _ O
which _ _ O
can _ _ O
have _ _ O
more _ _ O
than _ _ O
one _ _ O
possible _ _ O
type _ _ O
. _ _ O
Object _ _ O
Base _ _ O
A _ _ O
B _ _ O
with _ _ O
this _ _ O
class _ _ O
hierarchy _ _ O
, _ _ O
I _ _ O
can _ _ O
make _ _ O
a _ _ O
Base _ _ O
variable _ _ O
which _ _ O
can _ _ O
hold _ _ O
3 _ _ O
different _ _ O
types _ _ O
. _ _ O
void _ _ O
print _ _ O
( _ _ O
int _ _ O
i _ _ O
) _ _ O
; _ _ O
void _ _ O
print _ _ O
( _ _ O
String _ _ O
s _ _ O
) _ _ O
; _ _ O
what _ _ O
type _ _ O
is _ _ O
this _ _ O
print _ _ O
method _ _ O
? _ _ O
I _ _ O
guess _ _ O
it _ _ O
's _ _ O
a _ _ O
set _ _ O
of _ _ O
types _ _ O
… _ _ O
? _ _ O
6 _ _ O

" _ _ O
Ad-Hoc _ _ O
" _ _ O
Polymorphism _ _ O
7 _ _ O

You _ _ O
know _ _ O
about _ _ O
this _ _ O
: _ _ O
overloading _ _ O
! _ _ O
● _ _ O
this _ _ O
is _ _ O
something _ _ O
you _ _ O
can _ _ O
do _ _ O
in _ _ O
Java _ _ O
( _ _ O
but _ _ O
not _ _ O
Rust _ _ O
) _ _ O
: _ _ O
void _ _ O
print _ _ O
( _ _ O
int _ _ O
i _ _ O
) _ _ O
; _ _ O
void _ _ O
print _ _ O
( _ _ O
String _ _ O
s _ _ O
) _ _ O
; _ _ O
● _ _ O
now _ _ O
when _ _ O
I _ _ O
call _ _ O
print _ _ O
( _ _ O
x _ _ O
) _ _ O
… _ _ O
o _ _ O
which _ _ O
version _ _ O
, _ _ O
or _ _ O
overload _ _ O
, _ _ O
is _ _ O
used _ _ O
is _ _ O
decided _ _ O
statically _ _ O
based _ _ O
on _ _ O
the _ _ O
type _ _ O
of _ _ O
the _ _ O
argument _ _ O
. _ _ O
● _ _ O
each _ _ O
overload _ _ O
can _ _ O
do _ _ O
different _ _ O
things _ _ O
, _ _ O
which _ _ O
can _ _ O
be _ _ O
useful _ _ O
! _ _ O
o _ _ O
… _ _ O
but _ _ O
if _ _ O
they _ _ O
're _ _ O
all _ _ O
doing _ _ O
basically _ _ O
the _ _ O
same _ _ O
thing _ _ O
, _ _ O
it _ _ O
feels _ _ O
silly _ _ O
. _ _ O
o _ _ O
have _ _ O
a _ _ O
look _ _ O
at _ _ O
java.util.Arrays _ _ O
for _ _ O
an _ _ O
example _ _ O
of _ _ O
what _ _ O
I _ _ O
mean _ _ O
. _ _ O
● _ _ O
it _ _ O
's _ _ O
called _ _ O
ad-hoc _ _ O
because _ _ O
you _ _ O
just _ _ O
add _ _ O
overloads _ _ O
as _ _ O
you _ _ O
need _ _ O
them _ _ O
, _ _ O
and _ _ O
the _ _ O
compiler _ _ O
figures _ _ O
out _ _ O
what _ _ O
you _ _ O
mean _ _ O
. _ _ O
● _ _ O
so _ _ O
how _ _ O
would _ _ O
this _ _ O
be _ _ O
handled _ _ O
by _ _ O
a _ _ O
compiler _ _ O
? _ _ O
8 _ _ O

Implementing _ _ O
overloading _ _ O
in _ _ O
a _ _ O
compiler _ _ O
● _ _ O
essentially _ _ O
, _ _ O
we _ _ O
're _ _ O
just _ _ O
extending _ _ O
the _ _ O
symbol _ _ O
table _ _ O
. _ _ O
as _ _ O
the _ _ O
user _ _ O
adds _ _ O
more _ _ O
overloads _ _ O
, _ _ O
the _ _ O
set _ _ O
can _ _ O
be _ _ O
extended _ _ O
. _ _ O
Name _ _ O
Referent _ _ O
" _ _ O
A _ _ O
" _ _ O
< _ _ O
class _ _ O
A _ _ O
> _ _ O
" _ _ O
print _ _ O
" _ _ O
< _ _ O
overload _ _ O
set _ _ O
> _ _ O
Signature _ _ O
Referent _ _ O
now _ _ O
a _ _ O
name _ _ O
can _ _ O
refer _ _ O
to _ _ O
either _ _ O
a _ _ O
single _ _ O
symbol _ _ O
or _ _ O
a _ _ O
set _ _ O
of _ _ O
symbols _ _ O
with _ _ O
the _ _ O
same _ _ O
name _ _ O
. _ _ O
void _ _ O
( _ _ O
int _ _ O
) _ _ O
< _ _ O
print _ _ O
1 _ _ O
> _ _ O
void _ _ O
( _ _ O
char _ _ O
) _ _ O
< _ _ O
print _ _ O
2 _ _ O
> _ _ O
void _ _ O
( _ _ O
String _ _ O
) _ _ O
< _ _ O
print _ _ O
3 _ _ O
> _ _ O
now _ _ O
, _ _ O
when _ _ O
print _ _ O
is _ _ O
called _ _ O
, _ _ O
it _ _ O
searches _ _ O
for _ _ O
the _ _ O
right _ _ O
signature _ _ O
in _ _ O
the _ _ O
overload _ _ O
set _ _ O
, _ _ O
and _ _ O
gives _ _ O
an _ _ O
error _ _ O
if _ _ O
none _ _ O
match _ _ O
or _ _ O
more _ _ O
than _ _ O
one _ _ O
match _ _ O
. _ _ O
9 _ _ O

More _ _ O
than _ _ O
one _ _ O
can _ _ O
match _ _ O
? _ _ O
? _ _ O
● _ _ O
overloading _ _ O
is _ _ O
complicated _ _ O
by _ _ O
implicit _ _ O
type _ _ O
conversions _ _ O
. _ _ O
● _ _ O
for _ _ O
example _ _ O
, _ _ O
Java _ _ O
will _ _ O
implicitly _ _ O
convert _ _ O
ints _ _ O
to _ _ O
floats _ _ O
. _ _ O
static _ _ O
void _ _ O
print _ _ O
( _ _ O
int _ _ O
i _ _ O
, _ _ O
float _ _ O
f _ _ O
) _ _ O
... _ _ O
static _ _ O
void _ _ O
print _ _ O
( _ _ O
float _ _ O
f _ _ O
, _ _ O
int _ _ O
i _ _ O
) _ _ O
... _ _ O
print _ _ O
( _ _ O
10 _ _ O
, _ _ O
10 _ _ O
) _ _ O
; _ _ O
10 _ _ O
can _ _ O
be _ _ O
implicitly _ _ O
converted _ _ O
to _ _ O
float _ _ O
, _ _ O
so _ _ O
this _ _ O
use _ _ O
of _ _ O
print _ _ O
could _ _ O
mean _ _ O
either _ _ O
overload _ _ O
. _ _ O
the _ _ O
compiler _ _ O
says _ _ O
this _ _ O
is _ _ O
ambiguous _ _ O
. _ _ O
you _ _ O
do _ _ O
n't _ _ O
even _ _ O
wanna _ _ O
know _ _ O
how _ _ O
ugly _ _ O
this _ _ O
gets _ _ O
in _ _ O
languages _ _ O
like _ _ O
C++ _ _ O
where _ _ O
you _ _ O
can _ _ O
define _ _ O
your _ _ O
own _ _ O
implicit _ _ O
conversions _ _ O
. _ _ O
10 _ _ O

Name _ _ O
mangling _ _ O
● _ _ O
for _ _ O
practical _ _ O
reasons _ _ O
( _ _ O
linkers _ _ O
, _ _ O
debuggers _ _ O
, _ _ O
etc _ _ O
) _ _ O
, _ _ O
these _ _ O
overloaded _ _ O
functions _ _ O
must _ _ O
be _ _ O
given _ _ O
unique _ _ O
names _ _ O
in _ _ O
the _ _ O
output _ _ O
object _ _ O
files _ _ O
. _ _ O
● _ _ O
name _ _ O
mangling _ _ O
encodes _ _ O
the _ _ O
function _ _ O
's _ _ O
signature _ _ O
– _ _ O
its _ _ O
argument _ _ O
and _ _ O
return _ _ O
types _ _ O
– _ _ O
into _ _ O
a _ _ O
textual _ _ O
form _ _ O
that _ _ O
these _ _ O
other _ _ O
tools _ _ O
can _ _ O
use _ _ O
. _ _ O
void _ _ O
print _ _ O
( _ _ O
int _ _ O
i _ _ O
, _ _ O
float _ _ O
f _ _ O
) _ _ O
= _ _ O
> _ _ O
" _ _ O
_ _ _ O
Z5printif _ _ O
" _ _ O
( _ _ O
g++ _ _ O
) _ _ O
= _ _ O
> _ _ O
" _ _ O
? _ _ O
print@@YAXHM@Z _ _ O
" _ _ O
( _ _ O
msvc++ _ _ O
) _ _ O
void _ _ O
print _ _ O
( _ _ O
float _ _ O
f _ _ O
, _ _ O
int _ _ O
i _ _ O
) _ _ O
= _ _ O
> _ _ O
" _ _ O
_ _ _ O
Z5printfi _ _ O
" _ _ O
( _ _ O
g++ _ _ O
) _ _ O
= _ _ O
> _ _ O
" _ _ O
? _ _ O
print@@YAXMH@Z _ _ O
" _ _ O
( _ _ O
msvc++ _ _ O
) _ _ O
now _ _ O
you _ _ O
know _ _ O
what _ _ O
these _ _ O
horrid _ _ O
things _ _ O
are _ _ O
, _ _ O
if _ _ O
they _ _ O
ever _ _ O
show _ _ O
up _ _ O
in _ _ O
error _ _ O
messages _ _ O
… _ _ O
11 _ _ O

Subtype _ _ O
Polymorphism _ _ O
12 _ _ O

You _ _ O
know _ _ O
about _ _ O
this _ _ O
one _ _ O
too _ _ O
! _ _ O
● _ _ O
in _ _ O
subtype _ _ O
polymorphism _ _ O
, _ _ O
types _ _ O
can _ _ O
be _ _ O
placed _ _ O
in _ _ O
a _ _ O
hierarchy _ _ O
, _ _ O
where _ _ O
subtypes _ _ O
are _ _ O
more _ _ O
specialized _ _ O
than _ _ O
their _ _ O
base _ _ O
types _ _ O
. _ _ O
● _ _ O
the _ _ O
important _ _ O
feature _ _ O
is _ _ O
: _ _ O
anywhere _ _ O
a _ _ O
base _ _ O
type _ _ O
is _ _ O
expected _ _ O
, _ _ O
a _ _ O
subtype _ _ O
can _ _ O
be _ _ O
used _ _ O
in _ _ O
its _ _ O
place _ _ O
. _ _ O
void _ _ O
print _ _ O
( _ _ O
Object _ _ O
o _ _ O
) _ _ O
{ _ _ O
System.out.println _ _ O
( _ _ O
o.toString _ _ O
( _ _ O
) _ _ O
) _ _ O
; _ _ O
} _ _ O
any _ _ O
object _ _ O
type _ _ O
can _ _ O
be _ _ O
passed _ _ O
to _ _ O
this _ _ O
function _ _ O
, _ _ O
because _ _ O
all _ _ O
object _ _ O
types _ _ O
are _ _ O
, _ _ O
directly _ _ O
or _ _ O
transitively _ _ O
, _ _ O
subtypes _ _ O
of _ _ O
Object _ _ O
. _ _ O
another _ _ O
way _ _ O
of _ _ O
thinking _ _ O
of _ _ O
it _ _ O
is _ _ O
that _ _ O
the _ _ O
set _ _ O
of _ _ O
operations _ _ O
of _ _ O
each _ _ O
object _ _ O
type _ _ O
is _ _ O
a _ _ O
superset _ _ O
of _ _ O
the _ _ O
set _ _ O
of _ _ O
operations _ _ O
of _ _ O
Object _ _ O
. _ _ O
13 _ _ O

Interfaces _ _ O
● _ _ O
Java _ _ O
also _ _ O
has _ _ O
interfaces _ _ O
. _ _ O
every _ _ O
type _ _ O
can _ _ O
extend _ _ O
one _ _ O
class _ _ O
but _ _ O
can _ _ O
implement _ _ O
any _ _ O
number _ _ O
of _ _ O
interfaces _ _ O
. _ _ O
Object _ _ O
Base _ _ O
Comparable _ _ O
Cloneable _ _ O
now _ _ O
Base _ _ O
is _ _ O
a _ _ O
subtype _ _ O
of _ _ O
three _ _ O
other _ _ O
types _ _ O
. _ _ O
we _ _ O
write _ _ O
these _ _ O
relations _ _ O
as _ _ O
Base _ _ O
< _ _ O
: _ _ O
Object _ _ O
( _ _ O
or _ _ O
Object _ _ O
:> _ _ O
Base _ _ O
) _ _ O
, _ _ O
Base _ _ O
< _ _ O
: _ _ O
Comparable _ _ O
, _ _ O
and _ _ O
Base _ _ O
< _ _ O
: _ _ O
Cloneable _ _ O
. _ _ O
but _ _ O
interfaces _ _ O
exist _ _ O
" _ _ O
outside _ _ O
" _ _ O
the _ _ O
class _ _ O
hierarchy _ _ O
, _ _ O
letting _ _ O
us _ _ O
group _ _ O
types _ _ O
by _ _ O
their _ _ O
capabilities _ _ O
, _ _ O
not _ _ O
just _ _ O
their _ _ O
inheritance _ _ O
. _ _ O
14 _ _ O

Implementing _ _ O
subtyping _ _ O
in _ _ O
a _ _ O
compiler _ _ O
● _ _ O
the _ _ O
compiler _ _ O
has _ _ O
to _ _ O
keep _ _ O
track _ _ O
of _ _ O
the _ _ O
subtype _ _ O
relations _ _ O
between _ _ O
classes _ _ O
and _ _ O
interfaces _ _ O
. _ _ O
o _ _ O
it _ _ O
also _ _ O
has _ _ O
to _ _ O
ensure _ _ O
that _ _ O
there _ _ O
are _ _ O
no _ _ O
cycles _ _ O
in _ _ O
the _ _ O
subtypes _ _ O
, _ _ O
like _ _ O
: _ _ O
class _ _ O
A _ _ O
extends _ _ O
B _ _ O
{ _ _ O
} _ _ O
class _ _ O
B _ _ O
extends _ _ O
A _ _ O
{ _ _ O
} _ _ O
/ _ _ O
/ _ _ O
how _ _ O
? _ _ O
? _ _ O
● _ _ O
then _ _ O
when _ _ O
doing _ _ O
typechecking _ _ O
, _ _ O
it _ _ O
will _ _ O
allow _ _ O
any _ _ O
type _ _ O
or _ _ O
its _ _ O
subtype _ _ O
to _ _ O
be _ _ O
put _ _ O
into _ _ O
a _ _ O
variable _ _ O
, _ _ O
argument _ _ O
, _ _ O
array _ _ O
slot _ _ O
etc _ _ O
. _ _ O
o _ _ O
Object _ _ O
o _ _ O
= _ _ O
new _ _ O
A _ _ O
( _ _ O
) _ _ O
; _ _ O
is _ _ O
valid _ _ O
because _ _ O
A _ _ O
is _ _ O
a _ _ O
subtype _ _ O
of _ _ O
Object _ _ O
o _ _ O
A _ _ O
a _ _ O
= _ _ O
new _ _ O
Object _ _ O
( _ _ O
) _ _ O
; _ _ O
is _ _ O
not _ _ O
, _ _ O
because _ _ O
the _ _ O
opposite _ _ O
is _ _ O
not _ _ O
true _ _ O
. _ _ O
● _ _ O
it _ _ O
really _ _ O
is _ _ O
that _ _ O
straightforward _ _ O
! _ _ O
o _ _ O
… _ _ O
. _ _ O
ha _ _ O
ha _ _ O
ha _ _ O
sure _ _ O
yeah _ _ O
right _ _ O
15 _ _ O

But _ _ O
it _ _ O
's _ _ O
got _ _ O
… _ _ O
issues _ _ O
. _ _ O
● _ _ O
subtyping _ _ O
comes _ _ O
at _ _ O
a _ _ O
cost _ _ O
: _ _ O
complexity _ _ O
. _ _ O
● _ _ O
it _ _ O
interacts _ _ O
with _ _ O
every _ _ O
other _ _ O
feature _ _ O
of _ _ O
a _ _ O
language _ _ O
, _ _ O
often _ _ O
in _ _ O
non-trivial _ _ O
ways _ _ O
, _ _ O
and _ _ O
even _ _ O
making _ _ O
some _ _ O
type _ _ O
systems _ _ O
undecidable _ _ O
. _ _ O
void _ _ O
print _ _ O
( _ _ O
Object _ _ O
o _ _ O
) _ _ O
... _ _ O
void _ _ O
print _ _ O
( _ _ O
A _ _ O
a _ _ O
) _ _ O
... _ _ O
does _ _ O
this _ _ O
make _ _ O
sense _ _ O
? _ _ O
is _ _ O
this _ _ O
what _ _ O
you _ _ O
'd _ _ O
expect _ _ O
? _ _ O
this _ _ O
happens _ _ O
because _ _ O
Java _ _ O
's _ _ O
A _ _ O
a _ _ O
= _ _ O
new _ _ O
A _ _ O
( _ _ O
) _ _ O
; _ _ O
ad-hoc _ _ O
polymorphism _ _ O
is _ _ O
/ _ _ O
/ _ _ O
calls _ _ O
print _ _ O
( _ _ O
A _ _ O
) _ _ O
statically _ _ O
resolved _ _ O
, _ _ O
but _ _ O
its _ _ O
print _ _ O
( _ _ O
a _ _ O
) _ _ O
; _ _ O
subtype _ _ O
polymorphism _ _ O
is _ _ O
Object _ _ O
o _ _ O
= _ _ O
a _ _ O
; _ _ O
dynamically _ _ O
resolved _ _ O
. _ _ O
/ _ _ O
/ _ _ O
calls _ _ O
print _ _ O
( _ _ O
Object _ _ O
) _ _ O
print _ _ O
( _ _ O
o _ _ O
) _ _ O
; _ _ O
other _ _ O
languages _ _ O
have _ _ O
other _ _ O
ideas _ _ O
about _ _ O
this _ _ O
– _ _ O
look _ _ O
up _ _ O
multiple _ _ O
dispatch _ _ O
. _ _ O
16 _ _ O

Implementing _ _ O
subtyping _ _ O
at _ _ O
runtime _ _ O
● _ _ O
we _ _ O
wo _ _ O
n't _ _ O
get _ _ O
into _ _ O
the _ _ O
details _ _ O
for _ _ O
a _ _ O
few _ _ O
weeks _ _ O
, _ _ O
but _ _ O
… _ _ O
● _ _ O
each _ _ O
class _ _ O
gets _ _ O
a _ _ O
data _ _ O
layout _ _ O
and _ _ O
a _ _ O
virtual _ _ O
method _ _ O
table _ _ O
( _ _ O
vtable _ _ O
) _ _ O
. _ _ O
● _ _ O
subclasses _ _ O
' _ _ O
layouts _ _ O
and _ _ O
vtables _ _ O
are _ _ O
prefixed _ _ O
by _ _ O
their _ _ O
superclasses _ _ O
' _ _ O
. _ _ O
class _ _ O
Object _ _ O
class _ _ O
A _ _ O
{ _ _ O
int _ _ O
x _ _ O
; _ _ O
void _ _ O
foo _ _ O
( _ _ O
) _ _ O
{ _ _ O
} _ _ O
} _ _ O
layout _ _ O
vtable _ _ O
layout _ _ O
vtable _ _ O
vtable _ _ O
< _ _ O
Object _ _ O
> _ _ O
vtable _ _ O
< _ _ O
A _ _ O
> _ _ O
monitor _ _ O
clone _ _ O
( _ _ O
) _ _ O
monitor _ _ O
clone _ _ O
( _ _ O
) _ _ O
equals _ _ O
( _ _ O
) _ _ O
x _ _ O
equals _ _ O
( _ _ O
) _ _ O
toString _ _ O
( _ _ O
) _ _ O
toString _ _ O
( _ _ O
) _ _ O
foo _ _ O
( _ _ O
) _ _ O
any _ _ O
A _ _ O
reference _ _ O
therefore _ _ O
points _ _ O
to _ _ O
a _ _ O
piece _ _ O
of _ _ O
memory _ _ O
which _ _ O
looks _ _ O
identical _ _ O
to _ _ O
an _ _ O
Object _ _ O
at _ _ O
the _ _ O
beginning _ _ O
. _ _ O
17 _ _ O

Subtyping _ _ O
in _ _ O
Rust _ _ O
● _ _ O
Rust _ _ O
has _ _ O
no _ _ O
OOP _ _ O
, _ _ O
but _ _ O
it _ _ O
does _ _ O
support _ _ O
a _ _ O
form _ _ O
of _ _ O
subtyping _ _ O
and _ _ O
dynamic _ _ O
dispatch _ _ O
using _ _ O
traits _ _ O
, _ _ O
which _ _ O
are _ _ O
similar _ _ O
to _ _ O
Java _ _ O
interfaces _ _ O
. _ _ O
trait _ _ O
Base _ _ O
{ _ _ O
now _ _ O
any _ _ O
type _ _ O
which _ _ O
implements _ _ O
fn _ _ O
base _ _ O
( _ _ O
& _ _ O
self _ _ O
) _ _ O
; _ _ O
Derived _ _ O
must _ _ O
also _ _ O
implement _ _ O
Base _ _ O
. _ _ O
} _ _ O
/ _ _ O
/ _ _ O
Derived _ _ O
is _ _ O
called _ _ O
a _ _ O
you _ _ O
can _ _ O
also _ _ O
have _ _ O
variables _ _ O
of _ _ O
/ _ _ O
/ _ _ O
supertrait _ _ O
of _ _ O
Base _ _ O
type _ _ O
Box _ _ O
< _ _ O
dyn _ _ O
Base _ _ O
> _ _ O
, _ _ O
which _ _ O
are _ _ O
trait _ _ O
Derived _ _ O
: _ _ O
Base _ _ O
{ _ _ O
like _ _ O
Java _ _ O
's _ _ O
interface _ _ O
variables _ _ O
. _ _ O
fn _ _ O
derived _ _ O
( _ _ O
& _ _ O
self _ _ O
) _ _ O
{ _ _ O
/ _ _ O
/ _ _ O
we _ _ O
can _ _ O
use _ _ O
they _ _ O
can _ _ O
hold _ _ O
any _ _ O
type _ _ O
which _ _ O
/ _ _ O
/ _ _ O
methods _ _ O
of _ _ O
Base _ _ O
implements _ _ O
Base _ _ O
, _ _ O
and _ _ O
their _ _ O
methods _ _ O
self.base _ _ O
( _ _ O
) _ _ O
; _ _ O
will _ _ O
be _ _ O
dispatched _ _ O
at _ _ O
runtime _ _ O
. _ _ O
} _ _ O
} _ _ O
18 _ _ O

Parametric _ _ O
Polymorphism _ _ O
19 _ _ O

Static _ _ O
and _ _ O
Dynamic _ _ O
● _ _ O
ad-hoc _ _ O
polymorphism _ _ O
is _ _ O
statically _ _ O
dispatched _ _ O
. _ _ O
● _ _ O
subtype _ _ O
polymorphism _ _ O
is _ _ O
( _ _ O
mostly _ _ O
) _ _ O
dynamically _ _ O
dispatched _ _ O
. _ _ O
● _ _ O
but _ _ O
dynamic _ _ O
dispatch _ _ O
is _ _ O
actually _ _ O
kind _ _ O
of _ _ O
costly _ _ O
on _ _ O
modern _ _ O
CPUs _ _ O
… _ _ O
o.toString _ _ O
( _ _ O
) _ _ O
; _ _ O
lw _ _ O
a0 _ _ O
, _ _ O
4 _ _ O
( _ _ O
sp _ _ O
) _ _ O
# _ _ O
a0 _ _ O
= _ _ O
o _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
a0 _ _ O
) _ _ O
# _ _ O
t0 _ _ O
= _ _ O
o.vtbl _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
16 _ _ O
( _ _ O
t0 _ _ O
) _ _ O
# _ _ O
t0 _ _ O
= _ _ O
o.vtbl _ _ O
[ _ _ O
4 _ _ O
] _ _ O
jalr _ _ O
t0 _ _ O
# _ _ O
indirect _ _ O
call _ _ O
three _ _ O
dependent _ _ O
loads _ _ O
from _ _ O
three _ _ O
totally _ _ O
different _ _ O
places _ _ O
in _ _ O
memory _ _ O
make _ _ O
the _ _ O
pipeline _ _ O
and _ _ O
cache _ _ O
very _ _ O
unhappy _ _ O
. _ _ O
and _ _ O
then _ _ O
you _ _ O
have _ _ O
an _ _ O
indirect _ _ O
jump _ _ O
, _ _ O
which _ _ O
can _ _ O
confuse _ _ O
the _ _ O
branch _ _ O
predictor _ _ O
and _ _ O
stall _ _ O
the _ _ O
instruction _ _ O
pipeline _ _ O
! _ _ O
20 _ _ O

Parametric _ _ O
polymorphism _ _ O
to _ _ O
the _ _ O
rescue _ _ O
● _ _ O
parametric _ _ O
polymorphism _ _ O
is _ _ O
a _ _ O
more _ _ O
explicit _ _ O
kind _ _ O
of _ _ O
polymorphism _ _ O
, _ _ O
where _ _ O
the _ _ O
types _ _ O
are _ _ O
a _ _ O
sort _ _ O
of _ _ O
" _ _ O
fill _ _ O
in _ _ O
the _ _ O
blank _ _ O
. _ _ O
" _ _ O
● _ _ O
the _ _ O
types _ _ O
themselves _ _ O
become _ _ O
an _ _ O
argument _ _ O
. _ _ O
fn _ _ O
id _ _ O
< _ _ O
T _ _ O
> _ _ O
( _ _ O
t _ _ O
: _ _ O
T _ _ O
) _ _ O
- _ _ O
> _ _ O
T _ _ O
{ _ _ O
return _ _ O
t _ _ O
; _ _ O
} _ _ O
this _ _ O
is _ _ O
a _ _ O
silly _ _ O
function _ _ O
which _ _ O
just _ _ O
returns _ _ O
its _ _ O
argument _ _ O
. _ _ O
" _ _ O
i _ _ O
d _ _ O
" _ _ O
means _ _ O
" _ _ O
identity _ _ O
. _ _ O
" _ _ O
it _ _ O
's _ _ O
math _ _ O
stuff _ _ O
. _ _ O
this _ _ O
is _ _ O
not _ _ O
one _ _ O
function _ _ O
. _ _ O
this _ _ O
is _ _ O
an _ _ O
entire _ _ O
family _ _ O
of _ _ O
functions _ _ O
, _ _ O
which _ _ O
take _ _ O
a _ _ O
T _ _ O
and _ _ O
return _ _ O
a _ _ O
T _ _ O
, _ _ O
for _ _ O
all _ _ O
types _ _ O
T. _ _ O
this _ _ O
is _ _ O
universal _ _ O
quantification _ _ O
. _ _ O
we _ _ O
're _ _ O
saying _ _ O
∀T _ _ O
, _ _ O
you _ _ O
can _ _ O
get _ _ O
an _ _ O
i _ _ O
d _ _ O
function _ _ O
of _ _ O
type _ _ O
T→T _ _ O
( _ _ O
a _ _ O
function _ _ O
that _ _ O
maps _ _ O
from _ _ O
T _ _ O
to _ _ O
T _ _ O
) _ _ O
. _ _ O
what _ _ O
" _ _ O
type _ _ O
" _ _ O
is _ _ O
i _ _ O
d _ _ O
, _ _ O
then _ _ O
? _ _ O
21 _ _ O

Using _ _ O
parametrically _ _ O
polymorphic _ _ O
functions _ _ O
● _ _ O
Rust _ _ O
lets _ _ O
you _ _ O
either _ _ O
explicitly _ _ O
or _ _ O
implicitly _ _ O
specify _ _ O
the _ _ O
type _ _ O
arguments _ _ O
. _ _ O
let _ _ O
x _ _ O
: _ _ O
i32 _ _ O
= _ _ O
id _ _ O
: _ _ O
: _ _ O
< _ _ O
i32 _ _ O
> _ _ O
( _ _ O
10 _ _ O
) _ _ O
; _ _ O
let _ _ O
y _ _ O
: _ _ O
i32 _ _ O
= _ _ O
id _ _ O
( _ _ O
20 _ _ O
) _ _ O
; _ _ O
let _ _ O
z _ _ O
= _ _ O
id _ _ O
( _ _ O
30 _ _ O
) _ _ O
; _ _ O
the _ _ O
: _ _ O
: _ _ O
< _ _ O
> _ _ O
operator _ _ O
is _ _ O
called _ _ O
" _ _ O
turbofish _ _ O
. _ _ O
" _ _ O
🐟 _ _ O
💨 _ _ O
in _ _ O
the _ _ O
second _ _ O
line _ _ O
, _ _ O
the _ _ O
compiler _ _ O
is _ _ O
able _ _ O
to _ _ O
infer _ _ O
what _ _ O
type _ _ O
should _ _ O
be _ _ O
passed _ _ O
as _ _ O
the _ _ O
type _ _ O
argument _ _ O
. _ _ O
in _ _ O
the _ _ O
third _ _ O
line _ _ O
, _ _ O
it _ _ O
infers _ _ O
the _ _ O
type _ _ O
of _ _ O
the _ _ O
variable _ _ O
too _ _ O
! _ _ O
all _ _ O
three _ _ O
lines _ _ O
use _ _ O
the _ _ O
same _ _ O
implementation _ _ O
of _ _ O
i _ _ O
d _ _ O
, _ _ O
id _ _ O
: _ _ O
: _ _ O
< _ _ O
i32 _ _ O
> _ _ O
. _ _ O
22 _ _ O

Monomorphization _ _ O
● _ _ O
but _ _ O
CPUs _ _ O
do _ _ O
n't _ _ O
understand _ _ O
polymorphic _ _ O
code _ _ O
. _ _ O
● _ _ O
monomorphization _ _ O
converts _ _ O
each _ _ O
use _ _ O
of _ _ O
a _ _ O
polymorphic _ _ O
function _ _ O
into _ _ O
a _ _ O
concrete _ _ O
, _ _ O
monomorphic _ _ O
( _ _ O
" _ _ O
one-shape _ _ O
" _ _ O
) _ _ O
version _ _ O
of _ _ O
itself _ _ O
. _ _ O
let _ _ O
x _ _ O
= _ _ O
id _ _ O
( _ _ O
10i32 _ _ O
) _ _ O
; _ _ O
let _ _ O
y _ _ O
= _ _ O
id _ _ O
( _ _ O
3.5f64 _ _ O
) _ _ O
; _ _ O
let _ _ O
z _ _ O
= _ _ O
id _ _ O
( _ _ O
"hello _ _ O
" _ _ O
) _ _ O
; _ _ O
id _ _ O
: _ _ O
: _ _ O
< _ _ O
i32 _ _ O
> _ _ O
id _ _ O
: _ _ O
: _ _ O
< _ _ O
f64 _ _ O
> _ _ O
id _ _ O
: _ _ O
: _ _ O
< _ _ O
& _ _ O
str _ _ O
> _ _ O
the _ _ O
compiler _ _ O
looks _ _ O
at _ _ O
every _ _ O
use _ _ O
of _ _ O
the _ _ O
function _ _ O
across _ _ O
the _ _ O
entire _ _ O
program _ _ O
to _ _ O
determine _ _ O
the _ _ O
implementations _ _ O
needed _ _ O
. _ _ O
it _ _ O
will _ _ O
reuse _ _ O
implementations _ _ O
if _ _ O
used _ _ O
in _ _ O
multiple _ _ O
locations _ _ O
( _ _ O
like _ _ O
if _ _ O
id _ _ O
: _ _ O
: _ _ O
< _ _ O
i32 _ _ O
> _ _ O
is _ _ O
used _ _ O
100 _ _ O
times _ _ O
) _ _ O
. _ _ O
essentially _ _ O
, _ _ O
it _ _ O
's _ _ O
automatically _ _ O
generating _ _ O
all _ _ O
the _ _ O
ad-hoc _ _ O
overloads _ _ O
for _ _ O
us _ _ O
! _ _ O
23 _ _ O

Generics _ _ O
without _ _ O
monomorphization _ _ O
● _ _ O
monomorphization _ _ O
gives _ _ O
you _ _ O
the _ _ O
best _ _ O
possible _ _ O
performance _ _ O
… _ _ O
o _ _ O
but _ _ O
it _ _ O
can _ _ O
slow _ _ O
compilation _ _ O
, _ _ O
and _ _ O
produce _ _ O
a _ _ O
larger _ _ O
executable _ _ O
. _ _ O
● _ _ O
so _ _ O
, _ _ O
in _ _ O
Java _ _ O
, _ _ O
generics _ _ O
are _ _ O
not _ _ O
monomorphized _ _ O
! _ _ O
o _ _ O
if _ _ O
you _ _ O
have _ _ O
ArrayList _ _ O
< _ _ O
Integer _ _ O
> _ _ O
and _ _ O
ArrayList _ _ O
< _ _ O
String _ _ O
> _ _ O
, _ _ O
the _ _ O
compiler _ _ O
treats _ _ O
them _ _ O
as _ _ O
separate _ _ O
types _ _ O
, _ _ O
but _ _ O
… _ _ O
o _ _ O
both _ _ O
of _ _ O
those _ _ O
use _ _ O
the _ _ O
exact _ _ O
same _ _ O
code _ _ O
at _ _ O
runtime _ _ O
. _ _ O
o _ _ O
under _ _ O
the _ _ O
hood _ _ O
, _ _ O
all _ _ O
versions _ _ O
of _ _ O
ArrayList _ _ O
just _ _ O
use _ _ O
Object _ _ O
variables _ _ O
and _ _ O
downcasts _ _ O
and _ _ O
instanceof _ _ O
to _ _ O
make _ _ O
it _ _ O
work _ _ O
. _ _ O
● _ _ O
this _ _ O
has _ _ O
advantages _ _ O
in _ _ O
compilation _ _ O
time _ _ O
and _ _ O
code _ _ O
size _ _ O
… _ _ O
but _ _ O
it _ _ O
comes _ _ O
at _ _ O
two _ _ O
big _ _ O
costs _ _ O
. _ _ O
o _ _ O
one _ _ O
, _ _ O
you _ _ O
can _ _ O
not _ _ O
use _ _ O
non-object _ _ O
types _ _ O
in _ _ O
Java _ _ O
generics _ _ O
. _ _ O
▪ _ _ O
this _ _ O
is _ _ O
why _ _ O
ArrayList _ _ O
< _ _ O
int _ _ O
> _ _ O
is _ _ O
invalid _ _ O
! _ _ O
o _ _ O
two _ _ O
, _ _ O
the _ _ O
performance _ _ O
is _ _ O
mediocre _ _ O
. _ _ O
▪ _ _ O
but _ _ O
that _ _ O
's _ _ O
not _ _ O
really _ _ O
a _ _ O
main _ _ O
goal _ _ O
for _ _ O
Java _ _ O
so _ _ O
whatever _ _ O
! _ _ O
24 _ _ O

Bounded _ _ O
Quantification _ _ O
( _ _ O
or _ _ O
, _ _ O
" _ _ O
making _ _ O
Parametric _ _ O
Polymorphism _ _ O
actually _ _ O
useful _ _ O
" _ _ O
) _ _ O
25 _ _ O

∀ _ _ O
only _ _ O
gets _ _ O
you _ _ O
so _ _ O
far _ _ O
. _ _ O
● _ _ O
remember _ _ O
, _ _ O
a _ _ O
type _ _ O
has _ _ O
a _ _ O
set _ _ O
of _ _ O
values _ _ O
and _ _ O
a _ _ O
set _ _ O
of _ _ O
operations _ _ O
. _ _ O
● _ _ O
what _ _ O
operations _ _ O
can _ _ O
you _ _ O
do _ _ O
with _ _ O
a _ _ O
variable _ _ O
that _ _ O
can _ _ O
be _ _ O
any _ _ O
type _ _ O
? _ _ O
o _ _ O
can _ _ O
you _ _ O
add _ _ O
it _ _ O
? _ _ O
index _ _ O
it _ _ O
? _ _ O
even _ _ O
print _ _ O
it _ _ O
out _ _ O
? _ _ O
o _ _ O
well _ _ O
… _ _ O
no _ _ O
. _ _ O
because _ _ O
you _ _ O
do _ _ O
n't _ _ O
know _ _ O
if _ _ O
the _ _ O
type _ _ O
will _ _ O
support _ _ O
those _ _ O
operations _ _ O
. _ _ O
o _ _ O
about _ _ O
all _ _ O
you _ _ O
can _ _ O
do _ _ O
is _ _ O
copy _ _ O
values _ _ O
around _ _ O
( _ _ O
put _ _ O
them _ _ O
in _ _ O
variables _ _ O
, _ _ O
pass _ _ O
them _ _ O
as _ _ O
arguments _ _ O
, _ _ O
return _ _ O
them _ _ O
) _ _ O
and _ _ O
that _ _ O
's _ _ O
not _ _ O
too _ _ O
useful _ _ O
. _ _ O
● _ _ O
well _ _ O
if _ _ O
we _ _ O
can _ _ O
make _ _ O
universal _ _ O
types _ _ O
, _ _ O
what _ _ O
about _ _ O
∃ _ _ O
existential _ _ O
types _ _ O
? _ _ O
● _ _ O
an _ _ O
existential _ _ O
type _ _ O
( _ _ O
or _ _ O
bounded _ _ O
quantification _ _ O
) _ _ O
gives _ _ O
you _ _ O
the _ _ O
flexibility _ _ O
to _ _ O
accept _ _ O
multiple _ _ O
types _ _ O
… _ _ O
o _ _ O
while _ _ O
saying _ _ O
, _ _ O
" _ _ O
they _ _ O
need _ _ O
to _ _ O
support _ _ O
at _ _ O
least _ _ O
this _ _ O
set _ _ O
of _ _ O
operations _ _ O
. _ _ O
" _ _ O
● _ _ O
it _ _ O
's _ _ O
a _ _ O
little _ _ O
easier _ _ O
to _ _ O
demonstrate _ _ O
than _ _ O
explain _ _ O
. _ _ O
26 _ _ O

Bounded _ _ O
quantification _ _ O
in _ _ O
Java _ _ O
● _ _ O
remember _ _ O
extends _ _ O
in _ _ O
generics _ _ O
? _ _ O
< _ _ O
T _ _ O
extends _ _ O
Comparable _ _ O
< _ _ O
T _ _ O
> _ _ O
> _ _ O
T _ _ O
max _ _ O
( _ _ O
T _ _ O
a _ _ O
, _ _ O
T _ _ O
b _ _ O
) _ _ O
{ _ _ O
return _ _ O
( _ _ O
a.compareTo _ _ O
( _ _ O
b _ _ O
) _ _ O
> _ _ O
0 _ _ O
) _ _ O
? _ _ O
a _ _ O
: _ _ O
b _ _ O
; _ _ O
} _ _ O
this _ _ O
works _ _ O
for _ _ O
any _ _ O
type _ _ O
T _ _ O
as _ _ O
long _ _ O
as _ _ O
that _ _ O
type _ _ O
implements _ _ O
the _ _ O
Comparable _ _ O
interface _ _ O
( _ _ O
against _ _ O
other _ _ O
values _ _ O
of _ _ O
the _ _ O
same _ _ O
type _ _ O
) _ _ O
. _ _ O
System.out.println _ _ O
( _ _ O
max _ _ O
( _ _ O
3 _ _ O
, _ _ O
4 _ _ O
) _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
prints _ _ O
4 _ _ O
System.out.println _ _ O
( _ _ O
max _ _ O
( _ _ O
"a _ _ O
" _ _ O
, _ _ O
" _ _ O
b _ _ O
" _ _ O
) _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
prints _ _ O
b _ _ O
without _ _ O
the _ _ O
extends _ _ O
Comparable _ _ O
< _ _ O
T _ _ O
> _ _ O
, _ _ O
we _ _ O
would _ _ O
n't _ _ O
be _ _ O
able _ _ O
to _ _ O
call _ _ O
.compareTo _ _ O
( _ _ O
) _ _ O
in _ _ O
the _ _ O
method _ _ O
. _ _ O
27 _ _ O

Bounded _ _ O
quantification _ _ O
in _ _ O
Rust _ _ O
● _ _ O
Rust _ _ O
's _ _ O
traits _ _ O
do _ _ O
the _ _ O
same _ _ O
job _ _ O
as _ _ O
Java _ _ O
's _ _ O
interfaces _ _ O
here _ _ O
. _ _ O
fn _ _ O
max _ _ O
< _ _ O
T _ _ O
: _ _ O
PartialOrd _ _ O
> _ _ O
( _ _ O
a _ _ O
: _ _ O
T _ _ O
, _ _ O
b _ _ O
: _ _ O
T _ _ O
) _ _ O
- _ _ O
> _ _ O
T _ _ O
{ _ _ O
if _ _ O
a _ _ O
> _ _ O
b _ _ O
{ _ _ O
a _ _ O
} _ _ O
else _ _ O
{ _ _ O
b _ _ O
} _ _ O
} _ _ O
PartialOrd _ _ O
is _ _ O
the _ _ O
closest _ _ O
thing _ _ O
Rust _ _ O
has _ _ O
to _ _ O
Java _ _ O
's _ _ O
Comparable _ _ O
, _ _ O
and _ _ O
the _ _ O
resulting _ _ O
function _ _ O
can _ _ O
be _ _ O
used _ _ O
the _ _ O
same _ _ O
way _ _ O
: _ _ O
println _ _ O
! _ _ O
( _ _ O
" _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
max _ _ O
( _ _ O
3 _ _ O
, _ _ O
4 _ _ O
) _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
prints _ _ O
4 _ _ O
println _ _ O
! _ _ O
( _ _ O
" _ _ O
{ _ _ O
} _ _ O
" _ _ O
, _ _ O
max _ _ O
( _ _ O
3.3 _ _ O
, _ _ O
4.4 _ _ O
) _ _ O
) _ _ O
; _ _ O
/ _ _ O
/ _ _ O
prints _ _ O
4.4 _ _ O
28 _ _ O

But _ _ O
what _ _ O
about _ _ O
using _ _ O
subtype _ _ O
polymorphism _ _ O
? _ _ O
● _ _ O
could _ _ O
n't _ _ O
we _ _ O
just _ _ O
make _ _ O
our _ _ O
Java _ _ O
function _ _ O
take _ _ O
two _ _ O
Comparables _ _ O
? _ _ O
● _ _ O
well _ _ O
yes _ _ O
, _ _ O
but _ _ O
… _ _ O
Comparable _ _ O
max _ _ O
( _ _ O
Comparable _ _ O
a _ _ O
, _ _ O
Comparable _ _ O
b _ _ O
) _ _ O
{ _ _ O
return _ _ O
( _ _ O
a.compareTo _ _ O
( _ _ O
b _ _ O
) _ _ O
> _ _ O
0 _ _ O
) _ _ O
? _ _ O
a _ _ O
: _ _ O
b _ _ O
; _ _ O
} _ _ O
now _ _ O
this _ _ O
nonsense _ _ O
code _ _ O
compiles _ _ O
and _ _ O
runs _ _ O
, _ _ O
and _ _ O
we _ _ O
get _ _ O
a _ _ O
runtime _ _ O
error _ _ O
instead _ _ O
: _ _ O
System.out.println _ _ O
( _ _ O
max _ _ O
( _ _ O
3 _ _ O
, _ _ O
" _ _ O
a _ _ O
" _ _ O
) _ _ O
) _ _ O
; _ _ O
parametric _ _ O
polymorphism _ _ O
moves _ _ O
the _ _ O
type _ _ O
checking _ _ O
into _ _ O
the _ _ O
compiler _ _ O
, _ _ O
allowing _ _ O
us _ _ O
to _ _ O
catch _ _ O
errors _ _ O
without _ _ O
having _ _ O
to _ _ O
run _ _ O
the _ _ O
code _ _ O
, _ _ O
and _ _ O
without _ _ O
the _ _ O
performance _ _ O
penalty _ _ O
of _ _ O
runtime _ _ O
type-checking _ _ O
* _ _ O
. _ _ O
29 _ _ O

Summary _ _ O
30 _ _ O

The _ _ O
kinds _ _ O
of _ _ O
polymorphism _ _ O
● _ _ O
ad-hoc _ _ O
polymorphism _ _ O
is _ _ O
also _ _ O
called _ _ O
function _ _ O
overloading _ _ O
. _ _ O
o _ _ O
it _ _ O
lets _ _ O
you _ _ O
define _ _ O
multiple _ _ O
versions _ _ O
of _ _ O
the _ _ O
same _ _ O
function _ _ O
with _ _ O
different _ _ O
type _ _ O
signatures _ _ O
. _ _ O
o _ _ O
the _ _ O
version _ _ O
that _ _ O
will _ _ O
be _ _ O
used _ _ O
is _ _ O
selected _ _ O
at _ _ O
compile _ _ O
time _ _ O
. _ _ O
● _ _ O
parametric _ _ O
polymorphism _ _ O
is _ _ O
also _ _ O
called _ _ O
generics _ _ O
or _ _ O
templates _ _ O
. _ _ O
o _ _ O
it _ _ O
lets _ _ O
you _ _ O
define _ _ O
" _ _ O
fill-in-the-blanks _ _ O
" _ _ O
classes _ _ O
, _ _ O
structs _ _ O
, _ _ O
functions _ _ O
etc _ _ O
. _ _ O
o _ _ O
the _ _ O
blanks _ _ O
can _ _ O
be _ _ O
filled _ _ O
in _ _ O
with _ _ O
any _ _ O
type _ _ O
… _ _ O
or _ _ O
with _ _ O
bounded _ _ O
quantification _ _ O
, _ _ O
only _ _ O
types _ _ O
which _ _ O
satisfy _ _ O
some _ _ O
condition _ _ O
. _ _ O
o _ _ O
the _ _ O
types _ _ O
are _ _ O
filled _ _ O
in _ _ O
and _ _ O
checked _ _ O
at _ _ O
compile _ _ O
time _ _ O
. _ _ O
o _ _ O
the _ _ O
generated _ _ O
code _ _ O
may _ _ O
or _ _ O
may _ _ O
not _ _ O
be _ _ O
monomorphized _ _ O
. _ _ O
● _ _ O
finally _ _ O
, _ _ O
subtype _ _ O
polymorphism _ _ O
is _ _ O
a _ _ O
feature _ _ O
of _ _ O
classes _ _ O
and _ _ O
interfaces _ _ O
. _ _ O
o _ _ O
a _ _ O
derived _ _ O
value _ _ O
can _ _ O
be _ _ O
used _ _ O
anywhere _ _ O
a _ _ O
base _ _ O
type _ _ O
is _ _ O
required _ _ O
. _ _ O
o _ _ O
when _ _ O
a _ _ O
virtual _ _ O
method _ _ O
is _ _ O
called _ _ O
, _ _ O
the _ _ O
version _ _ O
that _ _ O
is _ _ O
used _ _ O
is _ _ O
selected _ _ O
at _ _ O
runtime _ _ O
, _ _ O
based _ _ O
on _ _ O
the _ _ O
type _ _ O
of _ _ O
the _ _ O
object _ _ O
. _ _ O
31 _ _ O

The _ _ O
limits _ _ O
of _ _ O
typing _ _ O
and _ _ O
type _ _ O
systems _ _ O
● _ _ O
it _ _ O
does _ _ O
n't _ _ O
matter _ _ O
how _ _ O
fancy _ _ O
your _ _ O
type _ _ O
system _ _ O
is _ _ O
… _ _ O
o _ _ O
it _ _ O
will _ _ O
never _ _ O
allow _ _ O
all _ _ O
correct _ _ O
programs _ _ O
. _ _ O
we _ _ O
saw _ _ O
this _ _ O
previously _ _ O
when _ _ O
talking _ _ O
about _ _ O
Box _ _ O
in _ _ O
Rust _ _ O
. _ _ O
this _ _ O
seemingly-simple _ _ O
object _ _ O
graph _ _ O
is _ _ O
impossible _ _ O
to _ _ O
directly _ _ O
represent _ _ O
in _ _ O
Rust _ _ O
because _ _ O
of _ _ O
its _ _ O
type _ _ O
system _ _ O
. _ _ O
but _ _ O
that _ _ O
's _ _ O
the _ _ O
point _ _ O
. _ _ O
type _ _ O
systems _ _ O
limit _ _ O
what _ _ O
we _ _ O
can _ _ O
do _ _ O
, _ _ O
because _ _ O
unlimited _ _ O
ability _ _ O
leads _ _ O
to _ _ O
mistakes _ _ O
. _ _ O
32 _ _ O

Coloring _ _ O
inside _ _ O
the _ _ O
lines _ _ O
● _ _ O
type _ _ O
systems _ _ O
force _ _ O
us _ _ O
to _ _ O
work _ _ O
within _ _ O
a _ _ O
set _ _ O
of _ _ O
limitations _ _ O
, _ _ O
which _ _ O
can _ _ O
sometimes _ _ O
be _ _ O
annoying _ _ O
… _ _ O
o _ _ O
but _ _ O
it _ _ O
can _ _ O
also _ _ O
lead _ _ O
to _ _ O
simpler _ _ O
, _ _ O
more _ _ O
elegant _ _ O
solutions _ _ O
. _ _ O
● _ _ O
because _ _ O
static _ _ O
type _ _ O
systems _ _ O
are _ _ O
automatically _ _ O
checked _ _ O
by _ _ O
the _ _ O
compiler _ _ O
, _ _ O
playing _ _ O
by _ _ O
their _ _ O
rules _ _ O
can _ _ O
avoid _ _ O
many _ _ O
silly _ _ O
mistakes _ _ O
. _ _ O
o _ _ O
programming _ _ O
is _ _ O
hard _ _ O
. _ _ O
you _ _ O
need _ _ O
all _ _ O
the _ _ O
help _ _ O
you _ _ O
can _ _ O
get _ _ O
! _ _ O
● _ _ O
and _ _ O
with _ _ O
that _ _ O
… _ _ O
o _ _ O
we _ _ O
're _ _ O
done _ _ O
with _ _ O
the _ _ O
material _ _ O
before _ _ O
the _ _ O
exam _ _ O
ö _ _ O
33 _ _ O



