unlabeled|cs1622|lec11
-DOCSTART- -X- -X- O

Backend _ _ O
and _ _ O
Runtime _ _ O
CS _ _ O
1622 _ _ O
Jarrett _ _ O
Billingsley _ _ O

Class _ _ O
Announcements _ _ O
● _ _ O
today _ _ O
is _ _ O
kind _ _ O
of _ _ O
an _ _ O
intro _ _ O
to _ _ O
the _ _ O
second _ _ O
half _ _ O
of _ _ O
the _ _ O
course _ _ O
● _ _ O
how _ _ O
was _ _ O
the _ _ O
exaaaaaaaam _ _ O
? _ _ O
● _ _ O
also _ _ O
I _ _ O
’m _ _ O
realizing _ _ O
that _ _ O
there _ _ O
are _ _ O
actually _ _ O
way _ _ O
more _ _ O
minutes _ _ O
of _ _ O
lecture _ _ O
in _ _ O
the _ _ O
summer _ _ O
term _ _ O
than _ _ O
in _ _ O
spring _ _ O
/ _ _ O
fall _ _ O
so _ _ O
I _ _ O
should _ _ O
n’t _ _ O
feel _ _ O
pressured _ _ O
to _ _ O
make _ _ O
every _ _ O
lecture _ _ O
take _ _ O
all _ _ O
105 _ _ O
minutes _ _ O
2 _ _ O

Welcome _ _ O
to _ _ O
the _ _ O
Backend _ _ O
! _ _ O
3 _ _ O

Through _ _ O
the _ _ O
looking _ _ O
glass _ _ O
● _ _ O
a _ _ O
compiler _ _ O
translates _ _ O
from _ _ O
a _ _ O
source _ _ O
language _ _ O
to _ _ O
a _ _ O
target _ _ O
language _ _ O
. _ _ O
o _ _ O
well _ _ O
, _ _ O
now _ _ O
we _ _ O
're _ _ O
done _ _ O
with _ _ O
the _ _ O
source _ _ O
language _ _ O
. _ _ O
● _ _ O
once _ _ O
the _ _ O
AST _ _ O
has _ _ O
been _ _ O
constructed _ _ O
and _ _ O
semantically _ _ O
analyzed _ _ O
… _ _ O
o _ _ O
we _ _ O
have _ _ O
a _ _ O
" _ _ O
correct _ _ O
" _ _ O
program _ _ O
! _ _ O
● _ _ O
from _ _ O
here _ _ O
on _ _ O
out _ _ O
, _ _ O
we _ _ O
're _ _ O
assuming _ _ O
that _ _ O
we _ _ O
're _ _ O
working _ _ O
with _ _ O
an _ _ O
AST _ _ O
that _ _ O
represents _ _ O
a _ _ O
correct _ _ O
program _ _ O
. _ _ O
o _ _ O
later _ _ O
we _ _ O
'll _ _ O
come _ _ O
back _ _ O
and _ _ O
look _ _ O
at _ _ O
intermediate _ _ O
representation _ _ O
( _ _ O
IR _ _ O
) _ _ O
, _ _ O
which _ _ O
lets _ _ O
us _ _ O
abstract _ _ O
away _ _ O
even _ _ O
the _ _ O
AST _ _ O
itself _ _ O
. _ _ O
4 _ _ O

What _ _ O
is _ _ O
the _ _ O
backend _ _ O
responsible _ _ O
for _ _ O
? _ _ O
● _ _ O
a _ _ O
compiler _ _ O
translates _ _ O
from _ _ O
the _ _ O
source _ _ O
language _ _ O
to _ _ O
the _ _ O
target _ _ O
. _ _ O
● _ _ O
so _ _ O
far _ _ O
, _ _ O
all _ _ O
we _ _ O
've _ _ O
done _ _ O
is _ _ O
validate _ _ O
the _ _ O
source _ _ O
code _ _ O
. _ _ O
● _ _ O
that _ _ O
means _ _ O
the _ _ O
backend _ _ O
does _ _ O
the _ _ O
actual _ _ O
translation _ _ O
! _ _ O
it _ _ O
maps _ _ O
each _ _ O
part _ _ O
of _ _ O
the _ _ O
source _ _ O
language _ _ O
into _ _ O
some _ _ O
target _ _ O
language _ _ O
instructions _ _ O
that _ _ O
do _ _ O
the _ _ O
same _ _ O
thing _ _ O
as _ _ O
what _ _ O
the _ _ O
programmer _ _ O
wrote _ _ O
. _ _ O
f _ _ O
( _ _ O
) _ _ O
; _ _ O
jal _ _ O
f _ _ O
x _ _ O
= _ _ O
5 _ _ O
; _ _ O
li _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
5 _ _ O
t0 _ _ O
, _ _ O
x _ _ O
f _ _ O
( _ _ O
x _ _ O
+ _ _ O
3 _ _ O
) _ _ O
; _ _ O
lw _ _ O
add _ _ O
jal _ _ O
a0 _ _ O
, _ _ O
x _ _ O
a0 _ _ O
, _ _ O
a0 _ _ O
, _ _ O
3 _ _ O
f _ _ O
5 _ _ O

Correctness _ _ O
● _ _ O
the _ _ O
goal _ _ O
of _ _ O
an _ _ O
HLL _ _ O
is _ _ O
to _ _ O
provide _ _ O
a _ _ O
solid _ _ O
base _ _ O
of _ _ O
abstractions _ _ O
on _ _ O
which _ _ O
you _ _ O
can _ _ O
build _ _ O
software _ _ O
better _ _ O
than _ _ O
you _ _ O
could _ _ O
do _ _ O
in _ _ O
assembly _ _ O
. _ _ O
● _ _ O
above _ _ O
all _ _ O
, _ _ O
a _ _ O
compiler _ _ O
's _ _ O
number _ _ O
one _ _ O
priority _ _ O
is _ _ O
to _ _ O
produce _ _ O
a _ _ O
correct _ _ O
translation _ _ O
of _ _ O
the _ _ O
source _ _ O
code _ _ O
. _ _ O
o _ _ O
if _ _ O
a _ _ O
compiler _ _ O
mistranslates _ _ O
code _ _ O
, _ _ O
you _ _ O
've _ _ O
lost _ _ O
all _ _ O
the _ _ O
supposed _ _ O
guarantees _ _ O
that _ _ O
the _ _ O
HLL _ _ O
provides _ _ O
. _ _ O
● _ _ O
bugs _ _ O
in _ _ O
compilers _ _ O
can _ _ O
be _ _ O
incredibly _ _ O
serious _ _ O
. _ _ O
o _ _ O
a _ _ O
compiler _ _ O
that _ _ O
fails _ _ O
to _ _ O
catch _ _ O
certain _ _ O
mistakes _ _ O
, _ _ O
or _ _ O
which _ _ O
produces _ _ O
incorrect _ _ O
code _ _ O
, _ _ O
can _ _ O
produce _ _ O
executables _ _ O
which _ _ O
leave _ _ O
millions _ _ O
of _ _ O
computers _ _ O
vulnerable _ _ O
to _ _ O
attacks _ _ O
, _ _ O
in _ _ O
the _ _ O
worst _ _ O
cases _ _ O
. _ _ O
● _ _ O
so _ _ O
, _ _ O
what _ _ O
does _ _ O
" _ _ O
correct _ _ O
" _ _ O
code _ _ O
look _ _ O
like _ _ O
? _ _ O
6 _ _ O

It _ _ O
does _ _ O
n't _ _ O
have _ _ O
to _ _ O
look _ _ O
pretty _ _ O
● _ _ O
think _ _ O
back _ _ O
to _ _ O
447 _ _ O
. _ _ O
I _ _ O
want _ _ O
to _ _ O
do _ _ O
x++ _ _ O
for _ _ O
some _ _ O
global _ _ O
variable _ _ O
x. _ _ O
# _ _ O
x++ _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
x _ _ O
addi _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
1 _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
x _ _ O
add_ints _ _ O
: _ _ O
add _ _ O
v0 _ _ O
, _ _ O
a0 _ _ O
, _ _ O
a1 _ _ O
jr _ _ O
ra _ _ O
main _ _ O
: _ _ O
# _ _ O
x++ _ _ O
lw _ _ O
a0 _ _ O
, _ _ O
x _ _ O
li _ _ O
a1 _ _ O
, _ _ O
1 _ _ O
jal _ _ O
add_ints _ _ O
sw _ _ O
v0 _ _ O
, _ _ O
x _ _ O
these _ _ O
all _ _ O
have _ _ O
the _ _ O
same _ _ O
effect _ _ O
: _ _ O
x _ _ O
's _ _ O
value _ _ O
is _ _ O
incremented _ _ O
by _ _ O
1 _ _ O
. _ _ O
so _ _ O
, _ _ O
they _ _ O
are _ _ O
all _ _ O
correct _ _ O
. _ _ O
what _ _ O
varies _ _ O
between _ _ O
them _ _ O
is _ _ O
the _ _ O
code _ _ O
quality _ _ O
. _ _ O
# _ _ O
push _ _ O
1 _ _ O
li _ _ O
t0 _ _ O
, _ _ O
1 _ _ O
addi _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
-4 _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
sp _ _ O
) _ _ O
# _ _ O
push _ _ O
x _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
x _ _ O
addi _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
-4 _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
sp _ _ O
) _ _ O
# _ _ O
pop _ _ O
2 _ _ O
, _ _ O
add _ _ O
, _ _ O
push _ _ O
sum _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
sp _ _ O
) _ _ O
lw _ _ O
t1 _ _ O
, _ _ O
4 _ _ O
( _ _ O
sp _ _ O
) _ _ O
addi _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
8 _ _ O
add _ _ O
t0 _ _ O
, _ _ O
t0 _ _ O
, _ _ O
t1 _ _ O
addi _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
-4 _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
sp _ _ O
) _ _ O
# _ _ O
pop _ _ O
x _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
0 _ _ O
( _ _ O
sp _ _ O
) _ _ O
addi _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
4 _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
x _ _ O
7 _ _ O

Output _ _ O
code _ _ O
quality _ _ O
● _ _ O
the _ _ O
code _ _ O
our _ _ O
compiler _ _ O
outputs _ _ O
can _ _ O
be _ _ O
measured _ _ O
in _ _ O
a _ _ O
few _ _ O
ways _ _ O
: _ _ O
o _ _ O
speed _ _ O
: _ _ O
how _ _ O
fast _ _ O
the _ _ O
output _ _ O
code _ _ O
runs _ _ O
▪ _ _ O
in _ _ O
the _ _ O
same _ _ O
span _ _ O
of _ _ O
time _ _ O
, _ _ O
a _ _ O
fast _ _ O
program _ _ O
can _ _ O
do _ _ O
more _ _ O
useful _ _ O
work _ _ O
than _ _ O
a _ _ O
slow _ _ O
program _ _ O
can _ _ O
. _ _ O
o _ _ O
size _ _ O
: _ _ O
how _ _ O
many _ _ O
bytes _ _ O
the _ _ O
output _ _ O
code _ _ O
takes _ _ O
up _ _ O
▪ _ _ O
if _ _ O
e.g. _ _ O
your _ _ O
target _ _ O
is _ _ O
a _ _ O
microcontroller _ _ O
with _ _ O
4 _ _ O
KiB _ _ O
of _ _ O
ROM _ _ O
… _ _ O
▪ _ _ O
your _ _ O
output _ _ O
code _ _ O
has _ _ O
to _ _ O
be _ _ O
as _ _ O
small _ _ O
as _ _ O
possible _ _ O
to _ _ O
fit _ _ O
. _ _ O
● _ _ O
despite _ _ O
the _ _ O
last _ _ O
slide _ _ O
, _ _ O
smaller _ _ O
code _ _ O
is _ _ O
not _ _ O
necessarily _ _ O
faster _ _ O
code _ _ O
… _ _ O
o _ _ O
so _ _ O
compilers _ _ O
often _ _ O
give _ _ O
you _ _ O
the _ _ O
choice _ _ O
of _ _ O
which _ _ O
to _ _ O
optimize _ _ O
for _ _ O
. _ _ O
o _ _ O
but _ _ O
optimizing _ _ O
code _ _ O
to _ _ O
be _ _ O
faster _ _ O
or _ _ O
smaller _ _ O
is _ _ O
an _ _ O
optional _ _ O
task _ _ O
, _ _ O
and _ _ O
is _ _ O
not _ _ O
required _ _ O
for _ _ O
correct _ _ O
output _ _ O
. _ _ O
8 _ _ O

Goals _ _ O
and _ _ O
non-goals _ _ O
● _ _ O
in _ _ O
the _ _ O
old _ _ O
days _ _ O
, _ _ O
the _ _ O
code _ _ O
quality _ _ O
of _ _ O
most _ _ O
compilers _ _ O
was _ _ O
… _ _ O
lacking _ _ O
. _ _ O
o _ _ O
much _ _ O
more _ _ O
like _ _ O
the _ _ O
third _ _ O
example _ _ O
on _ _ O
that _ _ O
slide _ _ O
than _ _ O
like _ _ O
the _ _ O
first _ _ O
. _ _ O
● _ _ O
higher _ _ O
code _ _ O
quality _ _ O
requires _ _ O
a _ _ O
more _ _ O
sophisticated _ _ O
backend _ _ O
. _ _ O
o _ _ O
these _ _ O
algorithms _ _ O
were _ _ O
impractical _ _ O
on _ _ O
the _ _ O
slow _ _ O
computers _ _ O
those _ _ O
early _ _ O
compilers _ _ O
ran _ _ O
on _ _ O
, _ _ O
or _ _ O
literally _ _ O
had _ _ O
n't _ _ O
been _ _ O
invented _ _ O
yet _ _ O
. _ _ O
● _ _ O
but _ _ O
more _ _ O
complex _ _ O
algorithms _ _ O
means _ _ O
a _ _ O
higher _ _ O
chance _ _ O
of _ _ O
messing _ _ O
them _ _ O
up _ _ O
and _ _ O
making _ _ O
a _ _ O
compiler _ _ O
that _ _ O
produces _ _ O
incorrect _ _ O
code _ _ O
! _ _ O
● _ _ O
so _ _ O
our _ _ O
goal _ _ O
in _ _ O
this _ _ O
class _ _ O
will _ _ O
be _ _ O
to _ _ O
make _ _ O
a _ _ O
correct _ _ O
compiler _ _ O
. _ _ O
o _ _ O
the _ _ O
code _ _ O
it _ _ O
produces _ _ O
may _ _ O
be _ _ O
big _ _ O
, _ _ O
slow _ _ O
, _ _ O
and _ _ O
ugly _ _ O
, _ _ O
but _ _ O
it _ _ O
's _ _ O
okay _ _ O
for _ _ O
teaching _ _ O
purposes _ _ O
. _ _ O
● _ _ O
towards _ _ O
the _ _ O
end _ _ O
we _ _ O
'll _ _ O
start _ _ O
to _ _ O
look _ _ O
at _ _ O
improving _ _ O
code _ _ O
quality _ _ O
… _ _ O
o _ _ O
but _ _ O
you _ _ O
wo _ _ O
n't _ _ O
be _ _ O
implementing _ _ O
that _ _ O
. _ _ O
it _ _ O
's _ _ O
some _ _ O
heavy _ _ O
stuff _ _ O
. _ _ O
9 _ _ O

Runtime _ _ O
10 _ _ O

From _ _ O
compile-time _ _ O
to _ _ O
runtime _ _ O
● _ _ O
the _ _ O
compiler _ _ O
is _ _ O
just _ _ O
the _ _ O
first _ _ O
part _ _ O
of _ _ O
enforcing _ _ O
the _ _ O
HLL _ _ O
's _ _ O
abstractions _ _ O
. _ _ O
● _ _ O
depending _ _ O
on _ _ O
how _ _ O
well _ _ O
the _ _ O
source _ _ O
language _ _ O
's _ _ O
semantics _ _ O
match _ _ O
the _ _ O
target _ _ O
's _ _ O
, _ _ O
we _ _ O
can _ _ O
have _ _ O
a _ _ O
little _ _ O
or _ _ O
a _ _ O
lot _ _ O
to _ _ O
do _ _ O
at _ _ O
runtime _ _ O
. _ _ O
C _ _ O
≅ _ _ O
dynamic _ _ O
dispatch _ _ O
Java _ _ O
reflection _ _ O
class _ _ O
loading _ _ O
CPU _ _ O
garbage _ _ O
collection _ _ O
exceptions _ _ O
11 _ _ O

Does _ _ O
that _ _ O
mean _ _ O
we _ _ O
need _ _ O
a _ _ O
VM _ _ O
? _ _ O
● _ _ O
well _ _ O
, _ _ O
not _ _ O
necessarily _ _ O
… _ _ O
● _ _ O
there _ _ O
can _ _ O
be _ _ O
many _ _ O
source _ _ O
language _ _ O
features _ _ O
which _ _ O
the _ _ O
target _ _ O
language _ _ O
does _ _ O
not _ _ O
support _ _ O
, _ _ O
which _ _ O
can _ _ O
be _ _ O
even _ _ O
small _ _ O
things _ _ O
. _ _ O
o _ _ O
think _ _ O
about _ _ O
it _ _ O
: _ _ O
does _ _ O
MIPS _ _ O
have _ _ O
an _ _ O
if-else _ _ O
instruction _ _ O
? _ _ O
▪ _ _ O
no _ _ O
. _ _ O
so _ _ O
those _ _ O
have _ _ O
to _ _ O
be _ _ O
built _ _ O
out _ _ O
of _ _ O
simpler _ _ O
instructions _ _ O
. _ _ O
● _ _ O
if _ _ O
the _ _ O
target _ _ O
language _ _ O
is _ _ O
a _ _ O
CPU _ _ O
, _ _ O
chances _ _ O
are _ _ O
all _ _ O
it _ _ O
can _ _ O
do _ _ O
is _ _ O
: _ _ O
o _ _ O
move _ _ O
numbers _ _ O
around _ _ O
o _ _ O
do _ _ O
arithmetic _ _ O
and _ _ O
logical _ _ O
operations _ _ O
on _ _ O
numbers _ _ O
o _ _ O
choose _ _ O
which _ _ O
steps _ _ O
to _ _ O
go _ _ O
to _ _ O
o _ _ O
uhhhhhhhhhhhhhhhhhhh _ _ O
that _ _ O
's _ _ O
it _ _ O
! _ _ O
● _ _ O
so _ _ O
there _ _ O
are _ _ O
like _ _ O
, _ _ O
three _ _ O
parts _ _ O
to _ _ O
this _ _ O
? _ _ O
o _ _ O
the _ _ O
code _ _ O
generation _ _ O
o _ _ O
the _ _ O
ABI _ _ O
( _ _ O
application _ _ O
binary _ _ O
interface _ _ O
) _ _ O
o _ _ O
and _ _ O
the _ _ O
runtime _ _ O
library _ _ O
12 _ _ O

Code _ _ O
generation _ _ O
( _ _ O
codegen _ _ O
) _ _ O
● _ _ O
we _ _ O
saw _ _ O
this _ _ O
: _ _ O
codegen _ _ O
is _ _ O
where _ _ O
each _ _ O
operation _ _ O
in _ _ O
the _ _ O
source _ _ O
language _ _ O
is _ _ O
mapped _ _ O
to _ _ O
the _ _ O
target _ _ O
language _ _ O
. _ _ O
x _ _ O
= _ _ O
y _ _ O
lw _ _ O
sw _ _ O
f _ _ O
( _ _ O
x _ _ O
) _ _ O
lw _ _ O
a0 _ _ O
, _ _ O
x _ _ O
jal _ _ O
f _ _ O
while _ _ O
( _ _ O
x _ _ O
! _ _ O
= _ _ O
10 _ _ O
) _ _ O
t0 _ _ O
, _ _ O
y _ _ O
t0 _ _ O
, _ _ O
x _ _ O
_ _ _ O
top _ _ O
: _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
x _ _ O
beq _ _ O
t0 _ _ O
, _ _ O
10 _ _ O
, _ _ O
_ _ _ O
end _ _ O
13 _ _ O

The _ _ O
ABI _ _ O
● _ _ O
most _ _ O
programs _ _ O
run _ _ O
on _ _ O
computers _ _ O
with _ _ O
operating _ _ O
systems _ _ O
. _ _ O
o _ _ O
even _ _ O
those _ _ O
that _ _ O
do _ _ O
n't _ _ O
, _ _ O
have _ _ O
to _ _ O
interact _ _ O
with _ _ O
the _ _ O
hardware _ _ O
and _ _ O
themselves _ _ O
( _ _ O
e.g. _ _ O
one _ _ O
function _ _ O
calling _ _ O
another _ _ O
) _ _ O
. _ _ O
● _ _ O
the _ _ O
Application _ _ O
Binary _ _ O
Interface _ _ O
( _ _ O
ABI _ _ O
) _ _ O
defines _ _ O
several _ _ O
things _ _ O
: _ _ O
o _ _ O
the _ _ O
target _ _ O
language _ _ O
– _ _ O
which _ _ O
in _ _ O
our _ _ O
case _ _ O
is _ _ O
a _ _ O
CPU _ _ O
ISA _ _ O
o _ _ O
the _ _ O
calling _ _ O
convention _ _ O
( _ _ O
s _ _ O
) _ _ O
, _ _ O
which _ _ O
dictate _ _ O
how _ _ O
function _ _ O
calls _ _ O
work _ _ O
o _ _ O
the _ _ O
way _ _ O
values _ _ O
are _ _ O
represented _ _ O
in _ _ O
memory _ _ O
o _ _ O
how _ _ O
system _ _ O
calls _ _ O
work _ _ O
, _ _ O
for _ _ O
interacting _ _ O
with _ _ O
the _ _ O
OS _ _ O
o _ _ O
where _ _ O
things _ _ O
are _ _ O
located _ _ O
in _ _ O
memory _ _ O
( _ _ O
stack _ _ O
, _ _ O
heap _ _ O
, _ _ O
globals _ _ O
, _ _ O
etc _ _ O
. _ _ O
) _ _ O
o _ _ O
how _ _ O
the _ _ O
code _ _ O
is _ _ O
packaged _ _ O
into _ _ O
an _ _ O
executable _ _ O
file _ _ O
o _ _ O
and _ _ O
much _ _ O
more _ _ O
! _ _ O
14 _ _ O

The _ _ O
runtime _ _ O
library _ _ O
● _ _ O
also _ _ O
called _ _ O
" _ _ O
the _ _ O
runtime _ _ O
, _ _ O
" _ _ O
confusingly _ _ O
● _ _ O
it _ _ O
comes _ _ O
with _ _ O
your _ _ O
language _ _ O
; _ _ O
either _ _ O
statically _ _ O
or _ _ O
dynamically _ _ O
linked _ _ O
o _ _ O
for _ _ O
real _ _ O
why _ _ O
is _ _ O
449 _ _ O
not _ _ O
a _ _ O
prereq _ _ O
for _ _ O
this _ _ O
course _ _ O
Standard _ _ O
Library _ _ O
( _ _ O
stdlib _ _ O
) _ _ O
Runtime _ _ O
the _ _ O
standard _ _ O
library _ _ O
( _ _ O
stdlib _ _ O
) _ _ O
has _ _ O
a _ _ O
set _ _ O
of _ _ O
useful _ _ O
, _ _ O
but _ _ O
non-critical _ _ O
functionality _ _ O
. _ _ O
the _ _ O
runtime _ _ O
library _ _ O
is _ _ O
essential _ _ O
to _ _ O
make _ _ O
language _ _ O
features _ _ O
work _ _ O
at _ _ O
run-time _ _ O
. _ _ O
in _ _ O
Rust _ _ O
, _ _ O
the _ _ O
runtime _ _ O
is _ _ O
called _ _ O
" _ _ O
core _ _ O
" _ _ O
, _ _ O
and _ _ O
the _ _ O
standard _ _ O
library _ _ O
is _ _ O
" _ _ O
std _ _ O
" _ _ O
. _ _ O
in _ _ O
a _ _ O
lot _ _ O
of _ _ O
languages _ _ O
, _ _ O
the _ _ O
line _ _ O
is _ _ O
… _ _ O
blurrier _ _ O
. _ _ O
15 _ _ O

Putting _ _ O
it _ _ O
all _ _ O
together _ _ O
● _ _ O
to _ _ O
sum _ _ O
up _ _ O
: _ _ O
Compiler _ _ O
( _ _ O
the _ _ O
runtime _ _ O
library _ _ O
might _ _ O
piggy-back _ _ O
on _ _ O
it _ _ O
. _ _ O
) _ _ O
AST _ _ O
Backend _ _ O
the _ _ O
backend _ _ O
generates _ _ O
machine _ _ O
code _ _ O
and _ _ O
puts _ _ O
it _ _ O
in _ _ O
an _ _ O
executable _ _ O
which _ _ O
conforms _ _ O
to _ _ O
the _ _ O
ABI _ _ O
. _ _ O
Runtime _ _ O
Library _ _ O
Executable _ _ O
Program _ _ O
when _ _ O
executed _ _ O
, _ _ O
the _ _ O
runtime _ _ O
library _ _ O
handles _ _ O
the _ _ O
sourcelanguage _ _ O
features _ _ O
which _ _ O
do _ _ O
n't _ _ O
exist _ _ O
on _ _ O
the _ _ O
target _ _ O
. _ _ O
uhh _ _ O
… _ _ O
so _ _ O
how _ _ O
is _ _ O
this _ _ O
code _ _ O
generated _ _ O
, _ _ O
anyway _ _ O
? _ _ O
16 _ _ O

Codegen _ _ O
17 _ _ O

How _ _ O
do _ _ O
you _ _ O
eat _ _ O
an _ _ O
elephant _ _ O
? _ _ O
● _ _ O
codegen _ _ O
seems _ _ O
like _ _ O
a _ _ O
giant _ _ O
problem _ _ O
with _ _ O
no _ _ O
easy _ _ O
place _ _ O
to _ _ O
start _ _ O
. _ _ O
● _ _ O
but _ _ O
any _ _ O
problem _ _ O
can _ _ O
be _ _ O
broken _ _ O
down _ _ O
into _ _ O
smaller _ _ O
ones _ _ O
. _ _ O
a _ _ O
lot _ _ O
of _ _ O
it _ _ O
is _ _ O
filling _ _ O
in _ _ O
templates _ _ O
, _ _ O
like _ _ O
mad _ _ O
libs _ _ O
for _ _ O
code _ _ O
. _ _ O
while _ _ O
cond _ _ O
{ _ _ O
code _ _ O
} _ _ O
_ _ _ O
top _ _ O
: _ _ O
b _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
_ _ _ O
, _ _ O
_ _ _ O
_ _ _ O
, _ _ O
_ _ _ O
end _ _ O
code _ _ O
_ _ _ O
end _ _ O
: _ _ O
other _ _ O
parts _ _ O
are _ _ O
allocation _ _ O
, _ _ O
deciding _ _ O
what _ _ O
lives _ _ O
where _ _ O
, _ _ O
and _ _ O
when _ _ O
. _ _ O
Variables _ _ O
Registers _ _ O
x _ _ O
i _ _ O
ret _ _ O
num_cats _ _ O
s0 _ _ O
s1 _ _ O
t0 _ _ O
t1 _ _ O
just _ _ O
keep _ _ O
in _ _ O
mind _ _ O
that _ _ O
our _ _ O
goal _ _ O
is _ _ O
to _ _ O
generate _ _ O
correct _ _ O
code _ _ O
, _ _ O
not _ _ O
great _ _ O
code _ _ O
. _ _ O
18 _ _ O

Getting _ _ O
a _ _ O
flavor _ _ O
of _ _ O
it _ _ O
: _ _ O
codegen _ _ O
for _ _ O
a _ _ O
function _ _ O
● _ _ O
as _ _ O
you _ _ O
( _ _ O
hopefully _ _ O
) _ _ O
learned _ _ O
before _ _ O
, _ _ O
every _ _ O
function _ _ O
gets _ _ O
a _ _ O
stack _ _ O
frame _ _ O
. _ _ O
o _ _ O
this _ _ O
is _ _ O
where _ _ O
it _ _ O
stores _ _ O
saved _ _ O
registers _ _ O
and _ _ O
local _ _ O
variables _ _ O
. _ _ O
the _ _ O
template _ _ O
for _ _ O
a _ _ O
function _ _ O
's _ _ O
code _ _ O
is _ _ O
something _ _ O
like _ _ O
… _ _ O
name _ _ O
: _ _ O
set _ _ O
up _ _ O
stack _ _ O
function _ _ O
body _ _ O
clean _ _ O
up _ _ O
stack _ _ O
return _ _ O
how _ _ O
big _ _ O
does _ _ O
the _ _ O
stack _ _ O
frame _ _ O
have _ _ O
to _ _ O
be _ _ O
? _ _ O
fn _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
let _ _ O
x _ _ O
= _ _ O
0 _ _ O
; _ _ O
for _ _ O
i _ _ O
in _ _ O
0 _ _ O
, _ _ O
10 _ _ O
{ _ _ O
x _ _ O
+ _ _ O
= _ _ O
i _ _ O
; _ _ O
} _ _ O
let _ _ O
y _ _ O
= _ _ O
g _ _ O
( _ _ O
x _ _ O
) _ _ O
; _ _ O
println _ _ O
( _ _ O
y _ _ O
) _ _ O
; _ _ O
} _ _ O
the _ _ O
symbol _ _ O
table _ _ O
can _ _ O
tell _ _ O
us _ _ O
how _ _ O
many _ _ O
local _ _ O
variables _ _ O
we _ _ O
have _ _ O
. _ _ O
19 _ _ O

Codegen _ _ O
for _ _ O
expressions _ _ O
● _ _ O
expressions _ _ O
calculate _ _ O
values _ _ O
, _ _ O
and _ _ O
in _ _ O
a _ _ O
CPU _ _ O
values _ _ O
go _ _ O
in _ _ O
registers _ _ O
. _ _ O
● _ _ O
an _ _ O
expression _ _ O
in _ _ O
isolation _ _ O
does _ _ O
n't _ _ O
really _ _ O
tell _ _ O
you _ _ O
what _ _ O
to _ _ O
do _ _ O
though _ _ O
. _ _ O
f _ _ O
( _ _ O
16 _ _ O
) _ _ O
li _ _ O
a0 _ _ O
, _ _ O
16 _ _ O
jal _ _ O
f _ _ O
return _ _ O
16 _ _ O
; _ _ O
li _ _ O
v0 _ _ O
, _ _ O
16 _ _ O
j _ _ O
_ _ _ O
return _ _ O
x _ _ O
= _ _ O
16 _ _ O
; _ _ O
li _ _ O
t0 _ _ O
, _ _ O
16 _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
4 _ _ O
( _ _ O
sp _ _ O
) _ _ O
if _ _ O
it _ _ O
's _ _ O
a _ _ O
local _ _ O
, _ _ O
or _ _ O
… _ _ O
li _ _ O
t0 _ _ O
, _ _ O
16 _ _ O
sw _ _ O
t0 _ _ O
, _ _ O
x _ _ O
if _ _ O
it _ _ O
's _ _ O
a _ _ O
global _ _ O
! _ _ O
the _ _ O
same _ _ O
expression _ _ O
16 _ _ O
is _ _ O
translated _ _ O
into _ _ O
different _ _ O
code _ _ O
depending _ _ O
on _ _ O
how _ _ O
it _ _ O
's _ _ O
used _ _ O
. _ _ O
if _ _ O
this _ _ O
seems _ _ O
complicated _ _ O
, _ _ O
yeah _ _ O
, _ _ O
it _ _ O
is _ _ O
but _ _ O
we _ _ O
'll _ _ O
come _ _ O
back _ _ O
to _ _ O
this _ _ O
and _ _ O
solve _ _ O
it _ _ O
by _ _ O
being _ _ O
lazy _ _ O
! _ _ O
20 _ _ O

Codegen _ _ O
for _ _ O
statements _ _ O
● _ _ O
lots _ _ O
of _ _ O
statements _ _ O
do _ _ O
control _ _ O
flow _ _ O
, _ _ O
meaning _ _ O
the _ _ O
output _ _ O
code _ _ O
is _ _ O
gon _ _ O
na _ _ O
have _ _ O
labels _ _ O
and _ _ O
jumps _ _ O
and _ _ O
branches _ _ O
( _ _ O
ew _ _ O
) _ _ O
. _ _ O
o _ _ O
fortunately _ _ O
, _ _ O
the _ _ O
templates _ _ O
for _ _ O
these _ _ O
are _ _ O
pretty _ _ O
straightforward _ _ O
and _ _ O
set _ _ O
in _ _ O
stone _ _ O
– _ _ O
there _ _ O
's _ _ O
only _ _ O
one _ _ O
real _ _ O
" _ _ O
right _ _ O
" _ _ O
way _ _ O
to _ _ O
do _ _ O
an _ _ O
if-else _ _ O
. _ _ O
● _ _ O
sequential _ _ O
statements _ _ O
( _ _ O
like _ _ O
{ _ _ O
blocks _ _ O
} _ _ O
) _ _ O
are _ _ O
no _ _ O
problem _ _ O
. _ _ O
o _ _ O
you _ _ O
just _ _ O
translate _ _ O
each _ _ O
statement _ _ O
one _ _ O
after _ _ O
another _ _ O
, _ _ O
and _ _ O
concatenate _ _ O
the _ _ O
code _ _ O
together _ _ O
. _ _ O
( _ _ O
yes _ _ O
, _ _ O
seriously _ _ O
! _ _ O
) _ _ O
● _ _ O
even _ _ O
nested _ _ O
statements _ _ O
are _ _ O
simple _ _ O
thanks _ _ O
to _ _ O
the _ _ O
AST _ _ O
. _ _ O
o _ _ O
with _ _ O
the _ _ O
power _ _ O
of _ _ O
recursion _ _ O
, _ _ O
it _ _ O
all _ _ O
works _ _ O
out _ _ O
. _ _ O
trust _ _ O
recursion _ _ O
. _ _ O
● _ _ O
but _ _ O
I _ _ O
think _ _ O
that _ _ O
's _ _ O
enough _ _ O
of _ _ O
an _ _ O
introduction _ _ O
to _ _ O
codegen _ _ O
. _ _ O
● _ _ O
let _ _ O
's _ _ O
assume _ _ O
we _ _ O
have _ _ O
it _ _ O
working _ _ O
. _ _ O
does _ _ O
that _ _ O
mean _ _ O
we _ _ O
now _ _ O
have _ _ O
a _ _ O
working _ _ O
program _ _ O
? _ _ O
are _ _ O
we _ _ O
done _ _ O
with _ _ O
compiler _ _ O
? _ _ O
? _ _ O
o _ _ O
well _ _ O
… _ _ O
21 _ _ O

Linking _ _ O
and _ _ O
Executables _ _ O
22 _ _ O

Abunchafunctions _ _ O
● _ _ O
a _ _ O
simple _ _ O
program _ _ O
might _ _ O
be _ _ O
one _ _ O
main _ _ O
( _ _ O
) _ _ O
function _ _ O
and _ _ O
nothing _ _ O
else _ _ O
. _ _ O
● _ _ O
if _ _ O
we _ _ O
have _ _ O
more _ _ O
functions _ _ O
, _ _ O
we _ _ O
can _ _ O
concatenate _ _ O
their _ _ O
code _ _ O
. _ _ O
fn _ _ O
main _ _ O
( _ _ O
) _ _ O
{ _ _ O
f _ _ O
( _ _ O
10 _ _ O
) _ _ O
; _ _ O
} _ _ O
fn _ _ O
g _ _ O
( _ _ O
x _ _ O
) _ _ O
{ _ _ O
println _ _ O
( _ _ O
x _ _ O
) _ _ O
; _ _ O
} _ _ O
fn _ _ O
f _ _ O
( _ _ O
x _ _ O
) _ _ O
{ _ _ O
g _ _ O
( _ _ O
x _ _ O
+ _ _ O
5 _ _ O
) _ _ O
; _ _ O
} _ _ O
00 _ _ O
: _ _ O
li _ _ O
a0 _ _ O
, _ _ O
10 _ _ O
04 _ _ O
: _ _ O
jal _ _ O
f _ _ O
08 _ _ O
: _ _ O
li _ _ O
v0 _ _ O
, _ _ O
10 _ _ O
0C _ _ O
: _ _ O
syscall _ _ O
10 _ _ O
: _ _ O
li _ _ O
v0 _ _ O
, _ _ O
1 _ _ O
14 _ _ O
: _ _ O
syscall _ _ O
18 _ _ O
: _ _ O
jr _ _ O
ra _ _ O
1C _ _ O
: _ _ O
sub _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
4 _ _ O
20 _ _ O
: _ _ O
sw _ _ O
ra _ _ O
, _ _ O
0 _ _ O
( _ _ O
sp _ _ O
) _ _ O
24 _ _ O
: _ _ O
add _ _ O
a0 _ _ O
, _ _ O
a0 _ _ O
, _ _ O
5 _ _ O
28 _ _ O
: _ _ O
jal _ _ O
g _ _ O
2C _ _ O
: _ _ O
lw _ _ O
ra _ _ O
, _ _ O
0 _ _ O
( _ _ O
sp _ _ O
) _ _ O
30 _ _ O
: _ _ O
add _ _ O
sp _ _ O
, _ _ O
sp _ _ O
, _ _ O
4 _ _ O
34 _ _ O
: _ _ O
jr _ _ O
ra _ _ O
what _ _ O
addresses _ _ O
should _ _ O
the _ _ O
jals _ _ O
jump _ _ O
to _ _ O
? _ _ O
but _ _ O
when _ _ O
do _ _ O
we _ _ O
know _ _ O
the _ _ O
addresses _ _ O
of _ _ O
the _ _ O
functions _ _ O
? _ _ O
what _ _ O
if _ _ O
I _ _ O
define _ _ O
the _ _ O
functions _ _ O
in _ _ O
a _ _ O
different _ _ O
order _ _ O
? _ _ O
what _ _ O
if _ _ O
I _ _ O
call _ _ O
functions _ _ O
from _ _ O
the _ _ O
stdlib _ _ O
? _ _ O
23 _ _ O

Trying _ _ O
to _ _ O
do _ _ O
too _ _ O
much _ _ O
at _ _ O
once _ _ O
● _ _ O
really _ _ O
, _ _ O
we _ _ O
're _ _ O
moving _ _ O
past _ _ O
what _ _ O
the _ _ O
compiler _ _ O
should _ _ O
be _ _ O
doing _ _ O
… _ _ O
a _ _ O
program _ _ O
's _ _ O
call _ _ O
graph _ _ O
can _ _ O
be _ _ O
complex _ _ O
, _ _ O
with _ _ O
cycles _ _ O
, _ _ O
multiple _ _ O
dependencies _ _ O
, _ _ O
etc _ _ O
. _ _ O
main _ _ O
f _ _ O
g _ _ O
print_list _ _ O
we _ _ O
have _ _ O
to _ _ O
serialize _ _ O
this _ _ O
graph _ _ O
when _ _ O
converting _ _ O
it _ _ O
to _ _ O
an _ _ O
executable _ _ O
form _ _ O
. _ _ O
this _ _ O
process _ _ O
is _ _ O
called _ _ O
linking _ _ O
. _ _ O
rather _ _ O
than _ _ O
the _ _ O
compiler _ _ O
producing _ _ O
a _ _ O
whole _ _ O
program _ _ O
, _ _ O
we _ _ O
have _ _ O
it _ _ O
produce _ _ O
incomplete _ _ O
fragments _ _ O
, _ _ O
and _ _ O
let _ _ O
the _ _ O
linker _ _ O
finish _ _ O
the _ _ O
job _ _ O
. _ _ O
24 _ _ O

Symbolic _ _ O
linking _ _ O
● _ _ O
the _ _ O
dependencies _ _ O
between _ _ O
fragments _ _ O
are _ _ O
indicated _ _ O
symbolically _ _ O
: _ _ O
● _ _ O
instead _ _ O
of _ _ O
referring _ _ O
to _ _ O
them _ _ O
by _ _ O
address _ _ O
, _ _ O
we _ _ O
do _ _ O
it _ _ O
by _ _ O
name _ _ O
. _ _ O
main _ _ O
f _ _ O
blah _ _ O
println _ _ O
print_list _ _ O
f _ _ O
code _ _ O
g _ _ O
more _ _ O
stuff _ _ O
each _ _ O
fragment _ _ O
has _ _ O
" _ _ O
blanks _ _ O
" _ _ O
to _ _ O
indicate _ _ O
what _ _ O
it _ _ O
references _ _ O
. _ _ O
g _ _ O
blah _ _ O
blah _ _ O
print_list _ _ O
if _ _ O
{ _ _ O
} _ _ O
else _ _ O
print_list _ _ O
; _ _ O
the _ _ O
linker _ _ O
serializes _ _ O
the _ _ O
fragments _ _ O
and _ _ O
" _ _ O
fills _ _ O
in _ _ O
the _ _ O
blanks _ _ O
. _ _ O
" _ _ O
it _ _ O
can _ _ O
also _ _ O
include _ _ O
fragments _ _ O
from _ _ O
other _ _ O
parts _ _ O
of _ _ O
the _ _ O
program _ _ O
or _ _ O
from _ _ O
libraries _ _ O
( _ _ O
like _ _ O
the _ _ O
stdlib _ _ O
) _ _ O
. _ _ O
25 _ _ O

Relocations _ _ O
● _ _ O
for _ _ O
a _ _ O
number _ _ O
of _ _ O
reasons _ _ O
, _ _ O
the _ _ O
addresses _ _ O
that _ _ O
your _ _ O
code _ _ O
and _ _ O
data _ _ O
end _ _ O
up _ _ O
at _ _ O
may _ _ O
not _ _ O
be _ _ O
known _ _ O
until _ _ O
right _ _ O
before _ _ O
it _ _ O
's _ _ O
executed _ _ O
! _ _ O
● _ _ O
an _ _ O
executable _ _ O
file _ _ O
can _ _ O
have _ _ O
relocations _ _ O
: _ _ O
" _ _ O
blanks _ _ O
" _ _ O
where _ _ O
absolute _ _ O
addresses _ _ O
are _ _ O
needed _ _ O
, _ _ O
which _ _ O
are _ _ O
filled _ _ O
in _ _ O
at _ _ O
load-time _ _ O
. _ _ O
In _ _ O
the _ _ O
executable _ _ O
00 _ _ O
: _ _ O
li _ _ O
a0 _ _ O
, _ _ O
10 _ _ O
04 _ _ O
: _ _ O
jal _ _ O
0 _ _ O
08 _ _ O
: _ _ O
li _ _ O
v0 _ _ O
, _ _ O
10 _ _ O
0C _ _ O
: _ _ O
syscall _ _ O
10 _ _ O
: _ _ O
li _ _ O
v0 _ _ O
, _ _ O
1 _ _ O
14 _ _ O
: _ _ O
syscall _ _ O
18 _ _ O
: _ _ O
jr _ _ O
ra _ _ O
Reloc _ _ O
{ _ _ O
addr _ _ O
: _ _ O
0x0004 _ _ O
, _ _ O
kind _ _ O
: _ _ O
Jump26 _ _ O
, _ _ O
target _ _ O
: _ _ O
" _ _ O
g _ _ O
" _ _ O
, _ _ O
} _ _ O
Symbol _ _ O
{ _ _ O
addr _ _ O
: _ _ O
0x0010 _ _ O
, _ _ O
kind _ _ O
: _ _ O
Func _ _ O
, _ _ O
name _ _ O
: _ _ O
" _ _ O
g _ _ O
" _ _ O
, _ _ O
} _ _ O
After _ _ O
loading _ _ O
8000 _ _ O
: _ _ O
li _ _ O
a0 _ _ O
, _ _ O
10 _ _ O
8004 _ _ O
: _ _ O
jal _ _ O
0x8010 _ _ O
8008 _ _ O
: _ _ O
li _ _ O
v0 _ _ O
, _ _ O
10 _ _ O
800C _ _ O
: _ _ O
syscall _ _ O
8010 _ _ O
: _ _ O
li _ _ O
v0 _ _ O
, _ _ O
1 _ _ O
8014 _ _ O
: _ _ O
syscall _ _ O
8018 _ _ O
: _ _ O
jr _ _ O
ra _ _ O
if _ _ O
this _ _ O
code _ _ O
is _ _ O
loaded _ _ O
at _ _ O
address _ _ O
0x8000 _ _ O
… _ _ O
26 _ _ O

Position-independent _ _ O
code _ _ O
● _ _ O
compilers _ _ O
often _ _ O
have _ _ O
a _ _ O
flag _ _ O
to _ _ O
output _ _ O
position-independent _ _ O
code _ _ O
, _ _ O
which _ _ O
uses _ _ O
different _ _ O
instructions _ _ O
to _ _ O
never _ _ O
use _ _ O
absolute _ _ O
addresses _ _ O
. _ _ O
o _ _ O
this _ _ O
avoids _ _ O
relocations _ _ O
entirely _ _ O
, _ _ O
making _ _ O
things _ _ O
faster _ _ O
to _ _ O
load _ _ O
, _ _ O
and _ _ O
it _ _ O
avoids _ _ O
duplicating _ _ O
shared _ _ O
libraries _ _ O
in _ _ O
RAM _ _ O
. _ _ O
● _ _ O
to _ _ O
do _ _ O
this _ _ O
, _ _ O
the _ _ O
target _ _ O
ISA _ _ O
must _ _ O
be _ _ O
able _ _ O
to _ _ O
calculate _ _ O
addresses _ _ O
of _ _ O
code _ _ O
and _ _ O
data _ _ O
based _ _ O
on _ _ O
the _ _ O
PC _ _ O
( _ _ O
" _ _ O
PC-relative _ _ O
addressing _ _ O
" _ _ O
) _ _ O
: _ _ O
like _ _ O
a _ _ O
branch-and-link _ _ O
instruction _ _ O
: _ _ O
bal _ _ O
func _ _ O
and _ _ O
load _ _ O
/ _ _ O
store _ _ O
instructions _ _ O
which _ _ O
use _ _ O
the _ _ O
pc _ _ O
as _ _ O
the _ _ O
base _ _ O
register _ _ O
: _ _ O
lw _ _ O
t0 _ _ O
, _ _ O
0x38C _ _ O
( _ _ O
pc _ _ O
) _ _ O
27 _ _ O

Debugging _ _ O
info _ _ O
● _ _ O
converting _ _ O
to _ _ O
the _ _ O
target _ _ O
language _ _ O
is _ _ O
a _ _ O
lossy _ _ O
operation _ _ O
. _ _ O
o _ _ O
a _ _ O
bunch _ _ O
of _ _ O
info _ _ O
about _ _ O
the _ _ O
source _ _ O
program _ _ O
is _ _ O
lost _ _ O
! _ _ O
● _ _ O
to _ _ O
make _ _ O
debugging _ _ O
possible _ _ O
, _ _ O
the _ _ O
compiler _ _ O
can _ _ O
also _ _ O
output _ _ O
info _ _ O
like _ _ O
: _ _ O
o _ _ O
what _ _ O
source _ _ O
file _ _ O
and _ _ O
line _ _ O
each _ _ O
instruction _ _ O
corresponds _ _ O
to _ _ O
o _ _ O
the _ _ O
names _ _ O
and _ _ O
locations _ _ O
of _ _ O
functions _ _ O
, _ _ O
globals _ _ O
, _ _ O
and _ _ O
locals _ _ O
o _ _ O
the _ _ O
types _ _ O
of _ _ O
storage _ _ O
locations _ _ O
o _ _ O
the _ _ O
structure _ _ O
of _ _ O
custom _ _ O
types _ _ O
( _ _ O
structs _ _ O
/ _ _ O
classes _ _ O
) _ _ O
o _ _ O
the _ _ O
arrangement _ _ O
of _ _ O
stack _ _ O
frames _ _ O
for _ _ O
each _ _ O
function _ _ O
● _ _ O
this _ _ O
way _ _ O
, _ _ O
when _ _ O
you _ _ O
run _ _ O
your _ _ O
program _ _ O
in _ _ O
a _ _ O
debugger _ _ O
, _ _ O
you _ _ O
can _ _ O
: _ _ O
o _ _ O
step _ _ O
through _ _ O
it _ _ O
line-by-line _ _ O
o _ _ O
inspect _ _ O
the _ _ O
contents _ _ O
of _ _ O
variables _ _ O
, _ _ O
arrays _ _ O
, _ _ O
etc _ _ O
. _ _ O
o _ _ O
have _ _ O
the _ _ O
debugger _ _ O
display _ _ O
that _ _ O
stuff _ _ O
in _ _ O
a _ _ O
human-readable _ _ O
way _ _ O
● _ _ O
this _ _ O
info _ _ O
is _ _ O
usually _ _ O
HUGE _ _ O
, _ _ O
so _ _ O
it _ _ O
's _ _ O
optional _ _ O
and _ _ O
typically _ _ O
removed _ _ O
in _ _ O
" _ _ O
release _ _ O
" _ _ O
versions _ _ O
. _ _ O
28 _ _ O

Executable _ _ O
formats _ _ O
● _ _ O
we _ _ O
ca _ _ O
n't _ _ O
dump _ _ O
a _ _ O
bunch _ _ O
of _ _ O
instructions _ _ O
out _ _ O
and _ _ O
expect _ _ O
them _ _ O
to _ _ O
run _ _ O
. _ _ O
● _ _ O
an _ _ O
executable _ _ O
format _ _ O
is _ _ O
like _ _ O
a _ _ O
seed _ _ O
, _ _ O
or _ _ O
an _ _ O
…… _ _ O
…… _ _ O
. _ _ O
egg _ _ O
o _ _ O
it _ _ O
has _ _ O
the _ _ O
code _ _ O
and _ _ O
all _ _ O
the _ _ O
metadata _ _ O
needed _ _ O
to _ _ O
support _ _ O
it _ _ O
. _ _ O
● _ _ O
the _ _ O
OS _ _ O
ABIs _ _ O
define _ _ O
these _ _ O
formats _ _ O
, _ _ O
but _ _ O
they _ _ O
basically _ _ O
all _ _ O
look _ _ O
like _ _ O
this _ _ O
: _ _ O
header _ _ O
a _ _ O
header _ _ O
that _ _ O
identifies _ _ O
the _ _ O
type _ _ O
of _ _ O
the _ _ O
file _ _ O
symbols _ _ O
a _ _ O
symbol _ _ O
table _ _ O
( _ _ O
names _ _ O
, _ _ O
kinds _ _ O
, _ _ O
addresses _ _ O
) _ _ O
relocs _ _ O
relocation _ _ O
records _ _ O
.text _ _ O
and _ _ O
then _ _ O
multiple _ _ O
sections _ _ O
for _ _ O
things _ _ O
like _ _ O
code _ _ O
( _ _ O
.text _ _ O
) _ _ O
, _ _ O
globals _ _ O
( _ _ O
.data _ _ O
) _ _ O
, _ _ O
constants _ _ O
( _ _ O
.rodata _ _ O
) _ _ O
, _ _ O
etc _ _ O
. _ _ O
.data _ _ O
.debug _ _ O
and _ _ O
optional _ _ O
debug _ _ O
info _ _ O
sections _ _ O
29 _ _ O

Object _ _ O
files _ _ O
, _ _ O
executables _ _ O
, _ _ O
and _ _ O
libraries _ _ O
● _ _ O
typically _ _ O
this _ _ O
format _ _ O
is _ _ O
used _ _ O
to _ _ O
represent _ _ O
three _ _ O
kinds _ _ O
of _ _ O
files _ _ O
: _ _ O
hello.exe _ _ O
object _ _ O
files _ _ O
: _ _ O
incomplete _ _ O
pieces _ _ O
which _ _ O
might _ _ O
correspond _ _ O
to _ _ O
a _ _ O
single _ _ O
source _ _ O
file _ _ O
or _ _ O
module _ _ O
. _ _ O
linking _ _ O
them _ _ O
together _ _ O
can _ _ O
produce _ _ O
… _ _ O
an _ _ O
executable _ _ O
, _ _ O
which _ _ O
has _ _ O
an _ _ O
entry _ _ O
point _ _ O
( _ _ O
the _ _ O
first _ _ O
function _ _ O
to _ _ O
be _ _ O
run _ _ O
when _ _ O
loaded _ _ O
) _ _ O
, _ _ O
or _ _ O
… _ _ O
a _ _ O
library _ _ O
( _ _ O
either _ _ O
static _ _ O
or _ _ O
dynamically _ _ O
linked _ _ O
) _ _ O
, _ _ O
which _ _ O
… _ _ O
does _ _ O
n't _ _ O
have _ _ O
an _ _ O
entry _ _ O
point _ _ O
. _ _ O
hello.dll _ _ O
instead _ _ O
, _ _ O
it _ _ O
exports _ _ O
functions _ _ O
to _ _ O
be _ _ O
used _ _ O
by _ _ O
other _ _ O
files _ _ O
. _ _ O
30 _ _ O

So _ _ O
what _ _ O
will _ _ O
we _ _ O
do _ _ O
? _ _ O
? _ _ O
● _ _ O
well _ _ O
, _ _ O
this _ _ O
is _ _ O
a _ _ O
compilers _ _ O
course _ _ O
, _ _ O
not _ _ O
a _ _ O
linkers _ _ O
course _ _ O
… _ _ O
● _ _ O
rather _ _ O
than _ _ O
output _ _ O
machine _ _ O
code _ _ O
, _ _ O
our _ _ O
compiler _ _ O
will _ _ O
output _ _ O
assembly _ _ O
language _ _ O
code _ _ O
. _ _ O
you _ _ O
know _ _ O
, _ _ O
just _ _ O
text _ _ O
. _ _ O
o _ _ O
see _ _ O
, _ _ O
MARS _ _ O
– _ _ O
the _ _ O
MIPS _ _ O
emulator _ _ O
– _ _ O
has _ _ O
a _ _ O
linker _ _ O
built _ _ O
into _ _ O
it _ _ O
. _ _ O
o _ _ O
so _ _ O
we _ _ O
'll _ _ O
let _ _ O
it _ _ O
" _ _ O
finish _ _ O
the _ _ O
job _ _ O
" _ _ O
and _ _ O
do _ _ O
the _ _ O
linking _ _ O
for _ _ O
us _ _ O
. _ _ O
● _ _ O
this _ _ O
might _ _ O
sound _ _ O
like _ _ O
a _ _ O
cop-out _ _ O
, _ _ O
but _ _ O
lots _ _ O
of _ _ O
compilers _ _ O
work _ _ O
this _ _ O
way _ _ O
! _ _ O
o _ _ O
not _ _ O
just _ _ O
toy _ _ O
compilers _ _ O
. _ _ O
gcc _ _ O
does _ _ O
this _ _ O
, _ _ O
if _ _ O
you _ _ O
ask _ _ O
it _ _ O
to _ _ O
. _ _ O
● _ _ O
many _ _ O
compilers _ _ O
output _ _ O
object _ _ O
files _ _ O
full _ _ O
of _ _ O
machine _ _ O
code _ _ O
so _ _ O
they _ _ O
can _ _ O
skip _ _ O
the _ _ O
assembly _ _ O
step _ _ O
and _ _ O
just _ _ O
go _ _ O
straight _ _ O
to _ _ O
linking _ _ O
… _ _ O
o _ _ O
but _ _ O
that _ _ O
's _ _ O
a _ _ O
compilation _ _ O
speed _ _ O
optimization _ _ O
, _ _ O
not _ _ O
a _ _ O
requirement _ _ O
. _ _ O
31 _ _ O



